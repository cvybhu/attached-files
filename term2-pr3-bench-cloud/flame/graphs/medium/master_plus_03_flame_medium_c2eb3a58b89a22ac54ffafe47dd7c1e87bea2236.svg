<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="790.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="773" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="773" > </text>
<g id="frames">
<g >
<title>[libc-2.33.so] (15 samples, 0.10%)</title><rect x="592.0" y="485" width="1.2" height="15.0" fill="rgb(220,20,24)" rx="2" ry="2" />
<text  x="594.99" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (4,899 samples, 33.42%)</title><rect x="770.9" y="453" width="394.4" height="15.0" fill="rgb(221,126,0)" rx="2" ry="2" />
<text  x="773.88" y="463.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7..</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (3 samples, 0.02%)</title><rect x="1166.5" y="469" width="0.2" height="15.0" fill="rgb(244,196,23)" rx="2" ry="2" />
<text  x="1169.49" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,639 samples, 79.41%)</title><rect x="234.5" y="581" width="937.1" height="15.0" fill="rgb(215,40,10)" rx="2" ry="2" />
<text  x="237.54" y="591.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (140 samples, 0.96%)</title><rect x="1173.1" y="629" width="11.3" height="15.0" fill="rgb(252,147,42)" rx="2" ry="2" />
<text  x="1176.09" y="639.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="645" width="948.7" height="15.0" fill="rgb(231,190,47)" rx="2" ry="2" />
<text  x="227.15" y="655.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[libc-2.33.so] (18 samples, 0.12%)</title><rect x="922.8" y="421" width="1.4" height="15.0" fill="rgb(243,124,38)" rx="2" ry="2" />
<text  x="925.80" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (5 samples, 0.03%)</title><rect x="1183.9" y="101" width="0.4" height="15.0" fill="rgb(220,50,4)" rx="2" ry="2" />
<text  x="1186.88" y="111.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (140 samples, 0.96%)</title><rect x="1173.1" y="677" width="11.3" height="15.0" fill="rgb(240,50,26)" rx="2" ry="2" />
<text  x="1176.09" y="687.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="677" width="948.7" height="15.0" fill="rgb(235,84,16)" rx="2" ry="2" />
<text  x="227.15" y="687.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (136 samples, 0.93%)</title><rect x="1173.3" y="549" width="11.0" height="15.0" fill="rgb(225,213,20)" rx="2" ry="2" />
<text  x="1176.33" y="559.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (140 samples, 0.96%)</title><rect x="1173.1" y="645" width="11.3" height="15.0" fill="rgb(238,21,12)" rx="2" ry="2" />
<text  x="1176.09" y="655.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (4 samples, 0.03%)</title><rect x="1189.4" y="693" width="0.3" height="15.0" fill="rgb(230,54,49)" rx="2" ry="2" />
<text  x="1192.36" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (6 samples, 0.04%)</title><rect x="1171.6" y="581" width="0.4" height="15.0" fill="rgb(216,177,15)" rx="2" ry="2" />
<text  x="1174.56" y="591.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (5,959 samples, 40.66%)</title><rect x="685.5" y="469" width="479.8" height="15.0" fill="rgb(217,213,44)" rx="2" ry="2" />
<text  x="688.54" y="479.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>__dynamic_cast (17 samples, 0.12%)</title><rect x="1167.5" y="501" width="1.3" height="15.0" fill="rgb(222,91,20)" rx="2" ry="2" />
<text  x="1170.46" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (2 samples, 0.01%)</title><rect x="1189.8" y="693" width="0.2" height="15.0" fill="rgb(207,23,52)" rx="2" ry="2" />
<text  x="1192.84" y="703.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (36 samples, 0.25%)</title><rect x="1181.4" y="277" width="2.9" height="15.0" fill="rgb(213,50,51)" rx="2" ry="2" />
<text  x="1184.39" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20 samples, 0.14%)</title><rect x="1168.8" y="501" width="1.6" height="15.0" fill="rgb(231,58,14)" rx="2" ry="2" />
<text  x="1171.83" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (29 samples, 0.20%)</title><rect x="1181.9" y="245" width="2.4" height="15.0" fill="rgb(229,117,29)" rx="2" ry="2" />
<text  x="1184.95" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.08%)</title><rect x="1165.3" y="469" width="0.9" height="15.0" fill="rgb(247,199,36)" rx="2" ry="2" />
<text  x="1168.28" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (134 samples, 0.91%)</title><rect x="1173.5" y="517" width="10.8" height="15.0" fill="rgb(228,92,17)" rx="2" ry="2" />
<text  x="1176.50" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (93 samples, 0.63%)</title><rect x="1176.8" y="405" width="7.5" height="15.0" fill="rgb(254,155,39)" rx="2" ry="2" />
<text  x="1179.80" y="415.5" ></text>
</g>
<g >
<title>[unknown] (210 samples, 1.43%)</title><rect x="1172.9" y="709" width="16.9" height="15.0" fill="rgb(205,59,6)" rx="2" ry="2" />
<text  x="1175.93" y="719.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (74 samples, 0.50%)</title><rect x="1178.3" y="357" width="6.0" height="15.0" fill="rgb(248,55,0)" rx="2" ry="2" />
<text  x="1181.33" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="629" width="948.7" height="15.0" fill="rgb(247,198,28)" rx="2" ry="2" />
<text  x="227.15" y="639.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[libc-2.33.so] (25 samples, 0.17%)</title><rect x="1184.6" y="661" width="2.0" height="15.0" fill="rgb(251,8,16)" rx="2" ry="2" />
<text  x="1187.61" y="671.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="613" width="948.7" height="15.0" fill="rgb(212,18,19)" rx="2" ry="2" />
<text  x="227.15" y="623.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[libc-2.33.so] (5 samples, 0.03%)</title><rect x="864.5" y="437" width="0.4" height="15.0" fill="rgb(250,132,18)" rx="2" ry="2" />
<text  x="867.51" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (28 samples, 0.19%)</title><rect x="1162.1" y="421" width="2.2" height="15.0" fill="rgb(220,143,44)" rx="2" ry="2" />
<text  x="1165.06" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (3 samples, 0.02%)</title><rect x="1184.0" y="53" width="0.3" height="15.0" fill="rgb(249,0,3)" rx="2" ry="2" />
<text  x="1187.04" y="63.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (14,430 samples, 98.45%)</title><rect x="11.2" y="709" width="1161.7" height="15.0" fill="rgb(209,81,22)" rx="2" ry="2" />
<text  x="14.21" y="719.5" >[libc-2.33.so]</text>
</g>
<g >
<title>[unknown] (143 samples, 0.98%)</title><rect x="1173.1" y="693" width="11.5" height="15.0" fill="rgb(211,161,46)" rx="2" ry="2" />
<text  x="1176.09" y="703.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (83 samples, 0.57%)</title><rect x="1177.6" y="373" width="6.7" height="15.0" fill="rgb(212,34,49)" rx="2" ry="2" />
<text  x="1180.60" y="383.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (44 samples, 0.30%)</title><rect x="1180.7" y="293" width="3.6" height="15.0" fill="rgb(216,48,0)" rx="2" ry="2" />
<text  x="1183.74" y="303.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (2 samples, 0.01%)</title><rect x="1161.9" y="277" width="0.2" height="15.0" fill="rgb(233,203,25)" rx="2" ry="2" />
<text  x="1164.90" y="287.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (9,959 samples, 67.95%)</title><rect x="368.7" y="549" width="801.8" height="15.0" fill="rgb(244,57,26)" rx="2" ry="2" />
<text  x="371.74" y="559.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (2,502 samples, 17.07%)</title><rect x="960.6" y="405" width="201.5" height="15.0" fill="rgb(252,200,45)" rx="2" ry="2" />
<text  x="963.63" y="415.5" >[perf_simple_query_flame_c..</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (592 samples, 4.04%)</title><rect x="1114.4" y="341" width="47.7" height="15.0" fill="rgb(253,155,32)" rx="2" ry="2" />
<text  x="1117.40" y="351.5" >[per..</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11 samples, 0.08%)</title><rect x="1183.4" y="149" width="0.9" height="15.0" fill="rgb(236,124,19)" rx="2" ry="2" />
<text  x="1186.40" y="159.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (78 samples, 0.53%)</title><rect x="1155.8" y="293" width="6.3" height="15.0" fill="rgb(246,14,27)" rx="2" ry="2" />
<text  x="1158.78" y="303.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (18 samples, 0.12%)</title><rect x="1182.8" y="229" width="1.5" height="15.0" fill="rgb(221,94,20)" rx="2" ry="2" />
<text  x="1185.83" y="239.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (16 samples, 0.11%)</title><rect x="684.3" y="469" width="1.2" height="15.0" fill="rgb(205,73,51)" rx="2" ry="2" />
<text  x="687.25" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1,150 samples, 7.85%)</title><rect x="1069.5" y="357" width="92.6" height="15.0" fill="rgb(205,159,51)" rx="2" ry="2" />
<text  x="1072.48" y="367.5" >[perf_simpl..</text>
</g>
<g >
<title>[libc-2.33.so] (5 samples, 0.03%)</title><rect x="286.1" y="565" width="0.4" height="15.0" fill="rgb(234,0,48)" rx="2" ry="2" />
<text  x="289.14" y="575.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (9 samples, 0.06%)</title><rect x="1166.7" y="485" width="0.8" height="15.0" fill="rgb(214,16,17)" rx="2" ry="2" />
<text  x="1169.73" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (136 samples, 0.93%)</title><rect x="1173.3" y="533" width="11.0" height="15.0" fill="rgb(243,101,44)" rx="2" ry="2" />
<text  x="1176.33" y="543.5" ></text>
</g>
<g >
<title>__dynamic_cast (11 samples, 0.08%)</title><rect x="1170.5" y="549" width="0.9" height="15.0" fill="rgb(248,107,10)" rx="2" ry="2" />
<text  x="1173.52" y="559.5" ></text>
</g>
<g >
<title>all (14,657 samples, 100%)</title><rect x="10.0" y="741" width="1180.0" height="15.0" fill="rgb(252,181,36)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (191 samples, 1.30%)</title><rect x="1146.7" y="309" width="15.4" height="15.0" fill="rgb(228,28,23)" rx="2" ry="2" />
<text  x="1149.69" y="319.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (16 samples, 0.11%)</title><rect x="521.4" y="501" width="1.3" height="15.0" fill="rgb(216,216,19)" rx="2" ry="2" />
<text  x="524.38" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (58 samples, 0.40%)</title><rect x="1179.6" y="325" width="4.7" height="15.0" fill="rgb(212,23,39)" rx="2" ry="2" />
<text  x="1182.61" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (137 samples, 0.93%)</title><rect x="1173.3" y="565" width="11.0" height="15.0" fill="rgb(228,148,2)" rx="2" ry="2" />
<text  x="1176.25" y="575.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (117 samples, 0.80%)</title><rect x="1174.9" y="453" width="9.4" height="15.0" fill="rgb(245,193,3)" rx="2" ry="2" />
<text  x="1177.86" y="463.5" ></text>
</g>
<g >
<title>perf_simple_que (14,657 samples, 100.00%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(244,188,51)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >perf_simple_que</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (68 samples, 0.46%)</title><rect x="1178.8" y="341" width="5.5" height="15.0" fill="rgb(241,148,44)" rx="2" ry="2" />
<text  x="1181.81" y="351.5" ></text>
</g>
<g >
<title>[[vdso]] (2,616 samples, 17.85%)</title><rect x="13.5" y="693" width="210.7" height="15.0" fill="rgb(214,160,22)" rx="2" ry="2" />
<text  x="16.54" y="703.5" >[[vdso]]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (121 samples, 0.83%)</title><rect x="1174.5" y="469" width="9.8" height="15.0" fill="rgb(239,137,35)" rx="2" ry="2" />
<text  x="1177.54" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,784 samples, 80.40%)</title><rect x="224.2" y="597" width="948.7" height="15.0" fill="rgb(248,189,1)" rx="2" ry="2" />
<text  x="227.23" y="607.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[libc-2.33.so] (44 samples, 0.30%)</title><rect x="767.3" y="453" width="3.6" height="15.0" fill="rgb(223,203,22)" rx="2" ry="2" />
<text  x="770.34" y="463.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (6 samples, 0.04%)</title><rect x="368.3" y="549" width="0.4" height="15.0" fill="rgb(238,173,53)" rx="2" ry="2" />
<text  x="371.26" y="559.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (2 samples, 0.01%)</title><rect x="1184.1" y="37" width="0.2" height="15.0" fill="rgb(242,157,4)" rx="2" ry="2" />
<text  x="1187.12" y="47.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (139 samples, 0.95%)</title><rect x="1173.2" y="581" width="11.2" height="15.0" fill="rgb(213,224,20)" rx="2" ry="2" />
<text  x="1176.17" y="591.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (3 samples, 0.02%)</title><rect x="960.4" y="405" width="0.2" height="15.0" fill="rgb(206,35,34)" rx="2" ry="2" />
<text  x="963.39" y="415.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (150 samples, 1.02%)</title><rect x="1102.3" y="341" width="12.1" height="15.0" fill="rgb(220,205,18)" rx="2" ry="2" />
<text  x="1105.33" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (8,582 samples, 58.55%)</title><rect x="479.5" y="517" width="690.9" height="15.0" fill="rgb(246,99,27)" rx="2" ry="2" />
<text  x="482.52" y="527.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (10,992 samples, 74.99%)</title><rect x="286.6" y="565" width="885.0" height="15.0" fill="rgb(228,73,19)" rx="2" ry="2" />
<text  x="289.62" y="575.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (9,233 samples, 62.99%)</title><rect x="427.2" y="533" width="743.3" height="15.0" fill="rgb(210,77,21)" rx="2" ry="2" />
<text  x="430.19" y="543.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[unknown] (59 samples, 0.40%)</title><rect x="1184.6" y="677" width="4.8" height="15.0" fill="rgb(212,35,42)" rx="2" ry="2" />
<text  x="1187.61" y="687.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (15 samples, 0.10%)</title><rect x="233.2" y="581" width="1.3" height="15.0" fill="rgb(231,129,34)" rx="2" ry="2" />
<text  x="236.25" y="591.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (140 samples, 0.96%)</title><rect x="1173.1" y="661" width="11.3" height="15.0" fill="rgb(245,83,8)" rx="2" ry="2" />
<text  x="1176.09" y="671.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (23 samples, 0.16%)</title><rect x="1186.6" y="661" width="1.9" height="15.0" fill="rgb(239,97,26)" rx="2" ry="2" />
<text  x="1189.62" y="671.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (4 samples, 0.03%)</title><rect x="1184.0" y="85" width="0.3" height="15.0" fill="rgb(251,161,1)" rx="2" ry="2" />
<text  x="1186.96" y="95.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (111 samples, 0.76%)</title><rect x="1175.3" y="437" width="9.0" height="15.0" fill="rgb(210,97,14)" rx="2" ry="2" />
<text  x="1178.35" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (125 samples, 0.85%)</title><rect x="1174.2" y="485" width="10.1" height="15.0" fill="rgb(233,164,5)" rx="2" ry="2" />
<text  x="1177.22" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (32 samples, 0.22%)</title><rect x="1181.7" y="261" width="2.6" height="15.0" fill="rgb(205,44,23)" rx="2" ry="2" />
<text  x="1184.71" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="1189.0" y="661" width="0.4" height="15.0" fill="rgb(242,179,37)" rx="2" ry="2" />
<text  x="1191.95" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (11 samples, 0.08%)</title><rect x="1164.4" y="437" width="0.9" height="15.0" fill="rgb(246,26,31)" rx="2" ry="2" />
<text  x="1167.40" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (17 samples, 0.12%)</title><rect x="1182.9" y="213" width="1.4" height="15.0" fill="rgb(206,166,29)" rx="2" ry="2" />
<text  x="1185.92" y="223.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (8,009 samples, 54.64%)</title><rect x="522.7" y="501" width="644.8" height="15.0" fill="rgb(251,106,47)" rx="2" ry="2" />
<text  x="525.67" y="511.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[libc-2.33.so] (14 samples, 0.10%)</title><rect x="426.1" y="533" width="1.1" height="15.0" fill="rgb(228,55,2)" rx="2" ry="2" />
<text  x="429.06" y="543.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (13 samples, 0.09%)</title><rect x="1183.2" y="181" width="1.1" height="15.0" fill="rgb(249,138,1)" rx="2" ry="2" />
<text  x="1186.24" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (4 samples, 0.03%)</title><rect x="1166.2" y="469" width="0.3" height="15.0" fill="rgb(217,26,20)" rx="2" ry="2" />
<text  x="1169.17" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (140 samples, 0.96%)</title><rect x="1173.1" y="613" width="11.3" height="15.0" fill="rgb(253,150,24)" rx="2" ry="2" />
<text  x="1176.09" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (8 samples, 0.05%)</title><rect x="1183.6" y="133" width="0.7" height="15.0" fill="rgb(208,93,41)" rx="2" ry="2" />
<text  x="1186.64" y="143.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (3,720 samples, 25.38%)</title><rect x="864.9" y="437" width="299.5" height="15.0" fill="rgb(222,194,0)" rx="2" ry="2" />
<text  x="867.91" y="447.5" >[perf_simple_query_flame_c2eb3a58b89a22a..</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1,996 samples, 13.62%)</title><rect x="1001.4" y="389" width="160.7" height="15.0" fill="rgb(237,21,28)" rx="2" ry="2" />
<text  x="1004.37" y="399.5" >[perf_simple_query_f..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (59 samples, 0.40%)</title><rect x="1184.6" y="693" width="4.8" height="15.0" fill="rgb(247,212,43)" rx="2" ry="2" />
<text  x="1187.61" y="703.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (13 samples, 0.09%)</title><rect x="1183.2" y="165" width="1.1" height="15.0" fill="rgb(251,191,26)" rx="2" ry="2" />
<text  x="1186.24" y="175.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.01%)</title><rect x="1172.8" y="581" width="0.1" height="15.0" fill="rgb(223,68,42)" rx="2" ry="2" />
<text  x="1175.77" y="591.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (107 samples, 0.73%)</title><rect x="1175.7" y="421" width="8.6" height="15.0" fill="rgb(233,127,40)" rx="2" ry="2" />
<text  x="1178.67" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (50 samples, 0.34%)</title><rect x="1180.3" y="309" width="4.0" height="15.0" fill="rgb(252,174,53)" rx="2" ry="2" />
<text  x="1183.26" y="319.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (2,953 samples, 20.15%)</title><rect x="924.3" y="421" width="237.8" height="15.0" fill="rgb(240,82,20)" rx="2" ry="2" />
<text  x="927.32" y="431.5" >[perf_simple_query_flame_c2eb3a..</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (8 samples, 0.05%)</title><rect x="1183.6" y="117" width="0.7" height="15.0" fill="rgb(248,147,13)" rx="2" ry="2" />
<text  x="1186.64" y="127.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (2 samples, 0.01%)</title><rect x="1172.9" y="693" width="0.2" height="15.0" fill="rgb(221,45,34)" rx="2" ry="2" />
<text  x="1175.93" y="703.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (20 samples, 0.14%)</title><rect x="999.8" y="389" width="1.6" height="15.0" fill="rgb(219,227,7)" rx="2" ry="2" />
<text  x="1002.76" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="693" width="948.7" height="15.0" fill="rgb(254,6,26)" rx="2" ry="2" />
<text  x="227.15" y="703.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (4 samples, 0.03%)</title><rect x="1184.0" y="69" width="0.3" height="15.0" fill="rgb(251,78,45)" rx="2" ry="2" />
<text  x="1186.96" y="79.5" ></text>
</g>
<g >
<title>[[vdso]] (14 samples, 0.10%)</title><rect x="10.0" y="709" width="1.1" height="15.0" fill="rgb(216,47,7)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (7,124 samples, 48.60%)</title><rect x="593.2" y="485" width="573.5" height="15.0" fill="rgb(219,203,41)" rx="2" ry="2" />
<text  x="596.20" y="495.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (6 samples, 0.04%)</title><rect x="1188.5" y="661" width="0.5" height="15.0" fill="rgb(213,74,0)" rx="2" ry="2" />
<text  x="1191.47" y="671.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.01%)</title><rect x="1171.4" y="549" width="0.2" height="15.0" fill="rgb(254,19,37)" rx="2" ry="2" />
<text  x="1174.40" y="559.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (263 samples, 1.79%)</title><rect x="1140.9" y="325" width="21.2" height="15.0" fill="rgb(243,163,10)" rx="2" ry="2" />
<text  x="1143.89" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (130 samples, 0.89%)</title><rect x="1173.8" y="501" width="10.5" height="15.0" fill="rgb(245,207,40)" rx="2" ry="2" />
<text  x="1176.82" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (13 samples, 0.09%)</title><rect x="1183.2" y="197" width="1.1" height="15.0" fill="rgb(205,15,32)" rx="2" ry="2" />
<text  x="1186.24" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (2 samples, 0.01%)</title><rect x="1189.8" y="709" width="0.2" height="15.0" fill="rgb(232,190,41)" rx="2" ry="2" />
<text  x="1192.84" y="719.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1,423 samples, 9.71%)</title><rect x="1047.5" y="373" width="114.6" height="15.0" fill="rgb(206,46,24)" rx="2" ry="2" />
<text  x="1050.50" y="383.5" >[perf_simple_q..</text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (140 samples, 0.96%)</title><rect x="1173.1" y="597" width="11.3" height="15.0" fill="rgb(243,121,4)" rx="2" ry="2" />
<text  x="1176.09" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (9 samples, 0.06%)</title><rect x="1172.0" y="581" width="0.8" height="15.0" fill="rgb(225,87,38)" rx="2" ry="2" />
<text  x="1175.05" y="591.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (87 samples, 0.59%)</title><rect x="1177.3" y="389" width="7.0" height="15.0" fill="rgb(244,98,12)" rx="2" ry="2" />
<text  x="1180.28" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (11,785 samples, 80.41%)</title><rect x="224.2" y="661" width="948.7" height="15.0" fill="rgb(220,102,24)" rx="2" ry="2" />
<text  x="227.15" y="671.5" >[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236]</text>
</g>
</g>
</svg>
