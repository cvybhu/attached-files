<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (7,127 samples, 48.86%)</title><rect x="593.5" y="421" width="576.6" height="15.0" fill="rgb(217,156,10)" rx="2" ry="2" />
<text  x="596.53" y="431.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (1,182 samples, 8.10%)</title><rect x="1070.4" y="293" width="95.7" height="15.0" fill="rgb(212,177,29)" rx="2" ry="2" />
<text  x="1073.43" y="303.5" >[perf_simpl..</text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2 samples, 0.01%)</title><rect x="367.2" y="485" width="0.1" height="15.0" fill="rgb(208,40,6)" rx="2" ry="2" />
<text  x="370.17" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (49 samples, 0.34%)</title><rect x="1182.0" y="261" width="4.0" height="15.0" fill="rgb(224,33,37)" rx="2" ry="2" />
<text  x="1184.99" y="271.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (8,557 samples, 58.67%)</title><rect x="480.5" y="453" width="692.3" height="15.0" fill="rgb(252,188,36)" rx="2" ry="2" />
<text  x="483.51" y="463.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (637 samples, 4.37%)</title><rect x="1114.5" y="277" width="51.6" height="15.0" fill="rgb(236,46,29)" rx="2" ry="2" />
<text  x="1117.52" y="287.5" >[perf..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (132 samples, 0.90%)</title><rect x="1175.3" y="549" width="10.7" height="15.0" fill="rgb(233,1,40)" rx="2" ry="2" />
<text  x="1178.28" y="559.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (6 samples, 0.04%)</title><rect x="1185.5" y="101" width="0.5" height="15.0" fill="rgb(240,22,39)" rx="2" ry="2" />
<text  x="1188.47" y="111.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,598 samples, 79.51%)</title><rect x="235.1" y="517" width="938.3" height="15.0" fill="rgb(231,99,9)" rx="2" ry="2" />
<text  x="238.14" y="527.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (60 samples, 0.41%)</title><rect x="1181.1" y="277" width="4.9" height="15.0" fill="rgb(207,151,35)" rx="2" ry="2" />
<text  x="1184.10" y="287.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (130 samples, 0.89%)</title><rect x="1175.4" y="517" width="10.6" height="15.0" fill="rgb(225,32,39)" rx="2" ry="2" />
<text  x="1178.44" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (1,972 samples, 13.52%)</title><rect x="1006.5" y="325" width="159.6" height="15.0" fill="rgb(221,34,3)" rx="2" ry="2" />
<text  x="1009.52" y="335.5" >[perf_simple_query_f..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (10,910 samples, 74.80%)</title><rect x="290.7" y="501" width="882.6" height="15.0" fill="rgb(246,94,0)" rx="2" ry="2" />
<text  x="293.72" y="511.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (132 samples, 0.90%)</title><rect x="1175.3" y="533" width="10.7" height="15.0" fill="rgb(249,30,54)" rx="2" ry="2" />
<text  x="1178.28" y="543.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (19 samples, 0.13%)</title><rect x="1166.1" y="357" width="1.5" height="15.0" fill="rgb(217,141,36)" rx="2" ry="2" />
<text  x="1169.05" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (9,958 samples, 68.27%)</title><rect x="367.3" y="485" width="805.6" height="15.0" fill="rgb(213,75,15)" rx="2" ry="2" />
<text  x="370.33" y="495.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1175.0" y="613" width="0.1" height="15.0" fill="rgb(234,196,21)" rx="2" ry="2" />
<text  x="1177.95" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (7 samples, 0.05%)</title><rect x="1185.4" y="117" width="0.6" height="15.0" fill="rgb(253,185,2)" rx="2" ry="2" />
<text  x="1188.39" y="127.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (9 samples, 0.06%)</title><rect x="422.7" y="469" width="0.8" height="15.0" fill="rgb(214,163,2)" rx="2" ry="2" />
<text  x="425.75" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (1,457 samples, 9.99%)</title><rect x="1048.2" y="309" width="117.9" height="15.0" fill="rgb(226,25,9)" rx="2" ry="2" />
<text  x="1051.18" y="319.5" >[perf_simple_q..</text>
</g>
<g >
<title>[libc-2.33.so] (16 samples, 0.11%)</title><rect x="592.2" y="421" width="1.3" height="15.0" fill="rgb(209,206,15)" rx="2" ry="2" />
<text  x="595.23" y="431.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (2 samples, 0.01%)</title><rect x="862.0" y="373" width="0.1" height="15.0" fill="rgb(208,110,53)" rx="2" ry="2" />
<text  x="864.95" y="383.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="581" width="950.4" height="15.0" fill="rgb(209,106,30)" rx="2" ry="2" />
<text  x="227.46" y="591.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2 samples, 0.01%)</title><rect x="1187.4" y="597" width="0.2" height="15.0" fill="rgb(221,73,53)" rx="2" ry="2" />
<text  x="1190.41" y="607.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (129 samples, 0.88%)</title><rect x="1175.5" y="485" width="10.5" height="15.0" fill="rgb(249,195,19)" rx="2" ry="2" />
<text  x="1178.52" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (236 samples, 1.62%)</title><rect x="1147.0" y="245" width="19.1" height="15.0" fill="rgb(211,171,4)" rx="2" ry="2" />
<text  x="1149.96" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (10 samples, 0.07%)</title><rect x="1168.1" y="373" width="0.8" height="15.0" fill="rgb(207,49,39)" rx="2" ry="2" />
<text  x="1171.08" y="383.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (21 samples, 0.14%)</title><rect x="1184.3" y="165" width="1.7" height="15.0" fill="rgb(227,175,51)" rx="2" ry="2" />
<text  x="1187.26" y="175.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (97 samples, 0.67%)</title><rect x="1178.1" y="341" width="7.9" height="15.0" fill="rgb(213,101,24)" rx="2" ry="2" />
<text  x="1181.11" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (36 samples, 0.25%)</title><rect x="1183.0" y="229" width="3.0" height="15.0" fill="rgb(227,188,40)" rx="2" ry="2" />
<text  x="1186.04" y="239.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (25 samples, 0.17%)</title><rect x="1183.9" y="181" width="2.1" height="15.0" fill="rgb(252,28,23)" rx="2" ry="2" />
<text  x="1186.93" y="191.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (128 samples, 0.88%)</title><rect x="1175.6" y="469" width="10.4" height="15.0" fill="rgb(226,166,10)" rx="2" ry="2" />
<text  x="1178.60" y="479.5" ></text>
</g>
<g >
<title>[unknown] (44 samples, 0.30%)</title><rect x="1186.0" y="613" width="3.6" height="15.0" fill="rgb(216,50,36)" rx="2" ry="2" />
<text  x="1189.04" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (129 samples, 0.88%)</title><rect x="1175.5" y="501" width="10.5" height="15.0" fill="rgb(236,224,34)" rx="2" ry="2" />
<text  x="1178.52" y="511.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (4 samples, 0.03%)</title><rect x="366.8" y="485" width="0.4" height="15.0" fill="rgb(219,179,29)" rx="2" ry="2" />
<text  x="369.85" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="533" width="950.4" height="15.0" fill="rgb(222,158,54)" rx="2" ry="2" />
<text  x="227.46" y="543.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[libc-2.33.so] (4 samples, 0.03%)</title><rect x="965.3" y="341" width="0.4" height="15.0" fill="rgb(215,224,43)" rx="2" ry="2" />
<text  x="968.34" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (80 samples, 0.55%)</title><rect x="1179.5" y="309" width="6.5" height="15.0" fill="rgb(224,166,15)" rx="2" ry="2" />
<text  x="1182.48" y="319.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (2 samples, 0.01%)</title><rect x="1172.8" y="453" width="0.1" height="15.0" fill="rgb(239,130,11)" rx="2" ry="2" />
<text  x="1175.77" y="463.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1185.8" y="37" width="0.2" height="15.0" fill="rgb(212,187,27)" rx="2" ry="2" />
<text  x="1188.79" y="47.5" ></text>
</g>
<g >
<title>[[vdso]] (15 samples, 0.10%)</title><rect x="10.0" y="645" width="1.2" height="15.0" fill="rgb(213,206,36)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (83 samples, 0.57%)</title><rect x="1159.3" y="229" width="6.8" height="15.0" fill="rgb(206,193,51)" rx="2" ry="2" />
<text  x="1162.34" y="239.5" ></text>
</g>
<g >
<title>[unknown] (134 samples, 0.92%)</title><rect x="1175.2" y="629" width="10.8" height="15.0" fill="rgb(207,74,34)" rx="2" ry="2" />
<text  x="1178.20" y="639.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (8 samples, 0.05%)</title><rect x="479.8" y="453" width="0.6" height="15.0" fill="rgb(227,36,2)" rx="2" ry="2" />
<text  x="482.78" y="463.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="629" width="950.4" height="15.0" fill="rgb(239,6,17)" rx="2" ry="2" />
<text  x="227.46" y="639.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2,477 samples, 16.98%)</title><rect x="965.7" y="341" width="200.4" height="15.0" fill="rgb(220,184,54)" rx="2" ry="2" />
<text  x="968.67" y="351.5" >[perf_simple_query_flame_9..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (5 samples, 0.03%)</title><rect x="1185.6" y="85" width="0.4" height="15.0" fill="rgb(235,181,34)" rx="2" ry="2" />
<text  x="1188.55" y="95.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (30 samples, 0.21%)</title><rect x="766.7" y="389" width="2.5" height="15.0" fill="rgb(226,33,26)" rx="2" ry="2" />
<text  x="769.73" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="597" width="950.4" height="15.0" fill="rgb(244,194,14)" rx="2" ry="2" />
<text  x="227.46" y="607.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (29 samples, 0.20%)</title><rect x="1183.6" y="197" width="2.4" height="15.0" fill="rgb(230,213,23)" rx="2" ry="2" />
<text  x="1186.61" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (5 samples, 0.03%)</title><rect x="1173.4" y="517" width="0.4" height="15.0" fill="rgb(206,68,40)" rx="2" ry="2" />
<text  x="1176.42" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (7,985 samples, 54.74%)</title><rect x="525.0" y="437" width="646.0" height="15.0" fill="rgb(206,11,7)" rx="2" ry="2" />
<text  x="528.01" y="447.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (127 samples, 0.87%)</title><rect x="1175.7" y="453" width="10.3" height="15.0" fill="rgb(234,189,2)" rx="2" ry="2" />
<text  x="1178.68" y="463.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (17 samples, 0.12%)</title><rect x="1005.1" y="325" width="1.4" height="15.0" fill="rgb(224,74,18)" rx="2" ry="2" />
<text  x="1008.14" y="335.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (15 samples, 0.10%)</title><rect x="684.1" y="405" width="1.2" height="15.0" fill="rgb(223,13,14)" rx="2" ry="2" />
<text  x="687.14" y="415.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (3 samples, 0.02%)</title><rect x="290.5" y="501" width="0.2" height="15.0" fill="rgb(217,10,53)" rx="2" ry="2" />
<text  x="293.48" y="511.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="1172.9" y="485" width="0.3" height="15.0" fill="rgb(245,67,2)" rx="2" ry="2" />
<text  x="1175.93" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2,981 samples, 20.44%)</title><rect x="924.9" y="357" width="241.2" height="15.0" fill="rgb(209,169,27)" rx="2" ry="2" />
<text  x="927.89" y="367.5" >[perf_simple_query_flame_9c40516..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="613" width="950.4" height="15.0" fill="rgb(233,90,49)" rx="2" ry="2" />
<text  x="227.46" y="623.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[libc-2.33.so] (132 samples, 0.90%)</title><rect x="1175.3" y="613" width="10.7" height="15.0" fill="rgb(219,64,14)" rx="2" ry="2" />
<text  x="1178.28" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="549" width="950.4" height="15.0" fill="rgb(243,53,24)" rx="2" ry="2" />
<text  x="227.46" y="559.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (132 samples, 0.90%)</title><rect x="1175.3" y="597" width="10.7" height="15.0" fill="rgb(243,226,46)" rx="2" ry="2" />
<text  x="1178.28" y="607.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1185.8" y="69" width="0.2" height="15.0" fill="rgb(218,122,30)" rx="2" ry="2" />
<text  x="1188.79" y="79.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (9,264 samples, 63.51%)</title><rect x="423.5" y="469" width="749.4" height="15.0" fill="rgb(251,0,54)" rx="2" ry="2" />
<text  x="426.48" y="479.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.01%)</title><rect x="1173.2" y="485" width="0.1" height="15.0" fill="rgb(217,162,49)" rx="2" ry="2" />
<text  x="1176.17" y="495.5" ></text>
</g>
<g >
<title>[unknown] (185 samples, 1.27%)</title><rect x="1175.0" y="645" width="14.9" height="15.0" fill="rgb(248,96,52)" rx="2" ry="2" />
<text  x="1177.95" y="655.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (101 samples, 0.69%)</title><rect x="1177.8" y="357" width="8.2" height="15.0" fill="rgb(209,195,33)" rx="2" ry="2" />
<text  x="1180.78" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2 samples, 0.01%)</title><rect x="924.7" y="357" width="0.2" height="15.0" fill="rgb(243,101,53)" rx="2" ry="2" />
<text  x="927.73" y="367.5" ></text>
</g>
<g >
<title>perf_simple_que (14,585 samples, 99.99%)</title><rect x="10.0" y="661" width="1179.9" height="15.0" fill="rgb(214,99,28)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >perf_simple_que</text>
</g>
<g >
<title>[libc-2.33.so] (14 samples, 0.10%)</title><rect x="234.0" y="517" width="1.1" height="15.0" fill="rgb(249,85,22)" rx="2" ry="2" />
<text  x="237.01" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (18 samples, 0.12%)</title><rect x="1187.6" y="597" width="1.4" height="15.0" fill="rgb(223,190,52)" rx="2" ry="2" />
<text  x="1190.57" y="607.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.04%)</title><rect x="1167.6" y="357" width="0.5" height="15.0" fill="rgb(217,88,10)" rx="2" ry="2" />
<text  x="1170.59" y="367.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="1189.4" y="597" width="0.2" height="15.0" fill="rgb(253,224,15)" rx="2" ry="2" />
<text  x="1192.43" y="607.5" ></text>
</g>
<g >
<title>__dynamic_cast (15 samples, 0.10%)</title><rect x="1171.0" y="437" width="1.2" height="15.0" fill="rgb(223,27,22)" rx="2" ry="2" />
<text  x="1173.99" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (2 samples, 0.01%)</title><rect x="1169.9" y="405" width="0.1" height="15.0" fill="rgb(224,192,3)" rx="2" ry="2" />
<text  x="1172.86" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (42 samples, 0.29%)</title><rect x="1182.6" y="245" width="3.4" height="15.0" fill="rgb(239,61,7)" rx="2" ry="2" />
<text  x="1185.56" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (12 samples, 0.08%)</title><rect x="1168.9" y="405" width="1.0" height="15.0" fill="rgb(246,33,5)" rx="2" ry="2" />
<text  x="1171.89" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (116 samples, 0.80%)</title><rect x="1176.6" y="389" width="9.4" height="15.0" fill="rgb(222,66,31)" rx="2" ry="2" />
<text  x="1179.57" y="399.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (136 samples, 0.93%)</title><rect x="1103.5" y="277" width="11.0" height="15.0" fill="rgb(213,58,34)" rx="2" ry="2" />
<text  x="1106.52" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (13 samples, 0.09%)</title><rect x="1173.8" y="517" width="1.1" height="15.0" fill="rgb(216,194,21)" rx="2" ry="2" />
<text  x="1176.82" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (18 samples, 0.12%)</title><rect x="1184.5" y="149" width="1.5" height="15.0" fill="rgb(237,120,19)" rx="2" ry="2" />
<text  x="1187.50" y="159.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (69 samples, 0.47%)</title><rect x="1180.4" y="293" width="5.6" height="15.0" fill="rgb(208,186,14)" rx="2" ry="2" />
<text  x="1183.37" y="303.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (328 samples, 2.25%)</title><rect x="1139.5" y="261" width="26.6" height="15.0" fill="rgb(237,155,33)" rx="2" ry="2" />
<text  x="1142.52" y="271.5" >[..</text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.08%)</title><rect x="1170.1" y="421" width="0.9" height="15.0" fill="rgb(231,108,33)" rx="2" ry="2" />
<text  x="1173.10" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (91 samples, 0.62%)</title><rect x="1178.6" y="325" width="7.4" height="15.0" fill="rgb(245,9,10)" rx="2" ry="2" />
<text  x="1181.59" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (127 samples, 0.87%)</title><rect x="1175.7" y="437" width="10.3" height="15.0" fill="rgb(229,72,2)" rx="2" ry="2" />
<text  x="1178.68" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (126 samples, 0.86%)</title><rect x="1175.8" y="421" width="10.2" height="15.0" fill="rgb(213,58,2)" rx="2" ry="2" />
<text  x="1178.76" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (120 samples, 0.82%)</title><rect x="1176.2" y="405" width="9.8" height="15.0" fill="rgb(209,185,28)" rx="2" ry="2" />
<text  x="1179.25" y="415.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (6 samples, 0.04%)</title><rect x="524.5" y="437" width="0.5" height="15.0" fill="rgb(242,110,38)" rx="2" ry="2" />
<text  x="527.52" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (11,748 samples, 80.54%)</title><rect x="224.5" y="565" width="950.4" height="15.0" fill="rgb(233,71,48)" rx="2" ry="2" />
<text  x="227.46" y="575.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (108 samples, 0.74%)</title><rect x="1177.2" y="373" width="8.8" height="15.0" fill="rgb(216,132,44)" rx="2" ry="2" />
<text  x="1180.22" y="383.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.01%)</title><rect x="1189.6" y="629" width="0.2" height="15.0" fill="rgb(232,39,36)" rx="2" ry="2" />
<text  x="1192.60" y="639.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (44 samples, 0.30%)</title><rect x="1186.0" y="629" width="3.6" height="15.0" fill="rgb(245,72,30)" rx="2" ry="2" />
<text  x="1189.04" y="639.5" ></text>
</g>
<g >
<title>[[vdso]] (2,604 samples, 17.85%)</title><rect x="13.8" y="629" width="210.7" height="15.0" fill="rgb(207,214,2)" rx="2" ry="2" />
<text  x="16.80" y="639.5" >[[vdso]]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (10 samples, 0.07%)</title><rect x="1185.1" y="133" width="0.9" height="15.0" fill="rgb(245,124,20)" rx="2" ry="2" />
<text  x="1188.15" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.05%)</title><rect x="1172.2" y="437" width="0.6" height="15.0" fill="rgb(220,10,45)" rx="2" ry="2" />
<text  x="1175.20" y="447.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (6 samples, 0.04%)</title><rect x="924.2" y="357" width="0.5" height="15.0" fill="rgb(252,174,28)" rx="2" ry="2" />
<text  x="927.25" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (5,976 samples, 40.97%)</title><rect x="685.4" y="405" width="483.5" height="15.0" fill="rgb(206,173,30)" rx="2" ry="2" />
<text  x="688.43" y="415.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1175.0" y="597" width="0.1" height="15.0" fill="rgb(214,143,25)" rx="2" ry="2" />
<text  x="1177.95" y="607.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (3,782 samples, 25.93%)</title><rect x="862.1" y="373" width="306.0" height="15.0" fill="rgb(208,161,34)" rx="2" ry="2" />
<text  x="865.11" y="383.5" >[perf_simple_query_flame_9c4051607141ccef..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (35 samples, 0.24%)</title><rect x="1183.1" y="213" width="2.9" height="15.0" fill="rgb(237,153,24)" rx="2" ry="2" />
<text  x="1186.12" y="223.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (4,941 samples, 33.87%)</title><rect x="769.2" y="389" width="399.7" height="15.0" fill="rgb(211,167,38)" rx="2" ry="2" />
<text  x="772.16" y="399.5" >[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f8..</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1185.8" y="53" width="0.2" height="15.0" fill="rgb(236,70,26)" rx="2" ry="2" />
<text  x="1188.79" y="63.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1175.0" y="565" width="0.1" height="15.0" fill="rgb(216,30,31)" rx="2" ry="2" />
<text  x="1177.95" y="575.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (2 samples, 0.01%)</title><rect x="1175.0" y="581" width="0.1" height="15.0" fill="rgb(205,170,39)" rx="2" ry="2" />
<text  x="1177.95" y="591.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (14,383 samples, 98.61%)</title><rect x="11.3" y="645" width="1163.6" height="15.0" fill="rgb(230,191,50)" rx="2" ry="2" />
<text  x="14.29" y="655.5" >[libc-2.33.so]</text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (132 samples, 0.90%)</title><rect x="1175.3" y="581" width="10.7" height="15.0" fill="rgb(244,168,27)" rx="2" ry="2" />
<text  x="1178.28" y="591.5" ></text>
</g>
<g >
<title>all (14,586 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(247,216,48)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (132 samples, 0.90%)</title><rect x="1175.3" y="565" width="10.7" height="15.0" fill="rgb(235,166,39)" rx="2" ry="2" />
<text  x="1178.28" y="575.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (5 samples, 0.03%)</title><rect x="1189.0" y="597" width="0.4" height="15.0" fill="rgb(208,103,11)" rx="2" ry="2" />
<text  x="1192.03" y="607.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (2 samples, 0.01%)</title><rect x="1175.0" y="629" width="0.1" height="15.0" fill="rgb(250,139,54)" rx="2" ry="2" />
<text  x="1177.95" y="639.5" ></text>
</g>
<g >
<title>[libc-2.33.so] (17 samples, 0.12%)</title><rect x="1186.0" y="597" width="1.4" height="15.0" fill="rgb(215,169,31)" rx="2" ry="2" />
<text  x="1189.04" y="607.5" ></text>
</g>
</g>
</svg>
