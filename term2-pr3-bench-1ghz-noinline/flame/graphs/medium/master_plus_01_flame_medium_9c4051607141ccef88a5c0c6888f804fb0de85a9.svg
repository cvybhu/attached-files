<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="616.1" y="437" width="0.1" height="15.0" fill="rgb(219,80,27)" rx="2" ry="2" />
<text  x="619.08" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (177 samples, 0.37%)</title><rect x="475.9" y="213" width="4.4" height="15.0" fill="rgb(233,180,46)" rx="2" ry="2" />
<text  x="478.94" y="223.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (8 samples, 0.02%)</title><rect x="593.8" y="405" width="0.2" height="15.0" fill="rgb(244,170,23)" rx="2" ry="2" />
<text  x="596.79" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%)</title><rect x="901.2" y="277" width="0.3" height="15.0" fill="rgb(241,148,14)" rx="2" ry="2" />
<text  x="904.17" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%)</title><rect x="929.2" y="389" width="0.3" height="15.0" fill="rgb(229,2,25)" rx="2" ry="2" />
<text  x="932.19" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%)</title><rect x="101.0" y="405" width="0.1" height="15.0" fill="rgb(238,112,29)" rx="2" ry="2" />
<text  x="103.99" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%)</title><rect x="425.3" y="357" width="0.2" height="15.0" fill="rgb(217,140,51)" rx="2" ry="2" />
<text  x="428.26" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (28 samples, 0.06%)</title><rect x="705.9" y="501" width="0.7" height="15.0" fill="rgb(239,215,23)" rx="2" ry="2" />
<text  x="708.94" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (22 samples, 0.05%)</title><rect x="492.3" y="277" width="0.6" height="15.0" fill="rgb(235,102,50)" rx="2" ry="2" />
<text  x="495.31" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (14 samples, 0.03%)</title><rect x="1163.8" y="453" width="0.3" height="15.0" fill="rgb(216,100,47)" rx="2" ry="2" />
<text  x="1166.80" y="463.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="943.9" y="389" width="0.2" height="15.0" fill="rgb(247,49,44)" rx="2" ry="2" />
<text  x="946.94" y="399.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (30 samples, 0.06%)</title><rect x="401.8" y="197" width="0.7" height="15.0" fill="rgb(208,206,22)" rx="2" ry="2" />
<text  x="404.79" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (9 samples, 0.02%)</title><rect x="613.4" y="437" width="0.3" height="15.0" fill="rgb(240,19,8)" rx="2" ry="2" />
<text  x="616.45" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (15 samples, 0.03%)</title><rect x="1036.8" y="213" width="0.3" height="15.0" fill="rgb(211,57,9)" rx="2" ry="2" />
<text  x="1039.76" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="1142.3" y="309" width="0.2" height="15.0" fill="rgb(238,196,7)" rx="2" ry="2" />
<text  x="1145.25" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.01%)</title><rect x="725.7" y="357" width="0.2" height="15.0" fill="rgb(212,159,37)" rx="2" ry="2" />
<text  x="728.71" y="367.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%)</title><rect x="953.3" y="373" width="0.1" height="15.0" fill="rgb(210,1,6)" rx="2" ry="2" />
<text  x="956.28" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (12 samples, 0.03%)</title><rect x="151.5" y="245" width="0.3" height="15.0" fill="rgb(235,96,40)" rx="2" ry="2" />
<text  x="154.47" y="255.5" ></text>
</g>
<g >
<title>row_cache::make_reader (498 samples, 1.04%)</title><rect x="518.5" y="341" width="12.2" height="15.0" fill="rgb(230,199,33)" rx="2" ry="2" />
<text  x="521.47" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (18 samples, 0.04%)</title><rect x="690.8" y="469" width="0.5" height="15.0" fill="rgb(237,190,10)" rx="2" ry="2" />
<text  x="693.82" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (12 samples, 0.03%)</title><rect x="23.9" y="517" width="0.3" height="15.0" fill="rgb(252,68,45)" rx="2" ry="2" />
<text  x="26.91" y="527.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%)</title><rect x="915.5" y="389" width="0.2" height="15.0" fill="rgb(210,219,24)" rx="2" ry="2" />
<text  x="918.50" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (8 samples, 0.02%)</title><rect x="830.3" y="293" width="0.2" height="15.0" fill="rgb(247,121,48)" rx="2" ry="2" />
<text  x="833.35" y="303.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (177 samples, 0.37%)</title><rect x="499.5" y="229" width="4.3" height="15.0" fill="rgb(244,136,33)" rx="2" ry="2" />
<text  x="502.45" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume (25 samples, 0.05%)</title><rect x="282.3" y="277" width="0.6" height="15.0" fill="rgb(235,65,45)" rx="2" ry="2" />
<text  x="285.26" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="401.4" y="181" width="0.1" height="15.0" fill="rgb(226,186,7)" rx="2" ry="2" />
<text  x="404.40" y="191.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%)</title><rect x="631.2" y="485" width="0.5" height="15.0" fill="rgb(236,217,52)" rx="2" ry="2" />
<text  x="634.20" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (89 samples, 0.19%)</title><rect x="834.6" y="405" width="2.1" height="15.0" fill="rgb(244,195,4)" rx="2" ry="2" />
<text  x="837.56" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%)</title><rect x="910.6" y="357" width="0.3" height="15.0" fill="rgb(213,130,34)" rx="2" ry="2" />
<text  x="913.55" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (63 samples, 0.13%)</title><rect x="527.4" y="261" width="1.6" height="15.0" fill="rgb(220,154,48)" rx="2" ry="2" />
<text  x="530.40" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (65 samples, 0.14%)</title><rect x="846.1" y="373" width="1.6" height="15.0" fill="rgb(215,200,13)" rx="2" ry="2" />
<text  x="849.13" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20 samples, 0.04%)</title><rect x="1067.1" y="261" width="0.5" height="15.0" fill="rgb(254,207,39)" rx="2" ry="2" />
<text  x="1070.09" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (30 samples, 0.06%)</title><rect x="679.3" y="421" width="0.7" height="15.0" fill="rgb(250,22,40)" rx="2" ry="2" />
<text  x="682.29" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="165.3" y="213" width="0.1" height="15.0" fill="rgb(244,144,13)" rx="2" ry="2" />
<text  x="168.26" y="223.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (7 samples, 0.01%)</title><rect x="1081.9" y="325" width="0.1" height="15.0" fill="rgb(224,192,36)" rx="2" ry="2" />
<text  x="1084.87" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (72 samples, 0.15%)</title><rect x="739.3" y="325" width="1.8" height="15.0" fill="rgb(248,116,47)" rx="2" ry="2" />
<text  x="742.31" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (126 samples, 0.26%)</title><rect x="905.8" y="341" width="3.1" height="15.0" fill="rgb(249,42,52)" rx="2" ry="2" />
<text  x="908.77" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%)</title><rect x="219.2" y="149" width="0.4" height="15.0" fill="rgb(247,120,47)" rx="2" ry="2" />
<text  x="222.17" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (37 samples, 0.08%)</title><rect x="674.3" y="469" width="0.9" height="15.0" fill="rgb(251,56,24)" rx="2" ry="2" />
<text  x="677.27" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (10 samples, 0.02%)</title><rect x="943.1" y="405" width="0.2" height="15.0" fill="rgb(240,16,37)" rx="2" ry="2" />
<text  x="946.06" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.04%)</title><rect x="1155.4" y="421" width="0.4" height="15.0" fill="rgb(254,78,51)" rx="2" ry="2" />
<text  x="1158.40" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (111 samples, 0.23%)</title><rect x="1186.1" y="613" width="2.7" height="15.0" fill="rgb(214,173,0)" rx="2" ry="2" />
<text  x="1189.06" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (6 samples, 0.01%)</title><rect x="733.3" y="389" width="0.1" height="15.0" fill="rgb(213,45,34)" rx="2" ry="2" />
<text  x="736.30" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%)</title><rect x="494.0" y="261" width="0.1" height="15.0" fill="rgb(254,176,2)" rx="2" ry="2" />
<text  x="496.96" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%)</title><rect x="294.5" y="293" width="0.3" height="15.0" fill="rgb(230,152,23)" rx="2" ry="2" />
<text  x="297.55" y="303.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (73 samples, 0.15%)</title><rect x="782.8" y="293" width="1.8" height="15.0" fill="rgb(207,130,16)" rx="2" ry="2" />
<text  x="785.82" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="443.5" y="309" width="0.1" height="15.0" fill="rgb(254,145,37)" rx="2" ry="2" />
<text  x="446.48" y="319.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,692 samples, 3.53%)</title><rect x="774.2" y="341" width="41.7" height="15.0" fill="rgb(241,137,10)" rx="2" ry="2" />
<text  x="777.22" y="351.5" >ser..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (102 samples, 0.21%)</title><rect x="655.0" y="469" width="2.5" height="15.0" fill="rgb(224,143,18)" rx="2" ry="2" />
<text  x="658.04" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="439.7" y="261" width="0.1" height="15.0" fill="rgb(209,217,1)" rx="2" ry="2" />
<text  x="442.66" y="271.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%)</title><rect x="844.0" y="405" width="0.7" height="15.0" fill="rgb(227,77,54)" rx="2" ry="2" />
<text  x="847.01" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (17 samples, 0.04%)</title><rect x="549.3" y="341" width="0.5" height="15.0" fill="rgb(240,201,12)" rx="2" ry="2" />
<text  x="552.35" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%)</title><rect x="918.9" y="341" width="0.2" height="15.0" fill="rgb(236,82,20)" rx="2" ry="2" />
<text  x="921.90" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (21 samples, 0.04%)</title><rect x="846.8" y="357" width="0.5" height="15.0" fill="rgb(239,163,22)" rx="2" ry="2" />
<text  x="849.82" y="367.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (26 samples, 0.05%)</title><rect x="1141.5" y="485" width="0.6" height="15.0" fill="rgb(252,73,48)" rx="2" ry="2" />
<text  x="1144.49" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (10 samples, 0.02%)</title><rect x="42.9" y="469" width="0.2" height="15.0" fill="rgb(211,53,50)" rx="2" ry="2" />
<text  x="45.85" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (9 samples, 0.02%)</title><rect x="912.2" y="357" width="0.2" height="15.0" fill="rgb(206,180,37)" rx="2" ry="2" />
<text  x="915.18" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (155 samples, 0.32%)</title><rect x="157.0" y="229" width="3.8" height="15.0" fill="rgb(234,129,49)" rx="2" ry="2" />
<text  x="160.01" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (11 samples, 0.02%)</title><rect x="847.1" y="325" width="0.2" height="15.0" fill="rgb(245,16,4)" rx="2" ry="2" />
<text  x="850.07" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%)</title><rect x="80.4" y="453" width="0.3" height="15.0" fill="rgb(234,62,7)" rx="2" ry="2" />
<text  x="83.40" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (45 samples, 0.09%)</title><rect x="18.3" y="325" width="1.2" height="15.0" fill="rgb(206,97,6)" rx="2" ry="2" />
<text  x="21.35" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="417.7" y="357" width="0.1" height="15.0" fill="rgb(210,86,32)" rx="2" ry="2" />
<text  x="420.67" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (61 samples, 0.13%)</title><rect x="917.7" y="373" width="1.5" height="15.0" fill="rgb(253,83,41)" rx="2" ry="2" />
<text  x="920.67" y="383.5" ></text>
</g>
<g >
<title>operator delete (63 samples, 0.13%)</title><rect x="406.0" y="245" width="1.6" height="15.0" fill="rgb(208,125,34)" rx="2" ry="2" />
<text  x="409.00" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (8 samples, 0.02%)</title><rect x="612.1" y="373" width="0.2" height="15.0" fill="rgb(221,145,30)" rx="2" ry="2" />
<text  x="615.14" y="383.5" ></text>
</g>
<g >
<title>tombstone::apply (17 samples, 0.04%)</title><rect x="389.7" y="197" width="0.4" height="15.0" fill="rgb(219,203,32)" rx="2" ry="2" />
<text  x="392.67" y="207.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (11 samples, 0.02%)</title><rect x="1142.5" y="213" width="0.3" height="15.0" fill="rgb(232,153,27)" rx="2" ry="2" />
<text  x="1145.55" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (131 samples, 0.27%)</title><rect x="435.9" y="277" width="3.2" height="15.0" fill="rgb(235,31,51)" rx="2" ry="2" />
<text  x="438.87" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (25 samples, 0.05%)</title><rect x="156.4" y="213" width="0.6" height="15.0" fill="rgb(206,228,2)" rx="2" ry="2" />
<text  x="159.40" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (87 samples, 0.18%)</title><rect x="734.3" y="357" width="2.1" height="15.0" fill="rgb(206,50,45)" rx="2" ry="2" />
<text  x="737.28" y="367.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (19 samples, 0.04%)</title><rect x="372.8" y="181" width="0.4" height="15.0" fill="rgb(239,130,28)" rx="2" ry="2" />
<text  x="375.78" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.01%)</title><rect x="221.3" y="117" width="0.1" height="15.0" fill="rgb(233,89,8)" rx="2" ry="2" />
<text  x="224.26" y="127.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (12 samples, 0.03%)</title><rect x="951.8" y="357" width="0.3" height="15.0" fill="rgb(235,88,41)" rx="2" ry="2" />
<text  x="954.85" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (153 samples, 0.32%)</title><rect x="1049.1" y="261" width="3.8" height="15.0" fill="rgb(243,126,23)" rx="2" ry="2" />
<text  x="1052.09" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="653.5" y="485" width="0.1" height="15.0" fill="rgb(240,84,33)" rx="2" ry="2" />
<text  x="656.49" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (37 samples, 0.08%)</title><rect x="838.2" y="437" width="0.9" height="15.0" fill="rgb(213,80,29)" rx="2" ry="2" />
<text  x="841.18" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (145 samples, 0.30%)</title><rect x="933.3" y="373" width="3.5" height="15.0" fill="rgb(206,103,42)" rx="2" ry="2" />
<text  x="936.26" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (5 samples, 0.01%)</title><rect x="266.4" y="325" width="0.1" height="15.0" fill="rgb(224,76,54)" rx="2" ry="2" />
<text  x="269.40" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (17 samples, 0.04%)</title><rect x="803.7" y="101" width="0.4" height="15.0" fill="rgb(237,140,32)" rx="2" ry="2" />
<text  x="806.65" y="111.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (151 samples, 0.32%)</title><rect x="219.6" y="165" width="3.7" height="15.0" fill="rgb(243,104,10)" rx="2" ry="2" />
<text  x="222.59" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (691 samples, 1.44%)</title><rect x="788.6" y="261" width="17.0" height="15.0" fill="rgb(231,130,40)" rx="2" ry="2" />
<text  x="791.63" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%)</title><rect x="1137.4" y="421" width="0.2" height="15.0" fill="rgb(252,215,0)" rx="2" ry="2" />
<text  x="1140.42" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30 samples, 0.06%)</title><rect x="981.0" y="309" width="0.7" height="15.0" fill="rgb(227,59,47)" rx="2" ry="2" />
<text  x="984.00" y="319.5" ></text>
</g>
<g >
<title>database::query (1,016 samples, 2.12%)</title><rect x="1018.3" y="261" width="25.1" height="15.0" fill="rgb(239,59,8)" rx="2" ry="2" />
<text  x="1021.34" y="271.5" >d..</text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (6 samples, 0.01%)</title><rect x="544.5" y="389" width="0.1" height="15.0" fill="rgb(248,70,36)" rx="2" ry="2" />
<text  x="547.47" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.01%)</title><rect x="804.6" y="133" width="0.2" height="15.0" fill="rgb(219,24,15)" rx="2" ry="2" />
<text  x="807.61" y="143.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (27 samples, 0.06%)</title><rect x="895.0" y="277" width="0.6" height="15.0" fill="rgb(237,198,53)" rx="2" ry="2" />
<text  x="897.96" y="287.5" ></text>
</g>
<g >
<title>operator new (79 samples, 0.16%)</title><rect x="1118.6" y="357" width="2.0" height="15.0" fill="rgb(235,118,41)" rx="2" ry="2" />
<text  x="1121.64" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (50 samples, 0.10%)</title><rect x="853.6" y="421" width="1.2" height="15.0" fill="rgb(247,96,20)" rx="2" ry="2" />
<text  x="856.62" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (7 samples, 0.01%)</title><rect x="10.1" y="485" width="0.2" height="15.0" fill="rgb(220,66,0)" rx="2" ry="2" />
<text  x="13.10" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.01%)</title><rect x="524.2" y="277" width="0.2" height="15.0" fill="rgb(232,27,9)" rx="2" ry="2" />
<text  x="527.18" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (10 samples, 0.02%)</title><rect x="221.2" y="133" width="0.2" height="15.0" fill="rgb(244,133,53)" rx="2" ry="2" />
<text  x="224.16" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (16 samples, 0.03%)</title><rect x="632.7" y="485" width="0.4" height="15.0" fill="rgb(242,191,1)" rx="2" ry="2" />
<text  x="635.68" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%)</title><rect x="737.9" y="341" width="0.2" height="15.0" fill="rgb(242,44,40)" rx="2" ry="2" />
<text  x="740.90" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (8 samples, 0.02%)</title><rect x="1139.9" y="421" width="0.2" height="15.0" fill="rgb(228,102,26)" rx="2" ry="2" />
<text  x="1142.86" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (21 samples, 0.04%)</title><rect x="555.0" y="293" width="0.5" height="15.0" fill="rgb(217,37,38)" rx="2" ry="2" />
<text  x="557.98" y="303.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (8 samples, 0.02%)</title><rect x="873.9" y="437" width="0.2" height="15.0" fill="rgb(221,174,29)" rx="2" ry="2" />
<text  x="876.91" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (38 samples, 0.08%)</title><rect x="764.3" y="341" width="1.0" height="15.0" fill="rgb(213,171,1)" rx="2" ry="2" />
<text  x="767.33" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (7 samples, 0.01%)</title><rect x="600.1" y="437" width="0.2" height="15.0" fill="rgb(213,21,42)" rx="2" ry="2" />
<text  x="603.15" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%)</title><rect x="300.2" y="261" width="0.7" height="15.0" fill="rgb(232,29,48)" rx="2" ry="2" />
<text  x="303.16" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (157 samples, 0.33%)</title><rect x="251.1" y="245" width="3.8" height="15.0" fill="rgb(208,124,10)" rx="2" ry="2" />
<text  x="254.06" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (34 samples, 0.07%)</title><rect x="173.9" y="133" width="0.8" height="15.0" fill="rgb(251,9,25)" rx="2" ry="2" />
<text  x="176.88" y="143.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (153 samples, 0.32%)</title><rect x="444.9" y="277" width="3.8" height="15.0" fill="rgb(242,177,27)" rx="2" ry="2" />
<text  x="447.88" y="287.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.01%)</title><rect x="197.4" y="85" width="0.1" height="15.0" fill="rgb(232,228,45)" rx="2" ry="2" />
<text  x="200.37" y="95.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%)</title><rect x="633.1" y="485" width="0.4" height="15.0" fill="rgb(229,216,11)" rx="2" ry="2" />
<text  x="636.12" y="495.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (21 samples, 0.04%)</title><rect x="314.1" y="165" width="0.5" height="15.0" fill="rgb(212,152,34)" rx="2" ry="2" />
<text  x="317.10" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%)</title><rect x="18.7" y="277" width="0.1" height="15.0" fill="rgb(213,173,22)" rx="2" ry="2" />
<text  x="21.69" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (14 samples, 0.03%)</title><rect x="815.5" y="325" width="0.4" height="15.0" fill="rgb(232,143,41)" rx="2" ry="2" />
<text  x="818.55" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,261 samples, 2.63%)</title><rect x="547.5" y="405" width="31.0" height="15.0" fill="rgb(224,142,10)" rx="2" ry="2" />
<text  x="550.47" y="415.5" >fl..</text>
</g>
<g >
<title>operator new (27 samples, 0.06%)</title><rect x="835.6" y="373" width="0.7" height="15.0" fill="rgb(211,178,2)" rx="2" ry="2" />
<text  x="838.62" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,751 samples, 12.00%)</title><rect x="122.1" y="325" width="141.7" height="15.0" fill="rgb(225,205,0)" rx="2" ry="2" />
<text  x="125.14" y="335.5" >mutation_reader_me..</text>
</g>
<g >
<title>seastar::reactor::add_task (5 samples, 0.01%)</title><rect x="1144.1" y="501" width="0.1" height="15.0" fill="rgb(228,17,43)" rx="2" ry="2" />
<text  x="1147.10" y="511.5" ></text>
</g>
<g >
<title>local_schema_registry (8 samples, 0.02%)</title><rect x="976.2" y="357" width="0.2" height="15.0" fill="rgb(239,183,25)" rx="2" ry="2" />
<text  x="979.18" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%)</title><rect x="757.9" y="293" width="0.3" height="15.0" fill="rgb(234,48,17)" rx="2" ry="2" />
<text  x="760.95" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (22 samples, 0.05%)</title><rect x="794.9" y="165" width="0.6" height="15.0" fill="rgb(241,83,35)" rx="2" ry="2" />
<text  x="797.93" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (11 samples, 0.02%)</title><rect x="273.6" y="341" width="0.3" height="15.0" fill="rgb(252,205,1)" rx="2" ry="2" />
<text  x="276.59" y="351.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="526.9" y="277" width="0.1" height="15.0" fill="rgb(224,227,23)" rx="2" ry="2" />
<text  x="529.86" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (5 samples, 0.01%)</title><rect x="723.4" y="309" width="0.1" height="15.0" fill="rgb(230,134,6)" rx="2" ry="2" />
<text  x="726.40" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (13 samples, 0.03%)</title><rect x="902.4" y="277" width="0.3" height="15.0" fill="rgb(243,124,19)" rx="2" ry="2" />
<text  x="905.42" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (5 samples, 0.01%)</title><rect x="404.4" y="213" width="0.1" height="15.0" fill="rgb(226,87,44)" rx="2" ry="2" />
<text  x="407.35" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (5 samples, 0.01%)</title><rect x="19.7" y="325" width="0.1" height="15.0" fill="rgb(219,166,47)" rx="2" ry="2" />
<text  x="22.68" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (8 samples, 0.02%)</title><rect x="986.6" y="341" width="0.2" height="15.0" fill="rgb(208,116,48)" rx="2" ry="2" />
<text  x="989.59" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (34 samples, 0.07%)</title><rect x="579.3" y="421" width="0.8" height="15.0" fill="rgb(250,181,44)" rx="2" ry="2" />
<text  x="582.27" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (31 samples, 0.06%)</title><rect x="641.6" y="437" width="0.8" height="15.0" fill="rgb(213,0,47)" rx="2" ry="2" />
<text  x="644.64" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (91 samples, 0.19%)</title><rect x="763.1" y="389" width="2.2" height="15.0" fill="rgb(211,227,43)" rx="2" ry="2" />
<text  x="766.07" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (399 samples, 0.83%)</title><rect x="309.2" y="213" width="9.8" height="15.0" fill="rgb(228,39,49)" rx="2" ry="2" />
<text  x="312.20" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (762 samples, 1.59%)</title><rect x="547.8" y="389" width="18.8" height="15.0" fill="rgb(218,158,35)" rx="2" ry="2" />
<text  x="550.82" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (8 samples, 0.02%)</title><rect x="388.9" y="165" width="0.2" height="15.0" fill="rgb(211,96,37)" rx="2" ry="2" />
<text  x="391.86" y="175.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (7 samples, 0.01%)</title><rect x="1140.5" y="437" width="0.2" height="15.0" fill="rgb(227,150,15)" rx="2" ry="2" />
<text  x="1143.48" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%)</title><rect x="510.3" y="325" width="0.1" height="15.0" fill="rgb(214,109,19)" rx="2" ry="2" />
<text  x="513.27" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (13 samples, 0.03%)</title><rect x="1106.3" y="373" width="0.3" height="15.0" fill="rgb(232,155,33)" rx="2" ry="2" />
<text  x="1109.30" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%)</title><rect x="1046.5" y="277" width="0.2" height="15.0" fill="rgb(205,164,28)" rx="2" ry="2" />
<text  x="1049.53" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (27 samples, 0.06%)</title><rect x="591.2" y="405" width="0.7" height="15.0" fill="rgb(207,152,13)" rx="2" ry="2" />
<text  x="594.21" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,338 samples, 11.14%)</title><rect x="716.7" y="453" width="131.5" height="15.0" fill="rgb(225,89,10)" rx="2" ry="2" />
<text  x="719.72" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.01%)</title><rect x="284.6" y="325" width="0.2" height="15.0" fill="rgb(217,48,25)" rx="2" ry="2" />
<text  x="287.62" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (642 samples, 1.34%)</title><rect x="373.2" y="181" width="15.9" height="15.0" fill="rgb(209,196,47)" rx="2" ry="2" />
<text  x="376.25" y="191.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.01%)</title><rect x="246.2" y="197" width="0.2" height="15.0" fill="rgb(254,88,23)" rx="2" ry="2" />
<text  x="249.21" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%)</title><rect x="18.7" y="213" width="0.1" height="15.0" fill="rgb(218,228,42)" rx="2" ry="2" />
<text  x="21.69" y="223.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (12 samples, 0.03%)</title><rect x="1056.2" y="293" width="0.3" height="15.0" fill="rgb(223,13,36)" rx="2" ry="2" />
<text  x="1059.16" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (24 samples, 0.05%)</title><rect x="789.3" y="229" width="0.6" height="15.0" fill="rgb(250,92,28)" rx="2" ry="2" />
<text  x="792.30" y="239.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (50 samples, 0.10%)</title><rect x="243.9" y="181" width="1.2" height="15.0" fill="rgb(252,112,39)" rx="2" ry="2" />
<text  x="246.87" y="191.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%)</title><rect x="494.7" y="245" width="0.2" height="15.0" fill="rgb(206,186,8)" rx="2" ry="2" />
<text  x="497.68" y="255.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (13 samples, 0.03%)</title><rect x="73.0" y="405" width="0.4" height="15.0" fill="rgb(217,172,27)" rx="2" ry="2" />
<text  x="76.04" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%)</title><rect x="755.9" y="357" width="0.2" height="15.0" fill="rgb(242,30,19)" rx="2" ry="2" />
<text  x="758.85" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%)</title><rect x="839.7" y="389" width="0.3" height="15.0" fill="rgb(238,182,9)" rx="2" ry="2" />
<text  x="842.65" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (59 samples, 0.12%)</title><rect x="16.0" y="373" width="1.4" height="15.0" fill="rgb(211,8,33)" rx="2" ry="2" />
<text  x="18.96" y="383.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%)</title><rect x="541.3" y="357" width="0.8" height="15.0" fill="rgb(215,156,28)" rx="2" ry="2" />
<text  x="544.29" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%)</title><rect x="1099.2" y="245" width="0.1" height="15.0" fill="rgb(234,60,20)" rx="2" ry="2" />
<text  x="1102.16" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (135 samples, 0.28%)</title><rect x="640.5" y="469" width="3.3" height="15.0" fill="rgb(205,166,42)" rx="2" ry="2" />
<text  x="643.48" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (40 samples, 0.08%)</title><rect x="618.1" y="405" width="1.0" height="15.0" fill="rgb(240,165,12)" rx="2" ry="2" />
<text  x="621.12" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (668 samples, 1.39%)</title><rect x="1026.2" y="245" width="16.4" height="15.0" fill="rgb(225,205,51)" rx="2" ry="2" />
<text  x="1029.17" y="255.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (18 samples, 0.04%)</title><rect x="850.0" y="389" width="0.4" height="15.0" fill="rgb(232,75,12)" rx="2" ry="2" />
<text  x="852.97" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (33 samples, 0.07%)</title><rect x="164.6" y="229" width="0.8" height="15.0" fill="rgb(206,131,24)" rx="2" ry="2" />
<text  x="167.57" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (9 samples, 0.02%)</title><rect x="1176.6" y="453" width="0.2" height="15.0" fill="rgb(209,20,3)" rx="2" ry="2" />
<text  x="1179.58" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (28 samples, 0.06%)</title><rect x="149.2" y="245" width="0.7" height="15.0" fill="rgb(213,206,47)" rx="2" ry="2" />
<text  x="152.23" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (6 samples, 0.01%)</title><rect x="449.7" y="277" width="0.2" height="15.0" fill="rgb(252,5,10)" rx="2" ry="2" />
<text  x="452.74" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (10 samples, 0.02%)</title><rect x="808.9" y="213" width="0.3" height="15.0" fill="rgb(225,211,52)" rx="2" ry="2" />
<text  x="811.92" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (53 samples, 0.11%)</title><rect x="786.9" y="245" width="1.3" height="15.0" fill="rgb(249,184,16)" rx="2" ry="2" />
<text  x="789.91" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (8 samples, 0.02%)</title><rect x="497.4" y="229" width="0.2" height="15.0" fill="rgb(248,15,29)" rx="2" ry="2" />
<text  x="500.44" y="239.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (15 samples, 0.03%)</title><rect x="893.0" y="293" width="0.4" height="15.0" fill="rgb(234,112,13)" rx="2" ry="2" />
<text  x="896.04" y="303.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (91 samples, 0.19%)</title><rect x="828.6" y="373" width="2.2" height="15.0" fill="rgb(248,158,48)" rx="2" ry="2" />
<text  x="831.57" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (15 samples, 0.03%)</title><rect x="1012.3" y="261" width="0.4" height="15.0" fill="rgb(209,102,49)" rx="2" ry="2" />
<text  x="1015.30" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (5 samples, 0.01%)</title><rect x="23.6" y="517" width="0.2" height="15.0" fill="rgb(214,215,6)" rx="2" ry="2" />
<text  x="26.64" y="527.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (9 samples, 0.02%)</title><rect x="749.6" y="357" width="0.2" height="15.0" fill="rgb(219,147,15)" rx="2" ry="2" />
<text  x="752.57" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (30 samples, 0.06%)</title><rect x="1116.6" y="373" width="0.8" height="15.0" fill="rgb(237,191,27)" rx="2" ry="2" />
<text  x="1119.62" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.01%)</title><rect x="830.9" y="405" width="0.2" height="15.0" fill="rgb(222,180,23)" rx="2" ry="2" />
<text  x="833.91" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (8 samples, 0.02%)</title><rect x="952.6" y="357" width="0.2" height="15.0" fill="rgb(232,110,52)" rx="2" ry="2" />
<text  x="955.59" y="367.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%)</title><rect x="581.9" y="405" width="0.6" height="15.0" fill="rgb(209,93,14)" rx="2" ry="2" />
<text  x="584.88" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,812 samples, 22.56%)</title><rect x="874.1" y="437" width="266.3" height="15.0" fill="rgb(252,54,44)" rx="2" ry="2" />
<text  x="877.11" y="447.5" >cql3::statements::select_statement:..</text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (19 samples, 0.04%)</title><rect x="1100.5" y="309" width="0.5" height="15.0" fill="rgb(248,162,12)" rx="2" ry="2" />
<text  x="1103.51" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (93 samples, 0.19%)</title><rect x="504.6" y="245" width="2.3" height="15.0" fill="rgb(236,192,53)" rx="2" ry="2" />
<text  x="507.58" y="255.5" ></text>
</g>
<g >
<title>tracing::add_table_name (6 samples, 0.01%)</title><rect x="1141.1" y="437" width="0.1" height="15.0" fill="rgb(235,178,43)" rx="2" ry="2" />
<text  x="1144.09" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (9 samples, 0.02%)</title><rect x="862.7" y="389" width="0.2" height="15.0" fill="rgb(213,185,42)" rx="2" ry="2" />
<text  x="865.65" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.02%)</title><rect x="539.9" y="341" width="0.2" height="15.0" fill="rgb(254,49,4)" rx="2" ry="2" />
<text  x="542.91" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (595 samples, 1.24%)</title><rect x="235.9" y="261" width="14.7" height="15.0" fill="rgb(236,197,26)" rx="2" ry="2" />
<text  x="238.91" y="271.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%)</title><rect x="280.5" y="277" width="1.8" height="15.0" fill="rgb(217,171,49)" rx="2" ry="2" />
<text  x="283.49" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (347 samples, 0.72%)</title><rect x="472.5" y="245" width="8.6" height="15.0" fill="rgb(239,95,32)" rx="2" ry="2" />
<text  x="475.54" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (24 samples, 0.05%)</title><rect x="328.0" y="181" width="0.6" height="15.0" fill="rgb(254,87,45)" rx="2" ry="2" />
<text  x="330.96" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%)</title><rect x="260.2" y="277" width="0.1" height="15.0" fill="rgb(244,86,3)" rx="2" ry="2" />
<text  x="263.17" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (20 samples, 0.04%)</title><rect x="903.7" y="325" width="0.5" height="15.0" fill="rgb(241,127,11)" rx="2" ry="2" />
<text  x="906.71" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%)</title><rect x="1159.8" y="357" width="0.4" height="15.0" fill="rgb(247,220,29)" rx="2" ry="2" />
<text  x="1162.83" y="367.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (80 samples, 0.17%)</title><rect x="538.6" y="389" width="2.0" height="15.0" fill="rgb(209,164,28)" rx="2" ry="2" />
<text  x="541.61" y="399.5" ></text>
</g>
<g >
<title>row::external_memory_usage (294 samples, 0.61%)</title><rect x="207.7" y="149" width="7.3" height="15.0" fill="rgb(210,68,19)" rx="2" ry="2" />
<text  x="210.74" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.02%)</title><rect x="418.6" y="373" width="0.3" height="15.0" fill="rgb(246,143,29)" rx="2" ry="2" />
<text  x="421.63" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="837.7" y="437" width="0.3" height="15.0" fill="rgb(247,63,48)" rx="2" ry="2" />
<text  x="840.73" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (10 samples, 0.02%)</title><rect x="131.5" y="261" width="0.2" height="15.0" fill="rgb(205,91,4)" rx="2" ry="2" />
<text  x="134.48" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,508 samples, 9.41%)</title><rect x="422.5" y="389" width="111.0" height="15.0" fill="rgb(232,142,48)" rx="2" ry="2" />
<text  x="425.52" y="399.5" >std::function..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%)</title><rect x="144.1" y="277" width="0.1" height="15.0" fill="rgb(217,58,39)" rx="2" ry="2" />
<text  x="147.06" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="970.8" y="373" width="0.2" height="15.0" fill="rgb(238,113,17)" rx="2" ry="2" />
<text  x="973.83" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (27 samples, 0.06%)</title><rect x="18.7" y="309" width="0.6" height="15.0" fill="rgb(247,53,29)" rx="2" ry="2" />
<text  x="21.67" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%)</title><rect x="106.0" y="421" width="0.2" height="15.0" fill="rgb(241,44,1)" rx="2" ry="2" />
<text  x="109.04" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (17 samples, 0.04%)</title><rect x="744.7" y="405" width="0.4" height="15.0" fill="rgb(225,98,54)" rx="2" ry="2" />
<text  x="747.72" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (6 samples, 0.01%)</title><rect x="234.3" y="245" width="0.2" height="15.0" fill="rgb(215,62,51)" rx="2" ry="2" />
<text  x="237.31" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%)</title><rect x="42.1" y="469" width="0.5" height="15.0" fill="rgb(245,228,8)" rx="2" ry="2" />
<text  x="45.09" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (39 samples, 0.08%)</title><rect x="130.8" y="277" width="0.9" height="15.0" fill="rgb(223,159,2)" rx="2" ry="2" />
<text  x="133.76" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%)</title><rect x="826.7" y="293" width="0.4" height="15.0" fill="rgb(205,215,0)" rx="2" ry="2" />
<text  x="829.73" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (7 samples, 0.01%)</title><rect x="229.2" y="133" width="0.2" height="15.0" fill="rgb(253,97,51)" rx="2" ry="2" />
<text  x="232.22" y="143.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (34 samples, 0.07%)</title><rect x="221.9" y="133" width="0.8" height="15.0" fill="rgb(216,32,28)" rx="2" ry="2" />
<text  x="224.88" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%)</title><rect x="233.5" y="229" width="0.4" height="15.0" fill="rgb(214,120,40)" rx="2" ry="2" />
<text  x="236.48" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (11 samples, 0.02%)</title><rect x="996.6" y="261" width="0.3" height="15.0" fill="rgb(222,160,35)" rx="2" ry="2" />
<text  x="999.59" y="271.5" ></text>
</g>
<g >
<title>dht::shard_of (32 samples, 0.07%)</title><rect x="1010.7" y="277" width="0.8" height="15.0" fill="rgb(245,39,2)" rx="2" ry="2" />
<text  x="1013.70" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (13 samples, 0.03%)</title><rect x="863.8" y="373" width="0.3" height="15.0" fill="rgb(220,158,46)" rx="2" ry="2" />
<text  x="866.79" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (11 samples, 0.02%)</title><rect x="1081.5" y="341" width="0.2" height="15.0" fill="rgb(234,158,4)" rx="2" ry="2" />
<text  x="1084.48" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (25 samples, 0.05%)</title><rect x="703.7" y="421" width="0.6" height="15.0" fill="rgb(247,190,49)" rx="2" ry="2" />
<text  x="706.67" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (879 samples, 1.83%)</title><rect x="888.4" y="357" width="21.6" height="15.0" fill="rgb(252,74,26)" rx="2" ry="2" />
<text  x="891.36" y="367.5" >c..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (7 samples, 0.01%)</title><rect x="566.4" y="373" width="0.2" height="15.0" fill="rgb(242,66,7)" rx="2" ry="2" />
<text  x="569.41" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (19 samples, 0.04%)</title><rect x="515.6" y="325" width="0.5" height="15.0" fill="rgb(232,102,16)" rx="2" ry="2" />
<text  x="518.63" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (7 samples, 0.01%)</title><rect x="252.3" y="213" width="0.2" height="15.0" fill="rgb(206,4,36)" rx="2" ry="2" />
<text  x="255.29" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (35 samples, 0.07%)</title><rect x="765.6" y="357" width="0.8" height="15.0" fill="rgb(254,135,29)" rx="2" ry="2" />
<text  x="768.58" y="367.5" ></text>
</g>
<g >
<title>posix_memalign (32 samples, 0.07%)</title><rect x="201.4" y="85" width="0.8" height="15.0" fill="rgb(238,187,1)" rx="2" ry="2" />
<text  x="204.41" y="95.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%)</title><rect x="679.4" y="357" width="0.6" height="15.0" fill="rgb(248,109,21)" rx="2" ry="2" />
<text  x="682.37" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (8 samples, 0.02%)</title><rect x="1142.8" y="213" width="0.2" height="15.0" fill="rgb(218,85,13)" rx="2" ry="2" />
<text  x="1145.84" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (32 samples, 0.07%)</title><rect x="38.6" y="421" width="0.8" height="15.0" fill="rgb(217,18,2)" rx="2" ry="2" />
<text  x="41.59" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%)</title><rect x="758.3" y="309" width="0.2" height="15.0" fill="rgb(228,182,43)" rx="2" ry="2" />
<text  x="761.34" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (12 samples, 0.03%)</title><rect x="1133.5" y="421" width="0.3" height="15.0" fill="rgb(252,83,52)" rx="2" ry="2" />
<text  x="1136.51" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%)</title><rect x="52.0" y="453" width="0.2" height="15.0" fill="rgb(212,169,30)" rx="2" ry="2" />
<text  x="55.01" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (33 samples, 0.07%)</title><rect x="863.3" y="485" width="0.9" height="15.0" fill="rgb(245,81,35)" rx="2" ry="2" />
<text  x="866.34" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="1038.6" y="213" width="0.1" height="15.0" fill="rgb(252,102,0)" rx="2" ry="2" />
<text  x="1041.58" y="223.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%)</title><rect x="512.1" y="277" width="0.7" height="15.0" fill="rgb(250,101,28)" rx="2" ry="2" />
<text  x="515.11" y="287.5" ></text>
</g>
<g >
<title>database::find_schema (292 samples, 0.61%)</title><rect x="753.0" y="405" width="7.2" height="15.0" fill="rgb(223,71,47)" rx="2" ry="2" />
<text  x="756.02" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="36.9" y="437" width="0.1" height="15.0" fill="rgb(205,102,27)" rx="2" ry="2" />
<text  x="39.87" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.01%)</title><rect x="18.2" y="309" width="0.1" height="15.0" fill="rgb(219,163,23)" rx="2" ry="2" />
<text  x="21.15" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (44 samples, 0.09%)</title><rect x="776.7" y="293" width="1.0" height="15.0" fill="rgb(218,58,24)" rx="2" ry="2" />
<text  x="779.66" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (8 samples, 0.02%)</title><rect x="1003.1" y="261" width="0.2" height="15.0" fill="rgb(214,46,21)" rx="2" ry="2" />
<text  x="1006.07" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (6 samples, 0.01%)</title><rect x="214.8" y="133" width="0.2" height="15.0" fill="rgb(233,42,53)" rx="2" ry="2" />
<text  x="217.83" y="143.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (20 samples, 0.04%)</title><rect x="333.4" y="181" width="0.5" height="15.0" fill="rgb(251,160,39)" rx="2" ry="2" />
<text  x="336.41" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.05%)</title><rect x="1142.5" y="261" width="0.6" height="15.0" fill="rgb(241,229,47)" rx="2" ry="2" />
<text  x="1145.52" y="271.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%)</title><rect x="889.6" y="309" width="1.4" height="15.0" fill="rgb(252,222,24)" rx="2" ry="2" />
<text  x="892.64" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (38 samples, 0.08%)</title><rect x="646.3" y="469" width="0.9" height="15.0" fill="rgb(223,223,32)" rx="2" ry="2" />
<text  x="649.27" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (20 samples, 0.04%)</title><rect x="531.6" y="341" width="0.5" height="15.0" fill="rgb(223,130,17)" rx="2" ry="2" />
<text  x="534.62" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (16 samples, 0.03%)</title><rect x="794.1" y="197" width="0.4" height="15.0" fill="rgb(243,56,20)" rx="2" ry="2" />
<text  x="797.10" y="207.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%)</title><rect x="863.8" y="309" width="0.2" height="15.0" fill="rgb(238,128,6)" rx="2" ry="2" />
<text  x="866.81" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%)</title><rect x="1035.8" y="197" width="0.2" height="15.0" fill="rgb(239,91,39)" rx="2" ry="2" />
<text  x="1038.80" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%)</title><rect x="80.0" y="453" width="0.4" height="15.0" fill="rgb(227,181,23)" rx="2" ry="2" />
<text  x="82.96" y="463.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%)</title><rect x="36.7" y="453" width="0.3" height="15.0" fill="rgb(253,196,2)" rx="2" ry="2" />
<text  x="39.67" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,926 samples, 10.28%)</title><rect x="292.5" y="325" width="121.3" height="15.0" fill="rgb(237,3,38)" rx="2" ry="2" />
<text  x="295.48" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7 samples, 0.01%)</title><rect x="679.0" y="485" width="0.2" height="15.0" fill="rgb(206,38,5)" rx="2" ry="2" />
<text  x="682.05" y="495.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (176 samples, 0.37%)</title><rect x="1031.1" y="181" width="4.4" height="15.0" fill="rgb(221,93,3)" rx="2" ry="2" />
<text  x="1034.12" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (10 samples, 0.02%)</title><rect x="780.7" y="309" width="0.3" height="15.0" fill="rgb(211,198,7)" rx="2" ry="2" />
<text  x="783.73" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (100 samples, 0.21%)</title><rect x="239.5" y="213" width="2.5" height="15.0" fill="rgb(212,211,17)" rx="2" ry="2" />
<text  x="242.53" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%)</title><rect x="566.3" y="373" width="0.1" height="15.0" fill="rgb(211,33,54)" rx="2" ry="2" />
<text  x="569.29" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (55 samples, 0.11%)</title><rect x="1110.1" y="405" width="1.4" height="15.0" fill="rgb(243,116,15)" rx="2" ry="2" />
<text  x="1113.14" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (12 samples, 0.03%)</title><rect x="613.0" y="437" width="0.2" height="15.0" fill="rgb(254,201,28)" rx="2" ry="2" />
<text  x="615.95" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (6 samples, 0.01%)</title><rect x="812.9" y="309" width="0.2" height="15.0" fill="rgb(210,130,39)" rx="2" ry="2" />
<text  x="815.94" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%)</title><rect x="23.3" y="517" width="0.1" height="15.0" fill="rgb(229,212,19)" rx="2" ry="2" />
<text  x="26.27" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (12 samples, 0.03%)</title><rect x="1046.7" y="277" width="0.3" height="15.0" fill="rgb(214,196,34)" rx="2" ry="2" />
<text  x="1049.68" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (25 samples, 0.05%)</title><rect x="1108.7" y="389" width="0.6" height="15.0" fill="rgb(242,146,10)" rx="2" ry="2" />
<text  x="1111.69" y="399.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%)</title><rect x="609.8" y="389" width="0.8" height="15.0" fill="rgb(208,145,39)" rx="2" ry="2" />
<text  x="612.78" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (273 samples, 0.57%)</title><rect x="682.2" y="485" width="6.8" height="15.0" fill="rgb(216,86,18)" rx="2" ry="2" />
<text  x="685.25" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (8 samples, 0.02%)</title><rect x="914.4" y="357" width="0.2" height="15.0" fill="rgb(241,128,35)" rx="2" ry="2" />
<text  x="917.44" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (59 samples, 0.12%)</title><rect x="240.5" y="181" width="1.5" height="15.0" fill="rgb(235,74,35)" rx="2" ry="2" />
<text  x="243.54" y="191.5" ></text>
</g>
<g >
<title>do_cql_test (274 samples, 0.57%)</title><rect x="15.4" y="549" width="6.7" height="15.0" fill="rgb(254,32,23)" rx="2" ry="2" />
<text  x="18.39" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%)</title><rect x="987.8" y="277" width="1.7" height="15.0" fill="rgb(215,223,41)" rx="2" ry="2" />
<text  x="990.78" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (8 samples, 0.02%)</title><rect x="294.3" y="293" width="0.2" height="15.0" fill="rgb(245,152,5)" rx="2" ry="2" />
<text  x="297.35" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="1133.8" y="421" width="0.3" height="15.0" fill="rgb(249,13,1)" rx="2" ry="2" />
<text  x="1136.83" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%)</title><rect x="512.1" y="261" width="0.7" height="15.0" fill="rgb(216,196,13)" rx="2" ry="2" />
<text  x="515.14" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%)</title><rect x="551.1" y="293" width="0.2" height="15.0" fill="rgb(216,198,25)" rx="2" ry="2" />
<text  x="554.14" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (10 samples, 0.02%)</title><rect x="247.5" y="213" width="0.3" height="15.0" fill="rgb(209,122,3)" rx="2" ry="2" />
<text  x="250.54" y="223.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (28 samples, 0.06%)</title><rect x="486.4" y="309" width="0.7" height="15.0" fill="rgb(227,28,44)" rx="2" ry="2" />
<text  x="489.38" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (13 samples, 0.03%)</title><rect x="1178.1" y="453" width="0.3" height="15.0" fill="rgb(248,92,14)" rx="2" ry="2" />
<text  x="1181.08" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.05%)</title><rect x="754.8" y="325" width="0.5" height="15.0" fill="rgb(250,182,11)" rx="2" ry="2" />
<text  x="757.77" y="335.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (6 samples, 0.01%)</title><rect x="441.2" y="293" width="0.1" height="15.0" fill="rgb(209,62,9)" rx="2" ry="2" />
<text  x="444.17" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%)</title><rect x="619.5" y="437" width="0.1" height="15.0" fill="rgb(239,33,43)" rx="2" ry="2" />
<text  x="622.45" y="447.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%)</title><rect x="417.8" y="373" width="0.5" height="15.0" fill="rgb(220,70,14)" rx="2" ry="2" />
<text  x="420.80" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (8 samples, 0.02%)</title><rect x="22.9" y="517" width="0.2" height="15.0" fill="rgb(213,198,2)" rx="2" ry="2" />
<text  x="25.85" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (35 samples, 0.07%)</title><rect x="218.7" y="165" width="0.9" height="15.0" fill="rgb(215,61,44)" rx="2" ry="2" />
<text  x="221.70" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.04%)</title><rect x="682.6" y="469" width="0.4" height="15.0" fill="rgb(205,182,26)" rx="2" ry="2" />
<text  x="685.57" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (6 samples, 0.01%)</title><rect x="1101.4" y="341" width="0.2" height="15.0" fill="rgb(222,189,49)" rx="2" ry="2" />
<text  x="1104.45" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.01%)</title><rect x="644.8" y="405" width="0.1" height="15.0" fill="rgb(211,120,13)" rx="2" ry="2" />
<text  x="647.77" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (22 samples, 0.05%)</title><rect x="808.8" y="229" width="0.6" height="15.0" fill="rgb(206,10,10)" rx="2" ry="2" />
<text  x="811.82" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="963.0" y="405" width="0.1" height="15.0" fill="rgb(205,229,30)" rx="2" ry="2" />
<text  x="965.98" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (68 samples, 0.14%)</title><rect x="690.0" y="485" width="1.7" height="15.0" fill="rgb(205,31,24)" rx="2" ry="2" />
<text  x="693.01" y="495.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (204 samples, 0.43%)</title><rect x="15.6" y="453" width="5.0" height="15.0" fill="rgb(208,109,24)" rx="2" ry="2" />
<text  x="18.61" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (55 samples, 0.11%)</title><rect x="1115.3" y="373" width="1.3" height="15.0" fill="rgb(221,205,10)" rx="2" ry="2" />
<text  x="1118.26" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (184 samples, 0.38%)</title><rect x="1092.7" y="261" width="4.5" height="15.0" fill="rgb(232,47,23)" rx="2" ry="2" />
<text  x="1095.68" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.01%)</title><rect x="21.8" y="453" width="0.2" height="15.0" fill="rgb(253,150,20)" rx="2" ry="2" />
<text  x="24.84" y="463.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (466 samples, 0.97%)</title><rect x="917.3" y="389" width="11.5" height="15.0" fill="rgb(205,102,36)" rx="2" ry="2" />
<text  x="920.35" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (25 samples, 0.05%)</title><rect x="937.2" y="389" width="0.6" height="15.0" fill="rgb(251,218,6)" rx="2" ry="2" />
<text  x="940.20" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%)</title><rect x="862.8" y="341" width="0.1" height="15.0" fill="rgb(218,11,44)" rx="2" ry="2" />
<text  x="865.75" y="351.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (66 samples, 0.14%)</title><rect x="538.8" y="373" width="1.6" height="15.0" fill="rgb(211,63,46)" rx="2" ry="2" />
<text  x="541.78" y="383.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (6 samples, 0.01%)</title><rect x="642.0" y="405" width="0.2" height="15.0" fill="rgb(209,105,3)" rx="2" ry="2" />
<text  x="645.01" y="415.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,237 samples, 2.58%)</title><rect x="782.3" y="309" width="30.5" height="15.0" fill="rgb(215,9,21)" rx="2" ry="2" />
<text  x="785.33" y="319.5" >au..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (12 samples, 0.03%)</title><rect x="509.8" y="309" width="0.3" height="15.0" fill="rgb(213,125,23)" rx="2" ry="2" />
<text  x="512.85" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (17 samples, 0.04%)</title><rect x="40.6" y="453" width="0.5" height="15.0" fill="rgb(216,75,27)" rx="2" ry="2" />
<text  x="43.63" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%)</title><rect x="739.9" y="277" width="0.2" height="15.0" fill="rgb(252,85,8)" rx="2" ry="2" />
<text  x="742.95" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (10 samples, 0.02%)</title><rect x="516.7" y="325" width="0.2" height="15.0" fill="rgb(220,2,50)" rx="2" ry="2" />
<text  x="519.67" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (7 samples, 0.01%)</title><rect x="1176.6" y="405" width="0.2" height="15.0" fill="rgb(241,166,43)" rx="2" ry="2" />
<text  x="1179.60" y="415.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%)</title><rect x="712.7" y="421" width="0.8" height="15.0" fill="rgb(230,85,1)" rx="2" ry="2" />
<text  x="715.66" y="431.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%)</title><rect x="450.9" y="325" width="0.8" height="15.0" fill="rgb(242,52,5)" rx="2" ry="2" />
<text  x="453.94" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (5 samples, 0.01%)</title><rect x="915.4" y="389" width="0.1" height="15.0" fill="rgb(217,85,28)" rx="2" ry="2" />
<text  x="918.38" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%)</title><rect x="930.6" y="357" width="0.2" height="15.0" fill="rgb(241,39,20)" rx="2" ry="2" />
<text  x="933.57" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (23 samples, 0.05%)</title><rect x="1172.3" y="453" width="0.6" height="15.0" fill="rgb(246,107,48)" rx="2" ry="2" />
<text  x="1175.29" y="463.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%)</title><rect x="944.3" y="373" width="0.7" height="15.0" fill="rgb(219,134,49)" rx="2" ry="2" />
<text  x="947.26" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.01%)</title><rect x="63.2" y="405" width="0.1" height="15.0" fill="rgb(222,5,23)" rx="2" ry="2" />
<text  x="66.22" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%)</title><rect x="506.4" y="229" width="0.2" height="15.0" fill="rgb(226,107,25)" rx="2" ry="2" />
<text  x="509.42" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (5 samples, 0.01%)</title><rect x="32.1" y="485" width="0.1" height="15.0" fill="rgb(247,114,7)" rx="2" ry="2" />
<text  x="35.11" y="495.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%)</title><rect x="775.8" y="309" width="0.6" height="15.0" fill="rgb(212,199,9)" rx="2" ry="2" />
<text  x="778.85" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (38 samples, 0.08%)</title><rect x="1045.2" y="261" width="0.9" height="15.0" fill="rgb(222,8,8)" rx="2" ry="2" />
<text  x="1048.15" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (11 samples, 0.02%)</title><rect x="487.1" y="309" width="0.2" height="15.0" fill="rgb(236,46,48)" rx="2" ry="2" />
<text  x="490.07" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (46,788 samples, 97.64%)</title><rect x="25.0" y="517" width="1152.1" height="15.0" fill="rgb(249,25,12)" rx="2" ry="2" />
<text  x="27.97" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="373" width="0.6" height="15.0" fill="rgb(251,26,31)" rx="2" ry="2" />
<text  x="1144.51" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (15 samples, 0.03%)</title><rect x="312.3" y="165" width="0.3" height="15.0" fill="rgb(211,167,11)" rx="2" ry="2" />
<text  x="315.28" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (329 samples, 0.69%)</title><rect x="35.0" y="485" width="8.1" height="15.0" fill="rgb(218,26,52)" rx="2" ry="2" />
<text  x="37.99" y="495.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (65 samples, 0.14%)</title><rect x="352.0" y="165" width="1.6" height="15.0" fill="rgb(234,69,37)" rx="2" ry="2" />
<text  x="354.97" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (62 samples, 0.13%)</title><rect x="718.8" y="421" width="1.5" height="15.0" fill="rgb(213,82,27)" rx="2" ry="2" />
<text  x="721.79" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (41 samples, 0.09%)</title><rect x="803.6" y="117" width="1.0" height="15.0" fill="rgb(232,99,19)" rx="2" ry="2" />
<text  x="806.60" y="127.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (7 samples, 0.01%)</title><rect x="984.0" y="357" width="0.2" height="15.0" fill="rgb(233,2,19)" rx="2" ry="2" />
<text  x="987.03" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (114 samples, 0.24%)</title><rect x="945.7" y="405" width="2.8" height="15.0" fill="rgb(236,80,5)" rx="2" ry="2" />
<text  x="948.72" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (17 samples, 0.04%)</title><rect x="291.3" y="373" width="0.4" height="15.0" fill="rgb(237,18,28)" rx="2" ry="2" />
<text  x="294.30" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (14 samples, 0.03%)</title><rect x="688.3" y="453" width="0.4" height="15.0" fill="rgb(232,21,9)" rx="2" ry="2" />
<text  x="691.33" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (117 samples, 0.24%)</title><rect x="825.5" y="325" width="2.9" height="15.0" fill="rgb(233,153,23)" rx="2" ry="2" />
<text  x="828.49" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (342 samples, 0.71%)</title><rect x="396.7" y="261" width="8.5" height="15.0" fill="rgb(254,226,5)" rx="2" ry="2" />
<text  x="399.74" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (24 samples, 0.05%)</title><rect x="77.1" y="453" width="0.6" height="15.0" fill="rgb(220,192,7)" rx="2" ry="2" />
<text  x="80.13" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%)</title><rect x="650.6" y="469" width="0.1" height="15.0" fill="rgb(239,73,53)" rx="2" ry="2" />
<text  x="653.58" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (37 samples, 0.08%)</title><rect x="1107.7" y="389" width="0.9" height="15.0" fill="rgb(254,183,51)" rx="2" ry="2" />
<text  x="1110.73" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (6 samples, 0.01%)</title><rect x="1176.6" y="389" width="0.2" height="15.0" fill="rgb(233,199,42)" rx="2" ry="2" />
<text  x="1179.63" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (17 samples, 0.04%)</title><rect x="674.8" y="453" width="0.4" height="15.0" fill="rgb(241,57,45)" rx="2" ry="2" />
<text  x="677.76" y="463.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%)</title><rect x="47.3" y="485" width="0.1" height="15.0" fill="rgb(213,36,50)" rx="2" ry="2" />
<text  x="50.31" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.06%)</title><rect x="1129.8" y="373" width="0.7" height="15.0" fill="rgb(231,124,4)" rx="2" ry="2" />
<text  x="1132.84" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (16 samples, 0.03%)</title><rect x="17.7" y="341" width="0.4" height="15.0" fill="rgb(237,154,40)" rx="2" ry="2" />
<text  x="20.71" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (128 samples, 0.27%)</title><rect x="37.1" y="453" width="3.1" height="15.0" fill="rgb(245,107,43)" rx="2" ry="2" />
<text  x="40.09" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (48 samples, 0.10%)</title><rect x="823.8" y="325" width="1.2" height="15.0" fill="rgb(223,91,11)" rx="2" ry="2" />
<text  x="826.84" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%)</title><rect x="1142.1" y="453" width="1.0" height="15.0" fill="rgb(235,165,37)" rx="2" ry="2" />
<text  x="1145.13" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (24 samples, 0.05%)</title><rect x="857.0" y="437" width="0.6" height="15.0" fill="rgb(231,24,44)" rx="2" ry="2" />
<text  x="859.97" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (17 samples, 0.04%)</title><rect x="862.6" y="453" width="0.4" height="15.0" fill="rgb(215,92,2)" rx="2" ry="2" />
<text  x="865.61" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%)</title><rect x="793.1" y="213" width="0.2" height="15.0" fill="rgb(218,150,15)" rx="2" ry="2" />
<text  x="796.14" y="223.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.01%)</title><rect x="224.3" y="149" width="0.1" height="15.0" fill="rgb(251,91,48)" rx="2" ry="2" />
<text  x="227.27" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%)</title><rect x="146.2" y="261" width="0.2" height="15.0" fill="rgb(232,46,24)" rx="2" ry="2" />
<text  x="149.15" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (11 samples, 0.02%)</title><rect x="266.6" y="341" width="0.3" height="15.0" fill="rgb(228,119,35)" rx="2" ry="2" />
<text  x="269.62" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (99 samples, 0.21%)</title><rect x="820.3" y="389" width="2.4" height="15.0" fill="rgb(244,31,50)" rx="2" ry="2" />
<text  x="823.27" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%)</title><rect x="261.0" y="261" width="0.1" height="15.0" fill="rgb(219,4,3)" rx="2" ry="2" />
<text  x="263.96" y="271.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%)</title><rect x="276.2" y="309" width="0.1" height="15.0" fill="rgb(232,156,46)" rx="2" ry="2" />
<text  x="279.15" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="59.3" y="437" width="0.2" height="15.0" fill="rgb(249,226,1)" rx="2" ry="2" />
<text  x="62.35" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%)</title><rect x="722.7" y="293" width="0.2" height="15.0" fill="rgb(250,102,49)" rx="2" ry="2" />
<text  x="725.73" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (85 samples, 0.18%)</title><rect x="1061.7" y="341" width="2.1" height="15.0" fill="rgb(217,133,34)" rx="2" ry="2" />
<text  x="1064.68" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (8 samples, 0.02%)</title><rect x="233.3" y="213" width="0.2" height="15.0" fill="rgb(224,31,8)" rx="2" ry="2" />
<text  x="236.28" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (14 samples, 0.03%)</title><rect x="960.3" y="341" width="0.3" height="15.0" fill="rgb(234,132,40)" rx="2" ry="2" />
<text  x="963.27" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.05%)</title><rect x="1142.5" y="309" width="0.6" height="15.0" fill="rgb(233,2,22)" rx="2" ry="2" />
<text  x="1145.52" y="319.5" ></text>
</g>
<g >
<title>table::make_reader (5 samples, 0.01%)</title><rect x="533.4" y="373" width="0.1" height="15.0" fill="rgb(245,182,41)" rx="2" ry="2" />
<text  x="536.41" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (23 samples, 0.05%)</title><rect x="701.3" y="437" width="0.5" height="15.0" fill="rgb(241,152,40)" rx="2" ry="2" />
<text  x="704.26" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (13 samples, 0.03%)</title><rect x="1030.5" y="197" width="0.3" height="15.0" fill="rgb(216,59,2)" rx="2" ry="2" />
<text  x="1033.50" y="207.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (39 samples, 0.08%)</title><rect x="743.0" y="261" width="1.0" height="15.0" fill="rgb(241,201,48)" rx="2" ry="2" />
<text  x="746.02" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (16 samples, 0.03%)</title><rect x="563.5" y="277" width="0.4" height="15.0" fill="rgb(216,35,6)" rx="2" ry="2" />
<text  x="566.48" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (23 samples, 0.05%)</title><rect x="862.6" y="501" width="0.5" height="15.0" fill="rgb(212,2,17)" rx="2" ry="2" />
<text  x="865.58" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (13 samples, 0.03%)</title><rect x="573.3" y="341" width="0.3" height="15.0" fill="rgb(231,17,30)" rx="2" ry="2" />
<text  x="576.31" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (14 samples, 0.03%)</title><rect x="585.5" y="373" width="0.4" height="15.0" fill="rgb(241,31,21)" rx="2" ry="2" />
<text  x="588.52" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%)</title><rect x="542.2" y="325" width="2.0" height="15.0" fill="rgb(214,218,53)" rx="2" ry="2" />
<text  x="545.23" y="335.5" ></text>
</g>
<g >
<title>query_state::query_state (247 samples, 0.52%)</title><rect x="588.3" y="437" width="6.0" height="15.0" fill="rgb(239,213,47)" rx="2" ry="2" />
<text  x="591.25" y="447.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (18 samples, 0.04%)</title><rect x="1178.1" y="469" width="0.4" height="15.0" fill="rgb(215,168,44)" rx="2" ry="2" />
<text  x="1181.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="658.4" y="469" width="0.2" height="15.0" fill="rgb(233,38,50)" rx="2" ry="2" />
<text  x="661.44" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.06%)</title><rect x="1074.3" y="293" width="0.6" height="15.0" fill="rgb(218,100,21)" rx="2" ry="2" />
<text  x="1077.26" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1,110 samples, 2.32%)</title><rect x="887.3" y="373" width="27.3" height="15.0" fill="rgb(212,63,38)" rx="2" ry="2" />
<text  x="890.30" y="383.5" >_..</text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (23 samples, 0.05%)</title><rect x="139.3" y="229" width="0.6" height="15.0" fill="rgb(216,66,53)" rx="2" ry="2" />
<text  x="142.31" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="582.3" y="389" width="0.2" height="15.0" fill="rgb(240,201,6)" rx="2" ry="2" />
<text  x="585.34" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,190 samples, 2.48%)</title><rect x="1146.5" y="501" width="29.3" height="15.0" fill="rgb(211,22,22)" rx="2" ry="2" />
<text  x="1149.51" y="511.5" >se..</text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (96 samples, 0.20%)</title><rect x="817.6" y="341" width="2.4" height="15.0" fill="rgb(212,99,39)" rx="2" ry="2" />
<text  x="820.61" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%)</title><rect x="814.5" y="293" width="0.2" height="15.0" fill="rgb(207,140,18)" rx="2" ry="2" />
<text  x="817.51" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (738 samples, 1.54%)</title><rect x="491.1" y="293" width="18.2" height="15.0" fill="rgb(222,38,24)" rx="2" ry="2" />
<text  x="494.13" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (30 samples, 0.06%)</title><rect x="679.3" y="389" width="0.7" height="15.0" fill="rgb(233,170,22)" rx="2" ry="2" />
<text  x="682.29" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.03%)</title><rect x="508.4" y="277" width="0.3" height="15.0" fill="rgb(216,74,38)" rx="2" ry="2" />
<text  x="511.44" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%)</title><rect x="835.7" y="357" width="0.6" height="15.0" fill="rgb(234,126,19)" rx="2" ry="2" />
<text  x="838.69" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (229 samples, 0.48%)</title><rect x="256.5" y="293" width="5.7" height="15.0" fill="rgb(214,221,3)" rx="2" ry="2" />
<text  x="259.52" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (13 samples, 0.03%)</title><rect x="822.3" y="341" width="0.4" height="15.0" fill="rgb(242,199,27)" rx="2" ry="2" />
<text  x="825.34" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (8 samples, 0.02%)</title><rect x="685.3" y="453" width="0.2" height="15.0" fill="rgb(225,135,28)" rx="2" ry="2" />
<text  x="688.25" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%)</title><rect x="794.3" y="181" width="0.2" height="15.0" fill="rgb(253,15,29)" rx="2" ry="2" />
<text  x="797.32" y="191.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (213 samples, 0.44%)</title><rect x="746.6" y="421" width="5.3" height="15.0" fill="rgb(238,224,32)" rx="2" ry="2" />
<text  x="749.64" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.01%)</title><rect x="17.8" y="261" width="0.2" height="15.0" fill="rgb(241,228,38)" rx="2" ry="2" />
<text  x="20.83" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%)</title><rect x="692.9" y="485" width="0.2" height="15.0" fill="rgb(219,6,28)" rx="2" ry="2" />
<text  x="695.91" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (14 samples, 0.03%)</title><rect x="524.7" y="309" width="0.3" height="15.0" fill="rgb(254,168,30)" rx="2" ry="2" />
<text  x="527.70" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (97 samples, 0.20%)</title><rect x="946.1" y="389" width="2.4" height="15.0" fill="rgb(246,111,10)" rx="2" ry="2" />
<text  x="949.13" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (27 samples, 0.06%)</title><rect x="598.4" y="437" width="0.7" height="15.0" fill="rgb(237,80,20)" rx="2" ry="2" />
<text  x="601.42" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (127 samples, 0.27%)</title><rect x="1023.0" y="229" width="3.1" height="15.0" fill="rgb(252,28,20)" rx="2" ry="2" />
<text  x="1026.02" y="239.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (681 samples, 1.42%)</title><rect x="729.9" y="421" width="16.7" height="15.0" fill="rgb(211,142,48)" rx="2" ry="2" />
<text  x="732.87" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.05%)</title><rect x="419.6" y="421" width="0.6" height="15.0" fill="rgb(251,95,7)" rx="2" ry="2" />
<text  x="422.64" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (17 samples, 0.04%)</title><rect x="606.2" y="421" width="0.4" height="15.0" fill="rgb(251,132,9)" rx="2" ry="2" />
<text  x="609.18" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (25 samples, 0.05%)</title><rect x="501.9" y="181" width="0.6" height="15.0" fill="rgb(224,222,44)" rx="2" ry="2" />
<text  x="504.87" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (12 samples, 0.03%)</title><rect x="659.4" y="469" width="0.3" height="15.0" fill="rgb(233,85,48)" rx="2" ry="2" />
<text  x="662.45" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (14 samples, 0.03%)</title><rect x="891.1" y="309" width="0.3" height="15.0" fill="rgb(244,49,10)" rx="2" ry="2" />
<text  x="894.10" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (18 samples, 0.04%)</title><rect x="391.9" y="229" width="0.4" height="15.0" fill="rgb(210,7,15)" rx="2" ry="2" />
<text  x="394.87" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (46 samples, 0.10%)</title><rect x="498.3" y="213" width="1.2" height="15.0" fill="rgb(214,13,11)" rx="2" ry="2" />
<text  x="501.32" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (524 samples, 1.09%)</title><rect x="236.4" y="229" width="12.9" height="15.0" fill="rgb(220,68,47)" rx="2" ry="2" />
<text  x="239.38" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (15 samples, 0.03%)</title><rect x="61.2" y="437" width="0.4" height="15.0" fill="rgb(226,148,3)" rx="2" ry="2" />
<text  x="64.22" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (22 samples, 0.05%)</title><rect x="366.9" y="149" width="0.6" height="15.0" fill="rgb(249,142,50)" rx="2" ry="2" />
<text  x="369.95" y="159.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (212 samples, 0.44%)</title><rect x="720.6" y="405" width="5.3" height="15.0" fill="rgb(222,33,42)" rx="2" ry="2" />
<text  x="723.64" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (26 samples, 0.05%)</title><rect x="1122.7" y="389" width="0.6" height="15.0" fill="rgb(248,50,21)" rx="2" ry="2" />
<text  x="1125.67" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (20 samples, 0.04%)</title><rect x="652.9" y="485" width="0.5" height="15.0" fill="rgb(232,190,3)" rx="2" ry="2" />
<text  x="655.87" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (8 samples, 0.02%)</title><rect x="737.6" y="357" width="0.2" height="15.0" fill="rgb(205,158,30)" rx="2" ry="2" />
<text  x="740.58" y="367.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%)</title><rect x="572.0" y="357" width="0.9" height="15.0" fill="rgb(212,18,1)" rx="2" ry="2" />
<text  x="575.00" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (31 samples, 0.06%)</title><rect x="661.0" y="485" width="0.7" height="15.0" fill="rgb(221,51,1)" rx="2" ry="2" />
<text  x="663.97" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (8 samples, 0.02%)</title><rect x="645.7" y="453" width="0.2" height="15.0" fill="rgb(223,201,49)" rx="2" ry="2" />
<text  x="648.68" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (11 samples, 0.02%)</title><rect x="537.2" y="405" width="0.3" height="15.0" fill="rgb(210,146,28)" rx="2" ry="2" />
<text  x="540.18" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (6 samples, 0.01%)</title><rect x="143.6" y="277" width="0.2" height="15.0" fill="rgb(220,101,28)" rx="2" ry="2" />
<text  x="146.64" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (59 samples, 0.12%)</title><rect x="783.1" y="261" width="1.5" height="15.0" fill="rgb(252,227,39)" rx="2" ry="2" />
<text  x="786.11" y="271.5" ></text>
</g>
<g >
<title>schema::column_at (62 samples, 0.13%)</title><rect x="212.6" y="101" width="1.5" height="15.0" fill="rgb(217,177,40)" rx="2" ry="2" />
<text  x="215.57" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (29 samples, 0.06%)</title><rect x="570.7" y="357" width="0.7" height="15.0" fill="rgb(220,99,53)" rx="2" ry="2" />
<text  x="573.72" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (7 samples, 0.01%)</title><rect x="888.2" y="357" width="0.2" height="15.0" fill="rgb(227,151,2)" rx="2" ry="2" />
<text  x="891.19" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (9 samples, 0.02%)</title><rect x="843.7" y="421" width="0.2" height="15.0" fill="rgb(254,18,21)" rx="2" ry="2" />
<text  x="846.67" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="530.4" y="325" width="0.2" height="15.0" fill="rgb(250,153,45)" rx="2" ry="2" />
<text  x="533.43" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (424 samples, 0.88%)</title><rect x="65.0" y="437" width="10.4" height="15.0" fill="rgb(214,43,38)" rx="2" ry="2" />
<text  x="67.99" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (42 samples, 0.09%)</title><rect x="885.4" y="405" width="1.0" height="15.0" fill="rgb(211,108,11)" rx="2" ry="2" />
<text  x="888.38" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (283 samples, 0.59%)</title><rect x="991.2" y="341" width="7.0" height="15.0" fill="rgb(226,192,34)" rx="2" ry="2" />
<text  x="994.25" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (9 samples, 0.02%)</title><rect x="249.1" y="181" width="0.2" height="15.0" fill="rgb(223,190,20)" rx="2" ry="2" />
<text  x="252.06" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%)</title><rect x="1120.6" y="357" width="0.1" height="15.0" fill="rgb(226,223,7)" rx="2" ry="2" />
<text  x="1123.61" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%)</title><rect x="705.0" y="485" width="0.3" height="15.0" fill="rgb(251,138,4)" rx="2" ry="2" />
<text  x="708.00" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="821.2" y="357" width="0.2" height="15.0" fill="rgb(225,87,16)" rx="2" ry="2" />
<text  x="824.23" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%)</title><rect x="1034.8" y="165" width="0.2" height="15.0" fill="rgb(252,17,28)" rx="2" ry="2" />
<text  x="1037.81" y="175.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (721 samples, 1.50%)</title><rect x="548.5" y="357" width="17.8" height="15.0" fill="rgb(238,209,49)" rx="2" ry="2" />
<text  x="551.53" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%)</title><rect x="148.2" y="261" width="0.1" height="15.0" fill="rgb(251,111,11)" rx="2" ry="2" />
<text  x="151.22" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (79 samples, 0.16%)</title><rect x="1118.6" y="341" width="2.0" height="15.0" fill="rgb(231,113,0)" rx="2" ry="2" />
<text  x="1121.64" y="351.5" ></text>
</g>
<g >
<title>query::result::result (32 samples, 0.07%)</title><rect x="587.1" y="421" width="0.8" height="15.0" fill="rgb(225,213,41)" rx="2" ry="2" />
<text  x="590.12" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (203 samples, 0.42%)</title><rect x="225.1" y="229" width="5.0" height="15.0" fill="rgb(214,214,53)" rx="2" ry="2" />
<text  x="228.10" y="239.5" ></text>
</g>
<g >
<title>main (46,956 samples, 97.99%)</title><rect x="22.4" y="613" width="1156.3" height="15.0" fill="rgb(212,91,53)" rx="2" ry="2" />
<text  x="25.44" y="623.5" >main</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%)</title><rect x="1175.1" y="421" width="0.2" height="15.0" fill="rgb(237,135,46)" rx="2" ry="2" />
<text  x="1178.10" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (8 samples, 0.02%)</title><rect x="565.5" y="309" width="0.1" height="15.0" fill="rgb(224,180,21)" rx="2" ry="2" />
<text  x="568.45" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (202 samples, 0.42%)</title><rect x="1128.4" y="421" width="4.9" height="15.0" fill="rgb(242,198,23)" rx="2" ry="2" />
<text  x="1131.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="45.5" y="485" width="0.1" height="15.0" fill="rgb(250,32,33)" rx="2" ry="2" />
<text  x="48.49" y="495.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (6 samples, 0.01%)</title><rect x="326.7" y="181" width="0.1" height="15.0" fill="rgb(243,77,23)" rx="2" ry="2" />
<text  x="329.68" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (417 samples, 0.87%)</title><rect x="694.4" y="469" width="10.3" height="15.0" fill="rgb(234,11,0)" rx="2" ry="2" />
<text  x="697.39" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (26 samples, 0.05%)</title><rect x="840.8" y="373" width="0.7" height="15.0" fill="rgb(223,202,35)" rx="2" ry="2" />
<text  x="843.81" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (28 samples, 0.06%)</title><rect x="409.4" y="277" width="0.7" height="15.0" fill="rgb(239,194,20)" rx="2" ry="2" />
<text  x="412.45" y="287.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (265 samples, 0.55%)</title><rect x="738.1" y="373" width="6.5" height="15.0" fill="rgb(215,41,9)" rx="2" ry="2" />
<text  x="741.05" y="383.5" ></text>
</g>
<g >
<title>seastar::schedule (5 samples, 0.01%)</title><rect x="1144.8" y="501" width="0.2" height="15.0" fill="rgb(206,33,26)" rx="2" ry="2" />
<text  x="1147.84" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%)</title><rect x="16.1" y="245" width="0.1" height="15.0" fill="rgb(216,184,24)" rx="2" ry="2" />
<text  x="19.06" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (6 samples, 0.01%)</title><rect x="15.7" y="421" width="0.2" height="15.0" fill="rgb(239,161,52)" rx="2" ry="2" />
<text  x="18.71" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (87 samples, 0.18%)</title><rect x="200.1" y="117" width="2.1" height="15.0" fill="rgb(225,55,18)" rx="2" ry="2" />
<text  x="203.06" y="127.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (462 samples, 0.96%)</title><rect x="64.1" y="453" width="11.3" height="15.0" fill="rgb(250,205,24)" rx="2" ry="2" />
<text  x="67.05" y="463.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (118 samples, 0.25%)</title><rect x="1154.0" y="469" width="2.9" height="15.0" fill="rgb(209,79,3)" rx="2" ry="2" />
<text  x="1156.97" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.03%)</title><rect x="480.3" y="213" width="0.3" height="15.0" fill="rgb(219,168,25)" rx="2" ry="2" />
<text  x="483.30" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (5 samples, 0.01%)</title><rect x="145.9" y="261" width="0.1" height="15.0" fill="rgb(208,47,53)" rx="2" ry="2" />
<text  x="148.91" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%)</title><rect x="658.7" y="485" width="0.1" height="15.0" fill="rgb(232,39,22)" rx="2" ry="2" />
<text  x="661.66" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (89 samples, 0.19%)</title><rect x="802.4" y="133" width="2.2" height="15.0" fill="rgb(219,152,0)" rx="2" ry="2" />
<text  x="805.42" y="143.5" ></text>
</g>
<g >
<title>[unknown] (181 samples, 0.38%)</title><rect x="10.3" y="597" width="4.5" height="15.0" fill="rgb(220,223,30)" rx="2" ry="2" />
<text  x="13.34" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (33 samples, 0.07%)</title><rect x="1142.3" y="325" width="0.8" height="15.0" fill="rgb(232,23,14)" rx="2" ry="2" />
<text  x="1145.25" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (15 samples, 0.03%)</title><rect x="63.5" y="437" width="0.4" height="15.0" fill="rgb(244,100,7)" rx="2" ry="2" />
<text  x="66.51" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (18 samples, 0.04%)</title><rect x="679.4" y="309" width="0.4" height="15.0" fill="rgb(234,218,10)" rx="2" ry="2" />
<text  x="682.37" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (7 samples, 0.01%)</title><rect x="167.4" y="197" width="0.2" height="15.0" fill="rgb(229,45,52)" rx="2" ry="2" />
<text  x="170.43" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (464 samples, 0.97%)</title><rect x="273.9" y="341" width="11.4" height="15.0" fill="rgb(244,89,53)" rx="2" ry="2" />
<text  x="276.86" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (50 samples, 0.10%)</title><rect x="1160.4" y="421" width="1.2" height="15.0" fill="rgb(238,130,25)" rx="2" ry="2" />
<text  x="1163.35" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (9 samples, 0.02%)</title><rect x="319.6" y="213" width="0.3" height="15.0" fill="rgb(226,200,42)" rx="2" ry="2" />
<text  x="322.64" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (31 samples, 0.06%)</title><rect x="679.3" y="453" width="0.8" height="15.0" fill="rgb(216,156,51)" rx="2" ry="2" />
<text  x="682.29" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (16 samples, 0.03%)</title><rect x="227.1" y="181" width="0.4" height="15.0" fill="rgb(232,190,10)" rx="2" ry="2" />
<text  x="230.10" y="191.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (102 samples, 0.21%)</title><rect x="930.2" y="373" width="2.5" height="15.0" fill="rgb(210,114,43)" rx="2" ry="2" />
<text  x="933.15" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (9 samples, 0.02%)</title><rect x="367.8" y="197" width="0.3" height="15.0" fill="rgb(232,68,23)" rx="2" ry="2" />
<text  x="370.83" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (33 samples, 0.07%)</title><rect x="806.3" y="245" width="0.8" height="15.0" fill="rgb(231,78,24)" rx="2" ry="2" />
<text  x="809.31" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (107 samples, 0.22%)</title><rect x="671.6" y="469" width="2.6" height="15.0" fill="rgb(252,188,7)" rx="2" ry="2" />
<text  x="674.59" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (179 samples, 0.37%)</title><rect x="800.5" y="165" width="4.4" height="15.0" fill="rgb(227,33,25)" rx="2" ry="2" />
<text  x="803.52" y="175.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (110 samples, 0.23%)</title><rect x="698.5" y="437" width="2.7" height="15.0" fill="rgb(217,207,41)" rx="2" ry="2" />
<text  x="701.50" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (14 samples, 0.03%)</title><rect x="301.8" y="245" width="0.3" height="15.0" fill="rgb(248,160,13)" rx="2" ry="2" />
<text  x="304.79" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%)</title><rect x="139.1" y="213" width="0.2" height="15.0" fill="rgb(205,2,51)" rx="2" ry="2" />
<text  x="142.09" y="223.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (7 samples, 0.01%)</title><rect x="80.7" y="453" width="0.1" height="15.0" fill="rgb(236,11,54)" rx="2" ry="2" />
<text  x="83.65" y="463.5" ></text>
</g>
<g >
<title>schema::registry_entry (5 samples, 0.01%)</title><rect x="1016.3" y="277" width="0.1" height="15.0" fill="rgb(217,9,53)" rx="2" ry="2" />
<text  x="1019.29" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (94 samples, 0.20%)</title><rect x="671.9" y="453" width="2.3" height="15.0" fill="rgb(251,56,22)" rx="2" ry="2" />
<text  x="674.91" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (11 samples, 0.02%)</title><rect x="594.1" y="421" width="0.2" height="15.0" fill="rgb(249,15,19)" rx="2" ry="2" />
<text  x="597.07" y="431.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (5 samples, 0.01%)</title><rect x="1097.5" y="293" width="0.1" height="15.0" fill="rgb(222,37,39)" rx="2" ry="2" />
<text  x="1100.46" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (8 samples, 0.02%)</title><rect x="905.5" y="293" width="0.2" height="15.0" fill="rgb(209,180,5)" rx="2" ry="2" />
<text  x="908.53" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4,937 samples, 10.30%)</title><rect x="292.4" y="341" width="121.5" height="15.0" fill="rgb(239,56,3)" rx="2" ry="2" />
<text  x="295.35" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>partition_key_view::legacy_form (13 samples, 0.03%)</title><rect x="921.9" y="373" width="0.3" height="15.0" fill="rgb(228,220,47)" rx="2" ry="2" />
<text  x="924.88" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (16 samples, 0.03%)</title><rect x="482.2" y="325" width="0.4" height="15.0" fill="rgb(231,61,29)" rx="2" ry="2" />
<text  x="485.22" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (34 samples, 0.07%)</title><rect x="665.1" y="437" width="0.9" height="15.0" fill="rgb(241,227,48)" rx="2" ry="2" />
<text  x="668.13" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (14 samples, 0.03%)</title><rect x="666.0" y="453" width="0.4" height="15.0" fill="rgb(223,33,34)" rx="2" ry="2" />
<text  x="669.05" y="463.5" ></text>
</g>
<g >
<title>table::set_hit_rate (85 samples, 0.18%)</title><rect x="702.3" y="453" width="2.1" height="15.0" fill="rgb(238,16,12)" rx="2" ry="2" />
<text  x="705.34" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (85 samples, 0.18%)</title><rect x="828.7" y="341" width="2.1" height="15.0" fill="rgb(220,138,38)" rx="2" ry="2" />
<text  x="831.67" y="351.5" ></text>
</g>
<g >
<title>db::filter_for_query (28 samples, 0.06%)</title><rect x="1070.6" y="341" width="0.7" height="15.0" fill="rgb(228,200,53)" rx="2" ry="2" />
<text  x="1073.59" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%)</title><rect x="579.0" y="421" width="0.1" height="15.0" fill="rgb(247,186,46)" rx="2" ry="2" />
<text  x="581.99" y="431.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%)</title><rect x="628.5" y="469" width="0.6" height="15.0" fill="rgb(212,115,4)" rx="2" ry="2" />
<text  x="631.49" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="705.3" y="485" width="0.3" height="15.0" fill="rgb(212,8,28)" rx="2" ry="2" />
<text  x="708.35" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (35 samples, 0.07%)</title><rect x="801.1" y="117" width="0.9" height="15.0" fill="rgb(218,216,30)" rx="2" ry="2" />
<text  x="804.12" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.01%)</title><rect x="1103.2" y="357" width="0.2" height="15.0" fill="rgb(224,177,32)" rx="2" ry="2" />
<text  x="1106.22" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (26 samples, 0.05%)</title><rect x="249.3" y="229" width="0.6" height="15.0" fill="rgb(210,86,45)" rx="2" ry="2" />
<text  x="252.29" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (66 samples, 0.14%)</title><rect x="855.9" y="453" width="1.7" height="15.0" fill="rgb(242,186,31)" rx="2" ry="2" />
<text  x="858.93" y="463.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (45 samples, 0.09%)</title><rect x="670.0" y="453" width="1.1" height="15.0" fill="rgb(234,107,18)" rx="2" ry="2" />
<text  x="673.01" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%)</title><rect x="815.7" y="309" width="0.2" height="15.0" fill="rgb(232,210,43)" rx="2" ry="2" />
<text  x="818.74" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="651.4" y="485" width="0.2" height="15.0" fill="rgb(214,2,0)" rx="2" ry="2" />
<text  x="654.44" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%)</title><rect x="293.0" y="277" width="0.6" height="15.0" fill="rgb(253,37,4)" rx="2" ry="2" />
<text  x="296.00" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%)</title><rect x="846.9" y="325" width="0.2" height="15.0" fill="rgb(240,31,18)" rx="2" ry="2" />
<text  x="849.92" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (389 samples, 0.81%)</title><rect x="657.7" y="501" width="9.6" height="15.0" fill="rgb(236,40,25)" rx="2" ry="2" />
<text  x="660.67" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="271.4" y="341" width="0.1" height="15.0" fill="rgb(232,52,28)" rx="2" ry="2" />
<text  x="274.40" y="351.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (6 samples, 0.01%)</title><rect x="1101.2" y="325" width="0.2" height="15.0" fill="rgb(236,134,4)" rx="2" ry="2" />
<text  x="1104.23" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (25 samples, 0.05%)</title><rect x="64.4" y="437" width="0.6" height="15.0" fill="rgb(208,119,39)" rx="2" ry="2" />
<text  x="67.37" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="59.5" y="453" width="0.1" height="15.0" fill="rgb(215,24,45)" rx="2" ry="2" />
<text  x="62.47" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (17 samples, 0.04%)</title><rect x="1052.4" y="213" width="0.4" height="15.0" fill="rgb(250,34,19)" rx="2" ry="2" />
<text  x="1055.42" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (215 samples, 0.45%)</title><rect x="218.2" y="181" width="5.3" height="15.0" fill="rgb(214,74,30)" rx="2" ry="2" />
<text  x="221.16" y="191.5" ></text>
</g>
<g >
<title>operator new (84 samples, 0.18%)</title><rect x="542.2" y="341" width="2.1" height="15.0" fill="rgb(208,21,13)" rx="2" ry="2" />
<text  x="545.20" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (9 samples, 0.02%)</title><rect x="200.8" y="85" width="0.2" height="15.0" fill="rgb(250,82,31)" rx="2" ry="2" />
<text  x="203.77" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (13 samples, 0.03%)</title><rect x="699.3" y="421" width="0.3" height="15.0" fill="rgb(205,166,8)" rx="2" ry="2" />
<text  x="702.31" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%)</title><rect x="886.3" y="389" width="0.1" height="15.0" fill="rgb(239,68,15)" rx="2" ry="2" />
<text  x="889.29" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (55 samples, 0.11%)</title><rect x="799.0" y="133" width="1.4" height="15.0" fill="rgb(228,166,34)" rx="2" ry="2" />
<text  x="802.00" y="143.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%)</title><rect x="490.2" y="293" width="0.9" height="15.0" fill="rgb(240,147,13)" rx="2" ry="2" />
<text  x="493.20" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (35 samples, 0.07%)</title><rect x="1039.1" y="229" width="0.9" height="15.0" fill="rgb(227,79,16)" rx="2" ry="2" />
<text  x="1042.12" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (17 samples, 0.04%)</title><rect x="446.7" y="261" width="0.4" height="15.0" fill="rgb(206,148,12)" rx="2" ry="2" />
<text  x="449.68" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (49 samples, 0.10%)</title><rect x="580.1" y="421" width="1.2" height="15.0" fill="rgb(213,176,39)" rx="2" ry="2" />
<text  x="583.10" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (9 samples, 0.02%)</title><rect x="544.6" y="389" width="0.2" height="15.0" fill="rgb(213,206,17)" rx="2" ry="2" />
<text  x="547.62" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%)</title><rect x="571.8" y="341" width="0.2" height="15.0" fill="rgb(241,120,23)" rx="2" ry="2" />
<text  x="574.78" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (13 samples, 0.03%)</title><rect x="100.7" y="405" width="0.3" height="15.0" fill="rgb(210,146,34)" rx="2" ry="2" />
<text  x="103.67" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (24 samples, 0.05%)</title><rect x="1120.7" y="357" width="0.6" height="15.0" fill="rgb(246,212,43)" rx="2" ry="2" />
<text  x="1123.73" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%)</title><rect x="937.9" y="405" width="0.3" height="15.0" fill="rgb(236,60,20)" rx="2" ry="2" />
<text  x="940.89" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (12 samples, 0.03%)</title><rect x="819.6" y="261" width="0.3" height="15.0" fill="rgb(241,127,54)" rx="2" ry="2" />
<text  x="822.61" y="271.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (120 samples, 0.25%)</title><rect x="1172.9" y="453" width="2.9" height="15.0" fill="rgb(226,168,36)" rx="2" ry="2" />
<text  x="1175.86" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (92 samples, 0.19%)</title><rect x="807.1" y="261" width="2.3" height="15.0" fill="rgb(234,146,4)" rx="2" ry="2" />
<text  x="810.12" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (63 samples, 0.13%)</title><rect x="835.0" y="389" width="1.6" height="15.0" fill="rgb(237,122,0)" rx="2" ry="2" />
<text  x="838.05" y="399.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (12 samples, 0.03%)</title><rect x="1070.1" y="341" width="0.3" height="15.0" fill="rgb(242,189,40)" rx="2" ry="2" />
<text  x="1073.12" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1,151 samples, 2.40%)</title><rect x="887.0" y="389" width="28.4" height="15.0" fill="rgb(216,35,13)" rx="2" ry="2" />
<text  x="890.03" y="399.5" >_Z..</text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,378 samples, 13.31%)</title><rect x="954.4" y="421" width="157.1" height="15.0" fill="rgb(238,200,39)" rx="2" ry="2" />
<text  x="957.43" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%)</title><rect x="16.2" y="261" width="0.1" height="15.0" fill="rgb(209,76,5)" rx="2" ry="2" />
<text  x="19.18" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (6 samples, 0.01%)</title><rect x="984.8" y="357" width="0.1" height="15.0" fill="rgb(231,165,31)" rx="2" ry="2" />
<text  x="987.77" y="367.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (31 samples, 0.06%)</title><rect x="39.5" y="405" width="0.7" height="15.0" fill="rgb(244,200,17)" rx="2" ry="2" />
<text  x="42.45" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (10 samples, 0.02%)</title><rect x="853.0" y="357" width="0.3" height="15.0" fill="rgb(213,143,10)" rx="2" ry="2" />
<text  x="856.03" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (14 samples, 0.03%)</title><rect x="579.8" y="405" width="0.3" height="15.0" fill="rgb(214,45,22)" rx="2" ry="2" />
<text  x="582.76" y="415.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (10 samples, 0.02%)</title><rect x="97.9" y="437" width="0.2" height="15.0" fill="rgb(251,15,14)" rx="2" ry="2" />
<text  x="100.89" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (14 samples, 0.03%)</title><rect x="746.3" y="405" width="0.3" height="15.0" fill="rgb(223,208,18)" rx="2" ry="2" />
<text  x="749.30" y="415.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%)</title><rect x="1043.6" y="261" width="0.6" height="15.0" fill="rgb(239,174,35)" rx="2" ry="2" />
<text  x="1046.60" y="271.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (9 samples, 0.02%)</title><rect x="571.6" y="341" width="0.2" height="15.0" fill="rgb(209,0,32)" rx="2" ry="2" />
<text  x="574.56" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (9 samples, 0.02%)</title><rect x="1080.8" y="325" width="0.2" height="15.0" fill="rgb(251,90,28)" rx="2" ry="2" />
<text  x="1083.79" y="335.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (36 samples, 0.08%)</title><rect x="315.8" y="181" width="0.9" height="15.0" fill="rgb(216,123,51)" rx="2" ry="2" />
<text  x="318.82" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (5 samples, 0.01%)</title><rect x="104.5" y="405" width="0.1" height="15.0" fill="rgb(244,47,1)" rx="2" ry="2" />
<text  x="107.51" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%)</title><rect x="1071.0" y="325" width="0.3" height="15.0" fill="rgb(222,126,10)" rx="2" ry="2" />
<text  x="1073.96" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%)</title><rect x="18.2" y="245" width="0.1" height="15.0" fill="rgb(254,74,11)" rx="2" ry="2" />
<text  x="21.18" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (12 samples, 0.03%)</title><rect x="535.0" y="389" width="0.3" height="15.0" fill="rgb(238,121,47)" rx="2" ry="2" />
<text  x="537.96" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (257 samples, 0.54%)</title><rect x="570.3" y="373" width="6.4" height="15.0" fill="rgb(254,36,51)" rx="2" ry="2" />
<text  x="573.33" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (7 samples, 0.01%)</title><rect x="564.9" y="309" width="0.2" height="15.0" fill="rgb(212,205,3)" rx="2" ry="2" />
<text  x="567.93" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (22 samples, 0.05%)</title><rect x="545.8" y="421" width="0.6" height="15.0" fill="rgb(231,63,34)" rx="2" ry="2" />
<text  x="548.82" y="431.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%)</title><rect x="522.3" y="309" width="0.2" height="15.0" fill="rgb(240,32,54)" rx="2" ry="2" />
<text  x="525.33" y="319.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%)</title><rect x="813.7" y="309" width="0.6" height="15.0" fill="rgb(245,76,49)" rx="2" ry="2" />
<text  x="816.72" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (168 samples, 0.35%)</title><rect x="663.1" y="485" width="4.2" height="15.0" fill="rgb(231,19,50)" rx="2" ry="2" />
<text  x="666.11" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.01%)</title><rect x="18.2" y="277" width="0.1" height="15.0" fill="rgb(219,168,42)" rx="2" ry="2" />
<text  x="21.18" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (6 samples, 0.01%)</title><rect x="410.1" y="277" width="0.2" height="15.0" fill="rgb(237,17,28)" rx="2" ry="2" />
<text  x="413.14" y="287.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (14 samples, 0.03%)</title><rect x="408.2" y="229" width="0.3" height="15.0" fill="rgb(205,43,9)" rx="2" ry="2" />
<text  x="411.19" y="239.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (126 samples, 0.26%)</title><rect x="312.7" y="181" width="3.1" height="15.0" fill="rgb(215,160,21)" rx="2" ry="2" />
<text  x="315.72" y="191.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (22 samples, 0.05%)</title><rect x="467.3" y="277" width="0.5" height="15.0" fill="rgb(240,194,17)" rx="2" ry="2" />
<text  x="470.27" y="287.5" ></text>
</g>
<g >
<title>__libc_start_main (46,956 samples, 97.99%)</title><rect x="22.4" y="629" width="1156.3" height="15.0" fill="rgb(209,155,37)" rx="2" ry="2" />
<text  x="25.44" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (5 samples, 0.01%)</title><rect x="884.3" y="405" width="0.1" height="15.0" fill="rgb(230,66,3)" rx="2" ry="2" />
<text  x="887.28" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (108 samples, 0.23%)</title><rect x="839.6" y="405" width="2.7" height="15.0" fill="rgb(223,56,43)" rx="2" ry="2" />
<text  x="842.63" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (5 samples, 0.01%)</title><rect x="688.7" y="453" width="0.1" height="15.0" fill="rgb(231,21,7)" rx="2" ry="2" />
<text  x="691.68" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (158 samples, 0.33%)</title><rect x="671.3" y="485" width="3.9" height="15.0" fill="rgb(211,83,24)" rx="2" ry="2" />
<text  x="674.29" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (6 samples, 0.01%)</title><rect x="192.4" y="69" width="0.1" height="15.0" fill="rgb(243,1,41)" rx="2" ry="2" />
<text  x="195.38" y="79.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="552.7" y="309" width="0.2" height="15.0" fill="rgb(254,151,46)" rx="2" ry="2" />
<text  x="555.72" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%)</title><rect x="604.0" y="437" width="0.5" height="15.0" fill="rgb(243,8,38)" rx="2" ry="2" />
<text  x="606.99" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (5 samples, 0.01%)</title><rect x="983.1" y="357" width="0.1" height="15.0" fill="rgb(206,226,14)" rx="2" ry="2" />
<text  x="986.12" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (74 samples, 0.15%)</title><rect x="979.9" y="325" width="1.8" height="15.0" fill="rgb(213,146,54)" rx="2" ry="2" />
<text  x="982.92" y="335.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%)</title><rect x="649.0" y="485" width="1.0" height="15.0" fill="rgb(234,184,7)" rx="2" ry="2" />
<text  x="651.98" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (30 samples, 0.06%)</title><rect x="930.8" y="357" width="0.7" height="15.0" fill="rgb(226,148,32)" rx="2" ry="2" />
<text  x="933.77" y="367.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.08%)</title><rect x="692.0" y="485" width="0.9" height="15.0" fill="rgb(244,156,24)" rx="2" ry="2" />
<text  x="694.98" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (30 samples, 0.06%)</title><rect x="642.4" y="437" width="0.7" height="15.0" fill="rgb(232,175,14)" rx="2" ry="2" />
<text  x="645.40" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (77 samples, 0.16%)</title><rect x="658.9" y="485" width="1.9" height="15.0" fill="rgb(233,108,51)" rx="2" ry="2" />
<text  x="661.88" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (31 samples, 0.06%)</title><rect x="724.7" y="293" width="0.7" height="15.0" fill="rgb(249,193,42)" rx="2" ry="2" />
<text  x="727.65" y="303.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.01%)</title><rect x="21.5" y="453" width="0.1" height="15.0" fill="rgb(243,19,21)" rx="2" ry="2" />
<text  x="24.52" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (130 samples, 0.27%)</title><rect x="500.0" y="213" width="3.2" height="15.0" fill="rgb(212,229,48)" rx="2" ry="2" />
<text  x="503.05" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.01%)</title><rect x="1178.7" y="629" width="0.2" height="15.0" fill="rgb(210,124,30)" rx="2" ry="2" />
<text  x="1181.75" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%)</title><rect x="708.7" y="501" width="0.2" height="15.0" fill="rgb(222,78,1)" rx="2" ry="2" />
<text  x="711.72" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (9 samples, 0.02%)</title><rect x="481.4" y="325" width="0.2" height="15.0" fill="rgb(235,96,35)" rx="2" ry="2" />
<text  x="484.35" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (24 samples, 0.05%)</title><rect x="502.6" y="197" width="0.6" height="15.0" fill="rgb(241,75,3)" rx="2" ry="2" />
<text  x="505.58" y="207.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (9 samples, 0.02%)</title><rect x="704.1" y="405" width="0.2" height="15.0" fill="rgb(252,107,42)" rx="2" ry="2" />
<text  x="707.07" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (132 samples, 0.28%)</title><rect x="929.7" y="389" width="3.3" height="15.0" fill="rgb(240,185,47)" rx="2" ry="2" />
<text  x="932.71" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (38 samples, 0.08%)</title><rect x="77.7" y="453" width="1.0" height="15.0" fill="rgb(222,103,17)" rx="2" ry="2" />
<text  x="80.72" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (31 samples, 0.06%)</title><rect x="260.3" y="277" width="0.8" height="15.0" fill="rgb(241,65,29)" rx="2" ry="2" />
<text  x="263.34" y="287.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (7 samples, 0.01%)</title><rect x="1178.2" y="437" width="0.2" height="15.0" fill="rgb(209,2,32)" rx="2" ry="2" />
<text  x="1181.20" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%)</title><rect x="410.3" y="277" width="0.2" height="15.0" fill="rgb(217,15,11)" rx="2" ry="2" />
<text  x="413.29" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (25 samples, 0.05%)</title><rect x="481.6" y="325" width="0.6" height="15.0" fill="rgb(206,72,49)" rx="2" ry="2" />
<text  x="484.58" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (36 samples, 0.08%)</title><rect x="20.6" y="453" width="0.9" height="15.0" fill="rgb(231,64,42)" rx="2" ry="2" />
<text  x="23.64" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (24 samples, 0.05%)</title><rect x="483.9" y="309" width="0.6" height="15.0" fill="rgb(236,23,7)" rx="2" ry="2" />
<text  x="486.94" y="319.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%)</title><rect x="807.1" y="245" width="1.1" height="15.0" fill="rgb(231,182,3)" rx="2" ry="2" />
<text  x="810.15" y="255.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (53 samples, 0.11%)</title><rect x="73.9" y="405" width="1.3" height="15.0" fill="rgb(206,207,32)" rx="2" ry="2" />
<text  x="76.90" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%)</title><rect x="643.3" y="437" width="0.1" height="15.0" fill="rgb(226,126,53)" rx="2" ry="2" />
<text  x="646.27" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (20 samples, 0.04%)</title><rect x="615.5" y="437" width="0.5" height="15.0" fill="rgb(254,124,50)" rx="2" ry="2" />
<text  x="618.49" y="447.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (139 samples, 0.29%)</title><rect x="526.6" y="309" width="3.4" height="15.0" fill="rgb(230,30,28)" rx="2" ry="2" />
<text  x="529.57" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%)</title><rect x="219.4" y="133" width="0.1" height="15.0" fill="rgb(210,224,47)" rx="2" ry="2" />
<text  x="222.37" y="143.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%)</title><rect x="783.0" y="277" width="1.6" height="15.0" fill="rgb(228,106,41)" rx="2" ry="2" />
<text  x="786.02" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (15 samples, 0.03%)</title><rect x="1152.9" y="485" width="0.4" height="15.0" fill="rgb(247,190,31)" rx="2" ry="2" />
<text  x="1155.94" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (10 samples, 0.02%)</title><rect x="903.1" y="293" width="0.2" height="15.0" fill="rgb(235,220,18)" rx="2" ry="2" />
<text  x="906.06" y="303.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (17 samples, 0.04%)</title><rect x="1099.0" y="261" width="0.4" height="15.0" fill="rgb(217,106,40)" rx="2" ry="2" />
<text  x="1101.96" y="271.5" ></text>
</g>
<g >
<title>auth::resource::resource (60 samples, 0.13%)</title><rect x="765.4" y="373" width="1.5" height="15.0" fill="rgb(214,107,21)" rx="2" ry="2" />
<text  x="768.43" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (15 samples, 0.03%)</title><rect x="311.9" y="165" width="0.4" height="15.0" fill="rgb(238,10,26)" rx="2" ry="2" />
<text  x="314.91" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (6 samples, 0.01%)</title><rect x="22.3" y="501" width="0.1" height="15.0" fill="rgb(205,215,7)" rx="2" ry="2" />
<text  x="25.29" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (125 samples, 0.26%)</title><rect x="627.2" y="485" width="3.1" height="15.0" fill="rgb(246,180,54)" rx="2" ry="2" />
<text  x="630.21" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%)</title><rect x="862.7" y="437" width="0.3" height="15.0" fill="rgb(217,177,13)" rx="2" ry="2" />
<text  x="865.65" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (11 samples, 0.02%)</title><rect x="790.3" y="229" width="0.3" height="15.0" fill="rgb(252,80,48)" rx="2" ry="2" />
<text  x="793.33" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (8 samples, 0.02%)</title><rect x="661.9" y="485" width="0.2" height="15.0" fill="rgb(254,170,39)" rx="2" ry="2" />
<text  x="664.86" y="495.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (382 samples, 0.80%)</title><rect x="795.6" y="213" width="9.4" height="15.0" fill="rgb(240,119,30)" rx="2" ry="2" />
<text  x="798.60" y="223.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (10 samples, 0.02%)</title><rect x="215.1" y="165" width="0.3" height="15.0" fill="rgb(232,205,14)" rx="2" ry="2" />
<text  x="218.13" y="175.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (17 samples, 0.04%)</title><rect x="167.0" y="197" width="0.4" height="15.0" fill="rgb(226,73,12)" rx="2" ry="2" />
<text  x="170.01" y="207.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%)</title><rect x="482.7" y="309" width="0.1" height="15.0" fill="rgb(247,221,16)" rx="2" ry="2" />
<text  x="485.71" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (24 samples, 0.05%)</title><rect x="1131.8" y="373" width="0.6" height="15.0" fill="rgb(247,43,3)" rx="2" ry="2" />
<text  x="1134.83" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="1133.3" y="421" width="0.2" height="15.0" fill="rgb(213,119,24)" rx="2" ry="2" />
<text  x="1136.34" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="921.5" y="341" width="0.2" height="15.0" fill="rgb(221,194,10)" rx="2" ry="2" />
<text  x="924.51" y="351.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (12 samples, 0.03%)</title><rect x="619.6" y="437" width="0.3" height="15.0" fill="rgb(235,121,10)" rx="2" ry="2" />
<text  x="622.60" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (106 samples, 0.22%)</title><rect x="723.1" y="341" width="2.6" height="15.0" fill="rgb(244,87,4)" rx="2" ry="2" />
<text  x="726.10" y="351.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%)</title><rect x="1159.3" y="389" width="0.9" height="15.0" fill="rgb(224,183,30)" rx="2" ry="2" />
<text  x="1162.32" y="399.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%)</title><rect x="486.4" y="293" width="0.6" height="15.0" fill="rgb(252,133,49)" rx="2" ry="2" />
<text  x="489.43" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (7 samples, 0.01%)</title><rect x="804.8" y="149" width="0.1" height="15.0" fill="rgb(248,63,1)" rx="2" ry="2" />
<text  x="807.76" y="159.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (37 samples, 0.08%)</title><rect x="1077.5" y="293" width="0.9" height="15.0" fill="rgb(230,65,5)" rx="2" ry="2" />
<text  x="1080.54" y="303.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (18 samples, 0.04%)</title><rect x="841.7" y="357" width="0.4" height="15.0" fill="rgb(250,215,16)" rx="2" ry="2" />
<text  x="844.67" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (64 samples, 0.13%)</title><rect x="104.6" y="437" width="1.6" height="15.0" fill="rgb(247,114,36)" rx="2" ry="2" />
<text  x="107.64" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,410 samples, 7.12%)</title><rect x="307.0" y="229" width="83.9" height="15.0" fill="rgb(222,32,37)" rx="2" ry="2" />
<text  x="309.96" y="239.5" >compact_m..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (12 samples, 0.03%)</title><rect x="892.1" y="309" width="0.3" height="15.0" fill="rgb(239,164,43)" rx="2" ry="2" />
<text  x="895.11" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (16 samples, 0.03%)</title><rect x="625.1" y="485" width="0.4" height="15.0" fill="rgb(210,38,53)" rx="2" ry="2" />
<text  x="628.09" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%)</title><rect x="781.0" y="325" width="0.2" height="15.0" fill="rgb(211,184,36)" rx="2" ry="2" />
<text  x="784.05" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (6 samples, 0.01%)</title><rect x="365.2" y="197" width="0.2" height="15.0" fill="rgb(222,104,52)" rx="2" ry="2" />
<text  x="368.25" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%)</title><rect x="779.9" y="293" width="0.2" height="15.0" fill="rgb(250,105,10)" rx="2" ry="2" />
<text  x="782.91" y="303.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (544 samples, 1.14%)</title><rect x="468.0" y="309" width="13.4" height="15.0" fill="rgb(226,29,50)" rx="2" ry="2" />
<text  x="470.96" y="319.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (13 samples, 0.03%)</title><rect x="1116.3" y="357" width="0.3" height="15.0" fill="rgb(206,201,10)" rx="2" ry="2" />
<text  x="1119.30" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%)</title><rect x="501.1" y="181" width="0.6" height="15.0" fill="rgb(214,114,48)" rx="2" ry="2" />
<text  x="504.10" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (121 samples, 0.25%)</title><rect x="1012.8" y="261" width="3.0" height="15.0" fill="rgb(224,16,16)" rx="2" ry="2" />
<text  x="1015.77" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (11 samples, 0.02%)</title><rect x="1176.6" y="469" width="0.3" height="15.0" fill="rgb(242,62,1)" rx="2" ry="2" />
<text  x="1179.58" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,135 samples, 48.28%)</title><rect x="50.6" y="485" width="569.7" height="15.0" fill="rgb(243,36,41)" rx="2" ry="2" />
<text  x="53.56" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%)</title><rect x="1150.6" y="469" width="0.1" height="15.0" fill="rgb(207,52,11)" rx="2" ry="2" />
<text  x="1153.55" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (604 samples, 1.26%)</title><rect x="790.7" y="229" width="14.9" height="15.0" fill="rgb(218,19,2)" rx="2" ry="2" />
<text  x="793.75" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (145 samples, 0.30%)</title><rect x="251.2" y="229" width="3.5" height="15.0" fill="rgb(238,181,3)" rx="2" ry="2" />
<text  x="254.16" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%)</title><rect x="586.3" y="389" width="0.2" height="15.0" fill="rgb(234,38,34)" rx="2" ry="2" />
<text  x="589.28" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (52 samples, 0.11%)</title><rect x="610.7" y="389" width="1.3" height="15.0" fill="rgb(253,152,14)" rx="2" ry="2" />
<text  x="613.69" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (64 samples, 0.13%)</title><rect x="361.9" y="165" width="1.5" height="15.0" fill="rgb(233,80,53)" rx="2" ry="2" />
<text  x="364.87" y="175.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (80 samples, 0.17%)</title><rect x="595.1" y="437" width="2.0" height="15.0" fill="rgb(254,4,50)" rx="2" ry="2" />
<text  x="598.12" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (43 samples, 0.09%)</title><rect x="246.4" y="197" width="1.0" height="15.0" fill="rgb(250,89,27)" rx="2" ry="2" />
<text  x="249.35" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (24 samples, 0.05%)</title><rect x="1141.5" y="357" width="0.6" height="15.0" fill="rgb(250,96,5)" rx="2" ry="2" />
<text  x="1144.54" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (7 samples, 0.01%)</title><rect x="813.4" y="325" width="0.2" height="15.0" fill="rgb(238,72,14)" rx="2" ry="2" />
<text  x="816.38" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (19 samples, 0.04%)</title><rect x="499.6" y="213" width="0.4" height="15.0" fill="rgb(223,206,4)" rx="2" ry="2" />
<text  x="502.58" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%)</title><rect x="1123.4" y="389" width="0.1" height="15.0" fill="rgb(217,28,28)" rx="2" ry="2" />
<text  x="1126.36" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (40 samples, 0.08%)</title><rect x="938.2" y="405" width="0.9" height="15.0" fill="rgb(216,69,47)" rx="2" ry="2" />
<text  x="941.16" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (11 samples, 0.02%)</title><rect x="16.1" y="277" width="0.2" height="15.0" fill="rgb(244,28,5)" rx="2" ry="2" />
<text  x="19.06" y="287.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (9 samples, 0.02%)</title><rect x="364.4" y="197" width="0.2" height="15.0" fill="rgb(221,167,34)" rx="2" ry="2" />
<text  x="367.41" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%)</title><rect x="575.5" y="341" width="0.2" height="15.0" fill="rgb(224,80,7)" rx="2" ry="2" />
<text  x="578.55" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (20 samples, 0.04%)</title><rect x="81.1" y="453" width="0.5" height="15.0" fill="rgb(205,111,47)" rx="2" ry="2" />
<text  x="84.07" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.03%)</title><rect x="1047.0" y="277" width="0.3" height="15.0" fill="rgb(216,73,38)" rx="2" ry="2" />
<text  x="1050.00" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (98 samples, 0.20%)</title><rect x="723.3" y="325" width="2.4" height="15.0" fill="rgb(224,70,25)" rx="2" ry="2" />
<text  x="726.30" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (11 samples, 0.02%)</title><rect x="21.8" y="485" width="0.2" height="15.0" fill="rgb(211,181,40)" rx="2" ry="2" />
<text  x="24.77" y="495.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (21 samples, 0.04%)</title><rect x="1134.1" y="421" width="0.5" height="15.0" fill="rgb(241,164,35)" rx="2" ry="2" />
<text  x="1137.08" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%)</title><rect x="656.4" y="437" width="0.4" height="15.0" fill="rgb(239,70,30)" rx="2" ry="2" />
<text  x="659.39" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (62 samples, 0.13%)</title><rect x="959.2" y="405" width="1.5" height="15.0" fill="rgb(235,221,35)" rx="2" ry="2" />
<text  x="962.19" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (18 samples, 0.04%)</title><rect x="1071.7" y="341" width="0.4" height="15.0" fill="rgb(247,38,8)" rx="2" ry="2" />
<text  x="1074.70" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="32.4" y="485" width="0.1" height="15.0" fill="rgb(231,164,16)" rx="2" ry="2" />
<text  x="35.38" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (30 samples, 0.06%)</title><rect x="679.3" y="437" width="0.7" height="15.0" fill="rgb(205,147,34)" rx="2" ry="2" />
<text  x="682.29" y="447.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (5 samples, 0.01%)</title><rect x="976.1" y="357" width="0.1" height="15.0" fill="rgb(218,25,17)" rx="2" ry="2" />
<text  x="979.05" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (27 samples, 0.06%)</title><rect x="626.1" y="485" width="0.6" height="15.0" fill="rgb(236,137,26)" rx="2" ry="2" />
<text  x="629.08" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (11 samples, 0.02%)</title><rect x="1142.3" y="277" width="0.2" height="15.0" fill="rgb(243,204,48)" rx="2" ry="2" />
<text  x="1145.25" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (134 samples, 0.28%)</title><rect x="410.5" y="309" width="3.3" height="15.0" fill="rgb(232,18,31)" rx="2" ry="2" />
<text  x="413.48" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%)</title><rect x="1044.9" y="261" width="0.2" height="15.0" fill="rgb(244,159,14)" rx="2" ry="2" />
<text  x="1047.91" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (35 samples, 0.07%)</title><rect x="993.2" y="293" width="0.9" height="15.0" fill="rgb(219,132,44)" rx="2" ry="2" />
<text  x="996.22" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (17 samples, 0.04%)</title><rect x="882.2" y="421" width="0.4" height="15.0" fill="rgb(218,71,42)" rx="2" ry="2" />
<text  x="885.18" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (52 samples, 0.11%)</title><rect x="712.4" y="437" width="1.3" height="15.0" fill="rgb(225,199,35)" rx="2" ry="2" />
<text  x="715.41" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (6 samples, 0.01%)</title><rect x="760.1" y="373" width="0.1" height="15.0" fill="rgb(209,79,34)" rx="2" ry="2" />
<text  x="763.07" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (20 samples, 0.04%)</title><rect x="535.5" y="405" width="0.5" height="15.0" fill="rgb(227,56,15)" rx="2" ry="2" />
<text  x="538.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%)</title><rect x="712.7" y="405" width="0.8" height="15.0" fill="rgb(213,155,16)" rx="2" ry="2" />
<text  x="715.66" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (6 samples, 0.01%)</title><rect x="319.0" y="213" width="0.2" height="15.0" fill="rgb(220,173,22)" rx="2" ry="2" />
<text  x="322.02" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (31 samples, 0.06%)</title><rect x="605.8" y="437" width="0.8" height="15.0" fill="rgb(241,45,10)" rx="2" ry="2" />
<text  x="608.84" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.01%)</title><rect x="18.2" y="293" width="0.1" height="15.0" fill="rgb(221,205,54)" rx="2" ry="2" />
<text  x="21.18" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (53 samples, 0.11%)</title><rect x="669.8" y="469" width="1.3" height="15.0" fill="rgb(232,172,30)" rx="2" ry="2" />
<text  x="672.81" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (6 samples, 0.01%)</title><rect x="405.6" y="261" width="0.1" height="15.0" fill="rgb(209,52,49)" rx="2" ry="2" />
<text  x="408.56" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%)</title><rect x="1142.2" y="437" width="0.9" height="15.0" fill="rgb(228,90,30)" rx="2" ry="2" />
<text  x="1145.15" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (836 samples, 1.74%)</title><rect x="637.1" y="501" width="20.6" height="15.0" fill="rgb(205,32,16)" rx="2" ry="2" />
<text  x="640.09" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (11 samples, 0.02%)</title><rect x="740.4" y="293" width="0.2" height="15.0" fill="rgb(233,195,1)" rx="2" ry="2" />
<text  x="743.36" y="303.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%)</title><rect x="44.8" y="485" width="0.6" height="15.0" fill="rgb(233,171,18)" rx="2" ry="2" />
<text  x="47.84" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (12 samples, 0.03%)</title><rect x="725.4" y="293" width="0.3" height="15.0" fill="rgb(218,154,14)" rx="2" ry="2" />
<text  x="728.42" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,881 samples, 3.93%)</title><rect x="1007.6" y="293" width="46.3" height="15.0" fill="rgb(238,193,51)" rx="2" ry="2" />
<text  x="1010.55" y="303.5" >serv..</text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%)</title><rect x="1132.5" y="373" width="0.1" height="15.0" fill="rgb(218,109,15)" rx="2" ry="2" />
<text  x="1135.50" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (10 samples, 0.02%)</title><rect x="37.6" y="421" width="0.2" height="15.0" fill="rgb(224,107,48)" rx="2" ry="2" />
<text  x="40.58" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (320 samples, 0.67%)</title><rect x="537.5" y="421" width="7.9" height="15.0" fill="rgb(229,26,33)" rx="2" ry="2" />
<text  x="540.50" y="431.5" ></text>
</g>
<g >
<title>service::client_state::has_access (2,043 samples, 4.26%)</title><rect x="769.7" y="373" width="50.3" height="15.0" fill="rgb(218,120,38)" rx="2" ry="2" />
<text  x="772.69" y="383.5" >servi..</text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (203 samples, 0.42%)</title><rect x="15.6" y="437" width="5.0" height="15.0" fill="rgb(245,204,41)" rx="2" ry="2" />
<text  x="18.64" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (39 samples, 0.08%)</title><rect x="317.8" y="165" width="1.0" height="15.0" fill="rgb(225,204,5)" rx="2" ry="2" />
<text  x="320.84" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%)</title><rect x="1052.6" y="197" width="0.2" height="15.0" fill="rgb(227,163,12)" rx="2" ry="2" />
<text  x="1055.57" y="207.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (233 samples, 0.49%)</title><rect x="1085.5" y="245" width="5.7" height="15.0" fill="rgb(231,26,5)" rx="2" ry="2" />
<text  x="1088.47" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.01%)</title><rect x="40.0" y="389" width="0.2" height="15.0" fill="rgb(206,118,32)" rx="2" ry="2" />
<text  x="43.04" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%)</title><rect x="675.2" y="485" width="0.1" height="15.0" fill="rgb(206,6,41)" rx="2" ry="2" />
<text  x="678.18" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (33 samples, 0.07%)</title><rect x="1160.8" y="405" width="0.8" height="15.0" fill="rgb(222,104,30)" rx="2" ry="2" />
<text  x="1163.77" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (22 samples, 0.05%)</title><rect x="446.1" y="261" width="0.6" height="15.0" fill="rgb(215,119,32)" rx="2" ry="2" />
<text  x="449.14" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (389 samples, 0.81%)</title><rect x="151.8" y="245" width="9.5" height="15.0" fill="rgb(251,104,24)" rx="2" ry="2" />
<text  x="154.77" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (5 samples, 0.01%)</title><rect x="1177.6" y="501" width="0.1" height="15.0" fill="rgb(232,224,12)" rx="2" ry="2" />
<text  x="1180.61" y="511.5" ></text>
</g>
<g >
<title>row::external_memory_usage (7 samples, 0.01%)</title><rect x="217.5" y="165" width="0.2" height="15.0" fill="rgb(229,52,7)" rx="2" ry="2" />
<text  x="220.54" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%)</title><rect x="1152.4" y="485" width="0.5" height="15.0" fill="rgb(227,206,5)" rx="2" ry="2" />
<text  x="1155.37" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="440.2" y="277" width="0.1" height="15.0" fill="rgb(243,170,6)" rx="2" ry="2" />
<text  x="443.21" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%)</title><rect x="18.7" y="293" width="0.1" height="15.0" fill="rgb(250,99,6)" rx="2" ry="2" />
<text  x="21.69" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (14 samples, 0.03%)</title><rect x="204.8" y="101" width="0.4" height="15.0" fill="rgb(205,217,6)" rx="2" ry="2" />
<text  x="207.84" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="1156.4" y="421" width="0.5" height="15.0" fill="rgb(252,111,47)" rx="2" ry="2" />
<text  x="1159.41" y="431.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (21 samples, 0.04%)</title><rect x="1141.5" y="309" width="0.6" height="15.0" fill="rgb(247,3,37)" rx="2" ry="2" />
<text  x="1144.54" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (25 samples, 0.05%)</title><rect x="1156.3" y="453" width="0.6" height="15.0" fill="rgb(212,145,31)" rx="2" ry="2" />
<text  x="1159.26" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.02%)</title><rect x="242.0" y="213" width="0.2" height="15.0" fill="rgb(253,116,45)" rx="2" ry="2" />
<text  x="245.00" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (12 samples, 0.03%)</title><rect x="860.8" y="501" width="0.3" height="15.0" fill="rgb(207,12,17)" rx="2" ry="2" />
<text  x="863.78" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (445 samples, 0.93%)</title><rect x="566.6" y="389" width="10.9" height="15.0" fill="rgb(239,112,13)" rx="2" ry="2" />
<text  x="569.58" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%)</title><rect x="530.1" y="309" width="0.1" height="15.0" fill="rgb(212,130,31)" rx="2" ry="2" />
<text  x="533.09" y="319.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (58 samples, 0.12%)</title><rect x="1098.1" y="309" width="1.4" height="15.0" fill="rgb(232,21,49)" rx="2" ry="2" />
<text  x="1101.10" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (27 samples, 0.06%)</title><rect x="561.2" y="277" width="0.7" height="15.0" fill="rgb(236,151,23)" rx="2" ry="2" />
<text  x="564.19" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (43 samples, 0.09%)</title><rect x="228.4" y="165" width="1.1" height="15.0" fill="rgb(215,159,14)" rx="2" ry="2" />
<text  x="231.40" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%)</title><rect x="1029.6" y="181" width="0.2" height="15.0" fill="rgb(225,114,17)" rx="2" ry="2" />
<text  x="1032.64" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (28 samples, 0.06%)</title><rect x="560.5" y="277" width="0.7" height="15.0" fill="rgb(221,109,44)" rx="2" ry="2" />
<text  x="563.50" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%)</title><rect x="1007.1" y="293" width="0.5" height="15.0" fill="rgb(207,132,32)" rx="2" ry="2" />
<text  x="1010.08" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (9 samples, 0.02%)</title><rect x="909.1" y="341" width="0.2" height="15.0" fill="rgb(207,179,47)" rx="2" ry="2" />
<text  x="912.10" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (13 samples, 0.03%)</title><rect x="599.4" y="421" width="0.3" height="15.0" fill="rgb(253,172,35)" rx="2" ry="2" />
<text  x="602.38" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%)</title><rect x="74.1" y="389" width="0.2" height="15.0" fill="rgb(253,52,9)" rx="2" ry="2" />
<text  x="77.12" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,731 samples, 3.61%)</title><rect x="320.8" y="197" width="42.6" height="15.0" fill="rgb(228,6,6)" rx="2" ry="2" />
<text  x="323.82" y="207.5" >muta..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,507 samples, 9.41%)</title><rect x="144.4" y="309" width="111.0" height="15.0" fill="rgb(235,67,3)" rx="2" ry="2" />
<text  x="147.41" y="319.5" >partition_sna..</text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (71 samples, 0.15%)</title><rect x="436.5" y="261" width="1.8" height="15.0" fill="rgb(216,16,38)" rx="2" ry="2" />
<text  x="439.51" y="271.5" ></text>
</g>
<g >
<title>local_schema_registry (10 samples, 0.02%)</title><rect x="967.9" y="373" width="0.3" height="15.0" fill="rgb(238,66,16)" rx="2" ry="2" />
<text  x="970.93" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (19 samples, 0.04%)</title><rect x="859.6" y="485" width="0.4" height="15.0" fill="rgb(209,37,11)" rx="2" ry="2" />
<text  x="862.55" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (5 samples, 0.01%)</title><rect x="1117.9" y="389" width="0.1" height="15.0" fill="rgb(205,195,7)" rx="2" ry="2" />
<text  x="1120.92" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (5 samples, 0.01%)</title><rect x="306.0" y="197" width="0.1" height="15.0" fill="rgb(218,89,28)" rx="2" ry="2" />
<text  x="309.00" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (20 samples, 0.04%)</title><rect x="11.9" y="581" width="0.5" height="15.0" fill="rgb(242,18,4)" rx="2" ry="2" />
<text  x="14.87" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,300 samples, 2.71%)</title><rect x="781.3" y="325" width="32.0" height="15.0" fill="rgb(254,148,11)" rx="2" ry="2" />
<text  x="784.27" y="335.5" >st..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%)</title><rect x="1108.9" y="373" width="0.2" height="15.0" fill="rgb(229,119,11)" rx="2" ry="2" />
<text  x="1111.93" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%)</title><rect x="22.3" y="613" width="0.1" height="15.0" fill="rgb(209,156,36)" rx="2" ry="2" />
<text  x="25.26" y="623.5" ></text>
</g>
<g >
<title>schema_registry::get (5 samples, 0.01%)</title><rect x="969.8" y="373" width="0.1" height="15.0" fill="rgb(240,175,47)" rx="2" ry="2" />
<text  x="972.80" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (18 samples, 0.04%)</title><rect x="685.8" y="453" width="0.4" height="15.0" fill="rgb(237,79,8)" rx="2" ry="2" />
<text  x="688.79" y="463.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (79 samples, 0.16%)</title><rect x="906.5" y="325" width="2.0" height="15.0" fill="rgb(253,145,34)" rx="2" ry="2" />
<text  x="909.51" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (60 samples, 0.13%)</title><rect x="328.6" y="181" width="1.4" height="15.0" fill="rgb(214,83,40)" rx="2" ry="2" />
<text  x="331.55" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%)</title><rect x="918.2" y="357" width="0.6" height="15.0" fill="rgb(214,147,31)" rx="2" ry="2" />
<text  x="921.23" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%)</title><rect x="235.2" y="245" width="0.4" height="15.0" fill="rgb(244,60,31)" rx="2" ry="2" />
<text  x="238.25" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%)</title><rect x="851.4" y="341" width="1.6" height="15.0" fill="rgb(212,165,49)" rx="2" ry="2" />
<text  x="854.45" y="351.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%)</title><rect x="529.0" y="261" width="0.6" height="15.0" fill="rgb(232,129,28)" rx="2" ry="2" />
<text  x="531.98" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (60 samples, 0.13%)</title><rect x="904.3" y="325" width="1.5" height="15.0" fill="rgb(211,219,37)" rx="2" ry="2" />
<text  x="907.30" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (14 samples, 0.03%)</title><rect x="17.8" y="309" width="0.3" height="15.0" fill="rgb(221,111,1)" rx="2" ry="2" />
<text  x="20.76" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (48 samples, 0.10%)</title><rect x="276.4" y="309" width="1.2" height="15.0" fill="rgb(211,176,13)" rx="2" ry="2" />
<text  x="279.45" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%)</title><rect x="53.8" y="469" width="0.2" height="15.0" fill="rgb(218,114,28)" rx="2" ry="2" />
<text  x="56.81" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (63 samples, 0.13%)</title><rect x="811.2" y="293" width="1.6" height="15.0" fill="rgb(238,145,26)" rx="2" ry="2" />
<text  x="814.24" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (6 samples, 0.01%)</title><rect x="69.7" y="389" width="0.2" height="15.0" fill="rgb(221,7,14)" rx="2" ry="2" />
<text  x="72.74" y="399.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (17 samples, 0.04%)</title><rect x="1053.5" y="277" width="0.4" height="15.0" fill="rgb(234,228,5)" rx="2" ry="2" />
<text  x="1056.45" y="287.5" ></text>
</g>
<g >
<title>query::result::result (15 samples, 0.03%)</title><rect x="603.3" y="421" width="0.4" height="15.0" fill="rgb(205,71,10)" rx="2" ry="2" />
<text  x="606.35" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (16 samples, 0.03%)</title><rect x="534.9" y="405" width="0.4" height="15.0" fill="rgb(237,163,44)" rx="2" ry="2" />
<text  x="537.87" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (23 samples, 0.05%)</title><rect x="829.7" y="309" width="0.5" height="15.0" fill="rgb(254,71,42)" rx="2" ry="2" />
<text  x="832.68" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%)</title><rect x="1100.8" y="293" width="0.2" height="15.0" fill="rgb(217,16,50)" rx="2" ry="2" />
<text  x="1103.83" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%)</title><rect x="628.9" y="453" width="0.2" height="15.0" fill="rgb(210,198,47)" rx="2" ry="2" />
<text  x="631.86" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%)</title><rect x="513.9" y="309" width="0.7" height="15.0" fill="rgb(244,30,45)" rx="2" ry="2" />
<text  x="516.88" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (20 samples, 0.04%)</title><rect x="623.5" y="469" width="0.5" height="15.0" fill="rgb(217,112,38)" rx="2" ry="2" />
<text  x="626.52" y="479.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (130 samples, 0.27%)</title><rect x="526.7" y="293" width="3.2" height="15.0" fill="rgb(242,66,37)" rx="2" ry="2" />
<text  x="529.67" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%)</title><rect x="480.0" y="181" width="0.3" height="15.0" fill="rgb(242,177,22)" rx="2" ry="2" />
<text  x="482.98" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (5 samples, 0.01%)</title><rect x="951.3" y="373" width="0.1" height="15.0" fill="rgb(220,162,52)" rx="2" ry="2" />
<text  x="954.31" y="383.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.09%)</title><rect x="1126.1" y="421" width="1.0" height="15.0" fill="rgb(253,38,31)" rx="2" ry="2" />
<text  x="1129.10" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.08%)</title><rect x="808.4" y="245" width="1.0" height="15.0" fill="rgb(254,174,32)" rx="2" ry="2" />
<text  x="811.38" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (150 samples, 0.31%)</title><rect x="849.6" y="405" width="3.7" height="15.0" fill="rgb(209,37,23)" rx="2" ry="2" />
<text  x="852.58" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%)</title><rect x="1155.6" y="405" width="0.2" height="15.0" fill="rgb(210,121,5)" rx="2" ry="2" />
<text  x="1158.57" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%)</title><rect x="1142.2" y="421" width="0.9" height="15.0" fill="rgb(213,113,43)" rx="2" ry="2" />
<text  x="1145.18" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%)</title><rect x="674.4" y="453" width="0.4" height="15.0" fill="rgb(207,229,51)" rx="2" ry="2" />
<text  x="677.44" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (24 samples, 0.05%)</title><rect x="285.8" y="357" width="0.6" height="15.0" fill="rgb(231,173,21)" rx="2" ry="2" />
<text  x="288.78" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (46 samples, 0.10%)</title><rect x="102.2" y="405" width="1.1" height="15.0" fill="rgb(237,196,13)" rx="2" ry="2" />
<text  x="105.17" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%)</title><rect x="982.0" y="341" width="0.2" height="15.0" fill="rgb(252,43,16)" rx="2" ry="2" />
<text  x="985.01" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.01%)</title><rect x="18.2" y="213" width="0.1" height="15.0" fill="rgb(205,119,50)" rx="2" ry="2" />
<text  x="21.18" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (5 samples, 0.01%)</title><rect x="255.3" y="277" width="0.1" height="15.0" fill="rgb(249,4,19)" rx="2" ry="2" />
<text  x="258.27" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%)</title><rect x="495.6" y="261" width="0.2" height="15.0" fill="rgb(221,57,44)" rx="2" ry="2" />
<text  x="498.64" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (20 samples, 0.04%)</title><rect x="597.9" y="437" width="0.5" height="15.0" fill="rgb(245,11,3)" rx="2" ry="2" />
<text  x="600.93" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (19 samples, 0.04%)</title><rect x="1105.3" y="357" width="0.5" height="15.0" fill="rgb(230,176,52)" rx="2" ry="2" />
<text  x="1108.31" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (8 samples, 0.02%)</title><rect x="742.1" y="277" width="0.2" height="15.0" fill="rgb(253,25,23)" rx="2" ry="2" />
<text  x="745.14" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (18 samples, 0.04%)</title><rect x="1100.1" y="309" width="0.4" height="15.0" fill="rgb(218,159,48)" rx="2" ry="2" />
<text  x="1103.07" y="319.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (6 samples, 0.01%)</title><rect x="21.8" y="421" width="0.2" height="15.0" fill="rgb(219,193,29)" rx="2" ry="2" />
<text  x="24.84" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="660.8" y="485" width="0.1" height="15.0" fill="rgb(238,82,52)" rx="2" ry="2" />
<text  x="663.78" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%)</title><rect x="787.0" y="229" width="0.2" height="15.0" fill="rgb(247,134,4)" rx="2" ry="2" />
<text  x="789.98" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (17 samples, 0.04%)</title><rect x="18.9" y="293" width="0.4" height="15.0" fill="rgb(220,34,26)" rx="2" ry="2" />
<text  x="21.91" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (92 samples, 0.19%)</title><rect x="742.1" y="293" width="2.2" height="15.0" fill="rgb(242,227,44)" rx="2" ry="2" />
<text  x="745.06" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.03%)</title><rect x="1106.8" y="357" width="0.3" height="15.0" fill="rgb(229,163,16)" rx="2" ry="2" />
<text  x="1109.84" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (7 samples, 0.01%)</title><rect x="818.4" y="309" width="0.2" height="15.0" fill="rgb(249,22,1)" rx="2" ry="2" />
<text  x="821.38" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%)</title><rect x="1005.8" y="293" width="0.1" height="15.0" fill="rgb(254,137,6)" rx="2" ry="2" />
<text  x="1008.83" y="303.5" ></text>
</g>
<g >
<title>table::as_mutation_source (108 samples, 0.23%)</title><rect x="616.6" y="437" width="2.6" height="15.0" fill="rgb(216,3,49)" rx="2" ry="2" />
<text  x="619.57" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (18 samples, 0.04%)</title><rect x="388.4" y="149" width="0.5" height="15.0" fill="rgb(206,80,30)" rx="2" ry="2" />
<text  x="391.42" y="159.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.02%)</title><rect x="21.8" y="469" width="0.2" height="15.0" fill="rgb(212,180,11)" rx="2" ry="2" />
<text  x="24.80" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%)</title><rect x="448.7" y="277" width="0.2" height="15.0" fill="rgb(224,176,23)" rx="2" ry="2" />
<text  x="451.65" y="287.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.02%)</title><rect x="662.6" y="469" width="0.3" height="15.0" fill="rgb(254,101,44)" rx="2" ry="2" />
<text  x="665.62" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="812.1" y="261" width="0.1" height="15.0" fill="rgb(212,148,10)" rx="2" ry="2" />
<text  x="815.07" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (8 samples, 0.02%)</title><rect x="616.3" y="437" width="0.2" height="15.0" fill="rgb(227,70,36)" rx="2" ry="2" />
<text  x="619.28" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (13 samples, 0.03%)</title><rect x="1151.3" y="469" width="0.3" height="15.0" fill="rgb(239,96,14)" rx="2" ry="2" />
<text  x="1154.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (10 samples, 0.02%)</title><rect x="41.5" y="437" width="0.3" height="15.0" fill="rgb(216,156,51)" rx="2" ry="2" />
<text  x="44.55" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (83 samples, 0.17%)</title><rect x="734.4" y="341" width="2.0" height="15.0" fill="rgb(248,142,51)" rx="2" ry="2" />
<text  x="737.38" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (47 samples, 0.10%)</title><rect x="1149.6" y="485" width="1.1" height="15.0" fill="rgb(227,47,10)" rx="2" ry="2" />
<text  x="1152.57" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (6 samples, 0.01%)</title><rect x="1003.5" y="293" width="0.2" height="15.0" fill="rgb(242,220,1)" rx="2" ry="2" />
<text  x="1006.51" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (10 samples, 0.02%)</title><rect x="644.1" y="437" width="0.2" height="15.0" fill="rgb(223,208,13)" rx="2" ry="2" />
<text  x="647.05" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (9 samples, 0.02%)</title><rect x="746.4" y="389" width="0.2" height="15.0" fill="rgb(220,10,33)" rx="2" ry="2" />
<text  x="749.42" y="399.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,827 samples, 5.90%)</title><rect x="761.3" y="405" width="69.6" height="15.0" fill="rgb(229,29,0)" rx="2" ry="2" />
<text  x="764.30" y="415.5" >service..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (46 samples, 0.10%)</title><rect x="511.7" y="293" width="1.1" height="15.0" fill="rgb(222,43,50)" rx="2" ry="2" />
<text  x="514.67" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (27 samples, 0.06%)</title><rect x="536.8" y="421" width="0.7" height="15.0" fill="rgb(213,142,37)" rx="2" ry="2" />
<text  x="539.79" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (25 samples, 0.05%)</title><rect x="757.6" y="309" width="0.6" height="15.0" fill="rgb(239,171,8)" rx="2" ry="2" />
<text  x="760.55" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (7 samples, 0.01%)</title><rect x="651.2" y="453" width="0.2" height="15.0" fill="rgb(249,161,14)" rx="2" ry="2" />
<text  x="654.22" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (5 samples, 0.01%)</title><rect x="1156.1" y="453" width="0.2" height="15.0" fill="rgb(205,166,51)" rx="2" ry="2" />
<text  x="1159.14" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (21 samples, 0.04%)</title><rect x="315.3" y="165" width="0.5" height="15.0" fill="rgb(252,33,9)" rx="2" ry="2" />
<text  x="318.31" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (34 samples, 0.07%)</title><rect x="767.0" y="373" width="0.9" height="15.0" fill="rgb(238,49,2)" rx="2" ry="2" />
<text  x="770.03" y="383.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (5 samples, 0.01%)</title><rect x="24.7" y="517" width="0.1" height="15.0" fill="rgb(205,15,7)" rx="2" ry="2" />
<text  x="27.70" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%)</title><rect x="16.1" y="261" width="0.1" height="15.0" fill="rgb(218,81,49)" rx="2" ry="2" />
<text  x="19.06" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.03%)</title><rect x="1138.4" y="421" width="0.4" height="15.0" fill="rgb(243,70,23)" rx="2" ry="2" />
<text  x="1141.41" y="431.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (22 samples, 0.05%)</title><rect x="958.6" y="389" width="0.6" height="15.0" fill="rgb(254,31,16)" rx="2" ry="2" />
<text  x="961.64" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (45 samples, 0.09%)</title><rect x="732.2" y="389" width="1.1" height="15.0" fill="rgb(213,176,20)" rx="2" ry="2" />
<text  x="735.19" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (9 samples, 0.02%)</title><rect x="822.1" y="341" width="0.2" height="15.0" fill="rgb(211,49,35)" rx="2" ry="2" />
<text  x="825.12" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (16 samples, 0.03%)</title><rect x="159.9" y="197" width="0.4" height="15.0" fill="rgb(222,198,1)" rx="2" ry="2" />
<text  x="162.92" y="207.5" ></text>
</g>
<g >
<title>operator new (103 samples, 0.21%)</title><rect x="991.6" y="325" width="2.5" height="15.0" fill="rgb(209,151,3)" rx="2" ry="2" />
<text  x="994.59" y="335.5" ></text>
</g>
<g >
<title>database::find_column_family (71 samples, 0.15%)</title><rect x="753.6" y="373" width="1.7" height="15.0" fill="rgb(235,63,38)" rx="2" ry="2" />
<text  x="756.56" y="383.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%)</title><rect x="617.2" y="389" width="0.7" height="15.0" fill="rgb(252,208,17)" rx="2" ry="2" />
<text  x="620.21" y="399.5" ></text>
</g>
<g >
<title>freeze (11 samples, 0.02%)</title><rect x="1142.5" y="197" width="0.3" height="15.0" fill="rgb(220,15,46)" rx="2" ry="2" />
<text  x="1145.55" y="207.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (376 samples, 0.78%)</title><rect x="309.6" y="197" width="9.3" height="15.0" fill="rgb(210,98,29)" rx="2" ry="2" />
<text  x="312.59" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (12 samples, 0.03%)</title><rect x="557.2" y="293" width="0.3" height="15.0" fill="rgb(213,205,51)" rx="2" ry="2" />
<text  x="560.18" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (110 samples, 0.23%)</title><rect x="1173.1" y="437" width="2.7" height="15.0" fill="rgb(208,67,36)" rx="2" ry="2" />
<text  x="1176.06" y="447.5" ></text>
</g>
<g >
<title>row::row (1,402 samples, 2.93%)</title><rect x="172.1" y="149" width="34.5" height="15.0" fill="rgb(221,33,13)" rx="2" ry="2" />
<text  x="175.11" y="159.5" >ro..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (32 samples, 0.07%)</title><rect x="656.8" y="437" width="0.7" height="15.0" fill="rgb(226,224,42)" rx="2" ry="2" />
<text  x="659.76" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (7 samples, 0.01%)</title><rect x="714.6" y="469" width="0.1" height="15.0" fill="rgb(232,25,38)" rx="2" ry="2" />
<text  x="717.56" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (9 samples, 0.02%)</title><rect x="597.4" y="421" width="0.2" height="15.0" fill="rgb(208,118,23)" rx="2" ry="2" />
<text  x="600.39" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%)</title><rect x="636.4" y="485" width="0.5" height="15.0" fill="rgb(234,220,51)" rx="2" ry="2" />
<text  x="639.45" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (10 samples, 0.02%)</title><rect x="1101.0" y="309" width="0.2" height="15.0" fill="rgb(226,151,25)" rx="2" ry="2" />
<text  x="1103.98" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (46 samples, 0.10%)</title><rect x="317.7" y="181" width="1.2" height="15.0" fill="rgb(211,76,20)" rx="2" ry="2" />
<text  x="320.72" y="191.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (10 samples, 0.02%)</title><rect x="847.5" y="325" width="0.2" height="15.0" fill="rgb(234,212,41)" rx="2" ry="2" />
<text  x="850.49" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (24 samples, 0.05%)</title><rect x="216.3" y="149" width="0.6" height="15.0" fill="rgb(219,32,52)" rx="2" ry="2" />
<text  x="219.31" y="159.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (20 samples, 0.04%)</title><rect x="159.9" y="213" width="0.5" height="15.0" fill="rgb(239,83,21)" rx="2" ry="2" />
<text  x="162.87" y="223.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%)</title><rect x="577.8" y="389" width="0.6" height="15.0" fill="rgb(248,188,50)" rx="2" ry="2" />
<text  x="580.76" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (18 samples, 0.04%)</title><rect x="62.5" y="421" width="0.4" height="15.0" fill="rgb(219,173,22)" rx="2" ry="2" />
<text  x="65.45" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (196 samples, 0.41%)</title><rect x="353.7" y="165" width="4.8" height="15.0" fill="rgb(216,150,22)" rx="2" ry="2" />
<text  x="356.70" y="175.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (7 samples, 0.01%)</title><rect x="848.2" y="453" width="0.1" height="15.0" fill="rgb(210,213,43)" rx="2" ry="2" />
<text  x="851.17" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (28 samples, 0.06%)</title><rect x="501.8" y="197" width="0.7" height="15.0" fill="rgb(237,6,0)" rx="2" ry="2" />
<text  x="504.82" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (7 samples, 0.01%)</title><rect x="396.0" y="213" width="0.2" height="15.0" fill="rgb(211,36,20)" rx="2" ry="2" />
<text  x="399.00" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (27 samples, 0.06%)</title><rect x="1110.8" y="389" width="0.6" height="15.0" fill="rgb(222,17,34)" rx="2" ry="2" />
<text  x="1113.78" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (23 samples, 0.05%)</title><rect x="435.3" y="277" width="0.6" height="15.0" fill="rgb(210,179,16)" rx="2" ry="2" />
<text  x="438.31" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (6 samples, 0.01%)</title><rect x="688.8" y="469" width="0.1" height="15.0" fill="rgb(214,0,3)" rx="2" ry="2" />
<text  x="691.80" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (487 samples, 1.02%)</title><rect x="31.1" y="501" width="12.0" height="15.0" fill="rgb(246,215,6)" rx="2" ry="2" />
<text  x="34.10" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (48 samples, 0.10%)</title><rect x="818.8" y="309" width="1.2" height="15.0" fill="rgb(241,106,32)" rx="2" ry="2" />
<text  x="821.80" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (519 samples, 1.08%)</title><rect x="468.5" y="293" width="12.8" height="15.0" fill="rgb(242,107,50)" rx="2" ry="2" />
<text  x="471.50" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (15 samples, 0.03%)</title><rect x="21.1" y="421" width="0.3" height="15.0" fill="rgb(225,199,41)" rx="2" ry="2" />
<text  x="24.06" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%)</title><rect x="1002.5" y="229" width="0.6" height="15.0" fill="rgb(249,72,29)" rx="2" ry="2" />
<text  x="1005.50" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (459 samples, 0.96%)</title><rect x="680.4" y="501" width="11.3" height="15.0" fill="rgb(229,211,3)" rx="2" ry="2" />
<text  x="683.43" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (17 samples, 0.04%)</title><rect x="134.7" y="245" width="0.4" height="15.0" fill="rgb(213,209,52)" rx="2" ry="2" />
<text  x="137.65" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.02%)</title><rect x="221.4" y="149" width="0.3" height="15.0" fill="rgb(205,12,1)" rx="2" ry="2" />
<text  x="224.41" y="159.5" ></text>
</g>
<g >
<title>[[vdso]] (248 samples, 0.52%)</title><rect x="1180.0" y="613" width="6.1" height="15.0" fill="rgb(252,60,52)" rx="2" ry="2" />
<text  x="1182.95" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%)</title><rect x="513.6" y="309" width="0.3" height="15.0" fill="rgb(252,38,17)" rx="2" ry="2" />
<text  x="516.59" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (41 samples, 0.09%)</title><rect x="20.6" y="469" width="1.0" height="15.0" fill="rgb(218,54,18)" rx="2" ry="2" />
<text  x="23.64" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="909.0" y="341" width="0.1" height="15.0" fill="rgb(209,220,29)" rx="2" ry="2" />
<text  x="911.97" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%)</title><rect x="836.5" y="357" width="0.1" height="15.0" fill="rgb(232,53,30)" rx="2" ry="2" />
<text  x="839.45" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (97 samples, 0.20%)</title><rect x="342.6" y="165" width="2.4" height="15.0" fill="rgb(233,91,42)" rx="2" ry="2" />
<text  x="345.59" y="175.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (5 samples, 0.01%)</title><rect x="587.9" y="421" width="0.1" height="15.0" fill="rgb(213,93,10)" rx="2" ry="2" />
<text  x="590.91" y="431.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (7 samples, 0.01%)</title><rect x="619.3" y="437" width="0.1" height="15.0" fill="rgb(221,127,41)" rx="2" ry="2" />
<text  x="622.26" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (10 samples, 0.02%)</title><rect x="319.2" y="213" width="0.2" height="15.0" fill="rgb(213,52,2)" rx="2" ry="2" />
<text  x="322.17" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%)</title><rect x="890.4" y="277" width="0.6" height="15.0" fill="rgb(236,8,3)" rx="2" ry="2" />
<text  x="893.36" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.02%)</title><rect x="1175.9" y="501" width="0.3" height="15.0" fill="rgb(253,20,24)" rx="2" ry="2" />
<text  x="1178.91" y="511.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (16 samples, 0.03%)</title><rect x="424.4" y="357" width="0.4" height="15.0" fill="rgb(219,39,20)" rx="2" ry="2" />
<text  x="427.40" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%)</title><rect x="490.2" y="277" width="0.9" height="15.0" fill="rgb(223,91,20)" rx="2" ry="2" />
<text  x="493.20" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (17 samples, 0.04%)</title><rect x="1115.6" y="357" width="0.4" height="15.0" fill="rgb(240,180,6)" rx="2" ry="2" />
<text  x="1118.56" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (109 samples, 0.23%)</title><rect x="834.2" y="437" width="2.6" height="15.0" fill="rgb(254,135,39)" rx="2" ry="2" />
<text  x="837.16" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%)</title><rect x="146.0" y="261" width="0.2" height="15.0" fill="rgb(245,38,44)" rx="2" ry="2" />
<text  x="149.03" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (6 samples, 0.01%)</title><rect x="914.6" y="373" width="0.2" height="15.0" fill="rgb(250,53,49)" rx="2" ry="2" />
<text  x="917.64" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%)</title><rect x="677.7" y="485" width="0.2" height="15.0" fill="rgb(249,102,13)" rx="2" ry="2" />
<text  x="680.69" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="110.7" y="421" width="0.1" height="15.0" fill="rgb(245,222,27)" rx="2" ry="2" />
<text  x="113.69" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,384 samples, 4.98%)</title><rect x="998.3" y="341" width="58.7" height="15.0" fill="rgb(248,218,29)" rx="2" ry="2" />
<text  x="1001.34" y="351.5" >servic..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (8 samples, 0.02%)</title><rect x="994.7" y="293" width="0.2" height="15.0" fill="rgb(239,219,17)" rx="2" ry="2" />
<text  x="997.72" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (6 samples, 0.01%)</title><rect x="716.1" y="453" width="0.2" height="15.0" fill="rgb(221,39,10)" rx="2" ry="2" />
<text  x="719.11" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.03%)</title><rect x="659.1" y="469" width="0.3" height="15.0" fill="rgb(212,110,25)" rx="2" ry="2" />
<text  x="662.13" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%)</title><rect x="401.5" y="181" width="0.2" height="15.0" fill="rgb(214,171,42)" rx="2" ry="2" />
<text  x="404.54" y="191.5" ></text>
</g>
<g >
<title>make_combined_reader (848 samples, 1.77%)</title><rect x="430.9" y="341" width="20.9" height="15.0" fill="rgb(219,182,16)" rx="2" ry="2" />
<text  x="433.95" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (24 samples, 0.05%)</title><rect x="650.1" y="485" width="0.6" height="15.0" fill="rgb(235,217,44)" rx="2" ry="2" />
<text  x="653.11" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (377 samples, 0.79%)</title><rect x="1027.4" y="213" width="9.3" height="15.0" fill="rgb(223,3,41)" rx="2" ry="2" />
<text  x="1030.45" y="223.5" ></text>
</g>
<g >
<title>query::result::builder::build (61 samples, 0.13%)</title><rect x="586.5" y="437" width="1.5" height="15.0" fill="rgb(252,38,22)" rx="2" ry="2" />
<text  x="589.53" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (23 samples, 0.05%)</title><rect x="1067.6" y="261" width="0.6" height="15.0" fill="rgb(247,74,50)" rx="2" ry="2" />
<text  x="1070.59" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (42 samples, 0.09%)</title><rect x="1151.2" y="485" width="1.0" height="15.0" fill="rgb(242,46,47)" rx="2" ry="2" />
<text  x="1154.21" y="495.5" ></text>
</g>
<g >
<title>operator new (95 samples, 0.20%)</title><rect x="1049.4" y="245" width="2.4" height="15.0" fill="rgb(206,13,48)" rx="2" ry="2" />
<text  x="1052.44" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (8 samples, 0.02%)</title><rect x="261.5" y="277" width="0.2" height="15.0" fill="rgb(215,229,26)" rx="2" ry="2" />
<text  x="264.50" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%)</title><rect x="855.4" y="469" width="0.1" height="15.0" fill="rgb(249,114,11)" rx="2" ry="2" />
<text  x="858.39" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (5 samples, 0.01%)</title><rect x="1140.9" y="437" width="0.1" height="15.0" fill="rgb(247,111,38)" rx="2" ry="2" />
<text  x="1143.87" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%)</title><rect x="19.2" y="245" width="0.1" height="15.0" fill="rgb(219,94,10)" rx="2" ry="2" />
<text  x="22.21" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.05%)</title><rect x="1142.5" y="277" width="0.6" height="15.0" fill="rgb(233,141,16)" rx="2" ry="2" />
<text  x="1145.52" y="287.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (11 samples, 0.02%)</title><rect x="924.0" y="357" width="0.3" height="15.0" fill="rgb(240,115,30)" rx="2" ry="2" />
<text  x="927.02" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%)</title><rect x="937.4" y="373" width="0.4" height="15.0" fill="rgb(232,52,40)" rx="2" ry="2" />
<text  x="940.39" y="383.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%)</title><rect x="763.3" y="373" width="0.6" height="15.0" fill="rgb(240,225,16)" rx="2" ry="2" />
<text  x="766.34" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%)</title><rect x="356.7" y="149" width="0.4" height="15.0" fill="rgb(226,96,0)" rx="2" ry="2" />
<text  x="359.73" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (14 samples, 0.03%)</title><rect x="12.4" y="581" width="0.3" height="15.0" fill="rgb(210,57,9)" rx="2" ry="2" />
<text  x="15.36" y="591.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (9 samples, 0.02%)</title><rect x="305.9" y="213" width="0.2" height="15.0" fill="rgb(239,95,39)" rx="2" ry="2" />
<text  x="308.90" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (481 samples, 1.00%)</title><rect x="131.8" y="277" width="11.8" height="15.0" fill="rgb(210,109,51)" rx="2" ry="2" />
<text  x="134.80" y="287.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%)</title><rect x="946.5" y="373" width="0.7" height="15.0" fill="rgb(235,198,37)" rx="2" ry="2" />
<text  x="949.53" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (448 samples, 0.93%)</title><rect x="733.5" y="389" width="11.1" height="15.0" fill="rgb(241,141,38)" rx="2" ry="2" />
<text  x="736.54" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%)</title><rect x="54.5" y="469" width="0.5" height="15.0" fill="rgb(225,208,15)" rx="2" ry="2" />
<text  x="57.52" y="479.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,438 samples, 3.00%)</title><rect x="171.2" y="165" width="35.4" height="15.0" fill="rgb(226,73,30)" rx="2" ry="2" />
<text  x="174.22" y="175.5" >clu..</text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (13 samples, 0.03%)</title><rect x="265.0" y="309" width="0.4" height="15.0" fill="rgb(254,12,27)" rx="2" ry="2" />
<text  x="268.05" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (51 samples, 0.11%)</title><rect x="721.8" y="341" width="1.2" height="15.0" fill="rgb(212,21,0)" rx="2" ry="2" />
<text  x="724.77" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (90 samples, 0.19%)</title><rect x="542.1" y="357" width="2.2" height="15.0" fill="rgb(250,140,10)" rx="2" ry="2" />
<text  x="545.08" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (47 samples, 0.10%)</title><rect x="827.2" y="309" width="1.2" height="15.0" fill="rgb(225,19,21)" rx="2" ry="2" />
<text  x="830.22" y="319.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%)</title><rect x="513.9" y="325" width="0.7" height="15.0" fill="rgb(223,10,11)" rx="2" ry="2" />
<text  x="516.86" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (48 samples, 0.10%)</title><rect x="750.1" y="389" width="1.2" height="15.0" fill="rgb(215,139,41)" rx="2" ry="2" />
<text  x="753.14" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (27 samples, 0.06%)</title><rect x="390.2" y="213" width="0.7" height="15.0" fill="rgb(239,185,39)" rx="2" ry="2" />
<text  x="393.22" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.02%)</title><rect x="487.7" y="309" width="0.2" height="15.0" fill="rgb(221,157,33)" rx="2" ry="2" />
<text  x="490.68" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%)</title><rect x="677.2" y="437" width="0.1" height="15.0" fill="rgb(241,49,0)" rx="2" ry="2" />
<text  x="680.20" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (5 samples, 0.01%)</title><rect x="696.6" y="437" width="0.2" height="15.0" fill="rgb(232,45,27)" rx="2" ry="2" />
<text  x="699.63" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,945 samples, 6.15%)</title><rect x="161.3" y="245" width="72.6" height="15.0" fill="rgb(218,120,13)" rx="2" ry="2" />
<text  x="164.35" y="255.5" >partitio..</text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (106 samples, 0.22%)</title><rect x="1134.6" y="421" width="2.6" height="15.0" fill="rgb(254,114,29)" rx="2" ry="2" />
<text  x="1137.59" y="431.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.01%)</title><rect x="405.2" y="261" width="0.1" height="15.0" fill="rgb(250,129,44)" rx="2" ry="2" />
<text  x="408.16" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="831.3" y="405" width="0.1" height="15.0" fill="rgb(221,121,47)" rx="2" ry="2" />
<text  x="834.28" y="415.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%)</title><rect x="750.1" y="405" width="1.2" height="15.0" fill="rgb(248,91,27)" rx="2" ry="2" />
<text  x="753.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (11 samples, 0.02%)</title><rect x="1170.3" y="453" width="0.3" height="15.0" fill="rgb(228,197,35)" rx="2" ry="2" />
<text  x="1173.35" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (261 samples, 0.54%)</title><rect x="434.7" y="293" width="6.4" height="15.0" fill="rgb(236,67,14)" rx="2" ry="2" />
<text  x="437.71" y="303.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (35 samples, 0.07%)</title><rect x="719.2" y="405" width="0.8" height="15.0" fill="rgb(244,82,10)" rx="2" ry="2" />
<text  x="722.19" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="617.0" y="405" width="0.1" height="15.0" fill="rgb(215,115,23)" rx="2" ry="2" />
<text  x="619.97" y="415.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%)</title><rect x="910.9" y="357" width="1.0" height="15.0" fill="rgb(210,155,7)" rx="2" ry="2" />
<text  x="913.94" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%)</title><rect x="1168.3" y="485" width="0.2" height="15.0" fill="rgb(218,174,33)" rx="2" ry="2" />
<text  x="1171.28" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (13 samples, 0.03%)</title><rect x="545.5" y="421" width="0.3" height="15.0" fill="rgb(235,198,31)" rx="2" ry="2" />
<text  x="548.50" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (398 samples, 0.83%)</title><rect x="65.4" y="421" width="9.8" height="15.0" fill="rgb(240,7,27)" rx="2" ry="2" />
<text  x="68.43" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%)</title><rect x="415.7" y="325" width="0.6" height="15.0" fill="rgb(207,71,26)" rx="2" ry="2" />
<text  x="418.65" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (46 samples, 0.10%)</title><rect x="1159.0" y="405" width="1.2" height="15.0" fill="rgb(243,112,24)" rx="2" ry="2" />
<text  x="1162.05" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.05%)</title><rect x="1142.5" y="293" width="0.6" height="15.0" fill="rgb(209,94,28)" rx="2" ry="2" />
<text  x="1145.52" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (10 samples, 0.02%)</title><rect x="367.5" y="165" width="0.2" height="15.0" fill="rgb(211,189,53)" rx="2" ry="2" />
<text  x="370.49" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%)</title><rect x="1035.1" y="149" width="0.2" height="15.0" fill="rgb(243,169,21)" rx="2" ry="2" />
<text  x="1038.13" y="159.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (82 samples, 0.17%)</title><rect x="381.1" y="149" width="2.0" height="15.0" fill="rgb(245,9,16)" rx="2" ry="2" />
<text  x="384.13" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (8 samples, 0.02%)</title><rect x="882.6" y="421" width="0.2" height="15.0" fill="rgb(228,25,8)" rx="2" ry="2" />
<text  x="885.60" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (8 samples, 0.02%)</title><rect x="679.4" y="293" width="0.2" height="15.0" fill="rgb(232,3,30)" rx="2" ry="2" />
<text  x="682.44" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (32 samples, 0.07%)</title><rect x="863.3" y="469" width="0.8" height="15.0" fill="rgb(232,53,38)" rx="2" ry="2" />
<text  x="866.34" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (274 samples, 0.57%)</title><rect x="15.4" y="565" width="6.7" height="15.0" fill="rgb(252,150,50)" rx="2" ry="2" />
<text  x="18.39" y="575.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%)</title><rect x="634.5" y="485" width="0.5" height="15.0" fill="rgb(250,200,10)" rx="2" ry="2" />
<text  x="637.45" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (41 samples, 0.09%)</title><rect x="1142.1" y="485" width="1.0" height="15.0" fill="rgb(234,2,43)" rx="2" ry="2" />
<text  x="1145.13" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%)</title><rect x="941.9" y="405" width="0.3" height="15.0" fill="rgb(211,103,29)" rx="2" ry="2" />
<text  x="944.90" y="415.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,923 samples, 14.45%)</title><rect x="116.7" y="373" width="170.5" height="15.0" fill="rgb(236,94,7)" rx="2" ry="2" />
<text  x="119.68" y="383.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>operator new (50 samples, 0.10%)</title><rect x="1160.4" y="437" width="1.2" height="15.0" fill="rgb(217,153,54)" rx="2" ry="2" />
<text  x="1163.35" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="935.1" y="341" width="0.2" height="15.0" fill="rgb(243,173,45)" rx="2" ry="2" />
<text  x="938.10" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%)</title><rect x="767.4" y="357" width="0.2" height="15.0" fill="rgb(235,52,35)" rx="2" ry="2" />
<text  x="770.38" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (21 samples, 0.04%)</title><rect x="1033.6" y="133" width="0.5" height="15.0" fill="rgb(244,37,22)" rx="2" ry="2" />
<text  x="1036.63" y="143.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (73 samples, 0.15%)</title><rect x="268.7" y="325" width="1.8" height="15.0" fill="rgb(234,227,53)" rx="2" ry="2" />
<text  x="271.67" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (41 samples, 0.09%)</title><rect x="826.1" y="309" width="1.0" height="15.0" fill="rgb(247,221,16)" rx="2" ry="2" />
<text  x="829.06" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (44 samples, 0.09%)</title><rect x="800.9" y="133" width="1.1" height="15.0" fill="rgb(215,192,35)" rx="2" ry="2" />
<text  x="803.89" y="143.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (8 samples, 0.02%)</title><rect x="277.4" y="293" width="0.2" height="15.0" fill="rgb(245,184,19)" rx="2" ry="2" />
<text  x="280.43" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (16 samples, 0.03%)</title><rect x="1048.0" y="261" width="0.4" height="15.0" fill="rgb(235,148,53)" rx="2" ry="2" />
<text  x="1051.01" y="271.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (5 samples, 0.01%)</title><rect x="47.0" y="485" width="0.1" height="15.0" fill="rgb(251,57,52)" rx="2" ry="2" />
<text  x="49.99" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (35 samples, 0.07%)</title><rect x="1054.5" y="293" width="0.9" height="15.0" fill="rgb(227,166,34)" rx="2" ry="2" />
<text  x="1057.51" y="303.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (72 samples, 0.15%)</title><rect x="1154.2" y="453" width="1.8" height="15.0" fill="rgb(249,73,45)" rx="2" ry="2" />
<text  x="1157.24" y="463.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (47 samples, 0.10%)</title><rect x="931.5" y="357" width="1.2" height="15.0" fill="rgb(242,56,37)" rx="2" ry="2" />
<text  x="934.51" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%)</title><rect x="205.6" y="133" width="0.4" height="15.0" fill="rgb(250,28,44)" rx="2" ry="2" />
<text  x="208.65" y="143.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (5 samples, 0.01%)</title><rect x="831.5" y="421" width="0.1" height="15.0" fill="rgb(227,127,4)" rx="2" ry="2" />
<text  x="834.48" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (6 samples, 0.01%)</title><rect x="599.1" y="437" width="0.1" height="15.0" fill="rgb(245,90,15)" rx="2" ry="2" />
<text  x="602.09" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,319 samples, 4.84%)</title><rect x="167.7" y="197" width="57.1" height="15.0" fill="rgb(224,53,33)" rx="2" ry="2" />
<text  x="170.65" y="207.5" >partit..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (295 samples, 0.62%)</title><rect x="255.4" y="309" width="7.3" height="15.0" fill="rgb(234,137,3)" rx="2" ry="2" />
<text  x="258.39" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (35 samples, 0.07%)</title><rect x="39.4" y="421" width="0.8" height="15.0" fill="rgb(212,222,33)" rx="2" ry="2" />
<text  x="42.38" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (34 samples, 0.07%)</title><rect x="562.3" y="261" width="0.8" height="15.0" fill="rgb(232,180,22)" rx="2" ry="2" />
<text  x="565.30" y="271.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (13 samples, 0.03%)</title><rect x="503.3" y="213" width="0.4" height="15.0" fill="rgb(233,41,17)" rx="2" ry="2" />
<text  x="506.35" y="223.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (7 samples, 0.01%)</title><rect x="561.9" y="277" width="0.1" height="15.0" fill="rgb(221,137,24)" rx="2" ry="2" />
<text  x="564.86" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.02%)</title><rect x="333.9" y="181" width="0.2" height="15.0" fill="rgb(232,75,11)" rx="2" ry="2" />
<text  x="336.90" y="191.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (73 samples, 0.15%)</title><rect x="146.4" y="261" width="1.8" height="15.0" fill="rgb(242,151,24)" rx="2" ry="2" />
<text  x="149.38" y="271.5" ></text>
</g>
<g >
<title>make_combined_reader (738 samples, 1.54%)</title><rect x="432.4" y="325" width="18.2" height="15.0" fill="rgb(238,140,36)" rx="2" ry="2" />
<text  x="435.42" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,014 samples, 14.64%)</title><rect x="114.5" y="389" width="172.7" height="15.0" fill="rgb(254,69,41)" rx="2" ry="2" />
<text  x="117.49" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (26 samples, 0.05%)</title><rect x="822.0" y="357" width="0.7" height="15.0" fill="rgb(223,188,10)" rx="2" ry="2" />
<text  x="825.02" y="367.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.11%)</title><rect x="533.5" y="405" width="1.4" height="15.0" fill="rgb(238,39,17)" rx="2" ry="2" />
<text  x="536.54" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%)</title><rect x="1038.0" y="213" width="0.2" height="15.0" fill="rgb(239,44,7)" rx="2" ry="2" />
<text  x="1041.04" y="223.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (62 samples, 0.13%)</title><rect x="523.0" y="293" width="1.5" height="15.0" fill="rgb(231,118,10)" rx="2" ry="2" />
<text  x="525.97" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (6 samples, 0.01%)</title><rect x="942.9" y="389" width="0.2" height="15.0" fill="rgb(227,187,48)" rx="2" ry="2" />
<text  x="945.91" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (5 samples, 0.01%)</title><rect x="450.5" y="309" width="0.1" height="15.0" fill="rgb(222,187,26)" rx="2" ry="2" />
<text  x="453.47" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.03%)</title><rect x="606.6" y="437" width="0.3" height="15.0" fill="rgb(239,69,33)" rx="2" ry="2" />
<text  x="609.60" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (33 samples, 0.07%)</title><rect x="99.0" y="421" width="0.8" height="15.0" fill="rgb(250,63,15)" rx="2" ry="2" />
<text  x="102.00" y="431.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (80 samples, 0.17%)</title><rect x="748.1" y="389" width="2.0" height="15.0" fill="rgb(245,216,5)" rx="2" ry="2" />
<text  x="751.12" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (6 samples, 0.01%)</title><rect x="601.0" y="437" width="0.1" height="15.0" fill="rgb(237,56,35)" rx="2" ry="2" />
<text  x="603.99" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (27 samples, 0.06%)</title><rect x="567.2" y="357" width="0.6" height="15.0" fill="rgb(254,182,21)" rx="2" ry="2" />
<text  x="570.17" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (17 samples, 0.04%)</title><rect x="818.9" y="277" width="0.4" height="15.0" fill="rgb(219,63,18)" rx="2" ry="2" />
<text  x="821.87" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%)</title><rect x="1080.6" y="325" width="0.2" height="15.0" fill="rgb(254,59,51)" rx="2" ry="2" />
<text  x="1083.59" y="335.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (12 samples, 0.03%)</title><rect x="14.8" y="613" width="0.3" height="15.0" fill="rgb(238,54,38)" rx="2" ry="2" />
<text  x="17.80" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (6 samples, 0.01%)</title><rect x="860.2" y="485" width="0.2" height="15.0" fill="rgb(217,84,1)" rx="2" ry="2" />
<text  x="863.24" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (454 samples, 0.95%)</title><rect x="456.8" y="309" width="11.1" height="15.0" fill="rgb(213,4,33)" rx="2" ry="2" />
<text  x="459.75" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%)</title><rect x="826.8" y="277" width="0.2" height="15.0" fill="rgb(252,133,4)" rx="2" ry="2" />
<text  x="829.82" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%)</title><rect x="643.5" y="453" width="0.2" height="15.0" fill="rgb(238,218,42)" rx="2" ry="2" />
<text  x="646.54" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (897 samples, 1.87%)</title><rect x="915.7" y="405" width="22.1" height="15.0" fill="rgb(208,87,38)" rx="2" ry="2" />
<text  x="918.72" y="415.5" >c..</text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%)</title><rect x="1127.3" y="405" width="0.2" height="15.0" fill="rgb(215,107,29)" rx="2" ry="2" />
<text  x="1130.33" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (114 samples, 0.24%)</title><rect x="839.6" y="421" width="2.8" height="15.0" fill="rgb(233,195,3)" rx="2" ry="2" />
<text  x="842.56" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (82 samples, 0.17%)</title><rect x="294.9" y="293" width="2.0" height="15.0" fill="rgb(227,96,33)" rx="2" ry="2" />
<text  x="297.87" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (22 samples, 0.05%)</title><rect x="922.2" y="373" width="0.5" height="15.0" fill="rgb(243,98,15)" rx="2" ry="2" />
<text  x="925.20" y="383.5" ></text>
</g>
<g >
<title>create_partitions (274 samples, 0.57%)</title><rect x="15.4" y="533" width="6.7" height="15.0" fill="rgb(232,124,18)" rx="2" ry="2" />
<text  x="18.39" y="543.5" ></text>
</g>
<g >
<title>partition_entry::read (69 samples, 0.14%)</title><rect x="511.1" y="309" width="1.7" height="15.0" fill="rgb(224,16,51)" rx="2" ry="2" />
<text  x="514.10" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (41 samples, 0.09%)</title><rect x="150.3" y="245" width="1.0" height="15.0" fill="rgb(230,205,3)" rx="2" ry="2" />
<text  x="153.34" y="255.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (16 samples, 0.03%)</title><rect x="432.0" y="325" width="0.4" height="15.0" fill="rgb(216,113,26)" rx="2" ry="2" />
<text  x="435.03" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (150 samples, 0.31%)</title><rect x="345.0" y="165" width="3.7" height="15.0" fill="rgb(246,38,41)" rx="2" ry="2" />
<text  x="347.98" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%)</title><rect x="144.2" y="277" width="0.2" height="15.0" fill="rgb(252,29,5)" rx="2" ry="2" />
<text  x="147.18" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (8 samples, 0.02%)</title><rect x="1044.2" y="261" width="0.2" height="15.0" fill="rgb(244,25,29)" rx="2" ry="2" />
<text  x="1047.24" y="271.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (7 samples, 0.01%)</title><rect x="1141.8" y="245" width="0.2" height="15.0" fill="rgb(214,27,40)" rx="2" ry="2" />
<text  x="1144.83" y="255.5" ></text>
</g>
<g >
<title>row::compact_and_expire (864 samples, 1.80%)</title><rect x="368.1" y="213" width="21.2" height="15.0" fill="rgb(207,158,7)" rx="2" ry="2" />
<text  x="371.05" y="223.5" >r..</text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,707 samples, 11.91%)</title><rect x="714.8" y="469" width="140.5" height="15.0" fill="rgb(245,57,44)" rx="2" ry="2" />
<text  x="717.80" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (7 samples, 0.01%)</title><rect x="395.8" y="197" width="0.2" height="15.0" fill="rgb(218,15,24)" rx="2" ry="2" />
<text  x="398.83" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (184 samples, 0.38%)</title><rect x="1171.3" y="469" width="4.5" height="15.0" fill="rgb(249,224,41)" rx="2" ry="2" />
<text  x="1174.28" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%)</title><rect x="937.6" y="357" width="0.2" height="15.0" fill="rgb(210,50,0)" rx="2" ry="2" />
<text  x="940.61" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (346 samples, 0.72%)</title><rect x="796.5" y="197" width="8.5" height="15.0" fill="rgb(245,169,9)" rx="2" ry="2" />
<text  x="799.46" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (8 samples, 0.02%)</title><rect x="613.2" y="437" width="0.2" height="15.0" fill="rgb(232,116,1)" rx="2" ry="2" />
<text  x="616.25" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (38 samples, 0.08%)</title><rect x="223.5" y="181" width="0.9" height="15.0" fill="rgb(212,13,4)" rx="2" ry="2" />
<text  x="226.45" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (6 samples, 0.01%)</title><rect x="218.0" y="181" width="0.1" height="15.0" fill="rgb(240,66,2)" rx="2" ry="2" />
<text  x="220.96" y="191.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%)</title><rect x="31.5" y="485" width="0.6" height="15.0" fill="rgb(243,53,29)" rx="2" ry="2" />
<text  x="34.47" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (7 samples, 0.01%)</title><rect x="863.6" y="389" width="0.2" height="15.0" fill="rgb(211,5,8)" rx="2" ry="2" />
<text  x="866.61" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (27 samples, 0.06%)</title><rect x="645.2" y="469" width="0.7" height="15.0" fill="rgb(213,78,9)" rx="2" ry="2" />
<text  x="648.21" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (20 samples, 0.04%)</title><rect x="78.7" y="453" width="0.4" height="15.0" fill="rgb(232,181,48)" rx="2" ry="2" />
<text  x="81.66" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (8 samples, 0.02%)</title><rect x="524.5" y="309" width="0.2" height="15.0" fill="rgb(218,184,52)" rx="2" ry="2" />
<text  x="527.50" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (7 samples, 0.01%)</title><rect x="609.3" y="405" width="0.1" height="15.0" fill="rgb(205,160,21)" rx="2" ry="2" />
<text  x="612.26" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (44 samples, 0.09%)</title><rect x="455.2" y="325" width="1.1" height="15.0" fill="rgb(227,214,6)" rx="2" ry="2" />
<text  x="458.20" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (56 samples, 0.12%)</title><rect x="889.7" y="293" width="1.3" height="15.0" fill="rgb(210,102,10)" rx="2" ry="2" />
<text  x="892.67" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.11%)</title><rect x="533.6" y="389" width="1.3" height="15.0" fill="rgb(219,136,27)" rx="2" ry="2" />
<text  x="536.61" y="399.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%)</title><rect x="820.4" y="373" width="1.0" height="15.0" fill="rgb(220,21,13)" rx="2" ry="2" />
<text  x="823.45" y="383.5" ></text>
</g>
<g >
<title>db::validate_for_read (8 samples, 0.02%)</title><rect x="1125.1" y="421" width="0.2" height="15.0" fill="rgb(247,213,12)" rx="2" ry="2" />
<text  x="1128.14" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%)</title><rect x="1132.6" y="373" width="0.3" height="15.0" fill="rgb(214,206,27)" rx="2" ry="2" />
<text  x="1135.65" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (130 samples, 0.27%)</title><rect x="279.7" y="293" width="3.2" height="15.0" fill="rgb(236,104,16)" rx="2" ry="2" />
<text  x="282.70" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (63 samples, 0.13%)</title><rect x="595.5" y="421" width="1.6" height="15.0" fill="rgb(208,196,20)" rx="2" ry="2" />
<text  x="598.54" y="431.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (22 samples, 0.05%)</title><rect x="332.7" y="181" width="0.6" height="15.0" fill="rgb(221,174,49)" rx="2" ry="2" />
<text  x="335.72" y="191.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (5 samples, 0.01%)</title><rect x="22.5" y="517" width="0.1" height="15.0" fill="rgb(251,153,36)" rx="2" ry="2" />
<text  x="25.51" y="527.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.01%)</title><rect x="519.1" y="325" width="0.2" height="15.0" fill="rgb(228,161,26)" rx="2" ry="2" />
<text  x="522.13" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,312 samples, 11.09%)</title><rect x="288.2" y="405" width="130.9" height="15.0" fill="rgb(238,223,25)" rx="2" ry="2" />
<text  x="291.24" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (7 samples, 0.01%)</title><rect x="774.0" y="341" width="0.2" height="15.0" fill="rgb(218,95,14)" rx="2" ry="2" />
<text  x="776.98" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (572 samples, 1.19%)</title><rect x="493.1" y="277" width="14.1" height="15.0" fill="rgb(224,24,15)" rx="2" ry="2" />
<text  x="496.08" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (19 samples, 0.04%)</title><rect x="191.9" y="53" width="0.5" height="15.0" fill="rgb(221,107,31)" rx="2" ry="2" />
<text  x="194.91" y="63.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (15 samples, 0.03%)</title><rect x="642.7" y="405" width="0.4" height="15.0" fill="rgb(254,40,12)" rx="2" ry="2" />
<text  x="645.70" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%)</title><rect x="546.7" y="421" width="0.1" height="15.0" fill="rgb(247,190,36)" rx="2" ry="2" />
<text  x="549.71" y="431.5" ></text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%)</title><rect x="147.9" y="229" width="0.3" height="15.0" fill="rgb(218,25,18)" rx="2" ry="2" />
<text  x="150.93" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%)</title><rect x="230.9" y="197" width="0.6" height="15.0" fill="rgb(207,193,38)" rx="2" ry="2" />
<text  x="233.94" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%)</title><rect x="1116.1" y="357" width="0.2" height="15.0" fill="rgb(247,76,17)" rx="2" ry="2" />
<text  x="1119.15" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (16 samples, 0.03%)</title><rect x="576.3" y="357" width="0.4" height="15.0" fill="rgb(229,81,14)" rx="2" ry="2" />
<text  x="579.26" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%)</title><rect x="420.5" y="405" width="0.1" height="15.0" fill="rgb(249,154,0)" rx="2" ry="2" />
<text  x="423.46" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%)</title><rect x="1048.1" y="245" width="0.3" height="15.0" fill="rgb(232,194,26)" rx="2" ry="2" />
<text  x="1051.13" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (82 samples, 0.17%)</title><rect x="712.0" y="453" width="2.0" height="15.0" fill="rgb(251,52,35)" rx="2" ry="2" />
<text  x="715.00" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (16 samples, 0.03%)</title><rect x="438.3" y="261" width="0.4" height="15.0" fill="rgb(209,52,35)" rx="2" ry="2" />
<text  x="441.26" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (6 samples, 0.01%)</title><rect x="529.7" y="277" width="0.2" height="15.0" fill="rgb(229,62,13)" rx="2" ry="2" />
<text  x="532.72" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="899.1" y="261" width="0.2" height="15.0" fill="rgb(250,24,12)" rx="2" ry="2" />
<text  x="902.15" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (235 samples, 0.49%)</title><rect x="948.6" y="421" width="5.8" height="15.0" fill="rgb(239,70,22)" rx="2" ry="2" />
<text  x="951.57" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.02%)</title><rect x="473.0" y="229" width="0.2" height="15.0" fill="rgb(248,81,9)" rx="2" ry="2" />
<text  x="475.96" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (51 samples, 0.11%)</title><rect x="402.5" y="213" width="1.3" height="15.0" fill="rgb(240,138,37)" rx="2" ry="2" />
<text  x="405.53" y="223.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (69 samples, 0.14%)</title><rect x="69.9" y="389" width="1.7" height="15.0" fill="rgb(241,179,3)" rx="2" ry="2" />
<text  x="72.89" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (100 samples, 0.21%)</title><rect x="991.6" y="309" width="2.5" height="15.0" fill="rgb(226,208,13)" rx="2" ry="2" />
<text  x="994.62" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%)</title><rect x="821.7" y="357" width="0.2" height="15.0" fill="rgb(206,50,4)" rx="2" ry="2" />
<text  x="824.70" y="367.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (21 samples, 0.04%)</title><rect x="1102.2" y="341" width="0.5" height="15.0" fill="rgb(217,182,24)" rx="2" ry="2" />
<text  x="1105.19" y="351.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (35 samples, 0.07%)</title><rect x="550.6" y="325" width="0.9" height="15.0" fill="rgb(249,58,31)" rx="2" ry="2" />
<text  x="553.63" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (61 samples, 0.13%)</title><rect x="554.0" y="309" width="1.5" height="15.0" fill="rgb(233,9,35)" rx="2" ry="2" />
<text  x="557.00" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (10 samples, 0.02%)</title><rect x="1150.7" y="485" width="0.3" height="15.0" fill="rgb(225,135,1)" rx="2" ry="2" />
<text  x="1153.72" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (147 samples, 0.31%)</title><rect x="559.6" y="293" width="3.6" height="15.0" fill="rgb(245,180,18)" rx="2" ry="2" />
<text  x="562.57" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (30 samples, 0.06%)</title><rect x="527.7" y="245" width="0.8" height="15.0" fill="rgb(209,212,24)" rx="2" ry="2" />
<text  x="530.72" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (13 samples, 0.03%)</title><rect x="81.9" y="453" width="0.3" height="15.0" fill="rgb(211,0,32)" rx="2" ry="2" />
<text  x="84.88" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%)</title><rect x="1040.0" y="229" width="0.2" height="15.0" fill="rgb(217,14,33)" rx="2" ry="2" />
<text  x="1042.98" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%)</title><rect x="18.5" y="293" width="0.2" height="15.0" fill="rgb(221,167,2)" rx="2" ry="2" />
<text  x="21.52" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (58 samples, 0.12%)</title><rect x="300.9" y="261" width="1.4" height="15.0" fill="rgb(216,103,20)" rx="2" ry="2" />
<text  x="303.88" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (42 samples, 0.09%)</title><rect x="568.0" y="357" width="1.0" height="15.0" fill="rgb(214,193,40)" rx="2" ry="2" />
<text  x="570.99" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (29 samples, 0.06%)</title><rect x="366.8" y="165" width="0.7" height="15.0" fill="rgb(239,32,20)" rx="2" ry="2" />
<text  x="369.77" y="175.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (136 samples, 0.28%)</title><rect x="663.9" y="469" width="3.3" height="15.0" fill="rgb(211,71,23)" rx="2" ry="2" />
<text  x="666.88" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (22 samples, 0.05%)</title><rect x="223.8" y="165" width="0.6" height="15.0" fill="rgb(229,195,4)" rx="2" ry="2" />
<text  x="226.85" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%)</title><rect x="1036.1" y="197" width="0.2" height="15.0" fill="rgb(220,66,1)" rx="2" ry="2" />
<text  x="1039.09" y="207.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (49 samples, 0.10%)</title><rect x="457.7" y="293" width="1.2" height="15.0" fill="rgb(252,59,43)" rx="2" ry="2" />
<text  x="460.74" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (10 samples, 0.02%)</title><rect x="563.2" y="277" width="0.3" height="15.0" fill="rgb(231,145,45)" rx="2" ry="2" />
<text  x="566.23" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (9 samples, 0.02%)</title><rect x="239.6" y="197" width="0.2" height="15.0" fill="rgb(212,145,4)" rx="2" ry="2" />
<text  x="242.61" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="453" width="0.6" height="15.0" fill="rgb(233,50,32)" rx="2" ry="2" />
<text  x="1144.51" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (28 samples, 0.06%)</title><rect x="868.5" y="469" width="0.7" height="15.0" fill="rgb(224,182,44)" rx="2" ry="2" />
<text  x="871.54" y="479.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,956 samples, 97.99%)</title><rect x="22.4" y="581" width="1156.3" height="15.0" fill="rgb(250,122,18)" rx="2" ry="2" />
<text  x="25.44" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (29 samples, 0.06%)</title><rect x="958.5" y="405" width="0.7" height="15.0" fill="rgb(234,142,41)" rx="2" ry="2" />
<text  x="961.47" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (236 samples, 0.49%)</title><rect x="1091.4" y="277" width="5.8" height="15.0" fill="rgb(239,210,6)" rx="2" ry="2" />
<text  x="1094.40" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (26 samples, 0.05%)</title><rect x="1151.6" y="469" width="0.6" height="15.0" fill="rgb(211,82,0)" rx="2" ry="2" />
<text  x="1154.61" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%)</title><rect x="277.3" y="277" width="0.1" height="15.0" fill="rgb(241,61,25)" rx="2" ry="2" />
<text  x="280.31" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="716.6" y="453" width="0.1" height="15.0" fill="rgb(225,51,32)" rx="2" ry="2" />
<text  x="719.60" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.01%)</title><rect x="575.3" y="357" width="0.1" height="15.0" fill="rgb(245,94,46)" rx="2" ry="2" />
<text  x="578.30" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (132 samples, 0.28%)</title><rect x="825.2" y="341" width="3.2" height="15.0" fill="rgb(248,120,12)" rx="2" ry="2" />
<text  x="828.20" y="351.5" ></text>
</g>
<g >
<title>operator delete (52 samples, 0.11%)</title><rect x="551.6" y="325" width="1.3" height="15.0" fill="rgb(245,191,5)" rx="2" ry="2" />
<text  x="554.61" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (227 samples, 0.47%)</title><rect x="738.8" y="357" width="5.6" height="15.0" fill="rgb(225,144,53)" rx="2" ry="2" />
<text  x="741.84" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (134 samples, 0.28%)</title><rect x="987.0" y="325" width="3.3" height="15.0" fill="rgb(208,217,50)" rx="2" ry="2" />
<text  x="989.96" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (178 samples, 0.37%)</title><rect x="250.6" y="261" width="4.3" height="15.0" fill="rgb(225,190,12)" rx="2" ry="2" />
<text  x="253.57" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.02%)</title><rect x="414.2" y="357" width="0.2" height="15.0" fill="rgb(253,87,10)" rx="2" ry="2" />
<text  x="417.18" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (73 samples, 0.15%)</title><rect x="855.8" y="469" width="1.8" height="15.0" fill="rgb(222,74,11)" rx="2" ry="2" />
<text  x="858.76" y="479.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (322 samples, 0.67%)</title><rect x="473.2" y="229" width="7.9" height="15.0" fill="rgb(207,228,54)" rx="2" ry="2" />
<text  x="476.15" y="239.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (552 samples, 1.15%)</title><rect x="731.0" y="405" width="13.6" height="15.0" fill="rgb(226,29,26)" rx="2" ry="2" />
<text  x="733.98" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (82 samples, 0.17%)</title><rect x="723.7" y="309" width="2.0" height="15.0" fill="rgb(228,106,15)" rx="2" ry="2" />
<text  x="726.69" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (9 samples, 0.02%)</title><rect x="680.2" y="501" width="0.2" height="15.0" fill="rgb(243,91,48)" rx="2" ry="2" />
<text  x="683.16" y="511.5" ></text>
</g>
<g >
<title>query::querier&lt; (17,906 samples, 37.37%)</title><rect x="106.2" y="437" width="441.0" height="15.0" fill="rgb(244,15,21)" rx="2" ry="2" />
<text  x="109.21" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (6 samples, 0.01%)</title><rect x="143.5" y="261" width="0.1" height="15.0" fill="rgb(205,137,49)" rx="2" ry="2" />
<text  x="146.49" y="271.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (10 samples, 0.02%)</title><rect x="1083.3" y="309" width="0.2" height="15.0" fill="rgb(227,18,31)" rx="2" ry="2" />
<text  x="1086.27" y="319.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.02%)</title><rect x="10.1" y="613" width="0.2" height="15.0" fill="rgb(218,181,38)" rx="2" ry="2" />
<text  x="13.07" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16 samples, 0.03%)</title><rect x="724.3" y="293" width="0.4" height="15.0" fill="rgb(226,169,38)" rx="2" ry="2" />
<text  x="727.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.02%)</title><rect x="1022.6" y="197" width="0.3" height="15.0" fill="rgb(246,189,27)" rx="2" ry="2" />
<text  x="1025.60" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="295.5" y="261" width="0.1" height="15.0" fill="rgb(235,178,0)" rx="2" ry="2" />
<text  x="298.46" y="271.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%)</title><rect x="454.6" y="325" width="0.1" height="15.0" fill="rgb(249,196,16)" rx="2" ry="2" />
<text  x="457.59" y="335.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (18 samples, 0.04%)</title><rect x="895.2" y="261" width="0.4" height="15.0" fill="rgb(245,144,37)" rx="2" ry="2" />
<text  x="898.18" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (133 samples, 0.28%)</title><rect x="211.0" y="117" width="3.2" height="15.0" fill="rgb(237,47,1)" rx="2" ry="2" />
<text  x="213.97" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="631.6" y="469" width="0.1" height="15.0" fill="rgb(208,188,20)" rx="2" ry="2" />
<text  x="634.59" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (477 samples, 1.00%)</title><rect x="693.1" y="485" width="11.8" height="15.0" fill="rgb(248,130,0)" rx="2" ry="2" />
<text  x="696.11" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (9 samples, 0.02%)</title><rect x="761.0" y="405" width="0.2" height="15.0" fill="rgb(241,1,38)" rx="2" ry="2" />
<text  x="763.98" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (100 samples, 0.21%)</title><rect x="1040.2" y="229" width="2.4" height="15.0" fill="rgb(250,213,8)" rx="2" ry="2" />
<text  x="1043.15" y="239.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,598 samples, 9.60%)</title><rect x="297.2" y="293" width="113.3" height="15.0" fill="rgb(246,51,50)" rx="2" ry="2" />
<text  x="300.23" y="303.5" >seastar::repe..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="17.9" y="197" width="0.1" height="15.0" fill="rgb(237,66,50)" rx="2" ry="2" />
<text  x="20.86" y="207.5" ></text>
</g>
<g >
<title>free (24 samples, 0.05%)</title><rect x="37.9" y="421" width="0.6" height="15.0" fill="rgb(231,136,46)" rx="2" ry="2" />
<text  x="40.95" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%)</title><rect x="230.5" y="213" width="0.2" height="15.0" fill="rgb(250,102,9)" rx="2" ry="2" />
<text  x="233.47" y="223.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (79 samples, 0.16%)</title><rect x="474.0" y="213" width="1.9" height="15.0" fill="rgb(244,132,8)" rx="2" ry="2" />
<text  x="476.99" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (67 samples, 0.14%)</title><rect x="133.4" y="261" width="1.7" height="15.0" fill="rgb(241,90,43)" rx="2" ry="2" />
<text  x="136.42" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%)</title><rect x="1174.4" y="421" width="0.2" height="15.0" fill="rgb(210,171,6)" rx="2" ry="2" />
<text  x="1177.39" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="907.3" y="277" width="0.5" height="15.0" fill="rgb(218,16,17)" rx="2" ry="2" />
<text  x="910.33" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (35 samples, 0.07%)</title><rect x="679.3" y="501" width="0.8" height="15.0" fill="rgb(216,62,24)" rx="2" ry="2" />
<text  x="682.27" y="511.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (31 samples, 0.06%)</title><rect x="479.5" y="197" width="0.8" height="15.0" fill="rgb(222,162,10)" rx="2" ry="2" />
<text  x="482.53" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (77 samples, 0.16%)</title><rect x="912.5" y="341" width="1.9" height="15.0" fill="rgb(234,76,12)" rx="2" ry="2" />
<text  x="915.55" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="1003.7" y="309" width="0.2" height="15.0" fill="rgb(209,168,36)" rx="2" ry="2" />
<text  x="1006.73" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (10 samples, 0.02%)</title><rect x="599.7" y="437" width="0.3" height="15.0" fill="rgb(217,38,13)" rx="2" ry="2" />
<text  x="602.70" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (38 samples, 0.08%)</title><rect x="16.3" y="293" width="1.0" height="15.0" fill="rgb(253,35,17)" rx="2" ry="2" />
<text  x="19.33" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (14 samples, 0.03%)</title><rect x="533.0" y="341" width="0.3" height="15.0" fill="rgb(244,93,20)" rx="2" ry="2" />
<text  x="535.99" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (186 samples, 0.39%)</title><rect x="755.4" y="373" width="4.6" height="15.0" fill="rgb(250,88,25)" rx="2" ry="2" />
<text  x="758.44" y="383.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%)</title><rect x="618.2" y="389" width="0.5" height="15.0" fill="rgb(225,218,41)" rx="2" ry="2" />
<text  x="621.22" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%)</title><rect x="854.5" y="405" width="0.3" height="15.0" fill="rgb(245,67,51)" rx="2" ry="2" />
<text  x="857.53" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (155 samples, 0.32%)</title><rect x="756.1" y="357" width="3.8" height="15.0" fill="rgb(209,160,17)" rx="2" ry="2" />
<text  x="759.13" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (195 samples, 0.41%)</title><rect x="397.7" y="213" width="4.8" height="15.0" fill="rgb(230,82,14)" rx="2" ry="2" />
<text  x="400.73" y="223.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.03%)</title><rect x="450.0" y="293" width="0.3" height="15.0" fill="rgb(206,182,32)" rx="2" ry="2" />
<text  x="452.96" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (12 samples, 0.03%)</title><rect x="1036.3" y="197" width="0.3" height="15.0" fill="rgb(216,143,15)" rx="2" ry="2" />
<text  x="1039.29" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%)</title><rect x="390.4" y="197" width="0.5" height="15.0" fill="rgb(240,38,35)" rx="2" ry="2" />
<text  x="393.44" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (26 samples, 0.05%)</title><rect x="216.3" y="165" width="0.6" height="15.0" fill="rgb(245,165,16)" rx="2" ry="2" />
<text  x="219.29" y="175.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (8 samples, 0.02%)</title><rect x="1035.6" y="181" width="0.2" height="15.0" fill="rgb(206,97,28)" rx="2" ry="2" />
<text  x="1038.60" y="191.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,480 samples, 9.35%)</title><rect x="423.1" y="373" width="110.3" height="15.0" fill="rgb(250,159,5)" rx="2" ry="2" />
<text  x="426.09" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (685 samples, 1.43%)</title><rect x="788.8" y="245" width="16.8" height="15.0" fill="rgb(243,110,19)" rx="2" ry="2" />
<text  x="791.78" y="255.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (7 samples, 0.01%)</title><rect x="803.4" y="117" width="0.2" height="15.0" fill="rgb(231,212,22)" rx="2" ry="2" />
<text  x="806.38" y="127.5" ></text>
</g>
<g >
<title>schema::column_at (78 samples, 0.16%)</title><rect x="203.3" y="117" width="1.9" height="15.0" fill="rgb(211,212,8)" rx="2" ry="2" />
<text  x="206.26" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (13 samples, 0.03%)</title><rect x="1042.3" y="197" width="0.3" height="15.0" fill="rgb(226,189,19)" rx="2" ry="2" />
<text  x="1045.27" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (250 samples, 0.52%)</title><rect x="624.2" y="501" width="6.2" height="15.0" fill="rgb(216,59,40)" rx="2" ry="2" />
<text  x="627.21" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (50 samples, 0.10%)</title><rect x="614.3" y="421" width="1.2" height="15.0" fill="rgb(214,141,51)" rx="2" ry="2" />
<text  x="617.26" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (6 samples, 0.01%)</title><rect x="442.5" y="293" width="0.2" height="15.0" fill="rgb(252,14,7)" rx="2" ry="2" />
<text  x="445.55" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.04%)</title><rect x="1063.4" y="293" width="0.4" height="15.0" fill="rgb(210,48,51)" rx="2" ry="2" />
<text  x="1066.35" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%)</title><rect x="270.3" y="309" width="0.2" height="15.0" fill="rgb(211,218,47)" rx="2" ry="2" />
<text  x="273.29" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%)</title><rect x="764.1" y="341" width="0.2" height="15.0" fill="rgb(219,49,7)" rx="2" ry="2" />
<text  x="767.13" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (19 samples, 0.04%)</title><rect x="831.9" y="421" width="0.4" height="15.0" fill="rgb(219,142,23)" rx="2" ry="2" />
<text  x="834.87" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%)</title><rect x="1142.3" y="293" width="0.2" height="15.0" fill="rgb(254,19,5)" rx="2" ry="2" />
<text  x="1145.25" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (95 samples, 0.20%)</title><rect x="365.4" y="197" width="2.3" height="15.0" fill="rgb(242,76,11)" rx="2" ry="2" />
<text  x="368.39" y="207.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (152 samples, 0.32%)</title><rect x="463.2" y="277" width="3.7" height="15.0" fill="rgb(207,84,27)" rx="2" ry="2" />
<text  x="466.16" y="287.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%)</title><rect x="293.0" y="293" width="0.6" height="15.0" fill="rgb(216,193,41)" rx="2" ry="2" />
<text  x="295.97" y="303.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (27 samples, 0.06%)</title><rect x="523.5" y="261" width="0.7" height="15.0" fill="rgb(212,120,46)" rx="2" ry="2" />
<text  x="526.51" y="271.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%)</title><rect x="47.3" y="469" width="0.1" height="15.0" fill="rgb(214,25,40)" rx="2" ry="2" />
<text  x="50.31" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%)</title><rect x="939.1" y="405" width="0.4" height="15.0" fill="rgb(225,207,45)" rx="2" ry="2" />
<text  x="942.14" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (6 samples, 0.01%)</title><rect x="1016.4" y="277" width="0.2" height="15.0" fill="rgb(222,207,32)" rx="2" ry="2" />
<text  x="1019.42" y="287.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (60 samples, 0.13%)</title><rect x="1135.4" y="389" width="1.4" height="15.0" fill="rgb(236,196,24)" rx="2" ry="2" />
<text  x="1138.36" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%)</title><rect x="1137.9" y="421" width="0.2" height="15.0" fill="rgb(229,127,8)" rx="2" ry="2" />
<text  x="1140.94" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%)</title><rect x="696.3" y="453" width="0.1" height="15.0" fill="rgb(239,52,20)" rx="2" ry="2" />
<text  x="699.26" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (7 samples, 0.01%)</title><rect x="10.1" y="533" width="0.2" height="15.0" fill="rgb(230,198,15)" rx="2" ry="2" />
<text  x="13.10" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%)</title><rect x="654.9" y="469" width="0.1" height="15.0" fill="rgb(228,67,11)" rx="2" ry="2" />
<text  x="657.89" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,933 samples, 22.82%)</title><rect x="872.0" y="453" width="269.2" height="15.0" fill="rgb(221,227,2)" rx="2" ry="2" />
<text  x="875.01" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (13 samples, 0.03%)</title><rect x="577.0" y="373" width="0.3" height="15.0" fill="rgb(206,58,13)" rx="2" ry="2" />
<text  x="580.00" y="383.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%)</title><rect x="1171.5" y="453" width="0.4" height="15.0" fill="rgb(218,140,0)" rx="2" ry="2" />
<text  x="1174.46" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%)</title><rect x="826.5" y="261" width="0.1" height="15.0" fill="rgb(251,143,49)" rx="2" ry="2" />
<text  x="829.46" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (5 samples, 0.01%)</title><rect x="632.3" y="485" width="0.1" height="15.0" fill="rgb(242,96,29)" rx="2" ry="2" />
<text  x="635.31" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1,190 samples, 2.48%)</title><rect x="886.4" y="405" width="29.3" height="15.0" fill="rgb(218,46,44)" rx="2" ry="2" />
<text  x="889.42" y="415.5" >cq..</text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="414.7" y="357" width="0.1" height="15.0" fill="rgb(211,141,7)" rx="2" ry="2" />
<text  x="417.69" y="367.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (11 samples, 0.02%)</title><rect x="510.4" y="325" width="0.3" height="15.0" fill="rgb(218,220,39)" rx="2" ry="2" />
<text  x="513.41" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (11 samples, 0.02%)</title><rect x="700.6" y="421" width="0.3" height="15.0" fill="rgb(244,110,25)" rx="2" ry="2" />
<text  x="703.64" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (174 samples, 0.36%)</title><rect x="721.4" y="357" width="4.3" height="15.0" fill="rgb(211,21,38)" rx="2" ry="2" />
<text  x="724.43" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (137 samples, 0.29%)</title><rect x="950.4" y="405" width="3.4" height="15.0" fill="rgb(223,75,3)" rx="2" ry="2" />
<text  x="953.44" y="415.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (127 samples, 0.27%)</title><rect x="889.3" y="325" width="3.1" height="15.0" fill="rgb(238,165,37)" rx="2" ry="2" />
<text  x="892.30" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (440 samples, 0.92%)</title><rect x="638.1" y="485" width="10.9" height="15.0" fill="rgb(254,20,39)" rx="2" ry="2" />
<text  x="641.14" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.01%)</title><rect x="719.0" y="405" width="0.1" height="15.0" fill="rgb(243,151,0)" rx="2" ry="2" />
<text  x="722.01" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (6 samples, 0.01%)</title><rect x="17.8" y="245" width="0.2" height="15.0" fill="rgb(212,78,38)" rx="2" ry="2" />
<text  x="20.83" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (18 samples, 0.04%)</title><rect x="594.7" y="437" width="0.4" height="15.0" fill="rgb(220,79,26)" rx="2" ry="2" />
<text  x="597.68" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%)</title><rect x="49.8" y="485" width="0.2" height="15.0" fill="rgb(251,28,46)" rx="2" ry="2" />
<text  x="52.77" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (218 samples, 0.45%)</title><rect x="739.0" y="341" width="5.4" height="15.0" fill="rgb(211,24,45)" rx="2" ry="2" />
<text  x="742.01" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (193 samples, 0.40%)</title><rect x="721.1" y="373" width="4.8" height="15.0" fill="rgb(205,100,44)" rx="2" ry="2" />
<text  x="724.11" y="383.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.01%)</title><rect x="16.9" y="245" width="0.1" height="15.0" fill="rgb(223,99,23)" rx="2" ry="2" />
<text  x="19.87" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%)</title><rect x="166.8" y="197" width="0.2" height="15.0" fill="rgb(240,152,39)" rx="2" ry="2" />
<text  x="169.84" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="231.4" y="181" width="0.1" height="15.0" fill="rgb(247,40,23)" rx="2" ry="2" />
<text  x="234.36" y="191.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%)</title><rect x="1001.3" y="261" width="1.8" height="15.0" fill="rgb(243,98,21)" rx="2" ry="2" />
<text  x="1004.32" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (6 samples, 0.01%)</title><rect x="155.3" y="197" width="0.2" height="15.0" fill="rgb(229,202,27)" rx="2" ry="2" />
<text  x="158.31" y="207.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (8 samples, 0.02%)</title><rect x="1176.6" y="437" width="0.2" height="15.0" fill="rgb(248,125,1)" rx="2" ry="2" />
<text  x="1179.58" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%)</title><rect x="969.3" y="341" width="0.5" height="15.0" fill="rgb(229,113,22)" rx="2" ry="2" />
<text  x="972.33" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (23 samples, 0.05%)</title><rect x="72.1" y="373" width="0.5" height="15.0" fill="rgb(227,59,24)" rx="2" ry="2" />
<text  x="75.06" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%)</title><rect x="1105.7" y="341" width="0.1" height="15.0" fill="rgb(209,193,11)" rx="2" ry="2" />
<text  x="1108.66" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (7 samples, 0.01%)</title><rect x="959.5" y="373" width="0.2" height="15.0" fill="rgb(245,199,20)" rx="2" ry="2" />
<text  x="962.53" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (43 samples, 0.09%)</title><rect x="101.1" y="405" width="1.1" height="15.0" fill="rgb(248,219,7)" rx="2" ry="2" />
<text  x="104.11" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%)</title><rect x="314.0" y="165" width="0.1" height="15.0" fill="rgb(251,10,4)" rx="2" ry="2" />
<text  x="316.95" y="175.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (18 samples, 0.04%)</title><rect x="819.5" y="277" width="0.5" height="15.0" fill="rgb(243,33,54)" rx="2" ry="2" />
<text  x="822.54" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,917 samples, 12.35%)</title><rect x="120.8" y="341" width="145.7" height="15.0" fill="rgb(221,93,21)" rx="2" ry="2" />
<text  x="123.84" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (16 samples, 0.03%)</title><rect x="636.1" y="485" width="0.3" height="15.0" fill="rgb(242,164,32)" rx="2" ry="2" />
<text  x="639.05" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%)</title><rect x="944.3" y="357" width="0.7" height="15.0" fill="rgb(222,86,18)" rx="2" ry="2" />
<text  x="947.29" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (8 samples, 0.02%)</title><rect x="430.4" y="341" width="0.2" height="15.0" fill="rgb(219,178,37)" rx="2" ry="2" />
<text  x="433.43" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6 samples, 0.01%)</title><rect x="24.5" y="517" width="0.2" height="15.0" fill="rgb(254,41,24)" rx="2" ry="2" />
<text  x="27.50" y="527.5" ></text>
</g>
<g >
<title>operator delete (79 samples, 0.16%)</title><rect x="557.6" y="293" width="2.0" height="15.0" fill="rgb(211,15,16)" rx="2" ry="2" />
<text  x="560.62" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%)</title><rect x="607.0" y="437" width="0.1" height="15.0" fill="rgb(237,149,46)" rx="2" ry="2" />
<text  x="609.99" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%)</title><rect x="946.6" y="357" width="0.6" height="15.0" fill="rgb(244,14,23)" rx="2" ry="2" />
<text  x="949.58" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20 samples, 0.04%)</title><rect x="650.9" y="469" width="0.5" height="15.0" fill="rgb(252,31,17)" rx="2" ry="2" />
<text  x="653.93" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (12 samples, 0.03%)</title><rect x="908.5" y="325" width="0.3" height="15.0" fill="rgb(231,15,24)" rx="2" ry="2" />
<text  x="911.46" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (18 samples, 0.04%)</title><rect x="69.3" y="389" width="0.4" height="15.0" fill="rgb(243,176,16)" rx="2" ry="2" />
<text  x="72.30" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (39 samples, 0.08%)</title><rect x="647.9" y="453" width="1.0" height="15.0" fill="rgb(213,173,27)" rx="2" ry="2" />
<text  x="650.95" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (57 samples, 0.12%)</title><rect x="592.3" y="389" width="1.4" height="15.0" fill="rgb(235,209,50)" rx="2" ry="2" />
<text  x="595.29" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%)</title><rect x="1038.9" y="229" width="0.2" height="15.0" fill="rgb(244,176,17)" rx="2" ry="2" />
<text  x="1041.95" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (78 samples, 0.16%)</title><rect x="17.6" y="357" width="1.9" height="15.0" fill="rgb(239,209,1)" rx="2" ry="2" />
<text  x="20.61" y="367.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (184 samples, 0.38%)</title><rect x="924.3" y="357" width="4.5" height="15.0" fill="rgb(237,63,34)" rx="2" ry="2" />
<text  x="927.29" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (7 samples, 0.01%)</title><rect x="1054.1" y="293" width="0.2" height="15.0" fill="rgb(218,39,13)" rx="2" ry="2" />
<text  x="1057.12" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="202.7" y="117" width="0.2" height="15.0" fill="rgb(220,83,39)" rx="2" ry="2" />
<text  x="205.69" y="127.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%)</title><rect x="1005.9" y="293" width="0.2" height="15.0" fill="rgb(232,79,25)" rx="2" ry="2" />
<text  x="1008.95" y="303.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (5 samples, 0.01%)</title><rect x="316.8" y="181" width="0.1" height="15.0" fill="rgb(232,51,36)" rx="2" ry="2" />
<text  x="319.78" y="191.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (50 samples, 0.10%)</title><rect x="821.4" y="373" width="1.3" height="15.0" fill="rgb(216,107,4)" rx="2" ry="2" />
<text  x="824.43" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (15 samples, 0.03%)</title><rect x="722.6" y="309" width="0.4" height="15.0" fill="rgb(228,217,39)" rx="2" ry="2" />
<text  x="725.61" y="319.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%)</title><rect x="568.1" y="341" width="0.9" height="15.0" fill="rgb(230,124,4)" rx="2" ry="2" />
<text  x="571.06" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (32 samples, 0.07%)</title><rect x="230.7" y="213" width="0.8" height="15.0" fill="rgb(233,101,16)" rx="2" ry="2" />
<text  x="233.74" y="223.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (14 samples, 0.03%)</title><rect x="744.0" y="261" width="0.3" height="15.0" fill="rgb(205,203,17)" rx="2" ry="2" />
<text  x="746.98" y="271.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (357 samples, 0.75%)</title><rect x="718.5" y="437" width="8.8" height="15.0" fill="rgb(232,229,40)" rx="2" ry="2" />
<text  x="721.50" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (22 samples, 0.05%)</title><rect x="416.4" y="357" width="0.5" height="15.0" fill="rgb(216,123,34)" rx="2" ry="2" />
<text  x="419.39" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%)</title><rect x="703.5" y="421" width="0.2" height="15.0" fill="rgb(243,53,41)" rx="2" ry="2" />
<text  x="706.55" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%)</title><rect x="763.3" y="357" width="0.6" height="15.0" fill="rgb(236,113,39)" rx="2" ry="2" />
<text  x="766.34" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (55 samples, 0.11%)</title><rect x="776.4" y="309" width="1.4" height="15.0" fill="rgb(252,156,20)" rx="2" ry="2" />
<text  x="779.42" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (8 samples, 0.02%)</title><rect x="254.5" y="213" width="0.2" height="15.0" fill="rgb(213,103,1)" rx="2" ry="2" />
<text  x="257.53" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (11 samples, 0.02%)</title><rect x="315.0" y="165" width="0.3" height="15.0" fill="rgb(250,179,29)" rx="2" ry="2" />
<text  x="318.03" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (10 samples, 0.02%)</title><rect x="605.6" y="437" width="0.2" height="15.0" fill="rgb(207,37,38)" rx="2" ry="2" />
<text  x="608.59" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%)</title><rect x="1043.6" y="245" width="0.6" height="15.0" fill="rgb(211,39,42)" rx="2" ry="2" />
<text  x="1046.63" y="255.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (67 samples, 0.14%)</title><rect x="857.9" y="453" width="1.7" height="15.0" fill="rgb(236,76,54)" rx="2" ry="2" />
<text  x="860.90" y="463.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%)</title><rect x="215.4" y="165" width="0.9" height="15.0" fill="rgb(247,149,34)" rx="2" ry="2" />
<text  x="218.38" y="175.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.07%)</title><rect x="792.0" y="149" width="0.8" height="15.0" fill="rgb(240,178,17)" rx="2" ry="2" />
<text  x="794.96" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (18 samples, 0.04%)</title><rect x="651.6" y="485" width="0.5" height="15.0" fill="rgb(232,161,32)" rx="2" ry="2" />
<text  x="654.64" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.01%)</title><rect x="455.1" y="325" width="0.1" height="15.0" fill="rgb(208,225,15)" rx="2" ry="2" />
<text  x="458.08" y="335.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (247 samples, 0.52%)</title><rect x="922.7" y="373" width="6.1" height="15.0" fill="rgb(220,185,32)" rx="2" ry="2" />
<text  x="925.74" y="383.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (68 samples, 0.14%)</title><rect x="154.6" y="213" width="1.7" height="15.0" fill="rgb(244,37,24)" rx="2" ry="2" />
<text  x="157.65" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%)</title><rect x="766.7" y="341" width="0.1" height="15.0" fill="rgb(206,198,38)" rx="2" ry="2" />
<text  x="769.69" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (70 samples, 0.15%)</title><rect x="1103.4" y="357" width="1.8" height="15.0" fill="rgb(230,204,23)" rx="2" ry="2" />
<text  x="1106.44" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (16 samples, 0.03%)</title><rect x="473.6" y="213" width="0.4" height="15.0" fill="rgb(234,54,16)" rx="2" ry="2" />
<text  x="476.60" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (8 samples, 0.02%)</title><rect x="990.5" y="341" width="0.2" height="15.0" fill="rgb(221,55,29)" rx="2" ry="2" />
<text  x="993.48" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (195 samples, 0.41%)</title><rect x="697.0" y="453" width="4.8" height="15.0" fill="rgb(235,52,48)" rx="2" ry="2" />
<text  x="700.02" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (41 samples, 0.09%)</title><rect x="745.2" y="405" width="1.1" height="15.0" fill="rgb(249,160,31)" rx="2" ry="2" />
<text  x="748.24" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (9 samples, 0.02%)</title><rect x="509.3" y="293" width="0.2" height="15.0" fill="rgb(206,58,2)" rx="2" ry="2" />
<text  x="512.30" y="303.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%)</title><rect x="786.3" y="245" width="0.6" height="15.0" fill="rgb(246,162,33)" rx="2" ry="2" />
<text  x="789.27" y="255.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%)</title><rect x="16.1" y="229" width="0.1" height="15.0" fill="rgb(219,174,41)" rx="2" ry="2" />
<text  x="19.06" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%)</title><rect x="543.8" y="309" width="0.4" height="15.0" fill="rgb(215,67,20)" rx="2" ry="2" />
<text  x="546.78" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%)</title><rect x="547.0" y="421" width="0.2" height="15.0" fill="rgb(221,78,8)" rx="2" ry="2" />
<text  x="550.01" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%)</title><rect x="63.3" y="405" width="0.2" height="15.0" fill="rgb(214,189,3)" rx="2" ry="2" />
<text  x="66.34" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (37 samples, 0.08%)</title><rect x="952.4" y="373" width="0.9" height="15.0" fill="rgb(218,157,42)" rx="2" ry="2" />
<text  x="955.36" y="383.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="899.4" y="261" width="0.2" height="15.0" fill="rgb(216,78,43)" rx="2" ry="2" />
<text  x="902.42" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (9 samples, 0.02%)</title><rect x="223.1" y="149" width="0.2" height="15.0" fill="rgb(237,53,2)" rx="2" ry="2" />
<text  x="226.08" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (47 samples, 0.10%)</title><rect x="70.4" y="373" width="1.2" height="15.0" fill="rgb(209,147,35)" rx="2" ry="2" />
<text  x="73.43" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (29 samples, 0.06%)</title><rect x="1109.4" y="405" width="0.7" height="15.0" fill="rgb(239,223,24)" rx="2" ry="2" />
<text  x="1112.35" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.15%)</title><rect x="1128.7" y="389" width="1.8" height="15.0" fill="rgb(223,90,43)" rx="2" ry="2" />
<text  x="1131.68" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (15 samples, 0.03%)</title><rect x="1048.5" y="277" width="0.4" height="15.0" fill="rgb(238,142,39)" rx="2" ry="2" />
<text  x="1051.50" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="390.7" y="181" width="0.2" height="15.0" fill="rgb(209,151,44)" rx="2" ry="2" />
<text  x="393.71" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%)</title><rect x="115.2" y="373" width="0.1" height="15.0" fill="rgb(235,35,30)" rx="2" ry="2" />
<text  x="118.22" y="383.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%)</title><rect x="602.5" y="421" width="0.8" height="15.0" fill="rgb(206,166,17)" rx="2" ry="2" />
<text  x="605.54" y="431.5" ></text>
</g>
<g >
<title>__start_context (7 samples, 0.01%)</title><rect x="10.1" y="517" width="0.2" height="15.0" fill="rgb(236,44,33)" rx="2" ry="2" />
<text  x="13.10" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%)</title><rect x="435.2" y="277" width="0.1" height="15.0" fill="rgb(209,124,36)" rx="2" ry="2" />
<text  x="438.18" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%)</title><rect x="1101.7" y="341" width="0.1" height="15.0" fill="rgb(238,212,36)" rx="2" ry="2" />
<text  x="1104.69" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (32 samples, 0.07%)</title><rect x="863.3" y="421" width="0.8" height="15.0" fill="rgb(242,194,12)" rx="2" ry="2" />
<text  x="866.34" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (456 samples, 0.95%)</title><rect x="495.9" y="261" width="11.2" height="15.0" fill="rgb(223,220,26)" rx="2" ry="2" />
<text  x="498.88" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.02%)</title><rect x="173.6" y="133" width="0.3" height="15.0" fill="rgb(243,135,0)" rx="2" ry="2" />
<text  x="176.61" y="143.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (6 samples, 0.01%)</title><rect x="679.7" y="277" width="0.1" height="15.0" fill="rgb(244,128,43)" rx="2" ry="2" />
<text  x="682.66" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (14 samples, 0.03%)</title><rect x="1102.8" y="341" width="0.4" height="15.0" fill="rgb(210,95,28)" rx="2" ry="2" />
<text  x="1105.83" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%)</title><rect x="682.0" y="485" width="0.1" height="15.0" fill="rgb(235,155,10)" rx="2" ry="2" />
<text  x="684.95" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (31 samples, 0.06%)</title><rect x="16.5" y="277" width="0.7" height="15.0" fill="rgb(227,34,38)" rx="2" ry="2" />
<text  x="19.45" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (59 samples, 0.12%)</title><rect x="494.1" y="261" width="1.5" height="15.0" fill="rgb(251,102,15)" rx="2" ry="2" />
<text  x="497.14" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (6 samples, 0.01%)</title><rect x="727.3" y="437" width="0.1" height="15.0" fill="rgb(219,122,34)" rx="2" ry="2" />
<text  x="730.29" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (62 samples, 0.13%)</title><rect x="748.4" y="373" width="1.5" height="15.0" fill="rgb(210,16,52)" rx="2" ry="2" />
<text  x="751.42" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="1044.8" y="261" width="0.1" height="15.0" fill="rgb(244,218,17)" rx="2" ry="2" />
<text  x="1047.78" y="271.5" ></text>
</g>
<g >
<title>dht::tri_compare (94 samples, 0.20%)</title><rect x="1088.9" y="229" width="2.3" height="15.0" fill="rgb(208,177,15)" rx="2" ry="2" />
<text  x="1091.89" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (747 samples, 1.56%)</title><rect x="547.9" y="373" width="18.4" height="15.0" fill="rgb(232,170,39)" rx="2" ry="2" />
<text  x="550.89" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (33 samples, 0.07%)</title><rect x="843.9" y="421" width="0.8" height="15.0" fill="rgb(209,190,14)" rx="2" ry="2" />
<text  x="846.89" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (44 samples, 0.09%)</title><rect x="758.9" y="341" width="1.0" height="15.0" fill="rgb(233,64,52)" rx="2" ry="2" />
<text  x="761.86" y="351.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (87 samples, 0.18%)</title><rect x="1134.7" y="405" width="2.1" height="15.0" fill="rgb(207,120,2)" rx="2" ry="2" />
<text  x="1137.69" y="415.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (6 samples, 0.01%)</title><rect x="389.3" y="213" width="0.2" height="15.0" fill="rgb(244,75,51)" rx="2" ry="2" />
<text  x="392.33" y="223.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (38 samples, 0.08%)</title><rect x="329.1" y="165" width="0.9" height="15.0" fill="rgb(247,61,53)" rx="2" ry="2" />
<text  x="332.10" y="175.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (12 samples, 0.03%)</title><rect x="590.9" y="405" width="0.3" height="15.0" fill="rgb(232,44,51)" rx="2" ry="2" />
<text  x="593.91" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.01%)</title><rect x="288.9" y="389" width="0.1" height="15.0" fill="rgb(225,216,33)" rx="2" ry="2" />
<text  x="291.88" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%)</title><rect x="809.7" y="245" width="0.2" height="15.0" fill="rgb(217,113,4)" rx="2" ry="2" />
<text  x="812.71" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%)</title><rect x="847.8" y="389" width="0.2" height="15.0" fill="rgb(220,130,40)" rx="2" ry="2" />
<text  x="850.78" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%)</title><rect x="617.2" y="373" width="0.7" height="15.0" fill="rgb(234,2,26)" rx="2" ry="2" />
<text  x="620.21" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (40 samples, 0.08%)</title><rect x="814.4" y="309" width="1.0" height="15.0" fill="rgb(232,173,33)" rx="2" ry="2" />
<text  x="817.44" y="319.5" ></text>
</g>
<g >
<title>operator delete (58 samples, 0.12%)</title><rect x="939.7" y="405" width="1.4" height="15.0" fill="rgb(206,22,51)" rx="2" ry="2" />
<text  x="942.66" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (24 samples, 0.05%)</title><rect x="245.1" y="181" width="0.6" height="15.0" fill="rgb(254,158,29)" rx="2" ry="2" />
<text  x="248.10" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (9 samples, 0.02%)</title><rect x="950.8" y="389" width="0.2" height="15.0" fill="rgb(229,54,1)" rx="2" ry="2" />
<text  x="953.79" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%)</title><rect x="1137.3" y="421" width="0.1" height="15.0" fill="rgb(221,123,12)" rx="2" ry="2" />
<text  x="1140.30" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%)</title><rect x="509.2" y="277" width="0.1" height="15.0" fill="rgb(246,4,24)" rx="2" ry="2" />
<text  x="512.18" y="287.5" ></text>
</g>
<g >
<title>query::querier&lt; (10 samples, 0.02%)</title><rect x="59.6" y="453" width="0.3" height="15.0" fill="rgb(213,152,44)" rx="2" ry="2" />
<text  x="62.64" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (47 samples, 0.10%)</title><rect x="1029.3" y="197" width="1.2" height="15.0" fill="rgb(228,147,20)" rx="2" ry="2" />
<text  x="1032.34" y="207.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (6 samples, 0.01%)</title><rect x="700.9" y="421" width="0.2" height="15.0" fill="rgb(238,217,34)" rx="2" ry="2" />
<text  x="703.91" y="431.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (137 samples, 0.29%)</title><rect x="844.7" y="421" width="3.4" height="15.0" fill="rgb(223,10,18)" rx="2" ry="2" />
<text  x="847.70" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (44 samples, 0.09%)</title><rect x="147.1" y="245" width="1.1" height="15.0" fill="rgb(246,185,39)" rx="2" ry="2" />
<text  x="150.09" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (26 samples, 0.05%)</title><rect x="553.2" y="309" width="0.7" height="15.0" fill="rgb(228,10,36)" rx="2" ry="2" />
<text  x="556.21" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (5 samples, 0.01%)</title><rect x="60.0" y="453" width="0.1" height="15.0" fill="rgb(233,111,27)" rx="2" ry="2" />
<text  x="62.96" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (5 samples, 0.01%)</title><rect x="263.6" y="309" width="0.2" height="15.0" fill="rgb(230,1,47)" rx="2" ry="2" />
<text  x="266.64" y="319.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (102 samples, 0.21%)</title><rect x="1032.1" y="165" width="2.5" height="15.0" fill="rgb(205,65,36)" rx="2" ry="2" />
<text  x="1035.13" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (28 samples, 0.06%)</title><rect x="440.4" y="277" width="0.7" height="15.0" fill="rgb(232,9,4)" rx="2" ry="2" />
<text  x="443.40" y="287.5" ></text>
</g>
<g >
<title>perf_simple_que (47,917 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(211,179,49)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (9 samples, 0.02%)</title><rect x="581.4" y="421" width="0.2" height="15.0" fill="rgb(230,74,20)" rx="2" ry="2" />
<text  x="584.38" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%)</title><rect x="713.5" y="421" width="0.1" height="15.0" fill="rgb(209,26,2)" rx="2" ry="2" />
<text  x="716.47" y="431.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%)</title><rect x="504.9" y="229" width="0.3" height="15.0" fill="rgb(223,123,32)" rx="2" ry="2" />
<text  x="507.90" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="565.8" y="325" width="0.3" height="15.0" fill="rgb(254,29,18)" rx="2" ry="2" />
<text  x="568.84" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (69 samples, 0.14%)</title><rect x="647.2" y="469" width="1.7" height="15.0" fill="rgb(237,39,36)" rx="2" ry="2" />
<text  x="650.21" y="479.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="907.1" y="309" width="0.1" height="15.0" fill="rgb(244,116,26)" rx="2" ry="2" />
<text  x="910.08" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%)</title><rect x="936.7" y="357" width="0.1" height="15.0" fill="rgb(240,204,11)" rx="2" ry="2" />
<text  x="939.65" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (31 samples, 0.06%)</title><rect x="1106.7" y="373" width="0.8" height="15.0" fill="rgb(232,194,42)" rx="2" ry="2" />
<text  x="1109.72" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (88 samples, 0.18%)</title><rect x="239.8" y="197" width="2.2" height="15.0" fill="rgb(239,176,32)" rx="2" ry="2" />
<text  x="242.83" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%)</title><rect x="134.5" y="245" width="0.2" height="15.0" fill="rgb(225,227,19)" rx="2" ry="2" />
<text  x="137.51" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,087 samples, 14.79%)</title><rect x="113.5" y="405" width="174.5" height="15.0" fill="rgb(244,181,7)" rx="2" ry="2" />
<text  x="116.48" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>reader_permit::impl::signal (21 samples, 0.04%)</title><rect x="62.9" y="421" width="0.6" height="15.0" fill="rgb(207,81,54)" rx="2" ry="2" />
<text  x="65.94" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="141.1" y="229" width="0.1" height="15.0" fill="rgb(227,89,16)" rx="2" ry="2" />
<text  x="144.06" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (8 samples, 0.02%)</title><rect x="891.4" y="309" width="0.2" height="15.0" fill="rgb(253,204,49)" rx="2" ry="2" />
<text  x="894.44" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (31 samples, 0.06%)</title><rect x="206.7" y="149" width="0.8" height="15.0" fill="rgb(219,184,49)" rx="2" ry="2" />
<text  x="209.73" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,765 samples, 12.03%)</title><rect x="965.8" y="389" width="141.9" height="15.0" fill="rgb(243,160,12)" rx="2" ry="2" />
<text  x="968.76" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (8 samples, 0.02%)</title><rect x="809.2" y="213" width="0.2" height="15.0" fill="rgb(214,195,42)" rx="2" ry="2" />
<text  x="812.17" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="411.2" y="277" width="0.2" height="15.0" fill="rgb(250,50,3)" rx="2" ry="2" />
<text  x="414.25" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (142 samples, 0.30%)</title><rect x="193.9" y="37" width="3.5" height="15.0" fill="rgb(227,23,36)" rx="2" ry="2" />
<text  x="196.85" y="47.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (23 samples, 0.05%)</title><rect x="990.7" y="341" width="0.5" height="15.0" fill="rgb(240,150,19)" rx="2" ry="2" />
<text  x="993.68" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%)</title><rect x="914.3" y="293" width="0.1" height="15.0" fill="rgb(238,121,48)" rx="2" ry="2" />
<text  x="917.27" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (115 samples, 0.24%)</title><rect x="654.8" y="485" width="2.8" height="15.0" fill="rgb(226,168,10)" rx="2" ry="2" />
<text  x="657.77" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (15 samples, 0.03%)</title><rect x="928.8" y="389" width="0.4" height="15.0" fill="rgb(220,22,48)" rx="2" ry="2" />
<text  x="931.82" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (20 samples, 0.04%)</title><rect x="620.3" y="485" width="0.5" height="15.0" fill="rgb(226,4,34)" rx="2" ry="2" />
<text  x="623.27" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%)</title><rect x="1041.7" y="181" width="0.3" height="15.0" fill="rgb(253,195,26)" rx="2" ry="2" />
<text  x="1044.68" y="191.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,956 samples, 97.99%)</title><rect x="22.4" y="597" width="1156.3" height="15.0" fill="rgb(231,45,46)" rx="2" ry="2" />
<text  x="25.44" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>schema::get_partitioner (19 samples, 0.04%)</title><rect x="941.2" y="405" width="0.5" height="15.0" fill="rgb(242,172,17)" rx="2" ry="2" />
<text  x="944.21" y="415.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (59 samples, 0.12%)</title><rect x="1164.5" y="469" width="1.4" height="15.0" fill="rgb(208,87,21)" rx="2" ry="2" />
<text  x="1167.49" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (25 samples, 0.05%)</title><rect x="68.5" y="389" width="0.7" height="15.0" fill="rgb(230,227,14)" rx="2" ry="2" />
<text  x="71.53" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%)</title><rect x="805.1" y="197" width="0.2" height="15.0" fill="rgb(235,112,14)" rx="2" ry="2" />
<text  x="808.08" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (34 samples, 0.07%)</title><rect x="759.1" y="325" width="0.8" height="15.0" fill="rgb(221,210,15)" rx="2" ry="2" />
<text  x="762.06" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (192 samples, 0.40%)</title><rect x="192.6" y="69" width="4.8" height="15.0" fill="rgb(209,30,33)" rx="2" ry="2" />
<text  x="195.65" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (12 samples, 0.03%)</title><rect x="443.0" y="277" width="0.3" height="15.0" fill="rgb(253,18,23)" rx="2" ry="2" />
<text  x="446.04" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="54.4" y="469" width="0.1" height="15.0" fill="rgb(246,153,22)" rx="2" ry="2" />
<text  x="57.40" y="479.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (8 samples, 0.02%)</title><rect x="288.0" y="405" width="0.2" height="15.0" fill="rgb(222,216,12)" rx="2" ry="2" />
<text  x="291.05" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%)</title><rect x="450.0" y="277" width="0.3" height="15.0" fill="rgb(224,190,6)" rx="2" ry="2" />
<text  x="452.98" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%)</title><rect x="1079.4" y="293" width="0.3" height="15.0" fill="rgb(222,150,47)" rx="2" ry="2" />
<text  x="1082.41" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (13 samples, 0.03%)</title><rect x="19.6" y="341" width="0.3" height="15.0" fill="rgb(251,221,18)" rx="2" ry="2" />
<text  x="22.55" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (12 samples, 0.03%)</title><rect x="160.4" y="213" width="0.3" height="15.0" fill="rgb(229,54,47)" rx="2" ry="2" />
<text  x="163.41" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (6 samples, 0.01%)</title><rect x="544.0" y="293" width="0.2" height="15.0" fill="rgb(224,131,49)" rx="2" ry="2" />
<text  x="547.03" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.01%)</title><rect x="915.2" y="373" width="0.1" height="15.0" fill="rgb(242,110,46)" rx="2" ry="2" />
<text  x="918.16" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (267 samples, 0.56%)</title><rect x="15.5" y="517" width="6.6" height="15.0" fill="rgb(239,221,47)" rx="2" ry="2" />
<text  x="18.54" y="527.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%)</title><rect x="415.6" y="341" width="0.7" height="15.0" fill="rgb(231,197,33)" rx="2" ry="2" />
<text  x="418.63" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (13 samples, 0.03%)</title><rect x="596.8" y="405" width="0.3" height="15.0" fill="rgb(211,61,36)" rx="2" ry="2" />
<text  x="599.77" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (7 samples, 0.01%)</title><rect x="954.2" y="405" width="0.2" height="15.0" fill="rgb(211,49,7)" rx="2" ry="2" />
<text  x="957.19" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%)</title><rect x="149.9" y="245" width="0.2" height="15.0" fill="rgb(253,14,27)" rx="2" ry="2" />
<text  x="152.92" y="255.5" ></text>
</g>
<g >
<title>operator new (96 samples, 0.20%)</title><rect x="157.5" y="213" width="2.4" height="15.0" fill="rgb(233,101,10)" rx="2" ry="2" />
<text  x="160.51" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (9 samples, 0.02%)</title><rect x="1142.3" y="261" width="0.2" height="15.0" fill="rgb(223,103,0)" rx="2" ry="2" />
<text  x="1145.30" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (19 samples, 0.04%)</title><rect x="284.8" y="325" width="0.5" height="15.0" fill="rgb(208,134,28)" rx="2" ry="2" />
<text  x="287.79" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (486 samples, 1.01%)</title><rect x="667.3" y="501" width="11.9" height="15.0" fill="rgb(252,215,24)" rx="2" ry="2" />
<text  x="670.25" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (264 samples, 0.55%)</title><rect x="98.1" y="437" width="6.5" height="15.0" fill="rgb(228,166,28)" rx="2" ry="2" />
<text  x="101.13" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (6 samples, 0.01%)</title><rect x="1056.6" y="309" width="0.1" height="15.0" fill="rgb(229,43,37)" rx="2" ry="2" />
<text  x="1059.58" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (18 samples, 0.04%)</title><rect x="444.4" y="277" width="0.5" height="15.0" fill="rgb(253,52,4)" rx="2" ry="2" />
<text  x="447.44" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="751.4" y="405" width="0.2" height="15.0" fill="rgb(234,121,39)" rx="2" ry="2" />
<text  x="754.45" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (387 samples, 0.81%)</title><rect x="893.4" y="293" width="9.6" height="15.0" fill="rgb(246,44,53)" rx="2" ry="2" />
<text  x="896.44" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (23 samples, 0.05%)</title><rect x="217.0" y="165" width="0.5" height="15.0" fill="rgb(216,187,47)" rx="2" ry="2" />
<text  x="219.98" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (53 samples, 0.11%)</title><rect x="264.1" y="325" width="1.3" height="15.0" fill="rgb(218,215,46)" rx="2" ry="2" />
<text  x="267.06" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%)</title><rect x="1142.2" y="389" width="0.9" height="15.0" fill="rgb(242,62,47)" rx="2" ry="2" />
<text  x="1145.18" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13 samples, 0.03%)</title><rect x="1097.7" y="293" width="0.3" height="15.0" fill="rgb(234,66,0)" rx="2" ry="2" />
<text  x="1100.65" y="303.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%)</title><rect x="1188.8" y="629" width="1.1" height="15.0" fill="rgb(226,152,19)" rx="2" ry="2" />
<text  x="1191.82" y="639.5" ></text>
</g>
<g >
<title>row::row (21 samples, 0.04%)</title><rect x="253.7" y="197" width="0.5" height="15.0" fill="rgb(237,70,54)" rx="2" ry="2" />
<text  x="256.67" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (39 samples, 0.08%)</title><rect x="295.6" y="261" width="1.0" height="15.0" fill="rgb(216,162,34)" rx="2" ry="2" />
<text  x="298.63" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%)</title><rect x="424.2" y="357" width="0.1" height="15.0" fill="rgb(227,143,3)" rx="2" ry="2" />
<text  x="427.17" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%)</title><rect x="799.3" y="117" width="0.2" height="15.0" fill="rgb(235,35,6)" rx="2" ry="2" />
<text  x="802.27" y="127.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (10 samples, 0.02%)</title><rect x="1053.9" y="293" width="0.2" height="15.0" fill="rgb(232,102,5)" rx="2" ry="2" />
<text  x="1056.87" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%)</title><rect x="1124.9" y="405" width="0.1" height="15.0" fill="rgb(226,130,34)" rx="2" ry="2" />
<text  x="1127.92" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.01%)</title><rect x="856.8" y="405" width="0.2" height="15.0" fill="rgb(231,68,2)" rx="2" ry="2" />
<text  x="859.82" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (656 samples, 1.37%)</title><rect x="549.9" y="341" width="16.2" height="15.0" fill="rgb(207,159,19)" rx="2" ry="2" />
<text  x="552.91" y="351.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (49 samples, 0.10%)</title><rect x="725.9" y="405" width="1.2" height="15.0" fill="rgb(226,191,25)" rx="2" ry="2" />
<text  x="728.89" y="415.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%)</title><rect x="51.8" y="469" width="0.4" height="15.0" fill="rgb(245,72,18)" rx="2" ry="2" />
<text  x="54.76" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (20 samples, 0.04%)</title><rect x="60.1" y="453" width="0.5" height="15.0" fill="rgb(245,32,39)" rx="2" ry="2" />
<text  x="63.09" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%)</title><rect x="18.7" y="245" width="0.1" height="15.0" fill="rgb(215,117,2)" rx="2" ry="2" />
<text  x="21.69" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (121 samples, 0.25%)</title><rect x="1000.5" y="293" width="3.0" height="15.0" fill="rgb(233,203,16)" rx="2" ry="2" />
<text  x="1003.53" y="303.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (24 samples, 0.05%)</title><rect x="1141.5" y="325" width="0.6" height="15.0" fill="rgb(234,122,47)" rx="2" ry="2" />
<text  x="1144.54" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (14 samples, 0.03%)</title><rect x="901.7" y="277" width="0.3" height="15.0" fill="rgb(253,73,25)" rx="2" ry="2" />
<text  x="904.69" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (54 samples, 0.11%)</title><rect x="581.6" y="421" width="1.3" height="15.0" fill="rgb(229,219,51)" rx="2" ry="2" />
<text  x="584.60" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,541 samples, 26.17%)</title><rect x="110.8" y="421" width="308.8" height="15.0" fill="rgb(230,75,9)" rx="2" ry="2" />
<text  x="113.82" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::reactor::add_task (26 samples, 0.05%)</title><rect x="34.1" y="485" width="0.6" height="15.0" fill="rgb(210,126,31)" rx="2" ry="2" />
<text  x="37.08" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (126 samples, 0.26%)</title><rect x="398.6" y="197" width="3.1" height="15.0" fill="rgb(210,133,52)" rx="2" ry="2" />
<text  x="401.59" y="207.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%)</title><rect x="1158.9" y="405" width="0.1" height="15.0" fill="rgb(238,162,38)" rx="2" ry="2" />
<text  x="1161.92" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (109 samples, 0.23%)</title><rect x="1000.7" y="277" width="2.7" height="15.0" fill="rgb(221,200,17)" rx="2" ry="2" />
<text  x="1003.70" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (36 samples, 0.08%)</title><rect x="238.5" y="213" width="0.9" height="15.0" fill="rgb(231,169,35)" rx="2" ry="2" />
<text  x="241.47" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.03%)</title><rect x="792.5" y="133" width="0.3" height="15.0" fill="rgb(244,121,54)" rx="2" ry="2" />
<text  x="795.50" y="143.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (268 samples, 0.56%)</title><rect x="443.8" y="309" width="6.6" height="15.0" fill="rgb(225,76,10)" rx="2" ry="2" />
<text  x="446.75" y="319.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (11 samples, 0.02%)</title><rect x="233.9" y="245" width="0.2" height="15.0" fill="rgb(248,87,18)" rx="2" ry="2" />
<text  x="236.87" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (17 samples, 0.04%)</title><rect x="659.9" y="469" width="0.4" height="15.0" fill="rgb(245,200,47)" rx="2" ry="2" />
<text  x="662.89" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (14 samples, 0.03%)</title><rect x="419.2" y="405" width="0.3" height="15.0" fill="rgb(216,222,27)" rx="2" ry="2" />
<text  x="422.20" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.03%)</title><rect x="790.0" y="229" width="0.3" height="15.0" fill="rgb(251,82,20)" rx="2" ry="2" />
<text  x="792.96" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,274 samples, 2.66%)</title><rect x="547.4" y="421" width="31.4" height="15.0" fill="rgb(235,21,20)" rx="2" ry="2" />
<text  x="550.40" y="431.5" >st..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (46 samples, 0.10%)</title><rect x="1166.0" y="469" width="1.1" height="15.0" fill="rgb(217,186,51)" rx="2" ry="2" />
<text  x="1168.99" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (18 samples, 0.04%)</title><rect x="420.2" y="421" width="0.4" height="15.0" fill="rgb(252,20,44)" rx="2" ry="2" />
<text  x="423.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%)</title><rect x="775.9" y="293" width="0.5" height="15.0" fill="rgb(213,23,48)" rx="2" ry="2" />
<text  x="778.90" y="303.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (29 samples, 0.06%)</title><rect x="310.5" y="165" width="0.7" height="15.0" fill="rgb(216,67,47)" rx="2" ry="2" />
<text  x="313.45" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (139 samples, 0.29%)</title><rect x="405.7" y="261" width="3.4" height="15.0" fill="rgb(214,199,6)" rx="2" ry="2" />
<text  x="408.71" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%)</title><rect x="41.4" y="453" width="0.4" height="15.0" fill="rgb(207,158,10)" rx="2" ry="2" />
<text  x="44.45" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (47 samples, 0.10%)</title><rect x="643.8" y="469" width="1.2" height="15.0" fill="rgb(245,57,32)" rx="2" ry="2" />
<text  x="646.81" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,026 samples, 23.01%)</title><rect x="869.7" y="469" width="271.5" height="15.0" fill="rgb(212,83,50)" rx="2" ry="2" />
<text  x="872.72" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (24 samples, 0.05%)</title><rect x="159.3" y="181" width="0.5" height="15.0" fill="rgb(246,97,46)" rx="2" ry="2" />
<text  x="162.25" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (26 samples, 0.05%)</title><rect x="693.5" y="469" width="0.6" height="15.0" fill="rgb(239,56,5)" rx="2" ry="2" />
<text  x="696.50" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%)</title><rect x="793.6" y="213" width="0.3" height="15.0" fill="rgb(238,118,4)" rx="2" ry="2" />
<text  x="796.63" y="223.5" ></text>
</g>
<g >
<title>database::find_column_family (41 samples, 0.09%)</title><rect x="1021.9" y="245" width="1.0" height="15.0" fill="rgb(215,52,13)" rx="2" ry="2" />
<text  x="1024.86" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%)</title><rect x="826.4" y="277" width="0.3" height="15.0" fill="rgb(249,214,8)" rx="2" ry="2" />
<text  x="829.36" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%)</title><rect x="40.9" y="437" width="0.2" height="15.0" fill="rgb(237,149,37)" rx="2" ry="2" />
<text  x="43.88" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%)</title><rect x="498.5" y="181" width="0.7" height="15.0" fill="rgb(215,211,11)" rx="2" ry="2" />
<text  x="501.52" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (20 samples, 0.04%)</title><rect x="134.0" y="245" width="0.5" height="15.0" fill="rgb(225,15,4)" rx="2" ry="2" />
<text  x="137.01" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (7 samples, 0.01%)</title><rect x="39.2" y="405" width="0.2" height="15.0" fill="rgb(232,78,31)" rx="2" ry="2" />
<text  x="42.21" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%)</title><rect x="845.8" y="373" width="0.3" height="15.0" fill="rgb(233,67,23)" rx="2" ry="2" />
<text  x="848.79" y="383.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (8 samples, 0.02%)</title><rect x="596.6" y="405" width="0.2" height="15.0" fill="rgb(222,208,10)" rx="2" ry="2" />
<text  x="599.58" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%)</title><rect x="1127.5" y="405" width="0.3" height="15.0" fill="rgb(216,127,41)" rx="2" ry="2" />
<text  x="1130.55" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (250 samples, 0.52%)</title><rect x="15.6" y="485" width="6.1" height="15.0" fill="rgb(235,12,24)" rx="2" ry="2" />
<text  x="18.59" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (8 samples, 0.02%)</title><rect x="854.9" y="437" width="0.2" height="15.0" fill="rgb(238,166,37)" rx="2" ry="2" />
<text  x="857.87" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (39 samples, 0.08%)</title><rect x="1068.4" y="293" width="0.9" height="15.0" fill="rgb(220,10,30)" rx="2" ry="2" />
<text  x="1071.35" y="303.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (13 samples, 0.03%)</title><rect x="210.6" y="117" width="0.4" height="15.0" fill="rgb(223,69,8)" rx="2" ry="2" />
<text  x="213.65" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (14 samples, 0.03%)</title><rect x="296.9" y="293" width="0.3" height="15.0" fill="rgb(211,175,46)" rx="2" ry="2" />
<text  x="299.89" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (17 samples, 0.04%)</title><rect x="871.6" y="453" width="0.4" height="15.0" fill="rgb(208,109,29)" rx="2" ry="2" />
<text  x="874.59" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%)</title><rect x="1040.4" y="197" width="1.6" height="15.0" fill="rgb(237,92,34)" rx="2" ry="2" />
<text  x="1043.45" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (265 samples, 0.55%)</title><rect x="15.5" y="501" width="6.6" height="15.0" fill="rgb(212,50,36)" rx="2" ry="2" />
<text  x="18.54" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (9 samples, 0.02%)</title><rect x="690.4" y="469" width="0.2" height="15.0" fill="rgb(236,153,6)" rx="2" ry="2" />
<text  x="693.40" y="479.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (5 samples, 0.01%)</title><rect x="451.8" y="341" width="0.2" height="15.0" fill="rgb(246,167,45)" rx="2" ry="2" />
<text  x="454.83" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (94 samples, 0.20%)</title><rect x="834.4" y="421" width="2.3" height="15.0" fill="rgb(223,82,9)" rx="2" ry="2" />
<text  x="837.43" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (7 samples, 0.01%)</title><rect x="1037.3" y="213" width="0.1" height="15.0" fill="rgb(253,114,42)" rx="2" ry="2" />
<text  x="1040.27" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (31 samples, 0.06%)</title><rect x="115.3" y="373" width="0.8" height="15.0" fill="rgb(232,98,23)" rx="2" ry="2" />
<text  x="118.35" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (57 samples, 0.12%)</title><rect x="1062.4" y="309" width="1.4" height="15.0" fill="rgb(232,225,30)" rx="2" ry="2" />
<text  x="1065.37" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (104 samples, 0.22%)</title><rect x="850.7" y="373" width="2.6" height="15.0" fill="rgb(244,105,10)" rx="2" ry="2" />
<text  x="853.71" y="383.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (5 samples, 0.01%)</title><rect x="941.1" y="405" width="0.1" height="15.0" fill="rgb(216,201,35)" rx="2" ry="2" />
<text  x="944.09" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (12 samples, 0.03%)</title><rect x="285.5" y="357" width="0.3" height="15.0" fill="rgb(232,135,5)" rx="2" ry="2" />
<text  x="288.48" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (17 samples, 0.04%)</title><rect x="391.1" y="229" width="0.4" height="15.0" fill="rgb(231,14,16)" rx="2" ry="2" />
<text  x="394.05" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%)</title><rect x="69.2" y="389" width="0.1" height="15.0" fill="rgb(254,156,13)" rx="2" ry="2" />
<text  x="72.15" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.01%)</title><rect x="413.9" y="341" width="0.2" height="15.0" fill="rgb(246,179,33)" rx="2" ry="2" />
<text  x="416.93" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (709 samples, 1.48%)</title><rect x="1082.1" y="325" width="17.4" height="15.0" fill="rgb(210,92,20)" rx="2" ry="2" />
<text  x="1085.07" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (18 samples, 0.04%)</title><rect x="262.7" y="309" width="0.4" height="15.0" fill="rgb(228,49,26)" rx="2" ry="2" />
<text  x="265.66" y="319.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (44 samples, 0.09%)</title><rect x="1164.8" y="453" width="1.0" height="15.0" fill="rgb(225,107,29)" rx="2" ry="2" />
<text  x="1167.76" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (53 samples, 0.11%)</title><rect x="959.4" y="389" width="1.3" height="15.0" fill="rgb(232,29,36)" rx="2" ry="2" />
<text  x="962.41" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (92 samples, 0.19%)</title><rect x="227.5" y="181" width="2.3" height="15.0" fill="rgb(239,72,35)" rx="2" ry="2" />
<text  x="230.49" y="191.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (32 samples, 0.07%)</title><rect x="1055.4" y="293" width="0.8" height="15.0" fill="rgb(229,81,39)" rx="2" ry="2" />
<text  x="1058.37" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (9 samples, 0.02%)</title><rect x="235.6" y="261" width="0.2" height="15.0" fill="rgb(222,140,41)" rx="2" ry="2" />
<text  x="238.57" y="271.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%)</title><rect x="559.8" y="277" width="0.7" height="15.0" fill="rgb(237,129,13)" rx="2" ry="2" />
<text  x="562.76" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (5 samples, 0.01%)</title><rect x="825.3" y="325" width="0.1" height="15.0" fill="rgb(222,52,24)" rx="2" ry="2" />
<text  x="828.32" y="335.5" ></text>
</g>
<g >
<title>tracing::add_table_name (29 samples, 0.06%)</title><rect x="1139.1" y="421" width="0.8" height="15.0" fill="rgb(234,2,37)" rx="2" ry="2" />
<text  x="1142.15" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (36 samples, 0.08%)</title><rect x="757.3" y="325" width="0.9" height="15.0" fill="rgb(206,164,51)" rx="2" ry="2" />
<text  x="760.28" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (268 samples, 0.56%)</title><rect x="208.2" y="133" width="6.6" height="15.0" fill="rgb(214,174,42)" rx="2" ry="2" />
<text  x="211.16" y="143.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%)</title><rect x="811.3" y="277" width="0.9" height="15.0" fill="rgb(230,18,39)" rx="2" ry="2" />
<text  x="814.31" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (59 samples, 0.12%)</title><rect x="16.0" y="341" width="1.4" height="15.0" fill="rgb(218,104,51)" rx="2" ry="2" />
<text  x="18.96" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (120 samples, 0.25%)</title><rect x="609.5" y="405" width="2.9" height="15.0" fill="rgb(245,50,28)" rx="2" ry="2" />
<text  x="612.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.01%)</title><rect x="1120.4" y="325" width="0.2" height="15.0" fill="rgb(223,214,34)" rx="2" ry="2" />
<text  x="1123.41" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (6 samples, 0.01%)</title><rect x="1155.8" y="421" width="0.2" height="15.0" fill="rgb(237,196,40)" rx="2" ry="2" />
<text  x="1158.82" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (19 samples, 0.04%)</title><rect x="766.4" y="357" width="0.5" height="15.0" fill="rgb(246,104,28)" rx="2" ry="2" />
<text  x="769.44" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (13 samples, 0.03%)</title><rect x="863.8" y="389" width="0.3" height="15.0" fill="rgb(216,207,1)" rx="2" ry="2" />
<text  x="866.79" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (56 samples, 0.12%)</title><rect x="1160.3" y="453" width="1.4" height="15.0" fill="rgb(243,87,37)" rx="2" ry="2" />
<text  x="1163.28" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (10 samples, 0.02%)</title><rect x="642.2" y="405" width="0.2" height="15.0" fill="rgb(218,24,42)" rx="2" ry="2" />
<text  x="645.16" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (28 samples, 0.06%)</title><rect x="1029.8" y="181" width="0.7" height="15.0" fill="rgb(216,118,49)" rx="2" ry="2" />
<text  x="1032.81" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (9 samples, 0.02%)</title><rect x="1081.0" y="325" width="0.2" height="15.0" fill="rgb(218,224,19)" rx="2" ry="2" />
<text  x="1084.01" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (34 samples, 0.07%)</title><rect x="517.6" y="341" width="0.8" height="15.0" fill="rgb(209,91,14)" rx="2" ry="2" />
<text  x="520.55" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="869.1" y="437" width="0.1" height="15.0" fill="rgb(254,10,49)" rx="2" ry="2" />
<text  x="872.06" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (9 samples, 0.02%)</title><rect x="740.1" y="277" width="0.3" height="15.0" fill="rgb(227,190,35)" rx="2" ry="2" />
<text  x="743.14" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (85 samples, 0.18%)</title><rect x="411.5" y="277" width="2.1" height="15.0" fill="rgb(224,105,25)" rx="2" ry="2" />
<text  x="414.47" y="287.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (8 samples, 0.02%)</title><rect x="415.4" y="341" width="0.2" height="15.0" fill="rgb(233,219,4)" rx="2" ry="2" />
<text  x="418.43" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.02%)</title><rect x="1069.8" y="325" width="0.2" height="15.0" fill="rgb(222,1,6)" rx="2" ry="2" />
<text  x="1072.78" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (15 samples, 0.03%)</title><rect x="701.8" y="453" width="0.4" height="15.0" fill="rgb(232,42,20)" rx="2" ry="2" />
<text  x="704.83" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%)</title><rect x="965.5" y="389" width="0.1" height="15.0" fill="rgb(244,223,18)" rx="2" ry="2" />
<text  x="968.47" y="399.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%)</title><rect x="907.3" y="293" width="0.5" height="15.0" fill="rgb(214,48,23)" rx="2" ry="2" />
<text  x="910.33" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="921.5" y="325" width="0.2" height="15.0" fill="rgb(236,50,41)" rx="2" ry="2" />
<text  x="924.51" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (89 samples, 0.19%)</title><rect x="845.6" y="389" width="2.2" height="15.0" fill="rgb(221,53,52)" rx="2" ry="2" />
<text  x="848.59" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%)</title><rect x="1073.3" y="309" width="1.6" height="15.0" fill="rgb(205,164,35)" rx="2" ry="2" />
<text  x="1076.35" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (19 samples, 0.04%)</title><rect x="891.6" y="309" width="0.5" height="15.0" fill="rgb(236,208,15)" rx="2" ry="2" />
<text  x="894.64" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="837.3" y="437" width="0.1" height="15.0" fill="rgb(229,114,44)" rx="2" ry="2" />
<text  x="840.27" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="1074.9" y="325" width="0.1" height="15.0" fill="rgb(219,89,51)" rx="2" ry="2" />
<text  x="1077.93" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="528.3" y="229" width="0.2" height="15.0" fill="rgb(242,45,54)" rx="2" ry="2" />
<text  x="531.32" y="239.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.10%)</title><rect x="437.1" y="245" width="1.2" height="15.0" fill="rgb(250,75,38)" rx="2" ry="2" />
<text  x="440.08" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%)</title><rect x="171.7" y="149" width="0.4" height="15.0" fill="rgb(230,29,13)" rx="2" ry="2" />
<text  x="174.67" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (378 samples, 0.79%)</title><rect x="555.6" y="309" width="9.3" height="15.0" fill="rgb(246,134,20)" rx="2" ry="2" />
<text  x="558.63" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%)</title><rect x="671.1" y="485" width="0.2" height="15.0" fill="rgb(218,6,36)" rx="2" ry="2" />
<text  x="674.12" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%)</title><rect x="1124.2" y="405" width="0.2" height="15.0" fill="rgb(237,71,44)" rx="2" ry="2" />
<text  x="1127.23" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (12 samples, 0.03%)</title><rect x="708.4" y="501" width="0.3" height="15.0" fill="rgb(235,202,40)" rx="2" ry="2" />
<text  x="711.43" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (37 samples, 0.08%)</title><rect x="271.5" y="357" width="0.9" height="15.0" fill="rgb(223,159,44)" rx="2" ry="2" />
<text  x="274.52" y="367.5" ></text>
</g>
<g >
<title>operator delete (114 samples, 0.24%)</title><rect x="94.8" y="437" width="2.8" height="15.0" fill="rgb(211,116,20)" rx="2" ry="2" />
<text  x="97.76" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%)</title><rect x="46.2" y="485" width="0.3" height="15.0" fill="rgb(234,62,47)" rx="2" ry="2" />
<text  x="49.20" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (45 samples, 0.09%)</title><rect x="1025.0" y="213" width="1.1" height="15.0" fill="rgb(222,193,36)" rx="2" ry="2" />
<text  x="1028.03" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (36 samples, 0.08%)</title><rect x="447.1" y="261" width="0.9" height="15.0" fill="rgb(253,200,34)" rx="2" ry="2" />
<text  x="450.10" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (37 samples, 0.08%)</title><rect x="1078.5" y="293" width="0.9" height="15.0" fill="rgb(248,130,25)" rx="2" ry="2" />
<text  x="1081.47" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (13 samples, 0.03%)</title><rect x="809.6" y="261" width="0.3" height="15.0" fill="rgb(210,125,40)" rx="2" ry="2" />
<text  x="812.56" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (45 samples, 0.09%)</title><rect x="240.9" y="165" width="1.1" height="15.0" fill="rgb(242,45,25)" rx="2" ry="2" />
<text  x="243.89" y="175.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (22 samples, 0.05%)</title><rect x="804.1" y="101" width="0.5" height="15.0" fill="rgb(233,1,23)" rx="2" ry="2" />
<text  x="807.07" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (27 samples, 0.06%)</title><rect x="448.0" y="261" width="0.7" height="15.0" fill="rgb(250,106,43)" rx="2" ry="2" />
<text  x="450.99" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (8 samples, 0.02%)</title><rect x="863.8" y="341" width="0.2" height="15.0" fill="rgb(253,160,25)" rx="2" ry="2" />
<text  x="866.81" y="351.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (6 samples, 0.01%)</title><rect x="549.8" y="341" width="0.1" height="15.0" fill="rgb(226,21,34)" rx="2" ry="2" />
<text  x="552.76" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (71 samples, 0.15%)</title><rect x="252.5" y="213" width="1.7" height="15.0" fill="rgb(226,189,12)" rx="2" ry="2" />
<text  x="255.46" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (5 samples, 0.01%)</title><rect x="855.6" y="469" width="0.2" height="15.0" fill="rgb(233,143,41)" rx="2" ry="2" />
<text  x="858.64" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%)</title><rect x="813.1" y="309" width="0.1" height="15.0" fill="rgb(215,69,3)" rx="2" ry="2" />
<text  x="816.11" y="319.5" ></text>
</g>
<g >
<title>std::type_info::operator== (9 samples, 0.02%)</title><rect x="1174.8" y="405" width="0.3" height="15.0" fill="rgb(222,171,2)" rx="2" ry="2" />
<text  x="1177.83" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (13 samples, 0.03%)</title><rect x="50.1" y="485" width="0.4" height="15.0" fill="rgb(242,197,0)" rx="2" ry="2" />
<text  x="53.14" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (21 samples, 0.04%)</title><rect x="32.6" y="485" width="0.5" height="15.0" fill="rgb(209,16,52)" rx="2" ry="2" />
<text  x="35.56" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%)</title><rect x="574.9" y="325" width="0.3" height="15.0" fill="rgb(240,114,37)" rx="2" ry="2" />
<text  x="577.86" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (6 samples, 0.01%)</title><rect x="771.5" y="357" width="0.1" height="15.0" fill="rgb(244,147,30)" rx="2" ry="2" />
<text  x="774.47" y="367.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%)</title><rect x="842.4" y="421" width="0.9" height="15.0" fill="rgb(233,164,0)" rx="2" ry="2" />
<text  x="845.36" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (15 samples, 0.03%)</title><rect x="330.0" y="181" width="0.4" height="15.0" fill="rgb(219,170,24)" rx="2" ry="2" />
<text  x="333.03" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (27 samples, 0.06%)</title><rect x="356.1" y="149" width="0.6" height="15.0" fill="rgb(244,85,14)" rx="2" ry="2" />
<text  x="359.06" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.03%)</title><rect x="1107.1" y="357" width="0.3" height="15.0" fill="rgb(232,122,9)" rx="2" ry="2" />
<text  x="1110.14" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (8 samples, 0.02%)</title><rect x="982.5" y="357" width="0.2" height="15.0" fill="rgb(242,138,39)" rx="2" ry="2" />
<text  x="985.48" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (25 samples, 0.05%)</title><rect x="220.8" y="149" width="0.6" height="15.0" fill="rgb(242,2,14)" rx="2" ry="2" />
<text  x="223.79" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (7 samples, 0.01%)</title><rect x="932.5" y="341" width="0.2" height="15.0" fill="rgb(231,75,0)" rx="2" ry="2" />
<text  x="935.49" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (42 samples, 0.09%)</title><rect x="662.1" y="485" width="1.0" height="15.0" fill="rgb(210,103,19)" rx="2" ry="2" />
<text  x="665.06" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (5 samples, 0.01%)</title><rect x="862.9" y="389" width="0.1" height="15.0" fill="rgb(216,43,28)" rx="2" ry="2" />
<text  x="865.88" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (202 samples, 0.42%)</title><rect x="1170.8" y="485" width="5.0" height="15.0" fill="rgb(237,19,14)" rx="2" ry="2" />
<text  x="1173.84" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.01%)</title><rect x="18.2" y="325" width="0.1" height="15.0" fill="rgb(236,204,13)" rx="2" ry="2" />
<text  x="21.15" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="1109.1" y="373" width="0.1" height="15.0" fill="rgb(244,90,53)" rx="2" ry="2" />
<text  x="1112.08" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%)</title><rect x="296.6" y="261" width="0.1" height="15.0" fill="rgb(231,133,3)" rx="2" ry="2" />
<text  x="299.59" y="271.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (31 samples, 0.06%)</title><rect x="741.3" y="309" width="0.7" height="15.0" fill="rgb(249,133,38)" rx="2" ry="2" />
<text  x="744.28" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (53 samples, 0.11%)</title><rect x="525.2" y="309" width="1.3" height="15.0" fill="rgb(213,59,26)" rx="2" ry="2" />
<text  x="528.16" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (156 samples, 0.33%)</title><rect x="226.1" y="197" width="3.9" height="15.0" fill="rgb(252,56,25)" rx="2" ry="2" />
<text  x="229.11" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (24 samples, 0.05%)</title><rect x="960.0" y="357" width="0.6" height="15.0" fill="rgb(214,4,24)" rx="2" ry="2" />
<text  x="963.02" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (8 samples, 0.02%)</title><rect x="688.4" y="437" width="0.2" height="15.0" fill="rgb(251,188,33)" rx="2" ry="2" />
<text  x="691.43" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume (7 samples, 0.01%)</title><rect x="160.5" y="197" width="0.2" height="15.0" fill="rgb(245,189,34)" rx="2" ry="2" />
<text  x="163.54" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (6 samples, 0.01%)</title><rect x="679.7" y="261" width="0.1" height="15.0" fill="rgb(246,11,51)" rx="2" ry="2" />
<text  x="682.66" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (61 samples, 0.13%)</title><rect x="753.8" y="341" width="1.5" height="15.0" fill="rgb(252,85,38)" rx="2" ry="2" />
<text  x="756.81" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (118 samples, 0.25%)</title><rect x="61.0" y="453" width="2.9" height="15.0" fill="rgb(229,42,38)" rx="2" ry="2" />
<text  x="63.97" y="463.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (7 samples, 0.01%)</title><rect x="958.2" y="405" width="0.1" height="15.0" fill="rgb(243,224,1)" rx="2" ry="2" />
<text  x="961.15" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%)</title><rect x="250.9" y="245" width="0.1" height="15.0" fill="rgb(253,211,2)" rx="2" ry="2" />
<text  x="253.86" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (42 samples, 0.09%)</title><rect x="617.1" y="405" width="1.0" height="15.0" fill="rgb(212,211,32)" rx="2" ry="2" />
<text  x="620.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (99 samples, 0.21%)</title><rect x="655.1" y="453" width="2.4" height="15.0" fill="rgb(219,90,13)" rx="2" ry="2" />
<text  x="658.11" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (25 samples, 0.05%)</title><rect x="737.4" y="373" width="0.7" height="15.0" fill="rgb(224,143,29)" rx="2" ry="2" />
<text  x="740.43" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (18 samples, 0.04%)</title><rect x="1037.6" y="213" width="0.4" height="15.0" fill="rgb(231,147,0)" rx="2" ry="2" />
<text  x="1040.59" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (27 samples, 0.06%)</title><rect x="997.3" y="277" width="0.6" height="15.0" fill="rgb(240,98,21)" rx="2" ry="2" />
<text  x="1000.28" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (10 samples, 0.02%)</title><rect x="720.1" y="389" width="0.2" height="15.0" fill="rgb(217,179,23)" rx="2" ry="2" />
<text  x="723.07" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%)</title><rect x="821.9" y="357" width="0.1" height="15.0" fill="rgb(239,99,48)" rx="2" ry="2" />
<text  x="824.87" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (29 samples, 0.06%)</title><rect x="172.6" y="133" width="0.7" height="15.0" fill="rgb(221,44,35)" rx="2" ry="2" />
<text  x="175.63" y="143.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (201 samples, 0.42%)</title><rect x="1030.8" y="197" width="5.0" height="15.0" fill="rgb(237,179,52)" rx="2" ry="2" />
<text  x="1033.85" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (25 samples, 0.05%)</title><rect x="641.8" y="421" width="0.6" height="15.0" fill="rgb(219,196,7)" rx="2" ry="2" />
<text  x="644.79" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.02%)</title><rect x="690.2" y="469" width="0.2" height="15.0" fill="rgb(247,126,31)" rx="2" ry="2" />
<text  x="693.20" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (13 samples, 0.03%)</title><rect x="320.0" y="197" width="0.3" height="15.0" fill="rgb(251,113,26)" rx="2" ry="2" />
<text  x="322.96" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (26 samples, 0.05%)</title><rect x="935.9" y="325" width="0.7" height="15.0" fill="rgb(251,108,6)" rx="2" ry="2" />
<text  x="938.94" y="335.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (58 samples, 0.12%)</title><rect x="230.1" y="229" width="1.4" height="15.0" fill="rgb(211,31,27)" rx="2" ry="2" />
<text  x="233.10" y="239.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="946.0" y="389" width="0.1" height="15.0" fill="rgb(247,74,37)" rx="2" ry="2" />
<text  x="948.99" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (62 samples, 0.13%)</title><rect x="295.2" y="277" width="1.5" height="15.0" fill="rgb(220,97,42)" rx="2" ry="2" />
<text  x="298.21" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="646.5" y="437" width="0.4" height="15.0" fill="rgb(239,20,36)" rx="2" ry="2" />
<text  x="649.47" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%)</title><rect x="557.5" y="293" width="0.1" height="15.0" fill="rgb(235,79,15)" rx="2" ry="2" />
<text  x="560.47" y="303.5" ></text>
</g>
<g >
<title>database::query (157 samples, 0.33%)</title><rect x="43.2" y="501" width="3.9" height="15.0" fill="rgb(224,23,40)" rx="2" ry="2" />
<text  x="46.24" y="511.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%)</title><rect x="35.2" y="469" width="1.1" height="15.0" fill="rgb(245,128,44)" rx="2" ry="2" />
<text  x="38.22" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (6 samples, 0.01%)</title><rect x="22.3" y="597" width="0.1" height="15.0" fill="rgb(252,81,34)" rx="2" ry="2" />
<text  x="25.29" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (28 samples, 0.06%)</title><rect x="563.2" y="293" width="0.7" height="15.0" fill="rgb(231,82,45)" rx="2" ry="2" />
<text  x="566.19" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (192 samples, 0.40%)</title><rect x="15.9" y="421" width="4.7" height="15.0" fill="rgb(221,194,39)" rx="2" ry="2" />
<text  x="18.91" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (13 samples, 0.03%)</title><rect x="1053.1" y="277" width="0.4" height="15.0" fill="rgb(229,181,24)" rx="2" ry="2" />
<text  x="1056.13" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (35 samples, 0.07%)</title><rect x="679.3" y="485" width="0.8" height="15.0" fill="rgb(213,162,47)" rx="2" ry="2" />
<text  x="682.27" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (179 samples, 0.37%)</title><rect x="243.0" y="213" width="4.4" height="15.0" fill="rgb(237,51,36)" rx="2" ry="2" />
<text  x="246.01" y="223.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (131 samples, 0.27%)</title><rect x="995.0" y="293" width="3.2" height="15.0" fill="rgb(213,74,43)" rx="2" ry="2" />
<text  x="997.99" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.01%)</title><rect x="627.1" y="485" width="0.1" height="15.0" fill="rgb(242,112,40)" rx="2" ry="2" />
<text  x="630.06" y="495.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%)</title><rect x="532.4" y="325" width="0.5" height="15.0" fill="rgb(248,128,24)" rx="2" ry="2" />
<text  x="535.40" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%)</title><rect x="407.2" y="229" width="0.4" height="15.0" fill="rgb(211,128,46)" rx="2" ry="2" />
<text  x="410.18" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (8 samples, 0.02%)</title><rect x="1149.0" y="485" width="0.2" height="15.0" fill="rgb(249,88,23)" rx="2" ry="2" />
<text  x="1152.00" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (34 samples, 0.07%)</title><rect x="799.5" y="117" width="0.9" height="15.0" fill="rgb(214,228,40)" rx="2" ry="2" />
<text  x="802.52" y="127.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (332 samples, 0.69%)</title><rect x="433.1" y="309" width="8.2" height="15.0" fill="rgb(206,193,4)" rx="2" ry="2" />
<text  x="436.14" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%)</title><rect x="97.2" y="421" width="0.4" height="15.0" fill="rgb(251,26,1)" rx="2" ry="2" />
<text  x="100.22" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%)</title><rect x="929.5" y="389" width="0.2" height="15.0" fill="rgb(239,40,20)" rx="2" ry="2" />
<text  x="932.49" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (21 samples, 0.04%)</title><rect x="1123.5" y="389" width="0.5" height="15.0" fill="rgb(220,127,22)" rx="2" ry="2" />
<text  x="1126.49" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (8 samples, 0.02%)</title><rect x="1044.6" y="261" width="0.2" height="15.0" fill="rgb(234,189,7)" rx="2" ry="2" />
<text  x="1047.59" y="271.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (24 samples, 0.05%)</title><rect x="200.4" y="101" width="0.6" height="15.0" fill="rgb(215,218,15)" rx="2" ry="2" />
<text  x="203.40" y="111.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (33 samples, 0.07%)</title><rect x="66.6" y="405" width="0.9" height="15.0" fill="rgb(249,141,48)" rx="2" ry="2" />
<text  x="69.64" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="618.3" y="373" width="0.4" height="15.0" fill="rgb(225,94,7)" rx="2" ry="2" />
<text  x="621.27" y="383.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (5 samples, 0.01%)</title><rect x="818.6" y="309" width="0.1" height="15.0" fill="rgb(237,129,19)" rx="2" ry="2" />
<text  x="821.55" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (113 samples, 0.24%)</title><rect x="243.4" y="197" width="2.8" height="15.0" fill="rgb(242,97,15)" rx="2" ry="2" />
<text  x="246.42" y="207.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%)</title><rect x="856.2" y="437" width="0.8" height="15.0" fill="rgb(250,102,45)" rx="2" ry="2" />
<text  x="859.20" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (6 samples, 0.01%)</title><rect x="625.8" y="485" width="0.2" height="15.0" fill="rgb(243,131,37)" rx="2" ry="2" />
<text  x="628.83" y="495.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%)</title><rect x="679.4" y="373" width="0.6" height="15.0" fill="rgb(211,31,4)" rx="2" ry="2" />
<text  x="682.37" y="383.5" ></text>
</g>
<g >
<title>__start_context (6 samples, 0.01%)</title><rect x="22.3" y="581" width="0.1" height="15.0" fill="rgb(208,24,18)" rx="2" ry="2" />
<text  x="25.29" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (74 samples, 0.15%)</title><rect x="40.2" y="469" width="1.9" height="15.0" fill="rgb(248,69,20)" rx="2" ry="2" />
<text  x="43.24" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (7 samples, 0.01%)</title><rect x="911.9" y="357" width="0.2" height="15.0" fill="rgb(207,225,18)" rx="2" ry="2" />
<text  x="914.88" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (17 samples, 0.04%)</title><rect x="217.1" y="149" width="0.4" height="15.0" fill="rgb(240,15,48)" rx="2" ry="2" />
<text  x="220.12" y="159.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%)</title><rect x="862.7" y="421" width="0.3" height="15.0" fill="rgb(239,159,40)" rx="2" ry="2" />
<text  x="865.65" y="431.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (154 samples, 0.32%)</title><rect x="994.4" y="309" width="3.8" height="15.0" fill="rgb(227,119,29)" rx="2" ry="2" />
<text  x="997.43" y="319.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%)</title><rect x="611.0" y="373" width="0.9" height="15.0" fill="rgb(230,131,11)" rx="2" ry="2" />
<text  x="613.98" y="383.5" ></text>
</g>
<g >
<title>sstring_hash::operator (13 samples, 0.03%)</title><rect x="847.4" y="357" width="0.3" height="15.0" fill="rgb(238,197,39)" rx="2" ry="2" />
<text  x="850.41" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (7 samples, 0.01%)</title><rect x="10.1" y="581" width="0.2" height="15.0" fill="rgb(207,101,26)" rx="2" ry="2" />
<text  x="13.10" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%)</title><rect x="663.6" y="469" width="0.2" height="15.0" fill="rgb(214,127,29)" rx="2" ry="2" />
<text  x="666.61" y="479.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (8 samples, 0.02%)</title><rect x="936.9" y="389" width="0.1" height="15.0" fill="rgb(209,71,48)" rx="2" ry="2" />
<text  x="939.85" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (7 samples, 0.01%)</title><rect x="601.9" y="421" width="0.2" height="15.0" fill="rgb(248,144,25)" rx="2" ry="2" />
<text  x="604.92" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (118 samples, 0.25%)</title><rect x="182.0" y="101" width="2.9" height="15.0" fill="rgb(236,91,5)" rx="2" ry="2" />
<text  x="185.01" y="111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%)</title><rect x="286.8" y="357" width="0.4" height="15.0" fill="rgb(221,111,10)" rx="2" ry="2" />
<text  x="289.81" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (36 samples, 0.08%)</title><rect x="677.9" y="485" width="0.9" height="15.0" fill="rgb(249,107,4)" rx="2" ry="2" />
<text  x="680.87" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (56 samples, 0.12%)</title><rect x="18.1" y="341" width="1.4" height="15.0" fill="rgb(241,119,23)" rx="2" ry="2" />
<text  x="21.10" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (17 samples, 0.04%)</title><rect x="691.3" y="469" width="0.4" height="15.0" fill="rgb(233,89,34)" rx="2" ry="2" />
<text  x="694.26" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (17 samples, 0.04%)</title><rect x="982.7" y="357" width="0.4" height="15.0" fill="rgb(225,226,29)" rx="2" ry="2" />
<text  x="985.68" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (14 samples, 0.03%)</title><rect x="17.8" y="325" width="0.3" height="15.0" fill="rgb(221,68,17)" rx="2" ry="2" />
<text  x="20.76" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (84 samples, 0.18%)</title><rect x="126.6" y="293" width="2.0" height="15.0" fill="rgb(254,65,50)" rx="2" ry="2" />
<text  x="129.58" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%)</title><rect x="689.2" y="485" width="0.6" height="15.0" fill="rgb(224,82,4)" rx="2" ry="2" />
<text  x="692.19" y="495.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (14 samples, 0.03%)</title><rect x="587.5" y="405" width="0.3" height="15.0" fill="rgb(220,117,4)" rx="2" ry="2" />
<text  x="590.49" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (71 samples, 0.15%)</title><rect x="497.7" y="229" width="1.8" height="15.0" fill="rgb(230,216,33)" rx="2" ry="2" />
<text  x="500.71" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (26 samples, 0.05%)</title><rect x="741.4" y="293" width="0.6" height="15.0" fill="rgb(205,193,30)" rx="2" ry="2" />
<text  x="744.37" y="303.5" ></text>
</g>
<g >
<title>table::query (21,833 samples, 45.56%)</title><rect x="82.3" y="453" width="537.6" height="15.0" fill="rgb(244,221,48)" rx="2" ry="2" />
<text  x="85.25" y="463.5" >table::query</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (5 samples, 0.01%)</title><rect x="235.8" y="261" width="0.1" height="15.0" fill="rgb(248,28,34)" rx="2" ry="2" />
<text  x="238.79" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (104 samples, 0.22%)</title><rect x="934.1" y="357" width="2.6" height="15.0" fill="rgb(218,57,45)" rx="2" ry="2" />
<text  x="937.09" y="367.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (162 samples, 0.34%)</title><rect x="897.0" y="277" width="4.0" height="15.0" fill="rgb(242,3,18)" rx="2" ry="2" />
<text  x="900.01" y="287.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%)</title><rect x="40.3" y="453" width="0.3" height="15.0" fill="rgb(216,73,22)" rx="2" ry="2" />
<text  x="43.29" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.01%)</title><rect x="126.5" y="293" width="0.1" height="15.0" fill="rgb(223,67,0)" rx="2" ry="2" />
<text  x="129.45" y="303.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,817 samples, 3.79%)</title><rect x="771.7" y="357" width="44.8" height="15.0" fill="rgb(222,155,53)" rx="2" ry="2" />
<text  x="774.71" y="367.5" >serv..</text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (52 samples, 0.11%)</title><rect x="734.9" y="309" width="1.3" height="15.0" fill="rgb(220,45,9)" rx="2" ry="2" />
<text  x="737.92" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (5 samples, 0.01%)</title><rect x="21.2" y="357" width="0.1" height="15.0" fill="rgb(213,168,37)" rx="2" ry="2" />
<text  x="24.20" y="367.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (589 samples, 1.23%)</title><rect x="1083.5" y="309" width="14.5" height="15.0" fill="rgb(238,11,37)" rx="2" ry="2" />
<text  x="1086.52" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (12 samples, 0.03%)</title><rect x="860.5" y="501" width="0.3" height="15.0" fill="rgb(242,133,40)" rx="2" ry="2" />
<text  x="863.49" y="511.5" ></text>
</g>
<g >
<title>query::digester::digester (17 samples, 0.04%)</title><rect x="590.5" y="405" width="0.4" height="15.0" fill="rgb(223,163,28)" rx="2" ry="2" />
<text  x="593.49" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (19 samples, 0.04%)</title><rect x="234.8" y="245" width="0.4" height="15.0" fill="rgb(210,166,41)" rx="2" ry="2" />
<text  x="237.78" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (285 samples, 0.59%)</title><rect x="15.1" y="581" width="7.0" height="15.0" fill="rgb(229,111,13)" rx="2" ry="2" />
<text  x="18.12" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (23 samples, 0.05%)</title><rect x="642.5" y="421" width="0.6" height="15.0" fill="rgb(239,130,42)" rx="2" ry="2" />
<text  x="645.53" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (91 samples, 0.19%)</title><rect x="786.0" y="261" width="2.3" height="15.0" fill="rgb(234,13,15)" rx="2" ry="2" />
<text  x="789.04" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (5 samples, 0.01%)</title><rect x="1176.3" y="501" width="0.1" height="15.0" fill="rgb(247,113,26)" rx="2" ry="2" />
<text  x="1179.26" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (25 samples, 0.05%)</title><rect x="1177.9" y="485" width="0.6" height="15.0" fill="rgb(238,139,50)" rx="2" ry="2" />
<text  x="1180.91" y="495.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,533 samples, 9.46%)</title><rect x="421.9" y="405" width="111.6" height="15.0" fill="rgb(235,116,36)" rx="2" ry="2" />
<text  x="424.91" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (34 samples, 0.07%)</title><rect x="20.7" y="437" width="0.8" height="15.0" fill="rgb(231,229,36)" rx="2" ry="2" />
<text  x="23.66" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (5 samples, 0.01%)</title><rect x="903.6" y="325" width="0.1" height="15.0" fill="rgb(236,190,34)" rx="2" ry="2" />
<text  x="906.58" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (105 samples, 0.22%)</title><rect x="411.0" y="293" width="2.6" height="15.0" fill="rgb(248,140,23)" rx="2" ry="2" />
<text  x="413.98" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%)</title><rect x="248.6" y="165" width="0.4" height="15.0" fill="rgb(212,179,27)" rx="2" ry="2" />
<text  x="251.57" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%)</title><rect x="842.5" y="405" width="0.8" height="15.0" fill="rgb(238,205,53)" rx="2" ry="2" />
<text  x="845.46" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (5 samples, 0.01%)</title><rect x="1037.2" y="213" width="0.1" height="15.0" fill="rgb(231,15,41)" rx="2" ry="2" />
<text  x="1040.15" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (11 samples, 0.02%)</title><rect x="737.8" y="357" width="0.3" height="15.0" fill="rgb(254,222,21)" rx="2" ry="2" />
<text  x="740.78" y="367.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%)</title><rect x="411.7" y="261" width="1.0" height="15.0" fill="rgb(207,112,43)" rx="2" ry="2" />
<text  x="414.69" y="271.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,185 samples, 2.47%)</title><rect x="334.3" y="181" width="29.1" height="15.0" fill="rgb(205,161,46)" rx="2" ry="2" />
<text  x="337.27" y="191.5" >wr..</text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (6 samples, 0.01%)</title><rect x="578.5" y="405" width="0.2" height="15.0" fill="rgb(227,5,6)" rx="2" ry="2" />
<text  x="581.53" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (8 samples, 0.02%)</title><rect x="201.0" y="101" width="0.2" height="15.0" fill="rgb(211,182,29)" rx="2" ry="2" />
<text  x="203.99" y="111.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (13 samples, 0.03%)</title><rect x="1032.6" y="149" width="0.3" height="15.0" fill="rgb(252,121,48)" rx="2" ry="2" />
<text  x="1035.59" y="159.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (93 samples, 0.19%)</title><rect x="584.2" y="405" width="2.3" height="15.0" fill="rgb(239,73,4)" rx="2" ry="2" />
<text  x="587.19" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,323 samples, 9.02%)</title><rect x="727.4" y="437" width="106.5" height="15.0" fill="rgb(246,220,41)" rx="2" ry="2" />
<text  x="730.44" y="447.5" >cql3::query_p..</text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (26 samples, 0.05%)</title><rect x="1098.8" y="277" width="0.7" height="15.0" fill="rgb(207,105,0)" rx="2" ry="2" />
<text  x="1101.84" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (9 samples, 0.02%)</title><rect x="435.5" y="261" width="0.2" height="15.0" fill="rgb(229,17,26)" rx="2" ry="2" />
<text  x="438.50" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (11 samples, 0.02%)</title><rect x="41.8" y="453" width="0.3" height="15.0" fill="rgb(212,168,25)" rx="2" ry="2" />
<text  x="44.79" y="463.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,036 samples, 2.16%)</title><rect x="484.6" y="325" width="25.5" height="15.0" fill="rgb(227,16,45)" rx="2" ry="2" />
<text  x="487.63" y="335.5" >m..</text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,490 samples, 9.37%)</title><rect x="144.8" y="293" width="110.6" height="15.0" fill="rgb(223,173,1)" rx="2" ry="2" />
<text  x="147.82" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%)</title><rect x="740.8" y="293" width="0.2" height="15.0" fill="rgb(235,25,33)" rx="2" ry="2" />
<text  x="743.81" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,461 samples, 9.31%)</title><rect x="145.3" y="277" width="109.9" height="15.0" fill="rgb(236,147,1)" rx="2" ry="2" />
<text  x="148.34" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%)</title><rect x="75.4" y="453" width="0.3" height="15.0" fill="rgb(219,137,42)" rx="2" ry="2" />
<text  x="78.43" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (140 samples, 0.29%)</title><rect x="540.8" y="373" width="3.5" height="15.0" fill="rgb(210,98,40)" rx="2" ry="2" />
<text  x="543.85" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (5 samples, 0.01%)</title><rect x="947.6" y="357" width="0.1" height="15.0" fill="rgb(205,127,36)" rx="2" ry="2" />
<text  x="950.56" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (5 samples, 0.01%)</title><rect x="830.4" y="277" width="0.1" height="15.0" fill="rgb(252,25,16)" rx="2" ry="2" />
<text  x="833.42" y="287.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (25 samples, 0.05%)</title><rect x="1141.5" y="405" width="0.6" height="15.0" fill="rgb(246,139,40)" rx="2" ry="2" />
<text  x="1144.51" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (10 samples, 0.02%)</title><rect x="902.2" y="277" width="0.2" height="15.0" fill="rgb(250,70,29)" rx="2" ry="2" />
<text  x="905.18" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (96 samples, 0.20%)</title><rect x="668.8" y="485" width="2.3" height="15.0" fill="rgb(209,51,47)" rx="2" ry="2" />
<text  x="671.75" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (103 samples, 0.21%)</title><rect x="393.6" y="229" width="2.6" height="15.0" fill="rgb(253,43,2)" rx="2" ry="2" />
<text  x="396.64" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (7 samples, 0.01%)</title><rect x="806.1" y="245" width="0.1" height="15.0" fill="rgb(209,47,15)" rx="2" ry="2" />
<text  x="809.07" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.06%)</title><rect x="722.4" y="325" width="0.6" height="15.0" fill="rgb(216,12,4)" rx="2" ry="2" />
<text  x="725.36" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (25 samples, 0.05%)</title><rect x="1047.8" y="277" width="0.6" height="15.0" fill="rgb(219,19,28)" rx="2" ry="2" />
<text  x="1050.79" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (16 samples, 0.03%)</title><rect x="556.8" y="293" width="0.4" height="15.0" fill="rgb(242,211,3)" rx="2" ry="2" />
<text  x="559.78" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (67 samples, 0.14%)</title><rect x="734.7" y="325" width="1.6" height="15.0" fill="rgb(220,50,8)" rx="2" ry="2" />
<text  x="737.65" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%)</title><rect x="606.4" y="389" width="0.2" height="15.0" fill="rgb(219,30,38)" rx="2" ry="2" />
<text  x="609.38" y="399.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (15 samples, 0.03%)</title><rect x="142.5" y="261" width="0.4" height="15.0" fill="rgb(220,129,48)" rx="2" ry="2" />
<text  x="145.48" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (17 samples, 0.04%)</title><rect x="1079.8" y="309" width="0.4" height="15.0" fill="rgb(212,138,20)" rx="2" ry="2" />
<text  x="1082.75" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (14 samples, 0.03%)</title><rect x="19.5" y="357" width="0.4" height="15.0" fill="rgb(240,47,51)" rx="2" ry="2" />
<text  x="22.53" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%)</title><rect x="151.3" y="245" width="0.2" height="15.0" fill="rgb(244,72,31)" rx="2" ry="2" />
<text  x="154.35" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%)</title><rect x="10.1" y="421" width="0.2" height="15.0" fill="rgb(219,64,0)" rx="2" ry="2" />
<text  x="13.10" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%)</title><rect x="995.4" y="277" width="0.1" height="15.0" fill="rgb(219,54,30)" rx="2" ry="2" />
<text  x="998.39" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (12 samples, 0.03%)</title><rect x="46.6" y="485" width="0.3" height="15.0" fill="rgb(254,197,23)" rx="2" ry="2" />
<text  x="49.57" y="495.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.14%)</title><rect x="1040.4" y="213" width="1.6" height="15.0" fill="rgb(252,51,18)" rx="2" ry="2" />
<text  x="1043.40" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (829 samples, 1.73%)</title><rect x="368.9" y="197" width="20.4" height="15.0" fill="rgb(244,163,44)" rx="2" ry="2" />
<text  x="371.92" y="207.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (25 samples, 0.05%)</title><rect x="884.4" y="405" width="0.6" height="15.0" fill="rgb(221,135,3)" rx="2" ry="2" />
<text  x="887.42" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (81 samples, 0.17%)</title><rect x="152.7" y="213" width="1.9" height="15.0" fill="rgb(236,81,18)" rx="2" ry="2" />
<text  x="155.65" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%)</title><rect x="713.1" y="389" width="0.4" height="15.0" fill="rgb(222,59,15)" rx="2" ry="2" />
<text  x="716.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (19 samples, 0.04%)</title><rect x="1151.8" y="453" width="0.4" height="15.0" fill="rgb(205,185,18)" rx="2" ry="2" />
<text  x="1154.78" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (28 samples, 0.06%)</title><rect x="687.4" y="453" width="0.7" height="15.0" fill="rgb(240,65,24)" rx="2" ry="2" />
<text  x="690.40" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (32 samples, 0.07%)</title><rect x="140.4" y="245" width="0.8" height="15.0" fill="rgb(232,44,50)" rx="2" ry="2" />
<text  x="143.39" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (26 samples, 0.05%)</title><rect x="142.9" y="261" width="0.6" height="15.0" fill="rgb(243,143,45)" rx="2" ry="2" />
<text  x="145.85" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%)</title><rect x="529.1" y="245" width="0.5" height="15.0" fill="rgb(216,185,21)" rx="2" ry="2" />
<text  x="532.05" y="255.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (6 samples, 0.01%)</title><rect x="234.1" y="245" width="0.2" height="15.0" fill="rgb(232,117,10)" rx="2" ry="2" />
<text  x="237.14" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (81 samples, 0.17%)</title><rect x="742.3" y="277" width="2.0" height="15.0" fill="rgb(227,152,45)" rx="2" ry="2" />
<text  x="745.33" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (20 samples, 0.04%)</title><rect x="1034.1" y="149" width="0.5" height="15.0" fill="rgb(227,178,17)" rx="2" ry="2" />
<text  x="1037.15" y="159.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (68 samples, 0.14%)</title><rect x="613.8" y="437" width="1.7" height="15.0" fill="rgb(221,93,41)" rx="2" ry="2" />
<text  x="616.81" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%)</title><rect x="329.0" y="165" width="0.1" height="15.0" fill="rgb(254,92,10)" rx="2" ry="2" />
<text  x="331.97" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (15 samples, 0.03%)</title><rect x="554.4" y="277" width="0.4" height="15.0" fill="rgb(253,9,22)" rx="2" ry="2" />
<text  x="557.39" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (12 samples, 0.03%)</title><rect x="1140.1" y="421" width="0.3" height="15.0" fill="rgb(219,73,5)" rx="2" ry="2" />
<text  x="1143.06" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%)</title><rect x="1097.2" y="277" width="0.3" height="15.0" fill="rgb(211,185,49)" rx="2" ry="2" />
<text  x="1100.24" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (12 samples, 0.03%)</title><rect x="815.1" y="277" width="0.3" height="15.0" fill="rgb(252,206,2)" rx="2" ry="2" />
<text  x="818.13" y="287.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="475.8" y="197" width="0.1" height="15.0" fill="rgb(207,56,15)" rx="2" ry="2" />
<text  x="478.76" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (8 samples, 0.02%)</title><rect x="953.8" y="405" width="0.2" height="15.0" fill="rgb(244,113,1)" rx="2" ry="2" />
<text  x="956.84" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (69 samples, 0.14%)</title><rect x="1099.5" y="325" width="1.7" height="15.0" fill="rgb(212,168,16)" rx="2" ry="2" />
<text  x="1102.53" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="634.9" y="469" width="0.1" height="15.0" fill="rgb(226,7,28)" rx="2" ry="2" />
<text  x="637.87" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (6 samples, 0.01%)</title><rect x="577.4" y="373" width="0.1" height="15.0" fill="rgb(240,172,45)" rx="2" ry="2" />
<text  x="580.39" y="383.5" ></text>
</g>
<g >
<title>[unknown] (503 samples, 1.05%)</title><rect x="10.0" y="629" width="12.4" height="15.0" fill="rgb(246,19,49)" rx="2" ry="2" />
<text  x="13.05" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%)</title><rect x="554.8" y="277" width="0.1" height="15.0" fill="rgb(254,25,9)" rx="2" ry="2" />
<text  x="557.76" y="287.5" ></text>
</g>
<g >
<title>database::find_uuid (140 samples, 0.29%)</title><rect x="825.1" y="357" width="3.4" height="15.0" fill="rgb(250,212,3)" rx="2" ry="2" />
<text  x="828.08" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.02%)</title><rect x="647.5" y="437" width="0.2" height="15.0" fill="rgb(235,30,53)" rx="2" ry="2" />
<text  x="650.50" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.01%)</title><rect x="222.3" y="117" width="0.1" height="15.0" fill="rgb(206,76,49)" rx="2" ry="2" />
<text  x="225.27" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (8 samples, 0.02%)</title><rect x="777.8" y="309" width="0.2" height="15.0" fill="rgb(228,128,20)" rx="2" ry="2" />
<text  x="780.77" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (6 samples, 0.01%)</title><rect x="279.2" y="293" width="0.2" height="15.0" fill="rgb(230,68,45)" rx="2" ry="2" />
<text  x="282.23" y="303.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (7 samples, 0.01%)</title><rect x="723.5" y="309" width="0.2" height="15.0" fill="rgb(234,167,25)" rx="2" ry="2" />
<text  x="726.52" y="319.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (9 samples, 0.02%)</title><rect x="245.5" y="165" width="0.2" height="15.0" fill="rgb(237,16,25)" rx="2" ry="2" />
<text  x="248.47" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (32 samples, 0.07%)</title><rect x="947.7" y="357" width="0.8" height="15.0" fill="rgb(233,25,3)" rx="2" ry="2" />
<text  x="950.69" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (154 samples, 0.32%)</title><rect x="608.6" y="421" width="3.8" height="15.0" fill="rgb(207,168,30)" rx="2" ry="2" />
<text  x="611.64" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%)</title><rect x="220.7" y="149" width="0.1" height="15.0" fill="rgb(217,28,35)" rx="2" ry="2" />
<text  x="223.67" y="159.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (6 samples, 0.01%)</title><rect x="1098.7" y="277" width="0.1" height="15.0" fill="rgb(239,77,33)" rx="2" ry="2" />
<text  x="1101.69" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (13 samples, 0.03%)</title><rect x="601.8" y="437" width="0.3" height="15.0" fill="rgb(240,141,32)" rx="2" ry="2" />
<text  x="604.77" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%)</title><rect x="862.8" y="357" width="0.1" height="15.0" fill="rgb(221,120,12)" rx="2" ry="2" />
<text  x="865.75" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (13 samples, 0.03%)</title><rect x="847.4" y="341" width="0.3" height="15.0" fill="rgb(222,59,31)" rx="2" ry="2" />
<text  x="850.41" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%)</title><rect x="1052.7" y="181" width="0.1" height="15.0" fill="rgb(216,106,29)" rx="2" ry="2" />
<text  x="1055.71" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%)</title><rect x="836.6" y="389" width="0.1" height="15.0" fill="rgb(223,133,0)" rx="2" ry="2" />
<text  x="839.60" y="399.5" ></text>
</g>
<g >
<title>operator delete (49 samples, 0.10%)</title><rect x="680.7" y="485" width="1.3" height="15.0" fill="rgb(209,167,53)" rx="2" ry="2" />
<text  x="683.75" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (25 samples, 0.05%)</title><rect x="780.1" y="293" width="0.6" height="15.0" fill="rgb(226,124,4)" rx="2" ry="2" />
<text  x="783.09" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (14 samples, 0.03%)</title><rect x="685.5" y="453" width="0.3" height="15.0" fill="rgb(215,222,53)" rx="2" ry="2" />
<text  x="688.45" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%)</title><rect x="302.1" y="245" width="0.2" height="15.0" fill="rgb(248,148,36)" rx="2" ry="2" />
<text  x="305.13" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (123 samples, 0.26%)</title><rect x="634.1" y="501" width="3.0" height="15.0" fill="rgb(206,162,29)" rx="2" ry="2" />
<text  x="637.06" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (8 samples, 0.02%)</title><rect x="242.0" y="197" width="0.2" height="15.0" fill="rgb(225,182,19)" rx="2" ry="2" />
<text  x="245.05" y="207.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (287 samples, 0.60%)</title><rect x="1084.1" y="261" width="7.1" height="15.0" fill="rgb(224,54,35)" rx="2" ry="2" />
<text  x="1087.14" y="271.5" ></text>
</g>
<g >
<title>schema::get_sharder (22 samples, 0.05%)</title><rect x="1015.8" y="277" width="0.5" height="15.0" fill="rgb(254,23,39)" rx="2" ry="2" />
<text  x="1018.75" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (42 samples, 0.09%)</title><rect x="265.4" y="325" width="1.0" height="15.0" fill="rgb(235,5,33)" rx="2" ry="2" />
<text  x="268.37" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (5 samples, 0.01%)</title><rect x="15.7" y="405" width="0.1" height="15.0" fill="rgb(213,165,8)" rx="2" ry="2" />
<text  x="18.71" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (11 samples, 0.02%)</title><rect x="699.4" y="405" width="0.2" height="15.0" fill="rgb(214,174,49)" rx="2" ry="2" />
<text  x="702.36" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%)</title><rect x="841.5" y="373" width="0.1" height="15.0" fill="rgb(224,106,54)" rx="2" ry="2" />
<text  x="844.45" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (15 samples, 0.03%)</title><rect x="660.3" y="469" width="0.4" height="15.0" fill="rgb(230,206,9)" rx="2" ry="2" />
<text  x="663.31" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%)</title><rect x="620.5" y="469" width="0.3" height="15.0" fill="rgb(223,178,5)" rx="2" ry="2" />
<text  x="623.49" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (38 samples, 0.08%)</title><rect x="304.9" y="213" width="1.0" height="15.0" fill="rgb(219,73,41)" rx="2" ry="2" />
<text  x="307.94" y="223.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (101 samples, 0.21%)</title><rect x="711.7" y="469" width="2.5" height="15.0" fill="rgb(243,112,24)" rx="2" ry="2" />
<text  x="714.73" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.01%)</title><rect x="1146.4" y="501" width="0.1" height="15.0" fill="rgb(250,111,42)" rx="2" ry="2" />
<text  x="1149.36" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.01%)</title><rect x="10.1" y="565" width="0.2" height="15.0" fill="rgb(242,183,0)" rx="2" ry="2" />
<text  x="13.10" y="575.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%)</title><rect x="47.4" y="501" width="0.4" height="15.0" fill="rgb(235,144,44)" rx="2" ry="2" />
<text  x="50.43" y="511.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (5 samples, 0.01%)</title><rect x="699.0" y="421" width="0.1" height="15.0" fill="rgb(248,177,41)" rx="2" ry="2" />
<text  x="701.97" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%)</title><rect x="1080.0" y="293" width="0.2" height="15.0" fill="rgb(227,49,35)" rx="2" ry="2" />
<text  x="1083.00" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%)</title><rect x="1138.1" y="421" width="0.3" height="15.0" fill="rgb(210,59,40)" rx="2" ry="2" />
<text  x="1141.14" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%)</title><rect x="797.8" y="117" width="0.2" height="15.0" fill="rgb(226,182,21)" rx="2" ry="2" />
<text  x="800.82" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%)</title><rect x="778.4" y="309" width="0.1" height="15.0" fill="rgb(206,185,41)" rx="2" ry="2" />
<text  x="781.36" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%)</title><rect x="592.8" y="357" width="0.7" height="15.0" fill="rgb(218,43,35)" rx="2" ry="2" />
<text  x="595.83" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%)</title><rect x="651.0" y="453" width="0.2" height="15.0" fill="rgb(251,77,16)" rx="2" ry="2" />
<text  x="654.02" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%)</title><rect x="216.6" y="133" width="0.3" height="15.0" fill="rgb(205,110,4)" rx="2" ry="2" />
<text  x="219.63" y="143.5" ></text>
</g>
<g >
<title>database::find_keyspace (28 samples, 0.06%)</title><rect x="975.2" y="357" width="0.7" height="15.0" fill="rgb(234,186,10)" rx="2" ry="2" />
<text  x="978.24" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%)</title><rect x="576.7" y="373" width="0.3" height="15.0" fill="rgb(249,96,9)" rx="2" ry="2" />
<text  x="579.73" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (99 samples, 0.21%)</title><rect x="747.7" y="405" width="2.4" height="15.0" fill="rgb(231,40,3)" rx="2" ry="2" />
<text  x="750.65" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (53 samples, 0.11%)</title><rect x="707.0" y="501" width="1.3" height="15.0" fill="rgb(249,170,5)" rx="2" ry="2" />
<text  x="710.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%)</title><rect x="856.2" y="421" width="0.8" height="15.0" fill="rgb(254,225,12)" rx="2" ry="2" />
<text  x="859.23" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (10 samples, 0.02%)</title><rect x="953.5" y="389" width="0.3" height="15.0" fill="rgb(235,146,19)" rx="2" ry="2" />
<text  x="956.55" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (9 samples, 0.02%)</title><rect x="843.4" y="421" width="0.3" height="15.0" fill="rgb(235,211,26)" rx="2" ry="2" />
<text  x="846.45" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (30 samples, 0.06%)</title><rect x="74.5" y="373" width="0.7" height="15.0" fill="rgb(246,152,25)" rx="2" ry="2" />
<text  x="77.47" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (26 samples, 0.05%)</title><rect x="996.0" y="261" width="0.6" height="15.0" fill="rgb(211,127,54)" rx="2" ry="2" />
<text  x="998.95" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18 samples, 0.04%)</title><rect x="741.5" y="277" width="0.4" height="15.0" fill="rgb(239,218,9)" rx="2" ry="2" />
<text  x="744.47" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%)</title><rect x="1110.6" y="389" width="0.2" height="15.0" fill="rgb(252,69,25)" rx="2" ry="2" />
<text  x="1113.58" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (96 samples, 0.20%)</title><rect x="197.7" y="117" width="2.4" height="15.0" fill="rgb(211,92,11)" rx="2" ry="2" />
<text  x="200.69" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%)</title><rect x="124.6" y="293" width="0.1" height="15.0" fill="rgb(209,192,19)" rx="2" ry="2" />
<text  x="127.56" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (10 samples, 0.02%)</title><rect x="16.8" y="261" width="0.2" height="15.0" fill="rgb(245,87,42)" rx="2" ry="2" />
<text  x="19.80" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (90 samples, 0.19%)</title><rect x="1168.5" y="485" width="2.2" height="15.0" fill="rgb(251,158,0)" rx="2" ry="2" />
<text  x="1171.48" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (17 samples, 0.04%)</title><rect x="563.9" y="293" width="0.4" height="15.0" fill="rgb(210,44,33)" rx="2" ry="2" />
<text  x="566.90" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (9 samples, 0.02%)</title><rect x="1121.5" y="389" width="0.2" height="15.0" fill="rgb(232,197,33)" rx="2" ry="2" />
<text  x="1124.49" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.01%)</title><rect x="79.7" y="453" width="0.1" height="15.0" fill="rgb(246,150,21)" rx="2" ry="2" />
<text  x="82.69" y="463.5" ></text>
</g>
<g >
<title>auth::resource::resource (104 samples, 0.22%)</title><rect x="765.3" y="389" width="2.6" height="15.0" fill="rgb(218,126,2)" rx="2" ry="2" />
<text  x="768.31" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (78 samples, 0.16%)</title><rect x="591.9" y="405" width="1.9" height="15.0" fill="rgb(254,213,45)" rx="2" ry="2" />
<text  x="594.87" y="415.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%)</title><rect x="656.8" y="421" width="0.7" height="15.0" fill="rgb(243,100,37)" rx="2" ry="2" />
<text  x="659.84" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (30 samples, 0.06%)</title><rect x="679.3" y="405" width="0.7" height="15.0" fill="rgb(225,155,25)" rx="2" ry="2" />
<text  x="682.29" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="709.0" y="501" width="0.2" height="15.0" fill="rgb(253,132,4)" rx="2" ry="2" />
<text  x="712.02" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (112 samples, 0.23%)</title><rect x="850.5" y="389" width="2.8" height="15.0" fill="rgb(217,228,49)" rx="2" ry="2" />
<text  x="853.51" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%)</title><rect x="809.9" y="277" width="0.2" height="15.0" fill="rgb(225,1,38)" rx="2" ry="2" />
<text  x="812.93" y="287.5" ></text>
</g>
<g >
<title>__tls_init (18 samples, 0.04%)</title><rect x="483.4" y="309" width="0.5" height="15.0" fill="rgb(248,134,50)" rx="2" ry="2" />
<text  x="486.45" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (55 samples, 0.11%)</title><rect x="1066.8" y="277" width="1.4" height="15.0" fill="rgb(222,73,8)" rx="2" ry="2" />
<text  x="1069.80" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (21 samples, 0.04%)</title><rect x="233.0" y="229" width="0.5" height="15.0" fill="rgb(249,171,26)" rx="2" ry="2" />
<text  x="235.96" y="239.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (15 samples, 0.03%)</title><rect x="238.1" y="213" width="0.4" height="15.0" fill="rgb(225,171,46)" rx="2" ry="2" />
<text  x="241.11" y="223.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,956 samples, 97.99%)</title><rect x="22.4" y="565" width="1156.3" height="15.0" fill="rgb(212,38,40)" rx="2" ry="2" />
<text  x="25.44" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (6 samples, 0.01%)</title><rect x="419.1" y="405" width="0.1" height="15.0" fill="rgb(236,114,24)" rx="2" ry="2" />
<text  x="422.05" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (149 samples, 0.31%)</title><rect x="392.5" y="245" width="3.7" height="15.0" fill="rgb(211,118,50)" rx="2" ry="2" />
<text  x="395.51" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (36 samples, 0.08%)</title><rect x="676.2" y="453" width="0.9" height="15.0" fill="rgb(243,60,24)" rx="2" ry="2" />
<text  x="679.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (7 samples, 0.01%)</title><rect x="540.4" y="373" width="0.2" height="15.0" fill="rgb(247,207,24)" rx="2" ry="2" />
<text  x="543.41" y="383.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (9 samples, 0.02%)</title><rect x="815.9" y="341" width="0.2" height="15.0" fill="rgb(251,30,7)" rx="2" ry="2" />
<text  x="818.89" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (21 samples, 0.04%)</title><rect x="633.5" y="485" width="0.5" height="15.0" fill="rgb(223,215,0)" rx="2" ry="2" />
<text  x="636.49" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (11 samples, 0.02%)</title><rect x="997.9" y="277" width="0.3" height="15.0" fill="rgb(237,32,34)" rx="2" ry="2" />
<text  x="1000.95" y="287.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%)</title><rect x="544.9" y="405" width="0.4" height="15.0" fill="rgb(243,162,5)" rx="2" ry="2" />
<text  x="547.91" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2,103 samples, 4.39%)</title><rect x="768.3" y="389" width="51.8" height="15.0" fill="rgb(224,139,37)" rx="2" ry="2" />
<text  x="771.31" y="399.5" >std::..</text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (90 samples, 0.19%)</title><rect x="566.8" y="373" width="2.2" height="15.0" fill="rgb(244,44,20)" rx="2" ry="2" />
<text  x="569.80" y="383.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%)</title><rect x="904.4" y="309" width="0.9" height="15.0" fill="rgb(249,113,14)" rx="2" ry="2" />
<text  x="907.44" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (8 samples, 0.02%)</title><rect x="704.4" y="453" width="0.2" height="15.0" fill="rgb(230,11,28)" rx="2" ry="2" />
<text  x="707.44" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (27 samples, 0.06%)</title><rect x="614.7" y="405" width="0.7" height="15.0" fill="rgb(244,200,47)" rx="2" ry="2" />
<text  x="617.70" y="415.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (95 samples, 0.20%)</title><rect x="775.6" y="325" width="2.4" height="15.0" fill="rgb(212,85,22)" rx="2" ry="2" />
<text  x="778.63" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.04%)</title><rect x="139.9" y="229" width="0.5" height="15.0" fill="rgb(214,222,37)" rx="2" ry="2" />
<text  x="142.87" y="239.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%)</title><rect x="97.6" y="437" width="0.3" height="15.0" fill="rgb(238,35,20)" rx="2" ry="2" />
<text  x="100.57" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (14 samples, 0.03%)</title><rect x="696.4" y="453" width="0.4" height="15.0" fill="rgb(232,41,18)" rx="2" ry="2" />
<text  x="699.41" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%)</title><rect x="751.0" y="373" width="0.3" height="15.0" fill="rgb(220,216,26)" rx="2" ry="2" />
<text  x="753.95" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (5 samples, 0.01%)</title><rect x="396.2" y="245" width="0.1" height="15.0" fill="rgb(245,142,51)" rx="2" ry="2" />
<text  x="399.18" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (28 samples, 0.06%)</title><rect x="1006.3" y="293" width="0.7" height="15.0" fill="rgb(238,90,43)" rx="2" ry="2" />
<text  x="1009.27" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (15 samples, 0.03%)</title><rect x="21.1" y="405" width="0.3" height="15.0" fill="rgb(233,76,22)" rx="2" ry="2" />
<text  x="24.06" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.03%)</title><rect x="836.3" y="373" width="0.3" height="15.0" fill="rgb(249,91,40)" rx="2" ry="2" />
<text  x="839.28" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,732 samples, 9.88%)</title><rect x="293.9" y="309" width="116.6" height="15.0" fill="rgb(225,24,50)" rx="2" ry="2" />
<text  x="296.93" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%)</title><rect x="551.3" y="309" width="0.1" height="15.0" fill="rgb(206,16,6)" rx="2" ry="2" />
<text  x="554.27" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (25 samples, 0.05%)</title><rect x="833.2" y="405" width="0.6" height="15.0" fill="rgb(252,105,47)" rx="2" ry="2" />
<text  x="836.15" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (7 samples, 0.01%)</title><rect x="24.2" y="517" width="0.2" height="15.0" fill="rgb(239,153,12)" rx="2" ry="2" />
<text  x="27.21" y="527.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (7 samples, 0.01%)</title><rect x="670.9" y="437" width="0.2" height="15.0" fill="rgb(233,80,39)" rx="2" ry="2" />
<text  x="673.95" y="447.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%)</title><rect x="608.0" y="421" width="0.6" height="15.0" fill="rgb(241,163,10)" rx="2" ry="2" />
<text  x="611.00" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (11 samples, 0.02%)</title><rect x="1052.9" y="277" width="0.2" height="15.0" fill="rgb(251,185,46)" rx="2" ry="2" />
<text  x="1055.86" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.01%)</title><rect x="17.9" y="149" width="0.1" height="15.0" fill="rgb(219,0,50)" rx="2" ry="2" />
<text  x="20.86" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (35 samples, 0.07%)</title><rect x="1161.7" y="453" width="0.8" height="15.0" fill="rgb(246,190,23)" rx="2" ry="2" />
<text  x="1164.66" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (532 samples, 1.11%)</title><rect x="1111.9" y="421" width="13.1" height="15.0" fill="rgb(223,80,16)" rx="2" ry="2" />
<text  x="1114.94" y="431.5" ></text>
</g>
<g >
<title>row::compact_and_expire (6 samples, 0.01%)</title><rect x="679.7" y="293" width="0.1" height="15.0" fill="rgb(228,24,53)" rx="2" ry="2" />
<text  x="682.66" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (39 samples, 0.08%)</title><rect x="899.9" y="245" width="1.0" height="15.0" fill="rgb(214,47,15)" rx="2" ry="2" />
<text  x="902.94" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (6 samples, 0.01%)</title><rect x="17.8" y="213" width="0.2" height="15.0" fill="rgb(251,229,53)" rx="2" ry="2" />
<text  x="20.83" y="223.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%)</title><rect x="792.8" y="165" width="0.2" height="15.0" fill="rgb(237,43,28)" rx="2" ry="2" />
<text  x="795.84" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (9 samples, 0.02%)</title><rect x="20.7" y="405" width="0.2" height="15.0" fill="rgb(237,184,32)" rx="2" ry="2" />
<text  x="23.71" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (40 samples, 0.08%)</title><rect x="686.4" y="453" width="1.0" height="15.0" fill="rgb(209,27,24)" rx="2" ry="2" />
<text  x="689.41" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (126 samples, 0.26%)</title><rect x="1118.2" y="389" width="3.1" height="15.0" fill="rgb(206,51,30)" rx="2" ry="2" />
<text  x="1121.22" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%)</title><rect x="976.4" y="341" width="2.0" height="15.0" fill="rgb(254,221,2)" rx="2" ry="2" />
<text  x="979.40" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (10 samples, 0.02%)</title><rect x="442.3" y="293" width="0.2" height="15.0" fill="rgb(249,168,38)" rx="2" ry="2" />
<text  x="445.27" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="36.1" y="453" width="0.2" height="15.0" fill="rgb(219,140,49)" rx="2" ry="2" />
<text  x="39.13" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (58 samples, 0.12%)</title><rect x="127.1" y="277" width="1.4" height="15.0" fill="rgb(248,41,47)" rx="2" ry="2" />
<text  x="130.12" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (271 samples, 0.57%)</title><rect x="848.4" y="453" width="6.7" height="15.0" fill="rgb(209,228,45)" rx="2" ry="2" />
<text  x="851.40" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%)</title><rect x="989.8" y="277" width="0.2" height="15.0" fill="rgb(221,223,36)" rx="2" ry="2" />
<text  x="992.84" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::close (11 samples, 0.02%)</title><rect x="1176.6" y="485" width="0.3" height="15.0" fill="rgb(215,75,0)" rx="2" ry="2" />
<text  x="1179.58" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%)</title><rect x="682.4" y="469" width="0.2" height="15.0" fill="rgb(242,92,21)" rx="2" ry="2" />
<text  x="685.45" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (14 samples, 0.03%)</title><rect x="320.5" y="197" width="0.3" height="15.0" fill="rgb(205,75,20)" rx="2" ry="2" />
<text  x="323.48" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (51 samples, 0.11%)</title><rect x="505.2" y="229" width="1.2" height="15.0" fill="rgb(231,49,0)" rx="2" ry="2" />
<text  x="508.17" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (19 samples, 0.04%)</title><rect x="989.5" y="293" width="0.5" height="15.0" fill="rgb(228,177,52)" rx="2" ry="2" />
<text  x="992.55" y="303.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (12 samples, 0.03%)</title><rect x="982.2" y="357" width="0.3" height="15.0" fill="rgb(250,5,9)" rx="2" ry="2" />
<text  x="985.19" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (78 samples, 0.16%)</title><rect x="702.5" y="437" width="1.9" height="15.0" fill="rgb(226,191,52)" rx="2" ry="2" />
<text  x="705.49" y="447.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,262 samples, 10.98%)</title><rect x="289.3" y="389" width="129.6" height="15.0" fill="rgb(245,116,5)" rx="2" ry="2" />
<text  x="292.28" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>service::abstract_read_executor::execute (209 samples, 0.44%)</title><rect x="683.7" y="469" width="5.1" height="15.0" fill="rgb(249,224,12)" rx="2" ry="2" />
<text  x="686.65" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (57 samples, 0.12%)</title><rect x="384.7" y="133" width="1.4" height="15.0" fill="rgb(240,10,9)" rx="2" ry="2" />
<text  x="387.72" y="143.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (5 samples, 0.01%)</title><rect x="805.7" y="261" width="0.1" height="15.0" fill="rgb(211,47,31)" rx="2" ry="2" />
<text  x="808.67" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (5 samples, 0.01%)</title><rect x="1038.8" y="229" width="0.1" height="15.0" fill="rgb(243,30,46)" rx="2" ry="2" />
<text  x="1041.78" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (107 samples, 0.22%)</title><rect x="1130.7" y="405" width="2.6" height="15.0" fill="rgb(234,123,41)" rx="2" ry="2" />
<text  x="1133.70" y="415.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%)</title><rect x="1156.4" y="437" width="0.5" height="15.0" fill="rgb(241,220,53)" rx="2" ry="2" />
<text  x="1159.39" y="447.5" ></text>
</g>
<g >
<title>row::~row (5 samples, 0.01%)</title><rect x="254.4" y="213" width="0.1" height="15.0" fill="rgb(235,152,52)" rx="2" ry="2" />
<text  x="257.41" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%)</title><rect x="535.8" y="389" width="0.2" height="15.0" fill="rgb(216,65,27)" rx="2" ry="2" />
<text  x="538.83" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%)</title><rect x="502.2" y="165" width="0.2" height="15.0" fill="rgb(242,180,50)" rx="2" ry="2" />
<text  x="505.19" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="689.9" y="485" width="0.1" height="15.0" fill="rgb(253,37,52)" rx="2" ry="2" />
<text  x="692.86" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (6 samples, 0.01%)</title><rect x="316.9" y="181" width="0.2" height="15.0" fill="rgb(232,103,39)" rx="2" ry="2" />
<text  x="319.91" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (79 samples, 0.16%)</title><rect x="791.2" y="213" width="1.9" height="15.0" fill="rgb(221,7,39)" rx="2" ry="2" />
<text  x="794.19" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (6 samples, 0.01%)</title><rect x="638.0" y="485" width="0.1" height="15.0" fill="rgb(248,89,52)" rx="2" ry="2" />
<text  x="641.00" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (5 samples, 0.01%)</title><rect x="705.7" y="501" width="0.1" height="15.0" fill="rgb(230,86,31)" rx="2" ry="2" />
<text  x="708.72" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%)</title><rect x="18.7" y="261" width="0.1" height="15.0" fill="rgb(230,30,2)" rx="2" ry="2" />
<text  x="21.69" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (19 samples, 0.04%)</title><rect x="812.3" y="277" width="0.5" height="15.0" fill="rgb(226,53,50)" rx="2" ry="2" />
<text  x="815.32" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (9 samples, 0.02%)</title><rect x="262.4" y="293" width="0.2" height="15.0" fill="rgb(205,109,26)" rx="2" ry="2" />
<text  x="265.41" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (7 samples, 0.01%)</title><rect x="901.9" y="261" width="0.1" height="15.0" fill="rgb(248,203,16)" rx="2" ry="2" />
<text  x="904.86" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.01%)</title><rect x="223.2" y="133" width="0.1" height="15.0" fill="rgb(211,132,11)" rx="2" ry="2" />
<text  x="226.16" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%)</title><rect x="422.9" y="373" width="0.2" height="15.0" fill="rgb(214,140,3)" rx="2" ry="2" />
<text  x="425.92" y="383.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (7 samples, 0.01%)</title><rect x="1071.5" y="341" width="0.1" height="15.0" fill="rgb(229,93,50)" rx="2" ry="2" />
<text  x="1074.45" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (19 samples, 0.04%)</title><rect x="806.7" y="213" width="0.4" height="15.0" fill="rgb(237,96,52)" rx="2" ry="2" />
<text  x="809.66" y="223.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%)</title><rect x="555.1" y="277" width="0.4" height="15.0" fill="rgb(206,64,24)" rx="2" ry="2" />
<text  x="558.11" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="389" width="0.6" height="15.0" fill="rgb(220,17,19)" rx="2" ry="2" />
<text  x="1144.51" y="399.5" ></text>
</g>
<g >
<title>operator new (130 samples, 0.27%)</title><rect x="1022.9" y="245" width="3.2" height="15.0" fill="rgb(220,199,27)" rx="2" ry="2" />
<text  x="1025.94" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (15 samples, 0.03%)</title><rect x="832.7" y="421" width="0.3" height="15.0" fill="rgb(249,162,3)" rx="2" ry="2" />
<text  x="835.66" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.04%)</title><rect x="202.2" y="117" width="0.5" height="15.0" fill="rgb(212,166,51)" rx="2" ry="2" />
<text  x="205.20" y="127.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (5 samples, 0.01%)</title><rect x="232.4" y="229" width="0.1" height="15.0" fill="rgb(244,82,1)" rx="2" ry="2" />
<text  x="235.39" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (6 samples, 0.01%)</title><rect x="970.4" y="373" width="0.2" height="15.0" fill="rgb(226,214,22)" rx="2" ry="2" />
<text  x="973.42" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (15 samples, 0.03%)</title><rect x="1061.9" y="325" width="0.4" height="15.0" fill="rgb(212,164,13)" rx="2" ry="2" />
<text  x="1064.92" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (20 samples, 0.04%)</title><rect x="393.1" y="229" width="0.5" height="15.0" fill="rgb(254,162,14)" rx="2" ry="2" />
<text  x="396.15" y="239.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1,008 samples, 2.10%)</title><rect x="785.1" y="277" width="24.8" height="15.0" fill="rgb(217,23,22)" rx="2" ry="2" />
<text  x="788.06" y="287.5" >a..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (27 samples, 0.06%)</title><rect x="806.5" y="229" width="0.6" height="15.0" fill="rgb(208,182,19)" rx="2" ry="2" />
<text  x="809.46" y="239.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (12 samples, 0.03%)</title><rect x="222.4" y="117" width="0.3" height="15.0" fill="rgb(238,8,29)" rx="2" ry="2" />
<text  x="225.42" y="127.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (285 samples, 0.59%)</title><rect x="15.1" y="597" width="7.0" height="15.0" fill="rgb(208,86,47)" rx="2" ry="2" />
<text  x="18.12" y="607.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (8 samples, 0.02%)</title><rect x="389.9" y="181" width="0.2" height="15.0" fill="rgb(253,108,27)" rx="2" ry="2" />
<text  x="392.90" y="191.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%)</title><rect x="145.7" y="261" width="0.2" height="15.0" fill="rgb(221,175,33)" rx="2" ry="2" />
<text  x="148.74" y="271.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.04%)</title><rect x="1141.5" y="293" width="0.6" height="15.0" fill="rgb(232,84,1)" rx="2" ry="2" />
<text  x="1144.54" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (21 samples, 0.04%)</title><rect x="141.2" y="261" width="0.5" height="15.0" fill="rgb(229,115,0)" rx="2" ry="2" />
<text  x="144.18" y="271.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%)</title><rect x="47.3" y="501" width="0.1" height="15.0" fill="rgb(222,218,47)" rx="2" ry="2" />
<text  x="50.31" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (46 samples, 0.10%)</title><rect x="664.8" y="453" width="1.2" height="15.0" fill="rgb(226,217,22)" rx="2" ry="2" />
<text  x="667.84" y="463.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (9 samples, 0.02%)</title><rect x="20.7" y="421" width="0.2" height="15.0" fill="rgb(245,6,16)" rx="2" ry="2" />
<text  x="23.71" y="431.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%)</title><rect x="912.9" y="325" width="0.8" height="15.0" fill="rgb(249,14,21)" rx="2" ry="2" />
<text  x="915.94" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (217 samples, 0.45%)</title><rect x="823.2" y="373" width="5.3" height="15.0" fill="rgb(231,32,54)" rx="2" ry="2" />
<text  x="826.18" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (5 samples, 0.01%)</title><rect x="1164.3" y="469" width="0.1" height="15.0" fill="rgb(213,214,50)" rx="2" ry="2" />
<text  x="1167.27" y="479.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%)</title><rect x="647.5" y="453" width="0.2" height="15.0" fill="rgb(234,89,22)" rx="2" ry="2" />
<text  x="650.48" y="463.5" ></text>
</g>
<g >
<title>posix_memalign (5 samples, 0.01%)</title><rect x="192.5" y="69" width="0.1" height="15.0" fill="rgb(218,15,28)" rx="2" ry="2" />
<text  x="195.52" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (83 samples, 0.17%)</title><rect x="912.4" y="357" width="2.0" height="15.0" fill="rgb(236,208,29)" rx="2" ry="2" />
<text  x="915.40" y="367.5" ></text>
</g>
<g >
<title>memtable::apply (16 samples, 0.03%)</title><rect x="1141.6" y="261" width="0.4" height="15.0" fill="rgb(244,82,48)" rx="2" ry="2" />
<text  x="1144.61" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (12 samples, 0.03%)</title><rect x="328.7" y="165" width="0.3" height="15.0" fill="rgb(243,72,34)" rx="2" ry="2" />
<text  x="331.68" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (36 samples, 0.08%)</title><rect x="745.4" y="389" width="0.9" height="15.0" fill="rgb(236,38,24)" rx="2" ry="2" />
<text  x="748.36" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="214.1" y="101" width="0.1" height="15.0" fill="rgb(250,163,20)" rx="2" ry="2" />
<text  x="217.10" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%)</title><rect x="960.7" y="389" width="2.1" height="15.0" fill="rgb(230,86,12)" rx="2" ry="2" />
<text  x="963.74" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (17 samples, 0.04%)</title><rect x="449.3" y="277" width="0.4" height="15.0" fill="rgb(224,202,11)" rx="2" ry="2" />
<text  x="452.32" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%)</title><rect x="828.8" y="325" width="0.2" height="15.0" fill="rgb(207,63,4)" rx="2" ry="2" />
<text  x="831.77" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%)</title><rect x="575.4" y="357" width="0.3" height="15.0" fill="rgb(225,142,53)" rx="2" ry="2" />
<text  x="578.45" y="367.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (10 samples, 0.02%)</title><rect x="839.1" y="437" width="0.2" height="15.0" fill="rgb(237,141,54)" rx="2" ry="2" />
<text  x="842.09" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (34 samples, 0.07%)</title><rect x="1169.8" y="469" width="0.8" height="15.0" fill="rgb(246,31,26)" rx="2" ry="2" />
<text  x="1172.78" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (13 samples, 0.03%)</title><rect x="767.6" y="357" width="0.3" height="15.0" fill="rgb(244,9,40)" rx="2" ry="2" />
<text  x="770.55" y="367.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (219 samples, 0.46%)</title><rect x="1075.1" y="325" width="5.4" height="15.0" fill="rgb(251,73,8)" rx="2" ry="2" />
<text  x="1078.10" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (10 samples, 0.02%)</title><rect x="771.2" y="357" width="0.3" height="15.0" fill="rgb(240,129,6)" rx="2" ry="2" />
<text  x="774.22" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%)</title><rect x="222.8" y="149" width="0.1" height="15.0" fill="rgb(211,92,13)" rx="2" ry="2" />
<text  x="225.76" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (44 samples, 0.09%)</title><rect x="437.2" y="229" width="1.1" height="15.0" fill="rgb(214,102,24)" rx="2" ry="2" />
<text  x="440.18" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (15 samples, 0.03%)</title><rect x="600.6" y="437" width="0.4" height="15.0" fill="rgb(233,80,32)" rx="2" ry="2" />
<text  x="603.62" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%)</title><rect x="1153.4" y="485" width="0.1" height="15.0" fill="rgb(224,32,39)" rx="2" ry="2" />
<text  x="1156.36" y="495.5" ></text>
</g>
<g >
<title>dht::tri_compare (81 samples, 0.17%)</title><rect x="469.8" y="261" width="2.0" height="15.0" fill="rgb(217,46,11)" rx="2" ry="2" />
<text  x="472.83" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (17 samples, 0.04%)</title><rect x="272.0" y="341" width="0.4" height="15.0" fill="rgb(241,186,45)" rx="2" ry="2" />
<text  x="275.01" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (36 samples, 0.08%)</title><rect x="532.1" y="341" width="0.9" height="15.0" fill="rgb(219,207,49)" rx="2" ry="2" />
<text  x="535.11" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (11 samples, 0.02%)</title><rect x="173.3" y="133" width="0.3" height="15.0" fill="rgb(225,61,23)" rx="2" ry="2" />
<text  x="176.34" y="143.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%)</title><rect x="16.1" y="293" width="0.2" height="15.0" fill="rgb(249,130,52)" rx="2" ry="2" />
<text  x="19.06" y="303.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (15 samples, 0.03%)</title><rect x="439.8" y="277" width="0.4" height="15.0" fill="rgb(241,23,18)" rx="2" ry="2" />
<text  x="442.84" y="287.5" ></text>
</g>
<g >
<title>__dynamic_cast (17 samples, 0.04%)</title><rect x="639.8" y="469" width="0.4" height="15.0" fill="rgb(226,96,3)" rx="2" ry="2" />
<text  x="642.79" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%)</title><rect x="479.0" y="181" width="0.2" height="15.0" fill="rgb(239,21,2)" rx="2" ry="2" />
<text  x="481.99" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (13 samples, 0.03%)</title><rect x="644.6" y="421" width="0.3" height="15.0" fill="rgb(241,217,45)" rx="2" ry="2" />
<text  x="647.57" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="677.3" y="437" width="0.2" height="15.0" fill="rgb(237,77,8)" rx="2" ry="2" />
<text  x="680.32" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (136 samples, 0.28%)</title><rect x="816.6" y="357" width="3.4" height="15.0" fill="rgb(223,157,54)" rx="2" ry="2" />
<text  x="819.63" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (31 samples, 0.06%)</title><rect x="201.4" y="69" width="0.8" height="15.0" fill="rgb(211,219,43)" rx="2" ry="2" />
<text  x="204.44" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%)</title><rect x="419.8" y="405" width="0.4" height="15.0" fill="rgb(216,132,0)" rx="2" ry="2" />
<text  x="422.84" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="1104.8" y="341" width="0.1" height="15.0" fill="rgb(225,148,35)" rx="2" ry="2" />
<text  x="1107.80" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (44 samples, 0.09%)</title><rect x="221.7" y="149" width="1.1" height="15.0" fill="rgb(233,134,2)" rx="2" ry="2" />
<text  x="224.68" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (18 samples, 0.04%)</title><rect x="504.1" y="245" width="0.5" height="15.0" fill="rgb(219,58,44)" rx="2" ry="2" />
<text  x="507.13" y="255.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (6 samples, 0.01%)</title><rect x="951.0" y="389" width="0.2" height="15.0" fill="rgb(210,69,32)" rx="2" ry="2" />
<text  x="954.01" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (21 samples, 0.04%)</title><rect x="1052.3" y="229" width="0.5" height="15.0" fill="rgb(248,64,40)" rx="2" ry="2" />
<text  x="1055.32" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (158 samples, 0.33%)</title><rect x="36.3" y="469" width="3.9" height="15.0" fill="rgb(222,72,24)" rx="2" ry="2" />
<text  x="39.35" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="643.7" y="453" width="0.1" height="15.0" fill="rgb(233,34,48)" rx="2" ry="2" />
<text  x="646.66" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (305 samples, 0.64%)</title><rect x="397.4" y="229" width="7.5" height="15.0" fill="rgb(247,74,49)" rx="2" ry="2" />
<text  x="400.43" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (24 samples, 0.05%)</title><rect x="141.7" y="261" width="0.6" height="15.0" fill="rgb(209,204,11)" rx="2" ry="2" />
<text  x="144.70" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (15 samples, 0.03%)</title><rect x="669.0" y="469" width="0.4" height="15.0" fill="rgb(209,116,42)" rx="2" ry="2" />
<text  x="672.03" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (27 samples, 0.06%)</title><rect x="494.9" y="245" width="0.7" height="15.0" fill="rgb(212,44,53)" rx="2" ry="2" />
<text  x="497.92" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%)</title><rect x="900.7" y="229" width="0.2" height="15.0" fill="rgb(230,161,51)" rx="2" ry="2" />
<text  x="903.65" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%)</title><rect x="10.1" y="597" width="0.2" height="15.0" fill="rgb(221,122,1)" rx="2" ry="2" />
<text  x="13.10" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (57 samples, 0.12%)</title><rect x="16.0" y="325" width="1.4" height="15.0" fill="rgb(253,2,28)" rx="2" ry="2" />
<text  x="18.98" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%)</title><rect x="10.1" y="453" width="0.2" height="15.0" fill="rgb(241,25,5)" rx="2" ry="2" />
<text  x="13.10" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (58 samples, 0.12%)</title><rect x="763.9" y="373" width="1.4" height="15.0" fill="rgb(237,194,23)" rx="2" ry="2" />
<text  x="766.86" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (99 samples, 0.21%)</title><rect x="572.9" y="357" width="2.4" height="15.0" fill="rgb(208,129,19)" rx="2" ry="2" />
<text  x="575.86" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%)</title><rect x="1079.2" y="277" width="0.2" height="15.0" fill="rgb(237,139,13)" rx="2" ry="2" />
<text  x="1082.19" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (25 samples, 0.05%)</title><rect x="1061.1" y="341" width="0.6" height="15.0" fill="rgb(207,126,30)" rx="2" ry="2" />
<text  x="1064.06" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (31 samples, 0.06%)</title><rect x="635.3" y="485" width="0.7" height="15.0" fill="rgb(225,210,40)" rx="2" ry="2" />
<text  x="638.26" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%)</title><rect x="482.8" y="325" width="0.2" height="15.0" fill="rgb(251,192,12)" rx="2" ry="2" />
<text  x="485.83" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (519 samples, 1.08%)</title><rect x="553.0" y="325" width="12.7" height="15.0" fill="rgb(211,42,27)" rx="2" ry="2" />
<text  x="555.97" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_9c4051607141ccef88a5c0c6888f804fb0de85a9] (5 samples, 0.01%)</title><rect x="1168.8" y="469" width="0.2" height="15.0" fill="rgb(206,153,25)" rx="2" ry="2" />
<text  x="1171.85" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (11 samples, 0.02%)</title><rect x="231.9" y="213" width="0.3" height="15.0" fill="rgb(245,64,29)" rx="2" ry="2" />
<text  x="234.90" y="223.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.02%)</title><rect x="710.6" y="485" width="0.2" height="15.0" fill="rgb(229,22,0)" rx="2" ry="2" />
<text  x="713.62" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%)</title><rect x="285.4" y="357" width="0.1" height="15.0" fill="rgb(243,201,0)" rx="2" ry="2" />
<text  x="288.36" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (11 samples, 0.02%)</title><rect x="125.2" y="309" width="0.2" height="15.0" fill="rgb(226,186,39)" rx="2" ry="2" />
<text  x="128.17" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (13 samples, 0.03%)</title><rect x="79.3" y="453" width="0.3" height="15.0" fill="rgb(241,115,16)" rx="2" ry="2" />
<text  x="82.32" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (10 samples, 0.02%)</title><rect x="758.5" y="309" width="0.2" height="15.0" fill="rgb(239,220,48)" rx="2" ry="2" />
<text  x="761.46" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (22 samples, 0.05%)</title><rect x="863.6" y="405" width="0.5" height="15.0" fill="rgb(206,224,35)" rx="2" ry="2" />
<text  x="866.57" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (6 samples, 0.01%)</title><rect x="500.9" y="197" width="0.1" height="15.0" fill="rgb(247,190,47)" rx="2" ry="2" />
<text  x="503.86" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (105 samples, 0.22%)</title><rect x="310.1" y="181" width="2.5" height="15.0" fill="rgb(241,12,31)" rx="2" ry="2" />
<text  x="313.06" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%)</title><rect x="594.4" y="437" width="0.3" height="15.0" fill="rgb(213,48,16)" rx="2" ry="2" />
<text  x="597.36" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (144 samples, 0.30%)</title><rect x="1076.2" y="309" width="3.5" height="15.0" fill="rgb(234,67,7)" rx="2" ry="2" />
<text  x="1079.18" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (60 samples, 0.13%)</title><rect x="1158.7" y="421" width="1.5" height="15.0" fill="rgb(226,63,6)" rx="2" ry="2" />
<text  x="1161.70" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (5 samples, 0.01%)</title><rect x="318.9" y="197" width="0.1" height="15.0" fill="rgb(212,202,30)" rx="2" ry="2" />
<text  x="321.90" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (55 samples, 0.11%)</title><rect x="676.1" y="469" width="1.4" height="15.0" fill="rgb(208,132,4)" rx="2" ry="2" />
<text  x="679.14" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (24 samples, 0.05%)</title><rect x="408.5" y="229" width="0.6" height="15.0" fill="rgb(246,61,51)" rx="2" ry="2" />
<text  x="411.54" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (770 samples, 1.61%)</title><rect x="125.4" y="309" width="19.0" height="15.0" fill="rgb(216,207,0)" rx="2" ry="2" />
<text  x="128.44" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (15 samples, 0.03%)</title><rect x="622.5" y="485" width="0.4" height="15.0" fill="rgb(212,191,23)" rx="2" ry="2" />
<text  x="625.53" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (9 samples, 0.02%)</title><rect x="280.3" y="277" width="0.2" height="15.0" fill="rgb(230,42,24)" rx="2" ry="2" />
<text  x="283.26" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (32 samples, 0.07%)</title><rect x="211.8" y="101" width="0.8" height="15.0" fill="rgb(205,171,43)" rx="2" ry="2" />
<text  x="214.78" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (22 samples, 0.05%)</title><rect x="550.7" y="309" width="0.6" height="15.0" fill="rgb(251,13,33)" rx="2" ry="2" />
<text  x="553.72" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (5 samples, 0.01%)</title><rect x="75.7" y="453" width="0.1" height="15.0" fill="rgb(212,130,52)" rx="2" ry="2" />
<text  x="78.65" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (115 samples, 0.24%)</title><rect x="1115.1" y="389" width="2.8" height="15.0" fill="rgb(210,160,47)" rx="2" ry="2" />
<text  x="1118.09" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,453 samples, 9.29%)</title><rect x="299.5" y="277" width="109.6" height="15.0" fill="rgb(211,158,0)" rx="2" ry="2" />
<text  x="302.47" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.04%)</title><rect x="829.8" y="293" width="0.4" height="15.0" fill="rgb(218,71,15)" rx="2" ry="2" />
<text  x="832.83" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (429 samples, 0.90%)</title><rect x="892.9" y="309" width="10.5" height="15.0" fill="rgb(211,183,16)" rx="2" ry="2" />
<text  x="895.87" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (313 samples, 0.65%)</title><rect x="578.8" y="437" width="7.7" height="15.0" fill="rgb(207,80,21)" rx="2" ry="2" />
<text  x="581.82" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (5 samples, 0.01%)</title><rect x="21.2" y="341" width="0.1" height="15.0" fill="rgb(242,69,2)" rx="2" ry="2" />
<text  x="24.20" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (23 samples, 0.05%)</title><rect x="575.7" y="357" width="0.6" height="15.0" fill="rgb(231,7,4)" rx="2" ry="2" />
<text  x="578.69" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%)</title><rect x="481.0" y="213" width="0.1" height="15.0" fill="rgb(242,8,1)" rx="2" ry="2" />
<text  x="483.96" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (32 samples, 0.07%)</title><rect x="863.3" y="437" width="0.8" height="15.0" fill="rgb(217,104,4)" rx="2" ry="2" />
<text  x="866.34" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (43 samples, 0.09%)</title><rect x="794.5" y="197" width="1.1" height="15.0" fill="rgb(242,16,16)" rx="2" ry="2" />
<text  x="797.54" y="207.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (34 samples, 0.07%)</title><rect x="679.3" y="469" width="0.8" height="15.0" fill="rgb(209,27,51)" rx="2" ry="2" />
<text  x="682.27" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (70 samples, 0.15%)</title><rect x="602.1" y="437" width="1.7" height="15.0" fill="rgb(250,1,46)" rx="2" ry="2" />
<text  x="605.09" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (39 samples, 0.08%)</title><rect x="787.3" y="229" width="0.9" height="15.0" fill="rgb(215,118,44)" rx="2" ry="2" />
<text  x="790.25" y="239.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,644 samples, 5.52%)</title><rect x="452.0" y="341" width="65.1" height="15.0" fill="rgb(221,229,34)" rx="2" ry="2" />
<text  x="455.03" y="351.5" >memtabl..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (10 samples, 0.02%)</title><rect x="1081.2" y="325" width="0.3" height="15.0" fill="rgb(210,99,14)" rx="2" ry="2" />
<text  x="1084.23" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (46,954 samples, 97.99%)</title><rect x="22.4" y="533" width="1156.3" height="15.0" fill="rgb(252,71,40)" rx="2" ry="2" />
<text  x="25.44" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (8 samples, 0.02%)</title><rect x="368.7" y="197" width="0.2" height="15.0" fill="rgb(244,224,11)" rx="2" ry="2" />
<text  x="371.72" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (690 samples, 1.44%)</title><rect x="888.8" y="341" width="17.0" height="15.0" fill="rgb(214,187,10)" rx="2" ry="2" />
<text  x="891.78" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (60 samples, 0.13%)</title><rect x="1062.3" y="325" width="1.5" height="15.0" fill="rgb(239,112,16)" rx="2" ry="2" />
<text  x="1065.29" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%)</title><rect x="197.5" y="101" width="0.2" height="15.0" fill="rgb(218,31,18)" rx="2" ry="2" />
<text  x="200.50" y="111.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,060 samples, 2.21%)</title><rect x="784.8" y="293" width="26.1" height="15.0" fill="rgb(208,29,12)" rx="2" ry="2" />
<text  x="787.84" y="303.5" >s..</text>
</g>
<g >
<title>database::find_column_family (40 samples, 0.08%)</title><rect x="974.3" y="357" width="0.9" height="15.0" fill="rgb(219,7,25)" rx="2" ry="2" />
<text  x="977.26" y="367.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (5 samples, 0.01%)</title><rect x="391.6" y="229" width="0.2" height="15.0" fill="rgb(224,130,33)" rx="2" ry="2" />
<text  x="394.64" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="568.8" y="325" width="0.2" height="15.0" fill="rgb(211,227,37)" rx="2" ry="2" />
<text  x="571.82" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt (15 samples, 0.03%)</title><rect x="466.9" y="277" width="0.4" height="15.0" fill="rgb(218,46,3)" rx="2" ry="2" />
<text  x="469.90" y="287.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (6 samples, 0.01%)</title><rect x="232.2" y="213" width="0.1" height="15.0" fill="rgb(238,100,26)" rx="2" ry="2" />
<text  x="235.17" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (10 samples, 0.02%)</title><rect x="647.0" y="453" width="0.2" height="15.0" fill="rgb(240,156,25)" rx="2" ry="2" />
<text  x="649.96" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%)</title><rect x="455.8" y="309" width="0.5" height="15.0" fill="rgb(241,118,21)" rx="2" ry="2" />
<text  x="458.79" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (117 samples, 0.24%)</title><rect x="1118.4" y="373" width="2.9" height="15.0" fill="rgb(213,78,3)" rx="2" ry="2" />
<text  x="1121.44" y="383.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%)</title><rect x="160.9" y="229" width="0.2" height="15.0" fill="rgb(228,139,54)" rx="2" ry="2" />
<text  x="163.88" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (34 samples, 0.07%)</title><rect x="666.4" y="453" width="0.8" height="15.0" fill="rgb(226,147,39)" rx="2" ry="2" />
<text  x="669.39" y="463.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (5 samples, 0.01%)</title><rect x="353.6" y="165" width="0.1" height="15.0" fill="rgb(242,102,47)" rx="2" ry="2" />
<text  x="356.57" y="175.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (85 samples, 0.18%)</title><rect x="441.3" y="309" width="2.1" height="15.0" fill="rgb(219,129,10)" rx="2" ry="2" />
<text  x="444.31" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="444.8" y="261" width="0.1" height="15.0" fill="rgb(219,132,29)" rx="2" ry="2" />
<text  x="447.76" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (31 samples, 0.06%)</title><rect x="155.6" y="197" width="0.7" height="15.0" fill="rgb(230,39,32)" rx="2" ry="2" />
<text  x="158.56" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="1146.1" y="501" width="0.2" height="15.0" fill="rgb(219,51,20)" rx="2" ry="2" />
<text  x="1149.12" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (5 samples, 0.01%)</title><rect x="706.9" y="501" width="0.1" height="15.0" fill="rgb(213,61,0)" rx="2" ry="2" />
<text  x="709.90" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,116 samples, 12.76%)</title><rect x="709.8" y="501" width="150.6" height="15.0" fill="rgb(239,74,9)" rx="2" ry="2" />
<text  x="712.80" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%)</title><rect x="862.8" y="325" width="0.1" height="15.0" fill="rgb(216,20,34)" rx="2" ry="2" />
<text  x="865.75" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (65 samples, 0.14%)</title><rect x="829.1" y="325" width="1.6" height="15.0" fill="rgb(216,210,36)" rx="2" ry="2" />
<text  x="832.07" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (46 samples, 0.10%)</title><rect x="1033.0" y="149" width="1.1" height="15.0" fill="rgb(234,199,22)" rx="2" ry="2" />
<text  x="1036.01" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (18 samples, 0.04%)</title><rect x="438.7" y="261" width="0.4" height="15.0" fill="rgb(249,84,54)" rx="2" ry="2" />
<text  x="441.65" y="271.5" ></text>
</g>
<g >
<title>dht::tri_compare (31 samples, 0.06%)</title><rect x="1084.7" y="245" width="0.8" height="15.0" fill="rgb(221,128,0)" rx="2" ry="2" />
<text  x="1087.70" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (109 samples, 0.23%)</title><rect x="527.0" y="277" width="2.7" height="15.0" fill="rgb(248,63,45)" rx="2" ry="2" />
<text  x="530.03" y="287.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (26 samples, 0.05%)</title><rect x="458.3" y="277" width="0.6" height="15.0" fill="rgb(235,101,32)" rx="2" ry="2" />
<text  x="461.31" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (89 samples, 0.19%)</title><rect x="675.4" y="485" width="2.1" height="15.0" fill="rgb(211,67,1)" rx="2" ry="2" />
<text  x="678.35" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (9 samples, 0.02%)</title><rect x="932.7" y="373" width="0.2" height="15.0" fill="rgb(212,223,45)" rx="2" ry="2" />
<text  x="935.66" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="1171.7" y="437" width="0.2" height="15.0" fill="rgb(214,145,5)" rx="2" ry="2" />
<text  x="1174.70" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (245 samples, 0.51%)</title><rect x="135.1" y="261" width="6.1" height="15.0" fill="rgb(220,206,46)" rx="2" ry="2" />
<text  x="138.15" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (8 samples, 0.02%)</title><rect x="811.0" y="293" width="0.2" height="15.0" fill="rgb(253,44,15)" rx="2" ry="2" />
<text  x="813.97" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (234 samples, 0.49%)</title><rect x="607.1" y="437" width="5.8" height="15.0" fill="rgb(238,119,50)" rx="2" ry="2" />
<text  x="610.12" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%)</title><rect x="544.9" y="389" width="0.4" height="15.0" fill="rgb(222,26,52)" rx="2" ry="2" />
<text  x="547.91" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (47 samples, 0.10%)</title><rect x="330.4" y="181" width="1.2" height="15.0" fill="rgb(215,156,24)" rx="2" ry="2" />
<text  x="333.40" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (21 samples, 0.04%)</title><rect x="868.7" y="453" width="0.5" height="15.0" fill="rgb(234,164,9)" rx="2" ry="2" />
<text  x="871.71" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (80 samples, 0.17%)</title><rect x="1158.2" y="453" width="2.0" height="15.0" fill="rgb(225,55,49)" rx="2" ry="2" />
<text  x="1161.21" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%)</title><rect x="606.3" y="405" width="0.3" height="15.0" fill="rgb(222,165,20)" rx="2" ry="2" />
<text  x="609.25" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%)</title><rect x="548.4" y="357" width="0.1" height="15.0" fill="rgb(253,190,48)" rx="2" ry="2" />
<text  x="551.39" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (6 samples, 0.01%)</title><rect x="22.3" y="565" width="0.1" height="15.0" fill="rgb(230,58,18)" rx="2" ry="2" />
<text  x="25.29" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.01%)</title><rect x="551.5" y="325" width="0.1" height="15.0" fill="rgb(212,217,6)" rx="2" ry="2" />
<text  x="554.49" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%)</title><rect x="293.6" y="293" width="0.2" height="15.0" fill="rgb(214,50,4)" rx="2" ry="2" />
<text  x="296.59" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (52 samples, 0.11%)</title><rect x="1162.5" y="453" width="1.3" height="15.0" fill="rgb(244,114,20)" rx="2" ry="2" />
<text  x="1165.52" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (50 samples, 0.10%)</title><rect x="861.3" y="501" width="1.2" height="15.0" fill="rgb(231,210,8)" rx="2" ry="2" />
<text  x="864.28" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (34 samples, 0.07%)</title><rect x="474.9" y="197" width="0.9" height="15.0" fill="rgb(224,86,19)" rx="2" ry="2" />
<text  x="477.93" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="437" width="0.6" height="15.0" fill="rgb(230,84,43)" rx="2" ry="2" />
<text  x="1144.51" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (5 samples, 0.01%)</title><rect x="24.4" y="517" width="0.1" height="15.0" fill="rgb(226,6,6)" rx="2" ry="2" />
<text  x="27.38" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="334.1" y="181" width="0.2" height="15.0" fill="rgb(219,115,17)" rx="2" ry="2" />
<text  x="337.14" y="191.5" ></text>
</g>
<g >
<title>schema::column_at (14 samples, 0.03%)</title><rect x="363.6" y="197" width="0.4" height="15.0" fill="rgb(222,123,12)" rx="2" ry="2" />
<text  x="366.62" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (9 samples, 0.02%)</title><rect x="81.6" y="453" width="0.2" height="15.0" fill="rgb(225,102,46)" rx="2" ry="2" />
<text  x="84.56" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="911.7" y="341" width="0.2" height="15.0" fill="rgb(251,149,0)" rx="2" ry="2" />
<text  x="914.73" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (264 samples, 0.55%)</title><rect x="1114.8" y="405" width="6.5" height="15.0" fill="rgb(237,77,14)" rx="2" ry="2" />
<text  x="1117.82" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.05%)</title><rect x="585.3" y="389" width="0.6" height="15.0" fill="rgb(239,204,53)" rx="2" ry="2" />
<text  x="588.32" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%)</title><rect x="1080.2" y="309" width="0.3" height="15.0" fill="rgb(228,163,4)" rx="2" ry="2" />
<text  x="1083.22" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="808.6" y="229" width="0.1" height="15.0" fill="rgb(211,106,22)" rx="2" ry="2" />
<text  x="811.55" y="239.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (11 samples, 0.02%)</title><rect x="454.8" y="325" width="0.3" height="15.0" fill="rgb(229,204,36)" rx="2" ry="2" />
<text  x="457.81" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (354 samples, 0.74%)</title><rect x="839.4" y="437" width="8.7" height="15.0" fill="rgb(210,195,2)" rx="2" ry="2" />
<text  x="842.36" y="447.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%)</title><rect x="1148.4" y="485" width="0.6" height="15.0" fill="rgb(227,157,18)" rx="2" ry="2" />
<text  x="1151.43" y="495.5" ></text>
</g>
<g >
<title>dht::shard_of (13 samples, 0.03%)</title><rect x="1005.4" y="293" width="0.3" height="15.0" fill="rgb(243,94,32)" rx="2" ry="2" />
<text  x="1008.36" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (64 samples, 0.13%)</title><rect x="1158.6" y="437" width="1.6" height="15.0" fill="rgb(207,44,36)" rx="2" ry="2" />
<text  x="1161.60" y="447.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (31 samples, 0.06%)</title><rect x="523.4" y="277" width="0.8" height="15.0" fill="rgb(205,139,22)" rx="2" ry="2" />
<text  x="526.42" y="287.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (633 samples, 1.32%)</title><rect x="128.8" y="293" width="15.6" height="15.0" fill="rgb(250,46,5)" rx="2" ry="2" />
<text  x="131.82" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%)</title><rect x="822.8" y="389" width="0.2" height="15.0" fill="rgb(223,149,34)" rx="2" ry="2" />
<text  x="825.81" y="399.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%)</title><rect x="482.4" y="309" width="0.2" height="15.0" fill="rgb(241,180,53)" rx="2" ry="2" />
<text  x="485.41" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (26 samples, 0.05%)</title><rect x="601.1" y="437" width="0.7" height="15.0" fill="rgb(253,117,50)" rx="2" ry="2" />
<text  x="604.13" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (435 samples, 0.91%)</title><rect x="519.6" y="325" width="10.7" height="15.0" fill="rgb(247,138,4)" rx="2" ry="2" />
<text  x="522.62" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (148 samples, 0.31%)</title><rect x="540.7" y="389" width="3.6" height="15.0" fill="rgb(210,206,10)" rx="2" ry="2" />
<text  x="543.65" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (12 samples, 0.03%)</title><rect x="619.9" y="469" width="0.3" height="15.0" fill="rgb(251,181,21)" rx="2" ry="2" />
<text  x="622.92" y="479.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%)</title><rect x="830.1" y="277" width="0.1" height="15.0" fill="rgb(234,59,12)" rx="2" ry="2" />
<text  x="833.05" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (42 samples, 0.09%)</title><rect x="1014.7" y="245" width="1.1" height="15.0" fill="rgb(237,136,26)" rx="2" ry="2" />
<text  x="1017.72" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%)</title><rect x="625.6" y="485" width="0.2" height="15.0" fill="rgb(242,214,9)" rx="2" ry="2" />
<text  x="628.64" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%)</title><rect x="685.1" y="453" width="0.2" height="15.0" fill="rgb(206,217,23)" rx="2" ry="2" />
<text  x="688.08" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%)</title><rect x="935.3" y="341" width="0.1" height="15.0" fill="rgb(212,163,48)" rx="2" ry="2" />
<text  x="938.27" y="351.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (85 samples, 0.18%)</title><rect x="12.7" y="581" width="2.1" height="15.0" fill="rgb(225,165,24)" rx="2" ry="2" />
<text  x="15.71" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (76 samples, 0.16%)</title><rect x="813.6" y="325" width="1.8" height="15.0" fill="rgb(206,227,24)" rx="2" ry="2" />
<text  x="816.58" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (16 samples, 0.03%)</title><rect x="124.8" y="309" width="0.4" height="15.0" fill="rgb(222,204,19)" rx="2" ry="2" />
<text  x="127.78" y="319.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (10 samples, 0.02%)</title><rect x="1043.4" y="261" width="0.2" height="15.0" fill="rgb(222,14,8)" rx="2" ry="2" />
<text  x="1046.36" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (318 samples, 0.66%)</title><rect x="189.5" y="85" width="7.9" height="15.0" fill="rgb(216,94,37)" rx="2" ry="2" />
<text  x="192.54" y="95.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.03%)</title><rect x="479.2" y="181" width="0.3" height="15.0" fill="rgb(248,176,45)" rx="2" ry="2" />
<text  x="482.24" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (58 samples, 0.12%)</title><rect x="968.3" y="357" width="1.5" height="15.0" fill="rgb(254,23,43)" rx="2" ry="2" />
<text  x="971.35" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (234 samples, 0.49%)</title><rect x="444.1" y="293" width="5.8" height="15.0" fill="rgb(224,145,47)" rx="2" ry="2" />
<text  x="447.12" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (56 samples, 0.12%)</title><rect x="927.2" y="325" width="1.4" height="15.0" fill="rgb(244,143,10)" rx="2" ry="2" />
<text  x="930.22" y="335.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%)</title><rect x="768.0" y="389" width="0.1" height="15.0" fill="rgb(223,29,54)" rx="2" ry="2" />
<text  x="770.97" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (5 samples, 0.01%)</title><rect x="1064.7" y="309" width="0.1" height="15.0" fill="rgb(243,137,51)" rx="2" ry="2" />
<text  x="1067.66" y="319.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (18 samples, 0.04%)</title><rect x="429.2" y="341" width="0.5" height="15.0" fill="rgb(232,53,31)" rx="2" ry="2" />
<text  x="432.25" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (72 samples, 0.15%)</title><rect x="995.5" y="277" width="1.8" height="15.0" fill="rgb(211,119,47)" rx="2" ry="2" />
<text  x="998.51" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%)</title><rect x="270.5" y="325" width="0.1" height="15.0" fill="rgb(216,160,49)" rx="2" ry="2" />
<text  x="273.46" y="335.5" ></text>
</g>
<g >
<title>operator delete (45 samples, 0.09%)</title><rect x="283.4" y="293" width="1.1" height="15.0" fill="rgb(235,184,32)" rx="2" ry="2" />
<text  x="286.42" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (84 samples, 0.18%)</title><rect x="778.7" y="309" width="2.0" height="15.0" fill="rgb(206,83,30)" rx="2" ry="2" />
<text  x="781.66" y="319.5" ></text>
</g>
<g >
<title>database::find_keyspace (258 samples, 0.54%)</title><rect x="1063.8" y="341" width="6.3" height="15.0" fill="rgb(230,25,14)" rx="2" ry="2" />
<text  x="1066.77" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (11 samples, 0.02%)</title><rect x="840.8" y="357" width="0.3" height="15.0" fill="rgb(238,198,20)" rx="2" ry="2" />
<text  x="843.81" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.01%)</title><rect x="392.4" y="245" width="0.1" height="15.0" fill="rgb(221,117,29)" rx="2" ry="2" />
<text  x="395.38" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.01%)</title><rect x="18.5" y="309" width="0.2" height="15.0" fill="rgb(231,62,50)" rx="2" ry="2" />
<text  x="21.52" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (584 samples, 1.22%)</title><rect x="236.2" y="245" width="14.3" height="15.0" fill="rgb(215,168,31)" rx="2" ry="2" />
<text  x="239.16" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%)</title><rect x="94.5" y="437" width="0.2" height="15.0" fill="rgb(227,188,18)" rx="2" ry="2" />
<text  x="97.51" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (221 samples, 0.46%)</title><rect x="1064.3" y="325" width="5.5" height="15.0" fill="rgb(207,153,50)" rx="2" ry="2" />
<text  x="1067.34" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (18 samples, 0.04%)</title><rect x="862.6" y="469" width="0.4" height="15.0" fill="rgb(244,48,21)" rx="2" ry="2" />
<text  x="865.58" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,542 samples, 7.39%)</title><rect x="148.3" y="261" width="87.3" height="15.0" fill="rgb(239,3,1)" rx="2" ry="2" />
<text  x="151.35" y="271.5" >partition_..</text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (8 samples, 0.02%)</title><rect x="617.9" y="389" width="0.2" height="15.0" fill="rgb(226,219,38)" rx="2" ry="2" />
<text  x="620.93" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (31 samples, 0.06%)</title><rect x="838.3" y="421" width="0.8" height="15.0" fill="rgb(221,16,25)" rx="2" ry="2" />
<text  x="841.32" y="431.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%)</title><rect x="655.9" y="437" width="0.5" height="15.0" fill="rgb(230,176,42)" rx="2" ry="2" />
<text  x="658.85" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (22 samples, 0.05%)</title><rect x="442.8" y="293" width="0.5" height="15.0" fill="rgb(233,91,14)" rx="2" ry="2" />
<text  x="445.79" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (59 samples, 0.12%)</title><rect x="16.0" y="357" width="1.4" height="15.0" fill="rgb(238,165,16)" rx="2" ry="2" />
<text  x="18.96" y="367.5" ></text>
</g>
<g >
<title>__strlen_avx2 (63 samples, 0.13%)</title><rect x="1020.3" y="245" width="1.6" height="15.0" fill="rgb(212,201,7)" rx="2" ry="2" />
<text  x="1023.31" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (30 samples, 0.06%)</title><rect x="76.1" y="453" width="0.7" height="15.0" fill="rgb(210,211,23)" rx="2" ry="2" />
<text  x="79.07" y="463.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.14%)</title><rect x="968.2" y="373" width="1.6" height="15.0" fill="rgb(217,205,34)" rx="2" ry="2" />
<text  x="971.20" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (23 samples, 0.05%)</title><rect x="567.2" y="341" width="0.6" height="15.0" fill="rgb(254,99,34)" rx="2" ry="2" />
<text  x="570.20" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (105 samples, 0.22%)</title><rect x="17.4" y="373" width="2.6" height="15.0" fill="rgb(251,21,18)" rx="2" ry="2" />
<text  x="20.44" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (11 samples, 0.02%)</title><rect x="582.7" y="405" width="0.2" height="15.0" fill="rgb(215,14,5)" rx="2" ry="2" />
<text  x="585.66" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (7 samples, 0.01%)</title><rect x="499.2" y="197" width="0.2" height="15.0" fill="rgb(239,191,32)" rx="2" ry="2" />
<text  x="502.21" y="207.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%)</title><rect x="793.3" y="213" width="0.2" height="15.0" fill="rgb(240,49,51)" rx="2" ry="2" />
<text  x="796.28" y="223.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (21 samples, 0.04%)</title><rect x="67.5" y="405" width="0.5" height="15.0" fill="rgb(215,226,38)" rx="2" ry="2" />
<text  x="70.45" y="415.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (10 samples, 0.02%)</title><rect x="309.3" y="197" width="0.2" height="15.0" fill="rgb(210,45,10)" rx="2" ry="2" />
<text  x="312.27" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%)</title><rect x="1142.2" y="373" width="0.9" height="15.0" fill="rgb(244,22,24)" rx="2" ry="2" />
<text  x="1145.18" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%)</title><rect x="793.0" y="197" width="0.1" height="15.0" fill="rgb(248,66,24)" rx="2" ry="2" />
<text  x="795.99" y="207.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (108 samples, 0.23%)</title><rect x="919.2" y="373" width="2.6" height="15.0" fill="rgb(222,158,48)" rx="2" ry="2" />
<text  x="922.17" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (7 samples, 0.01%)</title><rect x="662.9" y="469" width="0.2" height="15.0" fill="rgb(254,160,50)" rx="2" ry="2" />
<text  x="665.89" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (21 samples, 0.04%)</title><rect x="735.7" y="293" width="0.5" height="15.0" fill="rgb(246,182,53)" rx="2" ry="2" />
<text  x="738.69" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (20 samples, 0.04%)</title><rect x="287.3" y="373" width="0.5" height="15.0" fill="rgb(228,109,8)" rx="2" ry="2" />
<text  x="290.33" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%)</title><rect x="1126.8" y="405" width="0.3" height="15.0" fill="rgb(223,200,17)" rx="2" ry="2" />
<text  x="1129.79" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (23,398 samples, 48.83%)</title><rect x="47.8" y="501" width="576.2" height="15.0" fill="rgb(225,100,15)" rx="2" ry="2" />
<text  x="50.82" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%)</title><rect x="938.9" y="373" width="0.2" height="15.0" fill="rgb(227,166,51)" rx="2" ry="2" />
<text  x="941.89" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (8 samples, 0.02%)</title><rect x="863.8" y="325" width="0.2" height="15.0" fill="rgb(248,58,37)" rx="2" ry="2" />
<text  x="866.81" y="335.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%)</title><rect x="501.0" y="197" width="0.7" height="15.0" fill="rgb(235,171,53)" rx="2" ry="2" />
<text  x="504.01" y="207.5" ></text>
</g>
<g >
<title>database::has_keyspace (101 samples, 0.21%)</title><rect x="845.5" y="405" width="2.5" height="15.0" fill="rgb(253,202,28)" rx="2" ry="2" />
<text  x="848.47" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%)</title><rect x="963.1" y="405" width="0.2" height="15.0" fill="rgb(215,128,7)" rx="2" ry="2" />
<text  x="966.10" y="415.5" ></text>
</g>
<g >
<title>schema::partition_key_size (5 samples, 0.01%)</title><rect x="941.7" y="405" width="0.1" height="15.0" fill="rgb(231,167,13)" rx="2" ry="2" />
<text  x="944.68" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,132 samples, 4.45%)</title><rect x="1004.1" y="309" width="52.5" height="15.0" fill="rgb(239,196,35)" rx="2" ry="2" />
<text  x="1007.05" y="319.5" >servi..</text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%)</title><rect x="156.1" y="181" width="0.2" height="15.0" fill="rgb(217,224,41)" rx="2" ry="2" />
<text  x="159.13" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (17 samples, 0.04%)</title><rect x="1121.3" y="405" width="0.5" height="15.0" fill="rgb(214,155,22)" rx="2" ry="2" />
<text  x="1124.34" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (52 samples, 0.11%)</title><rect x="764.0" y="357" width="1.3" height="15.0" fill="rgb(205,119,28)" rx="2" ry="2" />
<text  x="766.98" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%)</title><rect x="296.2" y="245" width="0.4" height="15.0" fill="rgb(232,67,54)" rx="2" ry="2" />
<text  x="299.17" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%)</title><rect x="451.0" y="309" width="0.7" height="15.0" fill="rgb(244,106,4)" rx="2" ry="2" />
<text  x="453.97" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%)</title><rect x="1038.3" y="213" width="0.2" height="15.0" fill="rgb(252,13,5)" rx="2" ry="2" />
<text  x="1041.28" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="331.3" y="165" width="0.3" height="15.0" fill="rgb(235,61,21)" rx="2" ry="2" />
<text  x="334.31" y="175.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (477 samples, 1.00%)</title><rect x="469.4" y="277" width="11.8" height="15.0" fill="rgb(237,131,16)" rx="2" ry="2" />
<text  x="472.41" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (12 samples, 0.03%)</title><rect x="841.8" y="341" width="0.3" height="15.0" fill="rgb(254,89,35)" rx="2" ry="2" />
<text  x="844.82" y="351.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (23 samples, 0.05%)</title><rect x="907.9" y="309" width="0.6" height="15.0" fill="rgb(245,88,41)" rx="2" ry="2" />
<text  x="910.89" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (9 samples, 0.02%)</title><rect x="364.1" y="197" width="0.2" height="15.0" fill="rgb(218,49,13)" rx="2" ry="2" />
<text  x="367.09" y="207.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%)</title><rect x="247.4" y="213" width="0.1" height="15.0" fill="rgb(210,214,16)" rx="2" ry="2" />
<text  x="250.41" y="223.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (53 samples, 0.11%)</title><rect x="569.0" y="373" width="1.3" height="15.0" fill="rgb(221,200,12)" rx="2" ry="2" />
<text  x="572.02" y="383.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (9 samples, 0.02%)</title><rect x="590.7" y="389" width="0.2" height="15.0" fill="rgb(205,34,47)" rx="2" ry="2" />
<text  x="593.69" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (6 samples, 0.01%)</title><rect x="837.4" y="437" width="0.2" height="15.0" fill="rgb(237,23,18)" rx="2" ry="2" />
<text  x="840.44" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (58 samples, 0.12%)</title><rect x="791.6" y="181" width="1.4" height="15.0" fill="rgb(222,104,43)" rx="2" ry="2" />
<text  x="794.56" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (15 samples, 0.03%)</title><rect x="1149.2" y="485" width="0.4" height="15.0" fill="rgb(239,138,9)" rx="2" ry="2" />
<text  x="1152.20" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (121 samples, 0.25%)</title><rect x="383.1" y="149" width="3.0" height="15.0" fill="rgb(209,22,26)" rx="2" ry="2" />
<text  x="386.15" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (8 samples, 0.02%)</title><rect x="943.7" y="389" width="0.2" height="15.0" fill="rgb(250,32,2)" rx="2" ry="2" />
<text  x="946.75" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (26 samples, 0.05%)</title><rect x="1177.9" y="501" width="0.6" height="15.0" fill="rgb(254,171,29)" rx="2" ry="2" />
<text  x="1180.88" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%)</title><rect x="540.1" y="341" width="0.1" height="15.0" fill="rgb(252,115,42)" rx="2" ry="2" />
<text  x="543.11" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (22 samples, 0.05%)</title><rect x="758.2" y="325" width="0.5" height="15.0" fill="rgb(220,126,10)" rx="2" ry="2" />
<text  x="761.17" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (15 samples, 0.03%)</title><rect x="232.6" y="229" width="0.4" height="15.0" fill="rgb(241,96,8)" rx="2" ry="2" />
<text  x="235.59" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%)</title><rect x="540.2" y="357" width="0.2" height="15.0" fill="rgb(228,24,52)" rx="2" ry="2" />
<text  x="543.23" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="407.7" y="245" width="0.1" height="15.0" fill="rgb(233,63,4)" rx="2" ry="2" />
<text  x="410.65" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (82 samples, 0.17%)</title><rect x="753.3" y="389" width="2.1" height="15.0" fill="rgb(248,46,35)" rx="2" ry="2" />
<text  x="756.34" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,838 samples, 3.84%)</title><rect x="1057.9" y="357" width="45.3" height="15.0" fill="rgb(234,68,6)" rx="2" ry="2" />
<text  x="1060.91" y="367.5" >serv..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%)</title><rect x="19.2" y="261" width="0.1" height="15.0" fill="rgb(241,159,49)" rx="2" ry="2" />
<text  x="22.21" y="271.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%)</title><rect x="155.6" y="181" width="0.5" height="15.0" fill="rgb(230,135,31)" rx="2" ry="2" />
<text  x="158.61" y="191.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%)</title><rect x="667.8" y="485" width="0.6" height="15.0" fill="rgb(224,0,25)" rx="2" ry="2" />
<text  x="670.82" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (6 samples, 0.01%)</title><rect x="701.1" y="421" width="0.1" height="15.0" fill="rgb(234,191,21)" rx="2" ry="2" />
<text  x="704.06" y="431.5" ></text>
</g>
<g >
<title>free (94 samples, 0.20%)</title><rect x="399.1" y="181" width="2.3" height="15.0" fill="rgb(234,16,6)" rx="2" ry="2" />
<text  x="402.08" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (19 samples, 0.04%)</title><rect x="116.1" y="373" width="0.5" height="15.0" fill="rgb(234,223,46)" rx="2" ry="2" />
<text  x="119.11" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%)</title><rect x="812.5" y="261" width="0.2" height="15.0" fill="rgb(207,1,1)" rx="2" ry="2" />
<text  x="815.52" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,669 samples, 5.57%)</title><rect x="882.8" y="421" width="65.8" height="15.0" fill="rgb(253,149,37)" rx="2" ry="2" />
<text  x="885.85" y="431.5" >cql3::r..</text>
</g>
<g >
<title>range_tombstone_accumulator::clear (112 samples, 0.23%)</title><rect x="365.0" y="213" width="2.7" height="15.0" fill="rgb(211,194,38)" rx="2" ry="2" />
<text  x="367.98" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (35 samples, 0.07%)</title><rect x="1142.2" y="341" width="0.9" height="15.0" fill="rgb(226,80,51)" rx="2" ry="2" />
<text  x="1145.20" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,256 samples, 2.62%)</title><rect x="174.7" y="133" width="30.9" height="15.0" fill="rgb(220,18,5)" rx="2" ry="2" />
<text  x="177.72" y="143.5" >co..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%)</title><rect x="631.8" y="485" width="0.4" height="15.0" fill="rgb(217,80,43)" rx="2" ry="2" />
<text  x="634.84" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (11 samples, 0.02%)</title><rect x="615.1" y="389" width="0.3" height="15.0" fill="rgb(211,194,53)" rx="2" ry="2" />
<text  x="618.10" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%)</title><rect x="142.3" y="261" width="0.1" height="15.0" fill="rgb(238,0,38)" rx="2" ry="2" />
<text  x="145.29" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (8 samples, 0.02%)</title><rect x="1042.7" y="245" width="0.2" height="15.0" fill="rgb(211,63,26)" rx="2" ry="2" />
<text  x="1045.69" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (30 samples, 0.06%)</title><rect x="259.4" y="277" width="0.7" height="15.0" fill="rgb(237,201,13)" rx="2" ry="2" />
<text  x="262.36" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (8 samples, 0.02%)</title><rect x="286.6" y="357" width="0.2" height="15.0" fill="rgb(213,62,37)" rx="2" ry="2" />
<text  x="289.62" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (9 samples, 0.02%)</title><rect x="1066.5" y="277" width="0.2" height="15.0" fill="rgb(227,117,35)" rx="2" ry="2" />
<text  x="1069.50" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (9 samples, 0.02%)</title><rect x="885.2" y="405" width="0.2" height="15.0" fill="rgb(246,143,50)" rx="2" ry="2" />
<text  x="888.16" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.01%)</title><rect x="363.4" y="197" width="0.2" height="15.0" fill="rgb(231,13,31)" rx="2" ry="2" />
<text  x="366.45" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (12 samples, 0.03%)</title><rect x="60.7" y="453" width="0.3" height="15.0" fill="rgb(254,54,34)" rx="2" ry="2" />
<text  x="63.68" y="463.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="645.0" y="469" width="0.1" height="15.0" fill="rgb(211,127,46)" rx="2" ry="2" />
<text  x="647.97" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%)</title><rect x="490.0" y="293" width="0.2" height="15.0" fill="rgb(229,75,2)" rx="2" ry="2" />
<text  x="493.05" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (32 samples, 0.07%)</title><rect x="347.9" y="149" width="0.8" height="15.0" fill="rgb(238,184,32)" rx="2" ry="2" />
<text  x="350.89" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (27 samples, 0.06%)</title><rect x="287.2" y="389" width="0.7" height="15.0" fill="rgb(221,140,15)" rx="2" ry="2" />
<text  x="290.21" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (36 samples, 0.08%)</title><rect x="959.7" y="373" width="0.9" height="15.0" fill="rgb(248,144,32)" rx="2" ry="2" />
<text  x="962.73" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (5 samples, 0.01%)</title><rect x="443.6" y="309" width="0.2" height="15.0" fill="rgb(249,211,21)" rx="2" ry="2" />
<text  x="446.63" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (10 samples, 0.02%)</title><rect x="1029.1" y="197" width="0.2" height="15.0" fill="rgb(229,142,5)" rx="2" ry="2" />
<text  x="1032.10" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (91 samples, 0.19%)</title><rect x="303.9" y="245" width="2.3" height="15.0" fill="rgb(219,64,44)" rx="2" ry="2" />
<text  x="306.93" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="155.7" y="165" width="0.4" height="15.0" fill="rgb(248,171,54)" rx="2" ry="2" />
<text  x="158.66" y="175.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (30 samples, 0.06%)</title><rect x="833.0" y="421" width="0.8" height="15.0" fill="rgb(234,159,33)" rx="2" ry="2" />
<text  x="836.03" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%)</title><rect x="1172.9" y="437" width="0.2" height="15.0" fill="rgb(253,187,26)" rx="2" ry="2" />
<text  x="1175.93" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (73 samples, 0.15%)</title><rect x="798.6" y="149" width="1.8" height="15.0" fill="rgb(251,206,26)" rx="2" ry="2" />
<text  x="801.60" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (34 samples, 0.07%)</title><rect x="776.9" y="277" width="0.8" height="15.0" fill="rgb(217,160,37)" rx="2" ry="2" />
<text  x="779.91" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%)</title><rect x="41.1" y="453" width="0.2" height="15.0" fill="rgb(228,202,38)" rx="2" ry="2" />
<text  x="44.13" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (10 samples, 0.02%)</title><rect x="23.4" y="517" width="0.2" height="15.0" fill="rgb(245,208,34)" rx="2" ry="2" />
<text  x="26.40" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%)</title><rect x="1142.5" y="245" width="0.6" height="15.0" fill="rgb(254,69,7)" rx="2" ry="2" />
<text  x="1145.55" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (15 samples, 0.03%)</title><rect x="137.1" y="245" width="0.4" height="15.0" fill="rgb(224,164,1)" rx="2" ry="2" />
<text  x="140.12" y="255.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (5 samples, 0.01%)</title><rect x="614.1" y="421" width="0.2" height="15.0" fill="rgb(248,80,44)" rx="2" ry="2" />
<text  x="617.13" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (45 samples, 0.09%)</title><rect x="562.0" y="277" width="1.1" height="15.0" fill="rgb(210,151,18)" rx="2" ry="2" />
<text  x="565.03" y="287.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%)</title><rect x="555.5" y="309" width="0.1" height="15.0" fill="rgb(230,58,11)" rx="2" ry="2" />
<text  x="558.50" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (212 samples, 0.44%)</title><rect x="277.7" y="309" width="5.2" height="15.0" fill="rgb(215,127,13)" rx="2" ry="2" />
<text  x="280.68" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (88 samples, 0.18%)</title><rect x="641.2" y="453" width="2.2" height="15.0" fill="rgb(235,9,19)" rx="2" ry="2" />
<text  x="644.22" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (35 samples, 0.07%)</title><rect x="74.3" y="389" width="0.9" height="15.0" fill="rgb(214,103,24)" rx="2" ry="2" />
<text  x="77.35" y="399.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%)</title><rect x="101.3" y="389" width="0.9" height="15.0" fill="rgb(230,140,28)" rx="2" ry="2" />
<text  x="104.34" y="399.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,039 samples, 12.60%)</title><rect x="710.8" y="485" width="148.8" height="15.0" fill="rgb(249,116,0)" rx="2" ry="2" />
<text  x="713.84" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>partition_snapshot::get_change_mark (27 samples, 0.06%)</title><rect x="228.8" y="149" width="0.7" height="15.0" fill="rgb(229,48,41)" rx="2" ry="2" />
<text  x="231.80" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,411 samples, 5.03%)</title><rect x="165.6" y="213" width="59.3" height="15.0" fill="rgb(213,186,5)" rx="2" ry="2" />
<text  x="168.56" y="223.5" >logall..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.01%)</title><rect x="1176.7" y="373" width="0.1" height="15.0" fill="rgb(228,139,17)" rx="2" ry="2" />
<text  x="1179.65" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%)</title><rect x="977.9" y="325" width="0.5" height="15.0" fill="rgb(224,65,31)" rx="2" ry="2" />
<text  x="980.85" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (136 samples, 0.28%)</title><rect x="1000.4" y="309" width="3.3" height="15.0" fill="rgb(239,156,41)" rx="2" ry="2" />
<text  x="1003.36" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (52 samples, 0.11%)</title><rect x="52.3" y="469" width="1.3" height="15.0" fill="rgb(224,184,35)" rx="2" ry="2" />
<text  x="55.33" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (7 samples, 0.01%)</title><rect x="641.4" y="437" width="0.1" height="15.0" fill="rgb(208,167,54)" rx="2" ry="2" />
<text  x="644.37" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%)</title><rect x="486.5" y="277" width="0.5" height="15.0" fill="rgb(253,180,39)" rx="2" ry="2" />
<text  x="489.48" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (146 samples, 0.30%)</title><rect x="582.9" y="421" width="3.6" height="15.0" fill="rgb(254,204,38)" rx="2" ry="2" />
<text  x="585.93" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (40 samples, 0.08%)</title><rect x="732.3" y="373" width="1.0" height="15.0" fill="rgb(241,212,7)" rx="2" ry="2" />
<text  x="735.31" y="383.5" ></text>
</g>
<g >
<title>__start_context (285 samples, 0.59%)</title><rect x="15.1" y="613" width="7.0" height="15.0" fill="rgb(233,107,12)" rx="2" ry="2" />
<text  x="18.12" y="623.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (32 samples, 0.07%)</title><rect x="231.5" y="229" width="0.8" height="15.0" fill="rgb(212,143,43)" rx="2" ry="2" />
<text  x="234.53" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (25 samples, 0.05%)</title><rect x="1144.2" y="501" width="0.6" height="15.0" fill="rgb(222,100,2)" rx="2" ry="2" />
<text  x="1147.22" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (36 samples, 0.08%)</title><rect x="1022.0" y="229" width="0.9" height="15.0" fill="rgb(210,69,24)" rx="2" ry="2" />
<text  x="1024.98" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (16 samples, 0.03%)</title><rect x="699.7" y="421" width="0.4" height="15.0" fill="rgb(244,198,11)" rx="2" ry="2" />
<text  x="702.68" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (5 samples, 0.01%)</title><rect x="659.7" y="469" width="0.2" height="15.0" fill="rgb(239,131,0)" rx="2" ry="2" />
<text  x="662.74" y="479.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (12 samples, 0.03%)</title><rect x="75.8" y="453" width="0.3" height="15.0" fill="rgb(241,1,45)" rx="2" ry="2" />
<text  x="78.77" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%)</title><rect x="664.4" y="437" width="0.3" height="15.0" fill="rgb(243,169,2)" rx="2" ry="2" />
<text  x="667.37" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,818 samples, 3.79%)</title><rect x="319.9" y="213" width="44.7" height="15.0" fill="rgb(251,100,11)" rx="2" ry="2" />
<text  x="322.86" y="223.5" >quer..</text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (23 samples, 0.05%)</title><rect x="571.4" y="357" width="0.6" height="15.0" fill="rgb(232,148,23)" rx="2" ry="2" />
<text  x="574.43" y="367.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (8 samples, 0.02%)</title><rect x="888.6" y="341" width="0.2" height="15.0" fill="rgb(209,160,27)" rx="2" ry="2" />
<text  x="891.59" y="351.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%)</title><rect x="498.5" y="197" width="0.7" height="15.0" fill="rgb(250,132,16)" rx="2" ry="2" />
<text  x="501.49" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (15 samples, 0.03%)</title><rect x="780.3" y="277" width="0.4" height="15.0" fill="rgb(233,142,10)" rx="2" ry="2" />
<text  x="783.33" y="287.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="469" width="0.6" height="15.0" fill="rgb(218,75,54)" rx="2" ry="2" />
<text  x="1144.51" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (22 samples, 0.05%)</title><rect x="403.8" y="213" width="0.6" height="15.0" fill="rgb(236,209,47)" rx="2" ry="2" />
<text  x="406.81" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (28 samples, 0.06%)</title><rect x="719.4" y="389" width="0.6" height="15.0" fill="rgb(216,117,10)" rx="2" ry="2" />
<text  x="722.36" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%)</title><rect x="645.1" y="469" width="0.1" height="15.0" fill="rgb(210,189,24)" rx="2" ry="2" />
<text  x="648.09" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (64 samples, 0.13%)</title><rect x="483.0" y="325" width="1.5" height="15.0" fill="rgb(238,125,27)" rx="2" ry="2" />
<text  x="485.96" y="335.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (19 samples, 0.04%)</title><rect x="37.4" y="437" width="0.4" height="15.0" fill="rgb(243,141,7)" rx="2" ry="2" />
<text  x="40.36" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (61 samples, 0.13%)</title><rect x="283.0" y="309" width="1.5" height="15.0" fill="rgb(236,112,26)" rx="2" ry="2" />
<text  x="286.05" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (29 samples, 0.06%)</title><rect x="951.4" y="373" width="0.7" height="15.0" fill="rgb(250,182,16)" rx="2" ry="2" />
<text  x="954.43" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (6 samples, 0.01%)</title><rect x="21.2" y="373" width="0.2" height="15.0" fill="rgb(242,113,35)" rx="2" ry="2" />
<text  x="24.20" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (6 samples, 0.01%)</title><rect x="862.7" y="373" width="0.2" height="15.0" fill="rgb(217,123,15)" rx="2" ry="2" />
<text  x="865.73" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%)</title><rect x="1035.1" y="165" width="0.2" height="15.0" fill="rgb(245,214,22)" rx="2" ry="2" />
<text  x="1038.13" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%)</title><rect x="1051.1" y="213" width="0.7" height="15.0" fill="rgb(246,75,35)" rx="2" ry="2" />
<text  x="1054.14" y="223.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%)</title><rect x="1174.6" y="421" width="0.5" height="15.0" fill="rgb(227,88,34)" rx="2" ry="2" />
<text  x="1177.58" y="431.5" ></text>
</g>
<g >
<title>schema::partition_key_size (7 samples, 0.01%)</title><rect x="1127.8" y="421" width="0.1" height="15.0" fill="rgb(206,176,48)" rx="2" ry="2" />
<text  x="1130.77" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="475.6" y="181" width="0.2" height="15.0" fill="rgb(236,84,16)" rx="2" ry="2" />
<text  x="478.59" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%)</title><rect x="409.3" y="277" width="0.1" height="15.0" fill="rgb(208,62,31)" rx="2" ry="2" />
<text  x="412.28" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%)</title><rect x="844.5" y="373" width="0.2" height="15.0" fill="rgb(215,72,37)" rx="2" ry="2" />
<text  x="847.51" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (28 samples, 0.06%)</title><rect x="913.8" y="325" width="0.6" height="15.0" fill="rgb(224,23,31)" rx="2" ry="2" />
<text  x="916.75" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (26 samples, 0.05%)</title><rect x="326.9" y="181" width="0.6" height="15.0" fill="rgb(227,93,49)" rx="2" ry="2" />
<text  x="329.86" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%)</title><rect x="679.4" y="325" width="0.5" height="15.0" fill="rgb(239,94,33)" rx="2" ry="2" />
<text  x="682.37" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (9 samples, 0.02%)</title><rect x="20.7" y="389" width="0.2" height="15.0" fill="rgb(208,152,13)" rx="2" ry="2" />
<text  x="23.71" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (5 samples, 0.01%)</title><rect x="780.8" y="293" width="0.2" height="15.0" fill="rgb(208,158,29)" rx="2" ry="2" />
<text  x="783.85" y="303.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.01%)</title><rect x="842.2" y="389" width="0.1" height="15.0" fill="rgb(220,219,3)" rx="2" ry="2" />
<text  x="845.17" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%)</title><rect x="282.9" y="309" width="0.1" height="15.0" fill="rgb(208,193,35)" rx="2" ry="2" />
<text  x="285.92" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (82 samples, 0.17%)</title><rect x="394.0" y="213" width="2.0" height="15.0" fill="rgb(207,105,54)" rx="2" ry="2" />
<text  x="396.98" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (11 samples, 0.02%)</title><rect x="886.0" y="389" width="0.3" height="15.0" fill="rgb(223,130,30)" rx="2" ry="2" />
<text  x="889.02" y="399.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.02%)</title><rect x="525.6" y="293" width="0.2" height="15.0" fill="rgb(209,167,30)" rx="2" ry="2" />
<text  x="528.56" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (549 samples, 1.15%)</title><rect x="1153.6" y="485" width="13.5" height="15.0" fill="rgb(221,125,25)" rx="2" ry="2" />
<text  x="1156.60" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%)</title><rect x="1171.9" y="453" width="0.4" height="15.0" fill="rgb(217,132,11)" rx="2" ry="2" />
<text  x="1174.92" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (192 samples, 0.40%)</title><rect x="15.9" y="405" width="4.7" height="15.0" fill="rgb(214,7,19)" rx="2" ry="2" />
<text  x="18.91" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (524 samples, 1.09%)</title><rect x="272.5" y="357" width="12.9" height="15.0" fill="rgb(219,150,50)" rx="2" ry="2" />
<text  x="275.46" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (197 samples, 0.41%)</title><rect x="755.4" y="389" width="4.8" height="15.0" fill="rgb(235,178,11)" rx="2" ry="2" />
<text  x="758.36" y="399.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (102 samples, 0.21%)</title><rect x="414.4" y="373" width="2.5" height="15.0" fill="rgb(229,33,30)" rx="2" ry="2" />
<text  x="417.42" y="383.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (17 samples, 0.04%)</title><rect x="604.5" y="437" width="0.4" height="15.0" fill="rgb(223,66,24)" rx="2" ry="2" />
<text  x="607.53" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="608.5" y="405" width="0.1" height="15.0" fill="rgb(251,45,34)" rx="2" ry="2" />
<text  x="611.47" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (76 samples, 0.16%)</title><rect x="152.8" y="197" width="1.8" height="15.0" fill="rgb(223,4,2)" rx="2" ry="2" />
<text  x="155.75" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (25 samples, 0.05%)</title><rect x="947.9" y="325" width="0.6" height="15.0" fill="rgb(222,84,11)" rx="2" ry="2" />
<text  x="950.86" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (18 samples, 0.04%)</title><rect x="881.6" y="421" width="0.4" height="15.0" fill="rgb(234,151,40)" rx="2" ry="2" />
<text  x="884.59" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (14 samples, 0.03%)</title><rect x="805.3" y="197" width="0.3" height="15.0" fill="rgb(210,159,46)" rx="2" ry="2" />
<text  x="808.28" y="207.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (148 samples, 0.31%)</title><rect x="463.3" y="261" width="3.6" height="15.0" fill="rgb(254,215,40)" rx="2" ry="2" />
<text  x="466.26" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,205 samples, 2.51%)</title><rect x="1016.7" y="277" width="29.7" height="15.0" fill="rgb(242,4,43)" rx="2" ry="2" />
<text  x="1019.74" y="287.5" >se..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (7 samples, 0.01%)</title><rect x="17.8" y="277" width="0.2" height="15.0" fill="rgb(205,214,9)" rx="2" ry="2" />
<text  x="20.83" y="287.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (6 samples, 0.01%)</title><rect x="680.2" y="485" width="0.2" height="15.0" fill="rgb(243,145,2)" rx="2" ry="2" />
<text  x="683.23" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (20 samples, 0.04%)</title><rect x="73.4" y="405" width="0.5" height="15.0" fill="rgb(247,128,10)" rx="2" ry="2" />
<text  x="76.36" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="905.1" y="293" width="0.2" height="15.0" fill="rgb(233,188,4)" rx="2" ry="2" />
<text  x="908.13" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%)</title><rect x="565.2" y="309" width="0.1" height="15.0" fill="rgb(231,22,18)" rx="2" ry="2" />
<text  x="568.18" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%)</title><rect x="493.8" y="261" width="0.2" height="15.0" fill="rgb(229,212,50)" rx="2" ry="2" />
<text  x="496.82" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (32 samples, 0.07%)</title><rect x="863.3" y="453" width="0.8" height="15.0" fill="rgb(246,216,3)" rx="2" ry="2" />
<text  x="866.34" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (6 samples, 0.01%)</title><rect x="958.3" y="405" width="0.2" height="15.0" fill="rgb(254,169,33)" rx="2" ry="2" />
<text  x="961.32" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (511 samples, 1.07%)</title><rect x="184.9" y="101" width="12.6" height="15.0" fill="rgb(209,149,49)" rx="2" ry="2" />
<text  x="187.91" y="111.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (44 samples, 0.09%)</title><rect x="292.8" y="309" width="1.1" height="15.0" fill="rgb(226,196,4)" rx="2" ry="2" />
<text  x="295.80" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::run (46,955 samples, 97.99%)</title><rect x="22.4" y="549" width="1156.3" height="15.0" fill="rgb(229,112,37)" rx="2" ry="2" />
<text  x="25.44" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (39 samples, 0.08%)</title><rect x="623.0" y="485" width="1.0" height="15.0" fill="rgb(238,70,31)" rx="2" ry="2" />
<text  x="626.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (27 samples, 0.06%)</title><rect x="760.3" y="405" width="0.7" height="15.0" fill="rgb(230,168,43)" rx="2" ry="2" />
<text  x="763.31" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (337 samples, 0.70%)</title><rect x="796.6" y="181" width="8.3" height="15.0" fill="rgb(233,85,2)" rx="2" ry="2" />
<text  x="799.63" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (13 samples, 0.03%)</title><rect x="700.3" y="405" width="0.3" height="15.0" fill="rgb(230,214,54)" rx="2" ry="2" />
<text  x="703.32" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (173 samples, 0.36%)</title><rect x="849.2" y="421" width="4.2" height="15.0" fill="rgb(220,142,19)" rx="2" ry="2" />
<text  x="852.16" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%)</title><rect x="1001.4" y="245" width="1.7" height="15.0" fill="rgb(210,134,35)" rx="2" ry="2" />
<text  x="1004.37" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (5 samples, 0.01%)</title><rect x="577.5" y="389" width="0.2" height="15.0" fill="rgb(241,213,8)" rx="2" ry="2" />
<text  x="580.54" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%)</title><rect x="18.2" y="229" width="0.1" height="15.0" fill="rgb(251,127,25)" rx="2" ry="2" />
<text  x="21.18" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (5 samples, 0.01%)</title><rect x="17.1" y="261" width="0.1" height="15.0" fill="rgb(253,12,44)" rx="2" ry="2" />
<text  x="20.09" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (25 samples, 0.05%)</title><rect x="797.6" y="133" width="0.7" height="15.0" fill="rgb(205,130,25)" rx="2" ry="2" />
<text  x="800.64" y="143.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (22 samples, 0.05%)</title><rect x="679.4" y="341" width="0.5" height="15.0" fill="rgb(225,183,8)" rx="2" ry="2" />
<text  x="682.37" y="351.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.14%)</title><rect x="1073.3" y="325" width="1.6" height="15.0" fill="rgb(216,16,29)" rx="2" ry="2" />
<text  x="1076.32" y="335.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%)</title><rect x="624.7" y="485" width="0.4" height="15.0" fill="rgb(250,17,2)" rx="2" ry="2" />
<text  x="627.70" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (143 samples, 0.30%)</title><rect x="986.8" y="341" width="3.5" height="15.0" fill="rgb(249,32,23)" rx="2" ry="2" />
<text  x="989.79" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (13 samples, 0.03%)</title><rect x="629.9" y="453" width="0.3" height="15.0" fill="rgb(218,148,22)" rx="2" ry="2" />
<text  x="632.90" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (49 samples, 0.10%)</title><rect x="947.3" y="373" width="1.2" height="15.0" fill="rgb(242,9,24)" rx="2" ry="2" />
<text  x="950.32" y="383.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (34 samples, 0.07%)</title><rect x="127.7" y="261" width="0.8" height="15.0" fill="rgb(231,75,49)" rx="2" ry="2" />
<text  x="130.71" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (137 samples, 0.29%)</title><rect x="99.9" y="421" width="3.4" height="15.0" fill="rgb(229,198,8)" rx="2" ry="2" />
<text  x="102.93" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (9 samples, 0.02%)</title><rect x="266.9" y="341" width="0.2" height="15.0" fill="rgb(254,49,8)" rx="2" ry="2" />
<text  x="269.89" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (17 samples, 0.04%)</title><rect x="952.8" y="357" width="0.4" height="15.0" fill="rgb(232,209,8)" rx="2" ry="2" />
<text  x="955.78" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%)</title><rect x="681.7" y="469" width="0.3" height="15.0" fill="rgb(233,95,24)" rx="2" ry="2" />
<text  x="684.66" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (5 samples, 0.01%)</title><rect x="795.5" y="181" width="0.1" height="15.0" fill="rgb(236,229,23)" rx="2" ry="2" />
<text  x="798.48" y="191.5" ></text>
</g>
<g >
<title>table::make_reader (4,378 samples, 9.14%)</title><rect x="425.6" y="357" width="107.8" height="15.0" fill="rgb(210,157,42)" rx="2" ry="2" />
<text  x="428.60" y="367.5" >table::make_r..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (90 samples, 0.19%)</title><rect x="365.5" y="181" width="2.2" height="15.0" fill="rgb(206,24,7)" rx="2" ry="2" />
<text  x="368.52" y="191.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (5 samples, 0.01%)</title><rect x="749.9" y="373" width="0.2" height="15.0" fill="rgb(224,54,31)" rx="2" ry="2" />
<text  x="752.94" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%)</title><rect x="18.7" y="229" width="0.1" height="15.0" fill="rgb(208,203,46)" rx="2" ry="2" />
<text  x="21.69" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (51 samples, 0.11%)</title><rect x="952.1" y="389" width="1.3" height="15.0" fill="rgb(235,148,37)" rx="2" ry="2" />
<text  x="955.14" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%)</title><rect x="16.1" y="309" width="0.2" height="15.0" fill="rgb(222,81,30)" rx="2" ry="2" />
<text  x="19.06" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%)</title><rect x="582.8" y="389" width="0.1" height="15.0" fill="rgb(223,5,25)" rx="2" ry="2" />
<text  x="585.76" y="399.5" ></text>
</g>
<g >
<title>query::result::builder::builder (170 samples, 0.35%)</title><rect x="589.8" y="421" width="4.2" height="15.0" fill="rgb(231,141,35)" rx="2" ry="2" />
<text  x="592.81" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (37 samples, 0.08%)</title><rect x="290.4" y="373" width="0.9" height="15.0" fill="rgb(242,63,36)" rx="2" ry="2" />
<text  x="293.38" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (88 samples, 0.18%)</title><rect x="817.8" y="325" width="2.2" height="15.0" fill="rgb(218,160,10)" rx="2" ry="2" />
<text  x="820.81" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (32 samples, 0.07%)</title><rect x="1057.0" y="357" width="0.8" height="15.0" fill="rgb(243,115,31)" rx="2" ry="2" />
<text  x="1060.05" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (12 samples, 0.03%)</title><rect x="367.8" y="213" width="0.3" height="15.0" fill="rgb(210,187,35)" rx="2" ry="2" />
<text  x="370.76" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (42 samples, 0.09%)</title><rect x="653.7" y="485" width="1.1" height="15.0" fill="rgb(250,39,32)" rx="2" ry="2" />
<text  x="656.73" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%)</title><rect x="215.4" y="149" width="0.9" height="15.0" fill="rgb(239,160,15)" rx="2" ry="2" />
<text  x="218.38" y="159.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1,018 samples, 2.12%)</title><rect x="456.3" y="325" width="25.1" height="15.0" fill="rgb(221,51,3)" rx="2" ry="2" />
<text  x="459.29" y="335.5" >d..</text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (21 samples, 0.04%)</title><rect x="1142.5" y="229" width="0.6" height="15.0" fill="rgb(218,222,19)" rx="2" ry="2" />
<text  x="1145.55" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (11 samples, 0.02%)</title><rect x="330.1" y="165" width="0.3" height="15.0" fill="rgb(229,79,45)" rx="2" ry="2" />
<text  x="333.13" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%)</title><rect x="650.0" y="485" width="0.1" height="15.0" fill="rgb(221,155,44)" rx="2" ry="2" />
<text  x="652.96" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (12 samples, 0.03%)</title><rect x="250.0" y="229" width="0.3" height="15.0" fill="rgb(216,71,54)" rx="2" ry="2" />
<text  x="253.02" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (8 samples, 0.02%)</title><rect x="608.9" y="405" width="0.2" height="15.0" fill="rgb(250,72,43)" rx="2" ry="2" />
<text  x="611.91" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (5 samples, 0.01%)</title><rect x="918.7" y="341" width="0.1" height="15.0" fill="rgb(243,223,5)" rx="2" ry="2" />
<text  x="921.68" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (25 samples, 0.05%)</title><rect x="629.7" y="469" width="0.6" height="15.0" fill="rgb(236,220,2)" rx="2" ry="2" />
<text  x="632.67" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (6 samples, 0.01%)</title><rect x="744.4" y="357" width="0.2" height="15.0" fill="rgb(208,51,41)" rx="2" ry="2" />
<text  x="747.43" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%)</title><rect x="386.1" y="165" width="0.3" height="15.0" fill="rgb(249,106,19)" rx="2" ry="2" />
<text  x="389.13" y="175.5" ></text>
</g>
<g >
<title>sstring_hash::operator (12 samples, 0.03%)</title><rect x="830.3" y="309" width="0.3" height="15.0" fill="rgb(242,138,10)" rx="2" ry="2" />
<text  x="833.35" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (167 samples, 0.35%)</title><rect x="267.1" y="341" width="4.1" height="15.0" fill="rgb(250,26,48)" rx="2" ry="2" />
<text  x="270.11" y="351.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (19 samples, 0.04%)</title><rect x="1141.6" y="277" width="0.5" height="15.0" fill="rgb(215,152,1)" rx="2" ry="2" />
<text  x="1144.59" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (8 samples, 0.02%)</title><rect x="40.7" y="437" width="0.2" height="15.0" fill="rgb(231,97,30)" rx="2" ry="2" />
<text  x="43.68" y="447.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%)</title><rect x="664.0" y="453" width="0.7" height="15.0" fill="rgb(247,208,24)" rx="2" ry="2" />
<text  x="667.03" y="463.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (93 samples, 0.19%)</title><rect x="138.1" y="245" width="2.3" height="15.0" fill="rgb(247,66,41)" rx="2" ry="2" />
<text  x="141.08" y="255.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (197 samples, 0.41%)</title><rect x="68.0" y="405" width="4.8" height="15.0" fill="rgb(205,168,20)" rx="2" ry="2" />
<text  x="70.97" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (18 samples, 0.04%)</title><rect x="818.8" y="293" width="0.5" height="15.0" fill="rgb(224,85,28)" rx="2" ry="2" />
<text  x="821.85" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%)</title><rect x="456.0" y="293" width="0.3" height="15.0" fill="rgb(213,111,26)" rx="2" ry="2" />
<text  x="459.04" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (150 samples, 0.31%)</title><rect x="630.4" y="501" width="3.7" height="15.0" fill="rgb(247,216,17)" rx="2" ry="2" />
<text  x="633.36" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%)</title><rect x="789.2" y="229" width="0.1" height="15.0" fill="rgb(241,8,30)" rx="2" ry="2" />
<text  x="792.17" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (6 samples, 0.01%)</title><rect x="317.1" y="181" width="0.2" height="15.0" fill="rgb(250,98,7)" rx="2" ry="2" />
<text  x="320.13" y="191.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.09%)</title><rect x="584.3" y="389" width="1.0" height="15.0" fill="rgb(253,32,29)" rx="2" ry="2" />
<text  x="587.31" y="399.5" ></text>
</g>
<g >
<title>database::has_keyspace (89 samples, 0.19%)</title><rect x="828.6" y="357" width="2.2" height="15.0" fill="rgb(212,227,26)" rx="2" ry="2" />
<text  x="831.62" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (13 samples, 0.03%)</title><rect x="999.4" y="325" width="0.3" height="15.0" fill="rgb(247,89,1)" rx="2" ry="2" />
<text  x="1002.40" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (376 samples, 0.78%)</title><rect x="1072.2" y="341" width="9.3" height="15.0" fill="rgb(247,200,33)" rx="2" ry="2" />
<text  x="1075.22" y="351.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%)</title><rect x="58.5" y="453" width="1.0" height="15.0" fill="rgb(218,125,12)" rx="2" ry="2" />
<text  x="61.54" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (32 samples, 0.07%)</title><rect x="736.6" y="373" width="0.8" height="15.0" fill="rgb(223,100,26)" rx="2" ry="2" />
<text  x="739.60" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,498 samples, 7.30%)</title><rect x="306.2" y="245" width="86.1" height="15.0" fill="rgb(211,65,40)" rx="2" ry="2" />
<text  x="309.17" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (155 samples, 0.32%)</title><rect x="933.0" y="389" width="3.9" height="15.0" fill="rgb(222,207,27)" rx="2" ry="2" />
<text  x="936.03" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (23 samples, 0.05%)</title><rect x="739.8" y="293" width="0.6" height="15.0" fill="rgb(227,49,29)" rx="2" ry="2" />
<text  x="742.80" y="303.5" ></text>
</g>
<g >
<title>db::block_for (7 samples, 0.01%)</title><rect x="1070.4" y="341" width="0.2" height="15.0" fill="rgb(250,11,22)" rx="2" ry="2" />
<text  x="1073.42" y="351.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%)</title><rect x="1142.1" y="469" width="1.0" height="15.0" fill="rgb(243,48,1)" rx="2" ry="2" />
<text  x="1145.13" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (13 samples, 0.03%)</title><rect x="1136.8" y="405" width="0.4" height="15.0" fill="rgb(207,110,11)" rx="2" ry="2" />
<text  x="1139.83" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (52 samples, 0.11%)</title><rect x="823.7" y="341" width="1.3" height="15.0" fill="rgb(206,79,1)" rx="2" ry="2" />
<text  x="826.75" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%)</title><rect x="914.1" y="309" width="0.3" height="15.0" fill="rgb(227,27,10)" rx="2" ry="2" />
<text  x="917.07" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%)</title><rect x="510.1" y="325" width="0.2" height="15.0" fill="rgb(248,148,47)" rx="2" ry="2" />
<text  x="513.14" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (14 samples, 0.03%)</title><rect x="803.7" y="85" width="0.3" height="15.0" fill="rgb(248,118,44)" rx="2" ry="2" />
<text  x="806.70" y="95.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (25 samples, 0.05%)</title><rect x="270.6" y="325" width="0.6" height="15.0" fill="rgb(220,51,36)" rx="2" ry="2" />
<text  x="273.61" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%)</title><rect x="623.8" y="453" width="0.2" height="15.0" fill="rgb(230,223,18)" rx="2" ry="2" />
<text  x="626.81" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (19 samples, 0.04%)</title><rect x="1124.4" y="405" width="0.5" height="15.0" fill="rgb(231,83,3)" rx="2" ry="2" />
<text  x="1127.45" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (14 samples, 0.03%)</title><rect x="502.8" y="181" width="0.4" height="15.0" fill="rgb(249,218,3)" rx="2" ry="2" />
<text  x="505.83" y="191.5" ></text>
</g>
<g >
<title>__dynamic_cast (74 samples, 0.15%)</title><rect x="879.6" y="421" width="1.8" height="15.0" fill="rgb(228,7,32)" rx="2" ry="2" />
<text  x="882.62" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (26 samples, 0.05%)</title><rect x="1068.6" y="261" width="0.7" height="15.0" fill="rgb(233,225,5)" rx="2" ry="2" />
<text  x="1071.65" y="271.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (31 samples, 0.06%)</title><rect x="242.2" y="213" width="0.8" height="15.0" fill="rgb(232,153,31)" rx="2" ry="2" />
<text  x="245.24" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (6 samples, 0.01%)</title><rect x="22.3" y="485" width="0.1" height="15.0" fill="rgb(219,67,31)" rx="2" ry="2" />
<text  x="25.29" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (28 samples, 0.06%)</title><rect x="819.3" y="293" width="0.7" height="15.0" fill="rgb(232,182,21)" rx="2" ry="2" />
<text  x="822.29" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (6 samples, 0.01%)</title><rect x="22.3" y="533" width="0.1" height="15.0" fill="rgb(208,199,26)" rx="2" ry="2" />
<text  x="25.29" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (63 samples, 0.13%)</title><rect x="414.8" y="357" width="1.6" height="15.0" fill="rgb(205,82,14)" rx="2" ry="2" />
<text  x="417.84" y="367.5" ></text>
</g>
<g >
<title>partition_entry::read (40 samples, 0.08%)</title><rect x="514.6" y="325" width="1.0" height="15.0" fill="rgb(254,184,43)" rx="2" ry="2" />
<text  x="517.65" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (166 samples, 0.35%)</title><rect x="994.1" y="325" width="4.1" height="15.0" fill="rgb(217,47,54)" rx="2" ry="2" />
<text  x="997.13" y="335.5" ></text>
</g>
<g >
<title>database::query (5 samples, 0.01%)</title><rect x="22.6" y="517" width="0.2" height="15.0" fill="rgb(231,186,3)" rx="2" ry="2" />
<text  x="25.63" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (18 samples, 0.04%)</title><rect x="508.7" y="277" width="0.5" height="15.0" fill="rgb(215,88,15)" rx="2" ry="2" />
<text  x="511.74" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (500 samples, 1.04%)</title><rect x="1026.5" y="229" width="12.3" height="15.0" fill="rgb(235,159,27)" rx="2" ry="2" />
<text  x="1029.46" y="239.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (136 samples, 0.28%)</title><rect x="358.5" y="165" width="3.4" height="15.0" fill="rgb(249,225,12)" rx="2" ry="2" />
<text  x="361.52" y="175.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (8 samples, 0.02%)</title><rect x="803.2" y="117" width="0.2" height="15.0" fill="rgb(239,124,41)" rx="2" ry="2" />
<text  x="806.18" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (29 samples, 0.06%)</title><rect x="530.9" y="341" width="0.7" height="15.0" fill="rgb(209,157,5)" rx="2" ry="2" />
<text  x="533.85" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (174 samples, 0.36%)</title><rect x="225.8" y="213" width="4.3" height="15.0" fill="rgb(253,77,41)" rx="2" ry="2" />
<text  x="228.79" y="223.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,395 samples, 23.78%)</title><rect x="863.1" y="501" width="280.7" height="15.0" fill="rgb(238,24,21)" rx="2" ry="2" />
<text  x="866.15" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (6 samples, 0.01%)</title><rect x="984.4" y="357" width="0.1" height="15.0" fill="rgb(220,207,3)" rx="2" ry="2" />
<text  x="987.35" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (5 samples, 0.01%)</title><rect x="318.7" y="149" width="0.1" height="15.0" fill="rgb(248,165,33)" rx="2" ry="2" />
<text  x="321.65" y="159.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (8 samples, 0.02%)</title><rect x="685.6" y="437" width="0.2" height="15.0" fill="rgb(223,116,45)" rx="2" ry="2" />
<text  x="688.60" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="565.3" y="309" width="0.1" height="15.0" fill="rgb(224,119,53)" rx="2" ry="2" />
<text  x="568.30" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (12 samples, 0.03%)</title><rect x="942.8" y="405" width="0.3" height="15.0" fill="rgb(228,148,19)" rx="2" ry="2" />
<text  x="945.76" y="415.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (11 samples, 0.02%)</title><rect x="798.0" y="117" width="0.3" height="15.0" fill="rgb(207,20,3)" rx="2" ry="2" />
<text  x="800.99" y="127.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (60 samples, 0.13%)</title><rect x="10.4" y="581" width="1.5" height="15.0" fill="rgb(213,145,14)" rx="2" ry="2" />
<text  x="13.39" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%)</title><rect x="984.5" y="357" width="0.1" height="15.0" fill="rgb(242,185,43)" rx="2" ry="2" />
<text  x="987.50" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (41 samples, 0.09%)</title><rect x="961.8" y="373" width="1.0" height="15.0" fill="rgb(226,7,43)" rx="2" ry="2" />
<text  x="964.82" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%)</title><rect x="582.5" y="405" width="0.1" height="15.0" fill="rgb(212,91,13)" rx="2" ry="2" />
<text  x="585.49" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%)</title><rect x="857.4" y="421" width="0.2" height="15.0" fill="rgb(234,166,21)" rx="2" ry="2" />
<text  x="860.43" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (6 samples, 0.01%)</title><rect x="22.3" y="517" width="0.1" height="15.0" fill="rgb(220,73,18)" rx="2" ry="2" />
<text  x="25.29" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (11 samples, 0.02%)</title><rect x="981.7" y="341" width="0.3" height="15.0" fill="rgb(224,90,1)" rx="2" ry="2" />
<text  x="984.74" y="351.5" ></text>
</g>
<g >
<title>all (47,918 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(220,142,32)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (10 samples, 0.02%)</title><rect x="855.1" y="453" width="0.2" height="15.0" fill="rgb(233,6,5)" rx="2" ry="2" />
<text  x="858.07" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (15 samples, 0.03%)</title><rect x="1138.8" y="421" width="0.3" height="15.0" fill="rgb(221,121,53)" rx="2" ry="2" />
<text  x="1141.78" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%)</title><rect x="1159.4" y="373" width="0.8" height="15.0" fill="rgb(235,21,6)" rx="2" ry="2" />
<text  x="1162.39" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (36 samples, 0.08%)</title><rect x="944.1" y="389" width="0.9" height="15.0" fill="rgb(239,189,27)" rx="2" ry="2" />
<text  x="947.09" y="399.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (56 samples, 0.12%)</title><rect x="899.6" y="261" width="1.4" height="15.0" fill="rgb(215,107,14)" rx="2" ry="2" />
<text  x="902.62" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (93 samples, 0.19%)</title><rect x="157.6" y="197" width="2.2" height="15.0" fill="rgb(231,168,11)" rx="2" ry="2" />
<text  x="160.56" y="207.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (128 samples, 0.27%)</title><rect x="978.6" y="341" width="3.1" height="15.0" fill="rgb(223,185,53)" rx="2" ry="2" />
<text  x="981.59" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (65 samples, 0.14%)</title><rect x="757.1" y="341" width="1.6" height="15.0" fill="rgb(245,70,53)" rx="2" ry="2" />
<text  x="760.11" y="351.5" ></text>
</g>
<g >
<title>free (32 samples, 0.07%)</title><rect x="403.0" y="197" width="0.8" height="15.0" fill="rgb(247,166,3)" rx="2" ry="2" />
<text  x="405.97" y="207.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (12 samples, 0.03%)</title><rect x="804.3" y="85" width="0.3" height="15.0" fill="rgb(210,65,15)" rx="2" ry="2" />
<text  x="807.29" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="690.6" y="469" width="0.1" height="15.0" fill="rgb(251,93,29)" rx="2" ry="2" />
<text  x="693.62" y="479.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (95 samples, 0.20%)</title><rect x="616.8" y="421" width="2.3" height="15.0" fill="rgb(225,122,34)" rx="2" ry="2" />
<text  x="619.77" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (30 samples, 0.06%)</title><rect x="726.4" y="389" width="0.7" height="15.0" fill="rgb(209,175,19)" rx="2" ry="2" />
<text  x="729.35" y="399.5" ></text>
</g>
<g >
<title>operator delete (65 samples, 0.14%)</title><rect x="573.6" y="341" width="1.6" height="15.0" fill="rgb(226,172,17)" rx="2" ry="2" />
<text  x="576.63" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (7 samples, 0.01%)</title><rect x="546.8" y="421" width="0.2" height="15.0" fill="rgb(225,183,22)" rx="2" ry="2" />
<text  x="549.83" y="431.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%)</title><rect x="512.9" y="325" width="1.0" height="15.0" fill="rgb(220,184,31)" rx="2" ry="2" />
<text  x="515.90" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (6 samples, 0.01%)</title><rect x="19.2" y="277" width="0.1" height="15.0" fill="rgb(210,134,3)" rx="2" ry="2" />
<text  x="22.19" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%)</title><rect x="666.2" y="437" width="0.2" height="15.0" fill="rgb(235,108,33)" rx="2" ry="2" />
<text  x="669.19" y="447.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%)</title><rect x="248.5" y="181" width="0.5" height="15.0" fill="rgb(242,225,48)" rx="2" ry="2" />
<text  x="251.52" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (8 samples, 0.02%)</title><rect x="1176.6" y="421" width="0.2" height="15.0" fill="rgb(241,131,15)" rx="2" ry="2" />
<text  x="1179.58" y="431.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%)</title><rect x="987.8" y="293" width="1.7" height="15.0" fill="rgb(237,74,47)" rx="2" ry="2" />
<text  x="990.75" y="303.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (688 samples, 1.44%)</title><rect x="180.8" y="117" width="16.9" height="15.0" fill="rgb(242,11,27)" rx="2" ry="2" />
<text  x="183.75" y="127.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (6 samples, 0.01%)</title><rect x="939.5" y="405" width="0.2" height="15.0" fill="rgb(233,157,25)" rx="2" ry="2" />
<text  x="942.51" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (8 samples, 0.02%)</title><rect x="1128.1" y="421" width="0.2" height="15.0" fill="rgb(213,15,18)" rx="2" ry="2" />
<text  x="1131.12" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (50 samples, 0.10%)</title><rect x="805.9" y="261" width="1.2" height="15.0" fill="rgb(237,185,20)" rx="2" ry="2" />
<text  x="808.89" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.03%)</title><rect x="766.0" y="325" width="0.4" height="15.0" fill="rgb(220,85,43)" rx="2" ry="2" />
<text  x="769.05" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.03%)</title><rect x="348.7" y="165" width="0.3" height="15.0" fill="rgb(223,176,2)" rx="2" ry="2" />
<text  x="351.67" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="1158.0" y="453" width="0.2" height="15.0" fill="rgb(212,2,44)" rx="2" ry="2" />
<text  x="1161.01" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (10 samples, 0.02%)</title><rect x="1111.2" y="373" width="0.2" height="15.0" fill="rgb(229,125,17)" rx="2" ry="2" />
<text  x="1114.20" y="383.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%)</title><rect x="493.5" y="261" width="0.2" height="15.0" fill="rgb(241,144,6)" rx="2" ry="2" />
<text  x="496.54" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%)</title><rect x="10.1" y="437" width="0.2" height="15.0" fill="rgb(210,39,20)" rx="2" ry="2" />
<text  x="13.10" y="447.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (9 samples, 0.02%)</title><rect x="596.1" y="405" width="0.2" height="15.0" fill="rgb(235,1,45)" rx="2" ry="2" />
<text  x="599.11" y="415.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (11 samples, 0.02%)</title><rect x="1142.5" y="181" width="0.3" height="15.0" fill="rgb(209,214,19)" rx="2" ry="2" />
<text  x="1145.55" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,965 samples, 10.36%)</title><rect x="291.8" y="357" width="122.3" height="15.0" fill="rgb(229,50,51)" rx="2" ry="2" />
<text  x="294.84" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%)</title><rect x="862.7" y="405" width="0.3" height="15.0" fill="rgb(208,6,19)" rx="2" ry="2" />
<text  x="865.65" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (17 samples, 0.04%)</title><rect x="401.0" y="165" width="0.4" height="15.0" fill="rgb(253,84,49)" rx="2" ry="2" />
<text  x="403.98" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (38 samples, 0.08%)</title><rect x="33.1" y="485" width="1.0" height="15.0" fill="rgb(229,187,3)" rx="2" ry="2" />
<text  x="36.15" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%)</title><rect x="753.7" y="357" width="0.1" height="15.0" fill="rgb(224,181,4)" rx="2" ry="2" />
<text  x="756.66" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (38 samples, 0.08%)</title><rect x="1068.4" y="277" width="0.9" height="15.0" fill="rgb(221,221,26)" rx="2" ry="2" />
<text  x="1071.35" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (295 samples, 0.62%)</title><rect x="1156.9" y="469" width="7.2" height="15.0" fill="rgb(252,141,12)" rx="2" ry="2" />
<text  x="1159.88" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (30 samples, 0.06%)</title><rect x="412.8" y="261" width="0.8" height="15.0" fill="rgb(207,188,47)" rx="2" ry="2" />
<text  x="415.82" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (172 samples, 0.36%)</title><rect x="193.1" y="53" width="4.3" height="15.0" fill="rgb(241,192,26)" rx="2" ry="2" />
<text  x="196.11" y="63.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (44 samples, 0.09%)</title><rect x="1098.4" y="293" width="1.1" height="15.0" fill="rgb(208,138,6)" rx="2" ry="2" />
<text  x="1101.39" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (11 samples, 0.02%)</title><rect x="440.8" y="261" width="0.3" height="15.0" fill="rgb(241,5,18)" rx="2" ry="2" />
<text  x="443.82" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (180 samples, 0.38%)</title><rect x="1064.9" y="309" width="4.4" height="15.0" fill="rgb(228,172,9)" rx="2" ry="2" />
<text  x="1067.88" y="319.5" ></text>
</g>
<g >
<title>dht::minimum_token (6 samples, 0.01%)</title><rect x="431.9" y="325" width="0.1" height="15.0" fill="rgb(248,48,11)" rx="2" ry="2" />
<text  x="434.88" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="940.9" y="389" width="0.2" height="15.0" fill="rgb(238,116,29)" rx="2" ry="2" />
<text  x="943.91" y="399.5" ></text>
</g>
<g >
<title>row_cache::make_reader (17 samples, 0.04%)</title><rect x="424.8" y="357" width="0.5" height="15.0" fill="rgb(246,152,36)" rx="2" ry="2" />
<text  x="427.84" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (5 samples, 0.01%)</title><rect x="990.0" y="309" width="0.2" height="15.0" fill="rgb(240,78,26)" rx="2" ry="2" />
<text  x="993.04" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (33 samples, 0.07%)</title><rect x="276.6" y="293" width="0.8" height="15.0" fill="rgb(228,207,26)" rx="2" ry="2" />
<text  x="279.62" y="303.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (7 samples, 0.01%)</title><rect x="901.0" y="277" width="0.2" height="15.0" fill="rgb(213,9,50)" rx="2" ry="2" />
<text  x="904.00" y="287.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (8 samples, 0.02%)</title><rect x="506.9" y="245" width="0.2" height="15.0" fill="rgb(243,37,54)" rx="2" ry="2" />
<text  x="509.87" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (5 samples, 0.01%)</title><rect x="860.0" y="485" width="0.1" height="15.0" fill="rgb(219,32,8)" rx="2" ry="2" />
<text  x="863.02" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.01%)</title><rect x="17.8" y="229" width="0.2" height="15.0" fill="rgb(230,2,30)" rx="2" ry="2" />
<text  x="20.83" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (17 samples, 0.04%)</title><rect x="1063.9" y="325" width="0.4" height="15.0" fill="rgb(247,136,9)" rx="2" ry="2" />
<text  x="1066.92" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (16 samples, 0.03%)</title><rect x="1143.1" y="485" width="0.4" height="15.0" fill="rgb(217,36,4)" rx="2" ry="2" />
<text  x="1146.14" y="495.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%)</title><rect x="851.4" y="357" width="1.6" height="15.0" fill="rgb(254,30,47)" rx="2" ry="2" />
<text  x="854.43" y="367.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (30 samples, 0.06%)</title><rect x="311.2" y="165" width="0.7" height="15.0" fill="rgb(205,83,10)" rx="2" ry="2" />
<text  x="314.17" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (567 samples, 1.18%)</title><rect x="691.7" y="501" width="14.0" height="15.0" fill="rgb(225,5,45)" rx="2" ry="2" />
<text  x="694.73" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (58 samples, 0.12%)</title><rect x="387.4" y="165" width="1.5" height="15.0" fill="rgb(250,166,18)" rx="2" ry="2" />
<text  x="390.43" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%)</title><rect x="417.8" y="357" width="0.5" height="15.0" fill="rgb(215,128,2)" rx="2" ry="2" />
<text  x="420.80" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (26 samples, 0.05%)</title><rect x="206.0" y="133" width="0.6" height="15.0" fill="rgb(208,201,36)" rx="2" ry="2" />
<text  x="208.99" y="143.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%)</title><rect x="815.0" y="277" width="0.1" height="15.0" fill="rgb(213,149,37)" rx="2" ry="2" />
<text  x="818.00" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (885 samples, 1.85%)</title><rect x="488.1" y="309" width="21.7" height="15.0" fill="rgb(237,42,4)" rx="2" ry="2" />
<text  x="491.05" y="319.5" >s..</text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (40 samples, 0.08%)</title><rect x="951.2" y="389" width="0.9" height="15.0" fill="rgb(239,104,40)" rx="2" ry="2" />
<text  x="954.16" y="399.5" ></text>
</g>
<g >
<title>operator new (82 samples, 0.17%)</title><rect x="976.4" y="357" width="2.0" height="15.0" fill="rgb(254,156,24)" rx="2" ry="2" />
<text  x="979.37" y="367.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (14 samples, 0.03%)</title><rect x="1043.0" y="245" width="0.4" height="15.0" fill="rgb(210,137,9)" rx="2" ry="2" />
<text  x="1046.01" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (800 samples, 1.67%)</title><rect x="1081.7" y="341" width="19.7" height="15.0" fill="rgb(224,194,48)" rx="2" ry="2" />
<text  x="1084.75" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (10 samples, 0.02%)</title><rect x="869.2" y="469" width="0.3" height="15.0" fill="rgb(231,228,9)" rx="2" ry="2" />
<text  x="872.23" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (15 samples, 0.03%)</title><rect x="1101.8" y="341" width="0.4" height="15.0" fill="rgb(254,175,17)" rx="2" ry="2" />
<text  x="1104.82" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (29 samples, 0.06%)</title><rect x="827.6" y="293" width="0.7" height="15.0" fill="rgb(244,184,46)" rx="2" ry="2" />
<text  x="830.59" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%)</title><rect x="928.6" y="341" width="0.2" height="15.0" fill="rgb(238,110,8)" rx="2" ry="2" />
<text  x="931.60" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (387 samples, 0.81%)</title><rect x="275.0" y="325" width="9.5" height="15.0" fill="rgb(244,18,1)" rx="2" ry="2" />
<text  x="278.02" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (48 samples, 0.10%)</title><rect x="920.3" y="341" width="1.2" height="15.0" fill="rgb(246,96,9)" rx="2" ry="2" />
<text  x="923.33" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (7 samples, 0.01%)</title><rect x="10.1" y="501" width="0.2" height="15.0" fill="rgb(233,74,54)" rx="2" ry="2" />
<text  x="13.10" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%)</title><rect x="668.4" y="485" width="0.4" height="15.0" fill="rgb(215,45,4)" rx="2" ry="2" />
<text  x="671.38" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%)</title><rect x="853.5" y="421" width="0.1" height="15.0" fill="rgb(208,141,18)" rx="2" ry="2" />
<text  x="856.49" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%)</title><rect x="1116.0" y="357" width="0.1" height="15.0" fill="rgb(229,226,1)" rx="2" ry="2" />
<text  x="1118.98" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,940 samples, 47.87%)</title><rect x="55.0" y="469" width="564.9" height="15.0" fill="rgb(220,181,38)" rx="2" ry="2" />
<text  x="58.02" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (133 samples, 0.28%)</title><rect x="741.1" y="325" width="3.3" height="15.0" fill="rgb(225,41,4)" rx="2" ry="2" />
<text  x="744.08" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%)</title><rect x="936.4" y="309" width="0.2" height="15.0" fill="rgb(238,71,31)" rx="2" ry="2" />
<text  x="939.41" y="319.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%)</title><rect x="657.9" y="485" width="0.7" height="15.0" fill="rgb(227,213,14)" rx="2" ry="2" />
<text  x="660.87" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (8 samples, 0.02%)</title><rect x="17.8" y="293" width="0.2" height="15.0" fill="rgb(223,54,39)" rx="2" ry="2" />
<text  x="20.81" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="528.7" y="245" width="0.3" height="15.0" fill="rgb(205,1,24)" rx="2" ry="2" />
<text  x="531.73" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%)</title><rect x="857.6" y="469" width="0.1" height="15.0" fill="rgb(224,134,20)" rx="2" ry="2" />
<text  x="860.56" y="479.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (5 samples, 0.01%)</title><rect x="669.6" y="453" width="0.2" height="15.0" fill="rgb(237,8,21)" rx="2" ry="2" />
<text  x="672.64" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (47 samples, 0.10%)</title><rect x="898.0" y="261" width="1.1" height="15.0" fill="rgb(239,25,39)" rx="2" ry="2" />
<text  x="900.99" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (34 samples, 0.07%)</title><rect x="101.3" y="373" width="0.9" height="15.0" fill="rgb(207,150,52)" rx="2" ry="2" />
<text  x="104.34" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (284 samples, 0.59%)</title><rect x="537.9" y="405" width="7.0" height="15.0" fill="rgb(227,137,18)" rx="2" ry="2" />
<text  x="540.87" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (8 samples, 0.02%)</title><rect x="449.1" y="277" width="0.2" height="15.0" fill="rgb(245,179,14)" rx="2" ry="2" />
<text  x="452.10" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (17 samples, 0.04%)</title><rect x="214.3" y="117" width="0.5" height="15.0" fill="rgb(239,55,0)" rx="2" ry="2" />
<text  x="217.34" y="127.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (29 samples, 0.06%)</title><rect x="1145.0" y="501" width="0.7" height="15.0" fill="rgb(244,72,26)" rx="2" ry="2" />
<text  x="1147.96" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (96 samples, 0.20%)</title><rect x="734.1" y="373" width="2.4" height="15.0" fill="rgb(206,213,2)" rx="2" ry="2" />
<text  x="737.13" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (52 samples, 0.11%)</title><rect x="248.0" y="197" width="1.3" height="15.0" fill="rgb(235,45,42)" rx="2" ry="2" />
<text  x="251.00" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (10 samples, 0.02%)</title><rect x="716.3" y="453" width="0.2" height="15.0" fill="rgb(229,125,13)" rx="2" ry="2" />
<text  x="719.28" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,182 samples, 12.90%)</title><rect x="119.3" y="357" width="152.2" height="15.0" fill="rgb(244,15,40)" rx="2" ry="2" />
<text  x="122.29" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (189 samples, 0.39%)</title><rect x="15.9" y="389" width="4.7" height="15.0" fill="rgb(219,178,2)" rx="2" ry="2" />
<text  x="18.91" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%)</title><rect x="1037.4" y="213" width="0.2" height="15.0" fill="rgb(225,79,36)" rx="2" ry="2" />
<text  x="1040.45" y="223.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (13 samples, 0.03%)</title><rect x="648.3" y="437" width="0.4" height="15.0" fill="rgb(205,40,34)" rx="2" ry="2" />
<text  x="651.34" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (30 samples, 0.06%)</title><rect x="794.7" y="181" width="0.8" height="15.0" fill="rgb(237,35,20)" rx="2" ry="2" />
<text  x="797.74" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (29 samples, 0.06%)</title><rect x="947.8" y="341" width="0.7" height="15.0" fill="rgb(214,197,13)" rx="2" ry="2" />
<text  x="950.76" y="351.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (19 samples, 0.04%)</title><rect x="429.7" y="341" width="0.5" height="15.0" fill="rgb(240,105,1)" rx="2" ry="2" />
<text  x="432.69" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%)</title><rect x="649.7" y="469" width="0.3" height="15.0" fill="rgb(211,120,17)" rx="2" ry="2" />
<text  x="652.67" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (23 samples, 0.05%)</title><rect x="814.9" y="293" width="0.5" height="15.0" fill="rgb(206,113,26)" rx="2" ry="2" />
<text  x="817.86" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (12 samples, 0.03%)</title><rect x="645.9" y="469" width="0.3" height="15.0" fill="rgb(217,188,49)" rx="2" ry="2" />
<text  x="648.88" y="479.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (90 samples, 0.19%)</title><rect x="510.7" y="325" width="2.2" height="15.0" fill="rgb(243,159,24)" rx="2" ry="2" />
<text  x="513.68" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (29 samples, 0.06%)</title><rect x="652.2" y="485" width="0.7" height="15.0" fill="rgb(208,100,50)" rx="2" ry="2" />
<text  x="655.16" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (35 samples, 0.07%)</title><rect x="150.5" y="229" width="0.8" height="15.0" fill="rgb(251,137,2)" rx="2" ry="2" />
<text  x="153.49" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (11 samples, 0.02%)</title><rect x="945.4" y="405" width="0.3" height="15.0" fill="rgb(212,97,20)" rx="2" ry="2" />
<text  x="948.45" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.01%)</title><rect x="17.9" y="165" width="0.1" height="15.0" fill="rgb(229,77,42)" rx="2" ry="2" />
<text  x="20.86" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%)</title><rect x="528.5" y="245" width="0.2" height="15.0" fill="rgb(226,134,33)" rx="2" ry="2" />
<text  x="531.46" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,316 samples, 4.83%)</title><rect x="999.7" y="325" width="57.1" height="15.0" fill="rgb(240,186,33)" rx="2" ry="2" />
<text  x="1002.74" y="335.5" >servic..</text>
</g>
<g >
<title>cql3::query_options::query_options (200 samples, 0.42%)</title><rect x="848.7" y="437" width="4.9" height="15.0" fill="rgb(208,204,3)" rx="2" ry="2" />
<text  x="851.69" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (19 samples, 0.04%)</title><rect x="205.2" y="117" width="0.4" height="15.0" fill="rgb(212,8,9)" rx="2" ry="2" />
<text  x="208.18" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%)</title><rect x="824.6" y="293" width="0.4" height="15.0" fill="rgb(226,168,4)" rx="2" ry="2" />
<text  x="827.58" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%)</title><rect x="751.6" y="405" width="0.2" height="15.0" fill="rgb(215,138,28)" rx="2" ry="2" />
<text  x="754.62" y="415.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (9 samples, 0.02%)</title><rect x="331.7" y="181" width="0.2" height="15.0" fill="rgb(206,32,50)" rx="2" ry="2" />
<text  x="334.66" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%)</title><rect x="509.7" y="293" width="0.1" height="15.0" fill="rgb(223,195,9)" rx="2" ry="2" />
<text  x="512.70" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (12 samples, 0.03%)</title><rect x="409.8" y="261" width="0.3" height="15.0" fill="rgb(212,62,24)" rx="2" ry="2" />
<text  x="412.84" y="271.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (48 samples, 0.10%)</title><rect x="935.5" y="341" width="1.2" height="15.0" fill="rgb(215,119,45)" rx="2" ry="2" />
<text  x="938.47" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (145 samples, 0.30%)</title><rect x="796.9" y="165" width="3.6" height="15.0" fill="rgb(242,200,42)" rx="2" ry="2" />
<text  x="799.93" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (11 samples, 0.02%)</title><rect x="54.1" y="469" width="0.3" height="15.0" fill="rgb(226,224,44)" rx="2" ry="2" />
<text  x="57.08" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.03%)</title><rect x="731.7" y="389" width="0.3" height="15.0" fill="rgb(241,209,35)" rx="2" ry="2" />
<text  x="734.67" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (23 samples, 0.05%)</title><rect x="1042.0" y="213" width="0.6" height="15.0" fill="rgb(241,113,53)" rx="2" ry="2" />
<text  x="1045.03" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (7 samples, 0.01%)</title><rect x="734.7" y="309" width="0.1" height="15.0" fill="rgb(241,40,18)" rx="2" ry="2" />
<text  x="737.68" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%)</title><rect x="989.0" y="261" width="0.5" height="15.0" fill="rgb(219,228,50)" rx="2" ry="2" />
<text  x="991.98" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (8 samples, 0.02%)</title><rect x="46.0" y="485" width="0.2" height="15.0" fill="rgb(244,156,1)" rx="2" ry="2" />
<text  x="48.98" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (7 samples, 0.01%)</title><rect x="544.3" y="389" width="0.2" height="15.0" fill="rgb(237,149,44)" rx="2" ry="2" />
<text  x="547.30" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (11 samples, 0.02%)</title><rect x="675.9" y="469" width="0.2" height="15.0" fill="rgb(223,211,43)" rx="2" ry="2" />
<text  x="678.87" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (42 samples, 0.09%)</title><rect x="797.4" y="149" width="1.1" height="15.0" fill="rgb(249,214,22)" rx="2" ry="2" />
<text  x="800.42" y="159.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (11 samples, 0.02%)</title><rect x="669.5" y="469" width="0.3" height="15.0" fill="rgb(212,163,31)" rx="2" ry="2" />
<text  x="672.49" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (39 samples, 0.08%)</title><rect x="1142.2" y="405" width="0.9" height="15.0" fill="rgb(226,121,31)" rx="2" ry="2" />
<text  x="1145.18" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (13 samples, 0.03%)</title><rect x="226.8" y="181" width="0.3" height="15.0" fill="rgb(221,226,14)" rx="2" ry="2" />
<text  x="229.78" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="213.9" y="85" width="0.2" height="15.0" fill="rgb(212,18,26)" rx="2" ry="2" />
<text  x="216.87" y="95.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (10 samples, 0.02%)</title><rect x="1104.9" y="341" width="0.3" height="15.0" fill="rgb(205,180,38)" rx="2" ry="2" />
<text  x="1107.92" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%)</title><rect x="609.1" y="405" width="0.2" height="15.0" fill="rgb(224,126,29)" rx="2" ry="2" />
<text  x="612.11" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (13 samples, 0.03%)</title><rect x="1069.5" y="309" width="0.3" height="15.0" fill="rgb(209,53,48)" rx="2" ry="2" />
<text  x="1072.46" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (18 samples, 0.04%)</title><rect x="396.3" y="245" width="0.4" height="15.0" fill="rgb(209,100,21)" rx="2" ry="2" />
<text  x="399.30" y="255.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%)</title><rect x="600.7" y="421" width="0.2" height="15.0" fill="rgb(224,64,17)" rx="2" ry="2" />
<text  x="603.71" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (39 samples, 0.08%)</title><rect x="644.0" y="453" width="1.0" height="15.0" fill="rgb(214,157,15)" rx="2" ry="2" />
<text  x="647.01" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (20 samples, 0.04%)</title><rect x="862.6" y="485" width="0.5" height="15.0" fill="rgb(247,121,10)" rx="2" ry="2" />
<text  x="865.58" y="495.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%)</title><rect x="663.2" y="469" width="0.4" height="15.0" fill="rgb(220,119,2)" rx="2" ry="2" />
<text  x="666.21" y="479.5" ></text>
</g>
<g >
<title>operator new (75 samples, 0.16%)</title><rect x="1128.7" y="405" width="1.8" height="15.0" fill="rgb(221,128,16)" rx="2" ry="2" />
<text  x="1131.66" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%)</title><rect x="390.9" y="229" width="0.2" height="15.0" fill="rgb(226,26,20)" rx="2" ry="2" />
<text  x="393.93" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (111 samples, 0.23%)</title><rect x="987.3" y="309" width="2.7" height="15.0" fill="rgb(215,55,14)" rx="2" ry="2" />
<text  x="990.31" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (20 samples, 0.04%)</title><rect x="841.7" y="373" width="0.5" height="15.0" fill="rgb(222,43,38)" rx="2" ry="2" />
<text  x="844.67" y="383.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (549 samples, 1.15%)</title><rect x="1083.9" y="293" width="13.6" height="15.0" fill="rgb(249,90,37)" rx="2" ry="2" />
<text  x="1086.94" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (10 samples, 0.02%)</title><rect x="286.4" y="357" width="0.2" height="15.0" fill="rgb(249,3,39)" rx="2" ry="2" />
<text  x="289.37" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (12 samples, 0.03%)</title><rect x="450.6" y="325" width="0.3" height="15.0" fill="rgb(217,226,45)" rx="2" ry="2" />
<text  x="453.60" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.01%)</title><rect x="1097.1" y="245" width="0.1" height="15.0" fill="rgb(225,195,35)" rx="2" ry="2" />
<text  x="1100.06" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (181 samples, 0.38%)</title><rect x="10.3" y="613" width="4.5" height="15.0" fill="rgb(231,176,2)" rx="2" ry="2" />
<text  x="13.34" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (6 samples, 0.01%)</title><rect x="23.1" y="517" width="0.2" height="15.0" fill="rgb(219,48,49)" rx="2" ry="2" />
<text  x="26.13" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (40 samples, 0.08%)</title><rect x="1051.9" y="245" width="1.0" height="15.0" fill="rgb(252,95,40)" rx="2" ry="2" />
<text  x="1054.88" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (9 samples, 0.02%)</title><rect x="1034.4" y="133" width="0.2" height="15.0" fill="rgb(248,97,25)" rx="2" ry="2" />
<text  x="1037.42" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (11 samples, 0.02%)</title><rect x="143.8" y="277" width="0.3" height="15.0" fill="rgb(232,39,23)" rx="2" ry="2" />
<text  x="146.79" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,981 samples, 10.39%)</title><rect x="291.7" y="373" width="122.7" height="15.0" fill="rgb(228,79,4)" rx="2" ry="2" />
<text  x="294.71" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%)</title><rect x="448.9" y="277" width="0.2" height="15.0" fill="rgb(230,146,36)" rx="2" ry="2" />
<text  x="451.92" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_access (6 samples, 0.01%)</title><rect x="21.8" y="437" width="0.2" height="15.0" fill="rgb(245,29,17)" rx="2" ry="2" />
<text  x="24.84" y="447.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (12 samples, 0.03%)</title><rect x="506.6" y="229" width="0.3" height="15.0" fill="rgb(224,4,41)" rx="2" ry="2" />
<text  x="509.57" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (25 samples, 0.05%)</title><rect x="697.6" y="437" width="0.6" height="15.0" fill="rgb(242,156,1)" rx="2" ry="2" />
<text  x="700.59" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%)</title><rect x="532.4" y="309" width="0.5" height="15.0" fill="rgb(247,68,17)" rx="2" ry="2" />
<text  x="535.43" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (24 samples, 0.05%)</title><rect x="907.2" y="309" width="0.6" height="15.0" fill="rgb(211,84,23)" rx="2" ry="2" />
<text  x="910.20" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%)</title><rect x="948.3" y="309" width="0.2" height="15.0" fill="rgb(249,223,7)" rx="2" ry="2" />
<text  x="951.28" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (91 samples, 0.19%)</title><rect x="1121.8" y="405" width="2.2" height="15.0" fill="rgb(210,5,6)" rx="2" ry="2" />
<text  x="1124.76" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (6 samples, 0.01%)</title><rect x="798.5" y="149" width="0.1" height="15.0" fill="rgb(211,162,42)" rx="2" ry="2" />
<text  x="801.46" y="159.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%)</title><rect x="1078.3" y="277" width="0.1" height="15.0" fill="rgb(216,87,54)" rx="2" ry="2" />
<text  x="1081.32" y="287.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (398 samples, 0.83%)</title><rect x="1179.0" y="629" width="9.8" height="15.0" fill="rgb(227,132,1)" rx="2" ry="2" />
<text  x="1181.99" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (6 samples, 0.01%)</title><rect x="530.6" y="325" width="0.1" height="15.0" fill="rgb(238,218,38)" rx="2" ry="2" />
<text  x="533.58" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%)</title><rect x="846.9" y="341" width="0.4" height="15.0" fill="rgb(230,201,30)" rx="2" ry="2" />
<text  x="849.89" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (14 samples, 0.03%)</title><rect x="1175.4" y="421" width="0.4" height="15.0" fill="rgb(230,105,9)" rx="2" ry="2" />
<text  x="1178.42" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (13 samples, 0.03%)</title><rect x="1047.3" y="277" width="0.3" height="15.0" fill="rgb(231,48,15)" rx="2" ry="2" />
<text  x="1050.30" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (7 samples, 0.01%)</title><rect x="10.1" y="469" width="0.2" height="15.0" fill="rgb(236,97,26)" rx="2" ry="2" />
<text  x="13.10" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%)</title><rect x="284.4" y="277" width="0.1" height="15.0" fill="rgb(243,36,30)" rx="2" ry="2" />
<text  x="287.35" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (30 samples, 0.06%)</title><rect x="736.6" y="357" width="0.8" height="15.0" fill="rgb(250,39,14)" rx="2" ry="2" />
<text  x="739.65" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (7 samples, 0.01%)</title><rect x="430.3" y="341" width="0.1" height="15.0" fill="rgb(254,24,28)" rx="2" ry="2" />
<text  x="433.26" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (12 samples, 0.03%)</title><rect x="229.5" y="165" width="0.3" height="15.0" fill="rgb(238,195,26)" rx="2" ry="2" />
<text  x="232.46" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (34 samples, 0.07%)</title><rect x="1022.0" y="213" width="0.9" height="15.0" fill="rgb(212,50,14)" rx="2" ry="2" />
<text  x="1025.03" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (32 samples, 0.07%)</title><rect x="597.1" y="437" width="0.8" height="15.0" fill="rgb(231,124,39)" rx="2" ry="2" />
<text  x="600.09" y="447.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (7 samples, 0.01%)</title><rect x="1056.9" y="325" width="0.1" height="15.0" fill="rgb(210,105,51)" rx="2" ry="2" />
<text  x="1059.88" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%)</title><rect x="271.2" y="341" width="0.2" height="15.0" fill="rgb(223,144,46)" rx="2" ry="2" />
<text  x="274.23" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%)</title><rect x="172.0" y="133" width="0.1" height="15.0" fill="rgb(236,28,18)" rx="2" ry="2" />
<text  x="174.96" y="143.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (54 samples, 0.11%)</title><rect x="1177.2" y="517" width="1.4" height="15.0" fill="rgb(225,30,52)" rx="2" ry="2" />
<text  x="1180.24" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%)</title><rect x="1132.4" y="389" width="0.5" height="15.0" fill="rgb(241,51,16)" rx="2" ry="2" />
<text  x="1135.43" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (13 samples, 0.03%)</title><rect x="263.2" y="309" width="0.4" height="15.0" fill="rgb(238,91,23)" rx="2" ry="2" />
<text  x="266.25" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (188 samples, 0.39%)</title><rect x="152.4" y="229" width="4.6" height="15.0" fill="rgb(237,65,50)" rx="2" ry="2" />
<text  x="155.38" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (12 samples, 0.03%)</title><rect x="905.5" y="309" width="0.3" height="15.0" fill="rgb(206,31,33)" rx="2" ry="2" />
<text  x="908.48" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%)</title><rect x="482.6" y="325" width="0.2" height="15.0" fill="rgb(219,53,37)" rx="2" ry="2" />
<text  x="485.61" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (17 samples, 0.04%)</title><rect x="996.9" y="261" width="0.4" height="15.0" fill="rgb(248,95,33)" rx="2" ry="2" />
<text  x="999.86" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (21 samples, 0.04%)</title><rect x="245.7" y="181" width="0.5" height="15.0" fill="rgb(215,18,47)" rx="2" ry="2" />
<text  x="248.69" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (19 samples, 0.04%)</title><rect x="945.0" y="405" width="0.4" height="15.0" fill="rgb(232,210,48)" rx="2" ry="2" />
<text  x="947.98" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (53 samples, 0.11%)</title><rect x="538.9" y="357" width="1.3" height="15.0" fill="rgb(244,100,54)" rx="2" ry="2" />
<text  x="541.93" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (19 samples, 0.04%)</title><rect x="700.2" y="421" width="0.4" height="15.0" fill="rgb(252,129,46)" rx="2" ry="2" />
<text  x="703.18" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (44 samples, 0.09%)</title><rect x="103.6" y="421" width="1.0" height="15.0" fill="rgb(221,211,40)" rx="2" ry="2" />
<text  x="106.55" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%)</title><rect x="841.1" y="357" width="0.4" height="15.0" fill="rgb(236,159,1)" rx="2" ry="2" />
<text  x="844.11" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5,929 samples, 12.37%)</title><rect x="963.3" y="405" width="146.1" height="15.0" fill="rgb(237,114,21)" rx="2" ry="2" />
<text  x="966.35" y="415.5" >service::storage_p..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (15 samples, 0.03%)</title><rect x="253.0" y="197" width="0.4" height="15.0" fill="rgb(245,220,13)" rx="2" ry="2" />
<text  x="256.00" y="207.5" ></text>
</g>
<g >
<title>operator new (86 samples, 0.18%)</title><rect x="960.7" y="405" width="2.1" height="15.0" fill="rgb(248,42,20)" rx="2" ry="2" />
<text  x="963.71" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (21 samples, 0.04%)</title><rect x="826.2" y="293" width="0.5" height="15.0" fill="rgb(227,222,29)" rx="2" ry="2" />
<text  x="829.18" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (35 samples, 0.07%)</title><rect x="686.5" y="437" width="0.9" height="15.0" fill="rgb(229,174,44)" rx="2" ry="2" />
<text  x="689.53" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (30 samples, 0.06%)</title><rect x="1125.3" y="421" width="0.8" height="15.0" fill="rgb(206,24,50)" rx="2" ry="2" />
<text  x="1128.33" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (20 samples, 0.04%)</title><rect x="1030.0" y="165" width="0.5" height="15.0" fill="rgb(235,160,6)" rx="2" ry="2" />
<text  x="1033.01" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.04%)</title><rect x="327.5" y="181" width="0.5" height="15.0" fill="rgb(230,205,34)" rx="2" ry="2" />
<text  x="330.50" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (6 samples, 0.01%)</title><rect x="682.1" y="485" width="0.1" height="15.0" fill="rgb(240,184,5)" rx="2" ry="2" />
<text  x="685.08" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::consume (5 samples, 0.01%)</title><rect x="679.5" y="277" width="0.1" height="15.0" fill="rgb(239,44,44)" rx="2" ry="2" />
<text  x="682.52" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (53 samples, 0.11%)</title><rect x="739.7" y="309" width="1.3" height="15.0" fill="rgb(249,221,39)" rx="2" ry="2" />
<text  x="742.68" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%)</title><rect x="279.4" y="293" width="0.3" height="15.0" fill="rgb(229,66,19)" rx="2" ry="2" />
<text  x="282.38" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%)</title><rect x="631.7" y="485" width="0.1" height="15.0" fill="rgb(236,186,42)" rx="2" ry="2" />
<text  x="634.72" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (12 samples, 0.03%)</title><rect x="317.4" y="181" width="0.3" height="15.0" fill="rgb(252,27,31)" rx="2" ry="2" />
<text  x="320.42" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (28 samples, 0.06%)</title><rect x="124.1" y="309" width="0.7" height="15.0" fill="rgb(229,158,0)" rx="2" ry="2" />
<text  x="127.09" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (9 samples, 0.02%)</title><rect x="189.3" y="85" width="0.2" height="15.0" fill="rgb(227,216,40)" rx="2" ry="2" />
<text  x="192.32" y="95.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%)</title><rect x="525.0" y="309" width="0.2" height="15.0" fill="rgb(246,140,40)" rx="2" ry="2" />
<text  x="528.04" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%)</title><rect x="1141.3" y="453" width="0.2" height="15.0" fill="rgb(253,149,23)" rx="2" ry="2" />
<text  x="1144.29" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (12 samples, 0.03%)</title><rect x="546.1" y="405" width="0.3" height="15.0" fill="rgb(209,72,53)" rx="2" ry="2" />
<text  x="549.07" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (76 samples, 0.16%)</title><rect x="919.8" y="357" width="1.9" height="15.0" fill="rgb(228,110,2)" rx="2" ry="2" />
<text  x="922.83" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (16 samples, 0.03%)</title><rect x="261.1" y="277" width="0.4" height="15.0" fill="rgb(211,194,46)" rx="2" ry="2" />
<text  x="264.11" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (8 samples, 0.02%)</title><rect x="1145.7" y="501" width="0.2" height="15.0" fill="rgb(219,14,46)" rx="2" ry="2" />
<text  x="1148.75" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (7 samples, 0.01%)</title><rect x="222.9" y="149" width="0.2" height="15.0" fill="rgb(225,45,43)" rx="2" ry="2" />
<text  x="225.89" y="159.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (210 samples, 0.44%)</title><rect x="720.7" y="389" width="5.2" height="15.0" fill="rgb(249,46,17)" rx="2" ry="2" />
<text  x="723.69" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (66 samples, 0.14%)</title><rect x="823.5" y="357" width="1.6" height="15.0" fill="rgb(232,35,37)" rx="2" ry="2" />
<text  x="826.45" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (5 samples, 0.01%)</title><rect x="694.2" y="469" width="0.1" height="15.0" fill="rgb(216,192,11)" rx="2" ry="2" />
<text  x="697.22" y="479.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (46 samples, 0.10%)</title><rect x="1011.5" y="277" width="1.2" height="15.0" fill="rgb(236,6,46)" rx="2" ry="2" />
<text  x="1014.54" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,690 samples, 9.79%)</title><rect x="420.6" y="421" width="115.5" height="15.0" fill="rgb(231,105,39)" rx="2" ry="2" />
<text  x="423.63" y="431.5" >query::querier..</text>
</g>
<g >
<title>service::client_state::check_has_permission (6 samples, 0.01%)</title><rect x="21.8" y="405" width="0.2" height="15.0" fill="rgb(227,182,26)" rx="2" ry="2" />
<text  x="24.84" y="415.5" ></text>
</g>
<g >
<title>auth::resource::parent (121 samples, 0.25%)</title><rect x="778.0" y="325" width="3.0" height="15.0" fill="rgb(226,25,17)" rx="2" ry="2" />
<text  x="780.99" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%)</title><rect x="280.5" y="261" width="1.8" height="15.0" fill="rgb(213,151,17)" rx="2" ry="2" />
<text  x="283.53" y="271.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="498.2" y="213" width="0.1" height="15.0" fill="rgb(208,123,48)" rx="2" ry="2" />
<text  x="501.17" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (8 samples, 0.02%)</title><rect x="21.2" y="389" width="0.2" height="15.0" fill="rgb(237,166,26)" rx="2" ry="2" />
<text  x="24.18" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (296 samples, 0.62%)</title><rect x="1084.0" y="277" width="7.3" height="15.0" fill="rgb(249,190,23)" rx="2" ry="2" />
<text  x="1086.96" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (94 samples, 0.20%)</title><rect x="742.0" y="309" width="2.4" height="15.0" fill="rgb(228,20,26)" rx="2" ry="2" />
<text  x="745.04" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.02%)</title><rect x="612.5" y="421" width="0.2" height="15.0" fill="rgb(246,73,44)" rx="2" ry="2" />
<text  x="615.49" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (52 samples, 0.11%)</title><rect x="800.8" y="149" width="1.3" height="15.0" fill="rgb(206,168,37)" rx="2" ry="2" />
<text  x="803.80" y="159.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="1071.3" y="341" width="0.2" height="15.0" fill="rgb(215,103,32)" rx="2" ry="2" />
<text  x="1074.33" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (5 samples, 0.01%)</title><rect x="863.4" y="405" width="0.2" height="15.0" fill="rgb(231,5,30)" rx="2" ry="2" />
<text  x="866.44" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (32 samples, 0.07%)</title><rect x="676.3" y="437" width="0.8" height="15.0" fill="rgb(227,83,27)" rx="2" ry="2" />
<text  x="679.34" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (100 samples, 0.21%)</title><rect x="477.1" y="197" width="2.4" height="15.0" fill="rgb(207,18,40)" rx="2" ry="2" />
<text  x="480.07" y="207.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%)</title><rect x="583.2" y="405" width="0.9" height="15.0" fill="rgb(222,129,45)" rx="2" ry="2" />
<text  x="586.23" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (13 samples, 0.03%)</title><rect x="909.7" y="341" width="0.3" height="15.0" fill="rgb(208,218,9)" rx="2" ry="2" />
<text  x="912.69" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (93 samples, 0.19%)</title><rect x="1049.5" y="229" width="2.3" height="15.0" fill="rgb(224,60,49)" rx="2" ry="2" />
<text  x="1052.46" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (14 samples, 0.03%)</title><rect x="618.8" y="389" width="0.3" height="15.0" fill="rgb(239,218,18)" rx="2" ry="2" />
<text  x="621.76" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (14 samples, 0.03%)</title><rect x="1106.0" y="357" width="0.3" height="15.0" fill="rgb(231,5,32)" rx="2" ry="2" />
<text  x="1108.95" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (26 samples, 0.05%)</title><rect x="536.1" y="421" width="0.7" height="15.0" fill="rgb(238,148,18)" rx="2" ry="2" />
<text  x="539.15" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (23 samples, 0.05%)</title><rect x="650.9" y="485" width="0.5" height="15.0" fill="rgb(228,154,43)" rx="2" ry="2" />
<text  x="653.85" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (39 samples, 0.08%)</title><rect x="1142.2" y="357" width="0.9" height="15.0" fill="rgb(215,18,26)" rx="2" ry="2" />
<text  x="1145.18" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%)</title><rect x="913.0" y="309" width="0.7" height="15.0" fill="rgb(222,188,27)" rx="2" ry="2" />
<text  x="916.01" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%)</title><rect x="541.4" y="341" width="0.7" height="15.0" fill="rgb(208,71,11)" rx="2" ry="2" />
<text  x="544.42" y="351.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (58 samples, 0.12%)</title><rect x="357.1" y="149" width="1.4" height="15.0" fill="rgb(240,177,15)" rx="2" ry="2" />
<text  x="360.10" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%)</title><rect x="31.9" y="469" width="0.2" height="15.0" fill="rgb(222,229,25)" rx="2" ry="2" />
<text  x="34.92" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%)</title><rect x="938.6" y="389" width="0.5" height="15.0" fill="rgb(208,132,17)" rx="2" ry="2" />
<text  x="941.62" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (305 samples, 0.64%)</title><rect x="496.5" y="245" width="7.5" height="15.0" fill="rgb(231,76,37)" rx="2" ry="2" />
<text  x="499.47" y="255.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (17 samples, 0.04%)</title><rect x="314.6" y="165" width="0.4" height="15.0" fill="rgb(237,218,51)" rx="2" ry="2" />
<text  x="317.62" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%)</title><rect x="664.9" y="437" width="0.2" height="15.0" fill="rgb(217,103,36)" rx="2" ry="2" />
<text  x="667.91" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (39 samples, 0.08%)</title><rect x="1131.5" y="389" width="0.9" height="15.0" fill="rgb(231,30,4)" rx="2" ry="2" />
<text  x="1134.47" y="399.5" ></text>
</g>
<g >
<title>schema_registry::get (154 samples, 0.32%)</title><rect x="978.4" y="357" width="3.8" height="15.0" fill="rgb(213,49,44)" rx="2" ry="2" />
<text  x="981.39" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (11 samples, 0.02%)</title><rect x="857.2" y="421" width="0.2" height="15.0" fill="rgb(220,174,35)" rx="2" ry="2" />
<text  x="860.16" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (7 samples, 0.01%)</title><rect x="72.6" y="389" width="0.2" height="15.0" fill="rgb(234,173,18)" rx="2" ry="2" />
<text  x="75.65" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (447 samples, 0.93%)</title><rect x="892.4" y="325" width="11.0" height="15.0" fill="rgb(237,114,43)" rx="2" ry="2" />
<text  x="895.43" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (6 samples, 0.01%)</title><rect x="126.3" y="293" width="0.2" height="15.0" fill="rgb(206,40,32)" rx="2" ry="2" />
<text  x="129.31" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (7 samples, 0.01%)</title><rect x="1027.3" y="213" width="0.1" height="15.0" fill="rgb(250,115,53)" rx="2" ry="2" />
<text  x="1030.28" y="223.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (352 samples, 0.73%)</title><rect x="377.5" y="165" width="8.6" height="15.0" fill="rgb(206,199,49)" rx="2" ry="2" />
<text  x="380.46" y="175.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (11 samples, 0.02%)</title><rect x="720.0" y="405" width="0.3" height="15.0" fill="rgb(242,46,6)" rx="2" ry="2" />
<text  x="723.05" y="415.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%)</title><rect x="410.6" y="293" width="0.3" height="15.0" fill="rgb(219,61,28)" rx="2" ry="2" />
<text  x="413.56" y="303.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (6 samples, 0.01%)</title><rect x="253.5" y="197" width="0.2" height="15.0" fill="rgb(243,220,10)" rx="2" ry="2" />
<text  x="256.52" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%)</title><rect x="1143.9" y="501" width="0.1" height="15.0" fill="rgb(225,171,36)" rx="2" ry="2" />
<text  x="1146.88" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.02%)</title><rect x="413.6" y="293" width="0.2" height="15.0" fill="rgb(222,228,24)" rx="2" ry="2" />
<text  x="416.56" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%)</title><rect x="844.0" y="389" width="0.7" height="15.0" fill="rgb(248,5,1)" rx="2" ry="2" />
<text  x="847.01" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%)</title><rect x="901.5" y="277" width="0.2" height="15.0" fill="rgb(214,120,5)" rx="2" ry="2" />
<text  x="904.51" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (19 samples, 0.04%)</title><rect x="599.2" y="437" width="0.5" height="15.0" fill="rgb(220,80,33)" rx="2" ry="2" />
<text  x="602.24" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (10 samples, 0.02%)</title><rect x="836.9" y="437" width="0.3" height="15.0" fill="rgb(212,97,32)" rx="2" ry="2" />
<text  x="839.92" y="447.5" ></text>
</g>
<g >
<title>row::row (6 samples, 0.01%)</title><rect x="254.3" y="213" width="0.1" height="15.0" fill="rgb(244,89,32)" rx="2" ry="2" />
<text  x="257.26" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (11 samples, 0.02%)</title><rect x="103.0" y="389" width="0.3" height="15.0" fill="rgb(210,112,45)" rx="2" ry="2" />
<text  x="106.03" y="399.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (339 samples, 0.71%)</title><rect x="206.6" y="165" width="8.4" height="15.0" fill="rgb(210,122,8)" rx="2" ry="2" />
<text  x="209.63" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.03%)</title><rect x="784.3" y="245" width="0.3" height="15.0" fill="rgb(216,87,24)" rx="2" ry="2" />
<text  x="787.27" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%)</title><rect x="404.5" y="213" width="0.3" height="15.0" fill="rgb(237,180,32)" rx="2" ry="2" />
<text  x="407.47" y="223.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (43 samples, 0.09%)</title><rect x="386.4" y="165" width="1.0" height="15.0" fill="rgb(251,218,32)" rx="2" ry="2" />
<text  x="389.37" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (88 samples, 0.18%)</title><rect x="840.0" y="389" width="2.2" height="15.0" fill="rgb(240,33,50)" rx="2" ry="2" />
<text  x="843.00" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%)</title><rect x="841.3" y="341" width="0.2" height="15.0" fill="rgb(253,197,6)" rx="2" ry="2" />
<text  x="844.26" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (56 samples, 0.12%)</title><rect x="943.6" y="405" width="1.4" height="15.0" fill="rgb(251,203,27)" rx="2" ry="2" />
<text  x="946.60" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%)</title><rect x="559.4" y="277" width="0.2" height="15.0" fill="rgb(250,74,24)" rx="2" ry="2" />
<text  x="562.37" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (15 samples, 0.03%)</title><rect x="612.0" y="389" width="0.3" height="15.0" fill="rgb(224,29,18)" rx="2" ry="2" />
<text  x="614.97" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (69 samples, 0.14%)</title><rect x="620.8" y="485" width="1.7" height="15.0" fill="rgb(222,29,43)" rx="2" ry="2" />
<text  x="623.76" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (33 samples, 0.07%)</title><rect x="1169.0" y="469" width="0.8" height="15.0" fill="rgb(251,81,43)" rx="2" ry="2" />
<text  x="1171.97" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (10 samples, 0.02%)</title><rect x="832.0" y="405" width="0.3" height="15.0" fill="rgb(229,59,31)" rx="2" ry="2" />
<text  x="835.02" y="415.5" ></text>
</g>
<g >
<title>malloc (28 samples, 0.06%)</title><rect x="592.8" y="373" width="0.7" height="15.0" fill="rgb(217,4,49)" rx="2" ry="2" />
<text  x="595.83" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (10 samples, 0.02%)</title><rect x="1141.2" y="469" width="0.3" height="15.0" fill="rgb(240,4,9)" rx="2" ry="2" />
<text  x="1144.24" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%)</title><rect x="416.9" y="373" width="0.2" height="15.0" fill="rgb(235,175,1)" rx="2" ry="2" />
<text  x="419.93" y="383.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (376 samples, 0.78%)</title><rect x="471.8" y="261" width="9.3" height="15.0" fill="rgb(252,42,8)" rx="2" ry="2" />
<text  x="474.82" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,832 samples, 8.00%)</title><rect x="302.4" y="261" width="94.3" height="15.0" fill="rgb(207,200,41)" rx="2" ry="2" />
<text  x="305.38" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (62 samples, 0.13%)</title><rect x="753.8" y="357" width="1.5" height="15.0" fill="rgb(231,21,18)" rx="2" ry="2" />
<text  x="756.79" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (5 samples, 0.01%)</title><rect x="600.4" y="437" width="0.2" height="15.0" fill="rgb(221,209,49)" rx="2" ry="2" />
<text  x="603.44" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (11 samples, 0.02%)</title><rect x="757.7" y="293" width="0.2" height="15.0" fill="rgb(207,35,34)" rx="2" ry="2" />
<text  x="760.68" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%)</title><rect x="694.0" y="453" width="0.1" height="15.0" fill="rgb(235,220,17)" rx="2" ry="2" />
<text  x="697.02" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.03%)</title><rect x="677.2" y="453" width="0.3" height="15.0" fill="rgb(210,22,46)" rx="2" ry="2" />
<text  x="680.15" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (122 samples, 0.25%)</title><rect x="349.0" y="165" width="3.0" height="15.0" fill="rgb(254,3,2)" rx="2" ry="2" />
<text  x="351.97" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%)</title><rect x="487.3" y="309" width="0.2" height="15.0" fill="rgb(236,83,48)" rx="2" ry="2" />
<text  x="490.34" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (109 samples, 0.23%)</title><rect x="802.1" y="149" width="2.7" height="15.0" fill="rgb(211,83,46)" rx="2" ry="2" />
<text  x="805.08" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (6 samples, 0.01%)</title><rect x="261.7" y="277" width="0.1" height="15.0" fill="rgb(227,8,48)" rx="2" ry="2" />
<text  x="264.70" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.01%)</title><rect x="435.7" y="261" width="0.2" height="15.0" fill="rgb(252,45,47)" rx="2" ry="2" />
<text  x="438.72" y="271.5" ></text>
</g>
<g >
<title>operator new (50 samples, 0.10%)</title><rect x="853.6" y="437" width="1.2" height="15.0" fill="rgb(215,113,35)" rx="2" ry="2" />
<text  x="856.62" y="447.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (10 samples, 0.02%)</title><rect x="246.0" y="165" width="0.2" height="15.0" fill="rgb(220,23,25)" rx="2" ry="2" />
<text  x="248.96" y="175.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (6 samples, 0.01%)</title><rect x="921.4" y="325" width="0.1" height="15.0" fill="rgb(224,214,53)" rx="2" ry="2" />
<text  x="924.36" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (21 samples, 0.04%)</title><rect x="554.4" y="293" width="0.5" height="15.0" fill="rgb(240,22,53)" rx="2" ry="2" />
<text  x="557.37" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (13 samples, 0.03%)</title><rect x="261.8" y="277" width="0.4" height="15.0" fill="rgb(236,7,29)" rx="2" ry="2" />
<text  x="264.84" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%)</title><rect x="1046.4" y="277" width="0.1" height="15.0" fill="rgb(247,77,34)" rx="2" ry="2" />
<text  x="1049.41" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%)</title><rect x="10.1" y="549" width="0.2" height="15.0" fill="rgb(237,221,2)" rx="2" ry="2" />
<text  x="13.10" y="559.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (6 samples, 0.01%)</title><rect x="691.1" y="453" width="0.2" height="15.0" fill="rgb(252,197,22)" rx="2" ry="2" />
<text  x="694.11" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%)</title><rect x="1034.5" y="117" width="0.1" height="15.0" fill="rgb(221,158,11)" rx="2" ry="2" />
<text  x="1037.49" y="127.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (15 samples, 0.03%)</title><rect x="480.6" y="213" width="0.4" height="15.0" fill="rgb(235,141,13)" rx="2" ry="2" />
<text  x="483.59" y="223.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,284 samples, 2.68%)</title><rect x="547.2" y="437" width="31.6" height="15.0" fill="rgb(241,28,6)" rx="2" ry="2" />
<text  x="550.15" y="447.5" >qu..</text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (22 samples, 0.05%)</title><rect x="644.4" y="437" width="0.5" height="15.0" fill="rgb(248,38,5)" rx="2" ry="2" />
<text  x="647.35" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (45 samples, 0.09%)</title><rect x="191.3" y="69" width="1.1" height="15.0" fill="rgb(226,162,6)" rx="2" ry="2" />
<text  x="194.27" y="79.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="838.0" y="437" width="0.2" height="15.0" fill="rgb(244,145,44)" rx="2" ry="2" />
<text  x="840.96" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (59 samples, 0.12%)</title><rect x="304.7" y="229" width="1.5" height="15.0" fill="rgb(254,17,25)" rx="2" ry="2" />
<text  x="307.72" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (22 samples, 0.05%)</title><rect x="605.0" y="437" width="0.5" height="15.0" fill="rgb(233,49,36)" rx="2" ry="2" />
<text  x="608.00" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (47 samples, 0.10%)</title><rect x="823.9" y="309" width="1.1" height="15.0" fill="rgb(217,106,15)" rx="2" ry="2" />
<text  x="826.87" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (43 samples, 0.09%)</title><rect x="71.6" y="389" width="1.0" height="15.0" fill="rgb(223,206,31)" rx="2" ry="2" />
<text  x="74.59" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (9 samples, 0.02%)</title><rect x="614.9" y="389" width="0.2" height="15.0" fill="rgb(254,207,31)" rx="2" ry="2" />
<text  x="617.87" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%)</title><rect x="1141.5" y="421" width="0.6" height="15.0" fill="rgb(215,116,46)" rx="2" ry="2" />
<text  x="1144.51" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (81 samples, 0.17%)</title><rect x="522.5" y="309" width="2.0" height="15.0" fill="rgb(241,167,20)" rx="2" ry="2" />
<text  x="525.50" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (76 samples, 0.16%)</title><rect x="61.6" y="437" width="1.9" height="15.0" fill="rgb(209,109,26)" rx="2" ry="2" />
<text  x="64.64" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (35 samples, 0.07%)</title><rect x="765.6" y="341" width="0.8" height="15.0" fill="rgb(249,113,10)" rx="2" ry="2" />
<text  x="768.58" y="351.5" ></text>
</g>
<g >
<title>table::query (28 samples, 0.06%)</title><rect x="1176.4" y="501" width="0.7" height="15.0" fill="rgb(205,171,40)" rx="2" ry="2" />
<text  x="1179.38" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="742.8" y="261" width="0.2" height="15.0" fill="rgb(242,209,52)" rx="2" ry="2" />
<text  x="745.80" y="271.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (5 samples, 0.01%)</title><rect x="600.9" y="421" width="0.1" height="15.0" fill="rgb(248,144,24)" rx="2" ry="2" />
<text  x="603.86" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.01%)</title><rect x="17.9" y="181" width="0.1" height="15.0" fill="rgb(228,67,31)" rx="2" ry="2" />
<text  x="20.86" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,488 samples, 11.45%)</title><rect x="971.2" y="373" width="135.1" height="15.0" fill="rgb(225,79,34)" rx="2" ry="2" />
<text  x="974.15" y="383.5" >service::storage_..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%)</title><rect x="413.8" y="325" width="0.1" height="15.0" fill="rgb(225,9,9)" rx="2" ry="2" />
<text  x="416.81" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::stats (25 samples, 0.05%)</title><rect x="525.9" y="293" width="0.6" height="15.0" fill="rgb(214,128,30)" rx="2" ry="2" />
<text  x="528.85" y="303.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%)</title><rect x="439.1" y="277" width="0.7" height="15.0" fill="rgb(222,127,10)" rx="2" ry="2" />
<text  x="442.10" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (67 samples, 0.14%)</title><rect x="791.3" y="197" width="1.7" height="15.0" fill="rgb(211,72,52)" rx="2" ry="2" />
<text  x="794.34" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%)</title><rect x="740.4" y="277" width="0.1" height="15.0" fill="rgb(227,146,54)" rx="2" ry="2" />
<text  x="743.41" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%)</title><rect x="564.3" y="293" width="0.1" height="15.0" fill="rgb(226,122,34)" rx="2" ry="2" />
<text  x="567.32" y="303.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%)</title><rect x="156.4" y="197" width="0.5" height="15.0" fill="rgb(234,195,52)" rx="2" ry="2" />
<text  x="159.40" y="207.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (25 samples, 0.05%)</title><rect x="1127.2" y="421" width="0.6" height="15.0" fill="rgb(216,156,44)" rx="2" ry="2" />
<text  x="1130.16" y="431.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%)</title><rect x="646.4" y="453" width="0.5" height="15.0" fill="rgb(207,202,34)" rx="2" ry="2" />
<text  x="649.42" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (34 samples, 0.07%)</title><rect x="331.9" y="181" width="0.8" height="15.0" fill="rgb(243,105,4)" rx="2" ry="2" />
<text  x="334.88" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (24 samples, 0.05%)</title><rect x="138.7" y="229" width="0.6" height="15.0" fill="rgb(249,175,3)" rx="2" ry="2" />
<text  x="141.72" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (23 samples, 0.05%)</title><rect x="137.5" y="245" width="0.6" height="15.0" fill="rgb(206,98,5)" rx="2" ry="2" />
<text  x="140.49" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (41 samples, 0.09%)</title><rect x="791.8" y="165" width="1.0" height="15.0" fill="rgb(230,227,7)" rx="2" ry="2" />
<text  x="794.81" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (10 samples, 0.02%)</title><rect x="207.5" y="149" width="0.2" height="15.0" fill="rgb(226,175,11)" rx="2" ry="2" />
<text  x="210.50" y="159.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (14 samples, 0.03%)</title><rect x="364.6" y="213" width="0.4" height="15.0" fill="rgb(234,0,35)" rx="2" ry="2" />
<text  x="367.63" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (8 samples, 0.02%)</title><rect x="546.5" y="421" width="0.2" height="15.0" fill="rgb(253,181,10)" rx="2" ry="2" />
<text  x="549.51" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (204 samples, 0.43%)</title><rect x="15.6" y="469" width="5.0" height="15.0" fill="rgb(251,108,28)" rx="2" ry="2" />
<text  x="18.61" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%)</title><rect x="97.6" y="421" width="0.3" height="15.0" fill="rgb(214,18,11)" rx="2" ry="2" />
<text  x="100.62" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%)</title><rect x="553.9" y="309" width="0.1" height="15.0" fill="rgb(223,170,43)" rx="2" ry="2" />
<text  x="556.85" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%)</title><rect x="788.1" y="213" width="0.1" height="15.0" fill="rgb(243,29,43)" rx="2" ry="2" />
<text  x="791.06" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (6 samples, 0.01%)</title><rect x="22.3" y="549" width="0.1" height="15.0" fill="rgb(246,99,5)" rx="2" ry="2" />
<text  x="25.29" y="559.5" ></text>
</g>
<g >
<title>schema::column_at (11 samples, 0.02%)</title><rect x="389.1" y="181" width="0.2" height="15.0" fill="rgb(213,86,48)" rx="2" ry="2" />
<text  x="392.06" y="191.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,262 samples, 23.50%)</title><rect x="864.2" y="485" width="277.3" height="15.0" fill="rgb(217,94,28)" rx="2" ry="2" />
<text  x="867.16" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (50 samples, 0.10%)</title><rect x="407.9" y="245" width="1.2" height="15.0" fill="rgb(240,228,20)" rx="2" ry="2" />
<text  x="410.90" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (11 samples, 0.02%)</title><rect x="263.8" y="325" width="0.3" height="15.0" fill="rgb(213,135,25)" rx="2" ry="2" />
<text  x="266.79" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (360 samples, 0.75%)</title><rect x="458.9" y="293" width="8.9" height="15.0" fill="rgb(230,180,41)" rx="2" ry="2" />
<text  x="461.95" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (74 samples, 0.15%)</title><rect x="1066.3" y="293" width="1.9" height="15.0" fill="rgb(208,92,45)" rx="2" ry="2" />
<text  x="1069.33" y="303.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.03%)</title><rect x="146.7" y="245" width="0.3" height="15.0" fill="rgb(215,166,29)" rx="2" ry="2" />
<text  x="149.74" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,929 samples, 6.11%)</title><rect x="984.9" y="357" width="72.1" height="15.0" fill="rgb(231,124,10)" rx="2" ry="2" />
<text  x="987.92" y="367.5" >service:..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (9 samples, 0.02%)</title><rect x="234.6" y="245" width="0.2" height="15.0" fill="rgb(243,22,27)" rx="2" ry="2" />
<text  x="237.56" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (15 samples, 0.03%)</title><rect x="32.7" y="469" width="0.4" height="15.0" fill="rgb(218,36,15)" rx="2" ry="2" />
<text  x="35.70" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%)</title><rect x="564.4" y="293" width="0.3" height="15.0" fill="rgb(232,197,32)" rx="2" ry="2" />
<text  x="567.44" y="303.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%)</title><rect x="517.3" y="341" width="0.2" height="15.0" fill="rgb(253,68,45)" rx="2" ry="2" />
<text  x="520.26" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (13 samples, 0.03%)</title><rect x="909.4" y="341" width="0.3" height="15.0" fill="rgb(238,225,11)" rx="2" ry="2" />
<text  x="912.37" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (22 samples, 0.05%)</title><rect x="1117.4" y="373" width="0.5" height="15.0" fill="rgb(221,166,22)" rx="2" ry="2" />
<text  x="1120.36" y="383.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (5 samples, 0.01%)</title><rect x="404.8" y="213" width="0.1" height="15.0" fill="rgb(212,85,43)" rx="2" ry="2" />
<text  x="407.82" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (47 samples, 0.10%)</title><rect x="1167.1" y="485" width="1.2" height="15.0" fill="rgb(223,64,9)" rx="2" ry="2" />
<text  x="1170.12" y="495.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%)</title><rect x="1142.6" y="165" width="0.2" height="15.0" fill="rgb(239,17,12)" rx="2" ry="2" />
<text  x="1145.60" y="175.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (20 samples, 0.04%)</title><rect x="910.1" y="357" width="0.5" height="15.0" fill="rgb(217,157,18)" rx="2" ry="2" />
<text  x="913.06" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%)</title><rect x="962.8" y="405" width="0.2" height="15.0" fill="rgb(251,43,31)" rx="2" ry="2" />
<text  x="965.83" y="415.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (6 samples, 0.01%)</title><rect x="319.5" y="213" width="0.1" height="15.0" fill="rgb(213,49,46)" rx="2" ry="2" />
<text  x="322.49" y="223.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,914 samples, 3.99%)</title><rect x="170.7" y="181" width="47.1" height="15.0" fill="rgb(242,210,32)" rx="2" ry="2" />
<text  x="173.71" y="191.5" >muta..</text>
</g>
<g >
<title>row_tombstone::apply (27 samples, 0.06%)</title><rect x="389.5" y="213" width="0.6" height="15.0" fill="rgb(234,190,7)" rx="2" ry="2" />
<text  x="392.48" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%)</title><rect x="1123.0" y="373" width="0.3" height="15.0" fill="rgb(215,113,2)" rx="2" ry="2" />
<text  x="1125.97" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.01%)</title><rect x="566.2" y="341" width="0.1" height="15.0" fill="rgb(238,212,44)" rx="2" ry="2" />
<text  x="569.16" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (58 samples, 0.12%)</title><rect x="247.9" y="213" width="1.4" height="15.0" fill="rgb(250,51,15)" rx="2" ry="2" />
<text  x="250.86" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%)</title><rect x="786.3" y="229" width="0.6" height="15.0" fill="rgb(231,118,53)" rx="2" ry="2" />
<text  x="789.29" y="239.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (76 samples, 0.16%)</title><rect x="857.7" y="469" width="1.9" height="15.0" fill="rgb(243,69,37)" rx="2" ry="2" />
<text  x="860.68" y="479.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (10 samples, 0.02%)</title><rect x="596.3" y="405" width="0.3" height="15.0" fill="rgb(232,77,25)" rx="2" ry="2" />
<text  x="599.33" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (11 samples, 0.02%)</title><rect x="76.8" y="453" width="0.3" height="15.0" fill="rgb(240,83,2)" rx="2" ry="2" />
<text  x="79.81" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (140 samples, 0.29%)</title><rect x="925.2" y="341" width="3.4" height="15.0" fill="rgb(209,12,45)" rx="2" ry="2" />
<text  x="928.15" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (54 samples, 0.11%)</title><rect x="895.7" y="277" width="1.3" height="15.0" fill="rgb(216,81,22)" rx="2" ry="2" />
<text  x="898.68" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (24 samples, 0.05%)</title><rect x="805.0" y="213" width="0.6" height="15.0" fill="rgb(223,56,52)" rx="2" ry="2" />
<text  x="808.03" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%)</title><rect x="516.4" y="325" width="0.3" height="15.0" fill="rgb(221,212,36)" rx="2" ry="2" />
<text  x="519.42" y="335.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.03%)</title><rect x="918.8" y="357" width="0.3" height="15.0" fill="rgb(212,124,36)" rx="2" ry="2" />
<text  x="921.80" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,232 samples, 6.74%)</title><rect x="751.9" y="421" width="79.6" height="15.0" fill="rgb(254,156,11)" rx="2" ry="2" />
<text  x="754.89" y="431.5" >cql3::sta..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (47 samples, 0.10%)</title><rect x="507.2" y="277" width="1.1" height="15.0" fill="rgb(237,135,7)" rx="2" ry="2" />
<text  x="510.16" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%)</title><rect x="45.7" y="485" width="0.1" height="15.0" fill="rgb(225,189,54)" rx="2" ry="2" />
<text  x="48.71" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (13 samples, 0.03%)</title><rect x="1111.5" y="421" width="0.3" height="15.0" fill="rgb(236,174,5)" rx="2" ry="2" />
<text  x="1114.49" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%)</title><rect x="516.9" y="325" width="0.2" height="15.0" fill="rgb(228,96,5)" rx="2" ry="2" />
<text  x="519.91" y="335.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (12 samples, 0.03%)</title><rect x="434.4" y="293" width="0.3" height="15.0" fill="rgb(234,132,26)" rx="2" ry="2" />
<text  x="437.37" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (16 samples, 0.03%)</title><rect x="556.4" y="293" width="0.4" height="15.0" fill="rgb(239,190,38)" rx="2" ry="2" />
<text  x="559.39" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (10 samples, 0.02%)</title><rect x="696.8" y="453" width="0.2" height="15.0" fill="rgb(208,97,48)" rx="2" ry="2" />
<text  x="699.78" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%)</title><rect x="296.5" y="229" width="0.1" height="15.0" fill="rgb(243,145,19)" rx="2" ry="2" />
<text  x="299.47" y="239.5" ></text>
</g>
<g >
<title>operator new (124 samples, 0.26%)</title><rect x="1012.7" y="277" width="3.1" height="15.0" fill="rgb(226,47,27)" rx="2" ry="2" />
<text  x="1015.70" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (69 samples, 0.14%)</title><rect x="793.9" y="213" width="1.7" height="15.0" fill="rgb(206,192,18)" rx="2" ry="2" />
<text  x="796.90" y="223.5" ></text>
</g>
<g >
<title>schema::position (7 samples, 0.01%)</title><rect x="1127.9" y="421" width="0.2" height="15.0" fill="rgb(212,27,48)" rx="2" ry="2" />
<text  x="1130.94" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%)</title><rect x="202.9" y="117" width="0.4" height="15.0" fill="rgb(233,2,35)" rx="2" ry="2" />
<text  x="205.87" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (10 samples, 0.02%)</title><rect x="103.3" y="421" width="0.3" height="15.0" fill="rgb(252,170,6)" rx="2" ry="2" />
<text  x="106.31" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (10 samples, 0.02%)</title><rect x="863.8" y="357" width="0.2" height="15.0" fill="rgb(206,139,42)" rx="2" ry="2" />
<text  x="866.79" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (20 samples, 0.04%)</title><rect x="942.3" y="405" width="0.5" height="15.0" fill="rgb(248,47,11)" rx="2" ry="2" />
<text  x="945.27" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (318 samples, 0.66%)</title><rect x="823.0" y="389" width="7.8" height="15.0" fill="rgb(214,161,13)" rx="2" ry="2" />
<text  x="825.98" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (8 samples, 0.02%)</title><rect x="576.1" y="341" width="0.2" height="15.0" fill="rgb(237,72,51)" rx="2" ry="2" />
<text  x="579.06" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (54 samples, 0.11%)</title><rect x="1154.6" y="437" width="1.4" height="15.0" fill="rgb(217,169,1)" rx="2" ry="2" />
<text  x="1157.64" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (10 samples, 0.02%)</title><rect x="810.4" y="277" width="0.2" height="15.0" fill="rgb(239,18,44)" rx="2" ry="2" />
<text  x="813.40" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%)</title><rect x="629.1" y="469" width="0.5" height="15.0" fill="rgb(248,105,39)" rx="2" ry="2" />
<text  x="632.13" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (11 samples, 0.02%)</title><rect x="943.3" y="405" width="0.3" height="15.0" fill="rgb(222,4,27)" rx="2" ry="2" />
<text  x="946.33" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (275 samples, 0.57%)</title><rect x="720.4" y="421" width="6.8" height="15.0" fill="rgb(252,79,46)" rx="2" ry="2" />
<text  x="723.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%)</title><rect x="602.6" y="405" width="0.7" height="15.0" fill="rgb(227,150,7)" rx="2" ry="2" />
<text  x="605.59" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (7 samples, 0.01%)</title><rect x="970.2" y="373" width="0.2" height="15.0" fill="rgb(253,98,23)" rx="2" ry="2" />
<text  x="973.22" y="383.5" ></text>
</g>
<g >
<title>database::do_apply (24 samples, 0.05%)</title><rect x="1141.5" y="341" width="0.6" height="15.0" fill="rgb(246,68,54)" rx="2" ry="2" />
<text  x="1144.54" y="351.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%)</title><rect x="417.1" y="373" width="0.7" height="15.0" fill="rgb(253,47,24)" rx="2" ry="2" />
<text  x="420.08" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (12 samples, 0.03%)</title><rect x="983.2" y="357" width="0.3" height="15.0" fill="rgb(240,156,6)" rx="2" ry="2" />
<text  x="986.25" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (39 samples, 0.08%)</title><rect x="16.3" y="309" width="1.0" height="15.0" fill="rgb(249,39,32)" rx="2" ry="2" />
<text  x="19.33" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (40 samples, 0.08%)</title><rect x="201.2" y="101" width="1.0" height="15.0" fill="rgb(218,227,14)" rx="2" ry="2" />
<text  x="204.22" y="111.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%)</title><rect x="18.2" y="261" width="0.1" height="15.0" fill="rgb(236,101,24)" rx="2" ry="2" />
<text  x="21.18" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.03%)</title><rect x="626.8" y="485" width="0.3" height="15.0" fill="rgb(235,209,42)" rx="2" ry="2" />
<text  x="629.77" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (11 samples, 0.02%)</title><rect x="714.3" y="469" width="0.3" height="15.0" fill="rgb(230,179,1)" rx="2" ry="2" />
<text  x="717.29" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,425 samples, 5.06%)</title><rect x="165.4" y="229" width="59.7" height="15.0" fill="rgb(221,197,29)" rx="2" ry="2" />
<text  x="168.39" y="239.5" >partit..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (9 samples, 0.02%)</title><rect x="1133.0" y="389" width="0.2" height="15.0" fill="rgb(228,137,52)" rx="2" ry="2" />
<text  x="1136.02" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (318 samples, 0.66%)</title><rect x="397.1" y="245" width="7.8" height="15.0" fill="rgb(227,153,49)" rx="2" ry="2" />
<text  x="400.11" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (11 samples, 0.02%)</title><rect x="597.6" y="421" width="0.3" height="15.0" fill="rgb(234,93,36)" rx="2" ry="2" />
<text  x="600.61" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (160 samples, 0.33%)</title><rect x="1048.9" y="277" width="4.0" height="15.0" fill="rgb(251,67,31)" rx="2" ry="2" />
<text  x="1051.92" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%)</title><rect x="586.0" y="389" width="0.3" height="15.0" fill="rgb(216,102,18)" rx="2" ry="2" />
<text  x="589.04" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (97 samples, 0.20%)</title><rect x="37.9" y="437" width="2.3" height="15.0" fill="rgb(225,101,23)" rx="2" ry="2" />
<text  x="40.85" y="447.5" ></text>
</g>
</g>
</svg>
