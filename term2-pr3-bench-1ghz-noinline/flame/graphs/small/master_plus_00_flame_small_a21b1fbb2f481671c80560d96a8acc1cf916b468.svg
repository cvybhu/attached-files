<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>query::digester::digester (2 samples, 0.04%)</title><rect x="597.9" y="437" width="0.4" height="15.0" fill="rgb(222,81,37)" rx="2" ry="2" />
<text  x="600.86" y="447.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="260.5" y="149" width="0.3" height="15.0" fill="rgb(214,172,31)" rx="2" ry="2" />
<text  x="263.53" y="159.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="74.1" y="437" width="0.2" height="15.0" fill="rgb(218,8,10)" rx="2" ry="2" />
<text  x="77.09" y="447.5" ></text>
</g>
<g >
<title>cql3::relation::get_operator (1 samples, 0.02%)</title><rect x="70.3" y="437" width="0.2" height="15.0" fill="rgb(221,49,26)" rx="2" ry="2" />
<text  x="73.27" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="819.6" y="309" width="0.2" height="15.0" fill="rgb(220,65,15)" rx="2" ry="2" />
<text  x="822.61" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::value_at_index (1 samples, 0.02%)</title><rect x="1123.0" y="245" width="0.2" height="15.0" fill="rgb(252,128,23)" rx="2" ry="2" />
<text  x="1125.98" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="1134.5" y="181" width="0.2" height="15.0" fill="rgb(243,171,2)" rx="2" ry="2" />
<text  x="1137.45" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (9 samples, 0.17%)</title><rect x="838.0" y="405" width="2.1" height="15.0" fill="rgb(226,64,22)" rx="2" ry="2" />
<text  x="841.05" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (274 samples, 5.22%)</title><rect x="17.0" y="629" width="61.6" height="15.0" fill="rgb(208,219,18)" rx="2" ry="2" />
<text  x="19.97" y="639.5" >seasta..</text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="251.3" y="165" width="0.2" height="15.0" fill="rgb(247,180,26)" rx="2" ry="2" />
<text  x="254.31" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%)</title><rect x="501.2" y="357" width="0.2" height="15.0" fill="rgb(208,201,20)" rx="2" ry="2" />
<text  x="504.16" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.1" y="229" width="0.2" height="15.0" fill="rgb(239,75,16)" rx="2" ry="2" />
<text  x="55.05" y="239.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1074.0" y="309" width="0.2" height="15.0" fill="rgb(237,132,34)" rx="2" ry="2" />
<text  x="1076.96" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.7" y="309" width="0.2" height="15.0" fill="rgb(245,106,39)" rx="2" ry="2" />
<text  x="82.72" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="897.2" y="325" width="0.2" height="15.0" fill="rgb(251,61,18)" rx="2" ry="2" />
<text  x="900.19" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (2 samples, 0.04%)</title><rect x="1085.9" y="389" width="0.4" height="15.0" fill="rgb(252,70,43)" rx="2" ry="2" />
<text  x="1088.88" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1 samples, 0.02%)</title><rect x="75.9" y="389" width="0.2" height="15.0" fill="rgb(213,183,45)" rx="2" ry="2" />
<text  x="78.89" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1058.2" y="341" width="0.2" height="15.0" fill="rgb(211,192,10)" rx="2" ry="2" />
<text  x="1061.21" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (11 samples, 0.21%)</title><rect x="1099.8" y="421" width="2.5" height="15.0" fill="rgb(236,34,7)" rx="2" ry="2" />
<text  x="1102.82" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="652.3" y="485" width="0.2" height="15.0" fill="rgb(244,140,18)" rx="2" ry="2" />
<text  x="655.29" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="783.8" y="261" width="0.5" height="15.0" fill="rgb(210,219,38)" rx="2" ry="2" />
<text  x="786.85" y="271.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1 samples, 0.02%)</title><rect x="10.4" y="613" width="0.3" height="15.0" fill="rgb(219,209,11)" rx="2" ry="2" />
<text  x="13.45" y="623.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="72.1" y="421" width="0.2" height="15.0" fill="rgb(221,113,40)" rx="2" ry="2" />
<text  x="75.07" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%)</title><rect x="417.7" y="261" width="0.5" height="15.0" fill="rgb(240,13,14)" rx="2" ry="2" />
<text  x="420.73" y="271.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (1 samples, 0.02%)</title><rect x="22.1" y="389" width="0.3" height="15.0" fill="rgb(238,42,36)" rx="2" ry="2" />
<text  x="25.14" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="441.3" y="421" width="0.3" height="15.0" fill="rgb(207,23,24)" rx="2" ry="2" />
<text  x="444.34" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="894.3" y="357" width="0.2" height="15.0" fill="rgb(242,195,35)" rx="2" ry="2" />
<text  x="897.27" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="55.7" y="101" width="0.4" height="15.0" fill="rgb(209,70,1)" rx="2" ry="2" />
<text  x="58.65" y="111.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="942.6" y="437" width="0.5" height="15.0" fill="rgb(243,206,41)" rx="2" ry="2" />
<text  x="945.62" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (10 samples, 0.19%)</title><rect x="683.5" y="517" width="2.3" height="15.0" fill="rgb(234,135,3)" rx="2" ry="2" />
<text  x="686.55" y="527.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%)</title><rect x="80.4" y="485" width="0.7" height="15.0" fill="rgb(225,48,43)" rx="2" ry="2" />
<text  x="83.39" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.0" y="261" width="0.3" height="15.0" fill="rgb(244,130,49)" rx="2" ry="2" />
<text  x="53.03" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1114.0" y="405" width="0.2" height="15.0" fill="rgb(245,99,48)" rx="2" ry="2" />
<text  x="1116.99" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.02%)</title><rect x="72.7" y="373" width="0.3" height="15.0" fill="rgb(231,31,16)" rx="2" ry="2" />
<text  x="75.74" y="383.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.10%)</title><rect x="594.9" y="453" width="1.2" height="15.0" fill="rgb(240,215,33)" rx="2" ry="2" />
<text  x="597.94" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="97.3" y="453" width="0.4" height="15.0" fill="rgb(248,181,18)" rx="2" ry="2" />
<text  x="100.26" y="463.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="46.9" y="325" width="0.2" height="15.0" fill="rgb(248,105,54)" rx="2" ry="2" />
<text  x="49.88" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%)</title><rect x="17.0" y="597" width="0.4" height="15.0" fill="rgb(217,42,26)" rx="2" ry="2" />
<text  x="19.97" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.23%)</title><rect x="797.6" y="293" width="2.7" height="15.0" fill="rgb(223,11,38)" rx="2" ry="2" />
<text  x="800.57" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="726.7" y="341" width="0.9" height="15.0" fill="rgb(226,114,38)" rx="2" ry="2" />
<text  x="729.73" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%)</title><rect x="858.3" y="341" width="0.2" height="15.0" fill="rgb(243,160,15)" rx="2" ry="2" />
<text  x="861.29" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (63 samples, 1.20%)</title><rect x="559.4" y="389" width="14.2" height="15.0" fill="rgb(232,44,1)" rx="2" ry="2" />
<text  x="562.41" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="1124.3" y="213" width="0.3" height="15.0" fill="rgb(244,41,19)" rx="2" ry="2" />
<text  x="1127.33" y="223.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1002.2" y="277" width="0.2" height="15.0" fill="rgb(241,30,11)" rx="2" ry="2" />
<text  x="1005.22" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1121.9" y="229" width="0.2" height="15.0" fill="rgb(215,34,9)" rx="2" ry="2" />
<text  x="1124.86" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="706.3" y="453" width="0.2" height="15.0" fill="rgb(242,89,39)" rx="2" ry="2" />
<text  x="709.26" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="853.8" y="357" width="0.2" height="15.0" fill="rgb(248,113,30)" rx="2" ry="2" />
<text  x="856.79" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="849.5" y="501" width="0.2" height="15.0" fill="rgb(243,10,12)" rx="2" ry="2" />
<text  x="852.52" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_sliceERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="70.7" y="421" width="0.2" height="15.0" fill="rgb(253,111,6)" rx="2" ry="2" />
<text  x="73.72" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="984.9" y="261" width="0.4" height="15.0" fill="rgb(215,23,0)" rx="2" ry="2" />
<text  x="987.90" y="271.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="101.8" y="517" width="0.2" height="15.0" fill="rgb(239,169,6)" rx="2" ry="2" />
<text  x="104.76" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (28 samples, 0.53%)</title><rect x="789.5" y="213" width="6.3" height="15.0" fill="rgb(241,171,19)" rx="2" ry="2" />
<text  x="792.47" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (47 samples, 0.90%)</title><rect x="675.7" y="533" width="10.5" height="15.0" fill="rgb(221,39,6)" rx="2" ry="2" />
<text  x="678.68" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="932.1" y="437" width="0.2" height="15.0" fill="rgb(205,109,31)" rx="2" ry="2" />
<text  x="935.05" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (1 samples, 0.02%)</title><rect x="695.9" y="501" width="0.2" height="15.0" fill="rgb(247,107,1)" rx="2" ry="2" />
<text  x="698.92" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="942.2" y="421" width="0.2" height="15.0" fill="rgb(231,145,39)" rx="2" ry="2" />
<text  x="945.17" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="1153.6" y="485" width="1.5" height="15.0" fill="rgb(221,102,44)" rx="2" ry="2" />
<text  x="1156.57" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="72.5" y="357" width="0.2" height="15.0" fill="rgb(226,90,35)" rx="2" ry="2" />
<text  x="75.52" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="153.5" y="437" width="0.2" height="15.0" fill="rgb(210,163,35)" rx="2" ry="2" />
<text  x="156.48" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1100.0" y="405" width="0.3" height="15.0" fill="rgb(247,116,10)" rx="2" ry="2" />
<text  x="1103.04" y="415.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="631.6" y="469" width="0.2" height="15.0" fill="rgb(233,99,22)" rx="2" ry="2" />
<text  x="634.60" y="479.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="855.8" y="261" width="0.5" height="15.0" fill="rgb(213,15,43)" rx="2" ry="2" />
<text  x="858.81" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="552.9" y="389" width="0.2" height="15.0" fill="rgb(209,59,37)" rx="2" ry="2" />
<text  x="555.89" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::maybe_advance_to (1 samples, 0.02%)</title><rect x="10.9" y="469" width="0.2" height="15.0" fill="rgb(223,118,50)" rx="2" ry="2" />
<text  x="13.90" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.7" y="405" width="0.3" height="15.0" fill="rgb(223,224,19)" rx="2" ry="2" />
<text  x="66.75" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="41.9" y="293" width="0.5" height="15.0" fill="rgb(216,116,49)" rx="2" ry="2" />
<text  x="44.93" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="120.9" y="469" width="0.2" height="15.0" fill="rgb(254,70,22)" rx="2" ry="2" />
<text  x="123.87" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (5 samples, 0.10%)</title><rect x="581.0" y="389" width="1.1" height="15.0" fill="rgb(242,31,36)" rx="2" ry="2" />
<text  x="584.00" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt; &gt; &gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="107.8" y="277" width="0.3" height="15.0" fill="rgb(217,73,31)" rx="2" ry="2" />
<text  x="110.83" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="470.4" y="309" width="0.2" height="15.0" fill="rgb(246,122,5)" rx="2" ry="2" />
<text  x="473.35" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::void_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1138.3" y="533" width="0.2" height="15.0" fill="rgb(214,110,39)" rx="2" ry="2" />
<text  x="1141.28" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="154.6" y="453" width="0.2" height="15.0" fill="rgb(248,167,13)" rx="2" ry="2" />
<text  x="157.60" y="463.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="501" width="0.2" height="15.0" fill="rgb(208,224,16)" rx="2" ry="2" />
<text  x="1169.39" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="117" width="0.2" height="15.0" fill="rgb(221,142,40)" rx="2" ry="2" />
<text  x="57.08" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="822.5" y="437" width="1.2" height="15.0" fill="rgb(211,10,38)" rx="2" ry="2" />
<text  x="825.53" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1118.3" y="453" width="0.2" height="15.0" fill="rgb(239,86,29)" rx="2" ry="2" />
<text  x="1121.26" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (16 samples, 0.30%)</title><rect x="1043.1" y="341" width="3.6" height="15.0" fill="rgb(221,5,39)" rx="2" ry="2" />
<text  x="1046.15" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="39.0" y="229" width="0.2" height="15.0" fill="rgb(229,70,53)" rx="2" ry="2" />
<text  x="42.01" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="594.3" y="421" width="0.2" height="15.0" fill="rgb(236,142,3)" rx="2" ry="2" />
<text  x="597.27" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="46.9" y="341" width="0.2" height="15.0" fill="rgb(228,161,15)" rx="2" ry="2" />
<text  x="49.88" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="17.4" y="581" width="0.2" height="15.0" fill="rgb(216,129,31)" rx="2" ry="2" />
<text  x="20.42" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="79.7" y="165" width="0.2" height="15.0" fill="rgb(206,213,13)" rx="2" ry="2" />
<text  x="82.72" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (48 samples, 0.91%)</title><rect x="26.2" y="309" width="10.8" height="15.0" fill="rgb(206,192,9)" rx="2" ry="2" />
<text  x="29.19" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1112.2" y="405" width="0.2" height="15.0" fill="rgb(231,126,14)" rx="2" ry="2" />
<text  x="1115.19" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1136.9" y="165" width="0.3" height="15.0" fill="rgb(227,4,4)" rx="2" ry="2" />
<text  x="1139.93" y="175.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="49.8" y="181" width="0.2" height="15.0" fill="rgb(248,93,46)" rx="2" ry="2" />
<text  x="52.81" y="191.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="678.6" y="485" width="0.2" height="15.0" fill="rgb(211,189,27)" rx="2" ry="2" />
<text  x="681.60" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="47.8" y="341" width="0.2" height="15.0" fill="rgb(213,225,26)" rx="2" ry="2" />
<text  x="50.78" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="543.2" y="357" width="0.2" height="15.0" fill="rgb(237,192,51)" rx="2" ry="2" />
<text  x="546.22" y="367.5" ></text>
</g>
<g >
<title>__libc_start_main (4,832 samples, 92.09%)</title><rect x="83.3" y="661" width="1086.7" height="15.0" fill="rgb(223,33,50)" rx="2" ry="2" />
<text  x="86.31" y="671.5" >__libc_start_main</text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="734.6" y="421" width="0.2" height="15.0" fill="rgb(210,128,42)" rx="2" ry="2" />
<text  x="737.60" y="431.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="20.3" y="517" width="0.3" height="15.0" fill="rgb(243,160,42)" rx="2" ry="2" />
<text  x="23.34" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%)</title><rect x="523.6" y="261" width="0.7" height="15.0" fill="rgb(213,180,40)" rx="2" ry="2" />
<text  x="526.65" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="831.3" y="437" width="1.1" height="15.0" fill="rgb(224,124,51)" rx="2" ry="2" />
<text  x="834.30" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (54 samples, 1.03%)</title><rect x="25.1" y="325" width="12.1" height="15.0" fill="rgb(252,92,23)" rx="2" ry="2" />
<text  x="28.07" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="757.3" y="341" width="0.5" height="15.0" fill="rgb(239,229,18)" rx="2" ry="2" />
<text  x="760.31" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1168.4" y="533" width="0.2" height="15.0" fill="rgb(212,123,50)" rx="2" ry="2" />
<text  x="1171.41" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (87 samples, 1.66%)</title><rect x="507.9" y="341" width="19.6" height="15.0" fill="rgb(205,100,36)" rx="2" ry="2" />
<text  x="510.91" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1078.5" y="325" width="0.2" height="15.0" fill="rgb(249,203,45)" rx="2" ry="2" />
<text  x="1081.45" y="335.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_large_cells (1 samples, 0.02%)</title><rect x="82.2" y="357" width="0.2" height="15.0" fill="rgb(217,26,32)" rx="2" ry="2" />
<text  x="85.19" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="437" width="0.7" height="15.0" fill="rgb(225,186,36)" rx="2" ry="2" />
<text  x="689.25" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="796.7" y="293" width="0.2" height="15.0" fill="rgb(239,57,20)" rx="2" ry="2" />
<text  x="799.67" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%)</title><rect x="927.6" y="421" width="1.1" height="15.0" fill="rgb(251,78,24)" rx="2" ry="2" />
<text  x="930.55" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="826.4" y="469" width="0.6" height="15.0" fill="rgb(205,174,38)" rx="2" ry="2" />
<text  x="829.35" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="24.6" y="245" width="0.2" height="15.0" fill="rgb(231,80,30)" rx="2" ry="2" />
<text  x="27.62" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="320.3" y="389" width="0.3" height="15.0" fill="rgb(234,31,15)" rx="2" ry="2" />
<text  x="323.35" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="435.5" y="309" width="0.2" height="15.0" fill="rgb(211,21,44)" rx="2" ry="2" />
<text  x="438.49" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.3" y="277" width="0.2" height="15.0" fill="rgb(206,89,1)" rx="2" ry="2" />
<text  x="62.25" y="287.5" ></text>
</g>
<g >
<title>schema::position (2 samples, 0.04%)</title><rect x="1109.3" y="453" width="0.4" height="15.0" fill="rgb(234,38,0)" rx="2" ry="2" />
<text  x="1112.26" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="389" width="8.1" height="15.0" fill="rgb(223,222,45)" rx="2" ry="2" />
<text  x="1130.48" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="946.4" y="421" width="1.8" height="15.0" fill="rgb(224,17,44)" rx="2" ry="2" />
<text  x="949.44" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1056.4" y="341" width="0.2" height="15.0" fill="rgb(233,84,26)" rx="2" ry="2" />
<text  x="1059.42" y="351.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="18.5" y="421" width="0.3" height="15.0" fill="rgb(246,155,43)" rx="2" ry="2" />
<text  x="21.55" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="105.4" y="357" width="0.2" height="15.0" fill="rgb(244,47,38)" rx="2" ry="2" />
<text  x="108.35" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="81.3" y="421" width="0.4" height="15.0" fill="rgb(241,115,42)" rx="2" ry="2" />
<text  x="84.29" y="431.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="254.5" y="181" width="0.2" height="15.0" fill="rgb(247,89,13)" rx="2" ry="2" />
<text  x="257.46" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="644.4" y="517" width="0.7" height="15.0" fill="rgb(227,27,38)" rx="2" ry="2" />
<text  x="647.42" y="527.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="599.0" y="405" width="0.4" height="15.0" fill="rgb(252,7,0)" rx="2" ry="2" />
<text  x="601.99" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="276.0" y="229" width="0.3" height="15.0" fill="rgb(224,114,1)" rx="2" ry="2" />
<text  x="279.05" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (11 samples, 0.21%)</title><rect x="552.0" y="405" width="2.5" height="15.0" fill="rgb(230,206,19)" rx="2" ry="2" />
<text  x="554.99" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="49.4" y="165" width="0.2" height="15.0" fill="rgb(246,8,29)" rx="2" ry="2" />
<text  x="52.36" y="175.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="613.4" y="453" width="1.3" height="15.0" fill="rgb(244,183,44)" rx="2" ry="2" />
<text  x="616.38" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="18.3" y="597" width="0.7" height="15.0" fill="rgb(209,27,1)" rx="2" ry="2" />
<text  x="21.32" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (43 samples, 0.82%)</title><rect x="92.1" y="533" width="9.7" height="15.0" fill="rgb(245,148,23)" rx="2" ry="2" />
<text  x="95.09" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.11%)</title><rect x="680.6" y="501" width="1.4" height="15.0" fill="rgb(222,202,4)" rx="2" ry="2" />
<text  x="683.62" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="62.2" y="373" width="0.2" height="15.0" fill="rgb(207,63,29)" rx="2" ry="2" />
<text  x="65.17" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (50 samples, 0.95%)</title><rect x="699.3" y="533" width="11.2" height="15.0" fill="rgb(254,225,40)" rx="2" ry="2" />
<text  x="702.29" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="849.5" y="469" width="0.2" height="15.0" fill="rgb(223,30,40)" rx="2" ry="2" />
<text  x="852.52" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1108.6" y="453" width="0.2" height="15.0" fill="rgb(244,204,41)" rx="2" ry="2" />
<text  x="1111.59" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="22.4" y="453" width="0.2" height="15.0" fill="rgb(237,222,24)" rx="2" ry="2" />
<text  x="25.37" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="976.1" y="341" width="2.3" height="15.0" fill="rgb(229,226,43)" rx="2" ry="2" />
<text  x="979.13" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="954.5" y="405" width="0.3" height="15.0" fill="rgb(242,134,27)" rx="2" ry="2" />
<text  x="957.54" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.4" y="213" width="0.3" height="15.0" fill="rgb(254,111,35)" rx="2" ry="2" />
<text  x="49.43" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="105.8" y="517" width="0.2" height="15.0" fill="rgb(225,69,34)" rx="2" ry="2" />
<text  x="108.80" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="24.6" y="229" width="0.2" height="15.0" fill="rgb(211,223,13)" rx="2" ry="2" />
<text  x="27.62" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (20 samples, 0.38%)</title><rect x="382.0" y="197" width="4.5" height="15.0" fill="rgb(237,141,47)" rx="2" ry="2" />
<text  x="384.97" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (191 samples, 3.64%)</title><rect x="23.0" y="421" width="43.0" height="15.0" fill="rgb(248,61,47)" rx="2" ry="2" />
<text  x="26.04" y="431.5" >cql3..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="1027.2" y="293" width="0.7" height="15.0" fill="rgb(246,57,45)" rx="2" ry="2" />
<text  x="1030.18" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%)</title><rect x="603.7" y="469" width="0.7" height="15.0" fill="rgb(247,114,23)" rx="2" ry="2" />
<text  x="606.71" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="132.6" y="485" width="0.2" height="15.0" fill="rgb(225,163,18)" rx="2" ry="2" />
<text  x="135.57" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="81.1" y="469" width="0.2" height="15.0" fill="rgb(243,137,9)" rx="2" ry="2" />
<text  x="84.07" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="892.2" y="309" width="0.3" height="15.0" fill="rgb(253,45,17)" rx="2" ry="2" />
<text  x="895.25" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="267.0" y="277" width="0.3" height="15.0" fill="rgb(230,77,27)" rx="2" ry="2" />
<text  x="270.05" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="678.1" y="501" width="0.3" height="15.0" fill="rgb(236,80,25)" rx="2" ry="2" />
<text  x="681.15" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="630.2" y="517" width="0.3" height="15.0" fill="rgb(215,190,10)" rx="2" ry="2" />
<text  x="633.25" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="775.5" y="325" width="0.5" height="15.0" fill="rgb(243,151,1)" rx="2" ry="2" />
<text  x="778.53" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%)</title><rect x="726.1" y="357" width="0.6" height="15.0" fill="rgb(224,218,32)" rx="2" ry="2" />
<text  x="729.05" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="79.7" y="533" width="0.2" height="15.0" fill="rgb(233,132,48)" rx="2" ry="2" />
<text  x="82.72" y="543.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="857.6" y="245" width="0.2" height="15.0" fill="rgb(216,102,40)" rx="2" ry="2" />
<text  x="860.61" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%)</title><rect x="854.9" y="357" width="0.5" height="15.0" fill="rgb(228,37,15)" rx="2" ry="2" />
<text  x="857.91" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="332.0" y="293" width="0.7" height="15.0" fill="rgb(208,105,29)" rx="2" ry="2" />
<text  x="335.04" y="303.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (1 samples, 0.02%)</title><rect x="105.6" y="421" width="0.2" height="15.0" fill="rgb(228,32,27)" rx="2" ry="2" />
<text  x="108.58" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="807.5" y="373" width="0.2" height="15.0" fill="rgb(222,213,39)" rx="2" ry="2" />
<text  x="810.46" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%)</title><rect x="841.9" y="501" width="0.2" height="15.0" fill="rgb(238,117,43)" rx="2" ry="2" />
<text  x="844.87" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="527.0" y="325" width="0.2" height="15.0" fill="rgb(232,29,4)" rx="2" ry="2" />
<text  x="530.02" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1132.0" y="133" width="0.2" height="15.0" fill="rgb(244,172,40)" rx="2" ry="2" />
<text  x="1134.98" y="143.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.9" y="597" width="0.2" height="15.0" fill="rgb(210,87,18)" rx="2" ry="2" />
<text  x="13.90" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="784.7" y="213" width="1.6" height="15.0" fill="rgb(239,82,6)" rx="2" ry="2" />
<text  x="787.75" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="92.8" y="517" width="0.9" height="15.0" fill="rgb(252,139,43)" rx="2" ry="2" />
<text  x="95.76" y="527.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="707.4" y="469" width="0.2" height="15.0" fill="rgb(236,215,28)" rx="2" ry="2" />
<text  x="710.39" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (22 samples, 0.42%)</title><rect x="747.0" y="453" width="4.9" height="15.0" fill="rgb(234,204,52)" rx="2" ry="2" />
<text  x="749.97" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="830.0" y="373" width="0.2" height="15.0" fill="rgb(214,139,30)" rx="2" ry="2" />
<text  x="832.95" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="935.9" y="405" width="0.2" height="15.0" fill="rgb(251,173,29)" rx="2" ry="2" />
<text  x="938.87" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="465.4" y="341" width="0.2" height="15.0" fill="rgb(251,71,15)" rx="2" ry="2" />
<text  x="468.40" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="849.1" y="293" width="0.2" height="15.0" fill="rgb(219,92,36)" rx="2" ry="2" />
<text  x="852.07" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (16 samples, 0.30%)</title><rect x="1031.7" y="309" width="3.6" height="15.0" fill="rgb(247,34,3)" rx="2" ry="2" />
<text  x="1034.68" y="319.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (4 samples, 0.08%)</title><rect x="781.1" y="293" width="0.9" height="15.0" fill="rgb(222,193,19)" rx="2" ry="2" />
<text  x="784.15" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.3" y="485" width="0.2" height="15.0" fill="rgb(224,37,5)" rx="2" ry="2" />
<text  x="21.32" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%)</title><rect x="347.6" y="197" width="0.4" height="15.0" fill="rgb(215,46,38)" rx="2" ry="2" />
<text  x="350.56" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="587.7" y="453" width="0.7" height="15.0" fill="rgb(244,26,37)" rx="2" ry="2" />
<text  x="590.74" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="38.8" y="277" width="0.2" height="15.0" fill="rgb(241,38,36)" rx="2" ry="2" />
<text  x="41.79" y="287.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="885.9" y="309" width="0.3" height="15.0" fill="rgb(227,122,4)" rx="2" ry="2" />
<text  x="888.95" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (7 samples, 0.13%)</title><rect x="684.2" y="501" width="1.6" height="15.0" fill="rgb(232,141,8)" rx="2" ry="2" />
<text  x="687.22" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="22.4" y="389" width="0.2" height="15.0" fill="rgb(219,13,28)" rx="2" ry="2" />
<text  x="25.37" y="399.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1125.9" y="293" width="0.2" height="15.0" fill="rgb(237,38,7)" rx="2" ry="2" />
<text  x="1128.91" y="303.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.7" y="245" width="0.2" height="15.0" fill="rgb(225,187,22)" rx="2" ry="2" />
<text  x="51.68" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="718.2" y="469" width="0.2" height="15.0" fill="rgb(208,72,37)" rx="2" ry="2" />
<text  x="721.18" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1121.0" y="229" width="0.2" height="15.0" fill="rgb(253,20,1)" rx="2" ry="2" />
<text  x="1123.96" y="239.5" ></text>
</g>
<g >
<title>main (4,832 samples, 92.09%)</title><rect x="83.3" y="645" width="1086.7" height="15.0" fill="rgb(229,96,3)" rx="2" ry="2" />
<text  x="86.31" y="655.5" >main</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (2 samples, 0.04%)</title><rect x="745.4" y="437" width="0.4" height="15.0" fill="rgb(249,111,2)" rx="2" ry="2" />
<text  x="748.39" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (2 samples, 0.04%)</title><rect x="586.8" y="469" width="0.5" height="15.0" fill="rgb(249,221,9)" rx="2" ry="2" />
<text  x="589.84" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.8" y="277" width="0.2" height="15.0" fill="rgb(249,148,13)" rx="2" ry="2" />
<text  x="52.81" y="287.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="881.9" y="341" width="1.6" height="15.0" fill="rgb(250,87,3)" rx="2" ry="2" />
<text  x="884.90" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (1 samples, 0.02%)</title><rect x="660.8" y="517" width="0.3" height="15.0" fill="rgb(224,133,19)" rx="2" ry="2" />
<text  x="663.83" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (1 samples, 0.02%)</title><rect x="10.7" y="485" width="0.2" height="15.0" fill="rgb(240,163,31)" rx="2" ry="2" />
<text  x="13.67" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="1144.8" y="485" width="0.9" height="15.0" fill="rgb(243,75,13)" rx="2" ry="2" />
<text  x="1147.80" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="126.7" y="421" width="0.7" height="15.0" fill="rgb(239,124,37)" rx="2" ry="2" />
<text  x="129.72" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="630.5" y="485" width="0.4" height="15.0" fill="rgb(242,210,34)" rx="2" ry="2" />
<text  x="633.47" y="495.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (15 samples, 0.29%)</title><rect x="836.7" y="469" width="3.4" height="15.0" fill="rgb(219,148,50)" rx="2" ry="2" />
<text  x="839.70" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (11 samples, 0.21%)</title><rect x="1018.9" y="261" width="2.4" height="15.0" fill="rgb(229,209,26)" rx="2" ry="2" />
<text  x="1021.86" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (32 samples, 0.61%)</title><rect x="456.0" y="325" width="7.2" height="15.0" fill="rgb(228,96,37)" rx="2" ry="2" />
<text  x="458.96" y="335.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="56.8" y="245" width="0.2" height="15.0" fill="rgb(206,157,47)" rx="2" ry="2" />
<text  x="59.78" y="255.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="509.9" y="325" width="0.9" height="15.0" fill="rgb(208,69,24)" rx="2" ry="2" />
<text  x="512.93" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%)</title><rect x="71.4" y="389" width="0.2" height="15.0" fill="rgb(225,46,13)" rx="2" ry="2" />
<text  x="74.40" y="399.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%)</title><rect x="1166.6" y="421" width="0.2" height="15.0" fill="rgb(254,121,20)" rx="2" ry="2" />
<text  x="1169.61" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="453" width="8.1" height="15.0" fill="rgb(216,158,5)" rx="2" ry="2" />
<text  x="1130.48" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="108.1" y="405" width="0.2" height="15.0" fill="rgb(243,95,0)" rx="2" ry="2" />
<text  x="111.05" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%)</title><rect x="348.5" y="213" width="0.9" height="15.0" fill="rgb(251,4,38)" rx="2" ry="2" />
<text  x="351.46" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (4 samples, 0.08%)</title><rect x="650.7" y="485" width="0.9" height="15.0" fill="rgb(220,143,35)" rx="2" ry="2" />
<text  x="653.71" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.6" y="373" width="0.2" height="15.0" fill="rgb(211,57,20)" rx="2" ry="2" />
<text  x="25.59" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.5" y="389" width="0.3" height="15.0" fill="rgb(213,150,11)" rx="2" ry="2" />
<text  x="21.55" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="252.9" y="133" width="0.2" height="15.0" fill="rgb(211,225,25)" rx="2" ry="2" />
<text  x="255.88" y="143.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1121.6" y="261" width="0.5" height="15.0" fill="rgb(222,213,9)" rx="2" ry="2" />
<text  x="1124.63" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1057.8" y="325" width="0.4" height="15.0" fill="rgb(205,96,8)" rx="2" ry="2" />
<text  x="1060.76" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.8" y="117" width="0.2" height="15.0" fill="rgb(254,93,50)" rx="2" ry="2" />
<text  x="1134.75" y="127.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="18.5" y="533" width="0.5" height="15.0" fill="rgb(232,116,45)" rx="2" ry="2" />
<text  x="21.55" y="543.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="1123.2" y="245" width="0.2" height="15.0" fill="rgb(249,173,54)" rx="2" ry="2" />
<text  x="1126.21" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (19 samples, 0.36%)</title><rect x="614.7" y="453" width="4.3" height="15.0" fill="rgb(223,56,34)" rx="2" ry="2" />
<text  x="617.73" y="463.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="42.6" y="181" width="0.2" height="15.0" fill="rgb(205,78,34)" rx="2" ry="2" />
<text  x="45.61" y="191.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1125.9" y="277" width="0.2" height="15.0" fill="rgb(245,60,27)" rx="2" ry="2" />
<text  x="1128.91" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="809.7" y="309" width="0.2" height="15.0" fill="rgb(249,200,26)" rx="2" ry="2" />
<text  x="812.71" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (53 samples, 1.01%)</title><rect x="178.4" y="309" width="12.0" height="15.0" fill="rgb(216,68,12)" rx="2" ry="2" />
<text  x="181.44" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="751.5" y="405" width="0.2" height="15.0" fill="rgb(235,107,41)" rx="2" ry="2" />
<text  x="754.46" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="80.2" y="581" width="0.2" height="15.0" fill="rgb(233,159,19)" rx="2" ry="2" />
<text  x="83.17" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.1" y="213" width="0.5" height="15.0" fill="rgb(254,12,38)" rx="2" ry="2" />
<text  x="52.13" y="223.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="593.4" y="421" width="0.6" height="15.0" fill="rgb(250,158,23)" rx="2" ry="2" />
<text  x="596.37" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="264.8" y="261" width="0.5" height="15.0" fill="rgb(232,153,8)" rx="2" ry="2" />
<text  x="267.80" y="271.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.3" y="405" width="0.2" height="15.0" fill="rgb(243,72,52)" rx="2" ry="2" />
<text  x="21.32" y="415.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (8 samples, 0.15%)</title><rect x="748.3" y="421" width="1.8" height="15.0" fill="rgb(221,117,2)" rx="2" ry="2" />
<text  x="751.32" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="1157.2" y="485" width="0.2" height="15.0" fill="rgb(222,96,24)" rx="2" ry="2" />
<text  x="1160.17" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="602.8" y="469" width="0.5" height="15.0" fill="rgb(231,179,30)" rx="2" ry="2" />
<text  x="605.81" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="79.9" y="373" width="0.3" height="15.0" fill="rgb(209,119,28)" rx="2" ry="2" />
<text  x="82.94" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="624.2" y="421" width="0.2" height="15.0" fill="rgb(254,229,18)" rx="2" ry="2" />
<text  x="627.18" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="646.4" y="469" width="0.3" height="15.0" fill="rgb(220,210,41)" rx="2" ry="2" />
<text  x="649.44" y="479.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%)</title><rect x="345.3" y="197" width="0.5" height="15.0" fill="rgb(211,31,28)" rx="2" ry="2" />
<text  x="348.31" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (1 samples, 0.02%)</title><rect x="58.4" y="341" width="0.2" height="15.0" fill="rgb(252,54,44)" rx="2" ry="2" />
<text  x="61.35" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (11 samples, 0.21%)</title><rect x="616.1" y="421" width="2.5" height="15.0" fill="rgb(238,166,35)" rx="2" ry="2" />
<text  x="619.08" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="968.0" y="389" width="0.3" height="15.0" fill="rgb(236,197,50)" rx="2" ry="2" />
<text  x="971.03" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%)</title><rect x="909.6" y="389" width="2.4" height="15.0" fill="rgb(208,88,19)" rx="2" ry="2" />
<text  x="912.56" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="59.7" y="213" width="0.2" height="15.0" fill="rgb(242,162,53)" rx="2" ry="2" />
<text  x="62.70" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="631.6" y="437" width="0.2" height="15.0" fill="rgb(234,192,7)" rx="2" ry="2" />
<text  x="634.60" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="60.4" y="261" width="0.2" height="15.0" fill="rgb(212,205,54)" rx="2" ry="2" />
<text  x="63.38" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="294.9" y="341" width="0.5" height="15.0" fill="rgb(247,121,42)" rx="2" ry="2" />
<text  x="297.94" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (11 samples, 0.21%)</title><rect x="96.4" y="485" width="2.4" height="15.0" fill="rgb(226,98,33)" rx="2" ry="2" />
<text  x="99.36" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="847.0" y="533" width="0.3" height="15.0" fill="rgb(221,26,10)" rx="2" ry="2" />
<text  x="850.04" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="197" width="0.2" height="15.0" fill="rgb(210,156,45)" rx="2" ry="2" />
<text  x="57.08" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="47.3" y="325" width="0.3" height="15.0" fill="rgb(245,94,53)" rx="2" ry="2" />
<text  x="50.33" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (4 samples, 0.08%)</title><rect x="536.0" y="293" width="0.9" height="15.0" fill="rgb(240,217,1)" rx="2" ry="2" />
<text  x="539.02" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.5" y="373" width="0.3" height="15.0" fill="rgb(221,64,28)" rx="2" ry="2" />
<text  x="21.55" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="779.8" y="277" width="0.4" height="15.0" fill="rgb(225,91,35)" rx="2" ry="2" />
<text  x="782.80" y="287.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%)</title><rect x="945.1" y="405" width="0.2" height="15.0" fill="rgb(246,211,49)" rx="2" ry="2" />
<text  x="948.09" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="326.9" y="309" width="0.4" height="15.0" fill="rgb(214,215,7)" rx="2" ry="2" />
<text  x="329.87" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%)</title><rect x="420.0" y="261" width="2.2" height="15.0" fill="rgb(227,5,27)" rx="2" ry="2" />
<text  x="422.98" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="687.8" y="517" width="0.2" height="15.0" fill="rgb(220,185,17)" rx="2" ry="2" />
<text  x="690.82" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="291.8" y="293" width="0.2" height="15.0" fill="rgb(224,16,21)" rx="2" ry="2" />
<text  x="294.79" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="324.8" y="389" width="0.3" height="15.0" fill="rgb(250,133,34)" rx="2" ry="2" />
<text  x="327.85" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,832 samples, 92.09%)</title><rect x="83.3" y="613" width="1086.7" height="15.0" fill="rgb(211,17,3)" rx="2" ry="2" />
<text  x="86.31" y="623.5" >seastar::app_template::run</text>
</g>
<g >
<title>all (5,247 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(240,182,47)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="855.6" y="277" width="0.7" height="15.0" fill="rgb(238,0,5)" rx="2" ry="2" />
<text  x="858.59" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="610.5" y="437" width="0.4" height="15.0" fill="rgb(222,48,17)" rx="2" ry="2" />
<text  x="613.46" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (5 samples, 0.10%)</title><rect x="621.3" y="437" width="1.1" height="15.0" fill="rgb(235,121,54)" rx="2" ry="2" />
<text  x="624.25" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="321.0" y="437" width="0.2" height="15.0" fill="rgb(253,57,49)" rx="2" ry="2" />
<text  x="324.02" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="856.0" y="229" width="0.3" height="15.0" fill="rgb(207,53,49)" rx="2" ry="2" />
<text  x="859.04" y="239.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="129.2" y="437" width="0.2" height="15.0" fill="rgb(213,76,17)" rx="2" ry="2" />
<text  x="132.19" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%)</title><rect x="727.6" y="437" width="1.1" height="15.0" fill="rgb(246,97,53)" rx="2" ry="2" />
<text  x="730.63" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.0" y="661" width="0.2" height="15.0" fill="rgb(217,148,17)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="61.3" y="261" width="0.2" height="15.0" fill="rgb(242,216,38)" rx="2" ry="2" />
<text  x="64.28" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="618.1" y="389" width="0.2" height="15.0" fill="rgb(251,216,16)" rx="2" ry="2" />
<text  x="621.10" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="828.6" y="389" width="0.2" height="15.0" fill="rgb(228,203,49)" rx="2" ry="2" />
<text  x="831.60" y="399.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (1 samples, 0.02%)</title><rect x="132.3" y="485" width="0.3" height="15.0" fill="rgb(224,141,26)" rx="2" ry="2" />
<text  x="135.34" y="495.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (4 samples, 0.08%)</title><rect x="121.5" y="485" width="0.9" height="15.0" fill="rgb(227,195,27)" rx="2" ry="2" />
<text  x="124.55" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="59.7" y="197" width="0.2" height="15.0" fill="rgb(245,113,33)" rx="2" ry="2" />
<text  x="62.70" y="207.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="18.3" y="101" width="0.2" height="15.0" fill="rgb(226,108,31)" rx="2" ry="2" />
<text  x="21.32" y="111.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,138 samples, 21.69%)</title><rect x="863.2" y="501" width="256.0" height="15.0" fill="rgb(230,222,33)" rx="2" ry="2" />
<text  x="866.23" y="511.5" >seastar::noncopyable_function&lt;seas..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="130.5" y="421" width="0.3" height="15.0" fill="rgb(241,80,44)" rx="2" ry="2" />
<text  x="133.54" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="854.5" y="357" width="0.2" height="15.0" fill="rgb(241,190,27)" rx="2" ry="2" />
<text  x="857.46" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="564.8" y="341" width="0.2" height="15.0" fill="rgb(235,35,0)" rx="2" ry="2" />
<text  x="567.80" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="262.6" y="245" width="0.2" height="15.0" fill="rgb(230,5,6)" rx="2" ry="2" />
<text  x="265.55" y="255.5" ></text>
</g>
<g >
<title>seastar::stream&lt;seastar::directory_entry&gt;::listen (1 samples, 0.02%)</title><rect x="687.4" y="389" width="0.2" height="15.0" fill="rgb(235,228,31)" rx="2" ry="2" />
<text  x="690.37" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="61.3" y="165" width="0.2" height="15.0" fill="rgb(220,59,19)" rx="2" ry="2" />
<text  x="64.28" y="175.5" ></text>
</g>
<g >
<title>schema::partition_key_size (2 samples, 0.04%)</title><rect x="1108.8" y="453" width="0.5" height="15.0" fill="rgb(227,77,52)" rx="2" ry="2" />
<text  x="1111.81" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="429.6" y="245" width="0.5" height="15.0" fill="rgb(210,23,47)" rx="2" ry="2" />
<text  x="432.65" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="658.8" y="501" width="0.5" height="15.0" fill="rgb(236,109,17)" rx="2" ry="2" />
<text  x="661.81" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="35.2" y="261" width="0.2" height="15.0" fill="rgb(247,114,2)" rx="2" ry="2" />
<text  x="38.19" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (7 samples, 0.13%)</title><rect x="940.4" y="405" width="1.5" height="15.0" fill="rgb(242,44,2)" rx="2" ry="2" />
<text  x="943.37" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="57.9" y="293" width="0.2" height="15.0" fill="rgb(211,196,32)" rx="2" ry="2" />
<text  x="60.90" y="303.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.25%)</title><rect x="1129.7" y="245" width="3.0" height="15.0" fill="rgb(220,205,27)" rx="2" ry="2" />
<text  x="1132.73" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="982.7" y="341" width="2.6" height="15.0" fill="rgb(247,25,30)" rx="2" ry="2" />
<text  x="985.65" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="664.2" y="517" width="0.5" height="15.0" fill="rgb(247,71,20)" rx="2" ry="2" />
<text  x="667.21" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="798.9" y="277" width="0.2" height="15.0" fill="rgb(250,139,49)" rx="2" ry="2" />
<text  x="801.92" y="287.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="762.5" y="405" width="0.4" height="15.0" fill="rgb(221,80,49)" rx="2" ry="2" />
<text  x="765.48" y="415.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="515.1" y="261" width="0.5" height="15.0" fill="rgb(239,27,11)" rx="2" ry="2" />
<text  x="518.10" y="271.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="27.8" y="293" width="0.4" height="15.0" fill="rgb(241,65,53)" rx="2" ry="2" />
<text  x="30.77" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1109.7" y="453" width="0.2" height="15.0" fill="rgb(244,94,44)" rx="2" ry="2" />
<text  x="1112.71" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (3 samples, 0.06%)</title><rect x="625.3" y="469" width="0.7" height="15.0" fill="rgb(247,97,46)" rx="2" ry="2" />
<text  x="628.30" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="582.1" y="389" width="0.5" height="15.0" fill="rgb(207,85,3)" rx="2" ry="2" />
<text  x="585.12" y="399.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="18.3" y="213" width="0.2" height="15.0" fill="rgb(248,221,53)" rx="2" ry="2" />
<text  x="21.32" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_create_nodes (1 samples, 0.02%)</title><rect x="21.9" y="389" width="0.2" height="15.0" fill="rgb(239,44,13)" rx="2" ry="2" />
<text  x="24.92" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (10 samples, 0.19%)</title><rect x="605.5" y="469" width="2.3" height="15.0" fill="rgb(205,142,10)" rx="2" ry="2" />
<text  x="608.51" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.1" y="293" width="0.3" height="15.0" fill="rgb(216,192,25)" rx="2" ry="2" />
<text  x="43.14" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,158 samples, 22.07%)</title><rect x="859.0" y="517" width="260.4" height="15.0" fill="rgb(239,52,14)" rx="2" ry="2" />
<text  x="861.96" y="527.5" >seastar::concrete_execution_stage&lt;..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.08%)</title><rect x="128.3" y="405" width="0.9" height="15.0" fill="rgb(232,160,10)" rx="2" ry="2" />
<text  x="131.29" y="415.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (37 samples, 0.71%)</title><rect x="1171.1" y="661" width="8.3" height="15.0" fill="rgb(236,137,50)" rx="2" ry="2" />
<text  x="1174.11" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1099.6" y="421" width="0.2" height="15.0" fill="rgb(234,132,13)" rx="2" ry="2" />
<text  x="1102.59" y="431.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="750.1" y="437" width="1.6" height="15.0" fill="rgb(208,32,34)" rx="2" ry="2" />
<text  x="753.11" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1057.5" y="325" width="0.3" height="15.0" fill="rgb(207,218,12)" rx="2" ry="2" />
<text  x="1060.54" y="335.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (1 samples, 0.02%)</title><rect x="264.4" y="261" width="0.2" height="15.0" fill="rgb(230,201,3)" rx="2" ry="2" />
<text  x="267.35" y="271.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="108.1" y="389" width="0.2" height="15.0" fill="rgb(214,132,37)" rx="2" ry="2" />
<text  x="111.05" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="682.0" y="501" width="1.5" height="15.0" fill="rgb(241,138,6)" rx="2" ry="2" />
<text  x="684.97" y="511.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (251 samples, 4.78%)</title><rect x="981.5" y="373" width="56.5" height="15.0" fill="rgb(250,210,51)" rx="2" ry="2" />
<text  x="984.53" y="383.5" >servi..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1126.4" y="293" width="0.2" height="15.0" fill="rgb(248,215,18)" rx="2" ry="2" />
<text  x="1129.36" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="36.8" y="293" width="0.2" height="15.0" fill="rgb(216,175,12)" rx="2" ry="2" />
<text  x="39.76" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="80.4" y="549" width="2.7" height="15.0" fill="rgb(207,178,42)" rx="2" ry="2" />
<text  x="83.39" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1133.8" y="181" width="0.2" height="15.0" fill="rgb(205,118,31)" rx="2" ry="2" />
<text  x="1136.78" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (3 samples, 0.06%)</title><rect x="555.4" y="453" width="0.6" height="15.0" fill="rgb(240,164,6)" rx="2" ry="2" />
<text  x="558.36" y="463.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.11%)</title><rect x="196.9" y="245" width="1.3" height="15.0" fill="rgb(207,166,11)" rx="2" ry="2" />
<text  x="199.88" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (19 samples, 0.36%)</title><rect x="199.4" y="261" width="4.2" height="15.0" fill="rgb(250,115,39)" rx="2" ry="2" />
<text  x="202.36" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%)</title><rect x="81.3" y="469" width="0.4" height="15.0" fill="rgb(206,194,18)" rx="2" ry="2" />
<text  x="84.29" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="897.6" y="325" width="0.3" height="15.0" fill="rgb(236,88,11)" rx="2" ry="2" />
<text  x="900.64" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="129.4" y="437" width="0.2" height="15.0" fill="rgb(206,98,14)" rx="2" ry="2" />
<text  x="132.42" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="765.9" y="389" width="0.4" height="15.0" fill="rgb(250,140,11)" rx="2" ry="2" />
<text  x="768.86" y="399.5" ></text>
</g>
<g >
<title>database::apply_in_memory (1 samples, 0.02%)</title><rect x="1119.8" y="341" width="0.3" height="15.0" fill="rgb(207,128,8)" rx="2" ry="2" />
<text  x="1122.83" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (5 samples, 0.10%)</title><rect x="568.9" y="293" width="1.1" height="15.0" fill="rgb(241,76,34)" rx="2" ry="2" />
<text  x="571.85" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%)</title><rect x="119.7" y="453" width="1.2" height="15.0" fill="rgb(240,148,36)" rx="2" ry="2" />
<text  x="122.75" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="16.7" y="629" width="0.3" height="15.0" fill="rgb(236,175,43)" rx="2" ry="2" />
<text  x="19.75" y="639.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="854.0" y="357" width="0.2" height="15.0" fill="rgb(242,156,26)" rx="2" ry="2" />
<text  x="857.01" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="706.5" y="453" width="0.2" height="15.0" fill="rgb(235,219,38)" rx="2" ry="2" />
<text  x="709.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="813.1" y="357" width="0.9" height="15.0" fill="rgb(252,116,27)" rx="2" ry="2" />
<text  x="816.08" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="835.3" y="357" width="0.3" height="15.0" fill="rgb(231,211,24)" rx="2" ry="2" />
<text  x="838.35" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (5 samples, 0.10%)</title><rect x="738.9" y="405" width="1.1" height="15.0" fill="rgb(232,43,35)" rx="2" ry="2" />
<text  x="741.87" y="415.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="653.9" y="485" width="0.6" height="15.0" fill="rgb(206,47,42)" rx="2" ry="2" />
<text  x="656.86" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="107.4" y="421" width="0.2" height="15.0" fill="rgb(254,26,40)" rx="2" ry="2" />
<text  x="110.38" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (1 samples, 0.02%)</title><rect x="71.6" y="389" width="0.2" height="15.0" fill="rgb(225,78,50)" rx="2" ry="2" />
<text  x="74.62" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2 samples, 0.04%)</title><rect x="72.5" y="389" width="0.5" height="15.0" fill="rgb(207,214,19)" rx="2" ry="2" />
<text  x="75.52" y="399.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="848.8" y="453" width="0.5" height="15.0" fill="rgb(215,149,43)" rx="2" ry="2" />
<text  x="851.84" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="796.4" y="229" width="0.3" height="15.0" fill="rgb(212,138,14)" rx="2" ry="2" />
<text  x="799.44" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="835.1" y="389" width="0.2" height="15.0" fill="rgb(209,61,21)" rx="2" ry="2" />
<text  x="838.12" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="107.6" y="437" width="0.5" height="15.0" fill="rgb(237,52,19)" rx="2" ry="2" />
<text  x="110.60" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="106.7" y="469" width="0.2" height="15.0" fill="rgb(237,121,54)" rx="2" ry="2" />
<text  x="109.70" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (9 samples, 0.17%)</title><rect x="901.2" y="389" width="2.1" height="15.0" fill="rgb(235,131,51)" rx="2" ry="2" />
<text  x="904.24" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="669.8" y="501" width="0.3" height="15.0" fill="rgb(237,28,38)" rx="2" ry="2" />
<text  x="672.83" y="511.5" ></text>
</g>
<g >
<title>__call_tls_dtors (1 samples, 0.02%)</title><rect x="11.6" y="645" width="0.2" height="15.0" fill="rgb(239,30,26)" rx="2" ry="2" />
<text  x="14.57" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%)</title><rect x="787.2" y="213" width="0.9" height="15.0" fill="rgb(236,51,33)" rx="2" ry="2" />
<text  x="790.22" y="223.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="47.8" y="277" width="0.2" height="15.0" fill="rgb(245,136,2)" rx="2" ry="2" />
<text  x="50.78" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (7 samples, 0.13%)</title><rect x="99.1" y="501" width="1.5" height="15.0" fill="rgb(206,96,36)" rx="2" ry="2" />
<text  x="102.06" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1009.2" y="197" width="0.2" height="15.0" fill="rgb(231,60,24)" rx="2" ry="2" />
<text  x="1012.19" y="207.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="44.6" y="325" width="0.3" height="15.0" fill="rgb(211,47,49)" rx="2" ry="2" />
<text  x="47.63" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="946.0" y="405" width="0.4" height="15.0" fill="rgb(221,50,26)" rx="2" ry="2" />
<text  x="948.99" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="96.1" y="469" width="0.3" height="15.0" fill="rgb(236,203,36)" rx="2" ry="2" />
<text  x="99.13" y="479.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (124 samples, 2.36%)</title><rect x="363.5" y="213" width="27.9" height="15.0" fill="rgb(237,199,34)" rx="2" ry="2" />
<text  x="366.53" y="223.5" >w..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="908.0" y="373" width="0.2" height="15.0" fill="rgb(230,204,32)" rx="2" ry="2" />
<text  x="910.99" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1016.8" y="229" width="0.3" height="15.0" fill="rgb(216,144,50)" rx="2" ry="2" />
<text  x="1019.83" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (2 samples, 0.04%)</title><rect x="51.2" y="261" width="0.4" height="15.0" fill="rgb(228,76,46)" rx="2" ry="2" />
<text  x="54.15" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="81.3" y="357" width="0.2" height="15.0" fill="rgb(251,93,37)" rx="2" ry="2" />
<text  x="84.29" y="367.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%)</title><rect x="1189.8" y="645" width="0.2" height="15.0" fill="rgb(232,176,22)" rx="2" ry="2" />
<text  x="1192.78" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="466.1" y="309" width="0.4" height="15.0" fill="rgb(254,17,51)" rx="2" ry="2" />
<text  x="469.08" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="62.4" y="357" width="0.2" height="15.0" fill="rgb(246,226,14)" rx="2" ry="2" />
<text  x="65.40" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="572.9" y="341" width="0.2" height="15.0" fill="rgb(225,90,1)" rx="2" ry="2" />
<text  x="575.90" y="351.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="79.9" y="453" width="0.3" height="15.0" fill="rgb(208,189,3)" rx="2" ry="2" />
<text  x="82.94" y="463.5" ></text>
</g>
<g >
<title>deletable_row::deletable_row (1 samples, 0.02%)</title><rect x="1123.9" y="197" width="0.2" height="15.0" fill="rgb(217,147,54)" rx="2" ry="2" />
<text  x="1126.88" y="207.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="735.7" y="421" width="0.9" height="15.0" fill="rgb(220,26,53)" rx="2" ry="2" />
<text  x="738.72" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="47.3" y="309" width="0.3" height="15.0" fill="rgb(249,55,44)" rx="2" ry="2" />
<text  x="50.33" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="79.0" y="581" width="0.3" height="15.0" fill="rgb(251,34,2)" rx="2" ry="2" />
<text  x="82.04" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%)</title><rect x="119.5" y="469" width="1.4" height="15.0" fill="rgb(213,101,15)" rx="2" ry="2" />
<text  x="122.52" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="849.5" y="517" width="0.2" height="15.0" fill="rgb(231,100,51)" rx="2" ry="2" />
<text  x="852.52" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="348.0" y="197" width="0.5" height="15.0" fill="rgb(242,159,20)" rx="2" ry="2" />
<text  x="351.01" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="76.3" y="373" width="0.3" height="15.0" fill="rgb(222,49,51)" rx="2" ry="2" />
<text  x="79.34" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="1131.1" y="165" width="0.2" height="15.0" fill="rgb(217,174,23)" rx="2" ry="2" />
<text  x="1134.08" y="175.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (12 samples, 0.23%)</title><rect x="1129.7" y="213" width="2.7" height="15.0" fill="rgb(223,175,8)" rx="2" ry="2" />
<text  x="1132.73" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="105.4" y="341" width="0.2" height="15.0" fill="rgb(207,86,9)" rx="2" ry="2" />
<text  x="108.35" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="108.3" y="485" width="0.2" height="15.0" fill="rgb(211,55,46)" rx="2" ry="2" />
<text  x="111.28" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.11%)</title><rect x="75.7" y="485" width="1.3" height="15.0" fill="rgb(249,104,16)" rx="2" ry="2" />
<text  x="78.67" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (2 samples, 0.04%)</title><rect x="21.7" y="405" width="0.4" height="15.0" fill="rgb(227,212,53)" rx="2" ry="2" />
<text  x="24.69" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (6 samples, 0.11%)</title><rect x="271.5" y="229" width="1.4" height="15.0" fill="rgb(229,19,25)" rx="2" ry="2" />
<text  x="274.55" y="239.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (12 samples, 0.23%)</title><rect x="388.7" y="197" width="2.7" height="15.0" fill="rgb(222,137,1)" rx="2" ry="2" />
<text  x="391.72" y="207.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%)</title><rect x="1047.9" y="373" width="0.4" height="15.0" fill="rgb(239,14,39)" rx="2" ry="2" />
<text  x="1050.87" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="857.6" y="309" width="0.2" height="15.0" fill="rgb(239,46,31)" rx="2" ry="2" />
<text  x="860.61" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="45.1" y="325" width="0.7" height="15.0" fill="rgb(249,0,29)" rx="2" ry="2" />
<text  x="48.08" y="335.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (35 samples, 0.67%)</title><rect x="1066.1" y="293" width="7.9" height="15.0" fill="rgb(219,52,28)" rx="2" ry="2" />
<text  x="1069.09" y="303.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1032.6" y="277" width="2.5" height="15.0" fill="rgb(252,210,46)" rx="2" ry="2" />
<text  x="1035.58" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="800.0" y="229" width="0.3" height="15.0" fill="rgb(211,106,41)" rx="2" ry="2" />
<text  x="803.04" y="239.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="631.6" y="485" width="0.2" height="15.0" fill="rgb(208,205,40)" rx="2" ry="2" />
<text  x="634.60" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="56.1" y="229" width="0.5" height="15.0" fill="rgb(235,187,36)" rx="2" ry="2" />
<text  x="59.10" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%)</title><rect x="945.3" y="405" width="0.7" height="15.0" fill="rgb(224,158,23)" rx="2" ry="2" />
<text  x="948.32" y="415.5" ></text>
</g>
<g >
<title>abstract_type::deserialize_impl&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="18.3" y="69" width="0.2" height="15.0" fill="rgb(236,19,13)" rx="2" ry="2" />
<text  x="21.32" y="79.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (22 samples, 0.42%)</title><rect x="194.4" y="261" width="5.0" height="15.0" fill="rgb(253,141,50)" rx="2" ry="2" />
<text  x="197.41" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="940.1" y="389" width="0.3" height="15.0" fill="rgb(233,0,17)" rx="2" ry="2" />
<text  x="943.15" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="201.4" y="165" width="0.2" height="15.0" fill="rgb(225,12,35)" rx="2" ry="2" />
<text  x="204.38" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.10%)</title><rect x="302.6" y="357" width="1.1" height="15.0" fill="rgb(254,5,33)" rx="2" ry="2" />
<text  x="305.58" y="367.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (7 samples, 0.13%)</title><rect x="920.6" y="405" width="1.6" height="15.0" fill="rgb(229,147,12)" rx="2" ry="2" />
<text  x="923.58" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="675.0" y="485" width="0.5" height="15.0" fill="rgb(209,58,33)" rx="2" ry="2" />
<text  x="678.00" y="495.5" ></text>
</g>
<g >
<title>get_scheduling_groups (1 samples, 0.02%)</title><rect x="108.1" y="533" width="0.2" height="15.0" fill="rgb(225,138,9)" rx="2" ry="2" />
<text  x="111.05" y="543.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1169.5" y="549" width="0.3" height="15.0" fill="rgb(232,124,13)" rx="2" ry="2" />
<text  x="1172.53" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="271.3" y="245" width="1.6" height="15.0" fill="rgb(210,177,25)" rx="2" ry="2" />
<text  x="274.32" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (242 samples, 4.61%)</title><rect x="21.0" y="517" width="54.4" height="15.0" fill="rgb(242,132,22)" rx="2" ry="2" />
<text  x="24.02" y="527.5" >cql3:..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (6 samples, 0.11%)</title><rect x="279.6" y="261" width="1.4" height="15.0" fill="rgb(253,138,0)" rx="2" ry="2" />
<text  x="282.64" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1165.5" y="469" width="0.2" height="15.0" fill="rgb(231,149,4)" rx="2" ry="2" />
<text  x="1168.49" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="654.5" y="485" width="0.3" height="15.0" fill="rgb(215,54,13)" rx="2" ry="2" />
<text  x="657.54" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="1136.9" y="261" width="0.3" height="15.0" fill="rgb(217,3,6)" rx="2" ry="2" />
<text  x="1139.93" y="271.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%)</title><rect x="678.6" y="501" width="0.2" height="15.0" fill="rgb(222,215,34)" rx="2" ry="2" />
<text  x="681.60" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="105.4" y="405" width="0.2" height="15.0" fill="rgb(206,177,39)" rx="2" ry="2" />
<text  x="108.35" y="415.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1168.6" y="469" width="0.3" height="15.0" fill="rgb(206,8,50)" rx="2" ry="2" />
<text  x="1171.64" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="618.6" y="421" width="0.2" height="15.0" fill="rgb(244,29,38)" rx="2" ry="2" />
<text  x="621.55" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%)</title><rect x="1101.8" y="389" width="0.5" height="15.0" fill="rgb(217,18,2)" rx="2" ry="2" />
<text  x="1104.84" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="439.5" y="357" width="0.3" height="15.0" fill="rgb(238,40,48)" rx="2" ry="2" />
<text  x="442.54" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%)</title><rect x="630.5" y="501" width="0.4" height="15.0" fill="rgb(213,74,25)" rx="2" ry="2" />
<text  x="633.47" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="857.6" y="293" width="0.2" height="15.0" fill="rgb(218,105,1)" rx="2" ry="2" />
<text  x="860.61" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="847.3" y="533" width="0.2" height="15.0" fill="rgb(212,99,7)" rx="2" ry="2" />
<text  x="850.27" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="854.2" y="373" width="0.3" height="15.0" fill="rgb(244,38,9)" rx="2" ry="2" />
<text  x="857.24" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="421" width="8.1" height="15.0" fill="rgb(237,202,31)" rx="2" ry="2" />
<text  x="1130.48" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="658.4" y="501" width="0.4" height="15.0" fill="rgb(247,76,24)" rx="2" ry="2" />
<text  x="661.36" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="787.2" y="229" width="0.9" height="15.0" fill="rgb(211,54,52)" rx="2" ry="2" />
<text  x="790.22" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="877.0" y="453" width="0.2" height="15.0" fill="rgb(226,164,20)" rx="2" ry="2" />
<text  x="879.95" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1131.8" y="85" width="0.2" height="15.0" fill="rgb(236,140,40)" rx="2" ry="2" />
<text  x="1134.75" y="95.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (3 samples, 0.06%)</title><rect x="281.0" y="261" width="0.7" height="15.0" fill="rgb(209,7,20)" rx="2" ry="2" />
<text  x="283.99" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment_stream_validating_filter::operator (1 samples, 0.02%)</title><rect x="82.6" y="469" width="0.3" height="15.0" fill="rgb(211,55,12)" rx="2" ry="2" />
<text  x="85.64" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="687.1" y="501" width="0.3" height="15.0" fill="rgb(239,62,41)" rx="2" ry="2" />
<text  x="690.15" y="511.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::set_keyspace (1 samples, 0.02%)</title><rect x="21.0" y="501" width="0.2" height="15.0" fill="rgb(227,16,28)" rx="2" ry="2" />
<text  x="24.02" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (3 samples, 0.06%)</title><rect x="418.6" y="261" width="0.7" height="15.0" fill="rgb(240,187,6)" rx="2" ry="2" />
<text  x="421.63" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1162.6" y="485" width="0.2" height="15.0" fill="rgb(218,58,6)" rx="2" ry="2" />
<text  x="1165.56" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (5 samples, 0.10%)</title><rect x="1178.3" y="645" width="1.1" height="15.0" fill="rgb(240,156,40)" rx="2" ry="2" />
<text  x="1181.31" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="108.1" y="485" width="0.2" height="15.0" fill="rgb(239,110,28)" rx="2" ry="2" />
<text  x="111.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%)</title><rect x="680.4" y="517" width="0.2" height="15.0" fill="rgb(211,117,27)" rx="2" ry="2" />
<text  x="683.40" y="527.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (7 samples, 0.13%)</title><rect x="791.3" y="181" width="1.5" height="15.0" fill="rgb(207,41,20)" rx="2" ry="2" />
<text  x="794.27" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="711.9" y="501" width="0.2" height="15.0" fill="rgb(250,137,47)" rx="2" ry="2" />
<text  x="714.88" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1119.2" y="485" width="0.2" height="15.0" fill="rgb(214,110,51)" rx="2" ry="2" />
<text  x="1122.16" y="495.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%)</title><rect x="10.9" y="565" width="0.2" height="15.0" fill="rgb(233,11,12)" rx="2" ry="2" />
<text  x="13.90" y="575.5" ></text>
</g>
<g >
<title>auth::resource::resource (8 samples, 0.15%)</title><rect x="764.1" y="405" width="1.8" height="15.0" fill="rgb(227,122,41)" rx="2" ry="2" />
<text  x="767.06" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1160.8" y="501" width="0.2" height="15.0" fill="rgb(214,0,3)" rx="2" ry="2" />
<text  x="1163.76" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="43.3" y="181" width="0.7" height="15.0" fill="rgb(253,88,4)" rx="2" ry="2" />
<text  x="46.28" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="241.6" y="149" width="0.3" height="15.0" fill="rgb(235,135,19)" rx="2" ry="2" />
<text  x="244.64" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (6 samples, 0.11%)</title><rect x="831.1" y="453" width="1.3" height="15.0" fill="rgb(215,98,27)" rx="2" ry="2" />
<text  x="834.07" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="61.3" y="149" width="0.2" height="15.0" fill="rgb(253,198,2)" rx="2" ry="2" />
<text  x="64.28" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (1 samples, 0.02%)</title><rect x="1100.3" y="405" width="0.2" height="15.0" fill="rgb(216,181,3)" rx="2" ry="2" />
<text  x="1103.27" y="415.5" ></text>
</g>
<g >
<title>seastar::io_queue::poll_io_queue (1 samples, 0.02%)</title><rect x="1168.4" y="517" width="0.2" height="15.0" fill="rgb(243,122,14)" rx="2" ry="2" />
<text  x="1171.41" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="345.8" y="197" width="0.4" height="15.0" fill="rgb(236,178,26)" rx="2" ry="2" />
<text  x="348.76" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="293" width="0.2" height="15.0" fill="rgb(232,196,25)" rx="2" ry="2" />
<text  x="78.89" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="405" width="0.2" height="15.0" fill="rgb(234,183,12)" rx="2" ry="2" />
<text  x="1169.39" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="17.4" y="549" width="0.2" height="15.0" fill="rgb(242,125,25)" rx="2" ry="2" />
<text  x="20.42" y="559.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1080.9" y="325" width="0.3" height="15.0" fill="rgb(217,144,19)" rx="2" ry="2" />
<text  x="1083.93" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (1 samples, 0.02%)</title><rect x="1128.2" y="325" width="0.2" height="15.0" fill="rgb(218,204,23)" rx="2" ry="2" />
<text  x="1131.16" y="335.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_role_statement*, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="64.6" y="357" width="0.3" height="15.0" fill="rgb(215,97,2)" rx="2" ry="2" />
<text  x="67.65" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="814.7" y="293" width="0.2" height="15.0" fill="rgb(252,33,5)" rx="2" ry="2" />
<text  x="817.66" y="303.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="275.1" y="197" width="0.3" height="15.0" fill="rgb(206,95,48)" rx="2" ry="2" />
<text  x="278.15" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="69.8" y="421" width="0.2" height="15.0" fill="rgb(232,0,27)" rx="2" ry="2" />
<text  x="72.82" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="724.0" y="421" width="0.5" height="15.0" fill="rgb(217,74,34)" rx="2" ry="2" />
<text  x="727.03" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="829.5" y="405" width="0.5" height="15.0" fill="rgb(234,213,25)" rx="2" ry="2" />
<text  x="832.50" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="706.7" y="453" width="0.2" height="15.0" fill="rgb(235,140,27)" rx="2" ry="2" />
<text  x="709.71" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (30 samples, 0.57%)</title><rect x="1149.7" y="501" width="6.8" height="15.0" fill="rgb(246,209,9)" rx="2" ry="2" />
<text  x="1152.74" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (3 samples, 0.06%)</title><rect x="505.4" y="341" width="0.7" height="15.0" fill="rgb(215,115,42)" rx="2" ry="2" />
<text  x="508.43" y="351.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="48.9" y="229" width="0.7" height="15.0" fill="rgb(248,109,18)" rx="2" ry="2" />
<text  x="51.91" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="444.0" y="437" width="0.3" height="15.0" fill="rgb(217,131,51)" rx="2" ry="2" />
<text  x="447.04" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.3" y="453" width="0.2" height="15.0" fill="rgb(212,87,11)" rx="2" ry="2" />
<text  x="21.32" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="645.1" y="517" width="0.2" height="15.0" fill="rgb(251,135,14)" rx="2" ry="2" />
<text  x="648.09" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (15 samples, 0.29%)</title><rect x="273.8" y="245" width="3.4" height="15.0" fill="rgb(232,71,44)" rx="2" ry="2" />
<text  x="276.80" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="810.8" y="389" width="0.3" height="15.0" fill="rgb(228,208,20)" rx="2" ry="2" />
<text  x="813.83" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="189.9" y="293" width="0.2" height="15.0" fill="rgb(249,127,50)" rx="2" ry="2" />
<text  x="192.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (5 samples, 0.10%)</title><rect x="349.4" y="213" width="1.1" height="15.0" fill="rgb(253,2,51)" rx="2" ry="2" />
<text  x="352.36" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1145.9" y="517" width="0.2" height="15.0" fill="rgb(226,67,37)" rx="2" ry="2" />
<text  x="1148.92" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="117.3" y="485" width="0.6" height="15.0" fill="rgb(216,59,23)" rx="2" ry="2" />
<text  x="120.27" y="495.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.9" y="581" width="0.2" height="15.0" fill="rgb(208,81,39)" rx="2" ry="2" />
<text  x="20.87" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="849.1" y="373" width="0.2" height="15.0" fill="rgb(205,6,46)" rx="2" ry="2" />
<text  x="852.07" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="46.0" y="341" width="0.2" height="15.0" fill="rgb(205,225,24)" rx="2" ry="2" />
<text  x="48.98" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%)</title><rect x="1119.2" y="501" width="0.2" height="15.0" fill="rgb(216,168,11)" rx="2" ry="2" />
<text  x="1122.16" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="56.1" y="165" width="0.5" height="15.0" fill="rgb(231,74,7)" rx="2" ry="2" />
<text  x="59.10" y="175.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (3 samples, 0.06%)</title><rect x="697.5" y="501" width="0.7" height="15.0" fill="rgb(205,130,52)" rx="2" ry="2" />
<text  x="700.49" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="517.8" y="229" width="0.2" height="15.0" fill="rgb(239,216,31)" rx="2" ry="2" />
<text  x="520.80" y="239.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (25 samples, 0.48%)</title><rect x="1120.1" y="309" width="5.6" height="15.0" fill="rgb(241,191,45)" rx="2" ry="2" />
<text  x="1123.06" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="52.1" y="293" width="0.4" height="15.0" fill="rgb(241,129,40)" rx="2" ry="2" />
<text  x="55.05" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (107 samples, 2.04%)</title><rect x="880.1" y="421" width="24.1" height="15.0" fill="rgb(249,72,5)" rx="2" ry="2" />
<text  x="883.10" y="431.5" >_..</text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (1 samples, 0.02%)</title><rect x="75.9" y="245" width="0.2" height="15.0" fill="rgb(223,212,8)" rx="2" ry="2" />
<text  x="78.89" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="875.8" y="453" width="0.3" height="15.0" fill="rgb(215,99,49)" rx="2" ry="2" />
<text  x="878.83" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (118 samples, 2.25%)</title><rect x="1139.2" y="533" width="26.5" height="15.0" fill="rgb(235,180,30)" rx="2" ry="2" />
<text  x="1142.17" y="543.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="78.4" y="549" width="0.2" height="15.0" fill="rgb(206,73,15)" rx="2" ry="2" />
<text  x="81.37" y="559.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="61.5" y="373" width="0.2" height="15.0" fill="rgb(241,217,39)" rx="2" ry="2" />
<text  x="64.50" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="257.6" y="245" width="0.2" height="15.0" fill="rgb(236,85,22)" rx="2" ry="2" />
<text  x="260.60" y="255.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (6 samples, 0.11%)</title><rect x="491.0" y="309" width="1.4" height="15.0" fill="rgb(208,212,20)" rx="2" ry="2" />
<text  x="494.04" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="80.2" y="549" width="0.2" height="15.0" fill="rgb(215,105,41)" rx="2" ry="2" />
<text  x="83.17" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (4 samples, 0.08%)</title><rect x="1007.2" y="229" width="0.9" height="15.0" fill="rgb(245,144,20)" rx="2" ry="2" />
<text  x="1010.16" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1031.5" y="309" width="0.2" height="15.0" fill="rgb(207,168,22)" rx="2" ry="2" />
<text  x="1034.45" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="75.4" y="437" width="0.3" height="15.0" fill="rgb(229,44,48)" rx="2" ry="2" />
<text  x="78.44" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="541.0" y="277" width="0.4" height="15.0" fill="rgb(219,62,13)" rx="2" ry="2" />
<text  x="543.97" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="637.2" y="501" width="0.7" height="15.0" fill="rgb(211,88,10)" rx="2" ry="2" />
<text  x="640.22" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="59.5" y="341" width="0.2" height="15.0" fill="rgb(252,65,32)" rx="2" ry="2" />
<text  x="62.48" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="924.2" y="373" width="0.4" height="15.0" fill="rgb(242,182,16)" rx="2" ry="2" />
<text  x="927.18" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="795.1" y="117" width="0.2" height="15.0" fill="rgb(247,212,18)" rx="2" ry="2" />
<text  x="798.09" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="67.6" y="421" width="0.2" height="15.0" fill="rgb(220,59,20)" rx="2" ry="2" />
<text  x="70.57" y="431.5" ></text>
</g>
<g >
<title>auth::get_permissions (3 samples, 0.06%)</title><rect x="75.9" y="405" width="0.7" height="15.0" fill="rgb(225,225,3)" rx="2" ry="2" />
<text  x="78.89" y="415.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="929.1" y="437" width="1.8" height="15.0" fill="rgb(218,136,46)" rx="2" ry="2" />
<text  x="932.13" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (9 samples, 0.17%)</title><rect x="1095.1" y="405" width="2.0" height="15.0" fill="rgb(231,57,1)" rx="2" ry="2" />
<text  x="1098.10" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.3" y="357" width="0.2" height="15.0" fill="rgb(225,103,50)" rx="2" ry="2" />
<text  x="62.25" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (58 samples, 1.11%)</title><rect x="512.4" y="309" width="13.0" height="15.0" fill="rgb(249,38,13)" rx="2" ry="2" />
<text  x="515.41" y="319.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="76.6" y="437" width="0.2" height="15.0" fill="rgb(252,6,33)" rx="2" ry="2" />
<text  x="79.57" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (3 samples, 0.06%)</title><rect x="1089.9" y="453" width="0.7" height="15.0" fill="rgb(230,1,10)" rx="2" ry="2" />
<text  x="1092.92" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%)</title><rect x="1001.8" y="261" width="0.4" height="15.0" fill="rgb(225,87,35)" rx="2" ry="2" />
<text  x="1004.77" y="271.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="1130.4" y="133" width="0.2" height="15.0" fill="rgb(233,211,0)" rx="2" ry="2" />
<text  x="1133.40" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (18 samples, 0.34%)</title><rect x="938.3" y="437" width="4.1" height="15.0" fill="rgb(226,210,29)" rx="2" ry="2" />
<text  x="941.35" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(220,29,13)" rx="2" ry="2" />
<text  x="13.90" y="639.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="889.8" y="293" width="0.2" height="15.0" fill="rgb(251,57,28)" rx="2" ry="2" />
<text  x="892.77" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="551.3" y="389" width="0.5" height="15.0" fill="rgb(212,170,49)" rx="2" ry="2" />
<text  x="554.31" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (8 samples, 0.15%)</title><rect x="245.5" y="149" width="1.8" height="15.0" fill="rgb(253,186,11)" rx="2" ry="2" />
<text  x="248.46" y="159.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%)</title><rect x="686.5" y="293" width="0.2" height="15.0" fill="rgb(231,167,20)" rx="2" ry="2" />
<text  x="689.47" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="967.8" y="389" width="0.2" height="15.0" fill="rgb(209,173,35)" rx="2" ry="2" />
<text  x="970.81" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="133.7" y="485" width="0.2" height="15.0" fill="rgb(246,125,36)" rx="2" ry="2" />
<text  x="136.69" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="1153.8" y="453" width="1.3" height="15.0" fill="rgb(248,183,5)" rx="2" ry="2" />
<text  x="1156.79" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="521.9" y="197" width="0.4" height="15.0" fill="rgb(247,140,24)" rx="2" ry="2" />
<text  x="524.85" y="207.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="593.1" y="437" width="0.3" height="15.0" fill="rgb(253,95,2)" rx="2" ry="2" />
<text  x="596.14" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="18.3" y="357" width="0.2" height="15.0" fill="rgb(217,182,14)" rx="2" ry="2" />
<text  x="21.32" y="367.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (16 samples, 0.30%)</title><rect x="922.2" y="421" width="3.6" height="15.0" fill="rgb(228,226,25)" rx="2" ry="2" />
<text  x="925.16" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="659.5" y="517" width="0.4" height="15.0" fill="rgb(222,39,43)" rx="2" ry="2" />
<text  x="662.48" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="531.3" y="341" width="0.7" height="15.0" fill="rgb(249,206,42)" rx="2" ry="2" />
<text  x="534.30" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="521.2" y="213" width="0.2" height="15.0" fill="rgb(228,71,47)" rx="2" ry="2" />
<text  x="524.18" y="223.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_nextChar (1 samples, 0.02%)</title><rect x="25.7" y="309" width="0.3" height="15.0" fill="rgb(209,76,6)" rx="2" ry="2" />
<text  x="28.74" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="1136.9" y="373" width="0.3" height="15.0" fill="rgb(208,201,48)" rx="2" ry="2" />
<text  x="1139.93" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="362.6" y="213" width="0.5" height="15.0" fill="rgb(209,197,43)" rx="2" ry="2" />
<text  x="365.63" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="841.2" y="485" width="0.2" height="15.0" fill="rgb(209,178,19)" rx="2" ry="2" />
<text  x="844.19" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (19 samples, 0.36%)</title><rect x="1074.2" y="309" width="4.3" height="15.0" fill="rgb(245,146,23)" rx="2" ry="2" />
<text  x="1077.18" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.17%)</title><rect x="42.4" y="357" width="2.0" height="15.0" fill="rgb(248,189,51)" rx="2" ry="2" />
<text  x="45.38" y="367.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="820.5" y="453" width="0.2" height="15.0" fill="rgb(219,196,49)" rx="2" ry="2" />
<text  x="823.51" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="521.6" y="213" width="0.3" height="15.0" fill="rgb(222,212,24)" rx="2" ry="2" />
<text  x="524.63" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1086.6" y="389" width="0.6" height="15.0" fill="rgb(224,3,51)" rx="2" ry="2" />
<text  x="1089.55" y="399.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1136.9" y="437" width="0.3" height="15.0" fill="rgb(233,180,43)" rx="2" ry="2" />
<text  x="1139.93" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1144.3" y="501" width="0.5" height="15.0" fill="rgb(237,60,50)" rx="2" ry="2" />
<text  x="1147.35" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1166.8" y="389" width="0.3" height="15.0" fill="rgb(249,43,52)" rx="2" ry="2" />
<text  x="1169.84" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule (2 samples, 0.04%)</title><rect x="1137.4" y="533" width="0.4" height="15.0" fill="rgb(208,99,33)" rx="2" ry="2" />
<text  x="1140.38" y="543.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.23%)</title><rect x="80.4" y="629" width="2.7" height="15.0" fill="rgb(243,188,29)" rx="2" ry="2" />
<text  x="83.39" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (447 samples, 8.52%)</title><rect x="445.6" y="421" width="100.5" height="15.0" fill="rgb(224,38,33)" rx="2" ry="2" />
<text  x="448.61" y="431.5" >std::functio..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.2" y="181" width="0.2" height="15.0" fill="rgb(207,3,0)" rx="2" ry="2" />
<text  x="45.16" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="631.6" y="373" width="0.2" height="15.0" fill="rgb(214,150,2)" rx="2" ry="2" />
<text  x="634.60" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (2 samples, 0.04%)</title><rect x="260.3" y="197" width="0.5" height="15.0" fill="rgb(222,7,28)" rx="2" ry="2" />
<text  x="263.30" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.11%)</title><rect x="680.6" y="485" width="1.4" height="15.0" fill="rgb(232,211,14)" rx="2" ry="2" />
<text  x="683.62" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1116.7" y="453" width="0.7" height="15.0" fill="rgb(221,165,38)" rx="2" ry="2" />
<text  x="1119.69" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (3 samples, 0.06%)</title><rect x="1031.7" y="293" width="0.7" height="15.0" fill="rgb(225,51,47)" rx="2" ry="2" />
<text  x="1034.68" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (424 samples, 8.08%)</title><rect x="191.3" y="309" width="95.3" height="15.0" fill="rgb(241,81,36)" rx="2" ry="2" />
<text  x="194.26" y="319.5" >logalloc::a..</text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%)</title><rect x="340.1" y="245" width="0.3" height="15.0" fill="rgb(244,88,39)" rx="2" ry="2" />
<text  x="343.14" y="255.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="106.0" y="485" width="0.5" height="15.0" fill="rgb(209,40,51)" rx="2" ry="2" />
<text  x="109.03" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="658.8" y="485" width="0.5" height="15.0" fill="rgb(234,1,23)" rx="2" ry="2" />
<text  x="661.81" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (13 samples, 0.25%)</title><rect x="978.4" y="341" width="2.9" height="15.0" fill="rgb(225,188,35)" rx="2" ry="2" />
<text  x="981.38" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="474.2" y="357" width="0.2" height="15.0" fill="rgb(212,40,40)" rx="2" ry="2" />
<text  x="477.17" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="697.0" y="501" width="0.3" height="15.0" fill="rgb(254,182,5)" rx="2" ry="2" />
<text  x="700.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (4 samples, 0.08%)</title><rect x="184.1" y="277" width="0.9" height="15.0" fill="rgb(249,31,0)" rx="2" ry="2" />
<text  x="187.07" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (66 samples, 1.26%)</title><rect x="881.5" y="373" width="14.8" height="15.0" fill="rgb(207,126,47)" rx="2" ry="2" />
<text  x="884.45" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="562.8" y="341" width="0.4" height="15.0" fill="rgb(215,56,18)" rx="2" ry="2" />
<text  x="565.78" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="653.2" y="437" width="0.2" height="15.0" fill="rgb(218,202,8)" rx="2" ry="2" />
<text  x="656.19" y="447.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="655.0" y="485" width="0.4" height="15.0" fill="rgb(234,43,12)" rx="2" ry="2" />
<text  x="657.99" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.2" y="597" width="0.2" height="15.0" fill="rgb(216,184,10)" rx="2" ry="2" />
<text  x="83.17" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="126.3" y="421" width="0.4" height="15.0" fill="rgb(215,113,18)" rx="2" ry="2" />
<text  x="129.27" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1016.6" y="229" width="0.2" height="15.0" fill="rgb(222,46,24)" rx="2" ry="2" />
<text  x="1019.61" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1113.3" y="421" width="0.7" height="15.0" fill="rgb(216,45,49)" rx="2" ry="2" />
<text  x="1116.31" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="10.9" y="549" width="0.2" height="15.0" fill="rgb(226,21,37)" rx="2" ry="2" />
<text  x="13.90" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (2 samples, 0.04%)</title><rect x="590.2" y="453" width="0.5" height="15.0" fill="rgb(214,121,21)" rx="2" ry="2" />
<text  x="593.22" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%)</title><rect x="478.4" y="357" width="0.3" height="15.0" fill="rgb(250,93,32)" rx="2" ry="2" />
<text  x="481.45" y="367.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.23%)</title><rect x="148.3" y="469" width="2.7" height="15.0" fill="rgb(228,25,16)" rx="2" ry="2" />
<text  x="151.31" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%)</title><rect x="1081.6" y="341" width="0.2" height="15.0" fill="rgb(253,9,48)" rx="2" ry="2" />
<text  x="1084.60" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%)</title><rect x="686.9" y="533" width="0.2" height="15.0" fill="rgb(233,188,27)" rx="2" ry="2" />
<text  x="689.92" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="79.7" y="453" width="0.2" height="15.0" fill="rgb(211,84,16)" rx="2" ry="2" />
<text  x="82.72" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="665.3" y="501" width="0.7" height="15.0" fill="rgb(219,73,53)" rx="2" ry="2" />
<text  x="668.33" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.15%)</title><rect x="812.2" y="389" width="1.8" height="15.0" fill="rgb(232,160,5)" rx="2" ry="2" />
<text  x="815.18" y="399.5" ></text>
</g>
<g >
<title>auth::resource::parent (9 samples, 0.17%)</title><rect x="774.0" y="357" width="2.0" height="15.0" fill="rgb(227,209,12)" rx="2" ry="2" />
<text  x="776.95" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (3 samples, 0.06%)</title><rect x="854.9" y="421" width="0.7" height="15.0" fill="rgb(228,9,36)" rx="2" ry="2" />
<text  x="857.91" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="592.2" y="453" width="2.5" height="15.0" fill="rgb(237,36,46)" rx="2" ry="2" />
<text  x="595.24" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="592.0" y="421" width="0.2" height="15.0" fill="rgb(218,155,52)" rx="2" ry="2" />
<text  x="595.02" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictionsL11has_eq_nullERKNS4_13query_optionsERKNS5_10expressionEE3$_8EES8_SI_T_EUlRS7_E_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_8constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_11conjunctionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_12column_valueEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_5tokenEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13function_callEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4castEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_15field_selectionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4nullEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13bind_variableEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_16untyped_constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_17tuple_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_22collection_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSR_S6_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_SN_S1Z_S23_S27_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2C_S2F_ (1 samples, 0.02%)</title><rect x="851.3" y="373" width="0.2" height="15.0" fill="rgb(219,101,20)" rx="2" ry="2" />
<text  x="854.32" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="667.6" y="501" width="0.2" height="15.0" fill="rgb(228,220,7)" rx="2" ry="2" />
<text  x="670.58" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="827.7" y="437" width="2.7" height="15.0" fill="rgb(242,56,43)" rx="2" ry="2" />
<text  x="830.70" y="447.5" ></text>
</g>
<g >
<title>table::query (6 samples, 0.11%)</title><rect x="1166.4" y="533" width="1.3" height="15.0" fill="rgb(250,26,18)" rx="2" ry="2" />
<text  x="1169.39" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="41.3" y="357" width="0.2" height="15.0" fill="rgb(214,56,17)" rx="2" ry="2" />
<text  x="44.26" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="651.4" y="469" width="0.2" height="15.0" fill="rgb(239,115,52)" rx="2" ry="2" />
<text  x="654.39" y="479.5" ></text>
</g>
<g >
<title>ser::after_column__id&lt;bytes_ostream&gt;::start_c_variant (1 samples, 0.02%)</title><rect x="1130.6" y="133" width="0.3" height="15.0" fill="rgb(252,138,14)" rx="2" ry="2" />
<text  x="1133.63" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;seastar::posix_file_impl::list_directory (1 samples, 0.02%)</title><rect x="846.4" y="533" width="0.2" height="15.0" fill="rgb(218,104,40)" rx="2" ry="2" />
<text  x="849.37" y="543.5" ></text>
</g>
<g >
<title>utils::array_search_gt (3 samples, 0.06%)</title><rect x="490.4" y="309" width="0.6" height="15.0" fill="rgb(243,132,25)" rx="2" ry="2" />
<text  x="493.37" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (3 samples, 0.06%)</title><rect x="686.2" y="517" width="0.7" height="15.0" fill="rgb(245,165,16)" rx="2" ry="2" />
<text  x="689.25" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt;::wait (1 samples, 0.02%)</title><rect x="1126.6" y="309" width="0.2" height="15.0" fill="rgb(244,137,46)" rx="2" ry="2" />
<text  x="1129.58" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.9" y="421" width="0.2" height="15.0" fill="rgb(220,211,18)" rx="2" ry="2" />
<text  x="69.90" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="44.2" y="309" width="0.2" height="15.0" fill="rgb(221,150,6)" rx="2" ry="2" />
<text  x="47.18" y="319.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%)</title><rect x="107.2" y="421" width="0.2" height="15.0" fill="rgb(245,22,14)" rx="2" ry="2" />
<text  x="110.15" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (28 samples, 0.53%)</title><rect x="249.1" y="213" width="6.3" height="15.0" fill="rgb(216,34,23)" rx="2" ry="2" />
<text  x="252.06" y="223.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::pending_endpoints_for (2 samples, 0.04%)</title><rect x="1133.8" y="213" width="0.4" height="15.0" fill="rgb(215,21,3)" rx="2" ry="2" />
<text  x="1136.78" y="223.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="105.4" y="325" width="0.2" height="15.0" fill="rgb(228,154,29)" rx="2" ry="2" />
<text  x="108.35" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%)</title><rect x="759.3" y="437" width="0.5" height="15.0" fill="rgb(254,159,3)" rx="2" ry="2" />
<text  x="762.33" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%)</title><rect x="1144.8" y="501" width="0.9" height="15.0" fill="rgb(206,12,4)" rx="2" ry="2" />
<text  x="1147.80" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1129.3" y="309" width="0.2" height="15.0" fill="rgb(248,133,0)" rx="2" ry="2" />
<text  x="1132.28" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="710.5" y="517" width="0.3" height="15.0" fill="rgb(211,59,38)" rx="2" ry="2" />
<text  x="713.53" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="846.6" y="533" width="0.4" height="15.0" fill="rgb(244,176,42)" rx="2" ry="2" />
<text  x="849.59" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="787.0" y="229" width="0.2" height="15.0" fill="rgb(243,34,17)" rx="2" ry="2" />
<text  x="790.00" y="239.5" ></text>
</g>
<g >
<title>query::querier_base::close (2 samples, 0.04%)</title><rect x="1166.8" y="517" width="0.5" height="15.0" fill="rgb(221,130,23)" rx="2" ry="2" />
<text  x="1169.84" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (304 samples, 5.79%)</title><rect x="751.9" y="453" width="68.4" height="15.0" fill="rgb(242,49,5)" rx="2" ry="2" />
<text  x="754.91" y="463.5" >cql3::s..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="500.5" y="213" width="0.7" height="15.0" fill="rgb(243,59,10)" rx="2" ry="2" />
<text  x="503.49" y="223.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="62.2" y="389" width="0.2" height="15.0" fill="rgb(206,28,8)" rx="2" ry="2" />
<text  x="65.17" y="399.5" ></text>
</g>
<g >
<title>db::system_keyspace::is_extra_durable (1 samples, 0.02%)</title><rect x="107.6" y="421" width="0.2" height="15.0" fill="rgb(225,116,17)" rx="2" ry="2" />
<text  x="110.60" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="202.3" y="213" width="0.2" height="15.0" fill="rgb(222,175,54)" rx="2" ry="2" />
<text  x="205.28" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="751.7" y="437" width="0.2" height="15.0" fill="rgb(211,2,31)" rx="2" ry="2" />
<text  x="754.69" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (65 samples, 1.24%)</title><rect x="559.2" y="421" width="14.6" height="15.0" fill="rgb(248,216,54)" rx="2" ry="2" />
<text  x="562.18" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (3 samples, 0.06%)</title><rect x="862.3" y="485" width="0.7" height="15.0" fill="rgb(249,194,13)" rx="2" ry="2" />
<text  x="865.33" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="662.4" y="469" width="0.5" height="15.0" fill="rgb(227,171,54)" rx="2" ry="2" />
<text  x="665.41" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="103.8" y="517" width="0.2" height="15.0" fill="rgb(217,28,20)" rx="2" ry="2" />
<text  x="106.78" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (1 samples, 0.02%)</title><rect x="800.9" y="309" width="0.3" height="15.0" fill="rgb(251,178,18)" rx="2" ry="2" />
<text  x="803.94" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="58.4" y="325" width="0.2" height="15.0" fill="rgb(221,202,54)" rx="2" ry="2" />
<text  x="61.35" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (43 samples, 0.82%)</title><rect x="122.7" y="469" width="9.6" height="15.0" fill="rgb(210,4,6)" rx="2" ry="2" />
<text  x="125.67" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="311.4" y="325" width="0.2" height="15.0" fill="rgb(250,140,38)" rx="2" ry="2" />
<text  x="314.35" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="469.7" y="293" width="0.4" height="15.0" fill="rgb(208,180,37)" rx="2" ry="2" />
<text  x="472.68" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.1" y="325" width="0.3" height="15.0" fill="rgb(223,100,17)" rx="2" ry="2" />
<text  x="43.14" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="59.5" y="325" width="0.2" height="15.0" fill="rgb(244,34,38)" rx="2" ry="2" />
<text  x="62.48" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (4 samples, 0.08%)</title><rect x="1079.4" y="309" width="0.9" height="15.0" fill="rgb(234,138,26)" rx="2" ry="2" />
<text  x="1082.35" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="1141.6" y="517" width="0.3" height="15.0" fill="rgb(250,126,47)" rx="2" ry="2" />
<text  x="1144.65" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::get_local_service (1 samples, 0.02%)</title><rect x="687.1" y="405" width="0.3" height="15.0" fill="rgb(244,169,41)" rx="2" ry="2" />
<text  x="690.15" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="51.4" y="197" width="0.2" height="15.0" fill="rgb(217,122,9)" rx="2" ry="2" />
<text  x="54.38" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%)</title><rect x="28.7" y="245" width="0.4" height="15.0" fill="rgb(252,213,50)" rx="2" ry="2" />
<text  x="31.67" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%)</title><rect x="832.9" y="437" width="2.7" height="15.0" fill="rgb(215,178,9)" rx="2" ry="2" />
<text  x="835.87" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (8 samples, 0.15%)</title><rect x="463.4" y="341" width="1.8" height="15.0" fill="rgb(241,62,37)" rx="2" ry="2" />
<text  x="466.38" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (24 samples, 0.46%)</title><rect x="670.1" y="517" width="5.4" height="15.0" fill="rgb(206,152,51)" rx="2" ry="2" />
<text  x="673.05" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="266.2" y="261" width="0.2" height="15.0" fill="rgb(252,128,52)" rx="2" ry="2" />
<text  x="269.15" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (4 samples, 0.08%)</title><rect x="525.4" y="309" width="0.9" height="15.0" fill="rgb(212,118,34)" rx="2" ry="2" />
<text  x="528.45" y="319.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.36%)</title><rect x="11.8" y="629" width="4.3" height="15.0" fill="rgb(221,156,40)" rx="2" ry="2" />
<text  x="14.80" y="639.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (2 samples, 0.04%)</title><rect x="82.0" y="485" width="0.4" height="15.0" fill="rgb(233,45,36)" rx="2" ry="2" />
<text  x="84.96" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="56.1" y="245" width="0.5" height="15.0" fill="rgb(253,166,36)" rx="2" ry="2" />
<text  x="59.10" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="55.2" y="229" width="0.9" height="15.0" fill="rgb(241,5,33)" rx="2" ry="2" />
<text  x="58.20" y="239.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="317.9" y="325" width="1.1" height="15.0" fill="rgb(234,225,29)" rx="2" ry="2" />
<text  x="320.87" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="39.5" y="309" width="0.6" height="15.0" fill="rgb(217,173,46)" rx="2" ry="2" />
<text  x="42.46" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="45.1" y="229" width="0.7" height="15.0" fill="rgb(249,178,21)" rx="2" ry="2" />
<text  x="48.08" y="239.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="603.5" y="437" width="0.2" height="15.0" fill="rgb(214,194,15)" rx="2" ry="2" />
<text  x="606.49" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="657.2" y="501" width="0.3" height="15.0" fill="rgb(235,4,8)" rx="2" ry="2" />
<text  x="660.23" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (32 samples, 0.61%)</title><rect x="851.3" y="437" width="7.2" height="15.0" fill="rgb(216,182,6)" rx="2" ry="2" />
<text  x="854.32" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (1 samples, 0.02%)</title><rect x="1125.9" y="309" width="0.2" height="15.0" fill="rgb(234,138,52)" rx="2" ry="2" />
<text  x="1128.91" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="358.8" y="213" width="0.7" height="15.0" fill="rgb(228,67,23)" rx="2" ry="2" />
<text  x="361.81" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1002.4" y="261" width="2.5" height="15.0" fill="rgb(212,73,13)" rx="2" ry="2" />
<text  x="1005.44" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="46.4" y="277" width="0.5" height="15.0" fill="rgb(232,203,37)" rx="2" ry="2" />
<text  x="49.43" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="856.7" y="293" width="0.5" height="15.0" fill="rgb(237,145,19)" rx="2" ry="2" />
<text  x="859.71" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%)</title><rect x="726.1" y="341" width="0.6" height="15.0" fill="rgb(246,62,47)" rx="2" ry="2" />
<text  x="729.05" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%)</title><rect x="711.7" y="517" width="0.4" height="15.0" fill="rgb(242,130,48)" rx="2" ry="2" />
<text  x="714.66" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="413.7" y="165" width="1.3" height="15.0" fill="rgb(253,147,26)" rx="2" ry="2" />
<text  x="416.68" y="175.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (8 samples, 0.15%)</title><rect x="778.5" y="325" width="1.7" height="15.0" fill="rgb(220,85,13)" rx="2" ry="2" />
<text  x="781.45" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="105.6" y="293" width="0.2" height="15.0" fill="rgb(239,8,13)" rx="2" ry="2" />
<text  x="108.58" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="59.9" y="277" width="0.3" height="15.0" fill="rgb(218,218,31)" rx="2" ry="2" />
<text  x="62.93" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="100.6" y="501" width="0.9" height="15.0" fill="rgb(231,89,20)" rx="2" ry="2" />
<text  x="103.63" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="712.6" y="533" width="0.2" height="15.0" fill="rgb(242,158,4)" rx="2" ry="2" />
<text  x="715.56" y="543.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="987.8" y="325" width="0.2" height="15.0" fill="rgb(211,31,37)" rx="2" ry="2" />
<text  x="990.82" y="335.5" ></text>
</g>
<g >
<title>caching_options::to_map (1 samples, 0.02%)</title><rect x="106.9" y="437" width="0.3" height="15.0" fill="rgb(248,134,19)" rx="2" ry="2" />
<text  x="109.93" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="22.8" y="389" width="0.2" height="15.0" fill="rgb(238,73,37)" rx="2" ry="2" />
<text  x="25.82" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="274.9" y="213" width="0.5" height="15.0" fill="rgb(237,18,20)" rx="2" ry="2" />
<text  x="277.92" y="223.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="778.5" y="309" width="1.7" height="15.0" fill="rgb(236,168,9)" rx="2" ry="2" />
<text  x="781.45" y="319.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a21b1fbb2f481671c80560d96a8acc1cf916b468] (1 samples, 0.02%)</title><rect x="222.7" y="133" width="0.3" height="15.0" fill="rgb(230,2,52)" rx="2" ry="2" />
<text  x="225.75" y="143.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="64.6" y="389" width="0.3" height="15.0" fill="rgb(213,196,30)" rx="2" ry="2" />
<text  x="67.65" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="79.7" y="613" width="0.2" height="15.0" fill="rgb(242,229,46)" rx="2" ry="2" />
<text  x="82.72" y="623.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (7 samples, 0.13%)</title><rect x="329.1" y="309" width="1.6" height="15.0" fill="rgb(247,62,21)" rx="2" ry="2" />
<text  x="332.12" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="644.2" y="517" width="0.2" height="15.0" fill="rgb(226,85,5)" rx="2" ry="2" />
<text  x="647.19" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="317.0" y="309" width="0.2" height="15.0" fill="rgb(213,202,9)" rx="2" ry="2" />
<text  x="319.98" y="319.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%)</title><rect x="40.8" y="373" width="0.2" height="15.0" fill="rgb(222,180,39)" rx="2" ry="2" />
<text  x="43.81" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1136.9" y="405" width="0.3" height="15.0" fill="rgb(253,8,29)" rx="2" ry="2" />
<text  x="1139.93" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="875.6" y="453" width="0.2" height="15.0" fill="rgb(241,14,12)" rx="2" ry="2" />
<text  x="878.60" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (3 samples, 0.06%)</title><rect x="763.2" y="389" width="0.6" height="15.0" fill="rgb(234,26,14)" rx="2" ry="2" />
<text  x="766.16" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="906.4" y="421" width="0.2" height="15.0" fill="rgb(230,197,38)" rx="2" ry="2" />
<text  x="909.41" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="72.1" y="389" width="0.2" height="15.0" fill="rgb(244,14,28)" rx="2" ry="2" />
<text  x="75.07" y="399.5" ></text>
</g>
<g >
<title>std::partition_copy&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%)</title><rect x="1134.7" y="229" width="0.2" height="15.0" fill="rgb(253,0,46)" rx="2" ry="2" />
<text  x="1137.68" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="134.8" y="485" width="0.2" height="15.0" fill="rgb(244,176,13)" rx="2" ry="2" />
<text  x="137.81" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="667.8" y="517" width="1.1" height="15.0" fill="rgb(231,185,20)" rx="2" ry="2" />
<text  x="670.80" y="527.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (1 samples, 0.02%)</title><rect x="22.1" y="421" width="0.3" height="15.0" fill="rgb(250,28,4)" rx="2" ry="2" />
<text  x="25.14" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="825.2" y="389" width="0.3" height="15.0" fill="rgb(239,228,4)" rx="2" ry="2" />
<text  x="828.23" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="753.9" y="373" width="1.2" height="15.0" fill="rgb(253,151,17)" rx="2" ry="2" />
<text  x="756.94" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (2 samples, 0.04%)</title><rect x="1040.0" y="373" width="0.4" height="15.0" fill="rgb(228,40,4)" rx="2" ry="2" />
<text  x="1043.00" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="790.8" y="149" width="0.2" height="15.0" fill="rgb(225,182,1)" rx="2" ry="2" />
<text  x="793.82" y="159.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="969.2" y="389" width="0.2" height="15.0" fill="rgb(221,96,22)" rx="2" ry="2" />
<text  x="972.16" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1088.3" y="437" width="0.3" height="15.0" fill="rgb(240,132,6)" rx="2" ry="2" />
<text  x="1091.35" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (25 samples, 0.48%)</title><rect x="311.6" y="325" width="5.6" height="15.0" fill="rgb(244,171,10)" rx="2" ry="2" />
<text  x="314.58" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="800.3" y="277" width="0.2" height="15.0" fill="rgb(236,65,24)" rx="2" ry="2" />
<text  x="803.26" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.8" y="229" width="0.2" height="15.0" fill="rgb(227,42,5)" rx="2" ry="2" />
<text  x="798.77" y="239.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="960.6" y="389" width="1.4" height="15.0" fill="rgb(243,48,0)" rx="2" ry="2" />
<text  x="963.61" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="44.9" y="325" width="0.2" height="15.0" fill="rgb(249,153,15)" rx="2" ry="2" />
<text  x="47.86" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (21 samples, 0.40%)</title><rect x="1042.9" y="357" width="4.7" height="15.0" fill="rgb(236,75,4)" rx="2" ry="2" />
<text  x="1045.92" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="638.6" y="517" width="0.9" height="15.0" fill="rgb(238,175,51)" rx="2" ry="2" />
<text  x="641.57" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="201.8" y="213" width="0.5" height="15.0" fill="rgb(238,61,22)" rx="2" ry="2" />
<text  x="204.83" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="37.9" y="325" width="0.4" height="15.0" fill="rgb(223,72,54)" rx="2" ry="2" />
<text  x="40.89" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="632.9" y="517" width="0.3" height="15.0" fill="rgb(211,112,3)" rx="2" ry="2" />
<text  x="635.95" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="941.9" y="421" width="0.3" height="15.0" fill="rgb(212,18,2)" rx="2" ry="2" />
<text  x="944.95" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="85" width="0.2" height="15.0" fill="rgb(216,130,24)" rx="2" ry="2" />
<text  x="57.08" y="95.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (19 samples, 0.36%)</title><rect x="11.8" y="645" width="4.3" height="15.0" fill="rgb(252,183,18)" rx="2" ry="2" />
<text  x="14.80" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="892.2" y="293" width="0.3" height="15.0" fill="rgb(228,166,11)" rx="2" ry="2" />
<text  x="895.25" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.5" y="405" width="0.2" height="15.0" fill="rgb(253,38,39)" rx="2" ry="2" />
<text  x="66.52" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.11%)</title><rect x="722.7" y="437" width="1.3" height="15.0" fill="rgb(246,113,46)" rx="2" ry="2" />
<text  x="725.68" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="119.3" y="469" width="0.2" height="15.0" fill="rgb(232,192,31)" rx="2" ry="2" />
<text  x="122.30" y="479.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%)</title><rect x="651.4" y="453" width="0.2" height="15.0" fill="rgb(220,78,9)" rx="2" ry="2" />
<text  x="654.39" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%)</title><rect x="1189.6" y="645" width="0.2" height="15.0" fill="rgb(233,127,12)" rx="2" ry="2" />
<text  x="1192.55" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (4 samples, 0.08%)</title><rect x="713.0" y="533" width="0.9" height="15.0" fill="rgb(208,3,7)" rx="2" ry="2" />
<text  x="716.01" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="600.1" y="469" width="0.2" height="15.0" fill="rgb(213,126,42)" rx="2" ry="2" />
<text  x="603.11" y="479.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="554.7" y="437" width="0.4" height="15.0" fill="rgb(237,112,42)" rx="2" ry="2" />
<text  x="557.68" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="166.3" y="405" width="0.2" height="15.0" fill="rgb(218,158,23)" rx="2" ry="2" />
<text  x="169.30" y="415.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="20.8" y="533" width="0.2" height="15.0" fill="rgb(230,183,48)" rx="2" ry="2" />
<text  x="23.79" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="1008.7" y="213" width="0.7" height="15.0" fill="rgb(206,45,11)" rx="2" ry="2" />
<text  x="1011.74" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::statements::update_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="73.6" y="469" width="0.3" height="15.0" fill="rgb(231,89,36)" rx="2" ry="2" />
<text  x="76.64" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="564.4" y="309" width="0.4" height="15.0" fill="rgb(217,11,4)" rx="2" ry="2" />
<text  x="567.35" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="389" width="0.7" height="15.0" fill="rgb(232,124,27)" rx="2" ry="2" />
<text  x="689.25" y="399.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="107.8" y="325" width="0.3" height="15.0" fill="rgb(254,224,54)" rx="2" ry="2" />
<text  x="110.83" y="335.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="472.6" y="357" width="1.1" height="15.0" fill="rgb(250,126,38)" rx="2" ry="2" />
<text  x="475.60" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1048.1" y="357" width="0.2" height="15.0" fill="rgb(237,14,30)" rx="2" ry="2" />
<text  x="1051.09" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="248.4" y="181" width="0.2" height="15.0" fill="rgb(206,212,3)" rx="2" ry="2" />
<text  x="251.38" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="214.2" y="165" width="0.2" height="15.0" fill="rgb(230,5,43)" rx="2" ry="2" />
<text  x="217.20" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%)</title><rect x="1105.9" y="453" width="1.1" height="15.0" fill="rgb(249,112,15)" rx="2" ry="2" />
<text  x="1108.89" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="251.3" y="181" width="0.2" height="15.0" fill="rgb(215,113,37)" rx="2" ry="2" />
<text  x="254.31" y="191.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_delete_visitor&gt; (1 samples, 0.02%)</title><rect x="107.2" y="405" width="0.2" height="15.0" fill="rgb(254,154,48)" rx="2" ry="2" />
<text  x="110.15" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="631.4" y="501" width="0.2" height="15.0" fill="rgb(250,220,13)" rx="2" ry="2" />
<text  x="634.37" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%)</title><rect x="22.1" y="341" width="0.3" height="15.0" fill="rgb(208,16,24)" rx="2" ry="2" />
<text  x="25.14" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="69.4" y="405" width="0.2" height="15.0" fill="rgb(217,227,1)" rx="2" ry="2" />
<text  x="72.37" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="80.8" y="453" width="0.3" height="15.0" fill="rgb(224,207,39)" rx="2" ry="2" />
<text  x="83.84" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="1045.8" y="325" width="0.5" height="15.0" fill="rgb(237,3,27)" rx="2" ry="2" />
<text  x="1048.85" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="253.6" y="165" width="0.6" height="15.0" fill="rgb(253,62,37)" rx="2" ry="2" />
<text  x="256.56" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1129.7" y="197" width="0.3" height="15.0" fill="rgb(219,23,28)" rx="2" ry="2" />
<text  x="1132.73" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.8" y="261" width="0.2" height="15.0" fill="rgb(245,4,23)" rx="2" ry="2" />
<text  x="41.79" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="1162.8" y="485" width="0.7" height="15.0" fill="rgb(226,125,40)" rx="2" ry="2" />
<text  x="1165.79" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="325" width="0.2" height="15.0" fill="rgb(249,126,24)" rx="2" ry="2" />
<text  x="78.89" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (334 samples, 6.37%)</title><rect x="192.8" y="293" width="75.1" height="15.0" fill="rgb(219,133,17)" rx="2" ry="2" />
<text  x="195.84" y="303.5" >partitio..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (6 samples, 0.11%)</title><rect x="655.9" y="485" width="1.3" height="15.0" fill="rgb(240,147,39)" rx="2" ry="2" />
<text  x="658.89" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="847.7" y="533" width="1.1" height="15.0" fill="rgb(219,100,41)" rx="2" ry="2" />
<text  x="850.72" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (7 samples, 0.13%)</title><rect x="772.4" y="341" width="1.6" height="15.0" fill="rgb(237,115,41)" rx="2" ry="2" />
<text  x="775.38" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.2" y="197" width="0.3" height="15.0" fill="rgb(230,10,18)" rx="2" ry="2" />
<text  x="42.24" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="649.8" y="501" width="0.5" height="15.0" fill="rgb(242,193,19)" rx="2" ry="2" />
<text  x="652.81" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%)</title><rect x="854.0" y="373" width="0.2" height="15.0" fill="rgb(210,216,25)" rx="2" ry="2" />
<text  x="857.01" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="811.1" y="389" width="0.4" height="15.0" fill="rgb(240,144,22)" rx="2" ry="2" />
<text  x="814.06" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="498.0" y="229" width="2.5" height="15.0" fill="rgb(235,19,44)" rx="2" ry="2" />
<text  x="501.01" y="239.5" ></text>
</g>
<g >
<title>schema_mutations::partitioner (1 samples, 0.02%)</title><rect x="105.6" y="357" width="0.2" height="15.0" fill="rgb(233,111,19)" rx="2" ry="2" />
<text  x="108.58" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="556.9" y="437" width="0.3" height="15.0" fill="rgb(250,58,20)" rx="2" ry="2" />
<text  x="559.93" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="775.5" y="341" width="0.5" height="15.0" fill="rgb(229,107,34)" rx="2" ry="2" />
<text  x="778.53" y="351.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="1170.0" y="661" width="0.2" height="15.0" fill="rgb(211,153,51)" rx="2" ry="2" />
<text  x="1172.98" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1136.9" y="229" width="0.3" height="15.0" fill="rgb(250,118,14)" rx="2" ry="2" />
<text  x="1139.93" y="239.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (103 samples, 1.96%)</title><rect x="880.1" y="405" width="23.2" height="15.0" fill="rgb(213,77,0)" rx="2" ry="2" />
<text  x="883.10" y="415.5" >_..</text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="57.2" y="85" width="0.3" height="15.0" fill="rgb(225,75,15)" rx="2" ry="2" />
<text  x="60.23" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="50.3" y="277" width="0.2" height="15.0" fill="rgb(241,167,30)" rx="2" ry="2" />
<text  x="53.26" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.3" y="197" width="0.2" height="15.0" fill="rgb(251,179,28)" rx="2" ry="2" />
<text  x="64.28" y="207.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%)</title><rect x="851.8" y="309" width="0.2" height="15.0" fill="rgb(209,129,3)" rx="2" ry="2" />
<text  x="854.76" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="105.6" y="485" width="0.2" height="15.0" fill="rgb(230,19,18)" rx="2" ry="2" />
<text  x="108.58" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="52.5" y="261" width="0.2" height="15.0" fill="rgb(228,106,0)" rx="2" ry="2" />
<text  x="55.50" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (39 samples, 0.74%)</title><rect x="648.7" y="517" width="8.8" height="15.0" fill="rgb(213,96,33)" rx="2" ry="2" />
<text  x="651.69" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="802.1" y="309" width="0.2" height="15.0" fill="rgb(220,159,40)" rx="2" ry="2" />
<text  x="805.06" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="55.2" y="133" width="0.5" height="15.0" fill="rgb(250,70,5)" rx="2" ry="2" />
<text  x="58.20" y="143.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (4 samples, 0.08%)</title><rect x="991.2" y="309" width="0.9" height="15.0" fill="rgb(230,156,30)" rx="2" ry="2" />
<text  x="994.20" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (8 samples, 0.15%)</title><rect x="650.7" y="501" width="1.8" height="15.0" fill="rgb(214,152,41)" rx="2" ry="2" />
<text  x="653.71" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.15%)</title><rect x="662.4" y="485" width="1.8" height="15.0" fill="rgb(226,144,54)" rx="2" ry="2" />
<text  x="665.41" y="495.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartCharPositionInLine (2 samples, 0.04%)</title><rect x="29.6" y="293" width="0.4" height="15.0" fill="rgb(248,182,0)" rx="2" ry="2" />
<text  x="32.57" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="470.6" y="309" width="0.2" height="15.0" fill="rgb(248,133,30)" rx="2" ry="2" />
<text  x="473.58" y="319.5" ></text>
</g>
<g >
<title>db::config::config (1 samples, 0.02%)</title><rect x="83.1" y="613" width="0.2" height="15.0" fill="rgb(209,203,52)" rx="2" ry="2" />
<text  x="86.09" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (2 samples, 0.04%)</title><rect x="691.9" y="485" width="0.4" height="15.0" fill="rgb(208,196,10)" rx="2" ry="2" />
<text  x="694.87" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.9" y="277" width="0.5" height="15.0" fill="rgb(216,221,28)" rx="2" ry="2" />
<text  x="44.93" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="39.7" y="213" width="0.4" height="15.0" fill="rgb(244,123,9)" rx="2" ry="2" />
<text  x="42.69" y="223.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (4 samples, 0.08%)</title><rect x="1121.2" y="277" width="0.9" height="15.0" fill="rgb(227,53,27)" rx="2" ry="2" />
<text  x="1124.18" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="1083.6" y="389" width="1.8" height="15.0" fill="rgb(249,66,8)" rx="2" ry="2" />
<text  x="1086.63" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="705.1" y="469" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="708.14" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="532.4" y="357" width="0.2" height="15.0" fill="rgb(233,135,36)" rx="2" ry="2" />
<text  x="535.42" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="261.2" y="213" width="0.5" height="15.0" fill="rgb(248,187,34)" rx="2" ry="2" />
<text  x="264.20" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.36%)</title><rect x="258.1" y="245" width="4.2" height="15.0" fill="rgb(248,113,35)" rx="2" ry="2" />
<text  x="261.05" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="590.0" y="453" width="0.2" height="15.0" fill="rgb(227,4,26)" rx="2" ry="2" />
<text  x="592.99" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.9" y="501" width="0.3" height="15.0" fill="rgb(216,137,33)" rx="2" ry="2" />
<text  x="82.94" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="548.4" y="437" width="0.2" height="15.0" fill="rgb(207,217,39)" rx="2" ry="2" />
<text  x="551.39" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%)</title><rect x="1021.3" y="277" width="0.5" height="15.0" fill="rgb(225,54,41)" rx="2" ry="2" />
<text  x="1024.33" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1060.9" y="357" width="0.2" height="15.0" fill="rgb(222,23,34)" rx="2" ry="2" />
<text  x="1063.91" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="581.2" y="373" width="0.9" height="15.0" fill="rgb(228,169,44)" rx="2" ry="2" />
<text  x="584.22" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.13%)</title><rect x="180.2" y="293" width="1.6" height="15.0" fill="rgb(246,56,8)" rx="2" ry="2" />
<text  x="183.24" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="456.6" y="293" width="0.3" height="15.0" fill="rgb(221,206,46)" rx="2" ry="2" />
<text  x="459.63" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="190.1" y="293" width="0.3" height="15.0" fill="rgb(234,103,47)" rx="2" ry="2" />
<text  x="193.14" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (5 samples, 0.10%)</title><rect x="270.0" y="245" width="1.1" height="15.0" fill="rgb(224,56,14)" rx="2" ry="2" />
<text  x="272.97" y="255.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (90 samples, 1.72%)</title><rect x="780.2" y="309" width="20.3" height="15.0" fill="rgb(233,106,45)" rx="2" ry="2" />
<text  x="783.25" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.10%)</title><rect x="725.6" y="373" width="1.1" height="15.0" fill="rgb(243,88,35)" rx="2" ry="2" />
<text  x="728.60" y="383.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="830.0" y="405" width="0.2" height="15.0" fill="rgb(250,194,42)" rx="2" ry="2" />
<text  x="832.95" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1133.3" y="213" width="0.5" height="15.0" fill="rgb(225,93,20)" rx="2" ry="2" />
<text  x="1136.33" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1136.9" y="421" width="0.3" height="15.0" fill="rgb(229,91,39)" rx="2" ry="2" />
<text  x="1139.93" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="190.4" y="309" width="0.2" height="15.0" fill="rgb(251,176,48)" rx="2" ry="2" />
<text  x="193.36" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="545.7" y="341" width="0.2" height="15.0" fill="rgb(245,73,39)" rx="2" ry="2" />
<text  x="548.69" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="81.7" y="469" width="0.3" height="15.0" fill="rgb(222,79,47)" rx="2" ry="2" />
<text  x="84.74" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1119.8" y="389" width="7.7" height="15.0" fill="rgb(238,48,18)" rx="2" ry="2" />
<text  x="1122.83" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.9" y="437" width="0.2" height="15.0" fill="rgb(238,89,37)" rx="2" ry="2" />
<text  x="13.90" y="447.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="277.2" y="245" width="0.2" height="15.0" fill="rgb(207,60,30)" rx="2" ry="2" />
<text  x="280.17" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="809.7" y="293" width="0.2" height="15.0" fill="rgb(240,167,41)" rx="2" ry="2" />
<text  x="812.71" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="1167.1" y="453" width="0.2" height="15.0" fill="rgb(212,220,0)" rx="2" ry="2" />
<text  x="1170.06" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="620.8" y="469" width="0.2" height="15.0" fill="rgb(223,16,52)" rx="2" ry="2" />
<text  x="623.80" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="631.6" y="517" width="0.2" height="15.0" fill="rgb(222,42,54)" rx="2" ry="2" />
<text  x="634.60" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_index_statement*, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.2" y="373" width="0.2" height="15.0" fill="rgb(254,64,15)" rx="2" ry="2" />
<text  x="67.20" y="383.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="107.4" y="453" width="0.2" height="15.0" fill="rgb(223,197,41)" rx="2" ry="2" />
<text  x="110.38" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (72 samples, 1.37%)</title><rect x="510.8" y="325" width="16.2" height="15.0" fill="rgb(221,96,0)" rx="2" ry="2" />
<text  x="513.83" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (9 samples, 0.17%)</title><rect x="926.9" y="437" width="2.0" height="15.0" fill="rgb(205,60,11)" rx="2" ry="2" />
<text  x="929.88" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="621.0" y="453" width="0.3" height="15.0" fill="rgb(213,102,22)" rx="2" ry="2" />
<text  x="624.03" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="753.5" y="389" width="0.2" height="15.0" fill="rgb(249,20,13)" rx="2" ry="2" />
<text  x="756.49" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (51 samples, 0.97%)</title><rect x="226.8" y="133" width="11.5" height="15.0" fill="rgb(232,60,39)" rx="2" ry="2" />
<text  x="229.79" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="631.1" y="501" width="0.3" height="15.0" fill="rgb(253,125,39)" rx="2" ry="2" />
<text  x="634.15" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="28.7" y="261" width="0.4" height="15.0" fill="rgb(233,125,27)" rx="2" ry="2" />
<text  x="31.67" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="60.4" y="229" width="0.2" height="15.0" fill="rgb(246,61,49)" rx="2" ry="2" />
<text  x="63.38" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(250,33,49)" rx="2" ry="2" />
<text  x="13.67" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (96 samples, 1.83%)</title><rect x="780.2" y="325" width="21.6" height="15.0" fill="rgb(231,82,11)" rx="2" ry="2" />
<text  x="783.25" y="335.5" >s..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="926.2" y="421" width="0.2" height="15.0" fill="rgb(233,35,42)" rx="2" ry="2" />
<text  x="929.20" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="573.6" y="405" width="0.2" height="15.0" fill="rgb(224,27,31)" rx="2" ry="2" />
<text  x="576.58" y="415.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="285.7" y="245" width="0.2" height="15.0" fill="rgb(207,43,50)" rx="2" ry="2" />
<text  x="288.72" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="74.5" y="469" width="0.3" height="15.0" fill="rgb(241,150,37)" rx="2" ry="2" />
<text  x="77.54" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="844.1" y="501" width="0.2" height="15.0" fill="rgb(230,48,43)" rx="2" ry="2" />
<text  x="847.12" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.1" y="309" width="0.3" height="15.0" fill="rgb(233,222,19)" rx="2" ry="2" />
<text  x="43.14" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%)</title><rect x="820.3" y="453" width="0.2" height="15.0" fill="rgb(248,59,40)" rx="2" ry="2" />
<text  x="823.28" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="42.6" y="197" width="0.2" height="15.0" fill="rgb(215,148,51)" rx="2" ry="2" />
<text  x="45.61" y="207.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%)</title><rect x="1015.7" y="197" width="0.2" height="15.0" fill="rgb(250,168,21)" rx="2" ry="2" />
<text  x="1018.71" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="746.1" y="421" width="0.9" height="15.0" fill="rgb(239,59,35)" rx="2" ry="2" />
<text  x="749.07" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="714.6" y="533" width="0.2" height="15.0" fill="rgb(237,130,20)" rx="2" ry="2" />
<text  x="717.58" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1105.2" y="437" width="0.2" height="15.0" fill="rgb(217,203,24)" rx="2" ry="2" />
<text  x="1108.22" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (4 samples, 0.08%)</title><rect x="1155.6" y="485" width="0.9" height="15.0" fill="rgb(244,128,7)" rx="2" ry="2" />
<text  x="1158.59" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="340.4" y="245" width="0.2" height="15.0" fill="rgb(219,212,51)" rx="2" ry="2" />
<text  x="343.36" y="255.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (3 samples, 0.06%)</title><rect x="551.3" y="421" width="0.7" height="15.0" fill="rgb(229,197,25)" rx="2" ry="2" />
<text  x="554.31" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="702.4" y="501" width="0.3" height="15.0" fill="rgb(219,37,43)" rx="2" ry="2" />
<text  x="705.44" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="41.9" y="261" width="0.5" height="15.0" fill="rgb(206,126,52)" rx="2" ry="2" />
<text  x="44.93" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="545.7" y="357" width="0.2" height="15.0" fill="rgb(245,104,5)" rx="2" ry="2" />
<text  x="548.69" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (26 samples, 0.50%)</title><rect x="1129.5" y="309" width="5.9" height="15.0" fill="rgb(232,4,48)" rx="2" ry="2" />
<text  x="1132.50" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="840.1" y="453" width="1.1" height="15.0" fill="rgb(224,142,37)" rx="2" ry="2" />
<text  x="843.07" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="745.8" y="437" width="1.2" height="15.0" fill="rgb(248,54,29)" rx="2" ry="2" />
<text  x="748.84" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.8" y="229" width="0.2" height="15.0" fill="rgb(246,59,42)" rx="2" ry="2" />
<text  x="52.81" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="10.7" y="389" width="0.2" height="15.0" fill="rgb(229,121,40)" rx="2" ry="2" />
<text  x="13.67" y="399.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="431.0" y="277" width="1.6" height="15.0" fill="rgb(214,76,51)" rx="2" ry="2" />
<text  x="433.99" y="287.5" ></text>
</g>
<g >
<title>composite::serialize_value&lt;partition_key_view&amp;&gt; (1 samples, 0.02%)</title><rect x="82.4" y="453" width="0.2" height="15.0" fill="rgb(220,111,29)" rx="2" ry="2" />
<text  x="85.41" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%)</title><rect x="80.4" y="581" width="2.7" height="15.0" fill="rgb(244,85,46)" rx="2" ry="2" />
<text  x="83.39" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="687.6" y="533" width="0.2" height="15.0" fill="rgb(233,105,28)" rx="2" ry="2" />
<text  x="690.59" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="41.9" y="245" width="0.5" height="15.0" fill="rgb(211,77,9)" rx="2" ry="2" />
<text  x="44.93" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="496.9" y="229" width="0.4" height="15.0" fill="rgb(227,3,17)" rx="2" ry="2" />
<text  x="499.89" y="239.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1037.5" y="325" width="0.2" height="15.0" fill="rgb(233,208,53)" rx="2" ry="2" />
<text  x="1040.52" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (5 samples, 0.10%)</title><rect x="23.7" y="341" width="1.1" height="15.0" fill="rgb(213,54,24)" rx="2" ry="2" />
<text  x="26.72" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (7 samples, 0.13%)</title><rect x="1151.8" y="453" width="1.5" height="15.0" fill="rgb(236,20,7)" rx="2" ry="2" />
<text  x="1154.77" y="463.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="105.4" y="373" width="0.2" height="15.0" fill="rgb(254,27,48)" rx="2" ry="2" />
<text  x="108.35" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.13%)</title><rect x="823.9" y="469" width="1.6" height="15.0" fill="rgb(211,150,35)" rx="2" ry="2" />
<text  x="826.88" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="853.8" y="341" width="0.2" height="15.0" fill="rgb(238,210,23)" rx="2" ry="2" />
<text  x="856.79" y="351.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="855.6" y="229" width="0.2" height="15.0" fill="rgb(248,97,15)" rx="2" ry="2" />
<text  x="858.59" y="239.5" ></text>
</g>
<g >
<title>cql3::get_cql3_kind (1 samples, 0.02%)</title><rect x="69.4" y="389" width="0.2" height="15.0" fill="rgb(237,215,5)" rx="2" ry="2" />
<text  x="72.37" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="54.1" y="261" width="0.2" height="15.0" fill="rgb(226,65,34)" rx="2" ry="2" />
<text  x="57.08" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="831.7" y="421" width="0.7" height="15.0" fill="rgb(254,171,31)" rx="2" ry="2" />
<text  x="834.75" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="934.3" y="437" width="0.7" height="15.0" fill="rgb(247,133,50)" rx="2" ry="2" />
<text  x="937.30" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="95.0" y="501" width="0.9" height="15.0" fill="rgb(245,174,24)" rx="2" ry="2" />
<text  x="98.01" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="166.7" y="405" width="0.3" height="15.0" fill="rgb(221,11,46)" rx="2" ry="2" />
<text  x="169.75" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (3 samples, 0.06%)</title><rect x="805.2" y="325" width="0.7" height="15.0" fill="rgb(244,182,44)" rx="2" ry="2" />
<text  x="808.21" y="335.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="685.1" y="469" width="0.2" height="15.0" fill="rgb(254,184,12)" rx="2" ry="2" />
<text  x="688.12" y="479.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="741.6" y="325" width="0.2" height="15.0" fill="rgb(252,13,14)" rx="2" ry="2" />
<text  x="744.57" y="335.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (2 samples, 0.04%)</title><rect x="1133.8" y="229" width="0.4" height="15.0" fill="rgb(241,9,23)" rx="2" ry="2" />
<text  x="1136.78" y="239.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="536.9" y="309" width="0.2" height="15.0" fill="rgb(243,182,54)" rx="2" ry="2" />
<text  x="539.92" y="319.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="245.2" y="149" width="0.3" height="15.0" fill="rgb(254,62,36)" rx="2" ry="2" />
<text  x="248.24" y="159.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%)</title><rect x="1167.3" y="517" width="0.2" height="15.0" fill="rgb(231,172,39)" rx="2" ry="2" />
<text  x="1170.29" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="82.2" y="325" width="0.2" height="15.0" fill="rgb(208,93,26)" rx="2" ry="2" />
<text  x="85.19" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="931.8" y="437" width="0.3" height="15.0" fill="rgb(221,47,53)" rx="2" ry="2" />
<text  x="934.83" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1023.6" y="277" width="0.4" height="15.0" fill="rgb(221,53,25)" rx="2" ry="2" />
<text  x="1026.58" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (4 samples, 0.08%)</title><rect x="501.4" y="357" width="0.9" height="15.0" fill="rgb(238,80,14)" rx="2" ry="2" />
<text  x="504.39" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="540.5" y="277" width="0.5" height="15.0" fill="rgb(233,76,19)" rx="2" ry="2" />
<text  x="543.52" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="52.1" y="181" width="0.2" height="15.0" fill="rgb(250,11,50)" rx="2" ry="2" />
<text  x="55.05" y="191.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="55.2" y="117" width="0.5" height="15.0" fill="rgb(251,82,47)" rx="2" ry="2" />
<text  x="58.20" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="150.3" y="453" width="0.7" height="15.0" fill="rgb(234,171,47)" rx="2" ry="2" />
<text  x="153.33" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (1 samples, 0.02%)</title><rect x="555.1" y="437" width="0.3" height="15.0" fill="rgb(222,120,54)" rx="2" ry="2" />
<text  x="558.13" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1058.7" y="341" width="0.2" height="15.0" fill="rgb(246,214,51)" rx="2" ry="2" />
<text  x="1061.66" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="763.6" y="357" width="0.2" height="15.0" fill="rgb(218,173,35)" rx="2" ry="2" />
<text  x="766.61" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="734.8" y="421" width="0.5" height="15.0" fill="rgb(237,122,37)" rx="2" ry="2" />
<text  x="737.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="903.5" y="405" width="0.2" height="15.0" fill="rgb(235,113,35)" rx="2" ry="2" />
<text  x="906.49" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="308.0" y="341" width="0.2" height="15.0" fill="rgb(228,140,40)" rx="2" ry="2" />
<text  x="310.98" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1136.9" y="213" width="0.3" height="15.0" fill="rgb(228,93,43)" rx="2" ry="2" />
<text  x="1139.93" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (14 samples, 0.27%)</title><rect x="971.9" y="373" width="3.1" height="15.0" fill="rgb(251,224,49)" rx="2" ry="2" />
<text  x="974.86" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (17 samples, 0.32%)</title><rect x="519.2" y="261" width="3.8" height="15.0" fill="rgb(254,178,14)" rx="2" ry="2" />
<text  x="522.15" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="59.9" y="293" width="0.3" height="15.0" fill="rgb(210,111,8)" rx="2" ry="2" />
<text  x="62.93" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="56.3" y="133" width="0.3" height="15.0" fill="rgb(225,70,10)" rx="2" ry="2" />
<text  x="59.33" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="521.0" y="229" width="0.2" height="15.0" fill="rgb(232,129,31)" rx="2" ry="2" />
<text  x="523.95" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="657.0" y="469" width="0.2" height="15.0" fill="rgb(235,225,10)" rx="2" ry="2" />
<text  x="660.01" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="931.8" y="421" width="0.3" height="15.0" fill="rgb(241,146,4)" rx="2" ry="2" />
<text  x="934.83" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.27%)</title><rect x="95.9" y="501" width="3.2" height="15.0" fill="rgb(221,8,31)" rx="2" ry="2" />
<text  x="98.91" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="81.1" y="453" width="0.2" height="15.0" fill="rgb(249,95,23)" rx="2" ry="2" />
<text  x="84.07" y="463.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="514.4" y="277" width="0.3" height="15.0" fill="rgb(234,140,10)" rx="2" ry="2" />
<text  x="517.43" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1104.5" y="437" width="0.5" height="15.0" fill="rgb(227,214,34)" rx="2" ry="2" />
<text  x="1107.54" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="693.0" y="485" width="1.6" height="15.0" fill="rgb(211,47,47)" rx="2" ry="2" />
<text  x="695.99" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="1020.0" y="213" width="1.1" height="15.0" fill="rgb(214,92,48)" rx="2" ry="2" />
<text  x="1022.98" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="99.5" y="469" width="0.7" height="15.0" fill="rgb(205,7,47)" rx="2" ry="2" />
<text  x="102.51" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::task_queue (1 samples, 0.02%)</title><rect x="108.1" y="437" width="0.2" height="15.0" fill="rgb(221,191,45)" rx="2" ry="2" />
<text  x="111.05" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="256.7" y="213" width="0.2" height="15.0" fill="rgb(222,113,13)" rx="2" ry="2" />
<text  x="259.70" y="223.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="856.0" y="245" width="0.3" height="15.0" fill="rgb(216,203,49)" rx="2" ry="2" />
<text  x="859.04" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="50.7" y="277" width="0.9" height="15.0" fill="rgb(216,152,11)" rx="2" ry="2" />
<text  x="53.71" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%)</title><rect x="737.5" y="389" width="0.9" height="15.0" fill="rgb(229,14,15)" rx="2" ry="2" />
<text  x="740.52" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1016.4" y="245" width="0.2" height="15.0" fill="rgb(230,150,2)" rx="2" ry="2" />
<text  x="1019.38" y="255.5" ></text>
</g>
<g >
<title>posix_memalign (16 samples, 0.30%)</title><rect x="234.7" y="85" width="3.6" height="15.0" fill="rgb(254,91,54)" rx="2" ry="2" />
<text  x="237.67" y="95.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (2 samples, 0.04%)</title><rect x="529.9" y="341" width="0.5" height="15.0" fill="rgb(220,38,11)" rx="2" ry="2" />
<text  x="532.95" y="351.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="530.4" y="357" width="0.9" height="15.0" fill="rgb(235,91,29)" rx="2" ry="2" />
<text  x="533.40" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1114.0" y="421" width="0.2" height="15.0" fill="rgb(217,169,3)" rx="2" ry="2" />
<text  x="1116.99" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="1166.6" y="501" width="0.2" height="15.0" fill="rgb(224,157,15)" rx="2" ry="2" />
<text  x="1169.61" y="511.5" ></text>
</g>
<g >
<title>service::client_state::has_access (5 samples, 0.10%)</title><rect x="75.7" y="469" width="1.1" height="15.0" fill="rgb(224,152,0)" rx="2" ry="2" />
<text  x="78.67" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="47.6" y="325" width="0.2" height="15.0" fill="rgb(239,227,48)" rx="2" ry="2" />
<text  x="50.56" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="471.7" y="341" width="0.2" height="15.0" fill="rgb(214,217,33)" rx="2" ry="2" />
<text  x="474.70" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (7 samples, 0.13%)</title><rect x="259.4" y="213" width="1.6" height="15.0" fill="rgb(239,27,25)" rx="2" ry="2" />
<text  x="262.40" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::~reactor_backend_aio (1 samples, 0.02%)</title><rect x="79.9" y="645" width="0.3" height="15.0" fill="rgb(248,135,43)" rx="2" ry="2" />
<text  x="82.94" y="655.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%)</title><rect x="560.8" y="357" width="0.6" height="15.0" fill="rgb(216,80,18)" rx="2" ry="2" />
<text  x="563.76" y="367.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%)</title><rect x="687.4" y="453" width="0.2" height="15.0" fill="rgb(249,162,10)" rx="2" ry="2" />
<text  x="690.37" y="463.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%)</title><rect x="211.5" y="213" width="0.5" height="15.0" fill="rgb(208,21,34)" rx="2" ry="2" />
<text  x="214.50" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (54 samples, 1.03%)</title><rect x="784.5" y="261" width="12.2" height="15.0" fill="rgb(221,100,27)" rx="2" ry="2" />
<text  x="787.52" y="271.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="1136.9" y="293" width="0.3" height="15.0" fill="rgb(207,74,23)" rx="2" ry="2" />
<text  x="1139.93" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="505.4" y="309" width="0.7" height="15.0" fill="rgb(239,149,16)" rx="2" ry="2" />
<text  x="508.43" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="73.4" y="437" width="0.2" height="15.0" fill="rgb(206,213,32)" rx="2" ry="2" />
<text  x="76.42" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (12 samples, 0.23%)</title><rect x="33.6" y="293" width="2.7" height="15.0" fill="rgb(230,137,46)" rx="2" ry="2" />
<text  x="36.61" y="303.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (9 samples, 0.17%)</title><rect x="14.0" y="613" width="2.1" height="15.0" fill="rgb(213,82,8)" rx="2" ry="2" />
<text  x="17.05" y="623.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="1166.6" y="485" width="0.2" height="15.0" fill="rgb(211,23,34)" rx="2" ry="2" />
<text  x="1169.61" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="919.5" y="421" width="0.2" height="15.0" fill="rgb(248,85,7)" rx="2" ry="2" />
<text  x="922.46" y="431.5" ></text>
</g>
<g >
<title>query_mutation (1 samples, 0.02%)</title><rect x="105.6" y="325" width="0.2" height="15.0" fill="rgb(215,50,27)" rx="2" ry="2" />
<text  x="108.58" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%)</title><rect x="22.4" y="437" width="0.2" height="15.0" fill="rgb(223,194,52)" rx="2" ry="2" />
<text  x="25.37" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="13.6" y="613" width="0.2" height="15.0" fill="rgb(238,56,8)" rx="2" ry="2" />
<text  x="16.60" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="299.4" y="373" width="0.3" height="15.0" fill="rgb(216,177,13)" rx="2" ry="2" />
<text  x="302.43" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="646.4" y="485" width="0.5" height="15.0" fill="rgb(217,136,54)" rx="2" ry="2" />
<text  x="649.44" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="82.0" y="405" width="0.4" height="15.0" fill="rgb(221,112,54)" rx="2" ry="2" />
<text  x="84.96" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="522.5" y="245" width="0.5" height="15.0" fill="rgb(233,212,35)" rx="2" ry="2" />
<text  x="525.53" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="79.0" y="613" width="0.3" height="15.0" fill="rgb(254,77,39)" rx="2" ry="2" />
<text  x="82.04" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="563.9" y="309" width="0.5" height="15.0" fill="rgb(242,8,33)" rx="2" ry="2" />
<text  x="566.91" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="640.4" y="517" width="0.2" height="15.0" fill="rgb(249,159,45)" rx="2" ry="2" />
<text  x="643.37" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="107.6" y="469" width="0.5" height="15.0" fill="rgb(213,104,16)" rx="2" ry="2" />
<text  x="110.60" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="100.2" y="485" width="0.2" height="15.0" fill="rgb(220,181,33)" rx="2" ry="2" />
<text  x="103.18" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="29.1" y="277" width="0.2" height="15.0" fill="rgb(212,156,19)" rx="2" ry="2" />
<text  x="32.12" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="1041.8" y="325" width="1.1" height="15.0" fill="rgb(236,204,7)" rx="2" ry="2" />
<text  x="1044.80" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="710.5" y="501" width="0.3" height="15.0" fill="rgb(211,179,20)" rx="2" ry="2" />
<text  x="713.53" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1085.2" y="373" width="0.2" height="15.0" fill="rgb(210,125,10)" rx="2" ry="2" />
<text  x="1088.20" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%)</title><rect x="1130.2" y="149" width="0.7" height="15.0" fill="rgb(208,49,21)" rx="2" ry="2" />
<text  x="1133.18" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.0" y="549" width="0.3" height="15.0" fill="rgb(209,33,5)" rx="2" ry="2" />
<text  x="82.04" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.2" y="165" width="0.2" height="15.0" fill="rgb(236,116,2)" rx="2" ry="2" />
<text  x="45.16" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="22.4" y="405" width="0.2" height="15.0" fill="rgb(244,42,34)" rx="2" ry="2" />
<text  x="25.37" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_timeout (1 samples, 0.02%)</title><rect x="858.7" y="453" width="0.3" height="15.0" fill="rgb(237,191,16)" rx="2" ry="2" />
<text  x="861.74" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.11%)</title><rect x="810.2" y="421" width="1.3" height="15.0" fill="rgb(237,175,27)" rx="2" ry="2" />
<text  x="813.16" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="796.0" y="245" width="0.2" height="15.0" fill="rgb(232,160,11)" rx="2" ry="2" />
<text  x="798.99" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (7 samples, 0.13%)</title><rect x="944.9" y="421" width="1.5" height="15.0" fill="rgb(246,63,32)" rx="2" ry="2" />
<text  x="947.87" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%)</title><rect x="452.6" y="341" width="0.7" height="15.0" fill="rgb(229,28,25)" rx="2" ry="2" />
<text  x="455.58" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (2 samples, 0.04%)</title><rect x="854.9" y="373" width="0.5" height="15.0" fill="rgb(238,99,41)" rx="2" ry="2" />
<text  x="857.91" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="572.7" y="341" width="0.2" height="15.0" fill="rgb(208,75,28)" rx="2" ry="2" />
<text  x="575.68" y="351.5" ></text>
</g>
<g >
<title>database::find_keyspace (21 samples, 0.40%)</title><rect x="1042.9" y="373" width="4.7" height="15.0" fill="rgb(243,152,15)" rx="2" ry="2" />
<text  x="1045.92" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="357" width="0.2" height="15.0" fill="rgb(217,77,33)" rx="2" ry="2" />
<text  x="1169.39" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="964.0" y="357" width="0.2" height="15.0" fill="rgb(240,188,0)" rx="2" ry="2" />
<text  x="966.99" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="554.0" y="341" width="0.5" height="15.0" fill="rgb(243,207,12)" rx="2" ry="2" />
<text  x="557.01" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (3 samples, 0.06%)</title><rect x="28.4" y="277" width="0.7" height="15.0" fill="rgb(206,15,45)" rx="2" ry="2" />
<text  x="31.44" y="287.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="908.4" y="389" width="0.5" height="15.0" fill="rgb(245,227,24)" rx="2" ry="2" />
<text  x="911.44" y="399.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (3 samples, 0.06%)</title><rect x="326.9" y="341" width="0.6" height="15.0" fill="rgb(247,1,5)" rx="2" ry="2" />
<text  x="329.87" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="636.5" y="501" width="0.3" height="15.0" fill="rgb(244,133,43)" rx="2" ry="2" />
<text  x="639.54" y="511.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1170.2" y="661" width="0.9" height="15.0" fill="rgb(214,75,53)" rx="2" ry="2" />
<text  x="1173.21" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.9" y="309" width="0.5" height="15.0" fill="rgb(212,191,51)" rx="2" ry="2" />
<text  x="44.93" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.3" y="373" width="0.2" height="15.0" fill="rgb(229,221,29)" rx="2" ry="2" />
<text  x="21.32" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="72.5" y="341" width="0.2" height="15.0" fill="rgb(209,162,41)" rx="2" ry="2" />
<text  x="75.52" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="848.8" y="485" width="0.5" height="15.0" fill="rgb(238,125,53)" rx="2" ry="2" />
<text  x="851.84" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a21b1fbb2f481671c80560d96a8acc1cf916b468] (1 samples, 0.02%)</title><rect x="757.1" y="341" width="0.2" height="15.0" fill="rgb(232,9,32)" rx="2" ry="2" />
<text  x="760.09" y="351.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="856.3" y="277" width="0.2" height="15.0" fill="rgb(222,134,45)" rx="2" ry="2" />
<text  x="859.26" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.3" y="405" width="0.2" height="15.0" fill="rgb(251,39,40)" rx="2" ry="2" />
<text  x="66.30" y="415.5" ></text>
</g>
<g >
<title>iterator_reader::fetch_entry (1 samples, 0.02%)</title><rect x="79.9" y="389" width="0.3" height="15.0" fill="rgb(245,69,27)" rx="2" ry="2" />
<text  x="82.94" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="259.2" y="213" width="0.2" height="15.0" fill="rgb(227,58,54)" rx="2" ry="2" />
<text  x="262.18" y="223.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="836.0" y="485" width="0.2" height="15.0" fill="rgb(235,204,11)" rx="2" ry="2" />
<text  x="839.02" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.8" y="469" width="0.2" height="15.0" fill="rgb(241,71,11)" rx="2" ry="2" />
<text  x="677.78" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="58.4" y="309" width="0.2" height="15.0" fill="rgb(226,96,6)" rx="2" ry="2" />
<text  x="61.35" y="319.5" ></text>
</g>
<g >
<title>from_hex (3 samples, 0.06%)</title><rect x="68.7" y="373" width="0.7" height="15.0" fill="rgb(216,115,35)" rx="2" ry="2" />
<text  x="71.70" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="263.5" y="245" width="0.4" height="15.0" fill="rgb(240,47,6)" rx="2" ry="2" />
<text  x="266.45" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="41.7" y="357" width="0.2" height="15.0" fill="rgb(243,159,47)" rx="2" ry="2" />
<text  x="44.71" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="395.7" y="245" width="0.2" height="15.0" fill="rgb(216,169,1)" rx="2" ry="2" />
<text  x="398.69" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="24.2" y="293" width="0.6" height="15.0" fill="rgb(225,7,52)" rx="2" ry="2" />
<text  x="27.17" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="81.1" y="405" width="0.2" height="15.0" fill="rgb(242,33,38)" rx="2" ry="2" />
<text  x="84.07" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.9" y="341" width="0.2" height="15.0" fill="rgb(217,216,22)" rx="2" ry="2" />
<text  x="67.87" y="351.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="75.4" y="469" width="0.3" height="15.0" fill="rgb(215,46,33)" rx="2" ry="2" />
<text  x="78.44" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (13 samples, 0.25%)</title><rect x="283.0" y="261" width="2.9" height="15.0" fill="rgb(238,164,27)" rx="2" ry="2" />
<text  x="286.02" y="271.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="631.6" y="501" width="0.2" height="15.0" fill="rgb(235,150,33)" rx="2" ry="2" />
<text  x="634.60" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="612.0" y="469" width="0.3" height="15.0" fill="rgb(252,209,18)" rx="2" ry="2" />
<text  x="615.03" y="479.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (2 samples, 0.04%)</title><rect x="263.9" y="245" width="0.5" height="15.0" fill="rgb(223,227,54)" rx="2" ry="2" />
<text  x="266.90" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (13 samples, 0.25%)</title><rect x="855.6" y="373" width="2.9" height="15.0" fill="rgb(222,129,2)" rx="2" ry="2" />
<text  x="858.59" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="882.8" y="309" width="0.7" height="15.0" fill="rgb(240,47,9)" rx="2" ry="2" />
<text  x="885.80" y="319.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%)</title><rect x="107.2" y="373" width="0.2" height="15.0" fill="rgb(212,77,31)" rx="2" ry="2" />
<text  x="110.15" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="852.9" y="389" width="0.2" height="15.0" fill="rgb(242,32,32)" rx="2" ry="2" />
<text  x="855.89" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="500.3" y="213" width="0.2" height="15.0" fill="rgb(216,107,22)" rx="2" ry="2" />
<text  x="503.26" y="223.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="22.1" y="373" width="0.3" height="15.0" fill="rgb(219,191,6)" rx="2" ry="2" />
<text  x="25.14" y="383.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="80.2" y="501" width="0.2" height="15.0" fill="rgb(240,50,28)" rx="2" ry="2" />
<text  x="83.17" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1009.4" y="229" width="0.2" height="15.0" fill="rgb(240,159,32)" rx="2" ry="2" />
<text  x="1012.41" y="239.5" ></text>
</g>
<g >
<title>database::query (15 samples, 0.29%)</title><rect x="102.0" y="533" width="3.4" height="15.0" fill="rgb(216,37,26)" rx="2" ry="2" />
<text  x="104.98" y="543.5" ></text>
</g>
<g >
<title>table::query (2,176 samples, 41.47%)</title><rect x="136.6" y="485" width="489.4" height="15.0" fill="rgb(225,63,34)" rx="2" ry="2" />
<text  x="139.61" y="495.5" >table::query</text>
</g>
<g >
<title>atomic_cell_or_collection::copy (72 samples, 1.37%)</title><rect x="222.1" y="149" width="16.2" height="15.0" fill="rgb(252,36,28)" rx="2" ry="2" />
<text  x="225.07" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;db::rp_handle&gt;::take_value (1 samples, 0.02%)</title><rect x="1127.0" y="357" width="0.3" height="15.0" fill="rgb(206,8,45)" rx="2" ry="2" />
<text  x="1130.03" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1125.9" y="245" width="0.2" height="15.0" fill="rgb(215,168,11)" rx="2" ry="2" />
<text  x="1128.91" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (7 samples, 0.13%)</title><rect x="523.6" y="277" width="1.6" height="15.0" fill="rgb(210,203,48)" rx="2" ry="2" />
<text  x="526.65" y="287.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.8" y="149" width="0.2" height="15.0" fill="rgb(218,118,24)" rx="2" ry="2" />
<text  x="52.81" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="687.6" y="517" width="0.2" height="15.0" fill="rgb(245,75,23)" rx="2" ry="2" />
<text  x="690.59" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%)</title><rect x="903.9" y="405" width="0.3" height="15.0" fill="rgb(221,215,30)" rx="2" ry="2" />
<text  x="906.94" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (199 samples, 3.79%)</title><rect x="22.6" y="437" width="44.7" height="15.0" fill="rgb(250,142,40)" rx="2" ry="2" />
<text  x="25.59" y="447.5" >cql3..</text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="351.8" y="245" width="0.3" height="15.0" fill="rgb(246,90,15)" rx="2" ry="2" />
<text  x="354.83" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.7" y="325" width="0.2" height="15.0" fill="rgb(240,101,35)" rx="2" ry="2" />
<text  x="62.70" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%)</title><rect x="262.8" y="245" width="0.7" height="15.0" fill="rgb(238,65,37)" rx="2" ry="2" />
<text  x="265.78" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="657.0" y="453" width="0.2" height="15.0" fill="rgb(208,56,13)" rx="2" ry="2" />
<text  x="660.01" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%)</title><rect x="784.5" y="245" width="1.8" height="15.0" fill="rgb(236,171,53)" rx="2" ry="2" />
<text  x="787.52" y="255.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::cells (1 samples, 0.02%)</title><rect x="1124.8" y="261" width="0.2" height="15.0" fill="rgb(248,114,28)" rx="2" ry="2" />
<text  x="1127.78" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="626.0" y="501" width="0.4" height="15.0" fill="rgb(229,161,31)" rx="2" ry="2" />
<text  x="628.97" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="1047.0" y="341" width="0.6" height="15.0" fill="rgb(230,146,9)" rx="2" ry="2" />
<text  x="1049.97" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.10%)</title><rect x="97.7" y="453" width="1.1" height="15.0" fill="rgb(220,94,50)" rx="2" ry="2" />
<text  x="100.71" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="641.0" y="485" width="0.3" height="15.0" fill="rgb(245,100,39)" rx="2" ry="2" />
<text  x="644.04" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="937.4" y="437" width="0.3" height="15.0" fill="rgb(225,46,27)" rx="2" ry="2" />
<text  x="940.45" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="81.3" y="405" width="0.4" height="15.0" fill="rgb(232,62,50)" rx="2" ry="2" />
<text  x="84.29" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (5 samples, 0.10%)</title><rect x="853.6" y="389" width="1.1" height="15.0" fill="rgb(225,181,35)" rx="2" ry="2" />
<text  x="856.56" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="43.5" y="165" width="0.2" height="15.0" fill="rgb(230,171,8)" rx="2" ry="2" />
<text  x="46.51" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (43 samples, 0.82%)</title><rect x="515.8" y="293" width="9.6" height="15.0" fill="rgb(209,137,9)" rx="2" ry="2" />
<text  x="518.78" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (10 samples, 0.19%)</title><rect x="725.4" y="405" width="2.2" height="15.0" fill="rgb(234,44,31)" rx="2" ry="2" />
<text  x="728.38" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="685.1" y="485" width="0.7" height="15.0" fill="rgb(253,155,47)" rx="2" ry="2" />
<text  x="688.12" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.13%)</title><rect x="536.0" y="341" width="1.6" height="15.0" fill="rgb(246,183,43)" rx="2" ry="2" />
<text  x="539.02" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="57.0" y="229" width="0.2" height="15.0" fill="rgb(231,3,53)" rx="2" ry="2" />
<text  x="60.00" y="239.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume_new_partition (1 samples, 0.02%)</title><rect x="82.6" y="485" width="0.3" height="15.0" fill="rgb(232,157,45)" rx="2" ry="2" />
<text  x="85.64" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="56.1" y="261" width="0.5" height="15.0" fill="rgb(211,38,46)" rx="2" ry="2" />
<text  x="59.10" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="1143.4" y="517" width="0.3" height="15.0" fill="rgb(206,3,12)" rx="2" ry="2" />
<text  x="1146.45" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (1 samples, 0.02%)</title><rect x="473.9" y="357" width="0.3" height="15.0" fill="rgb(237,71,34)" rx="2" ry="2" />
<text  x="476.95" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (55 samples, 1.05%)</title><rect x="306.6" y="357" width="12.4" height="15.0" fill="rgb(241,48,28)" rx="2" ry="2" />
<text  x="309.63" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%)</title><rect x="907.1" y="405" width="1.8" height="15.0" fill="rgb(254,146,51)" rx="2" ry="2" />
<text  x="910.09" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1058.9" y="341" width="0.9" height="15.0" fill="rgb(224,172,37)" rx="2" ry="2" />
<text  x="1061.89" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (38 samples, 0.72%)</title><rect x="123.1" y="453" width="8.6" height="15.0" fill="rgb(230,43,11)" rx="2" ry="2" />
<text  x="126.12" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="32.7" y="277" width="0.2" height="15.0" fill="rgb(246,143,37)" rx="2" ry="2" />
<text  x="35.71" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="61.3" y="181" width="0.2" height="15.0" fill="rgb(208,62,12)" rx="2" ry="2" />
<text  x="64.28" y="191.5" ></text>
</g>
<g >
<title>ser::deletable_row__shadowable_deleted_at&lt;bytes_ostream&gt;::deletable_row__shadowable_deleted_at (1 samples, 0.02%)</title><rect x="1130.0" y="181" width="0.2" height="15.0" fill="rgb(217,17,5)" rx="2" ry="2" />
<text  x="1132.95" y="191.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="108.1" y="501" width="0.2" height="15.0" fill="rgb(238,167,11)" rx="2" ry="2" />
<text  x="111.05" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="985.1" y="245" width="0.2" height="15.0" fill="rgb(250,38,37)" rx="2" ry="2" />
<text  x="988.12" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="357.9" y="213" width="0.5" height="15.0" fill="rgb(250,162,24)" rx="2" ry="2" />
<text  x="360.91" y="223.5" ></text>
</g>
<g >
<title>abstract_type::is_counter (1 samples, 0.02%)</title><rect x="68.0" y="453" width="0.2" height="15.0" fill="rgb(224,154,18)" rx="2" ry="2" />
<text  x="71.02" y="463.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (3 samples, 0.06%)</title><rect x="855.6" y="293" width="0.7" height="15.0" fill="rgb(234,184,29)" rx="2" ry="2" />
<text  x="858.59" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="693.0" y="469" width="1.6" height="15.0" fill="rgb(244,222,34)" rx="2" ry="2" />
<text  x="695.99" y="479.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="946.4" y="437" width="1.8" height="15.0" fill="rgb(217,174,6)" rx="2" ry="2" />
<text  x="949.44" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="479.1" y="341" width="0.5" height="15.0" fill="rgb(250,72,2)" rx="2" ry="2" />
<text  x="482.12" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (4 samples, 0.08%)</title><rect x="23.9" y="309" width="0.9" height="15.0" fill="rgb(249,113,8)" rx="2" ry="2" />
<text  x="26.94" y="319.5" ></text>
</g>
<g >
<title>schema::column_at (11 samples, 0.21%)</title><rect x="415.3" y="197" width="2.4" height="15.0" fill="rgb(218,149,14)" rx="2" ry="2" />
<text  x="418.25" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1103.9" y="421" width="0.2" height="15.0" fill="rgb(232,137,1)" rx="2" ry="2" />
<text  x="1106.87" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (2 samples, 0.04%)</title><rect x="1128.8" y="277" width="0.5" height="15.0" fill="rgb(233,93,47)" rx="2" ry="2" />
<text  x="1131.83" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (45 samples, 0.86%)</title><rect x="453.3" y="341" width="10.1" height="15.0" fill="rgb(210,178,53)" rx="2" ry="2" />
<text  x="456.26" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="677.2" y="501" width="0.3" height="15.0" fill="rgb(252,69,42)" rx="2" ry="2" />
<text  x="680.25" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="117.0" y="485" width="0.3" height="15.0" fill="rgb(236,174,23)" rx="2" ry="2" />
<text  x="120.05" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="51.6" y="325" width="0.2" height="15.0" fill="rgb(214,35,47)" rx="2" ry="2" />
<text  x="54.60" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="44.9" y="309" width="0.2" height="15.0" fill="rgb(252,71,52)" rx="2" ry="2" />
<text  x="47.86" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="543.4" y="373" width="0.3" height="15.0" fill="rgb(238,26,14)" rx="2" ry="2" />
<text  x="546.44" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (3 samples, 0.06%)</title><rect x="1115.6" y="453" width="0.6" height="15.0" fill="rgb(223,134,31)" rx="2" ry="2" />
<text  x="1118.56" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="986.7" y="325" width="0.2" height="15.0" fill="rgb(240,129,19)" rx="2" ry="2" />
<text  x="989.70" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="879.4" y="437" width="0.3" height="15.0" fill="rgb(245,93,10)" rx="2" ry="2" />
<text  x="882.43" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="852.7" y="389" width="0.2" height="15.0" fill="rgb(211,222,51)" rx="2" ry="2" />
<text  x="855.66" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (124 samples, 2.36%)</title><rect x="559.0" y="453" width="27.8" height="15.0" fill="rgb(222,99,2)" rx="2" ry="2" />
<text  x="561.96" y="463.5" >s..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="302.4" y="341" width="0.2" height="15.0" fill="rgb(211,31,52)" rx="2" ry="2" />
<text  x="305.36" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.11%)</title><rect x="502.5" y="357" width="1.4" height="15.0" fill="rgb(251,13,35)" rx="2" ry="2" />
<text  x="505.51" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="1135.6" y="517" width="0.2" height="15.0" fill="rgb(226,134,9)" rx="2" ry="2" />
<text  x="1138.58" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="758.2" y="357" width="0.7" height="15.0" fill="rgb(229,165,31)" rx="2" ry="2" />
<text  x="761.21" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="686.2" y="453" width="0.7" height="15.0" fill="rgb(241,26,33)" rx="2" ry="2" />
<text  x="689.25" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1131.8" y="69" width="0.2" height="15.0" fill="rgb(253,18,47)" rx="2" ry="2" />
<text  x="1134.75" y="79.5" ></text>
</g>
<g >
<title>ser::column_view::id (1 samples, 0.02%)</title><rect x="1124.6" y="261" width="0.2" height="15.0" fill="rgb(229,110,29)" rx="2" ry="2" />
<text  x="1127.56" y="271.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (3 samples, 0.06%)</title><rect x="844.8" y="485" width="0.7" height="15.0" fill="rgb(205,101,7)" rx="2" ry="2" />
<text  x="847.79" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (456 samples, 8.69%)</title><rect x="331.1" y="309" width="102.6" height="15.0" fill="rgb(245,57,31)" rx="2" ry="2" />
<text  x="334.14" y="319.5" >flat_mutatio..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (4 samples, 0.08%)</title><rect x="48.7" y="277" width="0.9" height="15.0" fill="rgb(247,83,17)" rx="2" ry="2" />
<text  x="51.68" y="287.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,247 samples, 23.77%)</title><rect x="161.1" y="453" width="280.5" height="15.0" fill="rgb(249,42,40)" rx="2" ry="2" />
<text  x="164.13" y="463.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="585.5" y="405" width="0.2" height="15.0" fill="rgb(228,19,20)" rx="2" ry="2" />
<text  x="588.49" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (1 samples, 0.02%)</title><rect x="71.6" y="357" width="0.2" height="15.0" fill="rgb(228,26,6)" rx="2" ry="2" />
<text  x="74.62" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.3" y="469" width="0.2" height="15.0" fill="rgb(247,188,38)" rx="2" ry="2" />
<text  x="21.32" y="479.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="278.7" y="213" width="0.7" height="15.0" fill="rgb(246,217,13)" rx="2" ry="2" />
<text  x="281.74" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (14 samples, 0.27%)</title><rect x="724.5" y="437" width="3.1" height="15.0" fill="rgb(240,156,24)" rx="2" ry="2" />
<text  x="727.48" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="636.8" y="501" width="0.4" height="15.0" fill="rgb(251,103,1)" rx="2" ry="2" />
<text  x="639.77" y="511.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (2 samples, 0.04%)</title><rect x="1012.8" y="181" width="0.4" height="15.0" fill="rgb(244,11,23)" rx="2" ry="2" />
<text  x="1015.79" y="191.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (2 samples, 0.04%)</title><rect x="82.0" y="469" width="0.4" height="15.0" fill="rgb(223,76,1)" rx="2" ry="2" />
<text  x="84.96" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="803.9" y="341" width="1.1" height="15.0" fill="rgb(217,136,48)" rx="2" ry="2" />
<text  x="806.86" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (447 samples, 8.52%)</title><rect x="445.6" y="405" width="100.5" height="15.0" fill="rgb(243,227,51)" rx="2" ry="2" />
<text  x="448.61" y="415.5" >std::_Functi..</text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (546 samples, 10.41%)</title><rect x="718.6" y="501" width="122.8" height="15.0" fill="rgb(218,176,4)" rx="2" ry="2" />
<text  x="721.63" y="511.5" >single_node_cql..</text>
</g>
<g >
<title>query::partition_slice::partition_slice (6 samples, 0.11%)</title><rect x="547.0" y="437" width="1.4" height="15.0" fill="rgb(231,14,37)" rx="2" ry="2" />
<text  x="550.04" y="447.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1152.4" y="421" width="0.9" height="15.0" fill="rgb(206,129,39)" rx="2" ry="2" />
<text  x="1155.44" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="156.2" y="469" width="1.1" height="15.0" fill="rgb(214,179,34)" rx="2" ry="2" />
<text  x="159.18" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%)</title><rect x="71.6" y="309" width="0.2" height="15.0" fill="rgb(234,7,19)" rx="2" ry="2" />
<text  x="74.62" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%)</title><rect x="737.7" y="325" width="0.7" height="15.0" fill="rgb(223,134,12)" rx="2" ry="2" />
<text  x="740.75" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="479.3" y="325" width="0.3" height="15.0" fill="rgb(238,8,46)" rx="2" ry="2" />
<text  x="482.35" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.5" y="325" width="0.6" height="15.0" fill="rgb(217,217,8)" rx="2" ry="2" />
<text  x="42.46" y="335.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.08%)</title><rect x="1122.5" y="261" width="0.9" height="15.0" fill="rgb(242,32,23)" rx="2" ry="2" />
<text  x="1125.53" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="24.2" y="277" width="0.4" height="15.0" fill="rgb(210,199,43)" rx="2" ry="2" />
<text  x="27.17" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="81.5" y="373" width="0.2" height="15.0" fill="rgb(250,198,43)" rx="2" ry="2" />
<text  x="84.52" y="383.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="523.2" y="277" width="0.2" height="15.0" fill="rgb(246,84,6)" rx="2" ry="2" />
<text  x="526.20" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.5" y="405" width="0.3" height="15.0" fill="rgb(213,33,24)" rx="2" ry="2" />
<text  x="68.55" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="682.9" y="485" width="0.4" height="15.0" fill="rgb(248,70,40)" rx="2" ry="2" />
<text  x="685.87" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="79.7" y="549" width="0.2" height="15.0" fill="rgb(224,30,43)" rx="2" ry="2" />
<text  x="82.72" y="559.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (1 samples, 0.02%)</title><rect x="77.9" y="533" width="0.2" height="15.0" fill="rgb(249,101,48)" rx="2" ry="2" />
<text  x="80.92" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%)</title><rect x="395.9" y="245" width="0.5" height="15.0" fill="rgb(238,200,32)" rx="2" ry="2" />
<text  x="398.91" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="376.8" y="181" width="0.9" height="15.0" fill="rgb(242,123,16)" rx="2" ry="2" />
<text  x="379.80" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="133" width="0.2" height="15.0" fill="rgb(210,19,14)" rx="2" ry="2" />
<text  x="57.08" y="143.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="185.0" y="277" width="0.2" height="15.0" fill="rgb(219,156,25)" rx="2" ry="2" />
<text  x="187.96" y="287.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (2 samples, 0.04%)</title><rect x="1120.1" y="277" width="0.4" height="15.0" fill="rgb(250,41,32)" rx="2" ry="2" />
<text  x="1123.06" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="131.0" y="405" width="0.7" height="15.0" fill="rgb(254,180,8)" rx="2" ry="2" />
<text  x="133.99" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.7" y="437" width="0.2" height="15.0" fill="rgb(253,149,23)" rx="2" ry="2" />
<text  x="82.72" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.9" y="533" width="0.3" height="15.0" fill="rgb(212,95,38)" rx="2" ry="2" />
<text  x="82.94" y="543.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="13.8" y="613" width="0.2" height="15.0" fill="rgb(229,28,45)" rx="2" ry="2" />
<text  x="16.82" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (4 samples, 0.08%)</title><rect x="128.3" y="421" width="0.9" height="15.0" fill="rgb(238,55,11)" rx="2" ry="2" />
<text  x="131.29" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="607.5" y="453" width="0.3" height="15.0" fill="rgb(218,198,32)" rx="2" ry="2" />
<text  x="610.53" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (5 samples, 0.10%)</title><rect x="176.4" y="325" width="1.1" height="15.0" fill="rgb(217,44,42)" rx="2" ry="2" />
<text  x="179.42" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%)</title><rect x="793.1" y="197" width="0.2" height="15.0" fill="rgb(219,191,16)" rx="2" ry="2" />
<text  x="796.07" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1157.4" y="501" width="0.9" height="15.0" fill="rgb(205,146,33)" rx="2" ry="2" />
<text  x="1160.39" y="511.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,276 samples, 24.32%)</title><rect x="850.0" y="533" width="286.9" height="15.0" fill="rgb(239,169,44)" rx="2" ry="2" />
<text  x="852.97" y="543.5" >seastar::lambda_task&lt;seastar::executio..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (54 samples, 1.03%)</title><rect x="480.5" y="341" width="12.1" height="15.0" fill="rgb(232,19,39)" rx="2" ry="2" />
<text  x="483.47" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT (1 samples, 0.02%)</title><rect x="33.4" y="293" width="0.2" height="15.0" fill="rgb(251,226,14)" rx="2" ry="2" />
<text  x="36.39" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (1 samples, 0.02%)</title><rect x="59.7" y="357" width="0.2" height="15.0" fill="rgb(244,112,7)" rx="2" ry="2" />
<text  x="62.70" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="473.7" y="357" width="0.2" height="15.0" fill="rgb(214,203,19)" rx="2" ry="2" />
<text  x="476.72" y="367.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (2 samples, 0.04%)</title><rect x="968.7" y="389" width="0.5" height="15.0" fill="rgb(230,57,4)" rx="2" ry="2" />
<text  x="971.71" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="944.9" y="405" width="0.2" height="15.0" fill="rgb(252,53,39)" rx="2" ry="2" />
<text  x="947.87" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::clustering_key_restrictions&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="646.0" y="469" width="0.2" height="15.0" fill="rgb(223,7,44)" rx="2" ry="2" />
<text  x="648.99" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="257.4" y="245" width="0.2" height="15.0" fill="rgb(227,139,12)" rx="2" ry="2" />
<text  x="260.38" y="255.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (2 samples, 0.04%)</title><rect x="35.9" y="261" width="0.4" height="15.0" fill="rgb(241,123,10)" rx="2" ry="2" />
<text  x="38.86" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="436.4" y="277" width="0.2" height="15.0" fill="rgb(205,14,7)" rx="2" ry="2" />
<text  x="439.39" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (3 samples, 0.06%)</title><rect x="737.7" y="357" width="0.7" height="15.0" fill="rgb(245,50,1)" rx="2" ry="2" />
<text  x="740.75" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1129.1" y="213" width="0.2" height="15.0" fill="rgb(254,65,4)" rx="2" ry="2" />
<text  x="1132.05" y="223.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="73.4" y="453" width="0.2" height="15.0" fill="rgb(249,78,31)" rx="2" ry="2" />
<text  x="76.42" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="624.6" y="469" width="0.5" height="15.0" fill="rgb(213,184,24)" rx="2" ry="2" />
<text  x="627.63" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="45.1" y="197" width="0.7" height="15.0" fill="rgb(209,186,31)" rx="2" ry="2" />
<text  x="48.08" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="309" width="0.2" height="15.0" fill="rgb(253,212,29)" rx="2" ry="2" />
<text  x="1169.39" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="945.8" y="373" width="0.2" height="15.0" fill="rgb(205,23,4)" rx="2" ry="2" />
<text  x="948.77" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (2 samples, 0.04%)</title><rect x="86.9" y="549" width="0.5" height="15.0" fill="rgb(207,30,1)" rx="2" ry="2" />
<text  x="89.91" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="55.7" y="149" width="0.4" height="15.0" fill="rgb(209,119,23)" rx="2" ry="2" />
<text  x="58.65" y="159.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (3 samples, 0.06%)</title><rect x="68.7" y="389" width="0.7" height="15.0" fill="rgb(207,75,52)" rx="2" ry="2" />
<text  x="71.70" y="399.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.32%)</title><rect x="814.0" y="389" width="3.8" height="15.0" fill="rgb(224,110,43)" rx="2" ry="2" />
<text  x="816.98" y="399.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (4 samples, 0.08%)</title><rect x="1156.5" y="501" width="0.9" height="15.0" fill="rgb(225,124,10)" rx="2" ry="2" />
<text  x="1159.49" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (2 samples, 0.04%)</title><rect x="821.2" y="453" width="0.4" height="15.0" fill="rgb(241,32,37)" rx="2" ry="2" />
<text  x="824.18" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="245" width="0.2" height="15.0" fill="rgb(249,38,21)" rx="2" ry="2" />
<text  x="57.08" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.11%)</title><rect x="493.5" y="293" width="1.4" height="15.0" fill="rgb(221,161,14)" rx="2" ry="2" />
<text  x="496.51" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (12 samples, 0.23%)</title><rect x="519.8" y="245" width="2.7" height="15.0" fill="rgb(205,9,0)" rx="2" ry="2" />
<text  x="522.83" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="37.2" y="341" width="0.2" height="15.0" fill="rgb(240,203,42)" rx="2" ry="2" />
<text  x="40.21" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="653.6" y="501" width="0.3" height="15.0" fill="rgb(247,157,34)" rx="2" ry="2" />
<text  x="656.64" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (5 samples, 0.10%)</title><rect x="1061.4" y="373" width="1.1" height="15.0" fill="rgb(226,83,7)" rx="2" ry="2" />
<text  x="1064.36" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (11 samples, 0.21%)</title><rect x="194.4" y="245" width="2.5" height="15.0" fill="rgb(247,71,38)" rx="2" ry="2" />
<text  x="197.41" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.3" y="389" width="0.2" height="15.0" fill="rgb(219,96,39)" rx="2" ry="2" />
<text  x="68.32" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="855.6" y="261" width="0.2" height="15.0" fill="rgb(244,55,43)" rx="2" ry="2" />
<text  x="858.59" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (1 samples, 0.02%)</title><rect x="71.6" y="373" width="0.2" height="15.0" fill="rgb(244,170,53)" rx="2" ry="2" />
<text  x="74.62" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.11%)</title><rect x="626.4" y="517" width="1.4" height="15.0" fill="rgb(239,198,1)" rx="2" ry="2" />
<text  x="629.42" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (2 samples, 0.04%)</title><rect x="82.0" y="373" width="0.4" height="15.0" fill="rgb(214,166,44)" rx="2" ry="2" />
<text  x="84.96" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="61.7" y="373" width="0.2" height="15.0" fill="rgb(226,72,8)" rx="2" ry="2" />
<text  x="64.72" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="52.5" y="277" width="0.2" height="15.0" fill="rgb(213,33,41)" rx="2" ry="2" />
<text  x="55.50" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (501 samples, 9.55%)</title><rect x="325.7" y="405" width="112.7" height="15.0" fill="rgb(250,121,0)" rx="2" ry="2" />
<text  x="328.75" y="415.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="695.0" y="485" width="0.2" height="15.0" fill="rgb(253,163,15)" rx="2" ry="2" />
<text  x="698.02" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="242.3" y="149" width="1.1" height="15.0" fill="rgb(237,151,37)" rx="2" ry="2" />
<text  x="245.31" y="159.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="419.3" y="277" width="0.2" height="15.0" fill="rgb(220,225,50)" rx="2" ry="2" />
<text  x="422.30" y="287.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%)</title><rect x="30.0" y="293" width="0.2" height="15.0" fill="rgb(218,143,10)" rx="2" ry="2" />
<text  x="33.02" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.1" y="405" width="0.2" height="15.0" fill="rgb(225,4,49)" rx="2" ry="2" />
<text  x="68.10" y="415.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="944.6" y="437" width="0.3" height="15.0" fill="rgb(216,117,37)" rx="2" ry="2" />
<text  x="947.64" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="255.1" y="197" width="0.3" height="15.0" fill="rgb(210,107,43)" rx="2" ry="2" />
<text  x="258.13" y="207.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="757.1" y="357" width="0.7" height="15.0" fill="rgb(207,122,47)" rx="2" ry="2" />
<text  x="760.09" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1087.2" y="405" width="0.2" height="15.0" fill="rgb(244,51,13)" rx="2" ry="2" />
<text  x="1090.23" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.11%)</title><rect x="238.3" y="149" width="1.3" height="15.0" fill="rgb(220,105,47)" rx="2" ry="2" />
<text  x="241.26" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (17 samples, 0.32%)</title><rect x="223.0" y="133" width="3.8" height="15.0" fill="rgb(254,220,17)" rx="2" ry="2" />
<text  x="225.97" y="143.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%)</title><rect x="107.6" y="485" width="0.5" height="15.0" fill="rgb(206,99,47)" rx="2" ry="2" />
<text  x="110.60" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="86.7" y="549" width="0.2" height="15.0" fill="rgb(230,20,6)" rx="2" ry="2" />
<text  x="89.69" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="284.4" y="229" width="0.2" height="15.0" fill="rgb(243,32,4)" rx="2" ry="2" />
<text  x="287.37" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="671.0" y="501" width="0.4" height="15.0" fill="rgb(248,24,42)" rx="2" ry="2" />
<text  x="673.95" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (3 samples, 0.06%)</title><rect x="193.5" y="277" width="0.7" height="15.0" fill="rgb(244,64,19)" rx="2" ry="2" />
<text  x="196.51" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="311.1" y="325" width="0.3" height="15.0" fill="rgb(240,51,29)" rx="2" ry="2" />
<text  x="314.13" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1019.1" y="229" width="2.0" height="15.0" fill="rgb(237,221,13)" rx="2" ry="2" />
<text  x="1022.08" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (3 samples, 0.06%)</title><rect x="604.8" y="469" width="0.7" height="15.0" fill="rgb(225,21,17)" rx="2" ry="2" />
<text  x="607.84" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (37 samples, 0.71%)</title><rect x="492.8" y="325" width="8.4" height="15.0" fill="rgb(250,103,23)" rx="2" ry="2" />
<text  x="495.84" y="335.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.6" y="245" width="0.2" height="15.0" fill="rgb(233,176,41)" rx="2" ry="2" />
<text  x="1127.56" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="18.5" y="277" width="0.3" height="15.0" fill="rgb(208,180,34)" rx="2" ry="2" />
<text  x="21.55" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="564.6" y="293" width="0.2" height="15.0" fill="rgb(209,21,11)" rx="2" ry="2" />
<text  x="567.58" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (54 samples, 1.03%)</title><rect x="25.1" y="341" width="12.1" height="15.0" fill="rgb(254,29,16)" rx="2" ry="2" />
<text  x="28.07" y="351.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="101.8" y="469" width="0.2" height="15.0" fill="rgb(230,31,54)" rx="2" ry="2" />
<text  x="104.76" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (7 samples, 0.13%)</title><rect x="68.5" y="437" width="1.5" height="15.0" fill="rgb(214,83,28)" rx="2" ry="2" />
<text  x="71.47" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="668.9" y="517" width="0.3" height="15.0" fill="rgb(237,72,34)" rx="2" ry="2" />
<text  x="671.93" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="17.9" y="485" width="0.2" height="15.0" fill="rgb(244,4,16)" rx="2" ry="2" />
<text  x="20.87" y="495.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="952.1" y="405" width="2.0" height="15.0" fill="rgb(240,96,47)" rx="2" ry="2" />
<text  x="955.07" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="687.8" y="533" width="0.2" height="15.0" fill="rgb(218,174,43)" rx="2" ry="2" />
<text  x="690.82" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.0" y="277" width="0.3" height="15.0" fill="rgb(248,153,44)" rx="2" ry="2" />
<text  x="53.03" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="573.1" y="341" width="0.5" height="15.0" fill="rgb(254,109,13)" rx="2" ry="2" />
<text  x="576.13" y="351.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="835.3" y="389" width="0.3" height="15.0" fill="rgb(223,141,0)" rx="2" ry="2" />
<text  x="838.35" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (10 samples, 0.19%)</title><rect x="725.4" y="389" width="2.2" height="15.0" fill="rgb(248,220,41)" rx="2" ry="2" />
<text  x="728.38" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%)</title><rect x="198.5" y="245" width="0.9" height="15.0" fill="rgb(230,90,13)" rx="2" ry="2" />
<text  x="201.46" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="931.2" y="437" width="0.2" height="15.0" fill="rgb(213,109,5)" rx="2" ry="2" />
<text  x="934.15" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (4 samples, 0.08%)</title><rect x="1128.4" y="309" width="0.9" height="15.0" fill="rgb(211,4,30)" rx="2" ry="2" />
<text  x="1131.38" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="17.4" y="597" width="0.2" height="15.0" fill="rgb(220,150,50)" rx="2" ry="2" />
<text  x="20.42" y="607.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%)</title><rect x="991.0" y="309" width="0.2" height="15.0" fill="rgb(231,117,48)" rx="2" ry="2" />
<text  x="993.97" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_role_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.6" y="405" width="0.3" height="15.0" fill="rgb(246,120,17)" rx="2" ry="2" />
<text  x="67.65" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="209.3" y="229" width="0.2" height="15.0" fill="rgb(230,212,54)" rx="2" ry="2" />
<text  x="212.25" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.2" y="165" width="0.3" height="15.0" fill="rgb(252,145,51)" rx="2" ry="2" />
<text  x="60.23" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%)</title><rect x="848.8" y="517" width="0.7" height="15.0" fill="rgb(230,146,52)" rx="2" ry="2" />
<text  x="851.84" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.11%)</title><rect x="626.4" y="501" width="1.4" height="15.0" fill="rgb(211,94,5)" rx="2" ry="2" />
<text  x="629.42" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="889.1" y="293" width="0.7" height="15.0" fill="rgb(205,137,43)" rx="2" ry="2" />
<text  x="892.10" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (553 samples, 10.54%)</title><rect x="171.7" y="357" width="124.4" height="15.0" fill="rgb(240,63,4)" rx="2" ry="2" />
<text  x="174.70" y="367.5" >mutation_reader..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="120.6" y="437" width="0.3" height="15.0" fill="rgb(213,216,9)" rx="2" ry="2" />
<text  x="123.65" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (8 samples, 0.15%)</title><rect x="808.1" y="373" width="1.8" height="15.0" fill="rgb(222,166,3)" rx="2" ry="2" />
<text  x="811.14" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="825.7" y="469" width="0.2" height="15.0" fill="rgb(248,72,36)" rx="2" ry="2" />
<text  x="828.68" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="105.6" y="373" width="0.2" height="15.0" fill="rgb(229,10,52)" rx="2" ry="2" />
<text  x="108.58" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (37 samples, 0.71%)</title><rect x="1065.6" y="309" width="8.4" height="15.0" fill="rgb(254,88,48)" rx="2" ry="2" />
<text  x="1068.64" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (247 samples, 4.71%)</title><rect x="982.4" y="357" width="55.6" height="15.0" fill="rgb(208,166,30)" rx="2" ry="2" />
<text  x="985.43" y="367.5" >servi..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1169.1" y="485" width="0.2" height="15.0" fill="rgb(229,86,36)" rx="2" ry="2" />
<text  x="1172.09" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (192 samples, 3.66%)</title><rect x="766.8" y="421" width="43.1" height="15.0" fill="rgb(225,83,54)" rx="2" ry="2" />
<text  x="769.76" y="431.5" >std:..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (269 samples, 5.13%)</title><rect x="877.2" y="453" width="60.5" height="15.0" fill="rgb(252,122,14)" rx="2" ry="2" />
<text  x="880.18" y="463.5" >cql3::..</text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="256.9" y="229" width="0.3" height="15.0" fill="rgb(232,152,44)" rx="2" ry="2" />
<text  x="259.93" y="239.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="192.2" y="277" width="0.2" height="15.0" fill="rgb(240,137,30)" rx="2" ry="2" />
<text  x="195.16" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="129.6" y="437" width="0.7" height="15.0" fill="rgb(229,137,32)" rx="2" ry="2" />
<text  x="132.64" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="39.0" y="277" width="0.2" height="15.0" fill="rgb(213,35,4)" rx="2" ry="2" />
<text  x="42.01" y="287.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="10.2" y="629" width="0.5" height="15.0" fill="rgb(206,147,49)" rx="2" ry="2" />
<text  x="13.22" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (5 samples, 0.10%)</title><rect x="568.9" y="309" width="1.1" height="15.0" fill="rgb(242,80,1)" rx="2" ry="2" />
<text  x="571.85" y="319.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="855.6" y="341" width="2.0" height="15.0" fill="rgb(222,183,54)" rx="2" ry="2" />
<text  x="858.59" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="41.9" y="341" width="0.5" height="15.0" fill="rgb(254,115,52)" rx="2" ry="2" />
<text  x="44.93" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.11%)</title><rect x="815.8" y="325" width="1.3" height="15.0" fill="rgb(242,160,43)" rx="2" ry="2" />
<text  x="818.78" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (5 samples, 0.10%)</title><rect x="787.0" y="245" width="1.1" height="15.0" fill="rgb(220,200,38)" rx="2" ry="2" />
<text  x="790.00" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (612 samples, 11.66%)</title><rect x="949.8" y="421" width="137.6" height="15.0" fill="rgb(250,32,4)" rx="2" ry="2" />
<text  x="952.82" y="431.5" >service::storage_..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="79.7" y="469" width="0.2" height="15.0" fill="rgb(223,154,49)" rx="2" ry="2" />
<text  x="82.72" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="22.4" y="373" width="0.2" height="15.0" fill="rgb(249,171,38)" rx="2" ry="2" />
<text  x="25.37" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="512.2" y="309" width="0.2" height="15.0" fill="rgb(227,5,52)" rx="2" ry="2" />
<text  x="515.18" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="862.8" y="469" width="0.2" height="15.0" fill="rgb(211,67,7)" rx="2" ry="2" />
<text  x="865.78" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.9" y="581" width="0.2" height="15.0" fill="rgb(224,169,29)" rx="2" ry="2" />
<text  x="13.90" y="591.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="106.0" y="437" width="0.3" height="15.0" fill="rgb(225,52,47)" rx="2" ry="2" />
<text  x="109.03" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="820.7" y="453" width="0.5" height="15.0" fill="rgb(238,204,12)" rx="2" ry="2" />
<text  x="823.73" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="624.4" y="453" width="0.2" height="15.0" fill="rgb(229,206,44)" rx="2" ry="2" />
<text  x="627.40" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="80.8" y="437" width="0.3" height="15.0" fill="rgb(243,1,30)" rx="2" ry="2" />
<text  x="83.84" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="565.7" y="325" width="0.2" height="15.0" fill="rgb(248,90,7)" rx="2" ry="2" />
<text  x="568.70" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="548.6" y="437" width="0.5" height="15.0" fill="rgb(232,194,31)" rx="2" ry="2" />
<text  x="551.61" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (30 samples, 0.57%)</title><rect x="1067.2" y="277" width="6.8" height="15.0" fill="rgb(226,213,41)" rx="2" ry="2" />
<text  x="1070.21" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (77 samples, 1.47%)</title><rect x="646.9" y="533" width="17.3" height="15.0" fill="rgb(212,193,37)" rx="2" ry="2" />
<text  x="649.89" y="543.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a21b1fbb2f481671c80560d96a8acc1cf916b468] (1 samples, 0.02%)</title><rect x="458.7" y="293" width="0.2" height="15.0" fill="rgb(246,171,16)" rx="2" ry="2" />
<text  x="461.66" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="427.4" y="197" width="0.2" height="15.0" fill="rgb(246,143,49)" rx="2" ry="2" />
<text  x="430.40" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="684.7" y="469" width="0.4" height="15.0" fill="rgb(214,194,19)" rx="2" ry="2" />
<text  x="687.67" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="1128.4" y="325" width="1.1" height="15.0" fill="rgb(241,80,36)" rx="2" ry="2" />
<text  x="1131.38" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="105.4" y="453" width="0.2" height="15.0" fill="rgb(219,56,39)" rx="2" ry="2" />
<text  x="108.35" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="174.6" y="341" width="0.7" height="15.0" fill="rgb(238,216,7)" rx="2" ry="2" />
<text  x="177.62" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="151.0" y="453" width="0.2" height="15.0" fill="rgb(252,15,16)" rx="2" ry="2" />
<text  x="154.01" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%)</title><rect x="651.6" y="485" width="0.5" height="15.0" fill="rgb(214,194,40)" rx="2" ry="2" />
<text  x="654.61" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1136.9" y="245" width="0.3" height="15.0" fill="rgb(221,123,49)" rx="2" ry="2" />
<text  x="1139.93" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (58 samples, 1.11%)</title><rect x="177.5" y="325" width="13.1" height="15.0" fill="rgb(225,59,14)" rx="2" ry="2" />
<text  x="180.54" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1082.5" y="373" width="0.2" height="15.0" fill="rgb(205,82,21)" rx="2" ry="2" />
<text  x="1085.50" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%)</title><rect x="827.7" y="453" width="2.7" height="15.0" fill="rgb(239,81,21)" rx="2" ry="2" />
<text  x="830.70" y="463.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="79.0" y="629" width="0.3" height="15.0" fill="rgb(239,62,33)" rx="2" ry="2" />
<text  x="82.04" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (5 samples, 0.10%)</title><rect x="645.8" y="517" width="1.1" height="15.0" fill="rgb(226,164,46)" rx="2" ry="2" />
<text  x="648.77" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="697.3" y="501" width="0.2" height="15.0" fill="rgb(231,122,39)" rx="2" ry="2" />
<text  x="700.27" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="849.1" y="341" width="0.2" height="15.0" fill="rgb(233,90,1)" rx="2" ry="2" />
<text  x="852.07" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="436.6" y="293" width="0.5" height="15.0" fill="rgb(215,170,50)" rx="2" ry="2" />
<text  x="439.62" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="46.7" y="213" width="0.2" height="15.0" fill="rgb(230,8,17)" rx="2" ry="2" />
<text  x="49.66" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="49.8" y="293" width="0.2" height="15.0" fill="rgb(230,138,5)" rx="2" ry="2" />
<text  x="52.81" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (13 samples, 0.25%)</title><rect x="971.9" y="341" width="2.9" height="15.0" fill="rgb(232,46,14)" rx="2" ry="2" />
<text  x="974.86" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (15 samples, 0.29%)</title><rect x="234.9" y="69" width="3.4" height="15.0" fill="rgb(237,127,45)" rx="2" ry="2" />
<text  x="237.89" y="79.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="924.9" y="373" width="0.9" height="15.0" fill="rgb(245,51,45)" rx="2" ry="2" />
<text  x="927.85" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="840.1" y="469" width="1.1" height="15.0" fill="rgb(232,218,14)" rx="2" ry="2" />
<text  x="843.07" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%)</title><rect x="265.5" y="261" width="0.7" height="15.0" fill="rgb(230,35,38)" rx="2" ry="2" />
<text  x="268.48" y="271.5" ></text>
</g>
<g >
<title>db::system_keyspace::peers (1 samples, 0.02%)</title><rect x="18.3" y="309" width="0.2" height="15.0" fill="rgb(236,153,33)" rx="2" ry="2" />
<text  x="21.32" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.1" y="293" width="0.7" height="15.0" fill="rgb(235,74,29)" rx="2" ry="2" />
<text  x="48.08" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (7 samples, 0.13%)</title><rect x="590.7" y="453" width="1.5" height="15.0" fill="rgb(225,120,39)" rx="2" ry="2" />
<text  x="593.67" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="712.8" y="533" width="0.2" height="15.0" fill="rgb(247,123,9)" rx="2" ry="2" />
<text  x="715.78" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="845.7" y="517" width="0.2" height="15.0" fill="rgb(211,40,6)" rx="2" ry="2" />
<text  x="848.69" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (1 samples, 0.02%)</title><rect x="851.1" y="421" width="0.2" height="15.0" fill="rgb(252,86,2)" rx="2" ry="2" />
<text  x="854.09" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%)</title><rect x="687.4" y="533" width="0.2" height="15.0" fill="rgb(243,139,48)" rx="2" ry="2" />
<text  x="690.37" y="543.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (267 samples, 5.09%)</title><rect x="760.0" y="437" width="60.1" height="15.0" fill="rgb(237,29,43)" rx="2" ry="2" />
<text  x="763.01" y="447.5" >servic..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="405" width="8.1" height="15.0" fill="rgb(232,91,16)" rx="2" ry="2" />
<text  x="1130.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1034.2" y="245" width="0.9" height="15.0" fill="rgb(248,152,25)" rx="2" ry="2" />
<text  x="1037.15" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,803 samples, 91.54%)</title><rect x="87.6" y="549" width="1080.1" height="15.0" fill="rgb(248,23,42)" rx="2" ry="2" />
<text  x="90.59" y="559.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (14 samples, 0.27%)</title><rect x="55.0" y="309" width="3.1" height="15.0" fill="rgb(215,58,35)" rx="2" ry="2" />
<text  x="57.98" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="98.8" y="485" width="0.3" height="15.0" fill="rgb(240,193,18)" rx="2" ry="2" />
<text  x="101.83" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (2 samples, 0.04%)</title><rect x="32.9" y="293" width="0.5" height="15.0" fill="rgb(247,99,17)" rx="2" ry="2" />
<text  x="35.94" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (16 samples, 0.30%)</title><rect x="755.3" y="389" width="3.6" height="15.0" fill="rgb(219,218,2)" rx="2" ry="2" />
<text  x="758.29" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="70.9" y="373" width="0.3" height="15.0" fill="rgb(253,20,30)" rx="2" ry="2" />
<text  x="73.95" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="252.7" y="165" width="0.4" height="15.0" fill="rgb(221,120,47)" rx="2" ry="2" />
<text  x="255.66" y="175.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="794.4" y="133" width="0.9" height="15.0" fill="rgb(230,144,12)" rx="2" ry="2" />
<text  x="797.42" y="143.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="101.8" y="373" width="0.2" height="15.0" fill="rgb(231,166,3)" rx="2" ry="2" />
<text  x="104.76" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%)</title><rect x="40.8" y="357" width="0.2" height="15.0" fill="rgb(231,227,49)" rx="2" ry="2" />
<text  x="43.81" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (10 samples, 0.19%)</title><rect x="1132.7" y="245" width="2.2" height="15.0" fill="rgb(210,97,13)" rx="2" ry="2" />
<text  x="1135.65" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1101.6" y="357" width="0.2" height="15.0" fill="rgb(224,172,24)" rx="2" ry="2" />
<text  x="1104.62" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (33 samples, 0.63%)</title><rect x="587.3" y="469" width="7.4" height="15.0" fill="rgb(216,79,23)" rx="2" ry="2" />
<text  x="590.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="926.0" y="421" width="0.2" height="15.0" fill="rgb(234,223,3)" rx="2" ry="2" />
<text  x="928.98" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (4 samples, 0.08%)</title><rect x="50.7" y="325" width="0.9" height="15.0" fill="rgb(241,74,5)" rx="2" ry="2" />
<text  x="53.71" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (37 samples, 0.71%)</title><rect x="850.6" y="501" width="8.4" height="15.0" fill="rgb(230,200,5)" rx="2" ry="2" />
<text  x="853.64" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="632.3" y="517" width="0.2" height="15.0" fill="rgb(207,58,4)" rx="2" ry="2" />
<text  x="635.27" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (4 samples, 0.08%)</title><rect x="40.4" y="389" width="0.9" height="15.0" fill="rgb(213,117,38)" rx="2" ry="2" />
<text  x="43.36" y="399.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="192.6" y="261" width="0.2" height="15.0" fill="rgb(245,69,30)" rx="2" ry="2" />
<text  x="195.61" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="673.0" y="485" width="1.1" height="15.0" fill="rgb(224,59,4)" rx="2" ry="2" />
<text  x="675.98" y="495.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%)</title><rect x="1083.2" y="373" width="0.2" height="15.0" fill="rgb(238,96,6)" rx="2" ry="2" />
<text  x="1086.18" y="383.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%)</title><rect x="19.4" y="533" width="0.3" height="15.0" fill="rgb(211,88,23)" rx="2" ry="2" />
<text  x="22.45" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="799.1" y="261" width="0.5" height="15.0" fill="rgb(234,195,22)" rx="2" ry="2" />
<text  x="802.14" y="271.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="899.0" y="389" width="0.2" height="15.0" fill="rgb(233,40,28)" rx="2" ry="2" />
<text  x="901.99" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.42%)</title><rect x="151.2" y="469" width="5.0" height="15.0" fill="rgb(238,148,7)" rx="2" ry="2" />
<text  x="154.23" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="292.0" y="309" width="0.2" height="15.0" fill="rgb(252,194,2)" rx="2" ry="2" />
<text  x="295.01" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="187.2" y="261" width="0.5" height="15.0" fill="rgb(248,84,12)" rx="2" ry="2" />
<text  x="190.21" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="561.4" y="357" width="0.3" height="15.0" fill="rgb(211,171,15)" rx="2" ry="2" />
<text  x="564.43" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="554.7" y="421" width="0.4" height="15.0" fill="rgb(228,163,45)" rx="2" ry="2" />
<text  x="557.68" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (31 samples, 0.59%)</title><rect x="702.7" y="501" width="6.9" height="15.0" fill="rgb(249,136,39)" rx="2" ry="2" />
<text  x="705.66" y="511.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7 samples, 0.13%)</title><rect x="678.8" y="485" width="1.6" height="15.0" fill="rgb(207,126,15)" rx="2" ry="2" />
<text  x="681.82" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="67.6" y="469" width="0.2" height="15.0" fill="rgb(250,180,20)" rx="2" ry="2" />
<text  x="70.57" y="479.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="77.2" y="485" width="0.3" height="15.0" fill="rgb(229,94,0)" rx="2" ry="2" />
<text  x="80.24" y="495.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="851.5" y="309" width="0.3" height="15.0" fill="rgb(252,228,40)" rx="2" ry="2" />
<text  x="854.54" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="538.0" y="341" width="1.2" height="15.0" fill="rgb(222,168,19)" rx="2" ry="2" />
<text  x="541.04" y="351.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="18.8" y="485" width="0.2" height="15.0" fill="rgb(235,220,17)" rx="2" ry="2" />
<text  x="21.77" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="81.3" y="341" width="0.2" height="15.0" fill="rgb(205,5,51)" rx="2" ry="2" />
<text  x="84.29" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="740.9" y="309" width="0.2" height="15.0" fill="rgb(220,94,11)" rx="2" ry="2" />
<text  x="743.89" y="319.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1110.4" y="437" width="2.0" height="15.0" fill="rgb(215,95,48)" rx="2" ry="2" />
<text  x="1113.39" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1119.6" y="453" width="7.9" height="15.0" fill="rgb(234,43,5)" rx="2" ry="2" />
<text  x="1122.61" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (8 samples, 0.15%)</title><rect x="296.1" y="357" width="1.8" height="15.0" fill="rgb(240,153,3)" rx="2" ry="2" />
<text  x="299.06" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="969.4" y="389" width="0.2" height="15.0" fill="rgb(209,99,28)" rx="2" ry="2" />
<text  x="972.38" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="73.4" y="389" width="0.2" height="15.0" fill="rgb(231,132,26)" rx="2" ry="2" />
<text  x="76.42" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="79.7" y="245" width="0.2" height="15.0" fill="rgb(252,16,41)" rx="2" ry="2" />
<text  x="82.72" y="255.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="793.3" y="181" width="0.4" height="15.0" fill="rgb(250,36,16)" rx="2" ry="2" />
<text  x="796.29" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="641.0" y="501" width="0.3" height="15.0" fill="rgb(214,64,53)" rx="2" ry="2" />
<text  x="644.04" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.0" y="421" width="0.2" height="15.0" fill="rgb(216,67,35)" rx="2" ry="2" />
<text  x="69.00" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="585.7" y="421" width="0.5" height="15.0" fill="rgb(220,10,5)" rx="2" ry="2" />
<text  x="588.72" y="431.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="849.1" y="325" width="0.2" height="15.0" fill="rgb(243,167,17)" rx="2" ry="2" />
<text  x="852.07" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="582.8" y="373" width="0.7" height="15.0" fill="rgb(232,68,14)" rx="2" ry="2" />
<text  x="585.80" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (1 samples, 0.02%)</title><rect x="10.7" y="453" width="0.2" height="15.0" fill="rgb(251,36,15)" rx="2" ry="2" />
<text  x="13.67" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (3 samples, 0.06%)</title><rect x="253.6" y="181" width="0.6" height="15.0" fill="rgb(227,71,19)" rx="2" ry="2" />
<text  x="256.56" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="902.8" y="341" width="0.5" height="15.0" fill="rgb(207,93,52)" rx="2" ry="2" />
<text  x="905.81" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="833.8" y="373" width="0.2" height="15.0" fill="rgb(220,138,19)" rx="2" ry="2" />
<text  x="836.77" y="383.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="590.7" y="437" width="1.3" height="15.0" fill="rgb(211,210,19)" rx="2" ry="2" />
<text  x="593.67" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.3" y="341" width="0.2" height="15.0" fill="rgb(243,208,19)" rx="2" ry="2" />
<text  x="62.25" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (199 samples, 3.79%)</title><rect x="22.6" y="453" width="44.7" height="15.0" fill="rgb(238,132,13)" rx="2" ry="2" />
<text  x="25.59" y="463.5" >seas..</text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="75.9" y="357" width="0.2" height="15.0" fill="rgb(207,26,30)" rx="2" ry="2" />
<text  x="78.89" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="107.2" y="357" width="0.2" height="15.0" fill="rgb(245,209,17)" rx="2" ry="2" />
<text  x="110.15" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="687.1" y="453" width="0.3" height="15.0" fill="rgb(217,70,40)" rx="2" ry="2" />
<text  x="690.15" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="61.1" y="293" width="0.2" height="15.0" fill="rgb(223,70,34)" rx="2" ry="2" />
<text  x="64.05" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="809.0" y="309" width="0.5" height="15.0" fill="rgb(245,217,41)" rx="2" ry="2" />
<text  x="812.04" y="319.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.9" y="533" width="0.2" height="15.0" fill="rgb(233,29,18)" rx="2" ry="2" />
<text  x="13.90" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1153.1" y="389" width="0.2" height="15.0" fill="rgb(217,93,4)" rx="2" ry="2" />
<text  x="1156.12" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="855.8" y="245" width="0.2" height="15.0" fill="rgb(235,201,54)" rx="2" ry="2" />
<text  x="858.81" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="271.1" y="245" width="0.2" height="15.0" fill="rgb(218,93,45)" rx="2" ry="2" />
<text  x="274.10" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%)</title><rect x="1016.6" y="245" width="0.5" height="15.0" fill="rgb(236,112,27)" rx="2" ry="2" />
<text  x="1019.61" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::file&gt;, seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="631.4" y="533" width="0.2" height="15.0" fill="rgb(209,7,33)" rx="2" ry="2" />
<text  x="634.37" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (13 samples, 0.25%)</title><rect x="59.0" y="389" width="2.9" height="15.0" fill="rgb(220,204,54)" rx="2" ry="2" />
<text  x="62.03" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="67.6" y="437" width="0.2" height="15.0" fill="rgb(207,27,29)" rx="2" ry="2" />
<text  x="70.57" y="447.5" ></text>
</g>
<g >
<title>mutation::consume&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="105.6" y="309" width="0.2" height="15.0" fill="rgb(231,64,49)" rx="2" ry="2" />
<text  x="108.58" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="351.4" y="197" width="0.2" height="15.0" fill="rgb(212,104,30)" rx="2" ry="2" />
<text  x="354.38" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="79.7" y="229" width="0.2" height="15.0" fill="rgb(224,72,50)" rx="2" ry="2" />
<text  x="82.72" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="79.9" y="421" width="0.3" height="15.0" fill="rgb(228,42,28)" rx="2" ry="2" />
<text  x="82.94" y="431.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="105.4" y="309" width="0.2" height="15.0" fill="rgb(220,7,38)" rx="2" ry="2" />
<text  x="108.35" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="669.6" y="485" width="0.2" height="15.0" fill="rgb(240,59,8)" rx="2" ry="2" />
<text  x="672.60" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1021.8" y="277" width="0.4" height="15.0" fill="rgb(208,146,40)" rx="2" ry="2" />
<text  x="1024.78" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="662.9" y="469" width="0.2" height="15.0" fill="rgb(213,120,30)" rx="2" ry="2" />
<text  x="665.86" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="80.4" y="565" width="2.7" height="15.0" fill="rgb(241,222,6)" rx="2" ry="2" />
<text  x="83.39" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="44.0" y="325" width="0.4" height="15.0" fill="rgb(224,56,54)" rx="2" ry="2" />
<text  x="46.96" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="57.2" y="117" width="0.3" height="15.0" fill="rgb(246,91,35)" rx="2" ry="2" />
<text  x="60.23" y="127.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%)</title><rect x="132.1" y="453" width="0.2" height="15.0" fill="rgb(233,89,49)" rx="2" ry="2" />
<text  x="135.12" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="106.0" y="501" width="0.5" height="15.0" fill="rgb(223,73,16)" rx="2" ry="2" />
<text  x="109.03" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="690.1" y="501" width="0.4" height="15.0" fill="rgb(239,211,10)" rx="2" ry="2" />
<text  x="693.07" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="975.0" y="373" width="0.5" height="15.0" fill="rgb(205,7,35)" rx="2" ry="2" />
<text  x="978.00" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (10 samples, 0.19%)</title><rect x="935.2" y="437" width="2.2" height="15.0" fill="rgb(249,20,14)" rx="2" ry="2" />
<text  x="938.20" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="938.6" y="421" width="0.2" height="15.0" fill="rgb(239,98,18)" rx="2" ry="2" />
<text  x="941.57" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.13%)</title><rect x="420.4" y="245" width="1.6" height="15.0" fill="rgb(214,25,9)" rx="2" ry="2" />
<text  x="423.43" y="255.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (3 samples, 0.06%)</title><rect x="70.9" y="405" width="0.7" height="15.0" fill="rgb(206,207,15)" rx="2" ry="2" />
<text  x="73.95" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1138.5" y="533" width="0.4" height="15.0" fill="rgb(231,169,27)" rx="2" ry="2" />
<text  x="1141.50" y="543.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1118.5" y="469" width="0.2" height="15.0" fill="rgb(224,37,20)" rx="2" ry="2" />
<text  x="1121.48" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.11%)</title><rect x="154.8" y="453" width="1.4" height="15.0" fill="rgb(224,229,36)" rx="2" ry="2" />
<text  x="157.83" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.6" y="373" width="0.3" height="15.0" fill="rgb(250,142,16)" rx="2" ry="2" />
<text  x="67.65" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.11%)</title><rect x="577.8" y="389" width="1.4" height="15.0" fill="rgb(216,56,43)" rx="2" ry="2" />
<text  x="580.85" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="818.5" y="341" width="1.3" height="15.0" fill="rgb(241,86,41)" rx="2" ry="2" />
<text  x="821.48" y="351.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1179.4" y="661" width="0.3" height="15.0" fill="rgb(218,101,9)" rx="2" ry="2" />
<text  x="1182.43" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (9 samples, 0.17%)</title><rect x="743.4" y="325" width="2.0" height="15.0" fill="rgb(235,106,39)" rx="2" ry="2" />
<text  x="746.37" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (58 samples, 1.11%)</title><rect x="268.6" y="277" width="13.1" height="15.0" fill="rgb(238,56,38)" rx="2" ry="2" />
<text  x="271.62" y="287.5" ></text>
</g>
<g >
<title>__strlen_avx2 (2 samples, 0.04%)</title><rect x="26.4" y="293" width="0.5" height="15.0" fill="rgb(254,98,30)" rx="2" ry="2" />
<text  x="29.42" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="903.7" y="405" width="0.2" height="15.0" fill="rgb(221,48,41)" rx="2" ry="2" />
<text  x="906.71" y="415.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="18.5" y="453" width="0.3" height="15.0" fill="rgb(213,218,10)" rx="2" ry="2" />
<text  x="21.55" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%)</title><rect x="106.3" y="469" width="0.2" height="15.0" fill="rgb(223,22,2)" rx="2" ry="2" />
<text  x="109.25" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="848.8" y="533" width="0.7" height="15.0" fill="rgb(208,155,23)" rx="2" ry="2" />
<text  x="851.84" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1082.3" y="373" width="0.2" height="15.0" fill="rgb(227,114,27)" rx="2" ry="2" />
<text  x="1085.28" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="41.9" y="325" width="0.5" height="15.0" fill="rgb(238,169,31)" rx="2" ry="2" />
<text  x="44.93" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="77.7" y="517" width="0.2" height="15.0" fill="rgb(231,170,53)" rx="2" ry="2" />
<text  x="80.69" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::process_sstable_dir (1 samples, 0.02%)</title><rect x="687.1" y="533" width="0.3" height="15.0" fill="rgb(238,32,22)" rx="2" ry="2" />
<text  x="690.15" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="331.8" y="293" width="0.2" height="15.0" fill="rgb(224,48,22)" rx="2" ry="2" />
<text  x="334.82" y="303.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="687.4" y="517" width="0.2" height="15.0" fill="rgb(205,186,38)" rx="2" ry="2" />
<text  x="690.37" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="326.9" y="325" width="0.4" height="15.0" fill="rgb(226,131,12)" rx="2" ry="2" />
<text  x="329.87" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1166.8" y="421" width="0.3" height="15.0" fill="rgb(214,51,53)" rx="2" ry="2" />
<text  x="1169.84" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (570 samples, 10.86%)</title><rect x="171.0" y="373" width="128.2" height="15.0" fill="rgb(232,68,21)" rx="2" ry="2" />
<text  x="174.02" y="383.5" >mutation_fragmen..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="469" width="0.7" height="15.0" fill="rgb(244,199,8)" rx="2" ry="2" />
<text  x="689.25" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="127.4" y="421" width="0.4" height="15.0" fill="rgb(212,21,13)" rx="2" ry="2" />
<text  x="130.39" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="740.9" y="325" width="0.2" height="15.0" fill="rgb(250,109,25)" rx="2" ry="2" />
<text  x="743.89" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="82.2" y="341" width="0.2" height="15.0" fill="rgb(209,194,0)" rx="2" ry="2" />
<text  x="85.19" y="351.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.11%)</title><rect x="1130.0" y="197" width="1.3" height="15.0" fill="rgb(212,144,2)" rx="2" ry="2" />
<text  x="1132.95" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="47.1" y="341" width="0.2" height="15.0" fill="rgb(241,196,20)" rx="2" ry="2" />
<text  x="50.11" y="351.5" ></text>
</g>
<g >
<title>dht::tri_compare (13 samples, 0.25%)</title><rect x="1071.0" y="261" width="3.0" height="15.0" fill="rgb(206,81,14)" rx="2" ry="2" />
<text  x="1074.03" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%)</title><rect x="79.7" y="213" width="0.2" height="15.0" fill="rgb(242,101,51)" rx="2" ry="2" />
<text  x="82.72" y="223.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (57 samples, 1.09%)</title><rect x="906.6" y="421" width="12.9" height="15.0" fill="rgb(230,190,17)" rx="2" ry="2" />
<text  x="909.64" y="431.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="982.2" y="357" width="0.2" height="15.0" fill="rgb(216,175,45)" rx="2" ry="2" />
<text  x="985.20" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1088.6" y="437" width="0.2" height="15.0" fill="rgb(244,24,14)" rx="2" ry="2" />
<text  x="1091.57" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (52 samples, 0.99%)</title><rect x="1146.6" y="517" width="11.7" height="15.0" fill="rgb(253,145,27)" rx="2" ry="2" />
<text  x="1149.60" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%)</title><rect x="434.4" y="309" width="0.4" height="15.0" fill="rgb(222,169,32)" rx="2" ry="2" />
<text  x="437.37" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%)</title><rect x="1082.7" y="373" width="0.5" height="15.0" fill="rgb(250,185,12)" rx="2" ry="2" />
<text  x="1085.73" y="383.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="79.7" y="261" width="0.2" height="15.0" fill="rgb(213,151,22)" rx="2" ry="2" />
<text  x="82.72" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%)</title><rect x="106.7" y="421" width="0.2" height="15.0" fill="rgb(241,93,16)" rx="2" ry="2" />
<text  x="109.70" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="521.9" y="213" width="0.4" height="15.0" fill="rgb(221,102,50)" rx="2" ry="2" />
<text  x="524.85" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="261.0" y="213" width="0.2" height="15.0" fill="rgb(236,71,32)" rx="2" ry="2" />
<text  x="263.98" y="223.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="975.9" y="357" width="2.5" height="15.0" fill="rgb(218,11,33)" rx="2" ry="2" />
<text  x="978.90" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%)</title><rect x="80.4" y="613" width="2.7" height="15.0" fill="rgb(207,146,43)" rx="2" ry="2" />
<text  x="83.39" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="576.0" y="373" width="0.5" height="15.0" fill="rgb(245,161,51)" rx="2" ry="2" />
<text  x="579.05" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1018.0" y="245" width="0.2" height="15.0" fill="rgb(213,11,50)" rx="2" ry="2" />
<text  x="1020.96" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="883.9" y="341" width="0.2" height="15.0" fill="rgb(206,64,27)" rx="2" ry="2" />
<text  x="886.92" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1119.6" y="469" width="7.9" height="15.0" fill="rgb(213,147,33)" rx="2" ry="2" />
<text  x="1122.61" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="41.9" y="357" width="0.5" height="15.0" fill="rgb(246,170,48)" rx="2" ry="2" />
<text  x="44.93" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="739.8" y="373" width="0.2" height="15.0" fill="rgb(218,0,40)" rx="2" ry="2" />
<text  x="742.77" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (652 samples, 12.43%)</title><rect x="943.3" y="453" width="146.6" height="15.0" fill="rgb(242,82,41)" rx="2" ry="2" />
<text  x="946.30" y="463.5" >cql3::statements::..</text>
</g>
<g >
<title>row_cache::make_reader (46 samples, 0.88%)</title><rect x="533.1" y="373" width="10.3" height="15.0" fill="rgb(225,175,15)" rx="2" ry="2" />
<text  x="536.10" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%)</title><rect x="260.3" y="181" width="0.5" height="15.0" fill="rgb(226,167,17)" rx="2" ry="2" />
<text  x="263.30" y="191.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (39 samples, 0.74%)</title><rect x="736.6" y="421" width="8.8" height="15.0" fill="rgb(248,145,3)" rx="2" ry="2" />
<text  x="739.62" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="765.6" y="373" width="0.3" height="15.0" fill="rgb(242,206,4)" rx="2" ry="2" />
<text  x="768.63" y="383.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%)</title><rect x="18.5" y="501" width="0.5" height="15.0" fill="rgb(213,151,15)" rx="2" ry="2" />
<text  x="21.55" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="446.1" y="389" width="0.2" height="15.0" fill="rgb(208,70,16)" rx="2" ry="2" />
<text  x="449.06" y="399.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.4" y="197" width="0.3" height="15.0" fill="rgb(214,111,30)" rx="2" ry="2" />
<text  x="49.43" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="58.1" y="325" width="0.3" height="15.0" fill="rgb(249,9,7)" rx="2" ry="2" />
<text  x="61.13" y="335.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="1132.9" y="229" width="0.2" height="15.0" fill="rgb(244,141,51)" rx="2" ry="2" />
<text  x="1135.88" y="239.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1136.9" y="469" width="0.3" height="15.0" fill="rgb(250,91,4)" rx="2" ry="2" />
<text  x="1139.93" y="479.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.02%)</title><rect x="79.3" y="645" width="0.2" height="15.0" fill="rgb(245,210,37)" rx="2" ry="2" />
<text  x="82.27" y="655.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="720.9" y="485" width="0.2" height="15.0" fill="rgb(234,49,27)" rx="2" ry="2" />
<text  x="723.88" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="911.4" y="357" width="0.6" height="15.0" fill="rgb(250,80,22)" rx="2" ry="2" />
<text  x="914.36" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (2 samples, 0.04%)</title><rect x="35.4" y="261" width="0.5" height="15.0" fill="rgb(206,66,45)" rx="2" ry="2" />
<text  x="38.41" y="271.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%)</title><rect x="22.1" y="357" width="0.3" height="15.0" fill="rgb(228,148,27)" rx="2" ry="2" />
<text  x="25.14" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (36 samples, 0.69%)</title><rect x="1127.5" y="437" width="8.1" height="15.0" fill="rgb(211,42,25)" rx="2" ry="2" />
<text  x="1130.48" y="447.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::m_check_invariants (1 samples, 0.02%)</title><rect x="645.8" y="501" width="0.2" height="15.0" fill="rgb(239,41,28)" rx="2" ry="2" />
<text  x="648.77" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.15%)</title><rect x="935.6" y="421" width="1.8" height="15.0" fill="rgb(217,226,43)" rx="2" ry="2" />
<text  x="938.65" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (2 samples, 0.04%)</title><rect x="921.7" y="373" width="0.5" height="15.0" fill="rgb(232,16,0)" rx="2" ry="2" />
<text  x="924.71" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1135.4" y="357" width="0.2" height="15.0" fill="rgb(228,78,40)" rx="2" ry="2" />
<text  x="1138.35" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="588.2" y="437" width="0.2" height="15.0" fill="rgb(220,171,52)" rx="2" ry="2" />
<text  x="591.19" y="447.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%)</title><rect x="1130.2" y="181" width="1.1" height="15.0" fill="rgb(219,121,3)" rx="2" ry="2" />
<text  x="1133.18" y="191.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (4 samples, 0.08%)</title><rect x="480.7" y="309" width="0.9" height="15.0" fill="rgb(214,50,30)" rx="2" ry="2" />
<text  x="483.70" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::expr::expression&gt;::new_allocator (1 samples, 0.02%)</title><rect x="50.3" y="261" width="0.2" height="15.0" fill="rgb(233,214,19)" rx="2" ry="2" />
<text  x="53.26" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (13 samples, 0.25%)</title><rect x="855.6" y="389" width="2.9" height="15.0" fill="rgb(211,214,5)" rx="2" ry="2" />
<text  x="858.59" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="57.2" y="261" width="0.3" height="15.0" fill="rgb(227,142,8)" rx="2" ry="2" />
<text  x="60.23" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10 samples, 0.19%)</title><rect x="662.0" y="517" width="2.2" height="15.0" fill="rgb(207,21,40)" rx="2" ry="2" />
<text  x="664.96" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="523.0" y="261" width="0.2" height="15.0" fill="rgb(213,97,48)" rx="2" ry="2" />
<text  x="525.98" y="271.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="925.8" y="421" width="0.2" height="15.0" fill="rgb(235,150,25)" rx="2" ry="2" />
<text  x="928.75" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="997.3" y="293" width="0.2" height="15.0" fill="rgb(246,46,39)" rx="2" ry="2" />
<text  x="1000.27" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="748.1" y="421" width="0.2" height="15.0" fill="rgb(247,161,1)" rx="2" ry="2" />
<text  x="751.09" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (464 samples, 8.84%)</title><rect x="330.7" y="325" width="104.3" height="15.0" fill="rgb(251,168,40)" rx="2" ry="2" />
<text  x="333.69" y="335.5" >seastar::rep..</text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="254.2" y="181" width="0.3" height="15.0" fill="rgb(234,7,14)" rx="2" ry="2" />
<text  x="257.23" y="191.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1127.3" y="357" width="0.2" height="15.0" fill="rgb(239,112,20)" rx="2" ry="2" />
<text  x="1130.26" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (76 samples, 1.45%)</title><rect x="400.6" y="213" width="17.1" height="15.0" fill="rgb(205,158,34)" rx="2" ry="2" />
<text  x="403.63" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1136.9" y="389" width="0.3" height="15.0" fill="rgb(213,229,27)" rx="2" ry="2" />
<text  x="1139.93" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%)</title><rect x="686.2" y="341" width="0.7" height="15.0" fill="rgb(214,208,8)" rx="2" ry="2" />
<text  x="689.25" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="59.9" y="309" width="0.3" height="15.0" fill="rgb(248,49,53)" rx="2" ry="2" />
<text  x="62.93" y="319.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (5 samples, 0.10%)</title><rect x="186.1" y="261" width="1.1" height="15.0" fill="rgb(242,21,24)" rx="2" ry="2" />
<text  x="189.09" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="773.3" y="309" width="0.7" height="15.0" fill="rgb(226,138,17)" rx="2" ry="2" />
<text  x="776.28" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="485" width="8.1" height="15.0" fill="rgb(238,39,24)" rx="2" ry="2" />
<text  x="1130.48" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="74.5" y="485" width="0.3" height="15.0" fill="rgb(216,89,0)" rx="2" ry="2" />
<text  x="77.54" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="542.8" y="309" width="0.2" height="15.0" fill="rgb(225,139,5)" rx="2" ry="2" />
<text  x="545.77" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="330.2" y="277" width="0.5" height="15.0" fill="rgb(236,210,49)" rx="2" ry="2" />
<text  x="333.24" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="596.1" y="453" width="0.2" height="15.0" fill="rgb(246,35,29)" rx="2" ry="2" />
<text  x="599.06" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (48 samples, 0.91%)</title><rect x="481.6" y="325" width="10.8" height="15.0" fill="rgb(236,84,36)" rx="2" ry="2" />
<text  x="484.60" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="410.3" y="181" width="2.0" height="15.0" fill="rgb(229,174,48)" rx="2" ry="2" />
<text  x="413.30" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="46.2" y="341" width="0.2" height="15.0" fill="rgb(244,55,0)" rx="2" ry="2" />
<text  x="49.21" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="703.6" y="469" width="0.2" height="15.0" fill="rgb(222,137,32)" rx="2" ry="2" />
<text  x="706.56" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="384.7" y="181" width="0.6" height="15.0" fill="rgb(236,132,14)" rx="2" ry="2" />
<text  x="387.67" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (15 samples, 0.29%)</title><rect x="70.0" y="453" width="3.4" height="15.0" fill="rgb(233,221,2)" rx="2" ry="2" />
<text  x="73.05" y="463.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="17.6" y="597" width="0.3" height="15.0" fill="rgb(249,48,33)" rx="2" ry="2" />
<text  x="20.65" y="607.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="951.8" y="405" width="0.3" height="15.0" fill="rgb(233,183,40)" rx="2" ry="2" />
<text  x="954.84" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (17 samples, 0.32%)</title><rect x="615.2" y="437" width="3.8" height="15.0" fill="rgb(205,22,53)" rx="2" ry="2" />
<text  x="618.18" y="447.5" ></text>
</g>
<g >
<title>compare_row_marker_for_merge (1 samples, 0.02%)</title><rect x="1123.4" y="245" width="0.3" height="15.0" fill="rgb(253,91,17)" rx="2" ry="2" />
<text  x="1126.43" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (599 samples, 11.42%)</title><rect x="169.0" y="389" width="134.7" height="15.0" fill="rgb(233,140,8)" rx="2" ry="2" />
<text  x="172.00" y="399.5" >mutation_fragment..</text>
</g>
<g >
<title>reader_permit::impl::impl (1 samples, 0.02%)</title><rect x="1021.1" y="245" width="0.2" height="15.0" fill="rgb(222,223,47)" rx="2" ry="2" />
<text  x="1024.11" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.2" y="293" width="0.2" height="15.0" fill="rgb(234,22,5)" rx="2" ry="2" />
<text  x="47.18" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_response_handler (2 samples, 0.04%)</title><rect x="1134.2" y="213" width="0.5" height="15.0" fill="rgb(220,54,38)" rx="2" ry="2" />
<text  x="1137.23" y="223.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="808.8" y="325" width="0.7" height="15.0" fill="rgb(205,20,25)" rx="2" ry="2" />
<text  x="811.81" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (2 samples, 0.04%)</title><rect x="852.4" y="405" width="0.5" height="15.0" fill="rgb(249,7,4)" rx="2" ry="2" />
<text  x="855.44" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="634.3" y="517" width="0.2" height="15.0" fill="rgb(207,88,12)" rx="2" ry="2" />
<text  x="637.30" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%)</title><rect x="1168.6" y="533" width="0.9" height="15.0" fill="rgb(246,91,32)" rx="2" ry="2" />
<text  x="1171.64" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="625.1" y="469" width="0.2" height="15.0" fill="rgb(249,39,21)" rx="2" ry="2" />
<text  x="628.08" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="709.4" y="485" width="0.2" height="15.0" fill="rgb(224,7,3)" rx="2" ry="2" />
<text  x="712.41" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="243.7" y="165" width="0.2" height="15.0" fill="rgb(243,68,3)" rx="2" ry="2" />
<text  x="246.66" y="175.5" ></text>
</g>
<g >
<title>executor&lt;test_read (578 samples, 11.02%)</title><rect x="715.5" y="517" width="130.0" height="15.0" fill="rgb(209,37,2)" rx="2" ry="2" />
<text  x="718.48" y="527.5" >executor&lt;test_read</text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::reserve (2 samples, 0.04%)</title><rect x="1134.9" y="293" width="0.5" height="15.0" fill="rgb(245,47,51)" rx="2" ry="2" />
<text  x="1137.90" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="715.3" y="517" width="0.2" height="15.0" fill="rgb(232,144,5)" rx="2" ry="2" />
<text  x="718.26" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="604.4" y="469" width="0.4" height="15.0" fill="rgb(245,9,11)" rx="2" ry="2" />
<text  x="607.39" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (277 samples, 5.28%)</title><rect x="204.1" y="277" width="62.3" height="15.0" fill="rgb(232,107,44)" rx="2" ry="2" />
<text  x="207.08" y="287.5" >partit..</text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="456.6" y="277" width="0.3" height="15.0" fill="rgb(254,29,3)" rx="2" ry="2" />
<text  x="459.63" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (6 samples, 0.11%)</title><rect x="1008.1" y="229" width="1.3" height="15.0" fill="rgb(241,40,40)" rx="2" ry="2" />
<text  x="1011.06" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="460.9" y="277" width="0.2" height="15.0" fill="rgb(225,70,20)" rx="2" ry="2" />
<text  x="463.91" y="287.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="926.4" y="421" width="0.3" height="15.0" fill="rgb(216,121,31)" rx="2" ry="2" />
<text  x="929.43" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="845.7" y="501" width="0.2" height="15.0" fill="rgb(253,171,2)" rx="2" ry="2" />
<text  x="848.69" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="24.8" y="293" width="0.3" height="15.0" fill="rgb(205,206,44)" rx="2" ry="2" />
<text  x="27.84" y="303.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="595.8" y="437" width="0.3" height="15.0" fill="rgb(228,100,54)" rx="2" ry="2" />
<text  x="598.84" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="263.0" y="213" width="0.5" height="15.0" fill="rgb(247,44,17)" rx="2" ry="2" />
<text  x="266.00" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="828.4" y="421" width="1.8" height="15.0" fill="rgb(251,14,21)" rx="2" ry="2" />
<text  x="831.38" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (2 samples, 0.04%)</title><rect x="529.5" y="325" width="0.4" height="15.0" fill="rgb(207,138,9)" rx="2" ry="2" />
<text  x="532.50" y="335.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.67%)</title><rect x="788.1" y="245" width="7.9" height="15.0" fill="rgb(229,205,46)" rx="2" ry="2" />
<text  x="791.12" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.4" y="101" width="0.2" height="15.0" fill="rgb(246,47,42)" rx="2" ry="2" />
<text  x="52.36" y="111.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="79.7" y="629" width="0.2" height="15.0" fill="rgb(228,216,49)" rx="2" ry="2" />
<text  x="82.72" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="592.0" y="437" width="0.2" height="15.0" fill="rgb(212,5,19)" rx="2" ry="2" />
<text  x="595.02" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="178.2" y="309" width="0.2" height="15.0" fill="rgb(209,30,43)" rx="2" ry="2" />
<text  x="181.22" y="319.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="57.7" y="261" width="0.2" height="15.0" fill="rgb(237,147,10)" rx="2" ry="2" />
<text  x="60.68" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="849.1" y="261" width="0.2" height="15.0" fill="rgb(227,222,19)" rx="2" ry="2" />
<text  x="852.07" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1143.9" y="517" width="0.2" height="15.0" fill="rgb(205,17,1)" rx="2" ry="2" />
<text  x="1146.90" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="21.2" y="437" width="0.3" height="15.0" fill="rgb(227,3,45)" rx="2" ry="2" />
<text  x="24.24" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="622.4" y="469" width="0.4" height="15.0" fill="rgb(224,38,35)" rx="2" ry="2" />
<text  x="625.38" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="80.6" y="453" width="0.2" height="15.0" fill="rgb(250,183,32)" rx="2" ry="2" />
<text  x="83.62" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.27%)</title><rect x="836.9" y="453" width="3.2" height="15.0" fill="rgb(234,193,2)" rx="2" ry="2" />
<text  x="839.92" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="105.4" y="293" width="0.2" height="15.0" fill="rgb(222,188,37)" rx="2" ry="2" />
<text  x="108.35" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="717.1" y="437" width="0.9" height="15.0" fill="rgb(211,109,25)" rx="2" ry="2" />
<text  x="720.06" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="565.9" y="325" width="1.2" height="15.0" fill="rgb(237,32,34)" rx="2" ry="2" />
<text  x="568.93" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="795.3" y="133" width="0.5" height="15.0" fill="rgb(227,11,11)" rx="2" ry="2" />
<text  x="798.32" y="143.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="504.3" y="357" width="0.2" height="15.0" fill="rgb(208,214,31)" rx="2" ry="2" />
<text  x="507.31" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1169.8" y="565" width="0.2" height="15.0" fill="rgb(206,58,44)" rx="2" ry="2" />
<text  x="1172.76" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="721.3" y="485" width="0.3" height="15.0" fill="rgb(240,46,36)" rx="2" ry="2" />
<text  x="724.33" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="599.0" y="389" width="0.4" height="15.0" fill="rgb(227,62,36)" rx="2" ry="2" />
<text  x="601.99" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (2 samples, 0.04%)</title><rect x="82.0" y="437" width="0.4" height="15.0" fill="rgb(219,55,42)" rx="2" ry="2" />
<text  x="84.96" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.11%)</title><rect x="56.1" y="293" width="1.4" height="15.0" fill="rgb(243,48,25)" rx="2" ry="2" />
<text  x="59.10" y="303.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="37.4" y="341" width="0.3" height="15.0" fill="rgb(213,90,54)" rx="2" ry="2" />
<text  x="40.44" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (24 samples, 0.46%)</title><rect x="287.5" y="325" width="5.4" height="15.0" fill="rgb(210,90,51)" rx="2" ry="2" />
<text  x="290.51" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (13 samples, 0.25%)</title><rect x="978.4" y="357" width="2.9" height="15.0" fill="rgb(253,153,10)" rx="2" ry="2" />
<text  x="981.38" y="367.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="199.6" y="245" width="2.0" height="15.0" fill="rgb(236,132,48)" rx="2" ry="2" />
<text  x="202.58" y="255.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (7 samples, 0.13%)</title><rect x="1095.5" y="389" width="1.6" height="15.0" fill="rgb(235,13,9)" rx="2" ry="2" />
<text  x="1098.55" y="399.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::on_released (1 samples, 0.02%)</title><rect x="711.9" y="485" width="0.2" height="15.0" fill="rgb(215,130,7)" rx="2" ry="2" />
<text  x="714.88" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="574.5" y="405" width="2.0" height="15.0" fill="rgb(213,136,27)" rx="2" ry="2" />
<text  x="577.47" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="931.4" y="437" width="0.2" height="15.0" fill="rgb(214,81,11)" rx="2" ry="2" />
<text  x="934.38" y="447.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="897.4" y="341" width="0.5" height="15.0" fill="rgb(207,12,37)" rx="2" ry="2" />
<text  x="900.42" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="290.9" y="309" width="0.4" height="15.0" fill="rgb(226,224,23)" rx="2" ry="2" />
<text  x="293.89" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="104.2" y="501" width="0.3" height="15.0" fill="rgb(251,7,52)" rx="2" ry="2" />
<text  x="107.23" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="61.1" y="149" width="0.2" height="15.0" fill="rgb(213,24,12)" rx="2" ry="2" />
<text  x="64.05" y="159.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%)</title><rect x="727.0" y="325" width="0.6" height="15.0" fill="rgb(254,24,1)" rx="2" ry="2" />
<text  x="729.95" y="335.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="854.5" y="325" width="0.2" height="15.0" fill="rgb(224,196,1)" rx="2" ry="2" />
<text  x="857.46" y="335.5" ></text>
</g>
<g >
<title>cql3::operation::requires_read (1 samples, 0.02%)</title><rect x="68.2" y="453" width="0.3" height="15.0" fill="rgb(228,54,41)" rx="2" ry="2" />
<text  x="71.25" y="463.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="101.8" y="357" width="0.2" height="15.0" fill="rgb(222,212,13)" rx="2" ry="2" />
<text  x="104.76" y="367.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="108.3" y="501" width="0.2" height="15.0" fill="rgb(216,139,17)" rx="2" ry="2" />
<text  x="111.28" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1134.2" y="181" width="0.3" height="15.0" fill="rgb(244,5,54)" rx="2" ry="2" />
<text  x="1137.23" y="191.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="265.3" y="261" width="0.2" height="15.0" fill="rgb(254,76,23)" rx="2" ry="2" />
<text  x="268.25" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="735.3" y="421" width="0.2" height="15.0" fill="rgb(222,201,28)" rx="2" ry="2" />
<text  x="738.27" y="431.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (6 samples, 0.11%)</title><rect x="920.8" y="389" width="1.4" height="15.0" fill="rgb(208,220,52)" rx="2" ry="2" />
<text  x="923.81" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="854.7" y="373" width="0.2" height="15.0" fill="rgb(224,146,50)" rx="2" ry="2" />
<text  x="857.69" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="652.5" y="485" width="0.2" height="15.0" fill="rgb(218,40,25)" rx="2" ry="2" />
<text  x="655.51" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="653.2" y="453" width="0.2" height="15.0" fill="rgb(207,156,12)" rx="2" ry="2" />
<text  x="656.19" y="463.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="785.4" y="181" width="0.5" height="15.0" fill="rgb(221,44,11)" rx="2" ry="2" />
<text  x="788.42" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="265.9" y="245" width="0.3" height="15.0" fill="rgb(245,57,18)" rx="2" ry="2" />
<text  x="268.93" y="255.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%)</title><rect x="1001.5" y="277" width="0.7" height="15.0" fill="rgb(249,42,54)" rx="2" ry="2" />
<text  x="1004.54" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1138.9" y="533" width="0.3" height="15.0" fill="rgb(242,127,50)" rx="2" ry="2" />
<text  x="1141.95" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="48.7" y="309" width="0.9" height="15.0" fill="rgb(216,56,5)" rx="2" ry="2" />
<text  x="51.68" y="319.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="108.1" y="373" width="0.2" height="15.0" fill="rgb(250,101,38)" rx="2" ry="2" />
<text  x="111.05" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1141.2" y="517" width="0.4" height="15.0" fill="rgb(232,44,18)" rx="2" ry="2" />
<text  x="1144.20" y="527.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="80.4" y="517" width="1.6" height="15.0" fill="rgb(217,201,51)" rx="2" ry="2" />
<text  x="83.39" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="52.3" y="277" width="0.2" height="15.0" fill="rgb(249,36,10)" rx="2" ry="2" />
<text  x="55.28" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.9" y="517" width="0.2" height="15.0" fill="rgb(215,174,5)" rx="2" ry="2" />
<text  x="13.90" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (3 samples, 0.06%)</title><rect x="471.9" y="357" width="0.7" height="15.0" fill="rgb(242,174,42)" rx="2" ry="2" />
<text  x="474.92" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1114.9" y="453" width="0.4" height="15.0" fill="rgb(237,134,39)" rx="2" ry="2" />
<text  x="1117.89" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="601.7" y="453" width="0.2" height="15.0" fill="rgb(244,28,5)" rx="2" ry="2" />
<text  x="604.69" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="855.6" y="245" width="0.2" height="15.0" fill="rgb(217,18,39)" rx="2" ry="2" />
<text  x="858.59" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="49.8" y="325" width="0.2" height="15.0" fill="rgb(238,201,27)" rx="2" ry="2" />
<text  x="52.81" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.2" y="389" width="0.2" height="15.0" fill="rgb(211,194,6)" rx="2" ry="2" />
<text  x="67.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (69 samples, 1.32%)</title><rect x="304.4" y="389" width="15.5" height="15.0" fill="rgb(247,119,34)" rx="2" ry="2" />
<text  x="307.38" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="460.0" y="261" width="0.9" height="15.0" fill="rgb(208,208,33)" rx="2" ry="2" />
<text  x="463.01" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="71.4" y="357" width="0.2" height="15.0" fill="rgb(234,7,37)" rx="2" ry="2" />
<text  x="74.40" y="367.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (206 samples, 3.93%)</title><rect x="21.2" y="469" width="46.4" height="15.0" fill="rgb(253,78,3)" rx="2" ry="2" />
<text  x="24.24" y="479.5" >cql3..</text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="105.6" y="277" width="0.2" height="15.0" fill="rgb(211,60,52)" rx="2" ry="2" />
<text  x="108.58" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="759.8" y="437" width="0.2" height="15.0" fill="rgb(221,179,44)" rx="2" ry="2" />
<text  x="762.78" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1133.6" y="181" width="0.2" height="15.0" fill="rgb(223,77,3)" rx="2" ry="2" />
<text  x="1136.55" y="191.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="849.1" y="277" width="0.2" height="15.0" fill="rgb(214,188,36)" rx="2" ry="2" />
<text  x="852.07" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="696.6" y="501" width="0.4" height="15.0" fill="rgb(239,155,32)" rx="2" ry="2" />
<text  x="699.59" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="56.6" y="261" width="0.6" height="15.0" fill="rgb(218,111,25)" rx="2" ry="2" />
<text  x="59.55" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="928.7" y="421" width="0.2" height="15.0" fill="rgb(210,72,44)" rx="2" ry="2" />
<text  x="931.68" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="1102.3" y="437" width="0.2" height="15.0" fill="rgb(248,159,45)" rx="2" ry="2" />
<text  x="1105.29" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.11%)</title><rect x="56.1" y="277" width="1.4" height="15.0" fill="rgb(236,23,7)" rx="2" ry="2" />
<text  x="59.10" y="287.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%)</title><rect x="18.3" y="149" width="0.2" height="15.0" fill="rgb(207,218,26)" rx="2" ry="2" />
<text  x="21.32" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;unsigned long&amp;, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; (2 samples, 0.04%)</title><rect x="1134.2" y="197" width="0.5" height="15.0" fill="rgb(246,152,42)" rx="2" ry="2" />
<text  x="1137.23" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.15%)</title><rect x="372.1" y="197" width="1.8" height="15.0" fill="rgb(212,165,0)" rx="2" ry="2" />
<text  x="375.07" y="207.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%)</title><rect x="363.1" y="213" width="0.2" height="15.0" fill="rgb(210,198,13)" rx="2" ry="2" />
<text  x="366.08" y="223.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.13%)</title><rect x="536.0" y="325" width="1.6" height="15.0" fill="rgb(211,14,37)" rx="2" ry="2" />
<text  x="539.02" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1015.3" y="181" width="0.4" height="15.0" fill="rgb(237,173,54)" rx="2" ry="2" />
<text  x="1018.26" y="191.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="43.1" y="325" width="0.9" height="15.0" fill="rgb(226,81,41)" rx="2" ry="2" />
<text  x="46.06" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (2 samples, 0.04%)</title><rect x="506.6" y="341" width="0.4" height="15.0" fill="rgb(242,136,37)" rx="2" ry="2" />
<text  x="509.56" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (9 samples, 0.17%)</title><rect x="459.1" y="293" width="2.0" height="15.0" fill="rgb(216,28,54)" rx="2" ry="2" />
<text  x="462.11" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="38.8" y="373" width="0.4" height="15.0" fill="rgb(218,120,34)" rx="2" ry="2" />
<text  x="41.79" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.08%)</title><rect x="824.6" y="437" width="0.9" height="15.0" fill="rgb(251,68,0)" rx="2" ry="2" />
<text  x="827.55" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="16.7" y="581" width="0.3" height="15.0" fill="rgb(237,133,12)" rx="2" ry="2" />
<text  x="19.75" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="78.1" y="517" width="0.3" height="15.0" fill="rgb(217,125,8)" rx="2" ry="2" />
<text  x="81.14" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="18.3" y="565" width="0.2" height="15.0" fill="rgb(254,221,38)" rx="2" ry="2" />
<text  x="21.32" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1135.4" y="373" width="0.2" height="15.0" fill="rgb(223,11,11)" rx="2" ry="2" />
<text  x="1138.35" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="842.5" y="453" width="1.2" height="15.0" fill="rgb(209,155,4)" rx="2" ry="2" />
<text  x="845.54" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="1045.8" y="309" width="0.5" height="15.0" fill="rgb(239,141,18)" rx="2" ry="2" />
<text  x="1048.85" y="319.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="435.3" y="325" width="0.4" height="15.0" fill="rgb(242,162,27)" rx="2" ry="2" />
<text  x="438.27" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (25 samples, 0.48%)</title><rect x="68.0" y="469" width="5.6" height="15.0" fill="rgb(221,22,35)" rx="2" ry="2" />
<text  x="71.02" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="513.3" y="293" width="0.2" height="15.0" fill="rgb(208,11,4)" rx="2" ry="2" />
<text  x="516.30" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="799.6" y="261" width="0.7" height="15.0" fill="rgb(208,176,24)" rx="2" ry="2" />
<text  x="802.59" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (16 samples, 0.30%)</title><rect x="466.5" y="309" width="3.6" height="15.0" fill="rgb(246,67,29)" rx="2" ry="2" />
<text  x="469.53" y="319.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="17.2" y="533" width="0.2" height="15.0" fill="rgb(221,41,5)" rx="2" ry="2" />
<text  x="20.20" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.27%)</title><rect x="1075.3" y="293" width="3.2" height="15.0" fill="rgb(237,131,21)" rx="2" ry="2" />
<text  x="1078.31" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="585.0" y="421" width="0.7" height="15.0" fill="rgb(254,28,11)" rx="2" ry="2" />
<text  x="588.04" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="932.5" y="421" width="0.2" height="15.0" fill="rgb(219,119,34)" rx="2" ry="2" />
<text  x="935.50" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (4 samples, 0.08%)</title><rect x="856.3" y="309" width="0.9" height="15.0" fill="rgb(242,18,19)" rx="2" ry="2" />
<text  x="859.26" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (9 samples, 0.17%)</title><rect x="932.3" y="437" width="2.0" height="15.0" fill="rgb(251,173,0)" rx="2" ry="2" />
<text  x="935.28" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (4 samples, 0.08%)</title><rect x="350.7" y="213" width="0.9" height="15.0" fill="rgb(207,73,21)" rx="2" ry="2" />
<text  x="353.71" y="223.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="78.1" y="533" width="0.3" height="15.0" fill="rgb(221,185,21)" rx="2" ry="2" />
<text  x="81.14" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="72.1" y="405" width="0.2" height="15.0" fill="rgb(214,21,13)" rx="2" ry="2" />
<text  x="75.07" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="799.8" y="245" width="0.2" height="15.0" fill="rgb(231,134,42)" rx="2" ry="2" />
<text  x="802.82" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (8 samples, 0.15%)</title><rect x="1080.3" y="357" width="1.8" height="15.0" fill="rgb(238,187,4)" rx="2" ry="2" />
<text  x="1083.25" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%)</title><rect x="155.7" y="437" width="0.5" height="15.0" fill="rgb(219,99,14)" rx="2" ry="2" />
<text  x="158.73" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="902.8" y="325" width="0.5" height="15.0" fill="rgb(215,84,47)" rx="2" ry="2" />
<text  x="905.81" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (2 samples, 0.04%)</title><rect x="41.5" y="373" width="0.4" height="15.0" fill="rgb(242,98,44)" rx="2" ry="2" />
<text  x="44.48" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="686.0" y="517" width="0.2" height="15.0" fill="rgb(242,186,11)" rx="2" ry="2" />
<text  x="689.02" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="706.7" y="437" width="0.2" height="15.0" fill="rgb(245,26,53)" rx="2" ry="2" />
<text  x="709.71" y="447.5" ></text>
</g>
<g >
<title>row::row (132 samples, 2.52%)</title><rect x="214.4" y="181" width="29.7" height="15.0" fill="rgb(207,43,11)" rx="2" ry="2" />
<text  x="217.43" y="191.5" >ro..</text>
</g>
<g >
<title>cql3::query_options::prepare (2 samples, 0.04%)</title><rect x="728.7" y="469" width="0.5" height="15.0" fill="rgb(207,52,31)" rx="2" ry="2" />
<text  x="731.75" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="741.8" y="341" width="0.2" height="15.0" fill="rgb(244,84,43)" rx="2" ry="2" />
<text  x="744.79" y="351.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (17 samples, 0.32%)</title><rect x="539.2" y="325" width="3.8" height="15.0" fill="rgb(206,79,0)" rx="2" ry="2" />
<text  x="542.17" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (31 samples, 0.59%)</title><rect x="231.3" y="117" width="7.0" height="15.0" fill="rgb(235,188,26)" rx="2" ry="2" />
<text  x="234.29" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="113.4" y="501" width="0.5" height="15.0" fill="rgb(216,81,21)" rx="2" ry="2" />
<text  x="116.45" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="320.6" y="405" width="0.4" height="15.0" fill="rgb(249,37,16)" rx="2" ry="2" />
<text  x="323.57" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="948.0" y="405" width="0.2" height="15.0" fill="rgb(237,202,36)" rx="2" ry="2" />
<text  x="951.02" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.10%)</title><rect x="240.1" y="133" width="1.1" height="15.0" fill="rgb(249,103,41)" rx="2" ry="2" />
<text  x="243.06" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%)</title><rect x="80.4" y="597" width="2.7" height="15.0" fill="rgb(248,136,31)" rx="2" ry="2" />
<text  x="83.39" y="607.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (5 samples, 0.10%)</title><rect x="742.2" y="341" width="1.2" height="15.0" fill="rgb(236,176,45)" rx="2" ry="2" />
<text  x="745.24" y="351.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%)</title><rect x="21.7" y="421" width="0.4" height="15.0" fill="rgb(207,36,28)" rx="2" ry="2" />
<text  x="24.69" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (3 samples, 0.06%)</title><rect x="188.8" y="293" width="0.7" height="15.0" fill="rgb(244,83,9)" rx="2" ry="2" />
<text  x="191.79" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="260.3" y="165" width="0.5" height="15.0" fill="rgb(235,121,8)" rx="2" ry="2" />
<text  x="263.30" y="175.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="61.1" y="165" width="0.2" height="15.0" fill="rgb(247,219,54)" rx="2" ry="2" />
<text  x="64.05" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="570.2" y="309" width="0.2" height="15.0" fill="rgb(207,173,5)" rx="2" ry="2" />
<text  x="573.20" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="360.2" y="197" width="0.2" height="15.0" fill="rgb(230,163,53)" rx="2" ry="2" />
<text  x="363.15" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="75.4" y="453" width="0.3" height="15.0" fill="rgb(243,105,17)" rx="2" ry="2" />
<text  x="78.44" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (31 samples, 0.59%)</title><rect x="516.2" y="277" width="7.0" height="15.0" fill="rgb(252,222,36)" rx="2" ry="2" />
<text  x="519.23" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%)</title><rect x="19.4" y="549" width="0.3" height="15.0" fill="rgb(248,116,1)" rx="2" ry="2" />
<text  x="22.45" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (4 samples, 0.08%)</title><rect x="1131.3" y="197" width="0.9" height="15.0" fill="rgb(243,207,37)" rx="2" ry="2" />
<text  x="1134.30" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1014.4" y="165" width="0.2" height="15.0" fill="rgb(210,32,38)" rx="2" ry="2" />
<text  x="1017.36" y="175.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%)</title><rect x="19.9" y="517" width="0.4" height="15.0" fill="rgb(217,60,48)" rx="2" ry="2" />
<text  x="22.90" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.2" y="517" width="0.2" height="15.0" fill="rgb(240,26,12)" rx="2" ry="2" />
<text  x="672.15" y="527.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (28 samples, 0.53%)</title><rect x="494.9" y="293" width="6.3" height="15.0" fill="rgb(236,206,20)" rx="2" ry="2" />
<text  x="497.86" y="303.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (453 samples, 8.63%)</title><rect x="444.3" y="437" width="101.8" height="15.0" fill="rgb(231,39,34)" rx="2" ry="2" />
<text  x="447.26" y="447.5" >mutation_sou..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (9 samples, 0.17%)</title><rect x="194.6" y="229" width="2.1" height="15.0" fill="rgb(206,206,42)" rx="2" ry="2" />
<text  x="197.64" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="527.5" y="341" width="0.6" height="15.0" fill="rgb(232,125,32)" rx="2" ry="2" />
<text  x="530.47" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="72.5" y="373" width="0.2" height="15.0" fill="rgb(251,140,52)" rx="2" ry="2" />
<text  x="75.52" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="41.3" y="341" width="0.2" height="15.0" fill="rgb(217,8,9)" rx="2" ry="2" />
<text  x="44.26" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="64.9" y="389" width="0.2" height="15.0" fill="rgb(241,18,51)" rx="2" ry="2" />
<text  x="67.87" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1149.1" y="453" width="0.6" height="15.0" fill="rgb(240,188,43)" rx="2" ry="2" />
<text  x="1152.07" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (7 samples, 0.13%)</title><rect x="588.4" y="453" width="1.6" height="15.0" fill="rgb(247,19,34)" rx="2" ry="2" />
<text  x="591.42" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="827.5" y="469" width="0.2" height="15.0" fill="rgb(238,79,35)" rx="2" ry="2" />
<text  x="830.48" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="105.4" y="469" width="0.2" height="15.0" fill="rgb(238,200,4)" rx="2" ry="2" />
<text  x="108.35" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.10%)</title><rect x="701.3" y="501" width="1.1" height="15.0" fill="rgb(216,194,13)" rx="2" ry="2" />
<text  x="704.31" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (5 samples, 0.10%)</title><rect x="82.0" y="517" width="1.1" height="15.0" fill="rgb(206,216,33)" rx="2" ry="2" />
<text  x="84.96" y="527.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%)</title><rect x="706.9" y="453" width="0.3" height="15.0" fill="rgb(231,24,8)" rx="2" ry="2" />
<text  x="709.94" y="463.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="532.0" y="357" width="0.2" height="15.0" fill="rgb(224,20,31)" rx="2" ry="2" />
<text  x="534.97" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1065.0" y="341" width="0.2" height="15.0" fill="rgb(238,187,15)" rx="2" ry="2" />
<text  x="1067.96" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%)</title><rect x="686.5" y="309" width="0.2" height="15.0" fill="rgb(236,159,19)" rx="2" ry="2" />
<text  x="689.47" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="438.2" y="389" width="0.2" height="15.0" fill="rgb(245,68,40)" rx="2" ry="2" />
<text  x="441.19" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%)</title><rect x="325.1" y="405" width="0.6" height="15.0" fill="rgb(228,224,39)" rx="2" ry="2" />
<text  x="328.07" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="856.9" y="277" width="0.3" height="15.0" fill="rgb(233,103,48)" rx="2" ry="2" />
<text  x="859.94" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (14 samples, 0.27%)</title><rect x="337.4" y="277" width="3.2" height="15.0" fill="rgb(218,91,20)" rx="2" ry="2" />
<text  x="340.44" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="17.6" y="581" width="0.3" height="15.0" fill="rgb(235,58,47)" rx="2" ry="2" />
<text  x="20.65" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="1166.2" y="533" width="0.2" height="15.0" fill="rgb(253,47,13)" rx="2" ry="2" />
<text  x="1169.16" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (5 samples, 0.10%)</title><rect x="1152.2" y="437" width="1.1" height="15.0" fill="rgb(251,50,26)" rx="2" ry="2" />
<text  x="1155.22" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="640.6" y="517" width="0.2" height="15.0" fill="rgb(244,116,15)" rx="2" ry="2" />
<text  x="643.59" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (5 samples, 0.10%)</title><rect x="663.1" y="469" width="1.1" height="15.0" fill="rgb(223,194,42)" rx="2" ry="2" />
<text  x="666.08" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (1 samples, 0.02%)</title><rect x="857.8" y="325" width="0.3" height="15.0" fill="rgb(232,187,24)" rx="2" ry="2" />
<text  x="860.84" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1154.5" y="437" width="0.6" height="15.0" fill="rgb(243,64,13)" rx="2" ry="2" />
<text  x="1157.47" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.19%)</title><rect x="96.6" y="469" width="2.2" height="15.0" fill="rgb(242,76,28)" rx="2" ry="2" />
<text  x="99.58" y="479.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.10%)</title><rect x="75.7" y="453" width="1.1" height="15.0" fill="rgb(211,48,9)" rx="2" ry="2" />
<text  x="78.67" y="463.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%)</title><rect x="105.6" y="437" width="0.2" height="15.0" fill="rgb(239,105,13)" rx="2" ry="2" />
<text  x="108.58" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="320.1" y="389" width="0.2" height="15.0" fill="rgb(225,216,4)" rx="2" ry="2" />
<text  x="323.12" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="571.3" y="325" width="0.3" height="15.0" fill="rgb(208,73,42)" rx="2" ry="2" />
<text  x="574.33" y="335.5" ></text>
</g>
<g >
<title>seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="108.1" y="517" width="0.2" height="15.0" fill="rgb(254,21,48)" rx="2" ry="2" />
<text  x="111.05" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="687.1" y="485" width="0.3" height="15.0" fill="rgb(215,153,40)" rx="2" ry="2" />
<text  x="690.15" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="44.4" y="357" width="0.2" height="15.0" fill="rgb(232,206,39)" rx="2" ry="2" />
<text  x="47.41" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="53.2" y="293" width="0.4" height="15.0" fill="rgb(244,80,6)" rx="2" ry="2" />
<text  x="56.18" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="764.7" y="389" width="0.7" height="15.0" fill="rgb(218,162,9)" rx="2" ry="2" />
<text  x="767.73" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (2 samples, 0.04%)</title><rect x="51.2" y="245" width="0.4" height="15.0" fill="rgb(243,87,51)" rx="2" ry="2" />
<text  x="54.15" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="806.6" y="373" width="0.2" height="15.0" fill="rgb(244,175,54)" rx="2" ry="2" />
<text  x="809.56" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%)</title><rect x="692.1" y="469" width="0.2" height="15.0" fill="rgb(216,13,2)" rx="2" ry="2" />
<text  x="695.09" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (2 samples, 0.04%)</title><rect x="118.4" y="485" width="0.4" height="15.0" fill="rgb(248,38,11)" rx="2" ry="2" />
<text  x="121.40" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (44 samples, 0.84%)</title><rect x="194.2" y="277" width="9.9" height="15.0" fill="rgb(238,17,0)" rx="2" ry="2" />
<text  x="197.19" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="51.6" y="309" width="0.2" height="15.0" fill="rgb(252,185,32)" rx="2" ry="2" />
<text  x="54.60" y="319.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (38 samples, 0.72%)</title><rect x="492.6" y="341" width="8.6" height="15.0" fill="rgb(222,200,41)" rx="2" ry="2" />
<text  x="495.61" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="319.0" y="357" width="0.2" height="15.0" fill="rgb(248,122,1)" rx="2" ry="2" />
<text  x="322.00" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="44.6" y="309" width="0.3" height="15.0" fill="rgb(246,97,1)" rx="2" ry="2" />
<text  x="47.63" y="319.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="16.7" y="533" width="0.3" height="15.0" fill="rgb(235,18,40)" rx="2" ry="2" />
<text  x="19.75" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="513.8" y="293" width="0.2" height="15.0" fill="rgb(228,26,14)" rx="2" ry="2" />
<text  x="516.75" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="50.3" y="325" width="0.2" height="15.0" fill="rgb(244,74,13)" rx="2" ry="2" />
<text  x="53.26" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="50.0" y="293" width="0.3" height="15.0" fill="rgb(227,193,11)" rx="2" ry="2" />
<text  x="53.03" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (3 samples, 0.06%)</title><rect x="897.9" y="357" width="0.6" height="15.0" fill="rgb(249,53,50)" rx="2" ry="2" />
<text  x="900.87" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="785.4" y="165" width="0.5" height="15.0" fill="rgb(206,117,34)" rx="2" ry="2" />
<text  x="788.42" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="646.2" y="469" width="0.2" height="15.0" fill="rgb(206,153,29)" rx="2" ry="2" />
<text  x="649.21" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="437" width="0.2" height="15.0" fill="rgb(221,211,22)" rx="2" ry="2" />
<text  x="1169.39" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.11%)</title><rect x="191.5" y="293" width="1.3" height="15.0" fill="rgb(239,97,32)" rx="2" ry="2" />
<text  x="194.49" y="303.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%)</title><rect x="622.8" y="453" width="1.6" height="15.0" fill="rgb(238,68,33)" rx="2" ry="2" />
<text  x="625.83" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="765.0" y="357" width="0.4" height="15.0" fill="rgb(239,99,53)" rx="2" ry="2" />
<text  x="767.96" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (11 samples, 0.21%)</title><rect x="552.0" y="421" width="2.5" height="15.0" fill="rgb(253,103,22)" rx="2" ry="2" />
<text  x="554.99" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="43.5" y="149" width="0.2" height="15.0" fill="rgb(219,82,33)" rx="2" ry="2" />
<text  x="46.51" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="796.2" y="229" width="0.2" height="15.0" fill="rgb(247,77,21)" rx="2" ry="2" />
<text  x="799.22" y="239.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (2 samples, 0.04%)</title><rect x="724.0" y="437" width="0.5" height="15.0" fill="rgb(227,43,16)" rx="2" ry="2" />
<text  x="727.03" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="421" width="0.7" height="15.0" fill="rgb(229,98,2)" rx="2" ry="2" />
<text  x="689.25" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (2 samples, 0.04%)</title><rect x="74.8" y="501" width="0.4" height="15.0" fill="rgb(213,214,51)" rx="2" ry="2" />
<text  x="77.77" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1042.9" y="341" width="0.2" height="15.0" fill="rgb(252,77,46)" rx="2" ry="2" />
<text  x="1045.92" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1148.8" y="469" width="0.9" height="15.0" fill="rgb(248,227,29)" rx="2" ry="2" />
<text  x="1151.85" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="517.1" y="245" width="0.5" height="15.0" fill="rgb(232,33,17)" rx="2" ry="2" />
<text  x="520.13" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::__variant_construct&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor, std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; &gt; (1 samples, 0.02%)</title><rect x="71.2" y="357" width="0.2" height="15.0" fill="rgb(213,166,16)" rx="2" ry="2" />
<text  x="74.17" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="362.4" y="213" width="0.2" height="15.0" fill="rgb(237,21,9)" rx="2" ry="2" />
<text  x="365.40" y="223.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="80.2" y="469" width="0.2" height="15.0" fill="rgb(232,150,4)" rx="2" ry="2" />
<text  x="83.17" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="901.7" y="373" width="0.2" height="15.0" fill="rgb(208,115,30)" rx="2" ry="2" />
<text  x="904.69" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="46.7" y="197" width="0.2" height="15.0" fill="rgb(205,208,43)" rx="2" ry="2" />
<text  x="49.66" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="689.8" y="501" width="0.3" height="15.0" fill="rgb(229,71,0)" rx="2" ry="2" />
<text  x="692.84" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="542.5" y="293" width="0.3" height="15.0" fill="rgb(241,132,5)" rx="2" ry="2" />
<text  x="545.54" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="56.3" y="117" width="0.3" height="15.0" fill="rgb(208,30,41)" rx="2" ry="2" />
<text  x="59.33" y="127.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="1167.5" y="517" width="0.2" height="15.0" fill="rgb(215,119,50)" rx="2" ry="2" />
<text  x="1170.51" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1028.8" y="309" width="0.2" height="15.0" fill="rgb(244,114,41)" rx="2" ry="2" />
<text  x="1031.75" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="931.6" y="437" width="0.2" height="15.0" fill="rgb(216,168,13)" rx="2" ry="2" />
<text  x="934.60" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="52.1" y="149" width="0.2" height="15.0" fill="rgb(246,134,43)" rx="2" ry="2" />
<text  x="55.05" y="159.5" ></text>
</g>
<g >
<title>create_partitions (265 samples, 5.05%)</title><rect x="19.0" y="565" width="59.6" height="15.0" fill="rgb(212,143,32)" rx="2" ry="2" />
<text  x="22.00" y="575.5" >create..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1169.8" y="533" width="0.2" height="15.0" fill="rgb(252,142,5)" rx="2" ry="2" />
<text  x="1172.76" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="857.8" y="309" width="0.3" height="15.0" fill="rgb(242,118,27)" rx="2" ry="2" />
<text  x="860.84" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (3 samples, 0.06%)</title><rect x="132.8" y="485" width="0.7" height="15.0" fill="rgb(227,154,19)" rx="2" ry="2" />
<text  x="135.79" y="495.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (4 samples, 0.08%)</title><rect x="1062.5" y="357" width="0.9" height="15.0" fill="rgb(242,30,46)" rx="2" ry="2" />
<text  x="1065.49" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="322.1" y="421" width="0.5" height="15.0" fill="rgb(236,80,8)" rx="2" ry="2" />
<text  x="325.15" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (24 samples, 0.46%)</title><rect x="1129.5" y="261" width="5.4" height="15.0" fill="rgb(247,47,33)" rx="2" ry="2" />
<text  x="1132.50" y="271.5" ></text>
</g>
<g >
<title>query::querier_base::close (124 samples, 2.36%)</title><rect x="559.0" y="469" width="27.8" height="15.0" fill="rgb(215,229,49)" rx="2" ry="2" />
<text  x="561.96" y="479.5" >q..</text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="913.6" y="405" width="1.1" height="15.0" fill="rgb(220,69,10)" rx="2" ry="2" />
<text  x="916.61" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1087.7" y="405" width="0.4" height="15.0" fill="rgb(230,21,15)" rx="2" ry="2" />
<text  x="1090.67" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="521.2" y="229" width="0.2" height="15.0" fill="rgb(236,116,33)" rx="2" ry="2" />
<text  x="524.18" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (6 samples, 0.11%)</title><rect x="428.3" y="245" width="1.3" height="15.0" fill="rgb(211,96,1)" rx="2" ry="2" />
<text  x="431.30" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="79.9" y="549" width="0.3" height="15.0" fill="rgb(216,42,30)" rx="2" ry="2" />
<text  x="82.94" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="393.7" y="213" width="0.2" height="15.0" fill="rgb(231,8,50)" rx="2" ry="2" />
<text  x="396.66" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="570.0" y="309" width="0.2" height="15.0" fill="rgb(243,223,14)" rx="2" ry="2" />
<text  x="572.98" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="59.7" y="165" width="0.2" height="15.0" fill="rgb(219,197,5)" rx="2" ry="2" />
<text  x="62.70" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="622.8" y="421" width="0.7" height="15.0" fill="rgb(235,63,26)" rx="2" ry="2" />
<text  x="625.83" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="67.3" y="453" width="0.3" height="15.0" fill="rgb(216,212,11)" rx="2" ry="2" />
<text  x="70.35" y="463.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="459.6" y="277" width="1.3" height="15.0" fill="rgb(217,65,9)" rx="2" ry="2" />
<text  x="462.56" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="42.4" y="309" width="0.7" height="15.0" fill="rgb(235,163,28)" rx="2" ry="2" />
<text  x="45.38" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.3" y="229" width="0.2" height="15.0" fill="rgb(221,14,41)" rx="2" ry="2" />
<text  x="64.28" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (2 samples, 0.04%)</title><rect x="105.4" y="501" width="0.4" height="15.0" fill="rgb(228,58,32)" rx="2" ry="2" />
<text  x="108.35" y="511.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="576.0" y="389" width="0.5" height="15.0" fill="rgb(254,122,36)" rx="2" ry="2" />
<text  x="579.05" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="726.1" y="325" width="0.4" height="15.0" fill="rgb(205,43,9)" rx="2" ry="2" />
<text  x="729.05" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="191.0" y="309" width="0.3" height="15.0" fill="rgb(232,224,20)" rx="2" ry="2" />
<text  x="194.04" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="45.1" y="181" width="0.7" height="15.0" fill="rgb(248,152,53)" rx="2" ry="2" />
<text  x="48.08" y="191.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (11 samples, 0.21%)</title><rect x="185.2" y="277" width="2.5" height="15.0" fill="rgb(241,229,21)" rx="2" ry="2" />
<text  x="188.19" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::attach_service_level_statement*, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.0" y="389" width="0.2" height="15.0" fill="rgb(251,80,37)" rx="2" ry="2" />
<text  x="66.97" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="711.7" y="469" width="0.2" height="15.0" fill="rgb(213,130,26)" rx="2" ry="2" />
<text  x="714.66" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="1166.8" y="469" width="0.3" height="15.0" fill="rgb(241,58,26)" rx="2" ry="2" />
<text  x="1169.84" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.4" y="389" width="0.2" height="15.0" fill="rgb(213,81,8)" rx="2" ry="2" />
<text  x="67.42" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1015.9" y="229" width="0.5" height="15.0" fill="rgb(220,142,39)" rx="2" ry="2" />
<text  x="1018.93" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="830.4" y="437" width="0.7" height="15.0" fill="rgb(244,115,16)" rx="2" ry="2" />
<text  x="833.40" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (73 samples, 1.39%)</title><rect x="1004.9" y="277" width="16.4" height="15.0" fill="rgb(223,87,13)" rx="2" ry="2" />
<text  x="1007.92" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="564.4" y="325" width="0.4" height="15.0" fill="rgb(208,110,11)" rx="2" ry="2" />
<text  x="567.35" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="834.0" y="373" width="0.2" height="15.0" fill="rgb(230,213,22)" rx="2" ry="2" />
<text  x="837.00" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (7 samples, 0.13%)</title><rect x="1024.0" y="293" width="1.6" height="15.0" fill="rgb(222,15,46)" rx="2" ry="2" />
<text  x="1027.03" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="594.0" y="421" width="0.3" height="15.0" fill="rgb(253,227,12)" rx="2" ry="2" />
<text  x="597.04" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="46.4" y="245" width="0.5" height="15.0" fill="rgb(254,176,15)" rx="2" ry="2" />
<text  x="49.43" y="255.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="478.0" y="357" width="0.4" height="15.0" fill="rgb(248,152,49)" rx="2" ry="2" />
<text  x="481.00" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="782.0" y="293" width="0.5" height="15.0" fill="rgb(245,222,43)" rx="2" ry="2" />
<text  x="785.05" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="16.7" y="613" width="0.3" height="15.0" fill="rgb(228,66,0)" rx="2" ry="2" />
<text  x="19.75" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (2 samples, 0.04%)</title><rect x="851.5" y="341" width="0.5" height="15.0" fill="rgb(232,190,33)" rx="2" ry="2" />
<text  x="854.54" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="62.6" y="389" width="0.2" height="15.0" fill="rgb(237,182,20)" rx="2" ry="2" />
<text  x="65.62" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="765.9" y="405" width="0.6" height="15.0" fill="rgb(219,51,32)" rx="2" ry="2" />
<text  x="768.86" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (2 samples, 0.04%)</title><rect x="343.3" y="229" width="0.4" height="15.0" fill="rgb(233,138,20)" rx="2" ry="2" />
<text  x="346.29" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (17 samples, 0.32%)</title><rect x="282.3" y="293" width="3.9" height="15.0" fill="rgb(250,94,34)" rx="2" ry="2" />
<text  x="285.34" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="415.0" y="197" width="0.3" height="15.0" fill="rgb(254,186,45)" rx="2" ry="2" />
<text  x="418.03" y="207.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="274.2" y="213" width="0.7" height="15.0" fill="rgb(230,209,53)" rx="2" ry="2" />
<text  x="277.25" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="945.5" y="389" width="0.5" height="15.0" fill="rgb(253,148,50)" rx="2" ry="2" />
<text  x="948.54" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="739.1" y="389" width="0.2" height="15.0" fill="rgb(225,122,27)" rx="2" ry="2" />
<text  x="742.09" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="784.3" y="261" width="0.2" height="15.0" fill="rgb(231,111,52)" rx="2" ry="2" />
<text  x="787.30" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="73.4" y="405" width="0.2" height="15.0" fill="rgb(227,187,15)" rx="2" ry="2" />
<text  x="76.42" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="464.7" y="309" width="0.5" height="15.0" fill="rgb(243,90,7)" rx="2" ry="2" />
<text  x="467.73" y="319.5" ></text>
</g>
<g >
<title>perf_simple_que (5,246 samples, 99.98%)</title><rect x="10.0" y="677" width="1179.8" height="15.0" fill="rgb(209,228,39)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >perf_simple_que</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (32 samples, 0.61%)</title><rect x="422.9" y="261" width="7.2" height="15.0" fill="rgb(250,121,17)" rx="2" ry="2" />
<text  x="425.90" y="271.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%)</title><rect x="11.3" y="629" width="0.3" height="15.0" fill="rgb(239,132,53)" rx="2" ry="2" />
<text  x="14.35" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="57.2" y="213" width="0.3" height="15.0" fill="rgb(233,162,9)" rx="2" ry="2" />
<text  x="60.23" y="223.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%)</title><rect x="360.8" y="213" width="0.3" height="15.0" fill="rgb(233,31,36)" rx="2" ry="2" />
<text  x="363.83" y="223.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="575.8" y="389" width="0.2" height="15.0" fill="rgb(254,131,4)" rx="2" ry="2" />
<text  x="578.82" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1103.6" y="421" width="0.3" height="15.0" fill="rgb(240,4,28)" rx="2" ry="2" />
<text  x="1106.64" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="55.2" y="181" width="0.5" height="15.0" fill="rgb(205,92,9)" rx="2" ry="2" />
<text  x="58.20" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="1032.4" y="293" width="0.2" height="15.0" fill="rgb(238,205,24)" rx="2" ry="2" />
<text  x="1035.35" y="303.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (138 samples, 2.63%)</title><rect x="213.1" y="197" width="31.0" height="15.0" fill="rgb(245,152,14)" rx="2" ry="2" />
<text  x="216.08" y="207.5" >cl..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="857.2" y="293" width="0.2" height="15.0" fill="rgb(240,157,44)" rx="2" ry="2" />
<text  x="860.16" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="632.5" y="517" width="0.4" height="15.0" fill="rgb(214,155,42)" rx="2" ry="2" />
<text  x="635.50" y="527.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="807.2" y="373" width="0.3" height="15.0" fill="rgb(245,148,29)" rx="2" ry="2" />
<text  x="810.24" y="383.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="18.3" y="133" width="0.2" height="15.0" fill="rgb(230,211,33)" rx="2" ry="2" />
<text  x="21.32" y="143.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (12 samples, 0.23%)</title><rect x="837.4" y="437" width="2.7" height="15.0" fill="rgb(207,195,10)" rx="2" ry="2" />
<text  x="840.37" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (17 samples, 0.32%)</title><rect x="671.6" y="501" width="3.9" height="15.0" fill="rgb(232,186,44)" rx="2" ry="2" />
<text  x="674.63" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="45.3" y="165" width="0.5" height="15.0" fill="rgb(248,58,24)" rx="2" ry="2" />
<text  x="48.31" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%)</title><rect x="771.5" y="373" width="0.2" height="15.0" fill="rgb(248,185,37)" rx="2" ry="2" />
<text  x="774.48" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="394.8" y="181" width="0.4" height="15.0" fill="rgb(222,201,23)" rx="2" ry="2" />
<text  x="397.79" y="191.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%)</title><rect x="1066.3" y="277" width="0.9" height="15.0" fill="rgb(252,55,5)" rx="2" ry="2" />
<text  x="1069.31" y="287.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1119.6" y="501" width="7.9" height="15.0" fill="rgb(247,12,51)" rx="2" ry="2" />
<text  x="1122.61" y="511.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="553.3" y="373" width="1.2" height="15.0" fill="rgb(219,130,25)" rx="2" ry="2" />
<text  x="556.34" y="383.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="53" width="0.2" height="15.0" fill="rgb(239,28,54)" rx="2" ry="2" />
<text  x="57.08" y="63.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (68 samples, 1.30%)</title><rect x="1090.6" y="453" width="15.3" height="15.0" fill="rgb(205,67,33)" rx="2" ry="2" />
<text  x="1093.60" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%)</title><rect x="125.1" y="437" width="0.9" height="15.0" fill="rgb(230,128,4)" rx="2" ry="2" />
<text  x="128.14" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="797.3" y="277" width="0.3" height="15.0" fill="rgb(251,181,13)" rx="2" ry="2" />
<text  x="800.34" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="842.8" y="437" width="0.9" height="15.0" fill="rgb(244,187,4)" rx="2" ry="2" />
<text  x="845.77" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="619.2" y="453" width="0.5" height="15.0" fill="rgb(242,15,6)" rx="2" ry="2" />
<text  x="622.23" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="73.0" y="341" width="0.2" height="15.0" fill="rgb(218,27,29)" rx="2" ry="2" />
<text  x="75.97" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="261.9" y="229" width="0.4" height="15.0" fill="rgb(232,177,13)" rx="2" ry="2" />
<text  x="264.88" y="239.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="39.0" y="245" width="0.2" height="15.0" fill="rgb(211,167,46)" rx="2" ry="2" />
<text  x="42.01" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::register_stats (1 samples, 0.02%)</title><rect x="108.1" y="421" width="0.2" height="15.0" fill="rgb(221,21,33)" rx="2" ry="2" />
<text  x="111.05" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="16.7" y="517" width="0.3" height="15.0" fill="rgb(239,31,50)" rx="2" ry="2" />
<text  x="19.75" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="805.0" y="341" width="1.6" height="15.0" fill="rgb(225,136,19)" rx="2" ry="2" />
<text  x="807.99" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (2 samples, 0.04%)</title><rect x="1081.2" y="341" width="0.4" height="15.0" fill="rgb(251,72,21)" rx="2" ry="2" />
<text  x="1084.15" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="925.1" y="357" width="0.7" height="15.0" fill="rgb(211,39,51)" rx="2" ry="2" />
<text  x="928.08" y="367.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.10%)</title><rect x="1079.1" y="325" width="1.2" height="15.0" fill="rgb(225,226,40)" rx="2" ry="2" />
<text  x="1082.13" y="335.5" ></text>
</g>
<g >
<title>seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="631.4" y="517" width="0.2" height="15.0" fill="rgb(212,0,48)" rx="2" ry="2" />
<text  x="634.37" y="527.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="52.5" y="293" width="0.2" height="15.0" fill="rgb(207,119,22)" rx="2" ry="2" />
<text  x="55.50" y="303.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="688.3" y="517" width="0.4" height="15.0" fill="rgb(240,54,46)" rx="2" ry="2" />
<text  x="691.27" y="527.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%)</title><rect x="686.5" y="325" width="0.2" height="15.0" fill="rgb(226,182,44)" rx="2" ry="2" />
<text  x="689.47" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="40.1" y="341" width="0.3" height="15.0" fill="rgb(245,227,35)" rx="2" ry="2" />
<text  x="43.14" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (7 samples, 0.13%)</title><rect x="707.8" y="469" width="1.6" height="15.0" fill="rgb(242,154,54)" rx="2" ry="2" />
<text  x="710.83" y="479.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="80.2" y="565" width="0.2" height="15.0" fill="rgb(251,67,36)" rx="2" ry="2" />
<text  x="83.17" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="21.0" y="469" width="0.2" height="15.0" fill="rgb(230,120,21)" rx="2" ry="2" />
<text  x="24.02" y="479.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.02%)</title><rect x="83.1" y="661" width="0.2" height="15.0" fill="rgb(240,81,48)" rx="2" ry="2" />
<text  x="86.09" y="671.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="814.7" y="309" width="0.2" height="15.0" fill="rgb(242,120,26)" rx="2" ry="2" />
<text  x="817.66" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (2 samples, 0.04%)</title><rect x="1017.1" y="245" width="0.4" height="15.0" fill="rgb(247,149,27)" rx="2" ry="2" />
<text  x="1020.06" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; (1 samples, 0.02%)</title><rect x="48.5" y="325" width="0.2" height="15.0" fill="rgb(229,181,30)" rx="2" ry="2" />
<text  x="51.46" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="18.3" y="517" width="0.2" height="15.0" fill="rgb(254,76,34)" rx="2" ry="2" />
<text  x="21.32" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="92.3" y="517" width="0.5" height="15.0" fill="rgb(232,166,6)" rx="2" ry="2" />
<text  x="95.31" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (3 samples, 0.06%)</title><rect x="936.3" y="389" width="0.7" height="15.0" fill="rgb(217,184,34)" rx="2" ry="2" />
<text  x="939.32" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="646.7" y="469" width="0.2" height="15.0" fill="rgb(246,48,54)" rx="2" ry="2" />
<text  x="649.66" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (37 samples, 0.71%)</title><rect x="827.7" y="469" width="8.3" height="15.0" fill="rgb(233,59,23)" rx="2" ry="2" />
<text  x="830.70" y="479.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (4 samples, 0.08%)</title><rect x="1123.4" y="261" width="0.9" height="15.0" fill="rgb(233,136,46)" rx="2" ry="2" />
<text  x="1126.43" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="888.0" y="293" width="1.1" height="15.0" fill="rgb(209,42,51)" rx="2" ry="2" />
<text  x="890.97" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.2" y="229" width="0.3" height="15.0" fill="rgb(252,108,28)" rx="2" ry="2" />
<text  x="42.24" y="239.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="54.3" y="213" width="0.2" height="15.0" fill="rgb(246,42,22)" rx="2" ry="2" />
<text  x="57.30" y="223.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (24 samples, 0.46%)</title><rect x="495.8" y="261" width="5.4" height="15.0" fill="rgb(234,192,10)" rx="2" ry="2" />
<text  x="498.76" y="271.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="106.0" y="453" width="0.3" height="15.0" fill="rgb(240,125,25)" rx="2" ry="2" />
<text  x="109.03" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="857.8" y="277" width="0.3" height="15.0" fill="rgb(214,213,27)" rx="2" ry="2" />
<text  x="860.84" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="896.7" y="309" width="0.5" height="15.0" fill="rgb(243,17,7)" rx="2" ry="2" />
<text  x="899.74" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="38.8" y="309" width="0.4" height="15.0" fill="rgb(222,229,47)" rx="2" ry="2" />
<text  x="41.79" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="774.2" y="341" width="0.4" height="15.0" fill="rgb(226,180,28)" rx="2" ry="2" />
<text  x="777.18" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="55.2" y="197" width="0.9" height="15.0" fill="rgb(210,73,54)" rx="2" ry="2" />
<text  x="58.20" y="207.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="856.9" y="261" width="0.3" height="15.0" fill="rgb(214,196,14)" rx="2" ry="2" />
<text  x="859.94" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (622 samples, 11.85%)</title><rect x="948.5" y="437" width="139.8" height="15.0" fill="rgb(225,74,8)" rx="2" ry="2" />
<text  x="951.47" y="447.5" >service::storage_..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="295.4" y="341" width="0.4" height="15.0" fill="rgb(239,5,40)" rx="2" ry="2" />
<text  x="298.39" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="261.7" y="229" width="0.2" height="15.0" fill="rgb(215,143,53)" rx="2" ry="2" />
<text  x="264.65" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="691.6" y="485" width="0.3" height="15.0" fill="rgb(235,221,7)" rx="2" ry="2" />
<text  x="694.64" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (16 samples, 0.30%)</title><rect x="1162.1" y="517" width="3.6" height="15.0" fill="rgb(237,178,49)" rx="2" ry="2" />
<text  x="1165.11" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (4 samples, 0.08%)</title><rect x="232.4" y="101" width="0.9" height="15.0" fill="rgb(206,157,27)" rx="2" ry="2" />
<text  x="235.42" y="111.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (5 samples, 0.10%)</title><rect x="851.3" y="405" width="1.1" height="15.0" fill="rgb(224,178,40)" rx="2" ry="2" />
<text  x="854.32" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="327.3" y="325" width="0.2" height="15.0" fill="rgb(235,53,17)" rx="2" ry="2" />
<text  x="330.32" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (234 samples, 4.46%)</title><rect x="985.3" y="341" width="52.7" height="15.0" fill="rgb(222,109,11)" rx="2" ry="2" />
<text  x="988.35" y="351.5" >servi..</text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (2 samples, 0.04%)</title><rect x="342.8" y="229" width="0.5" height="15.0" fill="rgb(238,6,28)" rx="2" ry="2" />
<text  x="345.84" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (4 samples, 0.08%)</title><rect x="623.5" y="437" width="0.9" height="15.0" fill="rgb(248,153,26)" rx="2" ry="2" />
<text  x="626.50" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="436.2" y="293" width="0.4" height="15.0" fill="rgb(217,48,9)" rx="2" ry="2" />
<text  x="439.17" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%)</title><rect x="741.1" y="325" width="0.5" height="15.0" fill="rgb(240,0,9)" rx="2" ry="2" />
<text  x="744.12" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1085.7" y="389" width="0.2" height="15.0" fill="rgb(206,169,49)" rx="2" ry="2" />
<text  x="1088.65" y="399.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1023.4" y="293" width="0.2" height="15.0" fill="rgb(225,2,40)" rx="2" ry="2" />
<text  x="1026.36" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (4 samples, 0.08%)</title><rect x="876.1" y="453" width="0.9" height="15.0" fill="rgb(251,227,45)" rx="2" ry="2" />
<text  x="879.05" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="692.5" y="485" width="0.5" height="15.0" fill="rgb(234,125,11)" rx="2" ry="2" />
<text  x="695.54" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="18.3" y="549" width="0.2" height="15.0" fill="rgb(241,84,11)" rx="2" ry="2" />
<text  x="21.32" y="559.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="856.3" y="293" width="0.2" height="15.0" fill="rgb(229,169,51)" rx="2" ry="2" />
<text  x="859.26" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1029.2" y="309" width="0.5" height="15.0" fill="rgb(205,46,1)" rx="2" ry="2" />
<text  x="1032.20" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (22 samples, 0.42%)</title><rect x="456.9" y="309" width="4.9" height="15.0" fill="rgb(229,85,43)" rx="2" ry="2" />
<text  x="459.86" y="319.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (7 samples, 0.13%)</title><rect x="12.0" y="613" width="1.6" height="15.0" fill="rgb(226,9,27)" rx="2" ry="2" />
<text  x="15.02" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="709.9" y="517" width="0.4" height="15.0" fill="rgb(209,210,40)" rx="2" ry="2" />
<text  x="712.86" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="41.3" y="309" width="0.2" height="15.0" fill="rgb(250,143,31)" rx="2" ry="2" />
<text  x="44.26" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (24 samples, 0.46%)</title><rect x="1129.5" y="277" width="5.4" height="15.0" fill="rgb(247,153,33)" rx="2" ry="2" />
<text  x="1132.50" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (2 samples, 0.04%)</title><rect x="106.9" y="453" width="0.5" height="15.0" fill="rgb(235,192,9)" rx="2" ry="2" />
<text  x="109.93" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%)</title><rect x="470.8" y="325" width="0.2" height="15.0" fill="rgb(231,104,10)" rx="2" ry="2" />
<text  x="473.80" y="335.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%)</title><rect x="1078.9" y="341" width="0.2" height="15.0" fill="rgb(208,36,36)" rx="2" ry="2" />
<text  x="1081.90" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="610.0" y="453" width="0.9" height="15.0" fill="rgb(231,186,53)" rx="2" ry="2" />
<text  x="613.01" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="532.2" y="357" width="0.2" height="15.0" fill="rgb(227,35,13)" rx="2" ry="2" />
<text  x="535.20" y="367.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (4 samples, 0.08%)</title><rect x="263.5" y="261" width="0.9" height="15.0" fill="rgb(250,185,14)" rx="2" ry="2" />
<text  x="266.45" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="1004.7" y="229" width="0.2" height="15.0" fill="rgb(209,195,20)" rx="2" ry="2" />
<text  x="1007.69" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="48.7" y="325" width="1.1" height="15.0" fill="rgb(231,184,9)" rx="2" ry="2" />
<text  x="51.68" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="22.1" y="309" width="0.3" height="15.0" fill="rgb(231,184,26)" rx="2" ry="2" />
<text  x="25.14" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (42 samples, 0.80%)</title><rect x="700.4" y="517" width="9.5" height="15.0" fill="rgb(247,83,11)" rx="2" ry="2" />
<text  x="703.41" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="358.4" y="213" width="0.4" height="15.0" fill="rgb(230,20,31)" rx="2" ry="2" />
<text  x="361.36" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="1189.8" y="629" width="0.2" height="15.0" fill="rgb(210,214,44)" rx="2" ry="2" />
<text  x="1192.78" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="796.2" y="245" width="0.5" height="15.0" fill="rgb(237,189,31)" rx="2" ry="2" />
<text  x="799.22" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (66 samples, 1.26%)</title><rect x="23.5" y="405" width="14.8" height="15.0" fill="rgb(231,198,31)" rx="2" ry="2" />
<text  x="26.49" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="977.5" y="325" width="0.9" height="15.0" fill="rgb(218,51,39)" rx="2" ry="2" />
<text  x="980.48" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="848.8" y="373" width="0.3" height="15.0" fill="rgb(246,95,31)" rx="2" ry="2" />
<text  x="851.84" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (5 samples, 0.10%)</title><rect x="262.3" y="261" width="1.2" height="15.0" fill="rgb(253,189,26)" rx="2" ry="2" />
<text  x="265.33" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="830.0" y="389" width="0.2" height="15.0" fill="rgb(248,175,22)" rx="2" ry="2" />
<text  x="832.95" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="453" width="0.2" height="15.0" fill="rgb(243,89,34)" rx="2" ry="2" />
<text  x="1169.39" y="463.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="80.2" y="485" width="0.2" height="15.0" fill="rgb(207,108,0)" rx="2" ry="2" />
<text  x="83.17" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.3" y="261" width="0.2" height="15.0" fill="rgb(237,212,6)" rx="2" ry="2" />
<text  x="62.25" y="271.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.13%)</title><rect x="438.6" y="405" width="1.6" height="15.0" fill="rgb(254,221,49)" rx="2" ry="2" />
<text  x="441.64" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="103.6" y="517" width="0.2" height="15.0" fill="rgb(227,52,23)" rx="2" ry="2" />
<text  x="106.55" y="527.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (8 samples, 0.15%)</title><rect x="528.6" y="357" width="1.8" height="15.0" fill="rgb(227,117,36)" rx="2" ry="2" />
<text  x="531.60" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="797.3" y="261" width="0.3" height="15.0" fill="rgb(220,192,41)" rx="2" ry="2" />
<text  x="800.34" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="57.2" y="181" width="0.3" height="15.0" fill="rgb(235,125,35)" rx="2" ry="2" />
<text  x="60.23" y="191.5" ></text>
</g>
<g >
<title>std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::map (1 samples, 0.02%)</title><rect x="106.9" y="421" width="0.3" height="15.0" fill="rgb(228,9,5)" rx="2" ry="2" />
<text  x="109.93" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="775.1" y="325" width="0.2" height="15.0" fill="rgb(227,203,53)" rx="2" ry="2" />
<text  x="778.08" y="335.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (7 samples, 0.13%)</title><rect x="540.1" y="293" width="1.5" height="15.0" fill="rgb(212,190,31)" rx="2" ry="2" />
<text  x="543.07" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="94.6" y="517" width="0.4" height="15.0" fill="rgb(216,145,24)" rx="2" ry="2" />
<text  x="97.56" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="181.4" y="261" width="0.4" height="15.0" fill="rgb(253,152,37)" rx="2" ry="2" />
<text  x="184.37" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (11 samples, 0.21%)</title><rect x="300.1" y="357" width="2.5" height="15.0" fill="rgb(214,79,14)" rx="2" ry="2" />
<text  x="303.11" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="60.2" y="325" width="0.4" height="15.0" fill="rgb(218,18,39)" rx="2" ry="2" />
<text  x="63.15" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="201.4" y="181" width="0.2" height="15.0" fill="rgb(221,179,16)" rx="2" ry="2" />
<text  x="204.38" y="191.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a21b1fbb2f481671c80560d96a8acc1cf916b468] (1 samples, 0.02%)</title><rect x="371.8" y="197" width="0.3" height="15.0" fill="rgb(222,165,22)" rx="2" ry="2" />
<text  x="374.85" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="832.9" y="405" width="2.7" height="15.0" fill="rgb(227,103,25)" rx="2" ry="2" />
<text  x="835.87" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (4 samples, 0.08%)</title><rect x="201.6" y="229" width="0.9" height="15.0" fill="rgb(206,134,40)" rx="2" ry="2" />
<text  x="204.61" y="239.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (3 samples, 0.06%)</title><rect x="598.8" y="421" width="0.6" height="15.0" fill="rgb(234,189,29)" rx="2" ry="2" />
<text  x="601.76" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1121.4" y="261" width="0.2" height="15.0" fill="rgb(239,133,51)" rx="2" ry="2" />
<text  x="1124.41" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="925.5" y="341" width="0.3" height="15.0" fill="rgb(244,221,2)" rx="2" ry="2" />
<text  x="928.53" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="509.9" y="309" width="0.9" height="15.0" fill="rgb(238,143,31)" rx="2" ry="2" />
<text  x="512.93" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="377.7" y="197" width="0.4" height="15.0" fill="rgb(205,148,53)" rx="2" ry="2" />
<text  x="380.70" y="207.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="107.8" y="389" width="0.3" height="15.0" fill="rgb(221,113,40)" rx="2" ry="2" />
<text  x="110.83" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="718.0" y="469" width="0.2" height="15.0" fill="rgb(232,73,32)" rx="2" ry="2" />
<text  x="720.96" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (87 samples, 1.66%)</title><rect x="1062.5" y="373" width="19.6" height="15.0" fill="rgb(221,182,54)" rx="2" ry="2" />
<text  x="1065.49" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1049.0" y="373" width="0.4" height="15.0" fill="rgb(248,161,43)" rx="2" ry="2" />
<text  x="1051.99" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="75.0" y="469" width="0.2" height="15.0" fill="rgb(253,215,18)" rx="2" ry="2" />
<text  x="77.99" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="46.7" y="181" width="0.2" height="15.0" fill="rgb(233,52,18)" rx="2" ry="2" />
<text  x="49.66" y="191.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="73.9" y="469" width="0.4" height="15.0" fill="rgb(222,216,47)" rx="2" ry="2" />
<text  x="76.87" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="44.2" y="245" width="0.2" height="15.0" fill="rgb(254,95,27)" rx="2" ry="2" />
<text  x="47.18" y="255.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="797.6" y="277" width="1.3" height="15.0" fill="rgb(245,160,19)" rx="2" ry="2" />
<text  x="800.57" y="287.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1169.8" y="581" width="0.2" height="15.0" fill="rgb(237,9,41)" rx="2" ry="2" />
<text  x="1172.76" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.10%)</title><rect x="1026.1" y="293" width="1.1" height="15.0" fill="rgb(242,165,45)" rx="2" ry="2" />
<text  x="1029.05" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (4 samples, 0.08%)</title><rect x="48.7" y="293" width="0.9" height="15.0" fill="rgb(243,34,3)" rx="2" ry="2" />
<text  x="51.68" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (1 samples, 0.02%)</title><rect x="10.7" y="437" width="0.2" height="15.0" fill="rgb(227,130,37)" rx="2" ry="2" />
<text  x="13.67" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (13 samples, 0.25%)</title><rect x="677.5" y="517" width="2.9" height="15.0" fill="rgb(205,211,44)" rx="2" ry="2" />
<text  x="680.47" y="527.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_charPositionInLine (1 samples, 0.02%)</title><rect x="25.3" y="309" width="0.2" height="15.0" fill="rgb(222,25,39)" rx="2" ry="2" />
<text  x="28.29" y="319.5" ></text>
</g>
<g >
<title>table::as_mutation_source (8 samples, 0.15%)</title><rect x="622.8" y="469" width="1.8" height="15.0" fill="rgb(233,152,36)" rx="2" ry="2" />
<text  x="625.83" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (27 samples, 0.51%)</title><rect x="465.6" y="341" width="6.1" height="15.0" fill="rgb(252,209,18)" rx="2" ry="2" />
<text  x="468.63" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="603.3" y="469" width="0.4" height="15.0" fill="rgb(228,0,45)" rx="2" ry="2" />
<text  x="606.26" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (496 samples, 9.45%)</title><rect x="326.0" y="373" width="111.5" height="15.0" fill="rgb(206,98,22)" rx="2" ry="2" />
<text  x="328.97" y="383.5" >seastar::futu..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="814.9" y="325" width="0.4" height="15.0" fill="rgb(250,129,52)" rx="2" ry="2" />
<text  x="817.88" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (4 samples, 0.08%)</title><rect x="1027.9" y="293" width="0.9" height="15.0" fill="rgb(235,87,33)" rx="2" ry="2" />
<text  x="1030.85" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="105.4" y="485" width="0.2" height="15.0" fill="rgb(217,201,12)" rx="2" ry="2" />
<text  x="108.35" y="495.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="849.1" y="309" width="0.2" height="15.0" fill="rgb(213,139,1)" rx="2" ry="2" />
<text  x="852.07" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="545.7" y="373" width="0.4" height="15.0" fill="rgb(239,12,7)" rx="2" ry="2" />
<text  x="548.69" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="45.3" y="149" width="0.5" height="15.0" fill="rgb(251,14,32)" rx="2" ry="2" />
<text  x="48.31" y="159.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.84%)</title><rect x="1179.7" y="661" width="9.9" height="15.0" fill="rgb(254,93,46)" rx="2" ry="2" />
<text  x="1182.66" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="52.7" y="293" width="0.3" height="15.0" fill="rgb(232,26,41)" rx="2" ry="2" />
<text  x="55.73" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="133.9" y="485" width="0.5" height="15.0" fill="rgb(216,101,14)" rx="2" ry="2" />
<text  x="136.91" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (13 samples, 0.25%)</title><rect x="680.6" y="517" width="2.9" height="15.0" fill="rgb(215,45,32)" rx="2" ry="2" />
<text  x="683.62" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (29 samples, 0.55%)</title><rect x="67.8" y="485" width="6.5" height="15.0" fill="rgb(250,220,42)" rx="2" ry="2" />
<text  x="70.80" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1104.1" y="421" width="0.4" height="15.0" fill="rgb(240,113,15)" rx="2" ry="2" />
<text  x="1107.09" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="214.2" y="181" width="0.2" height="15.0" fill="rgb(252,57,28)" rx="2" ry="2" />
<text  x="217.20" y="191.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1122.1" y="277" width="0.2" height="15.0" fill="rgb(237,76,13)" rx="2" ry="2" />
<text  x="1125.08" y="287.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,786 samples, 34.04%)</title><rect x="157.3" y="469" width="401.7" height="15.0" fill="rgb(244,34,37)" rx="2" ry="2" />
<text  x="160.30" y="479.5" >query::querier&lt;</text>
</g>
<g >
<title>cql3::query_processor::execute_direct (252 samples, 4.80%)</title><rect x="21.0" y="533" width="56.7" height="15.0" fill="rgb(251,148,27)" rx="2" ry="2" />
<text  x="24.02" y="543.5" >cql3::..</text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (7 samples, 0.13%)</title><rect x="1056.6" y="341" width="1.6" height="15.0" fill="rgb(248,133,25)" rx="2" ry="2" />
<text  x="1059.64" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="829.1" y="373" width="0.2" height="15.0" fill="rgb(234,20,7)" rx="2" ry="2" />
<text  x="832.05" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="899.4" y="389" width="0.3" height="15.0" fill="rgb(228,11,5)" rx="2" ry="2" />
<text  x="902.44" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="284.6" y="229" width="0.2" height="15.0" fill="rgb(218,183,40)" rx="2" ry="2" />
<text  x="287.59" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (6 samples, 0.11%)</title><rect x="1036.2" y="325" width="1.3" height="15.0" fill="rgb(240,32,40)" rx="2" ry="2" />
<text  x="1039.17" y="335.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1124.1" y="229" width="0.2" height="15.0" fill="rgb(220,156,7)" rx="2" ry="2" />
<text  x="1127.11" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="422.4" y="261" width="0.3" height="15.0" fill="rgb(241,42,52)" rx="2" ry="2" />
<text  x="425.45" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1135.8" y="517" width="0.2" height="15.0" fill="rgb(251,125,25)" rx="2" ry="2" />
<text  x="1138.80" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1128.8" y="245" width="0.5" height="15.0" fill="rgb(254,35,28)" rx="2" ry="2" />
<text  x="1131.83" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (9 samples, 0.17%)</title><rect x="793.7" y="165" width="2.1" height="15.0" fill="rgb(229,213,29)" rx="2" ry="2" />
<text  x="796.74" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="775.3" y="325" width="0.2" height="15.0" fill="rgb(220,218,21)" rx="2" ry="2" />
<text  x="778.30" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%)</title><rect x="338.6" y="261" width="0.2" height="15.0" fill="rgb(250,115,21)" rx="2" ry="2" />
<text  x="341.56" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="38.8" y="325" width="0.4" height="15.0" fill="rgb(239,208,37)" rx="2" ry="2" />
<text  x="41.79" y="335.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (4 samples, 0.08%)</title><rect x="856.3" y="325" width="0.9" height="15.0" fill="rgb(240,182,49)" rx="2" ry="2" />
<text  x="859.26" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::init_scheduling_group (1 samples, 0.02%)</title><rect x="108.1" y="469" width="0.2" height="15.0" fill="rgb(225,111,2)" rx="2" ry="2" />
<text  x="111.05" y="479.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="463.2" y="325" width="0.2" height="15.0" fill="rgb(251,226,45)" rx="2" ry="2" />
<text  x="466.15" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (3 samples, 0.06%)</title><rect x="350.7" y="197" width="0.7" height="15.0" fill="rgb(247,126,1)" rx="2" ry="2" />
<text  x="353.71" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%)</title><rect x="303.7" y="389" width="0.7" height="15.0" fill="rgb(221,81,46)" rx="2" ry="2" />
<text  x="306.71" y="399.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1122.8" y="245" width="0.2" height="15.0" fill="rgb(216,95,46)" rx="2" ry="2" />
<text  x="1125.76" y="255.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (155 samples, 2.95%)</title><rect x="771.7" y="373" width="34.9" height="15.0" fill="rgb(223,24,37)" rx="2" ry="2" />
<text  x="774.70" y="383.5" >se..</text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (5 samples, 0.10%)</title><rect x="28.2" y="293" width="1.1" height="15.0" fill="rgb(224,186,8)" rx="2" ry="2" />
<text  x="31.22" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="697.9" y="485" width="0.3" height="15.0" fill="rgb(216,94,12)" rx="2" ry="2" />
<text  x="700.94" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="583.7" y="405" width="0.7" height="15.0" fill="rgb(228,3,52)" rx="2" ry="2" />
<text  x="586.70" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="40.1" y="357" width="0.3" height="15.0" fill="rgb(213,100,49)" rx="2" ry="2" />
<text  x="43.14" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (1 samples, 0.02%)</title><rect x="559.9" y="373" width="0.2" height="15.0" fill="rgb(209,190,14)" rx="2" ry="2" />
<text  x="562.86" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="561.0" y="325" width="0.2" height="15.0" fill="rgb(250,91,51)" rx="2" ry="2" />
<text  x="563.98" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="907.3" y="389" width="1.1" height="15.0" fill="rgb(209,61,19)" rx="2" ry="2" />
<text  x="910.31" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="55.2" y="261" width="0.9" height="15.0" fill="rgb(234,56,46)" rx="2" ry="2" />
<text  x="58.20" y="271.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="18.8" y="437" width="0.2" height="15.0" fill="rgb(211,79,11)" rx="2" ry="2" />
<text  x="21.77" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="631.6" y="421" width="0.2" height="15.0" fill="rgb(241,79,37)" rx="2" ry="2" />
<text  x="634.60" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="318.8" y="309" width="0.2" height="15.0" fill="rgb(209,131,29)" rx="2" ry="2" />
<text  x="321.77" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="750.3" y="421" width="1.4" height="15.0" fill="rgb(229,137,37)" rx="2" ry="2" />
<text  x="753.34" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1114.2" y="421" width="0.5" height="15.0" fill="rgb(254,162,52)" rx="2" ry="2" />
<text  x="1117.21" y="431.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="105.1" y="517" width="0.3" height="15.0" fill="rgb(238,195,9)" rx="2" ry="2" />
<text  x="108.13" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="101.8" y="421" width="0.2" height="15.0" fill="rgb(225,159,7)" rx="2" ry="2" />
<text  x="104.76" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="620.6" y="469" width="0.2" height="15.0" fill="rgb(230,195,24)" rx="2" ry="2" />
<text  x="623.58" y="479.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1115.3" y="453" width="0.3" height="15.0" fill="rgb(207,226,23)" rx="2" ry="2" />
<text  x="1118.34" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="75.9" y="229" width="0.2" height="15.0" fill="rgb(208,168,33)" rx="2" ry="2" />
<text  x="78.89" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="782.5" y="293" width="0.2" height="15.0" fill="rgb(247,104,49)" rx="2" ry="2" />
<text  x="785.50" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="50.0" y="325" width="0.3" height="15.0" fill="rgb(249,195,51)" rx="2" ry="2" />
<text  x="53.03" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.7" y="389" width="0.2" height="15.0" fill="rgb(212,92,26)" rx="2" ry="2" />
<text  x="82.72" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="819.4" y="325" width="0.4" height="15.0" fill="rgb(206,116,5)" rx="2" ry="2" />
<text  x="822.38" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="587.5" y="453" width="0.2" height="15.0" fill="rgb(232,123,54)" rx="2" ry="2" />
<text  x="590.52" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.13%)</title><rect x="1141.9" y="517" width="1.5" height="15.0" fill="rgb(224,152,42)" rx="2" ry="2" />
<text  x="1144.87" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (9 samples, 0.17%)</title><rect x="748.1" y="437" width="2.0" height="15.0" fill="rgb(217,25,5)" rx="2" ry="2" />
<text  x="751.09" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="80.2" y="517" width="0.2" height="15.0" fill="rgb(245,134,23)" rx="2" ry="2" />
<text  x="83.17" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (7 samples, 0.13%)</title><rect x="239.6" y="149" width="1.6" height="15.0" fill="rgb(218,123,21)" rx="2" ry="2" />
<text  x="242.61" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonTokenStream (1 samples, 0.02%)</title><rect x="21.2" y="453" width="0.3" height="15.0" fill="rgb(254,93,29)" rx="2" ry="2" />
<text  x="24.24" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1043.6" y="309" width="0.2" height="15.0" fill="rgb(250,11,33)" rx="2" ry="2" />
<text  x="1046.60" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="50.3" y="309" width="0.2" height="15.0" fill="rgb(245,111,40)" rx="2" ry="2" />
<text  x="53.26" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (10 samples, 0.19%)</title><rect x="332.7" y="293" width="2.3" height="15.0" fill="rgb(252,123,38)" rx="2" ry="2" />
<text  x="335.72" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (34 samples, 0.65%)</title><rect x="1127.7" y="357" width="7.7" height="15.0" fill="rgb(238,150,16)" rx="2" ry="2" />
<text  x="1130.71" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (6 samples, 0.11%)</title><rect x="441.6" y="453" width="1.3" height="15.0" fill="rgb(219,185,2)" rx="2" ry="2" />
<text  x="444.56" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="503.9" y="357" width="0.4" height="15.0" fill="rgb(228,50,15)" rx="2" ry="2" />
<text  x="506.86" y="367.5" ></text>
</g>
<g >
<title>query_result_builder::consume (180 samples, 3.43%)</title><rect x="352.1" y="245" width="40.4" height="15.0" fill="rgb(212,23,19)" rx="2" ry="2" />
<text  x="355.06" y="255.5" >que..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (5 samples, 0.10%)</title><rect x="293.4" y="325" width="1.1" height="15.0" fill="rgb(210,103,51)" rx="2" ry="2" />
<text  x="296.36" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="691.6" y="469" width="0.3" height="15.0" fill="rgb(246,87,26)" rx="2" ry="2" />
<text  x="694.64" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1114.7" y="453" width="0.2" height="15.0" fill="rgb(247,29,46)" rx="2" ry="2" />
<text  x="1117.66" y="463.5" ></text>
</g>
<g >
<title>query_state::query_state (16 samples, 0.30%)</title><rect x="596.3" y="469" width="3.6" height="15.0" fill="rgb(241,7,26)" rx="2" ry="2" />
<text  x="599.29" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="435.7" y="325" width="0.2" height="15.0" fill="rgb(240,182,49)" rx="2" ry="2" />
<text  x="438.72" y="335.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%)</title><rect x="845.5" y="517" width="0.2" height="15.0" fill="rgb(231,178,31)" rx="2" ry="2" />
<text  x="848.47" y="527.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (3 samples, 0.06%)</title><rect x="686.2" y="501" width="0.7" height="15.0" fill="rgb(233,188,32)" rx="2" ry="2" />
<text  x="689.25" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (2 samples, 0.04%)</title><rect x="106.0" y="517" width="0.5" height="15.0" fill="rgb(239,136,26)" rx="2" ry="2" />
<text  x="109.03" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="291.6" y="309" width="0.4" height="15.0" fill="rgb(207,36,9)" rx="2" ry="2" />
<text  x="294.56" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="631.6" y="405" width="0.2" height="15.0" fill="rgb(233,48,53)" rx="2" ry="2" />
<text  x="634.60" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="427.8" y="229" width="0.3" height="15.0" fill="rgb(228,47,33)" rx="2" ry="2" />
<text  x="430.85" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (3 samples, 0.06%)</title><rect x="894.5" y="357" width="0.7" height="15.0" fill="rgb(252,180,18)" rx="2" ry="2" />
<text  x="897.49" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (301 samples, 5.74%)</title><rect x="970.3" y="389" width="67.7" height="15.0" fill="rgb(216,22,52)" rx="2" ry="2" />
<text  x="973.28" y="399.5" >service..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="556.5" y="453" width="0.7" height="15.0" fill="rgb(234,76,54)" rx="2" ry="2" />
<text  x="559.48" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="294.7" y="341" width="0.2" height="15.0" fill="rgb(209,6,28)" rx="2" ry="2" />
<text  x="297.71" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(238,216,35)" rx="2" ry="2" />
<text  x="13.67" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.11%)</title><rect x="853.6" y="405" width="1.3" height="15.0" fill="rgb(246,107,26)" rx="2" ry="2" />
<text  x="856.56" y="415.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::pop_front (1 samples, 0.02%)</title><rect x="1119.4" y="501" width="0.2" height="15.0" fill="rgb(249,118,27)" rx="2" ry="2" />
<text  x="1122.38" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result_set&gt; &gt;, db::system_keyspace::query (1 samples, 0.02%)</title><rect x="631.6" y="533" width="0.2" height="15.0" fill="rgb(225,146,29)" rx="2" ry="2" />
<text  x="634.60" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="966.0" y="373" width="0.2" height="15.0" fill="rgb(221,10,31)" rx="2" ry="2" />
<text  x="969.01" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="106.5" y="533" width="0.2" height="15.0" fill="rgb(230,106,17)" rx="2" ry="2" />
<text  x="109.48" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (534 samples, 10.18%)</title><rect x="321.5" y="437" width="120.1" height="15.0" fill="rgb(248,97,0)" rx="2" ry="2" />
<text  x="324.47" y="447.5" >seastar::futur..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="464.7" y="325" width="0.5" height="15.0" fill="rgb(243,81,48)" rx="2" ry="2" />
<text  x="467.73" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1148.4" y="437" width="0.2" height="15.0" fill="rgb(207,4,35)" rx="2" ry="2" />
<text  x="1151.40" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (4 samples, 0.08%)</title><rect x="1117.4" y="453" width="0.9" height="15.0" fill="rgb(215,128,10)" rx="2" ry="2" />
<text  x="1120.36" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1166.8" y="453" width="0.3" height="15.0" fill="rgb(250,70,33)" rx="2" ry="2" />
<text  x="1169.84" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (689 samples, 13.13%)</title><rect x="165.6" y="421" width="155.0" height="15.0" fill="rgb(210,55,19)" rx="2" ry="2" />
<text  x="168.62" y="431.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (3 samples, 0.06%)</title><rect x="737.7" y="373" width="0.7" height="15.0" fill="rgb(216,22,1)" rx="2" ry="2" />
<text  x="740.75" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%)</title><rect x="80.4" y="645" width="2.7" height="15.0" fill="rgb(206,12,53)" rx="2" ry="2" />
<text  x="83.39" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="1136.0" y="517" width="0.5" height="15.0" fill="rgb(241,163,35)" rx="2" ry="2" />
<text  x="1139.03" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="60.4" y="245" width="0.2" height="15.0" fill="rgb(205,24,42)" rx="2" ry="2" />
<text  x="63.38" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.5" y="245" width="0.2" height="15.0" fill="rgb(209,38,9)" rx="2" ry="2" />
<text  x="1123.51" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="52.1" y="309" width="0.4" height="15.0" fill="rgb(240,185,54)" rx="2" ry="2" />
<text  x="55.05" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_view_update_backlog (1 samples, 0.02%)</title><rect x="711.4" y="517" width="0.3" height="15.0" fill="rgb(206,47,21)" rx="2" ry="2" />
<text  x="714.43" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (6 samples, 0.11%)</title><rect x="593.4" y="437" width="1.3" height="15.0" fill="rgb(209,228,44)" rx="2" ry="2" />
<text  x="596.37" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="794.0" y="149" width="0.2" height="15.0" fill="rgb(207,197,19)" rx="2" ry="2" />
<text  x="796.97" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="755.1" y="389" width="0.2" height="15.0" fill="rgb(205,8,29)" rx="2" ry="2" />
<text  x="758.06" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="41.9" y="197" width="0.5" height="15.0" fill="rgb(209,45,37)" rx="2" ry="2" />
<text  x="44.93" y="207.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="501.8" y="341" width="0.5" height="15.0" fill="rgb(234,115,3)" rx="2" ry="2" />
<text  x="504.84" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="982.7" y="325" width="2.6" height="15.0" fill="rgb(247,109,16)" rx="2" ry="2" />
<text  x="985.65" y="335.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="18.5" y="293" width="0.3" height="15.0" fill="rgb(219,166,35)" rx="2" ry="2" />
<text  x="21.55" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="707.2" y="469" width="0.2" height="15.0" fill="rgb(253,91,27)" rx="2" ry="2" />
<text  x="710.16" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (42 samples, 0.80%)</title><rect x="884.4" y="325" width="9.4" height="15.0" fill="rgb(230,99,50)" rx="2" ry="2" />
<text  x="887.37" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.13%)</title><rect x="151.9" y="437" width="1.6" height="15.0" fill="rgb(249,47,29)" rx="2" ry="2" />
<text  x="154.91" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (8 samples, 0.15%)</title><rect x="48.0" y="341" width="1.8" height="15.0" fill="rgb(224,154,6)" rx="2" ry="2" />
<text  x="51.01" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (2 samples, 0.04%)</title><rect x="586.4" y="437" width="0.4" height="15.0" fill="rgb(224,96,18)" rx="2" ry="2" />
<text  x="589.39" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="48.2" y="309" width="0.3" height="15.0" fill="rgb(207,178,19)" rx="2" ry="2" />
<text  x="51.23" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="101.8" y="389" width="0.2" height="15.0" fill="rgb(254,8,13)" rx="2" ry="2" />
<text  x="104.76" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="891.8" y="261" width="0.2" height="15.0" fill="rgb(223,176,4)" rx="2" ry="2" />
<text  x="894.80" y="271.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;clustering_key_prefix&gt; (1 samples, 0.02%)</title><rect x="1131.1" y="133" width="0.2" height="15.0" fill="rgb(251,184,5)" rx="2" ry="2" />
<text  x="1134.08" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1119.8" y="421" width="7.7" height="15.0" fill="rgb(225,36,53)" rx="2" ry="2" />
<text  x="1122.83" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%)</title><rect x="455.1" y="325" width="0.9" height="15.0" fill="rgb(240,18,33)" rx="2" ry="2" />
<text  x="458.06" y="335.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (3 samples, 0.06%)</title><rect x="1131.5" y="165" width="0.7" height="15.0" fill="rgb(242,81,18)" rx="2" ry="2" />
<text  x="1134.53" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%)</title><rect x="980.4" y="309" width="0.7" height="15.0" fill="rgb(245,27,20)" rx="2" ry="2" />
<text  x="983.40" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (10 samples, 0.19%)</title><rect x="118.8" y="485" width="2.3" height="15.0" fill="rgb(205,63,46)" rx="2" ry="2" />
<text  x="121.85" y="495.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%)</title><rect x="1189.8" y="661" width="0.2" height="15.0" fill="rgb(245,192,23)" rx="2" ry="2" />
<text  x="1192.78" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1137.2" y="533" width="0.2" height="15.0" fill="rgb(240,133,2)" rx="2" ry="2" />
<text  x="1140.15" y="543.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="321.2" y="437" width="0.3" height="15.0" fill="rgb(241,129,27)" rx="2" ry="2" />
<text  x="324.25" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="268.6" y="261" width="0.2" height="15.0" fill="rgb(206,175,42)" rx="2" ry="2" />
<text  x="271.62" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (4 samples, 0.08%)</title><rect x="1168.6" y="517" width="0.9" height="15.0" fill="rgb(231,37,5)" rx="2" ry="2" />
<text  x="1171.64" y="527.5" ></text>
</g>
<g >
<title>concrete_type&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, abstract_type&gt;::make_value (1 samples, 0.02%)</title><rect x="18.3" y="37" width="0.2" height="15.0" fill="rgb(213,12,0)" rx="2" ry="2" />
<text  x="21.32" y="47.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (35 samples, 0.67%)</title><rect x="1119.6" y="437" width="7.9" height="15.0" fill="rgb(251,55,13)" rx="2" ry="2" />
<text  x="1122.61" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="106.7" y="437" width="0.2" height="15.0" fill="rgb(225,187,53)" rx="2" ry="2" />
<text  x="109.70" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="687.4" y="501" width="0.2" height="15.0" fill="rgb(218,126,13)" rx="2" ry="2" />
<text  x="690.37" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="433.7" y="309" width="0.4" height="15.0" fill="rgb(230,12,3)" rx="2" ry="2" />
<text  x="436.69" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (23 samples, 0.44%)</title><rect x="423.1" y="245" width="5.2" height="15.0" fill="rgb(214,108,29)" rx="2" ry="2" />
<text  x="426.12" y="255.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (6 samples, 0.11%)</title><rect x="598.5" y="437" width="1.4" height="15.0" fill="rgb(219,219,5)" rx="2" ry="2" />
<text  x="601.54" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (121 samples, 2.31%)</title><rect x="559.0" y="437" width="27.2" height="15.0" fill="rgb(223,126,25)" rx="2" ry="2" />
<text  x="561.96" y="447.5" >f..</text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="106.0" y="469" width="0.3" height="15.0" fill="rgb(217,6,43)" rx="2" ry="2" />
<text  x="109.03" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;cql3::expr::expression const*&gt; (1 samples, 0.02%)</title><rect x="71.6" y="293" width="0.2" height="15.0" fill="rgb(233,112,20)" rx="2" ry="2" />
<text  x="74.62" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="20.3" y="485" width="0.3" height="15.0" fill="rgb(251,216,28)" rx="2" ry="2" />
<text  x="23.34" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.08%)</title><rect x="416.8" y="181" width="0.9" height="15.0" fill="rgb(246,216,25)" rx="2" ry="2" />
<text  x="419.83" y="191.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="118.2" y="485" width="0.2" height="15.0" fill="rgb(253,6,47)" rx="2" ry="2" />
<text  x="121.17" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (5 samples, 0.10%)</title><rect x="1029.7" y="309" width="1.1" height="15.0" fill="rgb(252,167,24)" rx="2" ry="2" />
<text  x="1032.65" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="93.7" y="517" width="0.6" height="15.0" fill="rgb(219,43,32)" rx="2" ry="2" />
<text  x="96.66" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="561.2" y="341" width="0.2" height="15.0" fill="rgb(221,93,16)" rx="2" ry="2" />
<text  x="564.21" y="351.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="105.6" y="245" width="0.2" height="15.0" fill="rgb(243,13,46)" rx="2" ry="2" />
<text  x="108.58" y="255.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (3 samples, 0.06%)</title><rect x="37.7" y="341" width="0.6" height="15.0" fill="rgb(226,228,31)" rx="2" ry="2" />
<text  x="40.66" y="351.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="1123.9" y="213" width="0.2" height="15.0" fill="rgb(232,70,54)" rx="2" ry="2" />
<text  x="1126.88" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="55.7" y="117" width="0.4" height="15.0" fill="rgb(232,211,54)" rx="2" ry="2" />
<text  x="58.65" y="127.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="18.5" y="309" width="0.3" height="15.0" fill="rgb(225,21,48)" rx="2" ry="2" />
<text  x="21.55" y="319.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="101.8" y="485" width="0.2" height="15.0" fill="rgb(209,79,28)" rx="2" ry="2" />
<text  x="104.76" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%)</title><rect x="122.4" y="469" width="0.3" height="15.0" fill="rgb(224,182,37)" rx="2" ry="2" />
<text  x="125.45" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="813.1" y="341" width="0.9" height="15.0" fill="rgb(224,6,17)" rx="2" ry="2" />
<text  x="816.08" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="181.1" y="261" width="0.3" height="15.0" fill="rgb(210,156,19)" rx="2" ry="2" />
<text  x="184.14" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="60.2" y="309" width="0.4" height="15.0" fill="rgb(227,116,33)" rx="2" ry="2" />
<text  x="63.15" y="319.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (8 samples, 0.15%)</title><rect x="772.2" y="357" width="1.8" height="15.0" fill="rgb(207,178,27)" rx="2" ry="2" />
<text  x="775.15" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="583.5" y="405" width="0.2" height="15.0" fill="rgb(222,205,11)" rx="2" ry="2" />
<text  x="586.47" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="939.2" y="405" width="1.2" height="15.0" fill="rgb(234,205,24)" rx="2" ry="2" />
<text  x="942.25" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="79.7" y="405" width="0.2" height="15.0" fill="rgb(214,159,9)" rx="2" ry="2" />
<text  x="82.72" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (30 samples, 0.57%)</title><rect x="95.0" y="517" width="6.8" height="15.0" fill="rgb(222,77,1)" rx="2" ry="2" />
<text  x="98.01" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="334.7" y="277" width="0.3" height="15.0" fill="rgb(211,119,1)" rx="2" ry="2" />
<text  x="337.74" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="710.5" y="485" width="0.3" height="15.0" fill="rgb(234,207,37)" rx="2" ry="2" />
<text  x="713.53" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="814.2" y="357" width="3.2" height="15.0" fill="rgb(217,60,47)" rx="2" ry="2" />
<text  x="817.21" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (20 samples, 0.38%)</title><rect x="740.9" y="373" width="4.5" height="15.0" fill="rgb(212,176,18)" rx="2" ry="2" />
<text  x="743.89" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.10%)</title><rect x="207.7" y="261" width="1.1" height="15.0" fill="rgb(209,40,41)" rx="2" ry="2" />
<text  x="210.68" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="763.2" y="373" width="0.2" height="15.0" fill="rgb(214,171,17)" rx="2" ry="2" />
<text  x="766.16" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="704.9" y="453" width="0.2" height="15.0" fill="rgb(206,24,31)" rx="2" ry="2" />
<text  x="707.91" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (6 samples, 0.11%)</title><rect x="68.5" y="421" width="1.3" height="15.0" fill="rgb(238,173,0)" rx="2" ry="2" />
<text  x="71.47" y="431.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (3 samples, 0.06%)</title><rect x="70.9" y="421" width="0.7" height="15.0" fill="rgb(212,79,30)" rx="2" ry="2" />
<text  x="73.95" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="765.4" y="389" width="0.5" height="15.0" fill="rgb(228,192,48)" rx="2" ry="2" />
<text  x="768.41" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="781.4" y="277" width="0.4" height="15.0" fill="rgb(237,227,37)" rx="2" ry="2" />
<text  x="784.37" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="106.9" y="389" width="0.3" height="15.0" fill="rgb(221,185,51)" rx="2" ry="2" />
<text  x="109.93" y="399.5" ></text>
</g>
<g >
<title>query::result::result (3 samples, 0.06%)</title><rect x="606.9" y="453" width="0.6" height="15.0" fill="rgb(217,189,19)" rx="2" ry="2" />
<text  x="609.86" y="463.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.10%)</title><rect x="1079.1" y="341" width="1.2" height="15.0" fill="rgb(214,13,35)" rx="2" ry="2" />
<text  x="1082.13" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%)</title><rect x="108.1" y="357" width="0.2" height="15.0" fill="rgb(222,10,54)" rx="2" ry="2" />
<text  x="111.05" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="151.0" y="469" width="0.2" height="15.0" fill="rgb(222,175,47)" rx="2" ry="2" />
<text  x="154.01" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="835.3" y="373" width="0.3" height="15.0" fill="rgb(226,226,7)" rx="2" ry="2" />
<text  x="838.35" y="383.5" ></text>
</g>
<g >
<title>hwloc__insert_object_by_cpuset (1 samples, 0.02%)</title><rect x="79.5" y="645" width="0.2" height="15.0" fill="rgb(224,81,7)" rx="2" ry="2" />
<text  x="82.49" y="655.5" ></text>
</g>
<g >
<title>service::client_state::has_access (186 samples, 3.54%)</title><rect x="768.1" y="405" width="41.8" height="15.0" fill="rgb(249,149,11)" rx="2" ry="2" />
<text  x="771.11" y="415.5" >ser..</text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="857.8" y="261" width="0.3" height="15.0" fill="rgb(233,101,51)" rx="2" ry="2" />
<text  x="860.84" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="373" width="0.7" height="15.0" fill="rgb(220,85,54)" rx="2" ry="2" />
<text  x="689.25" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.4" y="405" width="0.2" height="15.0" fill="rgb(222,227,19)" rx="2" ry="2" />
<text  x="67.42" y="415.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (2 samples, 0.04%)</title><rect x="1168.6" y="501" width="0.5" height="15.0" fill="rgb(232,47,35)" rx="2" ry="2" />
<text  x="1171.64" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, query::querier&lt; (1 samples, 0.02%)</title><rect x="549.3" y="437" width="0.2" height="15.0" fill="rgb(225,4,13)" rx="2" ry="2" />
<text  x="552.29" y="447.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%)</title><rect x="1136.9" y="485" width="0.3" height="15.0" fill="rgb(239,190,19)" rx="2" ry="2" />
<text  x="1139.93" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="73.0" y="357" width="0.2" height="15.0" fill="rgb(218,114,1)" rx="2" ry="2" />
<text  x="75.97" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="786.3" y="245" width="0.5" height="15.0" fill="rgb(243,76,15)" rx="2" ry="2" />
<text  x="789.32" y="255.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%)</title><rect x="1120.5" y="277" width="0.2" height="15.0" fill="rgb(239,80,8)" rx="2" ry="2" />
<text  x="1123.51" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (64 samples, 1.22%)</title><rect x="559.2" y="405" width="14.4" height="15.0" fill="rgb(213,64,0)" rx="2" ry="2" />
<text  x="562.18" y="415.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="857.2" y="325" width="0.4" height="15.0" fill="rgb(215,76,51)" rx="2" ry="2" />
<text  x="860.16" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%)</title><rect x="18.3" y="261" width="0.2" height="15.0" fill="rgb(209,203,20)" rx="2" ry="2" />
<text  x="21.32" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="429.4" y="229" width="0.2" height="15.0" fill="rgb(219,173,35)" rx="2" ry="2" />
<text  x="432.42" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="964.7" y="341" width="1.1" height="15.0" fill="rgb(232,65,27)" rx="2" ry="2" />
<text  x="967.66" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (18 samples, 0.34%)</title><rect x="755.1" y="421" width="4.0" height="15.0" fill="rgb(235,174,8)" rx="2" ry="2" />
<text  x="758.06" y="431.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="80.4" y="501" width="1.6" height="15.0" fill="rgb(231,56,53)" rx="2" ry="2" />
<text  x="83.39" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="439.8" y="389" width="0.4" height="15.0" fill="rgb(214,151,44)" rx="2" ry="2" />
<text  x="442.77" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="24.2" y="261" width="0.4" height="15.0" fill="rgb(254,58,5)" rx="2" ry="2" />
<text  x="27.17" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="636.1" y="485" width="0.4" height="15.0" fill="rgb(234,32,47)" rx="2" ry="2" />
<text  x="639.09" y="495.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="18.3" y="341" width="0.2" height="15.0" fill="rgb(215,89,26)" rx="2" ry="2" />
<text  x="21.32" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="545.9" y="357" width="0.2" height="15.0" fill="rgb(229,140,48)" rx="2" ry="2" />
<text  x="548.91" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1055.1" y="325" width="0.4" height="15.0" fill="rgb(241,14,31)" rx="2" ry="2" />
<text  x="1058.07" y="335.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (2 samples, 0.04%)</title><rect x="579.6" y="373" width="0.5" height="15.0" fill="rgb(227,154,29)" rx="2" ry="2" />
<text  x="582.65" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="684.4" y="485" width="0.7" height="15.0" fill="rgb(235,0,5)" rx="2" ry="2" />
<text  x="687.45" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="419.5" y="261" width="0.3" height="15.0" fill="rgb(231,135,23)" rx="2" ry="2" />
<text  x="422.53" y="271.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="18.8" y="469" width="0.2" height="15.0" fill="rgb(223,141,1)" rx="2" ry="2" />
<text  x="21.77" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="564.1" y="293" width="0.3" height="15.0" fill="rgb(231,189,42)" rx="2" ry="2" />
<text  x="567.13" y="303.5" ></text>
</g>
<g >
<title>__start_context (274 samples, 5.22%)</title><rect x="17.0" y="645" width="61.6" height="15.0" fill="rgb(210,125,35)" rx="2" ry="2" />
<text  x="19.97" y="655.5" >__star..</text>
</g>
<g >
<title>database::has_keyspace (9 samples, 0.17%)</title><rect x="818.0" y="389" width="2.1" height="15.0" fill="rgb(229,213,53)" rx="2" ry="2" />
<text  x="821.03" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="970.1" y="389" width="0.2" height="15.0" fill="rgb(236,43,10)" rx="2" ry="2" />
<text  x="973.06" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="828.6" y="405" width="0.7" height="15.0" fill="rgb(233,43,6)" rx="2" ry="2" />
<text  x="831.60" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (2 samples, 0.04%)</title><rect x="418.2" y="261" width="0.4" height="15.0" fill="rgb(209,82,30)" rx="2" ry="2" />
<text  x="421.18" y="271.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1165.0" y="437" width="0.3" height="15.0" fill="rgb(234,163,22)" rx="2" ry="2" />
<text  x="1168.04" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="718.4" y="501" width="0.2" height="15.0" fill="rgb(218,70,31)" rx="2" ry="2" />
<text  x="721.40" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="52.1" y="245" width="0.2" height="15.0" fill="rgb(219,161,20)" rx="2" ry="2" />
<text  x="55.05" y="255.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.11%)</title><rect x="130.3" y="437" width="1.4" height="15.0" fill="rgb(219,55,40)" rx="2" ry="2" />
<text  x="133.32" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="767.9" y="405" width="0.2" height="15.0" fill="rgb(229,218,15)" rx="2" ry="2" />
<text  x="770.88" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="76.1" y="373" width="0.2" height="15.0" fill="rgb(241,92,35)" rx="2" ry="2" />
<text  x="79.12" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (36 samples, 0.69%)</title><rect x="1119.4" y="517" width="8.1" height="15.0" fill="rgb(209,79,0)" rx="2" ry="2" />
<text  x="1122.38" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.11%)</title><rect x="822.3" y="453" width="1.4" height="15.0" fill="rgb(206,67,15)" rx="2" ry="2" />
<text  x="825.30" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.1" y="213" width="0.2" height="15.0" fill="rgb(251,131,31)" rx="2" ry="2" />
<text  x="64.05" y="223.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.11%)</title><rect x="359.5" y="213" width="1.3" height="15.0" fill="rgb(254,13,29)" rx="2" ry="2" />
<text  x="362.48" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="41.9" y="213" width="0.5" height="15.0" fill="rgb(214,225,8)" rx="2" ry="2" />
<text  x="44.93" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="586.2" y="437" width="0.2" height="15.0" fill="rgb(215,175,28)" rx="2" ry="2" />
<text  x="589.17" y="447.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (35 samples, 0.67%)</title><rect x="493.3" y="309" width="7.9" height="15.0" fill="rgb(243,15,27)" rx="2" ry="2" />
<text  x="496.29" y="319.5" ></text>
</g>
<g >
<title>row::external_memory_usage (16 samples, 0.30%)</title><rect x="244.1" y="181" width="3.6" height="15.0" fill="rgb(220,19,3)" rx="2" ry="2" />
<text  x="247.11" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(252,101,34)" rx="2" ry="2" />
<text  x="13.67" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="135.7" y="485" width="0.9" height="15.0" fill="rgb(220,164,49)" rx="2" ry="2" />
<text  x="138.71" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;seastar::metrics::impl::registered_metric&gt;::shared_ptr_count_for&lt;seastar::metrics::impl::metric_id const&amp;, std::function&lt;seastar::metrics::impl::metric_value  (1 samples, 0.02%)</title><rect x="108.1" y="341" width="0.2" height="15.0" fill="rgb(213,148,38)" rx="2" ry="2" />
<text  x="111.05" y="351.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%)</title><rect x="106.5" y="485" width="0.2" height="15.0" fill="rgb(236,126,15)" rx="2" ry="2" />
<text  x="109.48" y="495.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1162.1" y="501" width="0.2" height="15.0" fill="rgb(228,208,7)" rx="2" ry="2" />
<text  x="1165.11" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="62.4" y="373" width="0.2" height="15.0" fill="rgb(231,201,18)" rx="2" ry="2" />
<text  x="65.40" y="383.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="44.6" y="357" width="0.3" height="15.0" fill="rgb(245,154,12)" rx="2" ry="2" />
<text  x="47.63" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="832.9" y="421" width="2.7" height="15.0" fill="rgb(251,167,38)" rx="2" ry="2" />
<text  x="835.87" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="18.5" y="261" width="0.3" height="15.0" fill="rgb(223,158,21)" rx="2" ry="2" />
<text  x="21.55" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="442.0" y="437" width="0.9" height="15.0" fill="rgb(251,29,4)" rx="2" ry="2" />
<text  x="445.01" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (2 samples, 0.04%)</title><rect x="82.0" y="453" width="0.4" height="15.0" fill="rgb(232,68,10)" rx="2" ry="2" />
<text  x="84.96" y="463.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (3 samples, 0.06%)</title><rect x="319.2" y="357" width="0.7" height="15.0" fill="rgb(248,82,43)" rx="2" ry="2" />
<text  x="322.22" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="948.2" y="437" width="0.3" height="15.0" fill="rgb(251,131,50)" rx="2" ry="2" />
<text  x="951.24" y="447.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.5" y="213" width="0.2" height="15.0" fill="rgb(221,219,5)" rx="2" ry="2" />
<text  x="1123.51" y="223.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="884.1" y="325" width="0.3" height="15.0" fill="rgb(231,219,35)" rx="2" ry="2" />
<text  x="887.15" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="835.6" y="437" width="0.4" height="15.0" fill="rgb(243,151,15)" rx="2" ry="2" />
<text  x="838.57" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (37 samples, 0.71%)</title><rect x="850.6" y="469" width="8.4" height="15.0" fill="rgb(219,158,42)" rx="2" ry="2" />
<text  x="853.64" y="479.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="107.8" y="373" width="0.3" height="15.0" fill="rgb(214,151,49)" rx="2" ry="2" />
<text  x="110.83" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="552.9" y="373" width="0.2" height="15.0" fill="rgb(208,200,0)" rx="2" ry="2" />
<text  x="555.89" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (255 samples, 4.86%)</title><rect x="21.0" y="549" width="57.4" height="15.0" fill="rgb(247,136,5)" rx="2" ry="2" />
<text  x="24.02" y="559.5" >single..</text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="199.6" y="229" width="2.0" height="15.0" fill="rgb(243,111,0)" rx="2" ry="2" />
<text  x="202.58" y="239.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="247.3" y="149" width="0.4" height="15.0" fill="rgb(226,9,35)" rx="2" ry="2" />
<text  x="250.26" y="159.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::list_directory (1 samples, 0.02%)</title><rect x="687.4" y="421" width="0.2" height="15.0" fill="rgb(210,165,47)" rx="2" ry="2" />
<text  x="690.37" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="659.3" y="517" width="0.2" height="15.0" fill="rgb(228,80,43)" rx="2" ry="2" />
<text  x="662.26" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="893.4" y="309" width="0.4" height="15.0" fill="rgb(233,110,21)" rx="2" ry="2" />
<text  x="896.37" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="853.1" y="405" width="0.2" height="15.0" fill="rgb(223,15,4)" rx="2" ry="2" />
<text  x="856.11" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="44.4" y="341" width="0.2" height="15.0" fill="rgb(246,189,32)" rx="2" ry="2" />
<text  x="47.41" y="351.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%)</title><rect x="106.9" y="501" width="1.2" height="15.0" fill="rgb(233,38,49)" rx="2" ry="2" />
<text  x="109.93" y="511.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="537.4" y="309" width="0.2" height="15.0" fill="rgb(250,33,15)" rx="2" ry="2" />
<text  x="540.37" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="847.5" y="533" width="0.2" height="15.0" fill="rgb(222,123,8)" rx="2" ry="2" />
<text  x="850.49" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="55.2" y="165" width="0.5" height="15.0" fill="rgb(206,44,30)" rx="2" ry="2" />
<text  x="58.20" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%)</title><rect x="979.7" y="309" width="0.7" height="15.0" fill="rgb(214,71,8)" rx="2" ry="2" />
<text  x="982.73" y="319.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%)</title><rect x="76.8" y="469" width="0.2" height="15.0" fill="rgb(215,2,29)" rx="2" ry="2" />
<text  x="79.79" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="208.6" y="245" width="0.2" height="15.0" fill="rgb(253,16,0)" rx="2" ry="2" />
<text  x="211.58" y="255.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="79.7" y="581" width="0.2" height="15.0" fill="rgb(223,131,50)" rx="2" ry="2" />
<text  x="82.72" y="591.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="32.9" y="277" width="0.3" height="15.0" fill="rgb(212,149,30)" rx="2" ry="2" />
<text  x="35.94" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%)</title><rect x="360.4" y="197" width="0.4" height="15.0" fill="rgb(227,83,47)" rx="2" ry="2" />
<text  x="363.38" y="207.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="855.4" y="405" width="0.2" height="15.0" fill="rgb(225,48,14)" rx="2" ry="2" />
<text  x="858.36" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%)</title><rect x="283.0" y="277" width="3.2" height="15.0" fill="rgb(243,159,25)" rx="2" ry="2" />
<text  x="286.02" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="72.5" y="405" width="0.5" height="15.0" fill="rgb(215,36,27)" rx="2" ry="2" />
<text  x="75.52" y="415.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (13 samples, 0.25%)</title><rect x="855.6" y="357" width="2.9" height="15.0" fill="rgb(238,7,18)" rx="2" ry="2" />
<text  x="858.59" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="295.6" y="325" width="0.2" height="15.0" fill="rgb(237,205,20)" rx="2" ry="2" />
<text  x="298.61" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.7" y="245" width="0.2" height="15.0" fill="rgb(208,131,40)" rx="2" ry="2" />
<text  x="62.70" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1083.4" y="373" width="0.2" height="15.0" fill="rgb(225,116,30)" rx="2" ry="2" />
<text  x="1086.40" y="383.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (96 samples, 1.83%)</title><rect x="479.6" y="357" width="21.6" height="15.0" fill="rgb(222,209,24)" rx="2" ry="2" />
<text  x="482.57" y="367.5" >d..</text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="941.5" y="373" width="0.2" height="15.0" fill="rgb(253,114,35)" rx="2" ry="2" />
<text  x="944.50" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="857.8" y="245" width="0.3" height="15.0" fill="rgb(205,46,44)" rx="2" ry="2" />
<text  x="860.84" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (7 samples, 0.13%)</title><rect x="853.3" y="421" width="1.6" height="15.0" fill="rgb(222,16,28)" rx="2" ry="2" />
<text  x="856.34" y="431.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="75.9" y="373" width="0.2" height="15.0" fill="rgb(224,18,42)" rx="2" ry="2" />
<text  x="78.89" y="383.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1019.1" y="245" width="2.0" height="15.0" fill="rgb(224,4,38)" rx="2" ry="2" />
<text  x="1022.08" y="255.5" ></text>
</g>
<g >
<title>query::result::builder::builder (9 samples, 0.17%)</title><rect x="597.9" y="453" width="2.0" height="15.0" fill="rgb(232,53,17)" rx="2" ry="2" />
<text  x="600.86" y="463.5" ></text>
</g>
<g >
<title>utils::streaming_histogram::merge (1 samples, 0.02%)</title><rect x="82.9" y="469" width="0.2" height="15.0" fill="rgb(245,153,42)" rx="2" ry="2" />
<text  x="85.86" y="479.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1129.5" y="245" width="0.2" height="15.0" fill="rgb(221,37,18)" rx="2" ry="2" />
<text  x="1132.50" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1131.3" y="181" width="0.2" height="15.0" fill="rgb(211,108,43)" rx="2" ry="2" />
<text  x="1134.30" y="191.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.2" y="629" width="0.2" height="15.0" fill="rgb(249,200,31)" rx="2" ry="2" />
<text  x="83.17" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="30.0" y="261" width="0.2" height="15.0" fill="rgb(242,68,27)" rx="2" ry="2" />
<text  x="33.02" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="609.8" y="453" width="0.2" height="15.0" fill="rgb(209,25,9)" rx="2" ry="2" />
<text  x="612.78" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%)</title><rect x="714.1" y="533" width="0.5" height="15.0" fill="rgb(236,87,25)" rx="2" ry="2" />
<text  x="717.13" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="673.0" y="469" width="0.2" height="15.0" fill="rgb(210,44,39)" rx="2" ry="2" />
<text  x="675.98" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (22 samples, 0.42%)</title><rect x="887.3" y="309" width="4.9" height="15.0" fill="rgb(209,12,35)" rx="2" ry="2" />
<text  x="890.30" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="670.7" y="485" width="0.3" height="15.0" fill="rgb(230,222,23)" rx="2" ry="2" />
<text  x="673.73" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="518.0" y="229" width="1.2" height="15.0" fill="rgb(225,140,35)" rx="2" ry="2" />
<text  x="521.03" y="239.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (1 samples, 0.02%)</title><rect x="10.7" y="469" width="0.2" height="15.0" fill="rgb(249,211,44)" rx="2" ry="2" />
<text  x="13.67" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="52.5" y="245" width="0.2" height="15.0" fill="rgb(242,223,37)" rx="2" ry="2" />
<text  x="55.50" y="255.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned int&gt;::named_value (1 samples, 0.02%)</title><rect x="83.1" y="597" width="0.2" height="15.0" fill="rgb(206,173,47)" rx="2" ry="2" />
<text  x="86.09" y="607.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (3 samples, 0.06%)</title><rect x="595.2" y="437" width="0.6" height="15.0" fill="rgb(252,87,23)" rx="2" ry="2" />
<text  x="598.16" y="447.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%)</title><rect x="528.1" y="357" width="0.5" height="15.0" fill="rgb(221,184,47)" rx="2" ry="2" />
<text  x="531.15" y="367.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (60 samples, 1.14%)</title><rect x="1065.2" y="341" width="13.5" height="15.0" fill="rgb(247,168,31)" rx="2" ry="2" />
<text  x="1068.19" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="72.1" y="373" width="0.2" height="15.0" fill="rgb(234,180,32)" rx="2" ry="2" />
<text  x="75.07" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="558.5" y="453" width="0.5" height="15.0" fill="rgb(244,62,44)" rx="2" ry="2" />
<text  x="561.51" y="463.5" ></text>
</g>
<g >
<title>database::do_apply (34 samples, 0.65%)</title><rect x="1119.8" y="373" width="7.7" height="15.0" fill="rgb(217,118,53)" rx="2" ry="2" />
<text  x="1122.83" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="937.0" y="389" width="0.4" height="15.0" fill="rgb(241,1,54)" rx="2" ry="2" />
<text  x="940.00" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%)</title><rect x="737.5" y="405" width="0.9" height="15.0" fill="rgb(247,143,49)" rx="2" ry="2" />
<text  x="740.52" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (28 samples, 0.53%)</title><rect x="1009.6" y="229" width="6.3" height="15.0" fill="rgb(240,34,36)" rx="2" ry="2" />
<text  x="1012.64" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.1" y="277" width="0.2" height="15.0" fill="rgb(254,172,37)" rx="2" ry="2" />
<text  x="64.05" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="252.2" y="181" width="0.9" height="15.0" fill="rgb(245,23,2)" rx="2" ry="2" />
<text  x="255.21" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (2 samples, 0.04%)</title><rect x="71.6" y="421" width="0.5" height="15.0" fill="rgb(227,75,13)" rx="2" ry="2" />
<text  x="74.62" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="754.4" y="357" width="0.7" height="15.0" fill="rgb(222,9,28)" rx="2" ry="2" />
<text  x="757.39" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="546.1" y="437" width="0.9" height="15.0" fill="rgb(231,205,41)" rx="2" ry="2" />
<text  x="549.14" y="447.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.9" y="565" width="0.2" height="15.0" fill="rgb(205,17,13)" rx="2" ry="2" />
<text  x="20.87" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (3 samples, 0.06%)</title><rect x="1128.6" y="293" width="0.7" height="15.0" fill="rgb(247,83,1)" rx="2" ry="2" />
<text  x="1131.60" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.9" y="373" width="0.2" height="15.0" fill="rgb(217,209,24)" rx="2" ry="2" />
<text  x="67.87" y="383.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="631.6" y="453" width="0.2" height="15.0" fill="rgb(251,75,1)" rx="2" ry="2" />
<text  x="634.60" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1095.3" y="389" width="0.2" height="15.0" fill="rgb(242,84,32)" rx="2" ry="2" />
<text  x="1098.32" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (19 samples, 0.36%)</title><rect x="724.5" y="453" width="4.2" height="15.0" fill="rgb(228,115,43)" rx="2" ry="2" />
<text  x="727.48" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1118.9" y="469" width="0.3" height="15.0" fill="rgb(212,74,30)" rx="2" ry="2" />
<text  x="1121.93" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="64.9" y="357" width="0.2" height="15.0" fill="rgb(218,58,15)" rx="2" ry="2" />
<text  x="67.87" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1096.9" y="373" width="0.2" height="15.0" fill="rgb(223,109,36)" rx="2" ry="2" />
<text  x="1099.90" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (20 samples, 0.38%)</title><rect x="257.8" y="261" width="4.5" height="15.0" fill="rgb(210,20,13)" rx="2" ry="2" />
<text  x="260.83" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1060.0" y="357" width="0.2" height="15.0" fill="rgb(214,154,23)" rx="2" ry="2" />
<text  x="1063.01" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.5" y="293" width="0.6" height="15.0" fill="rgb(240,10,1)" rx="2" ry="2" />
<text  x="42.46" y="303.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.0" y="565" width="0.2" height="15.0" fill="rgb(242,80,30)" rx="2" ry="2" />
<text  x="19.97" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="439.5" y="373" width="0.3" height="15.0" fill="rgb(235,55,26)" rx="2" ry="2" />
<text  x="442.54" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="267.3" y="277" width="0.4" height="15.0" fill="rgb(226,44,31)" rx="2" ry="2" />
<text  x="270.27" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,323 samples, 44.27%)</title><rect x="108.5" y="533" width="522.4" height="15.0" fill="rgb(223,181,6)" rx="2" ry="2" />
<text  x="111.50" y="543.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="650.5" y="501" width="0.2" height="15.0" fill="rgb(214,144,37)" rx="2" ry="2" />
<text  x="653.49" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%)</title><rect x="328.2" y="325" width="2.5" height="15.0" fill="rgb(207,214,45)" rx="2" ry="2" />
<text  x="331.22" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="790.4" y="181" width="0.9" height="15.0" fill="rgb(246,130,24)" rx="2" ry="2" />
<text  x="793.37" y="191.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="47.8" y="293" width="0.2" height="15.0" fill="rgb(222,14,37)" rx="2" ry="2" />
<text  x="50.78" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="157.1" y="453" width="0.2" height="15.0" fill="rgb(212,93,41)" rx="2" ry="2" />
<text  x="160.08" y="463.5" ></text>
</g>
<g >
<title>database::query (115 samples, 2.19%)</title><rect x="997.5" y="293" width="25.9" height="15.0" fill="rgb(221,47,47)" rx="2" ry="2" />
<text  x="1000.49" y="303.5" >d..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (2 samples, 0.04%)</title><rect x="751.9" y="437" width="0.5" height="15.0" fill="rgb(231,51,33)" rx="2" ry="2" />
<text  x="754.91" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.4" y="421" width="0.3" height="15.0" fill="rgb(249,173,43)" rx="2" ry="2" />
<text  x="69.45" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="558.1" y="453" width="0.2" height="15.0" fill="rgb(205,170,2)" rx="2" ry="2" />
<text  x="561.06" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (6 samples, 0.11%)</title><rect x="772.6" y="325" width="1.4" height="15.0" fill="rgb(238,30,40)" rx="2" ry="2" />
<text  x="775.60" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1078.2" y="277" width="0.3" height="15.0" fill="rgb(253,193,49)" rx="2" ry="2" />
<text  x="1081.23" y="287.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1080.9" y="341" width="0.3" height="15.0" fill="rgb(209,79,32)" rx="2" ry="2" />
<text  x="1083.93" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="1166.6" y="469" width="0.2" height="15.0" fill="rgb(207,212,23)" rx="2" ry="2" />
<text  x="1169.61" y="479.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%)</title><rect x="18.3" y="197" width="0.2" height="15.0" fill="rgb(244,147,27)" rx="2" ry="2" />
<text  x="21.32" y="207.5" ></text>
</g>
<g >
<title>[[vdso]] (29 samples, 0.55%)</title><rect x="1171.8" y="645" width="6.5" height="15.0" fill="rgb(225,11,43)" rx="2" ry="2" />
<text  x="1174.78" y="655.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="933.0" y="405" width="1.3" height="15.0" fill="rgb(208,112,26)" rx="2" ry="2" />
<text  x="935.95" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="341" width="0.2" height="15.0" fill="rgb(206,18,26)" rx="2" ry="2" />
<text  x="78.89" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="52.5" y="213" width="0.2" height="15.0" fill="rgb(250,137,20)" rx="2" ry="2" />
<text  x="55.50" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="973.9" y="325" width="0.4" height="15.0" fill="rgb(213,229,47)" rx="2" ry="2" />
<text  x="976.88" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (9 samples, 0.17%)</title><rect x="851.3" y="421" width="2.0" height="15.0" fill="rgb(233,84,2)" rx="2" ry="2" />
<text  x="854.32" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="602.6" y="469" width="0.2" height="15.0" fill="rgb(214,135,23)" rx="2" ry="2" />
<text  x="605.59" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="47.3" y="341" width="0.5" height="15.0" fill="rgb(243,197,39)" rx="2" ry="2" />
<text  x="50.33" y="351.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="770.4" y="389" width="0.2" height="15.0" fill="rgb(205,139,18)" rx="2" ry="2" />
<text  x="773.35" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (35 samples, 0.67%)</title><rect x="1127.5" y="373" width="7.9" height="15.0" fill="rgb(234,208,31)" rx="2" ry="2" />
<text  x="1130.48" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="762.5" y="389" width="0.4" height="15.0" fill="rgb(210,6,16)" rx="2" ry="2" />
<text  x="765.48" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="79.9" y="581" width="0.3" height="15.0" fill="rgb(214,128,17)" rx="2" ry="2" />
<text  x="82.94" y="591.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="960.2" y="389" width="0.2" height="15.0" fill="rgb(250,174,22)" rx="2" ry="2" />
<text  x="963.16" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.4" y="85" width="0.2" height="15.0" fill="rgb(211,190,49)" rx="2" ry="2" />
<text  x="52.36" y="95.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (2 samples, 0.04%)</title><rect x="524.8" y="261" width="0.4" height="15.0" fill="rgb(210,65,40)" rx="2" ry="2" />
<text  x="527.77" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="894.0" y="325" width="0.3" height="15.0" fill="rgb(225,196,50)" rx="2" ry="2" />
<text  x="897.04" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.10%)</title><rect x="886.2" y="309" width="1.1" height="15.0" fill="rgb(241,93,21)" rx="2" ry="2" />
<text  x="889.17" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (50 samples, 0.95%)</title><rect x="573.8" y="421" width="11.2" height="15.0" fill="rgb(215,77,16)" rx="2" ry="2" />
<text  x="576.80" y="431.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="81.3" y="293" width="0.2" height="15.0" fill="rgb(236,203,4)" rx="2" ry="2" />
<text  x="84.29" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.7" y="261" width="0.2" height="15.0" fill="rgb(232,223,18)" rx="2" ry="2" />
<text  x="62.70" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="912.0" y="389" width="0.3" height="15.0" fill="rgb(224,120,36)" rx="2" ry="2" />
<text  x="915.04" y="399.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="930.9" y="437" width="0.3" height="15.0" fill="rgb(227,209,4)" rx="2" ry="2" />
<text  x="933.93" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="50.7" y="309" width="0.9" height="15.0" fill="rgb(243,4,13)" rx="2" ry="2" />
<text  x="53.71" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="308.2" y="325" width="0.2" height="15.0" fill="rgb(247,61,48)" rx="2" ry="2" />
<text  x="311.20" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="821.2" y="437" width="0.4" height="15.0" fill="rgb(253,204,31)" rx="2" ry="2" />
<text  x="824.18" y="447.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="630.5" y="517" width="0.4" height="15.0" fill="rgb(229,61,20)" rx="2" ry="2" />
<text  x="633.47" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="248.8" y="213" width="0.3" height="15.0" fill="rgb(231,23,28)" rx="2" ry="2" />
<text  x="251.83" y="223.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%)</title><rect x="1136.9" y="501" width="0.3" height="15.0" fill="rgb(212,160,52)" rx="2" ry="2" />
<text  x="1139.93" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="59.7" y="149" width="0.2" height="15.0" fill="rgb(211,113,53)" rx="2" ry="2" />
<text  x="62.70" y="159.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::append&lt;char&gt; (1 samples, 0.02%)</title><rect x="11.3" y="597" width="0.3" height="15.0" fill="rgb(235,118,32)" rx="2" ry="2" />
<text  x="14.35" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="22.1" y="325" width="0.3" height="15.0" fill="rgb(235,220,7)" rx="2" ry="2" />
<text  x="25.14" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="703.6" y="485" width="0.2" height="15.0" fill="rgb(209,187,18)" rx="2" ry="2" />
<text  x="706.56" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="639.5" y="517" width="0.6" height="15.0" fill="rgb(247,160,8)" rx="2" ry="2" />
<text  x="642.47" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="800.5" y="309" width="0.2" height="15.0" fill="rgb(246,41,16)" rx="2" ry="2" />
<text  x="803.49" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="100.4" y="469" width="0.2" height="15.0" fill="rgb(251,81,42)" rx="2" ry="2" />
<text  x="103.41" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="42.6" y="261" width="0.5" height="15.0" fill="rgb(230,63,40)" rx="2" ry="2" />
<text  x="45.61" y="271.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="18.5" y="485" width="0.3" height="15.0" fill="rgb(210,11,26)" rx="2" ry="2" />
<text  x="21.55" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (2 samples, 0.04%)</title><rect x="440.2" y="405" width="0.5" height="15.0" fill="rgb(237,8,1)" rx="2" ry="2" />
<text  x="443.22" y="415.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="18.3" y="117" width="0.2" height="15.0" fill="rgb(254,37,14)" rx="2" ry="2" />
<text  x="21.32" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="849.1" y="389" width="0.2" height="15.0" fill="rgb(216,143,18)" rx="2" ry="2" />
<text  x="852.07" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="857.6" y="261" width="0.2" height="15.0" fill="rgb(252,207,15)" rx="2" ry="2" />
<text  x="860.61" y="271.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="18.3" y="229" width="0.2" height="15.0" fill="rgb(205,109,52)" rx="2" ry="2" />
<text  x="21.32" y="239.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="561.7" y="357" width="0.9" height="15.0" fill="rgb(242,108,21)" rx="2" ry="2" />
<text  x="564.66" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (38 samples, 0.72%)</title><rect x="49.8" y="341" width="8.6" height="15.0" fill="rgb(230,25,24)" rx="2" ry="2" />
<text  x="52.81" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="466.3" y="293" width="0.2" height="15.0" fill="rgb(209,19,40)" rx="2" ry="2" />
<text  x="469.30" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (3 samples, 0.06%)</title><rect x="601.0" y="453" width="0.7" height="15.0" fill="rgb(235,122,8)" rx="2" ry="2" />
<text  x="604.01" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="24.8" y="325" width="0.3" height="15.0" fill="rgb(229,37,17)" rx="2" ry="2" />
<text  x="27.84" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.6" y="149" width="0.2" height="15.0" fill="rgb(236,94,1)" rx="2" ry="2" />
<text  x="45.61" y="159.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1088.8" y="421" width="0.2" height="15.0" fill="rgb(251,80,45)" rx="2" ry="2" />
<text  x="1091.80" y="431.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (1 samples, 0.02%)</title><rect x="733.7" y="453" width="0.2" height="15.0" fill="rgb(227,57,54)" rx="2" ry="2" />
<text  x="736.70" y="463.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (1 samples, 0.02%)</title><rect x="881.2" y="373" width="0.3" height="15.0" fill="rgb(247,227,41)" rx="2" ry="2" />
<text  x="884.23" y="383.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (22 samples, 0.42%)</title><rect x="485.4" y="309" width="5.0" height="15.0" fill="rgb(252,94,54)" rx="2" ry="2" />
<text  x="488.42" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="438.0" y="389" width="0.2" height="15.0" fill="rgb(233,155,35)" rx="2" ry="2" />
<text  x="440.97" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (30 samples, 0.57%)</title><rect x="689.4" y="517" width="6.7" height="15.0" fill="rgb(222,52,27)" rx="2" ry="2" />
<text  x="692.39" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="710.5" y="533" width="0.3" height="15.0" fill="rgb(222,1,0)" rx="2" ry="2" />
<text  x="713.53" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1110.4" y="421" width="2.0" height="15.0" fill="rgb(253,142,44)" rx="2" ry="2" />
<text  x="1113.39" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="766.3" y="389" width="0.2" height="15.0" fill="rgb(216,0,4)" rx="2" ry="2" />
<text  x="769.31" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="253.1" y="181" width="0.5" height="15.0" fill="rgb(211,200,7)" rx="2" ry="2" />
<text  x="256.11" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.0" y="565" width="0.3" height="15.0" fill="rgb(242,120,43)" rx="2" ry="2" />
<text  x="82.04" y="575.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (6 samples, 0.11%)</title><rect x="380.4" y="197" width="1.3" height="15.0" fill="rgb(206,198,39)" rx="2" ry="2" />
<text  x="383.39" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (6 samples, 0.11%)</title><rect x="553.1" y="389" width="1.4" height="15.0" fill="rgb(227,11,11)" rx="2" ry="2" />
<text  x="556.11" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="105.8" y="469" width="0.2" height="15.0" fill="rgb(218,210,49)" rx="2" ry="2" />
<text  x="108.80" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (56 samples, 1.07%)</title><rect x="46.0" y="357" width="12.6" height="15.0" fill="rgb(251,189,6)" rx="2" ry="2" />
<text  x="48.98" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.13%)</title><rect x="517.6" y="245" width="1.6" height="15.0" fill="rgb(216,174,31)" rx="2" ry="2" />
<text  x="520.58" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (8 samples, 0.15%)</title><rect x="842.3" y="501" width="1.8" height="15.0" fill="rgb(241,182,11)" rx="2" ry="2" />
<text  x="845.32" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1136.9" y="325" width="0.3" height="15.0" fill="rgb(213,12,53)" rx="2" ry="2" />
<text  x="1139.93" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="829.3" y="405" width="0.2" height="15.0" fill="rgb(219,228,31)" rx="2" ry="2" />
<text  x="832.28" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="200.9" y="213" width="0.7" height="15.0" fill="rgb(226,71,42)" rx="2" ry="2" />
<text  x="203.93" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (4 samples, 0.08%)</title><rect x="50.7" y="293" width="0.9" height="15.0" fill="rgb(236,4,34)" rx="2" ry="2" />
<text  x="53.71" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.3" y="309" width="0.2" height="15.0" fill="rgb(208,21,4)" rx="2" ry="2" />
<text  x="62.25" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="653.9" y="469" width="0.6" height="15.0" fill="rgb(242,124,28)" rx="2" ry="2" />
<text  x="656.86" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (1 samples, 0.02%)</title><rect x="893.8" y="325" width="0.2" height="15.0" fill="rgb(235,212,1)" rx="2" ry="2" />
<text  x="896.82" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%)</title><rect x="246.1" y="133" width="0.5" height="15.0" fill="rgb(216,92,29)" rx="2" ry="2" />
<text  x="249.13" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.7" y="357" width="0.2" height="15.0" fill="rgb(205,136,25)" rx="2" ry="2" />
<text  x="82.72" y="367.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (5 samples, 0.10%)</title><rect x="385.3" y="181" width="1.2" height="15.0" fill="rgb(209,214,25)" rx="2" ry="2" />
<text  x="388.34" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="128.1" y="405" width="0.2" height="15.0" fill="rgb(229,205,35)" rx="2" ry="2" />
<text  x="131.07" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="502.7" y="341" width="0.3" height="15.0" fill="rgb(240,5,28)" rx="2" ry="2" />
<text  x="505.73" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="57.7" y="245" width="0.2" height="15.0" fill="rgb(215,83,7)" rx="2" ry="2" />
<text  x="60.68" y="255.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="1100.5" y="389" width="1.3" height="15.0" fill="rgb(209,127,31)" rx="2" ry="2" />
<text  x="1103.49" y="399.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (3 samples, 0.06%)</title><rect x="1156.5" y="485" width="0.7" height="15.0" fill="rgb(234,115,8)" rx="2" ry="2" />
<text  x="1159.49" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%)</title><rect x="20.6" y="501" width="0.2" height="15.0" fill="rgb(218,158,21)" rx="2" ry="2" />
<text  x="23.57" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (2 samples, 0.04%)</title><rect x="36.3" y="293" width="0.5" height="15.0" fill="rgb(252,197,46)" rx="2" ry="2" />
<text  x="39.31" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="261" width="0.2" height="15.0" fill="rgb(209,1,43)" rx="2" ry="2" />
<text  x="78.89" y="271.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%)</title><rect x="737.7" y="341" width="0.7" height="15.0" fill="rgb(252,61,47)" rx="2" ry="2" />
<text  x="740.75" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="72.3" y="421" width="0.2" height="15.0" fill="rgb(235,104,27)" rx="2" ry="2" />
<text  x="75.29" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="71.2" y="373" width="0.2" height="15.0" fill="rgb(252,66,0)" rx="2" ry="2" />
<text  x="74.17" y="383.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="496.2" y="245" width="1.1" height="15.0" fill="rgb(218,175,31)" rx="2" ry="2" />
<text  x="499.21" y="255.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="759.1" y="437" width="0.2" height="15.0" fill="rgb(220,80,37)" rx="2" ry="2" />
<text  x="762.11" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="87.4" y="549" width="0.2" height="15.0" fill="rgb(231,196,51)" rx="2" ry="2" />
<text  x="90.36" y="559.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (35 samples, 0.67%)</title><rect x="343.7" y="229" width="7.9" height="15.0" fill="rgb(209,183,10)" rx="2" ry="2" />
<text  x="346.74" y="239.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="21.7" y="389" width="0.2" height="15.0" fill="rgb(216,224,2)" rx="2" ry="2" />
<text  x="24.69" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (15 samples, 0.29%)</title><rect x="1162.3" y="501" width="3.4" height="15.0" fill="rgb(209,56,27)" rx="2" ry="2" />
<text  x="1165.34" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="81.3" y="261" width="0.2" height="15.0" fill="rgb(226,117,5)" rx="2" ry="2" />
<text  x="84.29" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="116.1" y="485" width="0.9" height="15.0" fill="rgb(252,129,7)" rx="2" ry="2" />
<text  x="119.15" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%)</title><rect x="1166.8" y="485" width="0.5" height="15.0" fill="rgb(210,127,54)" rx="2" ry="2" />
<text  x="1169.84" y="495.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%)</title><rect x="456.6" y="309" width="0.3" height="15.0" fill="rgb(253,104,16)" rx="2" ry="2" />
<text  x="459.63" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::read_table_mutations (1 samples, 0.02%)</title><rect x="106.5" y="517" width="0.2" height="15.0" fill="rgb(222,204,37)" rx="2" ry="2" />
<text  x="109.48" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="842.3" y="485" width="0.2" height="15.0" fill="rgb(206,78,45)" rx="2" ry="2" />
<text  x="845.32" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="61.1" y="197" width="0.2" height="15.0" fill="rgb(232,39,46)" rx="2" ry="2" />
<text  x="64.05" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="203.0" y="229" width="0.4" height="15.0" fill="rgb(233,20,42)" rx="2" ry="2" />
<text  x="205.96" y="239.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="96.1" y="485" width="0.3" height="15.0" fill="rgb(248,183,51)" rx="2" ry="2" />
<text  x="99.13" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="664.0" y="437" width="0.2" height="15.0" fill="rgb(241,65,38)" rx="2" ry="2" />
<text  x="666.98" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="94.3" y="517" width="0.3" height="15.0" fill="rgb(215,168,30)" rx="2" ry="2" />
<text  x="97.33" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (15 samples, 0.29%)</title><rect x="251.5" y="197" width="3.4" height="15.0" fill="rgb(219,28,50)" rx="2" ry="2" />
<text  x="254.53" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="55.0" y="277" width="0.2" height="15.0" fill="rgb(228,224,54)" rx="2" ry="2" />
<text  x="57.98" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="890.9" y="277" width="1.1" height="15.0" fill="rgb(236,188,17)" rx="2" ry="2" />
<text  x="893.90" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="392.1" y="229" width="0.4" height="15.0" fill="rgb(253,119,50)" rx="2" ry="2" />
<text  x="395.09" y="239.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="745.2" y="293" width="0.2" height="15.0" fill="rgb(214,40,44)" rx="2" ry="2" />
<text  x="748.17" y="303.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="24.6" y="261" width="0.2" height="15.0" fill="rgb(226,160,33)" rx="2" ry="2" />
<text  x="27.62" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="192.4" y="277" width="0.4" height="15.0" fill="rgb(238,23,52)" rx="2" ry="2" />
<text  x="195.39" y="287.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%)</title><rect x="456.4" y="309" width="0.2" height="15.0" fill="rgb(224,131,40)" rx="2" ry="2" />
<text  x="459.41" y="319.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="79.9" y="469" width="0.3" height="15.0" fill="rgb(223,30,18)" rx="2" ry="2" />
<text  x="82.94" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="692.3" y="485" width="0.2" height="15.0" fill="rgb(232,50,40)" rx="2" ry="2" />
<text  x="695.32" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1164.8" y="453" width="0.5" height="15.0" fill="rgb(214,126,30)" rx="2" ry="2" />
<text  x="1167.81" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="39.2" y="245" width="0.3" height="15.0" fill="rgb(233,17,46)" rx="2" ry="2" />
<text  x="42.24" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="81.3" y="277" width="0.2" height="15.0" fill="rgb(234,47,43)" rx="2" ry="2" />
<text  x="84.29" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (9 samples, 0.17%)</title><rect x="1102.5" y="437" width="2.0" height="15.0" fill="rgb(243,41,36)" rx="2" ry="2" />
<text  x="1105.52" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="72.5" y="309" width="0.2" height="15.0" fill="rgb(237,210,24)" rx="2" ry="2" />
<text  x="75.52" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%)</title><rect x="185.6" y="261" width="0.5" height="15.0" fill="rgb(243,120,44)" rx="2" ry="2" />
<text  x="188.64" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (3 samples, 0.06%)</title><rect x="892.5" y="309" width="0.6" height="15.0" fill="rgb(208,211,43)" rx="2" ry="2" />
<text  x="895.47" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="43.1" y="309" width="0.9" height="15.0" fill="rgb(216,167,16)" rx="2" ry="2" />
<text  x="46.06" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="709.6" y="501" width="0.3" height="15.0" fill="rgb(250,99,34)" rx="2" ry="2" />
<text  x="712.63" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1057.1" y="325" width="0.2" height="15.0" fill="rgb(212,187,49)" rx="2" ry="2" />
<text  x="1060.09" y="335.5" ></text>
</g>
<g >
<title>free (4 samples, 0.08%)</title><rect x="428.5" y="229" width="0.9" height="15.0" fill="rgb(244,90,45)" rx="2" ry="2" />
<text  x="431.52" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (93 samples, 1.77%)</title><rect x="396.8" y="229" width="20.9" height="15.0" fill="rgb(208,196,44)" rx="2" ry="2" />
<text  x="399.81" y="239.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="53.2" y="277" width="0.4" height="15.0" fill="rgb(251,12,32)" rx="2" ry="2" />
<text  x="56.18" y="287.5" ></text>
</g>
<g >
<title>ser::mutation_view::partition (1 samples, 0.02%)</title><rect x="1120.5" y="261" width="0.2" height="15.0" fill="rgb(238,65,46)" rx="2" ry="2" />
<text  x="1123.51" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="72.3" y="405" width="0.2" height="15.0" fill="rgb(237,14,28)" rx="2" ry="2" />
<text  x="75.29" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="106.3" y="373" width="0.2" height="15.0" fill="rgb(219,37,12)" rx="2" ry="2" />
<text  x="109.25" y="383.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%)</title><rect x="1080.0" y="293" width="0.3" height="15.0" fill="rgb(224,68,26)" rx="2" ry="2" />
<text  x="1083.03" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="55.0" y="293" width="0.2" height="15.0" fill="rgb(207,60,25)" rx="2" ry="2" />
<text  x="57.98" y="303.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (1 samples, 0.02%)</title><rect x="11.3" y="613" width="0.3" height="15.0" fill="rgb(217,38,1)" rx="2" ry="2" />
<text  x="14.35" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="61.1" y="181" width="0.2" height="15.0" fill="rgb(209,24,5)" rx="2" ry="2" />
<text  x="64.05" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="896.1" y="325" width="0.2" height="15.0" fill="rgb(229,20,47)" rx="2" ry="2" />
<text  x="899.07" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt;, std::allocator&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="106.7" y="373" width="0.2" height="15.0" fill="rgb(240,1,12)" rx="2" ry="2" />
<text  x="109.70" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="621.7" y="421" width="0.2" height="15.0" fill="rgb(205,148,44)" rx="2" ry="2" />
<text  x="624.70" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="941.7" y="389" width="0.2" height="15.0" fill="rgb(216,213,51)" rx="2" ry="2" />
<text  x="944.72" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="373" width="0.2" height="15.0" fill="rgb(214,120,50)" rx="2" ry="2" />
<text  x="1169.39" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%)</title><rect x="82.0" y="389" width="0.4" height="15.0" fill="rgb(216,104,22)" rx="2" ry="2" />
<text  x="84.96" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="81.1" y="421" width="0.2" height="15.0" fill="rgb(238,213,46)" rx="2" ry="2" />
<text  x="84.07" y="431.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="82.0" y="357" width="0.2" height="15.0" fill="rgb(252,199,2)" rx="2" ry="2" />
<text  x="84.96" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (3 samples, 0.06%)</title><rect x="939.5" y="389" width="0.6" height="15.0" fill="rgb(217,150,42)" rx="2" ry="2" />
<text  x="942.47" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="1167.1" y="437" width="0.2" height="15.0" fill="rgb(254,191,0)" rx="2" ry="2" />
<text  x="1170.06" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="52.1" y="277" width="0.2" height="15.0" fill="rgb(208,193,52)" rx="2" ry="2" />
<text  x="55.05" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="18.3" y="165" width="0.2" height="15.0" fill="rgb(225,209,7)" rx="2" ry="2" />
<text  x="21.32" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="974.3" y="325" width="0.5" height="15.0" fill="rgb(244,119,6)" rx="2" ry="2" />
<text  x="977.33" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1058.4" y="341" width="0.3" height="15.0" fill="rgb(212,57,41)" rx="2" ry="2" />
<text  x="1061.44" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="181" width="0.2" height="15.0" fill="rgb(241,21,22)" rx="2" ry="2" />
<text  x="57.08" y="191.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="563.9" y="325" width="0.5" height="15.0" fill="rgb(225,209,52)" rx="2" ry="2" />
<text  x="566.91" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%)</title><rect x="749.9" y="405" width="0.2" height="15.0" fill="rgb(219,38,13)" rx="2" ry="2" />
<text  x="752.89" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (4 samples, 0.08%)</title><rect x="60.6" y="325" width="0.9" height="15.0" fill="rgb(229,181,29)" rx="2" ry="2" />
<text  x="63.60" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="995.0" y="309" width="0.2" height="15.0" fill="rgb(217,41,44)" rx="2" ry="2" />
<text  x="998.02" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="892.9" y="293" width="0.2" height="15.0" fill="rgb(253,181,16)" rx="2" ry="2" />
<text  x="895.92" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="440.7" y="405" width="0.6" height="15.0" fill="rgb(216,179,7)" rx="2" ry="2" />
<text  x="443.67" y="415.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="108.3" y="533" width="0.2" height="15.0" fill="rgb(249,8,49)" rx="2" ry="2" />
<text  x="111.28" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="44.9" y="357" width="0.9" height="15.0" fill="rgb(248,97,33)" rx="2" ry="2" />
<text  x="47.86" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="233.1" y="85" width="0.2" height="15.0" fill="rgb(215,176,1)" rx="2" ry="2" />
<text  x="236.09" y="95.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="926.2" y="405" width="0.2" height="15.0" fill="rgb(243,186,18)" rx="2" ry="2" />
<text  x="929.20" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="106.7" y="453" width="0.2" height="15.0" fill="rgb(238,77,54)" rx="2" ry="2" />
<text  x="109.70" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="51.6" y="293" width="0.2" height="15.0" fill="rgb(235,91,32)" rx="2" ry="2" />
<text  x="54.60" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (3 samples, 0.06%)</title><rect x="549.1" y="453" width="0.6" height="15.0" fill="rgb(245,116,6)" rx="2" ry="2" />
<text  x="552.06" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="104.7" y="517" width="0.2" height="15.0" fill="rgb(219,62,35)" rx="2" ry="2" />
<text  x="107.68" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="973.0" y="293" width="0.9" height="15.0" fill="rgb(254,67,34)" rx="2" ry="2" />
<text  x="975.98" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="272.9" y="245" width="0.9" height="15.0" fill="rgb(226,7,33)" rx="2" ry="2" />
<text  x="275.90" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="1150.2" y="485" width="0.2" height="15.0" fill="rgb(205,34,7)" rx="2" ry="2" />
<text  x="1153.19" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="80.6" y="437" width="0.2" height="15.0" fill="rgb(223,176,33)" rx="2" ry="2" />
<text  x="83.62" y="447.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="623.5" y="421" width="0.7" height="15.0" fill="rgb(247,201,38)" rx="2" ry="2" />
<text  x="626.50" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="54.3" y="229" width="0.2" height="15.0" fill="rgb(206,115,26)" rx="2" ry="2" />
<text  x="57.30" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.8" y="245" width="0.2" height="15.0" fill="rgb(237,191,53)" rx="2" ry="2" />
<text  x="52.81" y="255.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.7" y="325" width="0.2" height="15.0" fill="rgb(251,71,44)" rx="2" ry="2" />
<text  x="82.72" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%)</title><rect x="106.3" y="421" width="0.2" height="15.0" fill="rgb(238,90,37)" rx="2" ry="2" />
<text  x="109.25" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1001.8" y="229" width="0.4" height="15.0" fill="rgb(211,191,13)" rx="2" ry="2" />
<text  x="1004.77" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="1004.7" y="213" width="0.2" height="15.0" fill="rgb(223,93,33)" rx="2" ry="2" />
<text  x="1007.69" y="223.5" ></text>
</g>
<g >
<title>auth::resource::resource (12 samples, 0.23%)</title><rect x="763.8" y="421" width="2.7" height="15.0" fill="rgb(213,64,19)" rx="2" ry="2" />
<text  x="766.83" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1164.6" y="453" width="0.2" height="15.0" fill="rgb(252,129,21)" rx="2" ry="2" />
<text  x="1167.59" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="252.0" y="181" width="0.2" height="15.0" fill="rgb(205,211,46)" rx="2" ry="2" />
<text  x="254.98" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="811.5" y="421" width="0.2" height="15.0" fill="rgb(233,214,46)" rx="2" ry="2" />
<text  x="814.51" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (4 samples, 0.08%)</title><rect x="201.6" y="245" width="0.9" height="15.0" fill="rgb(219,101,53)" rx="2" ry="2" />
<text  x="204.61" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="857.2" y="309" width="0.4" height="15.0" fill="rgb(224,91,17)" rx="2" ry="2" />
<text  x="860.16" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="883.7" y="341" width="0.2" height="15.0" fill="rgb(246,78,38)" rx="2" ry="2" />
<text  x="886.70" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="81.3" y="485" width="0.7" height="15.0" fill="rgb(242,156,37)" rx="2" ry="2" />
<text  x="84.29" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%)</title><rect x="48.0" y="325" width="0.5" height="15.0" fill="rgb(254,28,30)" rx="2" ry="2" />
<text  x="51.01" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="910.9" y="373" width="1.1" height="15.0" fill="rgb(208,166,1)" rx="2" ry="2" />
<text  x="913.91" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.7" y="373" width="0.2" height="15.0" fill="rgb(208,206,19)" rx="2" ry="2" />
<text  x="82.72" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="801.8" y="309" width="0.3" height="15.0" fill="rgb(229,173,33)" rx="2" ry="2" />
<text  x="804.84" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1166.8" y="405" width="0.3" height="15.0" fill="rgb(228,45,11)" rx="2" ry="2" />
<text  x="1169.84" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="46.4" y="341" width="0.5" height="15.0" fill="rgb(209,120,11)" rx="2" ry="2" />
<text  x="49.43" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (1 samples, 0.02%)</title><rect x="981.3" y="357" width="0.2" height="15.0" fill="rgb(219,187,43)" rx="2" ry="2" />
<text  x="984.30" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="676.1" y="517" width="0.3" height="15.0" fill="rgb(232,152,27)" rx="2" ry="2" />
<text  x="679.13" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="67.6" y="453" width="0.2" height="15.0" fill="rgb(241,164,6)" rx="2" ry="2" />
<text  x="70.57" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (509 samples, 9.70%)</title><rect x="721.6" y="485" width="114.4" height="15.0" fill="rgb(245,45,10)" rx="2" ry="2" />
<text  x="724.55" y="495.5" >single_node_cq..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="84.4" y="549" width="0.7" height="15.0" fill="rgb(224,75,46)" rx="2" ry="2" />
<text  x="87.44" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (2 samples, 0.04%)</title><rect x="857.6" y="341" width="0.5" height="15.0" fill="rgb(230,90,20)" rx="2" ry="2" />
<text  x="860.61" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="717.1" y="453" width="0.9" height="15.0" fill="rgb(248,70,16)" rx="2" ry="2" />
<text  x="720.06" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="45.1" y="309" width="0.7" height="15.0" fill="rgb(246,44,7)" rx="2" ry="2" />
<text  x="48.08" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::reactor::task_queue, unsigned int&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, float&amp;&gt; (1 samples, 0.02%)</title><rect x="108.1" y="453" width="0.2" height="15.0" fill="rgb(253,104,27)" rx="2" ry="2" />
<text  x="111.05" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="604.2" y="453" width="0.2" height="15.0" fill="rgb(244,80,2)" rx="2" ry="2" />
<text  x="607.16" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="774.6" y="341" width="0.9" height="15.0" fill="rgb(224,50,28)" rx="2" ry="2" />
<text  x="777.63" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="395.9" y="229" width="0.5" height="15.0" fill="rgb(250,193,10)" rx="2" ry="2" />
<text  x="398.91" y="239.5" ></text>
</g>
<g >
<title>free (3 samples, 0.06%)</title><rect x="96.6" y="453" width="0.7" height="15.0" fill="rgb(218,45,12)" rx="2" ry="2" />
<text  x="99.58" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1167.3" y="485" width="0.2" height="15.0" fill="rgb(219,222,39)" rx="2" ry="2" />
<text  x="1170.29" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="449.4" y="373" width="0.3" height="15.0" fill="rgb(205,103,0)" rx="2" ry="2" />
<text  x="452.44" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="928.5" y="405" width="0.2" height="15.0" fill="rgb(209,104,36)" rx="2" ry="2" />
<text  x="931.45" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="134.4" y="485" width="0.4" height="15.0" fill="rgb(206,66,38)" rx="2" ry="2" />
<text  x="137.36" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.7" y="277" width="0.2" height="15.0" fill="rgb(232,172,49)" rx="2" ry="2" />
<text  x="62.70" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="854.5" y="373" width="0.2" height="15.0" fill="rgb(215,8,31)" rx="2" ry="2" />
<text  x="857.46" y="383.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="18.3" y="277" width="0.2" height="15.0" fill="rgb(226,70,41)" rx="2" ry="2" />
<text  x="21.32" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;&amp;, seastar::bool_class&lt;continuous_tag&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="1123.7" y="229" width="0.4" height="15.0" fill="rgb(211,83,14)" rx="2" ry="2" />
<text  x="1126.66" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="203.4" y="245" width="0.2" height="15.0" fill="rgb(251,47,25)" rx="2" ry="2" />
<text  x="206.41" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="59.9" y="325" width="0.3" height="15.0" fill="rgb(250,111,19)" rx="2" ry="2" />
<text  x="62.93" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.4" y="293" width="0.5" height="15.0" fill="rgb(206,169,19)" rx="2" ry="2" />
<text  x="49.43" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="799.1" y="277" width="1.2" height="15.0" fill="rgb(246,156,23)" rx="2" ry="2" />
<text  x="802.14" y="287.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.0" y="245" width="0.3" height="15.0" fill="rgb(236,154,48)" rx="2" ry="2" />
<text  x="53.03" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="469.0" y="293" width="0.2" height="15.0" fill="rgb(227,53,2)" rx="2" ry="2" />
<text  x="472.00" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="500.5" y="229" width="0.7" height="15.0" fill="rgb(224,26,13)" rx="2" ry="2" />
<text  x="503.49" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (4 samples, 0.08%)</title><rect x="862.1" y="501" width="0.9" height="15.0" fill="rgb(214,70,10)" rx="2" ry="2" />
<text  x="865.11" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.10%)</title><rect x="97.7" y="437" width="1.1" height="15.0" fill="rgb(235,227,46)" rx="2" ry="2" />
<text  x="100.71" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="814.7" y="325" width="0.2" height="15.0" fill="rgb(237,201,26)" rx="2" ry="2" />
<text  x="817.66" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="738.4" y="389" width="0.5" height="15.0" fill="rgb(233,173,15)" rx="2" ry="2" />
<text  x="741.42" y="399.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="724.5" y="421" width="3.1" height="15.0" fill="rgb(207,225,42)" rx="2" ry="2" />
<text  x="727.48" y="431.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="18.8" y="453" width="0.2" height="15.0" fill="rgb(237,123,53)" rx="2" ry="2" />
<text  x="21.77" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="810.2" y="405" width="0.6" height="15.0" fill="rgb(249,160,11)" rx="2" ry="2" />
<text  x="813.16" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (7 samples, 0.13%)</title><rect x="940.4" y="421" width="1.5" height="15.0" fill="rgb(246,207,51)" rx="2" ry="2" />
<text  x="943.37" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="52.1" y="165" width="0.2" height="15.0" fill="rgb(250,135,54)" rx="2" ry="2" />
<text  x="55.05" y="175.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="992.1" y="309" width="2.9" height="15.0" fill="rgb(212,219,51)" rx="2" ry="2" />
<text  x="995.10" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="39.0" y="261" width="0.2" height="15.0" fill="rgb(251,221,13)" rx="2" ry="2" />
<text  x="42.01" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="254.0" y="149" width="0.2" height="15.0" fill="rgb(227,94,42)" rx="2" ry="2" />
<text  x="257.01" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,831 samples, 92.07%)</title><rect x="83.3" y="581" width="1086.5" height="15.0" fill="rgb(208,223,7)" rx="2" ry="2" />
<text  x="86.31" y="591.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="852.9" y="405" width="0.2" height="15.0" fill="rgb(245,188,49)" rx="2" ry="2" />
<text  x="855.89" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="615.0" y="437" width="0.2" height="15.0" fill="rgb(243,42,44)" rx="2" ry="2" />
<text  x="617.96" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="738.9" y="389" width="0.2" height="15.0" fill="rgb(237,97,5)" rx="2" ry="2" />
<text  x="741.87" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="43.3" y="229" width="0.7" height="15.0" fill="rgb(250,78,45)" rx="2" ry="2" />
<text  x="46.28" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1161.0" y="501" width="0.7" height="15.0" fill="rgb(205,204,0)" rx="2" ry="2" />
<text  x="1163.99" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%)</title><rect x="176.9" y="309" width="0.6" height="15.0" fill="rgb(230,180,17)" rx="2" ry="2" />
<text  x="179.87" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (2 samples, 0.04%)</title><rect x="60.6" y="309" width="0.5" height="15.0" fill="rgb(213,101,50)" rx="2" ry="2" />
<text  x="63.60" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="926.2" y="389" width="0.2" height="15.0" fill="rgb(253,205,13)" rx="2" ry="2" />
<text  x="929.20" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (4 samples, 0.08%)</title><rect x="726.7" y="357" width="0.9" height="15.0" fill="rgb(237,225,18)" rx="2" ry="2" />
<text  x="729.73" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="688.7" y="517" width="0.2" height="15.0" fill="rgb(249,205,10)" rx="2" ry="2" />
<text  x="691.72" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::sorted_tokens (1 samples, 0.02%)</title><rect x="18.8" y="421" width="0.2" height="15.0" fill="rgb(248,190,37)" rx="2" ry="2" />
<text  x="21.77" y="431.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="31.4" y="277" width="0.9" height="15.0" fill="rgb(226,212,26)" rx="2" ry="2" />
<text  x="34.36" y="287.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="522.3" y="229" width="0.2" height="15.0" fill="rgb(249,208,9)" rx="2" ry="2" />
<text  x="525.30" y="239.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (10 samples, 0.19%)</title><rect x="817.8" y="405" width="2.3" height="15.0" fill="rgb(221,52,28)" rx="2" ry="2" />
<text  x="820.81" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="54.3" y="277" width="0.2" height="15.0" fill="rgb(246,88,40)" rx="2" ry="2" />
<text  x="57.30" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (4 samples, 0.08%)</title><rect x="646.0" y="501" width="0.9" height="15.0" fill="rgb(225,161,51)" rx="2" ry="2" />
<text  x="648.99" y="511.5" ></text>
</g>
<g >
<title>do_parse_schema_tables (1 samples, 0.02%)</title><rect x="79.7" y="277" width="0.2" height="15.0" fill="rgb(224,192,46)" rx="2" ry="2" />
<text  x="82.72" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="17.0" y="581" width="0.4" height="15.0" fill="rgb(219,158,1)" rx="2" ry="2" />
<text  x="19.97" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%)</title><rect x="28.2" y="277" width="0.2" height="15.0" fill="rgb(241,78,16)" rx="2" ry="2" />
<text  x="31.22" y="287.5" ></text>
</g>
<g >
<title>schema_registry_entry::is_synced (1 samples, 0.02%)</title><rect x="1126.8" y="357" width="0.2" height="15.0" fill="rgb(209,51,1)" rx="2" ry="2" />
<text  x="1129.81" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.7" y="421" width="0.2" height="15.0" fill="rgb(244,97,44)" rx="2" ry="2" />
<text  x="69.67" y="431.5" ></text>
</g>
<g >
<title>auth::operator== (1 samples, 0.02%)</title><rect x="790.1" y="181" width="0.3" height="15.0" fill="rgb(246,134,47)" rx="2" ry="2" />
<text  x="793.14" y="191.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="248.6" y="197" width="0.2" height="15.0" fill="rgb(252,97,35)" rx="2" ry="2" />
<text  x="251.61" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="189.5" y="293" width="0.4" height="15.0" fill="rgb(224,8,9)" rx="2" ry="2" />
<text  x="192.46" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="825.2" y="405" width="0.3" height="15.0" fill="rgb(227,16,47)" rx="2" ry="2" />
<text  x="828.23" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1089.7" y="405" width="0.2" height="15.0" fill="rgb(240,174,9)" rx="2" ry="2" />
<text  x="1092.70" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="276.3" y="229" width="0.9" height="15.0" fill="rgb(253,62,9)" rx="2" ry="2" />
<text  x="279.27" y="239.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="890.0" y="293" width="2.2" height="15.0" fill="rgb(215,111,27)" rx="2" ry="2" />
<text  x="893.00" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="1048.5" y="373" width="0.5" height="15.0" fill="rgb(253,181,17)" rx="2" ry="2" />
<text  x="1051.54" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="694.6" y="485" width="0.4" height="15.0" fill="rgb(233,161,45)" rx="2" ry="2" />
<text  x="697.57" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="247.7" y="181" width="0.7" height="15.0" fill="rgb(237,81,17)" rx="2" ry="2" />
<text  x="250.71" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="863.0" y="501" width="0.2" height="15.0" fill="rgb(217,216,17)" rx="2" ry="2" />
<text  x="866.01" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="350.5" y="213" width="0.2" height="15.0" fill="rgb(207,225,13)" rx="2" ry="2" />
<text  x="353.48" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="1045.6" y="325" width="0.2" height="15.0" fill="rgb(239,53,11)" rx="2" ry="2" />
<text  x="1048.62" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (4 samples, 0.08%)</title><rect x="23.9" y="325" width="0.9" height="15.0" fill="rgb(247,211,54)" rx="2" ry="2" />
<text  x="26.94" y="335.5" ></text>
</g>
<g >
<title>table::make_reader (444 samples, 8.46%)</title><rect x="446.3" y="389" width="99.8" height="15.0" fill="rgb(246,133,45)" rx="2" ry="2" />
<text  x="449.29" y="399.5" >table::make_..</text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (62 samples, 1.18%)</title><rect x="44.9" y="373" width="13.9" height="15.0" fill="rgb(218,142,47)" rx="2" ry="2" />
<text  x="47.86" y="383.5" ></text>
</g>
<g >
<title>seastar::fair_queue::grab_capacity (1 samples, 0.02%)</title><rect x="1168.4" y="501" width="0.2" height="15.0" fill="rgb(240,152,4)" rx="2" ry="2" />
<text  x="1171.41" y="511.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="197.6" y="213" width="0.6" height="15.0" fill="rgb(227,182,17)" rx="2" ry="2" />
<text  x="200.56" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (38 samples, 0.72%)</title><rect x="534.7" y="357" width="8.5" height="15.0" fill="rgb(237,201,17)" rx="2" ry="2" />
<text  x="537.67" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.0" y="405" width="0.2" height="15.0" fill="rgb(242,203,47)" rx="2" ry="2" />
<text  x="66.97" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="776.2" y="357" width="0.7" height="15.0" fill="rgb(237,12,27)" rx="2" ry="2" />
<text  x="779.20" y="367.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%)</title><rect x="18.5" y="581" width="0.5" height="15.0" fill="rgb(234,145,25)" rx="2" ry="2" />
<text  x="21.55" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (2 samples, 0.04%)</title><rect x="850.9" y="437" width="0.4" height="15.0" fill="rgb(223,195,8)" rx="2" ry="2" />
<text  x="853.87" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="854.9" y="389" width="0.5" height="15.0" fill="rgb(233,104,7)" rx="2" ry="2" />
<text  x="857.91" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="248.4" y="197" width="0.2" height="15.0" fill="rgb(226,219,12)" rx="2" ry="2" />
<text  x="251.38" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="1125.5" y="293" width="0.2" height="15.0" fill="rgb(238,124,51)" rx="2" ry="2" />
<text  x="1128.46" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="49.6" y="293" width="0.2" height="15.0" fill="rgb(226,182,41)" rx="2" ry="2" />
<text  x="52.58" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="783.6" y="261" width="0.2" height="15.0" fill="rgb(229,95,40)" rx="2" ry="2" />
<text  x="786.62" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (52 samples, 0.99%)</title><rect x="1049.4" y="373" width="11.7" height="15.0" fill="rgb(245,97,13)" rx="2" ry="2" />
<text  x="1052.44" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="39.5" y="277" width="0.6" height="15.0" fill="rgb(235,195,20)" rx="2" ry="2" />
<text  x="42.46" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="539.2" y="309" width="0.2" height="15.0" fill="rgb(205,41,52)" rx="2" ry="2" />
<text  x="542.17" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.1" y="533" width="0.2" height="15.0" fill="rgb(248,200,29)" rx="2" ry="2" />
<text  x="21.10" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="17.9" y="501" width="0.2" height="15.0" fill="rgb(241,34,41)" rx="2" ry="2" />
<text  x="20.87" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (2 samples, 0.04%)</title><rect x="1134.2" y="229" width="0.5" height="15.0" fill="rgb(210,132,37)" rx="2" ry="2" />
<text  x="1137.23" y="239.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.11%)</title><rect x="19.7" y="549" width="1.3" height="15.0" fill="rgb(247,66,9)" rx="2" ry="2" />
<text  x="22.67" y="559.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (14 samples, 0.27%)</title><rect x="1122.3" y="277" width="3.2" height="15.0" fill="rgb(212,135,8)" rx="2" ry="2" />
<text  x="1125.31" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="912.3" y="405" width="1.1" height="15.0" fill="rgb(222,222,11)" rx="2" ry="2" />
<text  x="915.26" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="50.9" y="261" width="0.3" height="15.0" fill="rgb(246,139,4)" rx="2" ry="2" />
<text  x="53.93" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="1136.9" y="453" width="0.3" height="15.0" fill="rgb(219,8,54)" rx="2" ry="2" />
<text  x="1139.93" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="69" width="0.2" height="15.0" fill="rgb(206,7,8)" rx="2" ry="2" />
<text  x="57.08" y="79.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1029.0" y="309" width="0.2" height="15.0" fill="rgb(219,102,2)" rx="2" ry="2" />
<text  x="1031.98" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="685.8" y="517" width="0.2" height="15.0" fill="rgb(236,33,50)" rx="2" ry="2" />
<text  x="688.80" y="527.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="971.9" y="325" width="2.0" height="15.0" fill="rgb(254,162,33)" rx="2" ry="2" />
<text  x="974.86" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="685.3" y="469" width="0.5" height="15.0" fill="rgb(216,201,5)" rx="2" ry="2" />
<text  x="688.35" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="713.9" y="533" width="0.2" height="15.0" fill="rgb(226,19,32)" rx="2" ry="2" />
<text  x="716.91" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="939.0" y="405" width="0.2" height="15.0" fill="rgb(214,114,54)" rx="2" ry="2" />
<text  x="942.02" y="415.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (21 samples, 0.40%)</title><rect x="914.7" y="405" width="4.8" height="15.0" fill="rgb(236,79,6)" rx="2" ry="2" />
<text  x="917.73" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (5 samples, 0.10%)</title><rect x="571.6" y="341" width="1.1" height="15.0" fill="rgb(211,210,44)" rx="2" ry="2" />
<text  x="574.55" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="97.5" y="437" width="0.2" height="15.0" fill="rgb(228,86,41)" rx="2" ry="2" />
<text  x="100.48" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="662.0" y="501" width="0.4" height="15.0" fill="rgb(217,172,10)" rx="2" ry="2" />
<text  x="664.96" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="73.9" y="453" width="0.2" height="15.0" fill="rgb(224,6,30)" rx="2" ry="2" />
<text  x="76.87" y="463.5" ></text>
</g>
<g >
<title>row::compact_and_expire (95 samples, 1.81%)</title><rect x="396.4" y="245" width="21.3" height="15.0" fill="rgb(228,143,31)" rx="2" ry="2" />
<text  x="399.36" y="255.5" >r..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (66 samples, 1.26%)</title><rect x="23.5" y="373" width="14.8" height="15.0" fill="rgb(245,222,22)" rx="2" ry="2" />
<text  x="26.49" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="848.8" y="501" width="0.7" height="15.0" fill="rgb(236,147,2)" rx="2" ry="2" />
<text  x="851.84" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="79.9" y="597" width="0.3" height="15.0" fill="rgb(230,182,15)" rx="2" ry="2" />
<text  x="82.94" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="175.1" y="325" width="0.2" height="15.0" fill="rgb(208,123,40)" rx="2" ry="2" />
<text  x="178.07" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="38.8" y="357" width="0.4" height="15.0" fill="rgb(217,181,1)" rx="2" ry="2" />
<text  x="41.79" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="432.6" y="277" width="0.4" height="15.0" fill="rgb(213,168,23)" rx="2" ry="2" />
<text  x="435.57" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (8 samples, 0.15%)</title><rect x="1158.3" y="517" width="1.8" height="15.0" fill="rgb(239,210,46)" rx="2" ry="2" />
<text  x="1161.29" y="527.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="60.4" y="293" width="0.2" height="15.0" fill="rgb(215,203,17)" rx="2" ry="2" />
<text  x="63.38" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1015.7" y="181" width="0.2" height="15.0" fill="rgb(240,35,50)" rx="2" ry="2" />
<text  x="1018.71" y="191.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (2 samples, 0.04%)</title><rect x="845.9" y="517" width="0.5" height="15.0" fill="rgb(232,152,46)" rx="2" ry="2" />
<text  x="848.92" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="828.8" y="389" width="0.5" height="15.0" fill="rgb(218,19,10)" rx="2" ry="2" />
<text  x="831.83" y="399.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="77.5" y="517" width="0.2" height="15.0" fill="rgb(229,35,14)" rx="2" ry="2" />
<text  x="80.47" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="99.1" y="485" width="0.4" height="15.0" fill="rgb(206,50,54)" rx="2" ry="2" />
<text  x="102.06" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="967.6" y="389" width="0.2" height="15.0" fill="rgb(211,152,37)" rx="2" ry="2" />
<text  x="970.58" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.08%)</title><rect x="652.5" y="501" width="0.9" height="15.0" fill="rgb(243,219,21)" rx="2" ry="2" />
<text  x="655.51" y="511.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="79.9" y="405" width="0.3" height="15.0" fill="rgb(220,63,10)" rx="2" ry="2" />
<text  x="82.94" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;entangled, std::allocator&lt;entangled&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="11.6" y="613" width="0.2" height="15.0" fill="rgb(228,197,43)" rx="2" ry="2" />
<text  x="14.57" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="253.8" y="149" width="0.2" height="15.0" fill="rgb(210,50,21)" rx="2" ry="2" />
<text  x="256.78" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,831 samples, 92.07%)</title><rect x="83.3" y="565" width="1086.5" height="15.0" fill="rgb(230,2,36)" rx="2" ry="2" />
<text  x="86.31" y="575.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1082.1" y="373" width="0.2" height="15.0" fill="rgb(253,34,17)" rx="2" ry="2" />
<text  x="1085.05" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (9 samples, 0.17%)</title><rect x="793.7" y="181" width="2.1" height="15.0" fill="rgb(217,166,51)" rx="2" ry="2" />
<text  x="796.74" y="191.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="53.0" y="309" width="0.2" height="15.0" fill="rgb(243,57,54)" rx="2" ry="2" />
<text  x="55.95" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="980.2" y="293" width="0.2" height="15.0" fill="rgb(237,79,53)" rx="2" ry="2" />
<text  x="983.18" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="46.4" y="325" width="0.5" height="15.0" fill="rgb(238,150,6)" rx="2" ry="2" />
<text  x="49.43" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (9 samples, 0.17%)</title><rect x="75.4" y="517" width="2.1" height="15.0" fill="rgb(213,173,21)" rx="2" ry="2" />
<text  x="78.44" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="57.0" y="245" width="0.2" height="15.0" fill="rgb(251,228,0)" rx="2" ry="2" />
<text  x="60.00" y="255.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1045.2" y="293" width="0.2" height="15.0" fill="rgb(230,186,43)" rx="2" ry="2" />
<text  x="1048.17" y="303.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="27.3" y="293" width="0.5" height="15.0" fill="rgb(246,45,54)" rx="2" ry="2" />
<text  x="30.32" y="303.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="766.5" y="421" width="0.3" height="15.0" fill="rgb(242,135,2)" rx="2" ry="2" />
<text  x="769.53" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (3 samples, 0.06%)</title><rect x="708.7" y="453" width="0.7" height="15.0" fill="rgb(234,38,34)" rx="2" ry="2" />
<text  x="711.73" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="79.9" y="629" width="0.3" height="15.0" fill="rgb(251,133,18)" rx="2" ry="2" />
<text  x="82.94" y="639.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%)</title><rect x="687.4" y="469" width="0.2" height="15.0" fill="rgb(243,97,51)" rx="2" ry="2" />
<text  x="690.37" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (60 samples, 1.14%)</title><rect x="560.1" y="373" width="13.5" height="15.0" fill="rgb(228,114,18)" rx="2" ry="2" />
<text  x="563.08" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="1167.1" y="469" width="0.2" height="15.0" fill="rgb(224,115,0)" rx="2" ry="2" />
<text  x="1170.06" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="109.6" y="517" width="0.3" height="15.0" fill="rgb(207,79,3)" rx="2" ry="2" />
<text  x="112.63" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="47.8" y="309" width="0.2" height="15.0" fill="rgb(244,126,44)" rx="2" ry="2" />
<text  x="50.78" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::file&gt;::get_promise (1 samples, 0.02%)</title><rect x="631.4" y="485" width="0.2" height="15.0" fill="rgb(246,67,49)" rx="2" ry="2" />
<text  x="634.37" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="42.6" y="213" width="0.2" height="15.0" fill="rgb(228,149,28)" rx="2" ry="2" />
<text  x="45.61" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="55.2" y="213" width="0.9" height="15.0" fill="rgb(250,162,23)" rx="2" ry="2" />
<text  x="58.20" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (9 samples, 0.17%)</title><rect x="838.0" y="421" width="2.1" height="15.0" fill="rgb(222,195,50)" rx="2" ry="2" />
<text  x="841.05" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="848.8" y="405" width="0.3" height="15.0" fill="rgb(220,218,30)" rx="2" ry="2" />
<text  x="851.84" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="1133.8" y="165" width="0.2" height="15.0" fill="rgb(230,93,5)" rx="2" ry="2" />
<text  x="1136.78" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="471.3" y="309" width="0.4" height="15.0" fill="rgb(214,214,48)" rx="2" ry="2" />
<text  x="474.25" y="319.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,832 samples, 92.09%)</title><rect x="83.3" y="629" width="1086.7" height="15.0" fill="rgb(234,153,10)" rx="2" ry="2" />
<text  x="86.31" y="639.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1133.6" y="165" width="0.2" height="15.0" fill="rgb(244,172,50)" rx="2" ry="2" />
<text  x="1136.55" y="175.5" ></text>
</g>
<g >
<title>db::system_keyspace::set_local_host_id (1 samples, 0.02%)</title><rect x="106.7" y="517" width="0.2" height="15.0" fill="rgb(223,12,34)" rx="2" ry="2" />
<text  x="109.70" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="154.4" y="421" width="0.2" height="15.0" fill="rgb(235,140,16)" rx="2" ry="2" />
<text  x="157.38" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.2" y="405" width="0.2" height="15.0" fill="rgb(219,49,37)" rx="2" ry="2" />
<text  x="67.20" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (11 samples, 0.21%)</title><rect x="654.8" y="501" width="2.4" height="15.0" fill="rgb(242,178,40)" rx="2" ry="2" />
<text  x="657.76" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="279.4" y="213" width="0.2" height="15.0" fill="rgb(244,90,30)" rx="2" ry="2" />
<text  x="282.42" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.7" y="293" width="0.2" height="15.0" fill="rgb(207,84,20)" rx="2" ry="2" />
<text  x="62.70" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_table (1 samples, 0.02%)</title><rect x="106.5" y="501" width="0.2" height="15.0" fill="rgb(253,228,49)" rx="2" ry="2" />
<text  x="109.48" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="18.3" y="181" width="0.2" height="15.0" fill="rgb(251,228,14)" rx="2" ry="2" />
<text  x="21.32" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (214 samples, 4.08%)</title><rect x="988.0" y="325" width="48.2" height="15.0" fill="rgb(216,84,22)" rx="2" ry="2" />
<text  x="991.05" y="335.5" >serv..</text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="53.2" y="309" width="0.4" height="15.0" fill="rgb(212,123,0)" rx="2" ry="2" />
<text  x="56.18" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="980.0" y="293" width="0.2" height="15.0" fill="rgb(247,164,21)" rx="2" ry="2" />
<text  x="982.95" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="699.5" y="517" width="0.9" height="15.0" fill="rgb(250,224,30)" rx="2" ry="2" />
<text  x="702.51" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.27%)</title><rect x="244.6" y="165" width="3.1" height="15.0" fill="rgb(247,3,19)" rx="2" ry="2" />
<text  x="247.56" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1169.8" y="549" width="0.2" height="15.0" fill="rgb(235,161,31)" rx="2" ry="2" />
<text  x="1172.76" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (13 samples, 0.25%)</title><rect x="567.1" y="325" width="2.9" height="15.0" fill="rgb(217,127,42)" rx="2" ry="2" />
<text  x="570.05" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::writer_of_column (1 samples, 0.02%)</title><rect x="1130.9" y="149" width="0.2" height="15.0" fill="rgb(222,62,48)" rx="2" ry="2" />
<text  x="1133.85" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (24 samples, 0.46%)</title><rect x="937.7" y="453" width="5.4" height="15.0" fill="rgb(210,144,12)" rx="2" ry="2" />
<text  x="940.67" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="1130.2" y="133" width="0.2" height="15.0" fill="rgb(237,135,6)" rx="2" ry="2" />
<text  x="1133.18" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="55.7" y="181" width="0.4" height="15.0" fill="rgb(240,189,51)" rx="2" ry="2" />
<text  x="58.65" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="615.9" y="421" width="0.2" height="15.0" fill="rgb(208,194,27)" rx="2" ry="2" />
<text  x="618.85" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (2 samples, 0.04%)</title><rect x="70.9" y="389" width="0.5" height="15.0" fill="rgb(216,9,25)" rx="2" ry="2" />
<text  x="73.95" y="399.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="253.6" y="149" width="0.2" height="15.0" fill="rgb(231,179,13)" rx="2" ry="2" />
<text  x="256.56" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (3 samples, 0.06%)</title><rect x="461.1" y="293" width="0.7" height="15.0" fill="rgb(240,23,44)" rx="2" ry="2" />
<text  x="464.13" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(210,192,35)" rx="2" ry="2" />
<text  x="13.67" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="422.7" y="261" width="0.2" height="15.0" fill="rgb(237,9,15)" rx="2" ry="2" />
<text  x="425.67" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="434.8" y="309" width="0.2" height="15.0" fill="rgb(249,107,26)" rx="2" ry="2" />
<text  x="437.82" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (32 samples, 0.61%)</title><rect x="67.6" y="501" width="7.2" height="15.0" fill="rgb(240,78,30)" rx="2" ry="2" />
<text  x="70.57" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="582.6" y="389" width="0.9" height="15.0" fill="rgb(241,219,52)" rx="2" ry="2" />
<text  x="585.57" y="399.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="856.9" y="245" width="0.3" height="15.0" fill="rgb(221,77,19)" rx="2" ry="2" />
<text  x="859.94" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="841.6" y="501" width="0.3" height="15.0" fill="rgb(215,12,0)" rx="2" ry="2" />
<text  x="844.64" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="61.1" y="133" width="0.2" height="15.0" fill="rgb(234,168,7)" rx="2" ry="2" />
<text  x="64.05" y="143.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%)</title><rect x="107.6" y="453" width="0.5" height="15.0" fill="rgb(235,173,8)" rx="2" ry="2" />
<text  x="110.60" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (6 samples, 0.11%)</title><rect x="936.1" y="405" width="1.3" height="15.0" fill="rgb(245,124,19)" rx="2" ry="2" />
<text  x="939.10" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (2 samples, 0.04%)</title><rect x="51.2" y="229" width="0.4" height="15.0" fill="rgb(238,193,1)" rx="2" ry="2" />
<text  x="54.15" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (2 samples, 0.04%)</title><rect x="17.9" y="597" width="0.4" height="15.0" fill="rgb(212,165,27)" rx="2" ry="2" />
<text  x="20.87" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="825.2" y="421" width="0.3" height="15.0" fill="rgb(244,162,27)" rx="2" ry="2" />
<text  x="828.23" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="277" width="0.2" height="15.0" fill="rgb(217,54,32)" rx="2" ry="2" />
<text  x="78.89" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (65 samples, 1.24%)</title><rect x="305.3" y="373" width="14.6" height="15.0" fill="rgb(251,141,6)" rx="2" ry="2" />
<text  x="308.28" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="514.7" y="277" width="0.9" height="15.0" fill="rgb(208,123,42)" rx="2" ry="2" />
<text  x="517.65" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%)</title><rect x="240.7" y="101" width="0.5" height="15.0" fill="rgb(247,126,29)" rx="2" ry="2" />
<text  x="243.74" y="111.5" ></text>
</g>
<g >
<title>posix_memalign (4 samples, 0.08%)</title><rect x="240.3" y="117" width="0.9" height="15.0" fill="rgb(206,56,19)" rx="2" ry="2" />
<text  x="243.29" y="127.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,293 samples, 43.70%)</title><rect x="110.8" y="517" width="515.6" height="15.0" fill="rgb(248,229,16)" rx="2" ry="2" />
<text  x="113.75" y="527.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.1" y="421" width="0.2" height="15.0" fill="rgb(235,9,26)" rx="2" ry="2" />
<text  x="70.12" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="80.4" y="533" width="2.7" height="15.0" fill="rgb(219,113,30)" rx="2" ry="2" />
<text  x="83.39" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (3 samples, 0.06%)</title><rect x="281.7" y="277" width="0.6" height="15.0" fill="rgb(206,186,16)" rx="2" ry="2" />
<text  x="284.67" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="286.4" y="293" width="0.2" height="15.0" fill="rgb(217,85,10)" rx="2" ry="2" />
<text  x="289.39" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (13 samples, 0.25%)</title><rect x="151.7" y="453" width="2.9" height="15.0" fill="rgb(238,86,2)" rx="2" ry="2" />
<text  x="154.68" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (20 samples, 0.38%)</title><rect x="233.8" y="101" width="4.5" height="15.0" fill="rgb(244,150,46)" rx="2" ry="2" />
<text  x="236.77" y="111.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="568.2" y="309" width="0.2" height="15.0" fill="rgb(252,40,54)" rx="2" ry="2" />
<text  x="571.18" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="764.5" y="389" width="0.2" height="15.0" fill="rgb(213,58,30)" rx="2" ry="2" />
<text  x="767.51" y="399.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="18.3" y="581" width="0.2" height="15.0" fill="rgb(227,220,52)" rx="2" ry="2" />
<text  x="21.32" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%)</title><rect x="740.9" y="341" width="0.9" height="15.0" fill="rgb(207,141,52)" rx="2" ry="2" />
<text  x="743.89" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="686.7" y="293" width="0.2" height="15.0" fill="rgb(252,89,3)" rx="2" ry="2" />
<text  x="689.70" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="851.8" y="293" width="0.2" height="15.0" fill="rgb(238,90,19)" rx="2" ry="2" />
<text  x="854.76" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="100.4" y="485" width="0.2" height="15.0" fill="rgb(242,217,6)" rx="2" ry="2" />
<text  x="103.41" y="495.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (6 samples, 0.11%)</title><rect x="579.2" y="389" width="1.3" height="15.0" fill="rgb(249,100,31)" rx="2" ry="2" />
<text  x="582.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="166.5" y="405" width="0.2" height="15.0" fill="rgb(216,50,36)" rx="2" ry="2" />
<text  x="169.52" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;logalloc::segment_descriptor, std::allocator&lt;logalloc::segment_descriptor&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="11.6" y="629" width="0.2" height="15.0" fill="rgb(211,106,52)" rx="2" ry="2" />
<text  x="14.57" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (29 samples, 0.55%)</title><rect x="789.2" y="229" width="6.6" height="15.0" fill="rgb(241,14,4)" rx="2" ry="2" />
<text  x="792.25" y="239.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="834.2" y="373" width="0.9" height="15.0" fill="rgb(236,133,54)" rx="2" ry="2" />
<text  x="837.22" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1133.8" y="197" width="0.2" height="15.0" fill="rgb(234,212,10)" rx="2" ry="2" />
<text  x="1136.78" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="707.4" y="485" width="0.2" height="15.0" fill="rgb(236,87,8)" rx="2" ry="2" />
<text  x="710.39" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1081.8" y="341" width="0.3" height="15.0" fill="rgb(241,85,54)" rx="2" ry="2" />
<text  x="1084.83" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="73.0" y="373" width="0.2" height="15.0" fill="rgb(244,191,31)" rx="2" ry="2" />
<text  x="75.97" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,119 samples, 21.33%)</title><rect x="866.8" y="469" width="251.7" height="15.0" fill="rgb(235,55,33)" rx="2" ry="2" />
<text  x="869.83" y="479.5" >cql3::statements::select_statemen..</text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (3 samples, 0.06%)</title><rect x="21.5" y="453" width="0.6" height="15.0" fill="rgb(238,146,49)" rx="2" ry="2" />
<text  x="24.47" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="53.2" y="261" width="0.4" height="15.0" fill="rgb(243,109,44)" rx="2" ry="2" />
<text  x="56.18" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (36 samples, 0.69%)</title><rect x="286.6" y="341" width="8.1" height="15.0" fill="rgb(250,224,4)" rx="2" ry="2" />
<text  x="289.62" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="815.3" y="341" width="2.1" height="15.0" fill="rgb(246,207,49)" rx="2" ry="2" />
<text  x="818.33" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="55.2" y="277" width="0.9" height="15.0" fill="rgb(209,138,0)" rx="2" ry="2" />
<text  x="58.20" y="287.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="269.5" y="245" width="0.5" height="15.0" fill="rgb(236,213,1)" rx="2" ry="2" />
<text  x="272.52" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="610.9" y="469" width="0.7" height="15.0" fill="rgb(252,135,13)" rx="2" ry="2" />
<text  x="613.91" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="462.5" y="309" width="0.2" height="15.0" fill="rgb(246,169,18)" rx="2" ry="2" />
<text  x="465.48" y="319.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="853.8" y="373" width="0.2" height="15.0" fill="rgb(220,13,28)" rx="2" ry="2" />
<text  x="856.79" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__206 (1 samples, 0.02%)</title><rect x="37.0" y="309" width="0.2" height="15.0" fill="rgb(213,48,5)" rx="2" ry="2" />
<text  x="39.99" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="39.2" y="341" width="0.3" height="15.0" fill="rgb(233,147,45)" rx="2" ry="2" />
<text  x="42.24" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%)</title><rect x="433.0" y="277" width="0.7" height="15.0" fill="rgb(251,95,53)" rx="2" ry="2" />
<text  x="436.02" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="112.8" y="501" width="0.4" height="15.0" fill="rgb(239,145,28)" rx="2" ry="2" />
<text  x="115.77" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="260.8" y="197" width="0.2" height="15.0" fill="rgb(226,19,53)" rx="2" ry="2" />
<text  x="263.75" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (10 samples, 0.19%)</title><rect x="627.8" y="517" width="2.2" height="15.0" fill="rgb(218,154,27)" rx="2" ry="2" />
<text  x="630.77" y="527.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="492.4" y="325" width="0.2" height="15.0" fill="rgb(234,70,46)" rx="2" ry="2" />
<text  x="495.39" y="335.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (7 samples, 0.13%)</title><rect x="68.5" y="453" width="1.5" height="15.0" fill="rgb(223,166,14)" rx="2" ry="2" />
<text  x="71.47" y="463.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (259 samples, 4.94%)</title><rect x="474.4" y="373" width="58.2" height="15.0" fill="rgb(215,97,27)" rx="2" ry="2" />
<text  x="477.40" y="383.5" >memtab..</text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="18.3" y="245" width="0.2" height="15.0" fill="rgb(211,133,11)" rx="2" ry="2" />
<text  x="21.32" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="229" width="0.2" height="15.0" fill="rgb(220,47,54)" rx="2" ry="2" />
<text  x="57.08" y="239.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (19 samples, 0.36%)</title><rect x="1055.5" y="357" width="4.3" height="15.0" fill="rgb(253,19,27)" rx="2" ry="2" />
<text  x="1058.52" y="367.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="20.3" y="501" width="0.3" height="15.0" fill="rgb(209,213,3)" rx="2" ry="2" />
<text  x="23.34" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="47.8" y="325" width="0.2" height="15.0" fill="rgb(251,99,53)" rx="2" ry="2" />
<text  x="50.78" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%)</title><rect x="105.4" y="421" width="0.2" height="15.0" fill="rgb(218,147,46)" rx="2" ry="2" />
<text  x="108.35" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.5" y="117" width="0.3" height="15.0" fill="rgb(223,19,24)" rx="2" ry="2" />
<text  x="1134.53" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="798.5" y="261" width="0.4" height="15.0" fill="rgb(249,5,44)" rx="2" ry="2" />
<text  x="801.47" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="1018.2" y="261" width="0.2" height="15.0" fill="rgb(241,190,34)" rx="2" ry="2" />
<text  x="1021.18" y="271.5" ></text>
</g>
<g >
<title>__strlen_avx2 (13 samples, 0.25%)</title><rect x="998.6" y="277" width="2.9" height="15.0" fill="rgb(246,96,10)" rx="2" ry="2" />
<text  x="1001.62" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="848.8" y="469" width="0.5" height="15.0" fill="rgb(241,57,42)" rx="2" ry="2" />
<text  x="851.84" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="435.9" y="325" width="0.3" height="15.0" fill="rgb(253,208,3)" rx="2" ry="2" />
<text  x="438.94" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="71.8" y="389" width="0.3" height="15.0" fill="rgb(222,207,50)" rx="2" ry="2" />
<text  x="74.84" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%)</title><rect x="82.4" y="485" width="0.2" height="15.0" fill="rgb(253,118,13)" rx="2" ry="2" />
<text  x="85.41" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="60.6" y="293" width="0.2" height="15.0" fill="rgb(242,229,14)" rx="2" ry="2" />
<text  x="63.60" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (4 samples, 0.08%)</title><rect x="762.9" y="405" width="0.9" height="15.0" fill="rgb(219,224,48)" rx="2" ry="2" />
<text  x="765.93" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (13 samples, 0.25%)</title><rect x="1011.9" y="197" width="2.9" height="15.0" fill="rgb(216,105,50)" rx="2" ry="2" />
<text  x="1014.89" y="207.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%)</title><rect x="711.7" y="501" width="0.2" height="15.0" fill="rgb(218,168,22)" rx="2" ry="2" />
<text  x="714.66" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="308.2" y="341" width="0.5" height="15.0" fill="rgb(210,36,32)" rx="2" ry="2" />
<text  x="311.20" y="351.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="926.7" y="437" width="0.2" height="15.0" fill="rgb(214,50,1)" rx="2" ry="2" />
<text  x="929.65" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="412.3" y="181" width="2.7" height="15.0" fill="rgb(246,203,26)" rx="2" ry="2" />
<text  x="415.33" y="191.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (1 samples, 0.02%)</title><rect x="78.8" y="629" width="0.2" height="15.0" fill="rgb(217,171,52)" rx="2" ry="2" />
<text  x="81.82" y="639.5" ></text>
</g>
<g >
<title>make_combined_reader (90 samples, 1.72%)</title><rect x="451.7" y="357" width="20.2" height="15.0" fill="rgb(211,179,30)" rx="2" ry="2" />
<text  x="454.68" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="826.6" y="453" width="0.4" height="15.0" fill="rgb(242,133,44)" rx="2" ry="2" />
<text  x="829.58" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="537.6" y="325" width="0.2" height="15.0" fill="rgb(216,168,8)" rx="2" ry="2" />
<text  x="540.59" y="335.5" ></text>
</g>
<g >
<title>query::result::builder::build (7 samples, 0.13%)</title><rect x="594.7" y="469" width="1.6" height="15.0" fill="rgb(216,119,2)" rx="2" ry="2" />
<text  x="597.72" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (10 samples, 0.19%)</title><rect x="277.4" y="245" width="2.2" height="15.0" fill="rgb(242,210,34)" rx="2" ry="2" />
<text  x="280.39" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="709.2" y="437" width="0.2" height="15.0" fill="rgb(211,122,28)" rx="2" ry="2" />
<text  x="712.18" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="196.7" y="229" width="0.2" height="15.0" fill="rgb(254,94,12)" rx="2" ry="2" />
<text  x="199.66" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="571.1" y="325" width="0.2" height="15.0" fill="rgb(248,150,2)" rx="2" ry="2" />
<text  x="574.10" y="335.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%)</title><rect x="687.4" y="405" width="0.2" height="15.0" fill="rgb(237,208,36)" rx="2" ry="2" />
<text  x="690.37" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (11 samples, 0.21%)</title><rect x="1040.4" y="373" width="2.5" height="15.0" fill="rgb(224,41,29)" rx="2" ry="2" />
<text  x="1043.45" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,277 samples, 43.40%)</title><rect x="113.9" y="501" width="512.1" height="15.0" fill="rgb(233,150,26)" rx="2" ry="2" />
<text  x="116.90" y="511.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="75.2" y="501" width="0.2" height="15.0" fill="rgb(217,136,48)" rx="2" ry="2" />
<text  x="78.22" y="511.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="256.3" y="213" width="0.2" height="15.0" fill="rgb(248,117,2)" rx="2" ry="2" />
<text  x="259.26" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="74.5" y="453" width="0.3" height="15.0" fill="rgb(232,100,8)" rx="2" ry="2" />
<text  x="77.54" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (63 samples, 1.20%)</title><rect x="268.2" y="293" width="14.1" height="15.0" fill="rgb(242,122,54)" rx="2" ry="2" />
<text  x="271.17" y="303.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="107.8" y="405" width="0.3" height="15.0" fill="rgb(232,10,39)" rx="2" ry="2" />
<text  x="110.83" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="838.9" y="389" width="1.2" height="15.0" fill="rgb(246,84,44)" rx="2" ry="2" />
<text  x="841.95" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="601.0" y="437" width="0.2" height="15.0" fill="rgb(223,33,46)" rx="2" ry="2" />
<text  x="604.01" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (3 samples, 0.06%)</title><rect x="105.4" y="533" width="0.6" height="15.0" fill="rgb(253,39,33)" rx="2" ry="2" />
<text  x="108.35" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%)</title><rect x="22.6" y="357" width="0.2" height="15.0" fill="rgb(254,222,13)" rx="2" ry="2" />
<text  x="25.59" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="908.7" y="373" width="0.2" height="15.0" fill="rgb(222,62,6)" rx="2" ry="2" />
<text  x="911.66" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="935.9" y="389" width="0.2" height="15.0" fill="rgb(216,215,10)" rx="2" ry="2" />
<text  x="938.87" y="399.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_local_host_id (1 samples, 0.02%)</title><rect x="106.7" y="533" width="0.2" height="15.0" fill="rgb(208,169,30)" rx="2" ry="2" />
<text  x="109.70" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.3" y="325" width="0.2" height="15.0" fill="rgb(213,71,21)" rx="2" ry="2" />
<text  x="62.25" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1136.9" y="181" width="0.3" height="15.0" fill="rgb(219,58,2)" rx="2" ry="2" />
<text  x="1139.93" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1004.2" y="245" width="0.7" height="15.0" fill="rgb(251,173,17)" rx="2" ry="2" />
<text  x="1007.24" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (4 samples, 0.08%)</title><rect x="851.5" y="373" width="0.9" height="15.0" fill="rgb(238,157,32)" rx="2" ry="2" />
<text  x="854.54" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="271.8" y="213" width="1.1" height="15.0" fill="rgb(236,181,0)" rx="2" ry="2" />
<text  x="274.77" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="674.8" y="453" width="0.2" height="15.0" fill="rgb(245,50,49)" rx="2" ry="2" />
<text  x="677.78" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (14 samples, 0.27%)</title><rect x="126.0" y="437" width="3.2" height="15.0" fill="rgb(225,82,10)" rx="2" ry="2" />
<text  x="129.04" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="819.2" y="325" width="0.2" height="15.0" fill="rgb(238,142,44)" rx="2" ry="2" />
<text  x="822.16" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="673.2" y="469" width="0.9" height="15.0" fill="rgb(249,112,42)" rx="2" ry="2" />
<text  x="676.20" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="65.8" y="405" width="0.2" height="15.0" fill="rgb(235,52,20)" rx="2" ry="2" />
<text  x="68.77" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (27 samples, 0.51%)</title><rect x="811.7" y="405" width="6.1" height="15.0" fill="rgb(208,34,33)" rx="2" ry="2" />
<text  x="814.73" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="384.2" y="181" width="0.5" height="15.0" fill="rgb(250,179,36)" rx="2" ry="2" />
<text  x="387.22" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1035.3" y="309" width="0.4" height="15.0" fill="rgb(206,156,53)" rx="2" ry="2" />
<text  x="1038.28" y="319.5" ></text>
</g>
<g >
<title>distributed_loader::init_non_system_keyspaces (1 samples, 0.02%)</title><rect x="79.7" y="517" width="0.2" height="15.0" fill="rgb(253,46,31)" rx="2" ry="2" />
<text  x="82.72" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictionsL11has_eq_nullERKNS4_13query_optionsERKNS5_10expressionEE3$_8EES8_SI_T_EUlRS7_E_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_8constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_11conjunctionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_12column_valueEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_5tokenEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13function_callEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4castEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_15field_selectionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4nullEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13bind_variableEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_16untyped_constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_17tuple_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_22collection_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSR_S6_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_SN_S1Z_S23_S27_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2C_S2F_ (3 samples, 0.06%)</title><rect x="851.5" y="357" width="0.7" height="15.0" fill="rgb(233,96,21)" rx="2" ry="2" />
<text  x="854.54" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.4" y="229" width="0.3" height="15.0" fill="rgb(223,12,45)" rx="2" ry="2" />
<text  x="49.43" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="308.4" y="325" width="0.3" height="15.0" fill="rgb(237,200,19)" rx="2" ry="2" />
<text  x="311.43" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="73.0" y="405" width="0.2" height="15.0" fill="rgb(242,158,6)" rx="2" ry="2" />
<text  x="75.97" y="415.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%)</title><rect x="885.7" y="309" width="0.2" height="15.0" fill="rgb(236,224,49)" rx="2" ry="2" />
<text  x="888.72" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="496.0" y="245" width="0.2" height="15.0" fill="rgb(214,124,24)" rx="2" ry="2" />
<text  x="498.99" y="255.5" ></text>
</g>
<g >
<title>db::schema_tables::store_map&lt;clustering_key_prefix, std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="107.2" y="437" width="0.2" height="15.0" fill="rgb(224,30,44)" rx="2" ry="2" />
<text  x="110.15" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="65.3" y="373" width="0.2" height="15.0" fill="rgb(225,109,39)" rx="2" ry="2" />
<text  x="68.32" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="613.2" y="453" width="0.2" height="15.0" fill="rgb(205,184,5)" rx="2" ry="2" />
<text  x="616.16" y="463.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%)</title><rect x="1137.8" y="533" width="0.5" height="15.0" fill="rgb(253,178,10)" rx="2" ry="2" />
<text  x="1140.83" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="472.6" y="341" width="1.1" height="15.0" fill="rgb(231,166,34)" rx="2" ry="2" />
<text  x="475.60" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (26 samples, 0.50%)</title><rect x="1129.5" y="325" width="5.9" height="15.0" fill="rgb(217,77,0)" rx="2" ry="2" />
<text  x="1132.50" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;unsigned int&gt;::_Rb_tree_iterator (1 samples, 0.02%)</title><rect x="38.1" y="309" width="0.2" height="15.0" fill="rgb(213,61,1)" rx="2" ry="2" />
<text  x="41.11" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="774.0" y="341" width="0.2" height="15.0" fill="rgb(234,106,30)" rx="2" ry="2" />
<text  x="776.95" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="671.4" y="501" width="0.2" height="15.0" fill="rgb(207,163,48)" rx="2" ry="2" />
<text  x="674.40" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="101.8" y="453" width="0.2" height="15.0" fill="rgb(249,159,28)" rx="2" ry="2" />
<text  x="104.76" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (5 samples, 0.10%)</title><rect x="124.0" y="437" width="1.1" height="15.0" fill="rgb(253,43,46)" rx="2" ry="2" />
<text  x="127.02" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.9" y="421" width="0.2" height="15.0" fill="rgb(216,168,3)" rx="2" ry="2" />
<text  x="13.90" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1145.7" y="517" width="0.2" height="15.0" fill="rgb(244,107,46)" rx="2" ry="2" />
<text  x="1148.70" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.2" y="229" width="0.2" height="15.0" fill="rgb(213,148,35)" rx="2" ry="2" />
<text  x="47.18" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="1088.8" y="437" width="1.1" height="15.0" fill="rgb(214,213,0)" rx="2" ry="2" />
<text  x="1091.80" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (700 samples, 13.34%)</title><rect x="163.6" y="437" width="157.4" height="15.0" fill="rgb(214,95,24)" rx="2" ry="2" />
<text  x="166.60" y="447.5" >flat_mutation_reader..</text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="32.3" y="277" width="0.4" height="15.0" fill="rgb(208,63,14)" rx="2" ry="2" />
<text  x="35.26" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="842.1" y="501" width="0.2" height="15.0" fill="rgb(239,185,28)" rx="2" ry="2" />
<text  x="845.09" y="511.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(236,210,28)" rx="2" ry="2" />
<text  x="1192.78" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="243.0" y="133" width="0.4" height="15.0" fill="rgb(208,182,29)" rx="2" ry="2" />
<text  x="245.99" y="143.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="785.9" y="197" width="0.4" height="15.0" fill="rgb(249,136,0)" rx="2" ry="2" />
<text  x="788.87" y="207.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="39.2" y="213" width="0.3" height="15.0" fill="rgb(248,70,49)" rx="2" ry="2" />
<text  x="42.24" y="223.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="664.9" y="517" width="1.1" height="15.0" fill="rgb(215,133,24)" rx="2" ry="2" />
<text  x="667.88" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="40.6" y="373" width="0.2" height="15.0" fill="rgb(208,6,37)" rx="2" ry="2" />
<text  x="43.59" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="151.5" y="453" width="0.2" height="15.0" fill="rgb(246,57,50)" rx="2" ry="2" />
<text  x="154.46" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="558.3" y="453" width="0.2" height="15.0" fill="rgb(235,49,6)" rx="2" ry="2" />
<text  x="561.28" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="687.1" y="517" width="0.3" height="15.0" fill="rgb(210,96,43)" rx="2" ry="2" />
<text  x="690.15" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="640.1" y="517" width="0.3" height="15.0" fill="rgb(236,200,39)" rx="2" ry="2" />
<text  x="643.14" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="198.9" y="213" width="0.2" height="15.0" fill="rgb(247,55,6)" rx="2" ry="2" />
<text  x="201.91" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="591.6" y="421" width="0.4" height="15.0" fill="rgb(243,44,20)" rx="2" ry="2" />
<text  x="594.57" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="818.7" y="325" width="0.5" height="15.0" fill="rgb(216,201,7)" rx="2" ry="2" />
<text  x="821.71" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="817.4" y="357" width="0.2" height="15.0" fill="rgb(226,135,49)" rx="2" ry="2" />
<text  x="820.36" y="367.5" ></text>
</g>
<g >
<title>db::config::config (1 samples, 0.02%)</title><rect x="83.1" y="629" width="0.2" height="15.0" fill="rgb(206,123,16)" rx="2" ry="2" />
<text  x="86.09" y="639.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="480.2" y="341" width="0.3" height="15.0" fill="rgb(228,211,43)" rx="2" ry="2" />
<text  x="483.25" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.13%)</title><rect x="607.8" y="469" width="1.5" height="15.0" fill="rgb(243,49,1)" rx="2" ry="2" />
<text  x="610.76" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::consume (171 samples, 3.26%)</title><rect x="353.0" y="229" width="38.4" height="15.0" fill="rgb(213,190,24)" rx="2" ry="2" />
<text  x="355.96" y="239.5" >mut..</text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="105.6" y="469" width="0.2" height="15.0" fill="rgb(215,70,14)" rx="2" ry="2" />
<text  x="108.58" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="701.1" y="501" width="0.2" height="15.0" fill="rgb(229,167,5)" rx="2" ry="2" />
<text  x="704.09" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="43.3" y="197" width="0.7" height="15.0" fill="rgb(245,16,36)" rx="2" ry="2" />
<text  x="46.28" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (216 samples, 4.12%)</title><rect x="208.8" y="245" width="48.6" height="15.0" fill="rgb(240,107,28)" rx="2" ry="2" />
<text  x="211.80" y="255.5" >loga..</text>
</g>
<g >
<title>seastar::alien::instance::poll_queues (1 samples, 0.02%)</title><rect x="1168.2" y="533" width="0.2" height="15.0" fill="rgb(220,103,18)" rx="2" ry="2" />
<text  x="1171.19" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="782.9" y="277" width="0.3" height="15.0" fill="rgb(242,189,33)" rx="2" ry="2" />
<text  x="785.95" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="43.3" y="213" width="0.7" height="15.0" fill="rgb(215,163,50)" rx="2" ry="2" />
<text  x="46.28" y="223.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="965.8" y="373" width="0.2" height="15.0" fill="rgb(232,95,41)" rx="2" ry="2" />
<text  x="968.78" y="383.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="41.0" y="373" width="0.3" height="15.0" fill="rgb(222,109,20)" rx="2" ry="2" />
<text  x="44.03" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.11%)</title><rect x="753.7" y="389" width="1.4" height="15.0" fill="rgb(251,131,28)" rx="2" ry="2" />
<text  x="756.71" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (2 samples, 0.04%)</title><rect x="1148.2" y="485" width="0.4" height="15.0" fill="rgb(217,119,17)" rx="2" ry="2" />
<text  x="1151.17" y="495.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="551.3" y="405" width="0.5" height="15.0" fill="rgb(207,28,53)" rx="2" ry="2" />
<text  x="554.31" y="415.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.34%)</title><rect x="1051.5" y="357" width="4.0" height="15.0" fill="rgb(211,79,11)" rx="2" ry="2" />
<text  x="1054.47" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="823.7" y="453" width="0.2" height="15.0" fill="rgb(214,100,33)" rx="2" ry="2" />
<text  x="826.65" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (7 samples, 0.13%)</title><rect x="938.8" y="421" width="1.6" height="15.0" fill="rgb(214,15,51)" rx="2" ry="2" />
<text  x="941.80" y="431.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (2 samples, 0.04%)</title><rect x="1133.3" y="197" width="0.5" height="15.0" fill="rgb(229,192,3)" rx="2" ry="2" />
<text  x="1136.33" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (57 samples, 1.09%)</title><rect x="1005.4" y="261" width="12.8" height="15.0" fill="rgb(211,115,15)" rx="2" ry="2" />
<text  x="1008.36" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="39.2" y="357" width="0.3" height="15.0" fill="rgb(219,156,41)" rx="2" ry="2" />
<text  x="42.24" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="251.8" y="181" width="0.2" height="15.0" fill="rgb(236,212,36)" rx="2" ry="2" />
<text  x="254.76" y="191.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="131.0" y="421" width="0.7" height="15.0" fill="rgb(244,185,11)" rx="2" ry="2" />
<text  x="133.99" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%)</title><rect x="392.5" y="245" width="0.3" height="15.0" fill="rgb(242,133,15)" rx="2" ry="2" />
<text  x="395.54" y="255.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%)</title><rect x="127.8" y="421" width="0.5" height="15.0" fill="rgb(212,99,8)" rx="2" ry="2" />
<text  x="130.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (2 samples, 0.04%)</title><rect x="1155.1" y="485" width="0.5" height="15.0" fill="rgb(205,82,26)" rx="2" ry="2" />
<text  x="1158.14" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="57.2" y="245" width="0.3" height="15.0" fill="rgb(226,148,54)" rx="2" ry="2" />
<text  x="60.23" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="742.9" y="309" width="0.5" height="15.0" fill="rgb(210,108,0)" rx="2" ry="2" />
<text  x="745.92" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="243.4" y="149" width="0.3" height="15.0" fill="rgb(242,104,16)" rx="2" ry="2" />
<text  x="246.44" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="55.7" y="133" width="0.4" height="15.0" fill="rgb(216,69,29)" rx="2" ry="2" />
<text  x="58.65" y="143.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.6" y="389" width="0.2" height="15.0" fill="rgb(250,71,29)" rx="2" ry="2" />
<text  x="25.59" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="53.6" y="309" width="0.7" height="15.0" fill="rgb(228,121,16)" rx="2" ry="2" />
<text  x="56.63" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="642.4" y="517" width="0.4" height="15.0" fill="rgb(241,28,36)" rx="2" ry="2" />
<text  x="645.39" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="811.3" y="373" width="0.2" height="15.0" fill="rgb(253,143,16)" rx="2" ry="2" />
<text  x="814.28" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="79.7" y="197" width="0.2" height="15.0" fill="rgb(214,46,37)" rx="2" ry="2" />
<text  x="82.72" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="85.8" y="549" width="0.2" height="15.0" fill="rgb(239,159,37)" rx="2" ry="2" />
<text  x="88.79" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (7 samples, 0.13%)</title><rect x="563.2" y="341" width="1.6" height="15.0" fill="rgb(219,119,21)" rx="2" ry="2" />
<text  x="566.23" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (7 samples, 0.13%)</title><rect x="791.3" y="165" width="1.5" height="15.0" fill="rgb(223,102,41)" rx="2" ry="2" />
<text  x="794.27" y="175.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="643.3" y="517" width="0.9" height="15.0" fill="rgb(244,94,4)" rx="2" ry="2" />
<text  x="646.29" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.3" y="501" width="0.2" height="15.0" fill="rgb(232,66,41)" rx="2" ry="2" />
<text  x="21.32" y="511.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="601.2" y="437" width="0.3" height="15.0" fill="rgb(216,223,40)" rx="2" ry="2" />
<text  x="604.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="69.6" y="405" width="0.2" height="15.0" fill="rgb(208,215,30)" rx="2" ry="2" />
<text  x="72.60" y="415.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%)</title><rect x="106.9" y="517" width="1.2" height="15.0" fill="rgb(239,54,4)" rx="2" ry="2" />
<text  x="109.93" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="618.8" y="421" width="0.2" height="15.0" fill="rgb(207,49,10)" rx="2" ry="2" />
<text  x="621.78" y="431.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="652.1" y="485" width="0.2" height="15.0" fill="rgb(211,24,4)" rx="2" ry="2" />
<text  x="655.06" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="631.1" y="517" width="0.3" height="15.0" fill="rgb(245,28,5)" rx="2" ry="2" />
<text  x="634.15" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="60.8" y="277" width="0.3" height="15.0" fill="rgb(215,222,15)" rx="2" ry="2" />
<text  x="63.83" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (1 samples, 0.02%)</title><rect x="686.7" y="325" width="0.2" height="15.0" fill="rgb(249,190,38)" rx="2" ry="2" />
<text  x="689.70" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.14%)</title><rect x="783.2" y="277" width="13.5" height="15.0" fill="rgb(238,104,52)" rx="2" ry="2" />
<text  x="786.17" y="287.5" ></text>
</g>
<g >
<title>database::apply_in_memory (25 samples, 0.48%)</title><rect x="1120.1" y="325" width="5.6" height="15.0" fill="rgb(235,62,4)" rx="2" ry="2" />
<text  x="1123.06" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%)</title><rect x="202.5" y="245" width="0.9" height="15.0" fill="rgb(244,178,45)" rx="2" ry="2" />
<text  x="205.51" y="255.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="80.8" y="421" width="0.3" height="15.0" fill="rgb(205,174,5)" rx="2" ry="2" />
<text  x="83.84" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="49.8" y="309" width="0.2" height="15.0" fill="rgb(240,80,52)" rx="2" ry="2" />
<text  x="52.81" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="598.3" y="437" width="0.2" height="15.0" fill="rgb(232,113,16)" rx="2" ry="2" />
<text  x="601.31" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="22.6" y="405" width="0.4" height="15.0" fill="rgb(226,43,12)" rx="2" ry="2" />
<text  x="25.59" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (2 samples, 0.04%)</title><rect x="688.9" y="517" width="0.5" height="15.0" fill="rgb(238,4,50)" rx="2" ry="2" />
<text  x="691.94" y="527.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (24 samples, 0.46%)</title><rect x="740.0" y="405" width="5.4" height="15.0" fill="rgb(240,81,7)" rx="2" ry="2" />
<text  x="742.99" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::prepare_heap (1 samples, 0.02%)</title><rect x="10.9" y="453" width="0.2" height="15.0" fill="rgb(208,5,42)" rx="2" ry="2" />
<text  x="13.90" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%)</title><rect x="394.6" y="197" width="0.6" height="15.0" fill="rgb(243,36,46)" rx="2" ry="2" />
<text  x="397.56" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (3 samples, 0.06%)</title><rect x="85.1" y="549" width="0.7" height="15.0" fill="rgb(243,50,46)" rx="2" ry="2" />
<text  x="88.11" y="559.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (8 samples, 0.15%)</title><rect x="705.4" y="469" width="1.8" height="15.0" fill="rgb(228,24,40)" rx="2" ry="2" />
<text  x="708.36" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="717.7" y="421" width="0.3" height="15.0" fill="rgb(212,29,28)" rx="2" ry="2" />
<text  x="720.73" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="42.6" y="277" width="0.5" height="15.0" fill="rgb(217,30,50)" rx="2" ry="2" />
<text  x="45.61" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="197.1" y="229" width="0.5" height="15.0" fill="rgb(254,61,9)" rx="2" ry="2" />
<text  x="200.11" y="239.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="892.0" y="277" width="0.2" height="15.0" fill="rgb(249,121,14)" rx="2" ry="2" />
<text  x="895.02" y="287.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="16.7" y="549" width="0.3" height="15.0" fill="rgb(211,29,45)" rx="2" ry="2" />
<text  x="19.75" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="106.3" y="405" width="0.2" height="15.0" fill="rgb(213,188,47)" rx="2" ry="2" />
<text  x="109.25" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="79.0" y="597" width="0.3" height="15.0" fill="rgb(251,121,39)" rx="2" ry="2" />
<text  x="82.04" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (3 samples, 0.06%)</title><rect x="896.7" y="341" width="0.7" height="15.0" fill="rgb(216,195,33)" rx="2" ry="2" />
<text  x="899.74" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="825.0" y="421" width="0.2" height="15.0" fill="rgb(206,179,2)" rx="2" ry="2" />
<text  x="828.00" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="834.7" y="357" width="0.2" height="15.0" fill="rgb(237,28,0)" rx="2" ry="2" />
<text  x="837.67" y="367.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%)</title><rect x="1166.6" y="405" width="0.2" height="15.0" fill="rgb(246,190,48)" rx="2" ry="2" />
<text  x="1169.61" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="908.2" y="373" width="0.2" height="15.0" fill="rgb(251,105,16)" rx="2" ry="2" />
<text  x="911.21" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="49.4" y="149" width="0.2" height="15.0" fill="rgb(224,29,29)" rx="2" ry="2" />
<text  x="52.36" y="159.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="38.8" y="245" width="0.2" height="15.0" fill="rgb(207,21,5)" rx="2" ry="2" />
<text  x="41.79" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="285.9" y="261" width="0.3" height="15.0" fill="rgb(237,24,22)" rx="2" ry="2" />
<text  x="288.94" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="605.5" y="437" width="1.4" height="15.0" fill="rgb(246,47,22)" rx="2" ry="2" />
<text  x="608.51" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (5 samples, 0.10%)</title><rect x="716.8" y="469" width="1.2" height="15.0" fill="rgb(216,76,4)" rx="2" ry="2" />
<text  x="719.83" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="676.4" y="517" width="0.4" height="15.0" fill="rgb(239,151,1)" rx="2" ry="2" />
<text  x="679.35" y="527.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::inheriting_concrete_execution_stage (1 samples, 0.02%)</title><rect x="106.7" y="405" width="0.2" height="15.0" fill="rgb(231,73,33)" rx="2" ry="2" />
<text  x="109.70" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, cql3::expr::expression*&gt; (1 samples, 0.02%)</title><rect x="73.0" y="389" width="0.2" height="15.0" fill="rgb(222,171,42)" rx="2" ry="2" />
<text  x="75.97" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="75.9" y="213" width="0.2" height="15.0" fill="rgb(227,53,14)" rx="2" ry="2" />
<text  x="78.89" y="223.5" ></text>
</g>
<g >
<title>schema_registry::get (19 samples, 0.36%)</title><rect x="962.0" y="389" width="4.2" height="15.0" fill="rgb(209,132,14)" rx="2" ry="2" />
<text  x="964.96" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="271.1" y="229" width="0.2" height="15.0" fill="rgb(206,132,34)" rx="2" ry="2" />
<text  x="274.10" y="239.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="913.4" y="405" width="0.2" height="15.0" fill="rgb(246,60,13)" rx="2" ry="2" />
<text  x="916.38" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="686.9" y="517" width="0.2" height="15.0" fill="rgb(213,101,14)" rx="2" ry="2" />
<text  x="689.92" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.5" y="357" width="0.3" height="15.0" fill="rgb(218,226,32)" rx="2" ry="2" />
<text  x="21.55" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1045.4" y="325" width="0.2" height="15.0" fill="rgb(233,36,40)" rx="2" ry="2" />
<text  x="1048.40" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (5 samples, 0.10%)</title><rect x="704.0" y="469" width="1.1" height="15.0" fill="rgb(249,135,9)" rx="2" ry="2" />
<text  x="707.01" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="858.5" y="437" width="0.2" height="15.0" fill="rgb(215,24,44)" rx="2" ry="2" />
<text  x="861.51" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.10%)</title><rect x="1125.7" y="341" width="1.1" height="15.0" fill="rgb(247,36,1)" rx="2" ry="2" />
<text  x="1128.68" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="18.5" y="517" width="0.5" height="15.0" fill="rgb(234,181,46)" rx="2" ry="2" />
<text  x="21.55" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="42.8" y="213" width="0.3" height="15.0" fill="rgb(242,121,48)" rx="2" ry="2" />
<text  x="45.83" y="223.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="657.5" y="517" width="0.9" height="15.0" fill="rgb(210,80,9)" rx="2" ry="2" />
<text  x="660.46" y="527.5" ></text>
</g>
<g >
<title>managed_ref&lt;row&gt;::~managed_ref (1 samples, 0.02%)</title><rect x="1135.4" y="325" width="0.2" height="15.0" fill="rgb(220,183,31)" rx="2" ry="2" />
<text  x="1138.35" y="335.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="1124.3" y="261" width="0.3" height="15.0" fill="rgb(248,225,32)" rx="2" ry="2" />
<text  x="1127.33" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="792.8" y="181" width="0.3" height="15.0" fill="rgb(241,168,11)" rx="2" ry="2" />
<text  x="795.84" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="77.7" y="501" width="0.2" height="15.0" fill="rgb(229,78,42)" rx="2" ry="2" />
<text  x="80.69" y="511.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1080.0" y="277" width="0.3" height="15.0" fill="rgb(248,106,44)" rx="2" ry="2" />
<text  x="1083.03" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="696.4" y="517" width="0.2" height="15.0" fill="rgb(206,177,19)" rx="2" ry="2" />
<text  x="699.37" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="61.3" y="277" width="0.2" height="15.0" fill="rgb(254,175,22)" rx="2" ry="2" />
<text  x="64.28" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="764.7" y="373" width="0.7" height="15.0" fill="rgb(210,156,31)" rx="2" ry="2" />
<text  x="767.73" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="257.2" y="229" width="0.2" height="15.0" fill="rgb(228,56,8)" rx="2" ry="2" />
<text  x="260.15" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="623.7" y="405" width="0.5" height="15.0" fill="rgb(219,79,1)" rx="2" ry="2" />
<text  x="626.73" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="667.1" y="501" width="0.5" height="15.0" fill="rgb(221,24,21)" rx="2" ry="2" />
<text  x="670.13" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_base::complete_one (1 samples, 0.02%)</title><rect x="849.7" y="517" width="0.3" height="15.0" fill="rgb(208,152,48)" rx="2" ry="2" />
<text  x="852.74" y="527.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="18.5" y="469" width="0.3" height="15.0" fill="rgb(209,26,40)" rx="2" ry="2" />
<text  x="21.55" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="857.4" y="293" width="0.2" height="15.0" fill="rgb(253,64,36)" rx="2" ry="2" />
<text  x="860.39" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="462.7" y="293" width="0.5" height="15.0" fill="rgb(221,39,5)" rx="2" ry="2" />
<text  x="465.70" y="303.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="1015.0" y="197" width="0.7" height="15.0" fill="rgb(206,107,46)" rx="2" ry="2" />
<text  x="1018.04" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="833.8" y="389" width="1.3" height="15.0" fill="rgb(221,181,39)" rx="2" ry="2" />
<text  x="836.77" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="695.2" y="485" width="0.3" height="15.0" fill="rgb(252,45,43)" rx="2" ry="2" />
<text  x="698.24" y="495.5" ></text>
</g>
<g >
<title>free (8 samples, 0.15%)</title><rect x="425.8" y="213" width="1.8" height="15.0" fill="rgb(250,90,42)" rx="2" ry="2" />
<text  x="428.82" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="622.8" y="437" width="0.7" height="15.0" fill="rgb(253,131,30)" rx="2" ry="2" />
<text  x="625.83" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (37 samples, 0.71%)</title><rect x="850.6" y="517" width="8.4" height="15.0" fill="rgb(249,22,19)" rx="2" ry="2" />
<text  x="853.64" y="527.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="74.1" y="453" width="0.2" height="15.0" fill="rgb(232,60,54)" rx="2" ry="2" />
<text  x="77.09" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="60.8" y="293" width="0.3" height="15.0" fill="rgb(230,126,43)" rx="2" ry="2" />
<text  x="63.83" y="303.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1136.9" y="533" width="0.3" height="15.0" fill="rgb(234,110,34)" rx="2" ry="2" />
<text  x="1139.93" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1148.4" y="469" width="0.2" height="15.0" fill="rgb(215,118,52)" rx="2" ry="2" />
<text  x="1151.40" y="479.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="19.2" y="549" width="0.2" height="15.0" fill="rgb(237,195,19)" rx="2" ry="2" />
<text  x="22.22" y="559.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="18.5" y="437" width="0.3" height="15.0" fill="rgb(236,41,3)" rx="2" ry="2" />
<text  x="21.55" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%)</title><rect x="73.2" y="437" width="0.2" height="15.0" fill="rgb(226,163,39)" rx="2" ry="2" />
<text  x="76.19" y="447.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="25.5" y="309" width="0.2" height="15.0" fill="rgb(225,77,36)" rx="2" ry="2" />
<text  x="28.52" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="74.3" y="485" width="0.2" height="15.0" fill="rgb(233,134,6)" rx="2" ry="2" />
<text  x="77.32" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="39.5" y="261" width="0.6" height="15.0" fill="rgb(206,218,35)" rx="2" ry="2" />
<text  x="42.46" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="101.5" y="501" width="0.3" height="15.0" fill="rgb(242,176,16)" rx="2" ry="2" />
<text  x="104.53" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.1" y="565" width="0.2" height="15.0" fill="rgb(242,227,1)" rx="2" ry="2" />
<text  x="21.10" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="291.3" y="309" width="0.3" height="15.0" fill="rgb(218,55,40)" rx="2" ry="2" />
<text  x="294.34" y="319.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="678.4" y="501" width="0.2" height="15.0" fill="rgb(236,36,30)" rx="2" ry="2" />
<text  x="681.37" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="1189.6" y="629" width="0.2" height="15.0" fill="rgb(236,58,42)" rx="2" ry="2" />
<text  x="1192.55" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (3 samples, 0.06%)</title><rect x="1123.7" y="245" width="0.6" height="15.0" fill="rgb(245,145,13)" rx="2" ry="2" />
<text  x="1126.66" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="841.0" y="437" width="0.2" height="15.0" fill="rgb(231,194,24)" rx="2" ry="2" />
<text  x="843.97" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (388 samples, 7.39%)</title><rect x="335.0" y="293" width="87.2" height="15.0" fill="rgb(205,67,48)" rx="2" ry="2" />
<text  x="337.97" y="303.5" >mutation_f..</text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (79 samples, 1.51%)</title><rect x="41.3" y="389" width="17.7" height="15.0" fill="rgb(225,135,53)" rx="2" ry="2" />
<text  x="44.26" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="101.8" y="341" width="0.2" height="15.0" fill="rgb(215,227,9)" rx="2" ry="2" />
<text  x="104.76" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (35 samples, 0.67%)</title><rect x="422.2" y="293" width="7.9" height="15.0" fill="rgb(237,122,34)" rx="2" ry="2" />
<text  x="425.22" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%)</title><rect x="824.3" y="453" width="1.2" height="15.0" fill="rgb(219,190,18)" rx="2" ry="2" />
<text  x="827.33" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (13 samples, 0.25%)</title><rect x="41.9" y="373" width="3.0" height="15.0" fill="rgb(237,155,50)" rx="2" ry="2" />
<text  x="44.93" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1084.8" y="373" width="0.4" height="15.0" fill="rgb(250,47,54)" rx="2" ry="2" />
<text  x="1087.75" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="1025.6" y="293" width="0.5" height="15.0" fill="rgb(209,30,38)" rx="2" ry="2" />
<text  x="1028.61" y="303.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1136.9" y="517" width="0.3" height="15.0" fill="rgb(240,184,3)" rx="2" ry="2" />
<text  x="1139.93" y="527.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%)</title><rect x="361.7" y="213" width="0.3" height="15.0" fill="rgb(233,31,16)" rx="2" ry="2" />
<text  x="364.73" y="223.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (50 samples, 0.95%)</title><rect x="734.1" y="437" width="11.3" height="15.0" fill="rgb(220,26,22)" rx="2" ry="2" />
<text  x="737.15" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="635.6" y="501" width="0.9" height="15.0" fill="rgb(232,3,40)" rx="2" ry="2" />
<text  x="638.65" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (80 samples, 1.52%)</title><rect x="881.0" y="389" width="18.0" height="15.0" fill="rgb(208,164,48)" rx="2" ry="2" />
<text  x="884.00" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="59.5" y="309" width="0.2" height="15.0" fill="rgb(233,172,15)" rx="2" ry="2" />
<text  x="62.48" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="79.7" y="501" width="0.2" height="15.0" fill="rgb(238,41,6)" rx="2" ry="2" />
<text  x="82.72" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="62.4" y="341" width="0.2" height="15.0" fill="rgb(242,225,47)" rx="2" ry="2" />
<text  x="65.40" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.3" y="293" width="0.2" height="15.0" fill="rgb(213,198,12)" rx="2" ry="2" />
<text  x="57.30" y="303.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="75.4" y="485" width="0.3" height="15.0" fill="rgb(226,71,27)" rx="2" ry="2" />
<text  x="78.44" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1162.3" y="485" width="0.3" height="15.0" fill="rgb(221,173,4)" rx="2" ry="2" />
<text  x="1165.34" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1134.0" y="197" width="0.2" height="15.0" fill="rgb(251,114,54)" rx="2" ry="2" />
<text  x="1137.00" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="899.2" y="389" width="0.2" height="15.0" fill="rgb(226,176,3)" rx="2" ry="2" />
<text  x="902.22" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (10 samples, 0.19%)</title><rect x="378.1" y="197" width="2.3" height="15.0" fill="rgb(239,6,6)" rx="2" ry="2" />
<text  x="381.15" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="756.6" y="357" width="0.5" height="15.0" fill="rgb(244,181,52)" rx="2" ry="2" />
<text  x="759.64" y="367.5" ></text>
</g>
<g >
<title>checked_file_impl::list_directory (1 samples, 0.02%)</title><rect x="687.4" y="437" width="0.2" height="15.0" fill="rgb(243,165,35)" rx="2" ry="2" />
<text  x="690.37" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (3 samples, 0.06%)</title><rect x="686.2" y="533" width="0.7" height="15.0" fill="rgb(225,14,30)" rx="2" ry="2" />
<text  x="689.25" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="79.7" y="645" width="0.2" height="15.0" fill="rgb(234,61,30)" rx="2" ry="2" />
<text  x="82.72" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="794.9" y="117" width="0.2" height="15.0" fill="rgb(253,143,12)" rx="2" ry="2" />
<text  x="797.87" y="127.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="49.8" y="261" width="0.2" height="15.0" fill="rgb(212,80,4)" rx="2" ry="2" />
<text  x="52.81" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (1 samples, 0.02%)</title><rect x="22.1" y="437" width="0.3" height="15.0" fill="rgb(238,198,20)" rx="2" ry="2" />
<text  x="25.14" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (2 samples, 0.04%)</title><rect x="54.5" y="293" width="0.5" height="15.0" fill="rgb(244,21,37)" rx="2" ry="2" />
<text  x="57.53" y="303.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="538.5" y="325" width="0.2" height="15.0" fill="rgb(235,54,45)" rx="2" ry="2" />
<text  x="541.49" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1048.3" y="373" width="0.2" height="15.0" fill="rgb(233,198,25)" rx="2" ry="2" />
<text  x="1051.32" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="669.4" y="501" width="0.4" height="15.0" fill="rgb(205,95,16)" rx="2" ry="2" />
<text  x="672.38" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="21.7" y="373" width="0.2" height="15.0" fill="rgb(221,197,26)" rx="2" ry="2" />
<text  x="24.69" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (4 samples, 0.08%)</title><rect x="82.0" y="501" width="0.9" height="15.0" fill="rgb(206,224,21)" rx="2" ry="2" />
<text  x="84.96" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.15%)</title><rect x="993.2" y="277" width="1.8" height="15.0" fill="rgb(231,53,48)" rx="2" ry="2" />
<text  x="996.22" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="101.8" y="437" width="0.2" height="15.0" fill="rgb(227,159,19)" rx="2" ry="2" />
<text  x="104.76" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="686.7" y="261" width="0.2" height="15.0" fill="rgb(218,140,32)" rx="2" ry="2" />
<text  x="689.70" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="10.9" y="485" width="0.2" height="15.0" fill="rgb(226,191,4)" rx="2" ry="2" />
<text  x="13.90" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (3 samples, 0.06%)</title><rect x="75.9" y="421" width="0.7" height="15.0" fill="rgb(220,208,7)" rx="2" ry="2" />
<text  x="78.89" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="920.6" y="389" width="0.2" height="15.0" fill="rgb(254,178,20)" rx="2" ry="2" />
<text  x="923.58" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="518.0" y="213" width="1.2" height="15.0" fill="rgb(223,16,43)" rx="2" ry="2" />
<text  x="521.03" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="878.8" y="437" width="0.2" height="15.0" fill="rgb(254,60,33)" rx="2" ry="2" />
<text  x="881.75" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="462.7" y="309" width="0.5" height="15.0" fill="rgb(220,178,53)" rx="2" ry="2" />
<text  x="465.70" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="328.0" y="325" width="0.2" height="15.0" fill="rgb(246,53,9)" rx="2" ry="2" />
<text  x="331.00" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="806.3" y="309" width="0.3" height="15.0" fill="rgb(205,166,32)" rx="2" ry="2" />
<text  x="809.34" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="175.5" y="341" width="0.5" height="15.0" fill="rgb(224,85,46)" rx="2" ry="2" />
<text  x="178.52" y="351.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.2" y="549" width="0.2" height="15.0" fill="rgb(235,74,42)" rx="2" ry="2" />
<text  x="20.20" y="559.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (9 samples, 0.17%)</title><rect x="34.3" y="277" width="2.0" height="15.0" fill="rgb(252,69,4)" rx="2" ry="2" />
<text  x="37.29" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (11 samples, 0.21%)</title><rect x="59.0" y="373" width="2.5" height="15.0" fill="rgb(212,47,10)" rx="2" ry="2" />
<text  x="62.03" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (27 samples, 0.51%)</title><rect x="577.4" y="405" width="6.1" height="15.0" fill="rgb(232,55,10)" rx="2" ry="2" />
<text  x="580.40" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="605.3" y="453" width="0.2" height="15.0" fill="rgb(225,30,11)" rx="2" ry="2" />
<text  x="608.28" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="543.7" y="373" width="0.9" height="15.0" fill="rgb(234,229,37)" rx="2" ry="2" />
<text  x="546.66" y="383.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="18.3" y="85" width="0.2" height="15.0" fill="rgb(212,135,22)" rx="2" ry="2" />
<text  x="21.32" y="95.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%)</title><rect x="821.2" y="421" width="0.4" height="15.0" fill="rgb(239,121,25)" rx="2" ry="2" />
<text  x="824.18" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (2 samples, 0.04%)</title><rect x="776.9" y="357" width="0.4" height="15.0" fill="rgb(207,85,14)" rx="2" ry="2" />
<text  x="779.88" y="367.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::deserialize_visitor&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="18.3" y="53" width="0.2" height="15.0" fill="rgb(254,128,37)" rx="2" ry="2" />
<text  x="21.32" y="63.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="711.9" y="469" width="0.2" height="15.0" fill="rgb(206,21,51)" rx="2" ry="2" />
<text  x="714.88" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="352.5" y="229" width="0.5" height="15.0" fill="rgb(215,82,43)" rx="2" ry="2" />
<text  x="355.51" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="818.3" y="357" width="1.8" height="15.0" fill="rgb(205,88,31)" rx="2" ry="2" />
<text  x="821.26" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (9 samples, 0.17%)</title><rect x="277.6" y="229" width="2.0" height="15.0" fill="rgb(216,4,52)" rx="2" ry="2" />
<text  x="280.62" y="239.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.3" y="437" width="0.2" height="15.0" fill="rgb(237,150,33)" rx="2" ry="2" />
<text  x="21.32" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_counters&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1127.5" y="357" width="0.2" height="15.0" fill="rgb(218,159,13)" rx="2" ry="2" />
<text  x="1130.48" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="560.8" y="341" width="0.4" height="15.0" fill="rgb(252,105,40)" rx="2" ry="2" />
<text  x="563.76" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="974.8" y="341" width="0.2" height="15.0" fill="rgb(218,79,46)" rx="2" ry="2" />
<text  x="977.78" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1136.9" y="197" width="0.3" height="15.0" fill="rgb(253,174,28)" rx="2" ry="2" />
<text  x="1139.93" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.1" y="245" width="0.2" height="15.0" fill="rgb(212,147,26)" rx="2" ry="2" />
<text  x="64.05" y="255.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="802.7" y="357" width="0.5" height="15.0" fill="rgb(229,154,2)" rx="2" ry="2" />
<text  x="805.74" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="502.3" y="357" width="0.2" height="15.0" fill="rgb(229,16,19)" rx="2" ry="2" />
<text  x="505.29" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (7 samples, 0.13%)</title><rect x="59.9" y="341" width="1.6" height="15.0" fill="rgb(207,15,12)" rx="2" ry="2" />
<text  x="62.93" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1035.1" y="277" width="0.2" height="15.0" fill="rgb(244,132,36)" rx="2" ry="2" />
<text  x="1038.05" y="287.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="896.7" y="325" width="0.5" height="15.0" fill="rgb(250,155,6)" rx="2" ry="2" />
<text  x="899.74" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="213" width="0.2" height="15.0" fill="rgb(247,183,6)" rx="2" ry="2" />
<text  x="57.08" y="223.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.2" y="181" width="0.3" height="15.0" fill="rgb(225,178,30)" rx="2" ry="2" />
<text  x="42.24" y="191.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%)</title><rect x="264.6" y="261" width="0.2" height="15.0" fill="rgb(241,85,46)" rx="2" ry="2" />
<text  x="267.58" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (3 samples, 0.06%)</title><rect x="106.9" y="469" width="0.7" height="15.0" fill="rgb(250,147,20)" rx="2" ry="2" />
<text  x="109.93" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="645.3" y="517" width="0.5" height="15.0" fill="rgb(241,6,27)" rx="2" ry="2" />
<text  x="648.32" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="72.5" y="421" width="0.5" height="15.0" fill="rgb(224,194,13)" rx="2" ry="2" />
<text  x="75.52" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (13 samples, 0.25%)</title><rect x="392.8" y="245" width="2.9" height="15.0" fill="rgb(242,171,9)" rx="2" ry="2" />
<text  x="395.76" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="726.7" y="325" width="0.3" height="15.0" fill="rgb(209,58,28)" rx="2" ry="2" />
<text  x="729.73" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="715.9" y="501" width="0.3" height="15.0" fill="rgb(219,104,38)" rx="2" ry="2" />
<text  x="718.93" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="54.3" y="245" width="0.2" height="15.0" fill="rgb(210,63,49)" rx="2" ry="2" />
<text  x="57.30" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="325" width="0.2" height="15.0" fill="rgb(212,77,43)" rx="2" ry="2" />
<text  x="1169.39" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="24.4" y="229" width="0.2" height="15.0" fill="rgb(241,164,6)" rx="2" ry="2" />
<text  x="27.39" y="239.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%)</title><rect x="524.3" y="261" width="0.5" height="15.0" fill="rgb(240,166,0)" rx="2" ry="2" />
<text  x="527.32" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="57.2" y="149" width="0.3" height="15.0" fill="rgb(219,149,30)" rx="2" ry="2" />
<text  x="60.23" y="159.5" ></text>
</g>
<g >
<title>seastar::coroutine::internal::maybe_yield_awaiter::run_and_dispose (1 samples, 0.02%)</title><rect x="86.0" y="549" width="0.2" height="15.0" fill="rgb(233,101,6)" rx="2" ry="2" />
<text  x="89.01" y="559.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.9" y="613" width="0.2" height="15.0" fill="rgb(246,76,18)" rx="2" ry="2" />
<text  x="13.90" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (13 samples, 0.25%)</title><rect x="1150.4" y="485" width="2.9" height="15.0" fill="rgb(238,43,4)" rx="2" ry="2" />
<text  x="1153.42" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="793.3" y="165" width="0.4" height="15.0" fill="rgb(251,170,30)" rx="2" ry="2" />
<text  x="796.29" y="175.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="362.0" y="213" width="0.4" height="15.0" fill="rgb(225,174,33)" rx="2" ry="2" />
<text  x="364.95" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="434.1" y="309" width="0.3" height="15.0" fill="rgb(234,95,27)" rx="2" ry="2" />
<text  x="437.14" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="70.5" y="437" width="0.2" height="15.0" fill="rgb(222,128,41)" rx="2" ry="2" />
<text  x="73.50" y="447.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="105.4" y="277" width="0.2" height="15.0" fill="rgb(235,145,40)" rx="2" ry="2" />
<text  x="108.35" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (2 samples, 0.04%)</title><rect x="803.2" y="357" width="0.4" height="15.0" fill="rgb(231,207,16)" rx="2" ry="2" />
<text  x="806.19" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="743.4" y="341" width="2.0" height="15.0" fill="rgb(250,151,26)" rx="2" ry="2" />
<text  x="746.37" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="1136.9" y="341" width="0.3" height="15.0" fill="rgb(238,151,44)" rx="2" ry="2" />
<text  x="1139.93" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (2 samples, 0.04%)</title><rect x="664.2" y="533" width="0.5" height="15.0" fill="rgb(213,197,48)" rx="2" ry="2" />
<text  x="667.21" y="543.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,832 samples, 92.09%)</title><rect x="83.3" y="597" width="1086.7" height="15.0" fill="rgb(243,160,21)" rx="2" ry="2" />
<text  x="86.31" y="607.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.9" y="517" width="0.2" height="15.0" fill="rgb(207,178,51)" rx="2" ry="2" />
<text  x="20.87" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="710.3" y="517" width="0.2" height="15.0" fill="rgb(235,67,43)" rx="2" ry="2" />
<text  x="713.31" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.11%)</title><rect x="901.9" y="373" width="1.4" height="15.0" fill="rgb(253,131,25)" rx="2" ry="2" />
<text  x="904.92" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="775.3" y="309" width="0.2" height="15.0" fill="rgb(221,211,34)" rx="2" ry="2" />
<text  x="778.30" y="319.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (24 samples, 0.46%)</title><rect x="1010.3" y="213" width="5.4" height="15.0" fill="rgb(232,72,14)" rx="2" ry="2" />
<text  x="1013.31" y="223.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%)</title><rect x="1166.6" y="437" width="0.2" height="15.0" fill="rgb(254,203,20)" rx="2" ry="2" />
<text  x="1169.61" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (65 samples, 1.24%)</title><rect x="176.0" y="341" width="14.6" height="15.0" fill="rgb(207,103,51)" rx="2" ry="2" />
<text  x="178.97" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="507.5" y="341" width="0.4" height="15.0" fill="rgb(250,44,9)" rx="2" ry="2" />
<text  x="510.46" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="852.0" y="341" width="0.2" height="15.0" fill="rgb(207,113,51)" rx="2" ry="2" />
<text  x="854.99" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (2 samples, 0.04%)</title><rect x="49.1" y="181" width="0.5" height="15.0" fill="rgb(236,11,18)" rx="2" ry="2" />
<text  x="52.13" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="801.2" y="309" width="0.6" height="15.0" fill="rgb(244,111,42)" rx="2" ry="2" />
<text  x="804.16" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="256.5" y="213" width="0.2" height="15.0" fill="rgb(217,92,47)" rx="2" ry="2" />
<text  x="259.48" y="223.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(220,187,17)" rx="2" ry="2" />
<text  x="13.67" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="778.5" y="293" width="1.7" height="15.0" fill="rgb(208,227,24)" rx="2" ry="2" />
<text  x="781.45" y="303.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (2 samples, 0.04%)</title><rect x="1120.7" y="277" width="0.5" height="15.0" fill="rgb(219,209,35)" rx="2" ry="2" />
<text  x="1123.73" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="541.6" y="277" width="0.9" height="15.0" fill="rgb(216,63,27)" rx="2" ry="2" />
<text  x="544.64" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="1046.7" y="341" width="0.3" height="15.0" fill="rgb(229,60,27)" rx="2" ry="2" />
<text  x="1049.74" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="42.6" y="245" width="0.5" height="15.0" fill="rgb(227,119,10)" rx="2" ry="2" />
<text  x="45.61" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="1030.8" y="309" width="0.7" height="15.0" fill="rgb(232,37,28)" rx="2" ry="2" />
<text  x="1033.78" y="319.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="1122.5" y="245" width="0.3" height="15.0" fill="rgb(232,68,43)" rx="2" ry="2" />
<text  x="1125.53" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="241.2" y="149" width="0.4" height="15.0" fill="rgb(253,56,20)" rx="2" ry="2" />
<text  x="244.19" y="159.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%)</title><rect x="808.6" y="341" width="1.3" height="15.0" fill="rgb(218,172,10)" rx="2" ry="2" />
<text  x="811.59" y="351.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="1121.0" y="245" width="0.2" height="15.0" fill="rgb(240,190,42)" rx="2" ry="2" />
<text  x="1123.96" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (58 samples, 1.11%)</title><rect x="733.9" y="453" width="13.1" height="15.0" fill="rgb(250,158,21)" rx="2" ry="2" />
<text  x="736.92" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="18.3" y="533" width="0.2" height="15.0" fill="rgb(225,76,32)" rx="2" ry="2" />
<text  x="21.32" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%)</title><rect x="968.3" y="389" width="0.4" height="15.0" fill="rgb(221,105,2)" rx="2" ry="2" />
<text  x="971.26" y="399.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="687.1" y="421" width="0.3" height="15.0" fill="rgb(232,100,12)" rx="2" ry="2" />
<text  x="690.15" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1124.3" y="197" width="0.3" height="15.0" fill="rgb(214,136,8)" rx="2" ry="2" />
<text  x="1127.33" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="800.0" y="245" width="0.3" height="15.0" fill="rgb(253,88,22)" rx="2" ry="2" />
<text  x="803.04" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.3" y="421" width="0.2" height="15.0" fill="rgb(229,182,24)" rx="2" ry="2" />
<text  x="21.32" y="431.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1002.4" y="277" width="2.5" height="15.0" fill="rgb(240,91,43)" rx="2" ry="2" />
<text  x="1005.44" y="287.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (16 samples, 0.30%)</title><rect x="962.2" y="373" width="3.6" height="15.0" fill="rgb(220,40,48)" rx="2" ry="2" />
<text  x="965.19" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (30 samples, 0.57%)</title><rect x="182.0" y="293" width="6.8" height="15.0" fill="rgb(221,216,50)" rx="2" ry="2" />
<text  x="185.04" y="303.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="536.0" y="309" width="0.9" height="15.0" fill="rgb(231,75,31)" rx="2" ry="2" />
<text  x="539.02" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="1100.5" y="373" width="1.3" height="15.0" fill="rgb(251,157,43)" rx="2" ry="2" />
<text  x="1103.49" y="383.5" ></text>
</g>
<g >
<title>do_cql_test (265 samples, 5.05%)</title><rect x="19.0" y="581" width="59.6" height="15.0" fill="rgb(246,189,11)" rx="2" ry="2" />
<text  x="22.00" y="591.5" >do_cql..</text>
</g>
<g >
<title>service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="75.7" y="437" width="0.9" height="15.0" fill="rgb(230,215,28)" rx="2" ry="2" />
<text  x="78.67" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (61 samples, 1.16%)</title><rect x="782.9" y="293" width="13.8" height="15.0" fill="rgb(217,108,53)" rx="2" ry="2" />
<text  x="785.95" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="52.7" y="309" width="0.3" height="15.0" fill="rgb(207,175,51)" rx="2" ry="2" />
<text  x="55.73" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="21.5" y="437" width="0.2" height="15.0" fill="rgb(250,32,27)" rx="2" ry="2" />
<text  x="24.47" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (29 samples, 0.55%)</title><rect x="565.0" y="341" width="6.6" height="15.0" fill="rgb(208,208,36)" rx="2" ry="2" />
<text  x="568.03" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="526.3" y="309" width="0.3" height="15.0" fill="rgb(233,178,22)" rx="2" ry="2" />
<text  x="529.35" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="73.0" y="421" width="0.2" height="15.0" fill="rgb(253,212,35)" rx="2" ry="2" />
<text  x="75.97" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation_partition&lt;bytes_ostream&gt;::writer_of_mutation_partition (1 samples, 0.02%)</title><rect x="1132.2" y="197" width="0.2" height="15.0" fill="rgb(254,10,30)" rx="2" ry="2" />
<text  x="1135.20" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="714.8" y="533" width="0.2" height="15.0" fill="rgb(250,57,7)" rx="2" ry="2" />
<text  x="717.81" y="543.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (1 samples, 0.02%)</title><rect x="532.6" y="373" width="0.3" height="15.0" fill="rgb(208,95,19)" rx="2" ry="2" />
<text  x="535.65" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="548.8" y="421" width="0.3" height="15.0" fill="rgb(241,204,46)" rx="2" ry="2" />
<text  x="551.84" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="49.4" y="117" width="0.2" height="15.0" fill="rgb(225,131,18)" rx="2" ry="2" />
<text  x="52.36" y="127.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="61.3" y="117" width="0.2" height="15.0" fill="rgb(252,45,8)" rx="2" ry="2" />
<text  x="64.28" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%)</title><rect x="77.7" y="533" width="0.2" height="15.0" fill="rgb(225,215,22)" rx="2" ry="2" />
<text  x="80.69" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="105.4" y="261" width="0.2" height="15.0" fill="rgb(236,209,10)" rx="2" ry="2" />
<text  x="108.35" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="614.3" y="437" width="0.4" height="15.0" fill="rgb(221,52,43)" rx="2" ry="2" />
<text  x="617.28" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_still_allocating (1 samples, 0.02%)</title><rect x="1126.1" y="309" width="0.3" height="15.0" fill="rgb(217,19,20)" rx="2" ry="2" />
<text  x="1129.13" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="261" width="0.2" height="15.0" fill="rgb(210,135,51)" rx="2" ry="2" />
<text  x="64.05" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (27 samples, 0.51%)</title><rect x="975.5" y="373" width="6.0" height="15.0" fill="rgb(214,133,21)" rx="2" ry="2" />
<text  x="978.45" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="969.6" y="389" width="0.5" height="15.0" fill="rgb(249,86,26)" rx="2" ry="2" />
<text  x="972.61" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="61.9" y="389" width="0.3" height="15.0" fill="rgb(232,187,53)" rx="2" ry="2" />
<text  x="64.95" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="292.9" y="325" width="0.5" height="15.0" fill="rgb(220,46,11)" rx="2" ry="2" />
<text  x="295.91" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="43.1" y="277" width="0.9" height="15.0" fill="rgb(221,227,0)" rx="2" ry="2" />
<text  x="46.06" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (10 samples, 0.19%)</title><rect x="716.2" y="501" width="2.2" height="15.0" fill="rgb(239,128,28)" rx="2" ry="2" />
<text  x="719.16" y="511.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::mutation_partition_serializer (1 samples, 0.02%)</title><rect x="1132.4" y="213" width="0.3" height="15.0" fill="rgb(225,228,11)" rx="2" ry="2" />
<text  x="1135.43" y="223.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="77.2" y="453" width="0.3" height="15.0" fill="rgb(250,85,29)" rx="2" ry="2" />
<text  x="80.24" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="57.5" y="293" width="0.4" height="15.0" fill="rgb(207,10,21)" rx="2" ry="2" />
<text  x="60.45" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="272.0" y="197" width="0.9" height="15.0" fill="rgb(247,117,25)" rx="2" ry="2" />
<text  x="275.00" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%)</title><rect x="1160.1" y="517" width="1.8" height="15.0" fill="rgb(235,195,3)" rx="2" ry="2" />
<text  x="1163.09" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="898.5" y="373" width="0.3" height="15.0" fill="rgb(248,12,4)" rx="2" ry="2" />
<text  x="901.54" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="262.8" y="229" width="0.7" height="15.0" fill="rgb(224,220,11)" rx="2" ry="2" />
<text  x="265.78" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (15 samples, 0.29%)</title><rect x="424.5" y="229" width="3.3" height="15.0" fill="rgb(220,117,39)" rx="2" ry="2" />
<text  x="427.47" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (22 samples, 0.42%)</title><rect x="637.9" y="533" width="4.9" height="15.0" fill="rgb(231,53,6)" rx="2" ry="2" />
<text  x="640.89" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%)</title><rect x="18.1" y="581" width="0.2" height="15.0" fill="rgb(213,150,28)" rx="2" ry="2" />
<text  x="21.10" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (13 samples, 0.25%)</title><rect x="803.6" y="357" width="3.0" height="15.0" fill="rgb(211,202,27)" rx="2" ry="2" />
<text  x="806.64" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="619.0" y="453" width="0.2" height="15.0" fill="rgb(224,168,50)" rx="2" ry="2" />
<text  x="622.00" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (149 samples, 2.84%)</title><rect x="995.2" y="309" width="33.6" height="15.0" fill="rgb(230,7,49)" rx="2" ry="2" />
<text  x="998.24" y="319.5" >se..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (4 samples, 0.08%)</title><rect x="1097.1" y="405" width="0.9" height="15.0" fill="rgb(222,191,20)" rx="2" ry="2" />
<text  x="1100.12" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.10%)</title><rect x="1098.0" y="405" width="1.1" height="15.0" fill="rgb(228,216,51)" rx="2" ry="2" />
<text  x="1101.02" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="526.8" y="309" width="0.2" height="15.0" fill="rgb(221,55,5)" rx="2" ry="2" />
<text  x="529.80" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (9 samples, 0.17%)</title><rect x="517.1" y="261" width="2.1" height="15.0" fill="rgb(234,206,42)" rx="2" ry="2" />
<text  x="520.13" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="86.2" y="549" width="0.3" height="15.0" fill="rgb(218,86,9)" rx="2" ry="2" />
<text  x="89.24" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (1 samples, 0.02%)</title><rect x="22.1" y="453" width="0.3" height="15.0" fill="rgb(237,157,2)" rx="2" ry="2" />
<text  x="25.14" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="857.6" y="325" width="0.2" height="15.0" fill="rgb(209,40,2)" rx="2" ry="2" />
<text  x="860.61" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="70.9" y="357" width="0.3" height="15.0" fill="rgb(229,116,12)" rx="2" ry="2" />
<text  x="73.95" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="39.2" y="325" width="0.3" height="15.0" fill="rgb(209,17,5)" rx="2" ry="2" />
<text  x="42.24" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%)</title><rect x="1014.4" y="181" width="0.4" height="15.0" fill="rgb(226,45,8)" rx="2" ry="2" />
<text  x="1017.36" y="191.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="981.1" y="309" width="0.2" height="15.0" fill="rgb(223,54,37)" rx="2" ry="2" />
<text  x="984.08" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="46.7" y="229" width="0.2" height="15.0" fill="rgb(227,70,1)" rx="2" ry="2" />
<text  x="49.66" y="239.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (17 samples, 0.32%)</title><rect x="373.9" y="197" width="3.8" height="15.0" fill="rgb(244,10,31)" rx="2" ry="2" />
<text  x="376.87" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="76.1" y="389" width="0.5" height="15.0" fill="rgb(243,74,24)" rx="2" ry="2" />
<text  x="79.12" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="181" width="0.5" height="15.0" fill="rgb(253,154,30)" rx="2" ry="2" />
<text  x="59.10" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="611.6" y="469" width="0.2" height="15.0" fill="rgb(246,226,15)" rx="2" ry="2" />
<text  x="614.58" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (210 samples, 4.00%)</title><rect x="209.7" y="229" width="47.2" height="15.0" fill="rgb(205,209,48)" rx="2" ry="2" />
<text  x="212.70" y="239.5" >part..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="814.7" y="341" width="0.6" height="15.0" fill="rgb(225,6,33)" rx="2" ry="2" />
<text  x="817.66" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="39.5" y="357" width="0.6" height="15.0" fill="rgb(218,57,54)" rx="2" ry="2" />
<text  x="42.46" y="367.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.11%)</title><rect x="10.2" y="645" width="1.4" height="15.0" fill="rgb(247,99,25)" rx="2" ry="2" />
<text  x="13.22" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="506.1" y="341" width="0.5" height="15.0" fill="rgb(220,205,33)" rx="2" ry="2" />
<text  x="509.11" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="436.2" y="325" width="0.9" height="15.0" fill="rgb(229,131,5)" rx="2" ry="2" />
<text  x="439.17" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="22.4" y="421" width="0.2" height="15.0" fill="rgb(243,54,51)" rx="2" ry="2" />
<text  x="25.37" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (18 samples, 0.34%)</title><rect x="299.7" y="373" width="4.0" height="15.0" fill="rgb(234,189,5)" rx="2" ry="2" />
<text  x="302.66" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.9" y="533" width="0.2" height="15.0" fill="rgb(209,112,13)" rx="2" ry="2" />
<text  x="20.87" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="79.7" y="565" width="0.2" height="15.0" fill="rgb(219,67,19)" rx="2" ry="2" />
<text  x="82.72" y="575.5" ></text>
</g>
<g >
<title>cql3::constants::value::~value (1 samples, 0.02%)</title><rect x="646.7" y="453" width="0.2" height="15.0" fill="rgb(205,12,25)" rx="2" ry="2" />
<text  x="649.66" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::registered_metric::registered_metric (1 samples, 0.02%)</title><rect x="108.1" y="325" width="0.2" height="15.0" fill="rgb(234,79,34)" rx="2" ry="2" />
<text  x="111.05" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (97 samples, 1.85%)</title><rect x="904.8" y="437" width="21.9" height="15.0" fill="rgb(221,48,15)" rx="2" ry="2" />
<text  x="907.84" y="447.5" >c..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="805.9" y="325" width="0.7" height="15.0" fill="rgb(239,71,5)" rx="2" ry="2" />
<text  x="808.89" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (36 samples, 0.69%)</title><rect x="1127.5" y="517" width="8.1" height="15.0" fill="rgb(223,11,32)" rx="2" ry="2" />
<text  x="1130.48" y="527.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="541.6" y="293" width="0.9" height="15.0" fill="rgb(213,193,30)" rx="2" ry="2" />
<text  x="544.64" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="199.1" y="229" width="0.3" height="15.0" fill="rgb(252,229,18)" rx="2" ry="2" />
<text  x="202.13" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (11 samples, 0.21%)</title><rect x="70.7" y="437" width="2.5" height="15.0" fill="rgb(243,156,45)" rx="2" ry="2" />
<text  x="73.72" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="666.0" y="517" width="0.2" height="15.0" fill="rgb(217,173,51)" rx="2" ry="2" />
<text  x="669.01" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="393.2" y="229" width="0.5" height="15.0" fill="rgb(235,99,54)" rx="2" ry="2" />
<text  x="396.21" y="239.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (3 samples, 0.06%)</title><rect x="1131.5" y="181" width="0.7" height="15.0" fill="rgb(217,18,43)" rx="2" ry="2" />
<text  x="1134.53" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="363.3" y="213" width="0.2" height="15.0" fill="rgb(228,99,15)" rx="2" ry="2" />
<text  x="366.30" y="223.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="271.3" y="229" width="0.2" height="15.0" fill="rgb(208,6,49)" rx="2" ry="2" />
<text  x="274.32" y="239.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="60.4" y="277" width="0.2" height="15.0" fill="rgb(227,27,52)" rx="2" ry="2" />
<text  x="63.38" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="55.2" y="293" width="0.9" height="15.0" fill="rgb(224,214,32)" rx="2" ry="2" />
<text  x="58.20" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="584.4" y="405" width="0.4" height="15.0" fill="rgb(243,159,39)" rx="2" ry="2" />
<text  x="587.37" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="71.6" y="341" width="0.2" height="15.0" fill="rgb(206,45,6)" rx="2" ry="2" />
<text  x="74.62" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="79.9" y="565" width="0.3" height="15.0" fill="rgb(239,56,37)" rx="2" ry="2" />
<text  x="82.94" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="854.0" y="341" width="0.2" height="15.0" fill="rgb(234,83,16)" rx="2" ry="2" />
<text  x="857.01" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (1 samples, 0.02%)</title><rect x="1153.3" y="485" width="0.3" height="15.0" fill="rgb(227,127,2)" rx="2" ry="2" />
<text  x="1156.34" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="267.7" y="277" width="0.2" height="15.0" fill="rgb(217,0,39)" rx="2" ry="2" />
<text  x="270.72" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%)</title><rect x="1136.7" y="517" width="0.2" height="15.0" fill="rgb(229,37,30)" rx="2" ry="2" />
<text  x="1139.70" y="527.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="233.5" y="101" width="0.3" height="15.0" fill="rgb(220,138,34)" rx="2" ry="2" />
<text  x="236.54" y="111.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="24.2" y="245" width="0.4" height="15.0" fill="rgb(225,86,50)" rx="2" ry="2" />
<text  x="27.17" y="255.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="263.7" y="229" width="0.2" height="15.0" fill="rgb(245,65,17)" rx="2" ry="2" />
<text  x="266.68" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="641.3" y="501" width="0.2" height="15.0" fill="rgb(228,104,30)" rx="2" ry="2" />
<text  x="644.27" y="511.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%)</title><rect x="1134.7" y="213" width="0.2" height="15.0" fill="rgb(222,58,31)" rx="2" ry="2" />
<text  x="1137.68" y="223.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="316.5" y="309" width="0.5" height="15.0" fill="rgb(250,1,20)" rx="2" ry="2" />
<text  x="319.53" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="575.4" y="389" width="0.2" height="15.0" fill="rgb(234,156,17)" rx="2" ry="2" />
<text  x="578.37" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="438.9" y="389" width="0.9" height="15.0" fill="rgb(236,37,11)" rx="2" ry="2" />
<text  x="441.87" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="682.4" y="485" width="0.5" height="15.0" fill="rgb(241,141,42)" rx="2" ry="2" />
<text  x="685.42" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="1040.4" y="341" width="2.5" height="15.0" fill="rgb(231,26,49)" rx="2" ry="2" />
<text  x="1043.45" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="696.1" y="517" width="0.3" height="15.0" fill="rgb(213,37,15)" rx="2" ry="2" />
<text  x="699.14" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="603.5" y="453" width="0.2" height="15.0" fill="rgb(213,145,2)" rx="2" ry="2" />
<text  x="606.49" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="848.8" y="437" width="0.5" height="15.0" fill="rgb(211,190,14)" rx="2" ry="2" />
<text  x="851.84" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.2" y="229" width="0.3" height="15.0" fill="rgb(207,14,4)" rx="2" ry="2" />
<text  x="60.23" y="239.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (5 samples, 0.10%)</title><rect x="844.3" y="501" width="1.2" height="15.0" fill="rgb(243,131,53)" rx="2" ry="2" />
<text  x="847.34" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="57.2" y="133" width="0.3" height="15.0" fill="rgb(205,70,5)" rx="2" ry="2" />
<text  x="60.23" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="541.4" y="277" width="0.2" height="15.0" fill="rgb(235,28,30)" rx="2" ry="2" />
<text  x="544.42" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%)</title><rect x="827.7" y="421" width="0.7" height="15.0" fill="rgb(208,51,42)" rx="2" ry="2" />
<text  x="830.70" y="431.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update (1 samples, 0.02%)</title><rect x="82.9" y="485" width="0.2" height="15.0" fill="rgb(237,126,0)" rx="2" ry="2" />
<text  x="85.86" y="495.5" ></text>
</g>
<g >
<title>abstract_type::from_string (3 samples, 0.06%)</title><rect x="68.7" y="405" width="0.7" height="15.0" fill="rgb(231,222,27)" rx="2" ry="2" />
<text  x="71.70" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="857.8" y="293" width="0.3" height="15.0" fill="rgb(228,70,3)" rx="2" ry="2" />
<text  x="860.84" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.3" y="389" width="0.2" height="15.0" fill="rgb(211,14,40)" rx="2" ry="2" />
<text  x="21.32" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.9" y="501" width="0.2" height="15.0" fill="rgb(246,82,22)" rx="2" ry="2" />
<text  x="13.90" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%)</title><rect x="758.2" y="373" width="0.7" height="15.0" fill="rgb(237,29,11)" rx="2" ry="2" />
<text  x="761.21" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="81.3" y="453" width="0.4" height="15.0" fill="rgb(248,8,45)" rx="2" ry="2" />
<text  x="84.29" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="941.3" y="373" width="0.2" height="15.0" fill="rgb(226,198,46)" rx="2" ry="2" />
<text  x="944.27" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="11.8" y="613" width="0.2" height="15.0" fill="rgb(212,194,6)" rx="2" ry="2" />
<text  x="14.80" y="623.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (16 samples, 0.30%)</title><rect x="244.1" y="197" width="3.6" height="15.0" fill="rgb(231,40,10)" rx="2" ry="2" />
<text  x="247.11" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1166.8" y="373" width="0.3" height="15.0" fill="rgb(206,143,44)" rx="2" ry="2" />
<text  x="1169.84" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (4 samples, 0.08%)</title><rect x="1022.5" y="277" width="0.9" height="15.0" fill="rgb(216,7,33)" rx="2" ry="2" />
<text  x="1025.46" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (8 samples, 0.15%)</title><rect x="743.6" y="309" width="1.8" height="15.0" fill="rgb(229,117,25)" rx="2" ry="2" />
<text  x="746.59" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="103.3" y="517" width="0.3" height="15.0" fill="rgb(216,65,20)" rx="2" ry="2" />
<text  x="106.33" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1030.8" y="293" width="0.7" height="15.0" fill="rgb(221,34,28)" rx="2" ry="2" />
<text  x="1033.78" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="38.6" y="405" width="0.2" height="15.0" fill="rgb(251,166,51)" rx="2" ry="2" />
<text  x="41.56" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (4 samples, 0.08%)</title><rect x="902.4" y="357" width="0.9" height="15.0" fill="rgb(205,67,49)" rx="2" ry="2" />
<text  x="905.37" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1 samples, 0.02%)</title><rect x="1136.5" y="517" width="0.2" height="15.0" fill="rgb(221,99,53)" rx="2" ry="2" />
<text  x="1139.48" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="676.8" y="517" width="0.2" height="15.0" fill="rgb(240,145,25)" rx="2" ry="2" />
<text  x="679.80" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="389" width="0.2" height="15.0" fill="rgb(245,149,22)" rx="2" ry="2" />
<text  x="1169.39" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (7 samples, 0.13%)</title><rect x="59.9" y="357" width="1.6" height="15.0" fill="rgb(210,69,18)" rx="2" ry="2" />
<text  x="62.93" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="516.7" y="261" width="0.2" height="15.0" fill="rgb(230,7,38)" rx="2" ry="2" />
<text  x="519.68" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="45.8" y="357" width="0.2" height="15.0" fill="rgb(215,49,17)" rx="2" ry="2" />
<text  x="48.76" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.32%)</title><rect x="497.3" y="245" width="3.9" height="15.0" fill="rgb(231,221,22)" rx="2" ry="2" />
<text  x="500.34" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="1166.6" y="453" width="0.2" height="15.0" fill="rgb(240,179,19)" rx="2" ry="2" />
<text  x="1169.61" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="820.1" y="437" width="0.2" height="15.0" fill="rgb(231,216,50)" rx="2" ry="2" />
<text  x="823.06" y="447.5" ></text>
</g>
<g >
<title>ser::live_cell_view::value (1 samples, 0.02%)</title><rect x="1125.0" y="261" width="0.2" height="15.0" fill="rgb(229,7,54)" rx="2" ry="2" />
<text  x="1128.01" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.9" y="293" width="0.4" height="15.0" fill="rgb(239,135,19)" rx="2" ry="2" />
<text  x="56.85" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (11 samples, 0.21%)</title><rect x="982.9" y="309" width="2.4" height="15.0" fill="rgb(241,223,16)" rx="2" ry="2" />
<text  x="985.88" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (162 samples, 3.09%)</title><rect x="212.4" y="213" width="36.4" height="15.0" fill="rgb(226,211,16)" rx="2" ry="2" />
<text  x="215.40" y="223.5" >mut..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="848.8" y="389" width="0.3" height="15.0" fill="rgb(209,108,39)" rx="2" ry="2" />
<text  x="851.84" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.2" y="309" width="0.3" height="15.0" fill="rgb(247,97,29)" rx="2" ry="2" />
<text  x="42.24" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.7" y="341" width="0.2" height="15.0" fill="rgb(211,206,40)" rx="2" ry="2" />
<text  x="62.70" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="21.9" y="357" width="0.2" height="15.0" fill="rgb(254,97,4)" rx="2" ry="2" />
<text  x="24.92" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="702.0" y="485" width="0.4" height="15.0" fill="rgb(242,123,3)" rx="2" ry="2" />
<text  x="704.99" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (9 samples, 0.17%)</title><rect x="1163.5" y="469" width="2.0" height="15.0" fill="rgb(234,27,43)" rx="2" ry="2" />
<text  x="1166.46" y="479.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%)</title><rect x="597.6" y="453" width="0.3" height="15.0" fill="rgb(210,79,33)" rx="2" ry="2" />
<text  x="600.64" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="686.7" y="277" width="0.2" height="15.0" fill="rgb(219,42,24)" rx="2" ry="2" />
<text  x="689.70" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (4 samples, 0.08%)</title><rect x="521.4" y="229" width="0.9" height="15.0" fill="rgb(231,199,46)" rx="2" ry="2" />
<text  x="524.40" y="239.5" ></text>
</g>
<g >
<title>ser::qr_cell_view::value (1 samples, 0.02%)</title><rect x="107.8" y="293" width="0.3" height="15.0" fill="rgb(218,125,25)" rx="2" ry="2" />
<text  x="110.83" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%)</title><rect x="1168.6" y="485" width="0.3" height="15.0" fill="rgb(229,73,8)" rx="2" ry="2" />
<text  x="1171.64" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cql3::raw_value const*, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt; &gt;, cql3::raw_value*&gt; (1 samples, 0.02%)</title><rect x="852.7" y="373" width="0.2" height="15.0" fill="rgb(219,143,30)" rx="2" ry="2" />
<text  x="855.66" y="383.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="567.5" y="309" width="0.7" height="15.0" fill="rgb(205,21,14)" rx="2" ry="2" />
<text  x="570.50" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="857.6" y="277" width="0.2" height="15.0" fill="rgb(215,107,12)" rx="2" ry="2" />
<text  x="860.61" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::arm_highres_timer (1 samples, 0.02%)</title><rect x="1168.9" y="485" width="0.2" height="15.0" fill="rgb(207,204,53)" rx="2" ry="2" />
<text  x="1171.86" y="495.5" ></text>
</g>
<g >
<title>__vfprintf_internal (3 samples, 0.06%)</title><rect x="78.6" y="645" width="0.7" height="15.0" fill="rgb(245,108,44)" rx="2" ry="2" />
<text  x="81.59" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="24.8" y="341" width="0.3" height="15.0" fill="rgb(205,83,10)" rx="2" ry="2" />
<text  x="27.84" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="637.4" y="485" width="0.5" height="15.0" fill="rgb(253,83,28)" rx="2" ry="2" />
<text  x="640.44" y="495.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="600.8" y="453" width="0.2" height="15.0" fill="rgb(216,155,4)" rx="2" ry="2" />
<text  x="603.79" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="802.3" y="309" width="0.4" height="15.0" fill="rgb(219,56,31)" rx="2" ry="2" />
<text  x="805.29" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="252.9" y="149" width="0.2" height="15.0" fill="rgb(240,46,13)" rx="2" ry="2" />
<text  x="255.88" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (3 samples, 0.06%)</title><rect x="570.4" y="325" width="0.7" height="15.0" fill="rgb(250,129,15)" rx="2" ry="2" />
<text  x="573.43" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="641.5" y="517" width="0.9" height="15.0" fill="rgb(243,6,16)" rx="2" ry="2" />
<text  x="644.49" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1146.1" y="517" width="0.5" height="15.0" fill="rgb(218,80,36)" rx="2" ry="2" />
<text  x="1149.15" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%)</title><rect x="901.0" y="389" width="0.2" height="15.0" fill="rgb(253,54,52)" rx="2" ry="2" />
<text  x="904.02" y="399.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%)</title><rect x="391.9" y="229" width="0.2" height="15.0" fill="rgb(233,206,23)" rx="2" ry="2" />
<text  x="394.86" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="825.5" y="469" width="0.2" height="15.0" fill="rgb(245,204,36)" rx="2" ry="2" />
<text  x="828.45" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="610.7" y="421" width="0.2" height="15.0" fill="rgb(230,180,38)" rx="2" ry="2" />
<text  x="613.68" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (7 samples, 0.13%)</title><rect x="1043.8" y="309" width="1.6" height="15.0" fill="rgb(250,88,39)" rx="2" ry="2" />
<text  x="1046.82" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="735.7" y="405" width="0.9" height="15.0" fill="rgb(222,6,46)" rx="2" ry="2" />
<text  x="738.72" y="415.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="79.9" y="485" width="0.3" height="15.0" fill="rgb(216,86,31)" rx="2" ry="2" />
<text  x="82.94" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (45 samples, 0.86%)</title><rect x="884.1" y="341" width="10.2" height="15.0" fill="rgb(238,39,31)" rx="2" ry="2" />
<text  x="887.15" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (4 samples, 0.08%)</title><rect x="109.9" y="517" width="0.9" height="15.0" fill="rgb(218,219,39)" rx="2" ry="2" />
<text  x="112.85" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="59.7" y="229" width="0.2" height="15.0" fill="rgb(221,110,36)" rx="2" ry="2" />
<text  x="62.70" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;bool  (1 samples, 0.02%)</title><rect x="70.0" y="437" width="0.3" height="15.0" fill="rgb(252,32,31)" rx="2" ry="2" />
<text  x="73.05" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="55.7" y="165" width="0.4" height="15.0" fill="rgb(240,188,16)" rx="2" ry="2" />
<text  x="58.65" y="175.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (3 samples, 0.06%)</title><rect x="106.9" y="485" width="0.7" height="15.0" fill="rgb(230,147,35)" rx="2" ry="2" />
<text  x="109.93" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (25 samples, 0.48%)</title><rect x="549.7" y="453" width="5.7" height="15.0" fill="rgb(239,179,28)" rx="2" ry="2" />
<text  x="552.74" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (2 samples, 0.04%)</title><rect x="849.5" y="533" width="0.5" height="15.0" fill="rgb(209,131,18)" rx="2" ry="2" />
<text  x="852.52" y="543.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="987.6" y="325" width="0.2" height="15.0" fill="rgb(235,175,27)" rx="2" ry="2" />
<text  x="990.60" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.0" y="533" width="0.3" height="15.0" fill="rgb(232,125,6)" rx="2" ry="2" />
<text  x="82.04" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="50.5" y="325" width="0.2" height="15.0" fill="rgb(233,24,30)" rx="2" ry="2" />
<text  x="53.48" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="687.1" y="437" width="0.3" height="15.0" fill="rgb(238,146,45)" rx="2" ry="2" />
<text  x="690.15" y="447.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (10 samples, 0.19%)</title><rect x="1163.5" y="485" width="2.2" height="15.0" fill="rgb(206,78,19)" rx="2" ry="2" />
<text  x="1166.46" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="1032.8" y="261" width="2.3" height="15.0" fill="rgb(208,129,21)" rx="2" ry="2" />
<text  x="1035.80" y="271.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (18 samples, 0.34%)</title><rect x="915.4" y="373" width="4.1" height="15.0" fill="rgb(216,47,35)" rx="2" ry="2" />
<text  x="918.41" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (583 samples, 11.11%)</title><rect x="955.2" y="405" width="131.1" height="15.0" fill="rgb(240,94,13)" rx="2" ry="2" />
<text  x="958.21" y="415.5" >service::storage..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1059.8" y="357" width="0.2" height="15.0" fill="rgb(248,54,29)" rx="2" ry="2" />
<text  x="1062.79" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (21 samples, 0.40%)</title><rect x="1109.9" y="453" width="4.8" height="15.0" fill="rgb(219,175,45)" rx="2" ry="2" />
<text  x="1112.94" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="800.3" y="293" width="0.2" height="15.0" fill="rgb(247,106,2)" rx="2" ry="2" />
<text  x="803.26" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="105.8" y="453" width="0.2" height="15.0" fill="rgb(248,164,44)" rx="2" ry="2" />
<text  x="108.80" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="81.3" y="325" width="0.2" height="15.0" fill="rgb(254,170,16)" rx="2" ry="2" />
<text  x="84.29" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="531.3" y="357" width="0.7" height="15.0" fill="rgb(229,50,46)" rx="2" ry="2" />
<text  x="534.30" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.40%)</title><rect x="485.6" y="293" width="4.8" height="15.0" fill="rgb(210,217,50)" rx="2" ry="2" />
<text  x="488.64" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1107.9" y="453" width="0.7" height="15.0" fill="rgb(209,49,35)" rx="2" ry="2" />
<text  x="1110.91" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.10%)</title><rect x="740.9" y="357" width="1.1" height="15.0" fill="rgb(236,44,18)" rx="2" ry="2" />
<text  x="743.89" y="367.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="107.8" y="341" width="0.3" height="15.0" fill="rgb(214,47,21)" rx="2" ry="2" />
<text  x="110.83" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (48 samples, 0.91%)</title><rect x="268.8" y="261" width="10.8" height="15.0" fill="rgb(216,66,0)" rx="2" ry="2" />
<text  x="271.85" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="666.5" y="501" width="0.6" height="15.0" fill="rgb(233,22,28)" rx="2" ry="2" />
<text  x="669.46" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="526.6" y="309" width="0.2" height="15.0" fill="rgb(211,4,47)" rx="2" ry="2" />
<text  x="529.57" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="149" width="0.2" height="15.0" fill="rgb(220,83,16)" rx="2" ry="2" />
<text  x="57.08" y="159.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%)</title><rect x="197.6" y="229" width="0.6" height="15.0" fill="rgb(245,60,10)" rx="2" ry="2" />
<text  x="200.56" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (48 samples, 0.91%)</title><rect x="664.7" y="533" width="10.8" height="15.0" fill="rgb(239,127,46)" rx="2" ry="2" />
<text  x="667.66" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="57.5" y="277" width="0.2" height="15.0" fill="rgb(226,85,20)" rx="2" ry="2" />
<text  x="60.45" y="287.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.10%)</title><rect x="19.7" y="533" width="1.1" height="15.0" fill="rgb(205,176,43)" rx="2" ry="2" />
<text  x="22.67" y="543.5" ></text>
</g>
<g >
<title>seastar::gate::enter (3 samples, 0.06%)</title><rect x="1022.7" y="261" width="0.7" height="15.0" fill="rgb(229,163,1)" rx="2" ry="2" />
<text  x="1025.68" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="663.3" y="453" width="0.9" height="15.0" fill="rgb(227,127,31)" rx="2" ry="2" />
<text  x="666.31" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (2 samples, 0.04%)</title><rect x="1063.4" y="357" width="0.4" height="15.0" fill="rgb(223,183,27)" rx="2" ry="2" />
<text  x="1066.39" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (8 samples, 0.15%)</title><rect x="722.7" y="453" width="1.8" height="15.0" fill="rgb(218,162,27)" rx="2" ry="2" />
<text  x="725.68" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="781.4" y="261" width="0.4" height="15.0" fill="rgb(250,114,37)" rx="2" ry="2" />
<text  x="784.37" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (12 samples, 0.23%)</title><rect x="1032.6" y="293" width="2.7" height="15.0" fill="rgb(248,186,52)" rx="2" ry="2" />
<text  x="1035.58" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="22.1" y="405" width="0.3" height="15.0" fill="rgb(252,141,49)" rx="2" ry="2" />
<text  x="25.14" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%)</title><rect x="183.8" y="277" width="0.3" height="15.0" fill="rgb(229,77,34)" rx="2" ry="2" />
<text  x="186.84" y="287.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="53.9" y="277" width="0.4" height="15.0" fill="rgb(222,166,36)" rx="2" ry="2" />
<text  x="56.85" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1119.6" y="485" width="7.9" height="15.0" fill="rgb(250,169,15)" rx="2" ry="2" />
<text  x="1122.61" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::stat_data&gt;, seastar::reactor::file_stat (1 samples, 0.02%)</title><rect x="675.5" y="533" width="0.2" height="15.0" fill="rgb(207,118,1)" rx="2" ry="2" />
<text  x="678.45" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (40 samples, 0.76%)</title><rect x="342.8" y="245" width="9.0" height="15.0" fill="rgb(223,43,6)" rx="2" ry="2" />
<text  x="345.84" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="395.2" y="197" width="0.5" height="15.0" fill="rgb(209,116,7)" rx="2" ry="2" />
<text  x="398.24" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;utils::config_file::named_value&lt;unsigned int&gt;::the_value_type, std::default_delete&lt;utils::config_file::named_value&lt;unsigned int&gt;::the_value_type&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="83.1" y="581" width="0.2" height="15.0" fill="rgb(213,145,36)" rx="2" ry="2" />
<text  x="86.09" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="42.4" y="325" width="0.7" height="15.0" fill="rgb(220,188,42)" rx="2" ry="2" />
<text  x="45.38" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="295.8" y="341" width="0.3" height="15.0" fill="rgb(252,111,37)" rx="2" ry="2" />
<text  x="298.84" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (5 samples, 0.10%)</title><rect x="1148.6" y="485" width="1.1" height="15.0" fill="rgb(237,64,4)" rx="2" ry="2" />
<text  x="1151.62" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.8" y="197" width="0.2" height="15.0" fill="rgb(210,135,2)" rx="2" ry="2" />
<text  x="52.81" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="101.8" y="405" width="0.2" height="15.0" fill="rgb(237,68,44)" rx="2" ry="2" />
<text  x="104.76" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="986.5" y="325" width="0.2" height="15.0" fill="rgb(220,212,17)" rx="2" ry="2" />
<text  x="989.47" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="786.8" y="245" width="0.2" height="15.0" fill="rgb(211,225,30)" rx="2" ry="2" />
<text  x="789.77" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.1" y="405" width="0.2" height="15.0" fill="rgb(231,142,37)" rx="2" ry="2" />
<text  x="66.07" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (16 samples, 0.30%)</title><rect x="258.1" y="229" width="3.6" height="15.0" fill="rgb(226,58,29)" rx="2" ry="2" />
<text  x="261.05" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="24.8" y="277" width="0.3" height="15.0" fill="rgb(238,39,39)" rx="2" ry="2" />
<text  x="27.84" y="287.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.15%)</title><rect x="707.6" y="485" width="1.8" height="15.0" fill="rgb(223,110,23)" rx="2" ry="2" />
<text  x="710.61" y="495.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="10.9" y="405" width="0.2" height="15.0" fill="rgb(215,107,51)" rx="2" ry="2" />
<text  x="13.90" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="58.8" y="373" width="0.2" height="15.0" fill="rgb(206,110,25)" rx="2" ry="2" />
<text  x="61.80" y="383.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="821.9" y="453" width="0.4" height="15.0" fill="rgb(223,106,19)" rx="2" ry="2" />
<text  x="824.85" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="983.6" y="277" width="1.7" height="15.0" fill="rgb(236,62,13)" rx="2" ry="2" />
<text  x="986.55" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="540.5" y="261" width="0.5" height="15.0" fill="rgb(241,115,44)" rx="2" ry="2" />
<text  x="543.52" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="659.9" y="517" width="0.7" height="15.0" fill="rgb(231,91,2)" rx="2" ry="2" />
<text  x="662.93" y="527.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1 samples, 0.02%)</title><rect x="630.9" y="533" width="0.2" height="15.0" fill="rgb(228,227,3)" rx="2" ry="2" />
<text  x="633.92" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1014.6" y="165" width="0.2" height="15.0" fill="rgb(254,27,41)" rx="2" ry="2" />
<text  x="1017.59" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="1030.8" y="277" width="0.7" height="15.0" fill="rgb(227,196,26)" rx="2" ry="2" />
<text  x="1033.78" y="287.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%)</title><rect x="478.9" y="357" width="0.7" height="15.0" fill="rgb(252,14,32)" rx="2" ry="2" />
<text  x="481.90" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="974.1" y="309" width="0.2" height="15.0" fill="rgb(248,99,29)" rx="2" ry="2" />
<text  x="977.11" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (478 samples, 9.11%)</title><rect x="327.5" y="341" width="107.5" height="15.0" fill="rgb(236,199,50)" rx="2" ry="2" />
<text  x="330.55" y="351.5" >std::__invoke..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="43.7" y="165" width="0.3" height="15.0" fill="rgb(238,143,1)" rx="2" ry="2" />
<text  x="46.73" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="543.0" y="325" width="0.2" height="15.0" fill="rgb(226,10,46)" rx="2" ry="2" />
<text  x="545.99" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1031.2" y="261" width="0.3" height="15.0" fill="rgb(219,97,54)" rx="2" ry="2" />
<text  x="1034.23" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (2 samples, 0.04%)</title><rect x="71.6" y="405" width="0.5" height="15.0" fill="rgb(210,66,7)" rx="2" ry="2" />
<text  x="74.62" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="655.7" y="485" width="0.2" height="15.0" fill="rgb(215,113,12)" rx="2" ry="2" />
<text  x="658.66" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="79.7" y="421" width="0.2" height="15.0" fill="rgb(237,160,53)" rx="2" ry="2" />
<text  x="82.72" y="431.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_test_services.cc (1 samples, 0.02%)</title><rect x="83.1" y="645" width="0.2" height="15.0" fill="rgb(241,60,11)" rx="2" ry="2" />
<text  x="86.09" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (206 samples, 3.93%)</title><rect x="21.2" y="501" width="46.4" height="15.0" fill="rgb(220,197,54)" rx="2" ry="2" />
<text  x="24.24" y="511.5" >cql3..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="104.5" y="517" width="0.2" height="15.0" fill="rgb(240,75,22)" rx="2" ry="2" />
<text  x="107.45" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (584 samples, 11.13%)</title><rect x="715.0" y="533" width="131.4" height="15.0" fill="rgb(213,45,25)" rx="2" ry="2" />
<text  x="718.03" y="543.5" >seastar::interna..</text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="247.7" y="197" width="0.7" height="15.0" fill="rgb(247,200,24)" rx="2" ry="2" />
<text  x="250.71" y="207.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1118.7" y="469" width="0.2" height="15.0" fill="rgb(217,204,1)" rx="2" ry="2" />
<text  x="1121.71" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%)</title><rect x="942.4" y="437" width="0.2" height="15.0" fill="rgb(230,172,21)" rx="2" ry="2" />
<text  x="945.40" y="447.5" ></text>
</g>
<g >
<title>db::get_cdc_streams_descriptions_v2_mutation (1 samples, 0.02%)</title><rect x="101.8" y="501" width="0.2" height="15.0" fill="rgb(237,217,31)" rx="2" ry="2" />
<text  x="104.76" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="1128.2" y="341" width="1.3" height="15.0" fill="rgb(207,190,0)" rx="2" ry="2" />
<text  x="1131.16" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (7 samples, 0.13%)</title><rect x="842.5" y="485" width="1.6" height="15.0" fill="rgb(215,130,3)" rx="2" ry="2" />
<text  x="845.54" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1018.4" y="261" width="0.5" height="15.0" fill="rgb(225,224,11)" rx="2" ry="2" />
<text  x="1021.41" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.13%)</title><rect x="317.4" y="341" width="1.6" height="15.0" fill="rgb(238,177,41)" rx="2" ry="2" />
<text  x="320.43" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (3 samples, 0.06%)</title><rect x="1060.2" y="357" width="0.7" height="15.0" fill="rgb(236,158,43)" rx="2" ry="2" />
<text  x="1063.24" y="367.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, utils::UUID&amp;&gt; (1 samples, 0.02%)</title><rect x="106.7" y="501" width="0.2" height="15.0" fill="rgb(226,183,29)" rx="2" ry="2" />
<text  x="109.70" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (22 samples, 0.42%)</title><rect x="549.7" y="437" width="5.0" height="15.0" fill="rgb(237,22,1)" rx="2" ry="2" />
<text  x="552.74" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="319.9" y="389" width="0.2" height="15.0" fill="rgb(227,4,21)" rx="2" ry="2" />
<text  x="322.90" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1119.8" y="405" width="7.7" height="15.0" fill="rgb(239,14,8)" rx="2" ry="2" />
<text  x="1122.83" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.11%)</title><rect x="621.0" y="469" width="1.4" height="15.0" fill="rgb(245,60,51)" rx="2" ry="2" />
<text  x="624.03" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="580.5" y="389" width="0.5" height="15.0" fill="rgb(207,15,50)" rx="2" ry="2" />
<text  x="583.55" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="952.1" y="389" width="2.0" height="15.0" fill="rgb(205,185,33)" rx="2" ry="2" />
<text  x="955.07" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="580.1" y="373" width="0.4" height="15.0" fill="rgb(234,119,47)" rx="2" ry="2" />
<text  x="583.10" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1105.4" y="437" width="0.5" height="15.0" fill="rgb(252,37,11)" rx="2" ry="2" />
<text  x="1108.44" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="843.9" y="453" width="0.2" height="15.0" fill="rgb(218,190,53)" rx="2" ry="2" />
<text  x="846.89" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(245,26,42)" rx="2" ry="2" />
<text  x="13.67" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (6 samples, 0.11%)</title><rect x="1168.2" y="549" width="1.3" height="15.0" fill="rgb(206,145,37)" rx="2" ry="2" />
<text  x="1171.19" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_insert_range_unique&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const*&gt; (1 samples, 0.02%)</title><rect x="106.9" y="405" width="0.3" height="15.0" fill="rgb(228,32,33)" rx="2" ry="2" />
<text  x="109.93" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="48.9" y="245" width="0.7" height="15.0" fill="rgb(217,57,34)" rx="2" ry="2" />
<text  x="51.91" y="255.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="75.9" y="309" width="0.2" height="15.0" fill="rgb(210,96,39)" rx="2" ry="2" />
<text  x="78.89" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="54.3" y="309" width="0.2" height="15.0" fill="rgb(254,105,3)" rx="2" ry="2" />
<text  x="57.30" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%)</title><rect x="852.2" y="357" width="0.2" height="15.0" fill="rgb(223,96,49)" rx="2" ry="2" />
<text  x="855.21" y="367.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1133.3" y="229" width="0.5" height="15.0" fill="rgb(229,54,42)" rx="2" ry="2" />
<text  x="1136.33" y="239.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%)</title><rect x="1035.7" y="309" width="0.5" height="15.0" fill="rgb(240,205,21)" rx="2" ry="2" />
<text  x="1038.73" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (28 samples, 0.53%)</title><rect x="51.8" y="325" width="6.3" height="15.0" fill="rgb(216,112,14)" rx="2" ry="2" />
<text  x="54.83" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1165.7" y="533" width="0.2" height="15.0" fill="rgb(238,189,53)" rx="2" ry="2" />
<text  x="1168.71" y="543.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.5" y="197" width="0.2" height="15.0" fill="rgb(220,14,8)" rx="2" ry="2" />
<text  x="1123.51" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (50 samples, 0.95%)</title><rect x="688.0" y="533" width="11.3" height="15.0" fill="rgb(239,51,9)" rx="2" ry="2" />
<text  x="691.04" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.5" y="213" width="0.2" height="15.0" fill="rgb(248,48,9)" rx="2" ry="2" />
<text  x="42.46" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="849.3" y="485" width="0.2" height="15.0" fill="rgb(243,204,40)" rx="2" ry="2" />
<text  x="852.29" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (16 samples, 0.30%)</title><rect x="703.8" y="485" width="3.6" height="15.0" fill="rgb(244,41,41)" rx="2" ry="2" />
<text  x="706.79" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="436.8" y="277" width="0.3" height="15.0" fill="rgb(209,138,47)" rx="2" ry="2" />
<text  x="439.84" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="599.9" y="469" width="0.2" height="15.0" fill="rgb(207,185,12)" rx="2" ry="2" />
<text  x="602.89" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (24 samples, 0.46%)</title><rect x="1129.5" y="293" width="5.4" height="15.0" fill="rgb(242,112,36)" rx="2" ry="2" />
<text  x="1132.50" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="806.1" y="309" width="0.2" height="15.0" fill="rgb(214,146,13)" rx="2" ry="2" />
<text  x="809.11" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (4 samples, 0.08%)</title><rect x="255.4" y="213" width="0.9" height="15.0" fill="rgb(226,117,22)" rx="2" ry="2" />
<text  x="258.36" y="223.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume (1 samples, 0.02%)</title><rect x="79.0" y="485" width="0.3" height="15.0" fill="rgb(223,74,3)" rx="2" ry="2" />
<text  x="82.04" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="825.9" y="469" width="0.2" height="15.0" fill="rgb(216,99,9)" rx="2" ry="2" />
<text  x="828.90" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (6 samples, 0.11%)</title><rect x="710.8" y="533" width="1.3" height="15.0" fill="rgb(233,226,11)" rx="2" ry="2" />
<text  x="713.76" y="543.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="743.4" y="309" width="0.2" height="15.0" fill="rgb(213,133,0)" rx="2" ry="2" />
<text  x="746.37" y="319.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (25 samples, 0.48%)</title><rect x="1120.1" y="341" width="5.6" height="15.0" fill="rgb(223,107,52)" rx="2" ry="2" />
<text  x="1123.06" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="980.2" y="277" width="0.2" height="15.0" fill="rgb(248,35,42)" rx="2" ry="2" />
<text  x="983.18" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (10 samples, 0.19%)</title><rect x="1112.4" y="437" width="2.3" height="15.0" fill="rgb(219,208,35)" rx="2" ry="2" />
<text  x="1115.41" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="213" width="0.5" height="15.0" fill="rgb(253,202,13)" rx="2" ry="2" />
<text  x="59.10" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="584.8" y="405" width="0.2" height="15.0" fill="rgb(254,223,54)" rx="2" ry="2" />
<text  x="587.82" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="45.1" y="213" width="0.7" height="15.0" fill="rgb(213,63,19)" rx="2" ry="2" />
<text  x="48.08" y="223.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (1 samples, 0.02%)</title><rect x="1121.0" y="261" width="0.2" height="15.0" fill="rgb(244,138,20)" rx="2" ry="2" />
<text  x="1123.96" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="503.0" y="341" width="0.9" height="15.0" fill="rgb(216,184,10)" rx="2" ry="2" />
<text  x="505.96" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="738.4" y="405" width="0.5" height="15.0" fill="rgb(232,81,5)" rx="2" ry="2" />
<text  x="741.42" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::inc_p (1 samples, 0.02%)</title><rect x="44.0" y="309" width="0.2" height="15.0" fill="rgb(247,214,47)" rx="2" ry="2" />
<text  x="46.96" y="319.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="1136.9" y="357" width="0.3" height="15.0" fill="rgb(207,81,25)" rx="2" ry="2" />
<text  x="1139.93" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (3 samples, 0.06%)</title><rect x="769.7" y="389" width="0.7" height="15.0" fill="rgb(247,108,23)" rx="2" ry="2" />
<text  x="772.68" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (4 samples, 0.08%)</title><rect x="111.9" y="501" width="0.9" height="15.0" fill="rgb(205,94,45)" rx="2" ry="2" />
<text  x="114.88" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (35 samples, 0.67%)</title><rect x="422.2" y="277" width="7.9" height="15.0" fill="rgb(239,16,49)" rx="2" ry="2" />
<text  x="425.22" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="334.5" y="277" width="0.2" height="15.0" fill="rgb(211,66,38)" rx="2" ry="2" />
<text  x="337.52" y="287.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="858.3" y="309" width="0.2" height="15.0" fill="rgb(222,94,4)" rx="2" ry="2" />
<text  x="861.29" y="319.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (206 samples, 3.93%)</title><rect x="21.2" y="485" width="46.4" height="15.0" fill="rgb(210,45,1)" rx="2" ry="2" />
<text  x="24.24" y="495.5" >cql3..</text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (73 samples, 1.39%)</title><rect x="1063.8" y="357" width="16.5" height="15.0" fill="rgb(253,225,21)" rx="2" ry="2" />
<text  x="1066.84" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="670.3" y="501" width="0.7" height="15.0" fill="rgb(209,228,40)" rx="2" ry="2" />
<text  x="673.28" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="82.4" y="421" width="0.2" height="15.0" fill="rgb(207,92,12)" rx="2" ry="2" />
<text  x="85.41" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="841.4" y="501" width="0.2" height="15.0" fill="rgb(220,29,5)" rx="2" ry="2" />
<text  x="844.42" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1169.3" y="485" width="0.2" height="15.0" fill="rgb(230,139,8)" rx="2" ry="2" />
<text  x="1172.31" y="495.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%)</title><rect x="16.7" y="645" width="0.3" height="15.0" fill="rgb(227,8,4)" rx="2" ry="2" />
<text  x="19.75" y="655.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (2 samples, 0.04%)</title><rect x="656.6" y="469" width="0.4" height="15.0" fill="rgb(213,198,17)" rx="2" ry="2" />
<text  x="659.56" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1061.1" y="373" width="0.3" height="15.0" fill="rgb(219,135,29)" rx="2" ry="2" />
<text  x="1064.14" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="851.1" y="405" width="0.2" height="15.0" fill="rgb(254,122,34)" rx="2" ry="2" />
<text  x="854.09" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="843.7" y="469" width="0.4" height="15.0" fill="rgb(247,175,26)" rx="2" ry="2" />
<text  x="846.67" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.11%)</title><rect x="966.2" y="389" width="1.4" height="15.0" fill="rgb(236,61,35)" rx="2" ry="2" />
<text  x="969.23" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.3" y="261" width="0.2" height="15.0" fill="rgb(249,46,7)" rx="2" ry="2" />
<text  x="57.30" y="271.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (683 samples, 13.02%)</title><rect x="167.0" y="405" width="153.6" height="15.0" fill="rgb(253,157,4)" rx="2" ry="2" />
<text  x="169.97" y="415.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="436.2" y="309" width="0.9" height="15.0" fill="rgb(240,131,25)" rx="2" ry="2" />
<text  x="439.17" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="943.1" y="453" width="0.2" height="15.0" fill="rgb(206,151,34)" rx="2" ry="2" />
<text  x="946.07" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="485.4" y="293" width="0.2" height="15.0" fill="rgb(226,162,45)" rx="2" ry="2" />
<text  x="488.42" y="303.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="449.2" y="373" width="0.2" height="15.0" fill="rgb(225,183,40)" rx="2" ry="2" />
<text  x="452.21" y="383.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="18.3" y="293" width="0.2" height="15.0" fill="rgb(211,105,17)" rx="2" ry="2" />
<text  x="21.32" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.29%)</title><rect x="313.2" y="293" width="3.3" height="15.0" fill="rgb(213,7,28)" rx="2" ry="2" />
<text  x="316.15" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="43.1" y="261" width="0.9" height="15.0" fill="rgb(208,225,54)" rx="2" ry="2" />
<text  x="46.06" y="271.5" ></text>
</g>
<g >
<title>make_combined_reader (110 samples, 2.10%)</title><rect x="449.7" y="373" width="24.7" height="15.0" fill="rgb(234,138,6)" rx="2" ry="2" />
<text  x="452.66" y="383.5" >m..</text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="278.7" y="197" width="0.7" height="15.0" fill="rgb(251,6,21)" rx="2" ry="2" />
<text  x="281.74" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="971.9" y="309" width="2.0" height="15.0" fill="rgb(241,55,38)" rx="2" ry="2" />
<text  x="974.86" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="38.8" y="293" width="0.4" height="15.0" fill="rgb(247,11,42)" rx="2" ry="2" />
<text  x="41.79" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (274 samples, 5.22%)</title><rect x="17.0" y="613" width="61.6" height="15.0" fill="rgb(239,133,12)" rx="2" ry="2" />
<text  x="19.97" y="623.5" >seasta..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (15 samples, 0.29%)</title><rect x="634.5" y="517" width="3.4" height="15.0" fill="rgb(230,16,32)" rx="2" ry="2" />
<text  x="637.52" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1105.0" y="437" width="0.2" height="15.0" fill="rgb(229,200,8)" rx="2" ry="2" />
<text  x="1107.99" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="776.0" y="357" width="0.2" height="15.0" fill="rgb(218,45,35)" rx="2" ry="2" />
<text  x="778.98" y="367.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (21 samples, 0.40%)</title><rect x="914.7" y="389" width="4.8" height="15.0" fill="rgb(232,65,51)" rx="2" ry="2" />
<text  x="917.73" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="275.4" y="213" width="0.6" height="15.0" fill="rgb(222,229,38)" rx="2" ry="2" />
<text  x="278.37" y="223.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="471.0" y="325" width="0.7" height="15.0" fill="rgb(233,200,51)" rx="2" ry="2" />
<text  x="474.03" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="77.0" y="485" width="0.2" height="15.0" fill="rgb(212,18,52)" rx="2" ry="2" />
<text  x="80.02" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="830.4" y="453" width="0.7" height="15.0" fill="rgb(243,84,11)" rx="2" ry="2" />
<text  x="833.40" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="582.3" y="373" width="0.3" height="15.0" fill="rgb(207,82,7)" rx="2" ry="2" />
<text  x="585.35" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%)</title><rect x="361.1" y="213" width="0.6" height="15.0" fill="rgb(221,190,40)" rx="2" ry="2" />
<text  x="364.05" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%)</title><rect x="1130.2" y="165" width="0.9" height="15.0" fill="rgb(206,33,50)" rx="2" ry="2" />
<text  x="1133.18" y="175.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (16 samples, 0.30%)</title><rect x="832.4" y="453" width="3.6" height="15.0" fill="rgb(237,64,37)" rx="2" ry="2" />
<text  x="835.42" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="430.1" y="293" width="0.2" height="15.0" fill="rgb(236,37,51)" rx="2" ry="2" />
<text  x="433.10" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="209.5" y="229" width="0.2" height="15.0" fill="rgb(220,198,11)" rx="2" ry="2" />
<text  x="212.48" y="239.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.17%)</title><rect x="75.4" y="501" width="2.1" height="15.0" fill="rgb(230,10,42)" rx="2" ry="2" />
<text  x="78.44" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1131.1" y="149" width="0.2" height="15.0" fill="rgb(223,0,18)" rx="2" ry="2" />
<text  x="1134.08" y="159.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="108.3" y="517" width="0.2" height="15.0" fill="rgb(232,133,7)" rx="2" ry="2" />
<text  x="111.28" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="391.4" y="229" width="0.5" height="15.0" fill="rgb(233,81,18)" rx="2" ry="2" />
<text  x="394.41" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (17 samples, 0.32%)</title><rect x="755.1" y="405" width="3.8" height="15.0" fill="rgb(235,25,45)" rx="2" ry="2" />
<text  x="758.06" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="954.8" y="405" width="0.2" height="15.0" fill="rgb(251,11,3)" rx="2" ry="2" />
<text  x="957.76" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (265 samples, 5.05%)</title><rect x="19.0" y="597" width="59.6" height="15.0" fill="rgb(248,147,20)" rx="2" ry="2" />
<text  x="22.00" y="607.5" >std::_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (2 samples, 0.04%)</title><rect x="28.7" y="229" width="0.4" height="15.0" fill="rgb(213,175,8)" rx="2" ry="2" />
<text  x="31.67" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="59.5" y="357" width="0.2" height="15.0" fill="rgb(234,120,54)" rx="2" ry="2" />
<text  x="62.48" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="197.6" y="197" width="0.6" height="15.0" fill="rgb(244,126,53)" rx="2" ry="2" />
<text  x="200.56" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="254.7" y="181" width="0.2" height="15.0" fill="rgb(226,78,8)" rx="2" ry="2" />
<text  x="257.68" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="92.1" y="517" width="0.2" height="15.0" fill="rgb(215,27,19)" rx="2" ry="2" />
<text  x="95.09" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="855.6" y="213" width="0.2" height="15.0" fill="rgb(239,86,20)" rx="2" ry="2" />
<text  x="858.59" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="507.0" y="341" width="0.5" height="15.0" fill="rgb(206,120,21)" rx="2" ry="2" />
<text  x="510.01" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (8 samples, 0.15%)</title><rect x="1100.5" y="405" width="1.8" height="15.0" fill="rgb(221,164,27)" rx="2" ry="2" />
<text  x="1103.49" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1128.8" y="229" width="0.5" height="15.0" fill="rgb(248,125,10)" rx="2" ry="2" />
<text  x="1131.83" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="808.4" y="341" width="0.2" height="15.0" fill="rgb(217,90,22)" rx="2" ry="2" />
<text  x="811.36" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.3" y="293" width="0.2" height="15.0" fill="rgb(231,164,26)" rx="2" ry="2" />
<text  x="62.25" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (46 samples, 0.88%)</title><rect x="1006.0" y="245" width="10.4" height="15.0" fill="rgb(216,195,6)" rx="2" ry="2" />
<text  x="1009.04" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%)</title><rect x="1012.1" y="181" width="0.7" height="15.0" fill="rgb(247,125,51)" rx="2" ry="2" />
<text  x="1015.11" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="985.1" y="229" width="0.2" height="15.0" fill="rgb(250,135,41)" rx="2" ry="2" />
<text  x="988.12" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="602.1" y="469" width="0.3" height="15.0" fill="rgb(235,123,26)" rx="2" ry="2" />
<text  x="605.14" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="49.4" y="133" width="0.2" height="15.0" fill="rgb(208,174,2)" rx="2" ry="2" />
<text  x="52.36" y="143.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="61.3" y="293" width="0.2" height="15.0" fill="rgb(248,222,15)" rx="2" ry="2" />
<text  x="64.28" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="674.3" y="485" width="0.7" height="15.0" fill="rgb(217,195,53)" rx="2" ry="2" />
<text  x="677.33" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="215.5" y="165" width="0.3" height="15.0" fill="rgb(225,0,31)" rx="2" ry="2" />
<text  x="218.55" y="175.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="18.5" y="405" width="0.3" height="15.0" fill="rgb(212,33,17)" rx="2" ry="2" />
<text  x="21.55" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="106.0" y="421" width="0.3" height="15.0" fill="rgb(211,172,39)" rx="2" ry="2" />
<text  x="109.03" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.10%)</title><rect x="39.2" y="389" width="1.2" height="15.0" fill="rgb(249,211,3)" rx="2" ry="2" />
<text  x="42.24" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="435.0" y="341" width="2.1" height="15.0" fill="rgb(210,170,0)" rx="2" ry="2" />
<text  x="438.04" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="849.1" y="405" width="0.2" height="15.0" fill="rgb(246,229,30)" rx="2" ry="2" />
<text  x="852.07" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="651.2" y="469" width="0.2" height="15.0" fill="rgb(226,176,24)" rx="2" ry="2" />
<text  x="654.16" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="699.1" y="517" width="0.2" height="15.0" fill="rgb(253,195,34)" rx="2" ry="2" />
<text  x="702.06" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="81.5" y="341" width="0.2" height="15.0" fill="rgb(221,36,12)" rx="2" ry="2" />
<text  x="84.52" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="212.0" y="213" width="0.4" height="15.0" fill="rgb(233,52,21)" rx="2" ry="2" />
<text  x="214.95" y="223.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="198.7" y="229" width="0.4" height="15.0" fill="rgb(212,150,38)" rx="2" ry="2" />
<text  x="201.68" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="52.1" y="213" width="0.2" height="15.0" fill="rgb(240,136,47)" rx="2" ry="2" />
<text  x="55.05" y="223.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="10.7" y="405" width="0.2" height="15.0" fill="rgb(212,166,38)" rx="2" ry="2" />
<text  x="13.67" y="415.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (28 samples, 0.53%)</title><rect x="722.5" y="469" width="6.2" height="15.0" fill="rgb(249,205,14)" rx="2" ry="2" />
<text  x="725.45" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.7" y="309" width="0.2" height="15.0" fill="rgb(216,73,45)" rx="2" ry="2" />
<text  x="62.70" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="81.5" y="357" width="0.2" height="15.0" fill="rgb(254,26,42)" rx="2" ry="2" />
<text  x="84.52" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (3 samples, 0.06%)</title><rect x="292.2" y="309" width="0.7" height="15.0" fill="rgb(220,144,38)" rx="2" ry="2" />
<text  x="295.24" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="267.9" y="293" width="0.3" height="15.0" fill="rgb(225,152,43)" rx="2" ry="2" />
<text  x="270.95" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="795.5" y="117" width="0.3" height="15.0" fill="rgb(224,35,48)" rx="2" ry="2" />
<text  x="798.54" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="421.8" y="229" width="0.2" height="15.0" fill="rgb(240,188,40)" rx="2" ry="2" />
<text  x="424.77" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="46.4" y="309" width="0.5" height="15.0" fill="rgb(213,84,35)" rx="2" ry="2" />
<text  x="49.43" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="106.3" y="389" width="0.2" height="15.0" fill="rgb(228,35,16)" rx="2" ry="2" />
<text  x="109.25" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="65.3" y="405" width="0.2" height="15.0" fill="rgb(242,202,20)" rx="2" ry="2" />
<text  x="68.32" y="415.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="480.7" y="325" width="0.9" height="15.0" fill="rgb(228,41,54)" rx="2" ry="2" />
<text  x="483.70" y="335.5" ></text>
</g>
<g >
<title>__atomic_store (1 samples, 0.02%)</title><rect x="710.8" y="517" width="0.2" height="15.0" fill="rgb(232,108,9)" rx="2" ry="2" />
<text  x="713.76" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="527.2" y="325" width="0.3" height="15.0" fill="rgb(212,149,17)" rx="2" ry="2" />
<text  x="530.25" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (15 samples, 0.29%)</title><rect x="539.4" y="309" width="3.4" height="15.0" fill="rgb(205,65,34)" rx="2" ry="2" />
<text  x="542.39" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="198.2" y="245" width="0.3" height="15.0" fill="rgb(240,213,14)" rx="2" ry="2" />
<text  x="201.23" y="255.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="106.3" y="453" width="0.2" height="15.0" fill="rgb(250,43,33)" rx="2" ry="2" />
<text  x="109.25" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="793.3" y="149" width="0.4" height="15.0" fill="rgb(239,132,3)" rx="2" ry="2" />
<text  x="796.29" y="159.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="424.2" y="229" width="0.3" height="15.0" fill="rgb(245,92,2)" rx="2" ry="2" />
<text  x="427.25" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,129 samples, 21.52%)</title><rect x="865.3" y="485" width="253.9" height="15.0" fill="rgb(234,93,32)" rx="2" ry="2" />
<text  x="868.26" y="495.5" >seastar::noncopyable_function&lt;sea..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.10%)</title><rect x="399.5" y="213" width="1.1" height="15.0" fill="rgb(244,220,29)" rx="2" ry="2" />
<text  x="402.51" y="223.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.08%)</title><rect x="813.1" y="373" width="0.9" height="15.0" fill="rgb(251,102,24)" rx="2" ry="2" />
<text  x="816.08" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.2" y="421" width="0.2" height="15.0" fill="rgb(222,67,0)" rx="2" ry="2" />
<text  x="69.22" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="979.5" y="309" width="0.2" height="15.0" fill="rgb(206,138,23)" rx="2" ry="2" />
<text  x="982.50" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="74.8" y="485" width="0.4" height="15.0" fill="rgb(220,15,16)" rx="2" ry="2" />
<text  x="77.77" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (5 samples, 0.10%)</title><rect x="621.3" y="453" width="1.1" height="15.0" fill="rgb(247,76,23)" rx="2" ry="2" />
<text  x="624.25" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="726.5" y="325" width="0.2" height="15.0" fill="rgb(241,70,12)" rx="2" ry="2" />
<text  x="729.50" y="335.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update_min_max_components (1 samples, 0.02%)</title><rect x="10.7" y="421" width="0.2" height="15.0" fill="rgb(214,229,49)" rx="2" ry="2" />
<text  x="13.67" y="431.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (2 samples, 0.04%)</title><rect x="1128.8" y="261" width="0.5" height="15.0" fill="rgb(230,27,9)" rx="2" ry="2" />
<text  x="1131.83" y="271.5" ></text>
</g>
<g >
<title>sstables::key::make_key&lt;partition_key_view&amp;&gt; (1 samples, 0.02%)</title><rect x="82.4" y="469" width="0.2" height="15.0" fill="rgb(220,148,3)" rx="2" ry="2" />
<text  x="85.41" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="107.4" y="437" width="0.2" height="15.0" fill="rgb(212,152,0)" rx="2" ry="2" />
<text  x="110.38" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="436.8" y="261" width="0.3" height="15.0" fill="rgb(243,142,3)" rx="2" ry="2" />
<text  x="439.84" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="61.3" y="309" width="0.2" height="15.0" fill="rgb(205,207,2)" rx="2" ry="2" />
<text  x="64.28" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="81.1" y="485" width="0.2" height="15.0" fill="rgb(234,184,0)" rx="2" ry="2" />
<text  x="84.07" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (11 samples, 0.21%)</title><rect x="1040.4" y="357" width="2.5" height="15.0" fill="rgb(254,123,52)" rx="2" ry="2" />
<text  x="1043.45" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="834.9" y="357" width="0.2" height="15.0" fill="rgb(219,19,53)" rx="2" ry="2" />
<text  x="837.90" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (203 samples, 3.87%)</title><rect x="1038.0" y="389" width="45.6" height="15.0" fill="rgb(238,172,50)" rx="2" ry="2" />
<text  x="1040.97" y="399.5" >serv..</text>
</g>
<g >
<title>composite::serialized_size&lt;partition_key_view&amp;&gt; (1 samples, 0.02%)</title><rect x="82.4" y="437" width="0.2" height="15.0" fill="rgb(205,187,3)" rx="2" ry="2" />
<text  x="85.41" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="687.1" y="469" width="0.3" height="15.0" fill="rgb(220,211,43)" rx="2" ry="2" />
<text  x="690.15" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="826.1" y="469" width="0.3" height="15.0" fill="rgb(223,72,53)" rx="2" ry="2" />
<text  x="829.13" y="479.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::to_internal_name (1 samples, 0.02%)</title><rect x="21.0" y="485" width="0.2" height="15.0" fill="rgb(244,202,21)" rx="2" ry="2" />
<text  x="24.02" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (14 samples, 0.27%)</title><rect x="971.9" y="357" width="3.1" height="15.0" fill="rgb(241,119,26)" rx="2" ry="2" />
<text  x="974.86" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (4 samples, 0.08%)</title><rect x="653.9" y="501" width="0.9" height="15.0" fill="rgb(205,88,54)" rx="2" ry="2" />
<text  x="656.86" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1014.8" y="197" width="0.2" height="15.0" fill="rgb(248,180,17)" rx="2" ry="2" />
<text  x="1017.81" y="207.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="105.4" y="389" width="0.2" height="15.0" fill="rgb(210,207,12)" rx="2" ry="2" />
<text  x="108.35" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (4 samples, 0.08%)</title><rect x="544.8" y="373" width="0.9" height="15.0" fill="rgb(239,212,46)" rx="2" ry="2" />
<text  x="547.79" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="16.7" y="597" width="0.3" height="15.0" fill="rgb(224,28,44)" rx="2" ry="2" />
<text  x="19.75" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="883.9" y="325" width="0.2" height="15.0" fill="rgb(220,20,11)" rx="2" ry="2" />
<text  x="886.92" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%)</title><rect x="104.0" y="517" width="0.5" height="15.0" fill="rgb(227,132,0)" rx="2" ry="2" />
<text  x="107.00" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="1044.0" y="293" width="1.2" height="15.0" fill="rgb(215,135,14)" rx="2" ry="2" />
<text  x="1047.05" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="593.8" y="405" width="0.2" height="15.0" fill="rgb(238,121,43)" rx="2" ry="2" />
<text  x="596.82" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reset_preemption_monitor (2 samples, 0.04%)</title><rect x="1167.7" y="549" width="0.5" height="15.0" fill="rgb(206,218,16)" rx="2" ry="2" />
<text  x="1170.74" y="559.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="266.6" y="277" width="0.4" height="15.0" fill="rgb(237,110,9)" rx="2" ry="2" />
<text  x="269.60" y="287.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%)</title><rect x="67.6" y="485" width="0.2" height="15.0" fill="rgb(211,8,49)" rx="2" ry="2" />
<text  x="70.57" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="79.9" y="517" width="0.3" height="15.0" fill="rgb(236,189,28)" rx="2" ry="2" />
<text  x="82.94" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="22.6" y="421" width="0.4" height="15.0" fill="rgb(232,202,53)" rx="2" ry="2" />
<text  x="25.59" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="81.1" y="437" width="0.2" height="15.0" fill="rgb(207,168,52)" rx="2" ry="2" />
<text  x="84.07" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::drop_type_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="64.9" y="325" width="0.2" height="15.0" fill="rgb(231,112,22)" rx="2" ry="2" />
<text  x="67.87" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="30.0" y="277" width="0.2" height="15.0" fill="rgb(237,204,22)" rx="2" ry="2" />
<text  x="33.02" y="287.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%)</title><rect x="101.8" y="533" width="0.2" height="15.0" fill="rgb(210,149,27)" rx="2" ry="2" />
<text  x="104.76" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (338 samples, 6.44%)</title><rect x="341.7" y="261" width="76.0" height="15.0" fill="rgb(223,148,47)" rx="2" ry="2" />
<text  x="344.71" y="271.5" >compact_..</text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%)</title><rect x="1136.9" y="309" width="0.3" height="15.0" fill="rgb(242,7,7)" rx="2" ry="2" />
<text  x="1139.93" y="319.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1047.6" y="373" width="0.3" height="15.0" fill="rgb(205,14,54)" rx="2" ry="2" />
<text  x="1050.64" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (122 samples, 2.33%)</title><rect x="216.2" y="165" width="27.5" height="15.0" fill="rgb(206,63,13)" rx="2" ry="2" />
<text  x="219.22" y="175.5" >c..</text>
</g>
<g >
<title>partition_version_ref::operator* (2 samples, 0.04%)</title><rect x="568.4" y="309" width="0.5" height="15.0" fill="rgb(237,112,9)" rx="2" ry="2" />
<text  x="571.40" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="631.6" y="389" width="0.2" height="15.0" fill="rgb(230,53,9)" rx="2" ry="2" />
<text  x="634.60" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="601.7" y="469" width="0.2" height="15.0" fill="rgb(254,163,37)" rx="2" ry="2" />
<text  x="604.69" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="24.8" y="261" width="0.3" height="15.0" fill="rgb(231,25,43)" rx="2" ry="2" />
<text  x="27.84" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.29%)</title><rect x="922.4" y="405" width="3.4" height="15.0" fill="rgb(235,138,24)" rx="2" ry="2" />
<text  x="925.38" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="39.5" y="245" width="0.6" height="15.0" fill="rgb(221,40,11)" rx="2" ry="2" />
<text  x="42.46" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="1001.8" y="245" width="0.4" height="15.0" fill="rgb(207,215,39)" rx="2" ry="2" />
<text  x="1004.77" y="255.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (528 samples, 10.06%)</title><rect x="322.6" y="421" width="118.7" height="15.0" fill="rgb(233,34,14)" rx="2" ry="2" />
<text  x="325.60" y="431.5" >query::consume..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="39.5" y="341" width="0.6" height="15.0" fill="rgb(223,216,23)" rx="2" ry="2" />
<text  x="42.46" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (8 samples, 0.15%)</title><rect x="283.9" y="245" width="1.8" height="15.0" fill="rgb(217,132,41)" rx="2" ry="2" />
<text  x="286.92" y="255.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="470.1" y="309" width="0.3" height="15.0" fill="rgb(240,85,21)" rx="2" ry="2" />
<text  x="473.13" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="1043.6" y="325" width="1.8" height="15.0" fill="rgb(206,184,23)" rx="2" ry="2" />
<text  x="1046.60" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="43.1" y="245" width="0.9" height="15.0" fill="rgb(212,9,16)" rx="2" ry="2" />
<text  x="46.06" y="255.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (39 samples, 0.74%)</title><rect x="406.3" y="197" width="8.7" height="15.0" fill="rgb(252,211,18)" rx="2" ry="2" />
<text  x="409.26" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1011.9" y="181" width="0.2" height="15.0" fill="rgb(213,225,54)" rx="2" ry="2" />
<text  x="1014.89" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (499 samples, 9.51%)</title><rect x="325.7" y="389" width="112.3" height="15.0" fill="rgb(248,61,19)" rx="2" ry="2" />
<text  x="328.75" y="399.5" >flat_mutation..</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1088.1" y="421" width="0.2" height="15.0" fill="rgb(233,46,8)" rx="2" ry="2" />
<text  x="1091.12" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (2 samples, 0.04%)</title><rect x="695.5" y="485" width="0.4" height="15.0" fill="rgb(218,31,6)" rx="2" ry="2" />
<text  x="698.47" y="495.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="819.8" y="341" width="0.3" height="15.0" fill="rgb(252,52,23)" rx="2" ry="2" />
<text  x="822.83" y="351.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (57 samples, 1.09%)</title><rect x="1065.6" y="325" width="12.9" height="15.0" fill="rgb(254,135,6)" rx="2" ry="2" />
<text  x="1068.64" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="893.1" y="309" width="0.3" height="15.0" fill="rgb(226,149,44)" rx="2" ry="2" />
<text  x="896.14" y="319.5" ></text>
</g>
<g >
<title>[unknown] (324 samples, 6.17%)</title><rect x="10.2" y="661" width="72.9" height="15.0" fill="rgb(254,139,47)" rx="2" ry="2" />
<text  x="13.22" y="671.5" >[unknown]</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="810.4" y="389" width="0.4" height="15.0" fill="rgb(254,103,8)" rx="2" ry="2" />
<text  x="813.38" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (10 samples, 0.19%)</title><rect x="30.5" y="293" width="2.2" height="15.0" fill="rgb(243,45,51)" rx="2" ry="2" />
<text  x="33.47" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.9" y="549" width="0.2" height="15.0" fill="rgb(219,174,42)" rx="2" ry="2" />
<text  x="20.87" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="32.7" y="293" width="0.2" height="15.0" fill="rgb(243,75,27)" rx="2" ry="2" />
<text  x="35.71" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="534.4" y="357" width="0.3" height="15.0" fill="rgb(227,190,30)" rx="2" ry="2" />
<text  x="537.44" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.4" y="261" width="0.5" height="15.0" fill="rgb(219,190,46)" rx="2" ry="2" />
<text  x="49.43" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="960.6" y="373" width="1.4" height="15.0" fill="rgb(228,85,21)" rx="2" ry="2" />
<text  x="963.61" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="266.4" y="277" width="0.2" height="15.0" fill="rgb(245,90,26)" rx="2" ry="2" />
<text  x="269.38" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.1" y="261" width="0.2" height="15.0" fill="rgb(239,69,15)" rx="2" ry="2" />
<text  x="55.05" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="772.2" y="341" width="0.2" height="15.0" fill="rgb(250,226,30)" rx="2" ry="2" />
<text  x="775.15" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%)</title><rect x="514.0" y="293" width="1.6" height="15.0" fill="rgb(220,151,27)" rx="2" ry="2" />
<text  x="516.98" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%)</title><rect x="646.0" y="485" width="0.4" height="15.0" fill="rgb(237,67,30)" rx="2" ry="2" />
<text  x="648.99" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1143.7" y="517" width="0.2" height="15.0" fill="rgb(240,119,0)" rx="2" ry="2" />
<text  x="1146.67" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="941.0" y="389" width="0.7" height="15.0" fill="rgb(231,197,15)" rx="2" ry="2" />
<text  x="944.05" y="399.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="133.5" y="485" width="0.2" height="15.0" fill="rgb(218,137,35)" rx="2" ry="2" />
<text  x="136.46" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (7 samples, 0.13%)</title><rect x="932.7" y="421" width="1.6" height="15.0" fill="rgb(212,62,24)" rx="2" ry="2" />
<text  x="935.73" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (3 samples, 0.06%)</title><rect x="669.4" y="517" width="0.7" height="15.0" fill="rgb(213,87,7)" rx="2" ry="2" />
<text  x="672.38" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="687.4" y="485" width="0.2" height="15.0" fill="rgb(242,166,11)" rx="2" ry="2" />
<text  x="690.37" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (4 samples, 0.08%)</title><rect x="619.7" y="469" width="0.9" height="15.0" fill="rgb(246,1,29)" rx="2" ry="2" />
<text  x="622.68" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1132.9" y="197" width="0.2" height="15.0" fill="rgb(233,42,25)" rx="2" ry="2" />
<text  x="1135.88" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="672.5" y="469" width="0.5" height="15.0" fill="rgb(221,95,40)" rx="2" ry="2" />
<text  x="675.53" y="479.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (6 samples, 0.11%)</title><rect x="762.5" y="421" width="1.3" height="15.0" fill="rgb(206,41,51)" rx="2" ry="2" />
<text  x="765.48" y="431.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="960.4" y="389" width="0.2" height="15.0" fill="rgb(217,38,12)" rx="2" ry="2" />
<text  x="963.39" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (22 samples, 0.42%)</title><rect x="836.2" y="485" width="5.0" height="15.0" fill="rgb(239,189,3)" rx="2" ry="2" />
<text  x="839.25" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (66 samples, 1.26%)</title><rect x="23.5" y="389" width="14.8" height="15.0" fill="rgb(226,14,41)" rx="2" ry="2" />
<text  x="26.49" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (3 samples, 0.06%)</title><rect x="230.6" y="117" width="0.7" height="15.0" fill="rgb(241,6,45)" rx="2" ry="2" />
<text  x="233.62" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="538.7" y="325" width="0.5" height="15.0" fill="rgb(250,120,24)" rx="2" ry="2" />
<text  x="541.72" y="335.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (3 samples, 0.06%)</title><rect x="461.8" y="309" width="0.7" height="15.0" fill="rgb(242,182,29)" rx="2" ry="2" />
<text  x="464.80" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1087.4" y="421" width="0.7" height="15.0" fill="rgb(205,108,51)" rx="2" ry="2" />
<text  x="1090.45" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="56.3" y="149" width="0.3" height="15.0" fill="rgb(230,210,29)" rx="2" ry="2" />
<text  x="59.33" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (2 samples, 0.04%)</title><rect x="1166.8" y="501" width="0.5" height="15.0" fill="rgb(243,22,43)" rx="2" ry="2" />
<text  x="1169.84" y="511.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="842.5" y="469" width="1.2" height="15.0" fill="rgb(241,45,23)" rx="2" ry="2" />
<text  x="845.54" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="630.0" y="517" width="0.2" height="15.0" fill="rgb(212,41,54)" rx="2" ry="2" />
<text  x="633.02" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.34%)</title><rect x="1051.5" y="341" width="4.0" height="15.0" fill="rgb(211,135,44)" rx="2" ry="2" />
<text  x="1054.47" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (3 samples, 0.06%)</title><rect x="273.1" y="229" width="0.7" height="15.0" fill="rgb(213,78,36)" rx="2" ry="2" />
<text  x="276.12" y="239.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="971.6" y="373" width="0.3" height="15.0" fill="rgb(226,158,54)" rx="2" ry="2" />
<text  x="974.63" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::compact_for_compaction (1 samples, 0.02%)</title><rect x="106.3" y="437" width="0.2" height="15.0" fill="rgb(247,29,36)" rx="2" ry="2" />
<text  x="109.25" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="807.7" y="389" width="2.2" height="15.0" fill="rgb(241,109,10)" rx="2" ry="2" />
<text  x="810.69" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="918.1" y="357" width="1.4" height="15.0" fill="rgb(250,221,53)" rx="2" ry="2" />
<text  x="921.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="621.9" y="421" width="0.5" height="15.0" fill="rgb(223,141,9)" rx="2" ry="2" />
<text  x="624.93" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="469" width="8.1" height="15.0" fill="rgb(206,163,29)" rx="2" ry="2" />
<text  x="1130.48" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1022.2" y="277" width="0.3" height="15.0" fill="rgb(212,174,30)" rx="2" ry="2" />
<text  x="1025.23" y="287.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="405" width="0.7" height="15.0" fill="rgb(237,178,52)" rx="2" ry="2" />
<text  x="689.25" y="415.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1037.7" y="325" width="0.3" height="15.0" fill="rgb(212,220,9)" rx="2" ry="2" />
<text  x="1040.75" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="246.6" y="133" width="0.4" height="15.0" fill="rgb(238,168,36)" rx="2" ry="2" />
<text  x="249.58" y="143.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="72.5" y="325" width="0.2" height="15.0" fill="rgb(209,131,19)" rx="2" ry="2" />
<text  x="75.52" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="683.3" y="485" width="0.2" height="15.0" fill="rgb(222,96,35)" rx="2" ry="2" />
<text  x="686.32" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(230,198,50)" rx="2" ry="2" />
<text  x="13.67" y="527.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.29%)</title><rect x="313.2" y="309" width="3.3" height="15.0" fill="rgb(215,82,14)" rx="2" ry="2" />
<text  x="316.15" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="758.0" y="373" width="0.2" height="15.0" fill="rgb(247,190,37)" rx="2" ry="2" />
<text  x="760.99" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="50.3" y="293" width="0.2" height="15.0" fill="rgb(236,181,12)" rx="2" ry="2" />
<text  x="53.26" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (10 samples, 0.19%)</title><rect x="386.5" y="197" width="2.2" height="15.0" fill="rgb(249,1,3)" rx="2" ry="2" />
<text  x="389.47" y="207.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (9 samples, 0.17%)</title><rect x="1147.7" y="501" width="2.0" height="15.0" fill="rgb(206,167,20)" rx="2" ry="2" />
<text  x="1150.72" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (3 samples, 0.06%)</title><rect x="652.7" y="485" width="0.7" height="15.0" fill="rgb(253,126,6)" rx="2" ry="2" />
<text  x="655.74" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (110 samples, 2.10%)</title><rect x="778.0" y="341" width="24.7" height="15.0" fill="rgb(224,169,10)" rx="2" ry="2" />
<text  x="781.00" y="351.5" >a..</text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="791.0" y="165" width="0.3" height="15.0" fill="rgb(231,45,3)" rx="2" ry="2" />
<text  x="794.04" y="175.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="741.3" y="309" width="0.3" height="15.0" fill="rgb(239,128,13)" rx="2" ry="2" />
<text  x="744.34" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%)</title><rect x="117.9" y="485" width="0.3" height="15.0" fill="rgb(231,33,28)" rx="2" ry="2" />
<text  x="120.95" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="433.2" y="261" width="0.5" height="15.0" fill="rgb(209,203,34)" rx="2" ry="2" />
<text  x="436.24" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1165.9" y="533" width="0.3" height="15.0" fill="rgb(254,217,0)" rx="2" ry="2" />
<text  x="1168.94" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1015.7" y="213" width="0.2" height="15.0" fill="rgb(231,19,38)" rx="2" ry="2" />
<text  x="1018.71" y="223.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="203.6" y="261" width="0.3" height="15.0" fill="rgb(207,7,38)" rx="2" ry="2" />
<text  x="206.63" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (7 samples, 0.13%)</title><rect x="944.9" y="437" width="1.5" height="15.0" fill="rgb(232,66,14)" rx="2" ry="2" />
<text  x="947.87" y="447.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%)</title><rect x="529.0" y="341" width="0.9" height="15.0" fill="rgb(224,81,23)" rx="2" ry="2" />
<text  x="532.05" y="351.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="18.5" y="549" width="0.5" height="15.0" fill="rgb(206,47,12)" rx="2" ry="2" />
<text  x="21.55" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="772.2" y="325" width="0.2" height="15.0" fill="rgb(236,167,54)" rx="2" ry="2" />
<text  x="775.15" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (2 samples, 0.04%)</title><rect x="557.2" y="453" width="0.4" height="15.0" fill="rgb(243,105,44)" rx="2" ry="2" />
<text  x="560.16" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="422.0" y="245" width="0.2" height="15.0" fill="rgb(218,151,19)" rx="2" ry="2" />
<text  x="425.00" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (16 samples, 0.30%)</title><rect x="789.5" y="197" width="3.6" height="15.0" fill="rgb(221,78,36)" rx="2" ry="2" />
<text  x="792.47" y="207.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (10 samples, 0.19%)</title><rect x="716.2" y="485" width="2.2" height="15.0" fill="rgb(228,80,21)" rx="2" ry="2" />
<text  x="719.16" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="532.9" y="373" width="0.2" height="15.0" fill="rgb(229,160,49)" rx="2" ry="2" />
<text  x="535.87" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (1 samples, 0.02%)</title><rect x="84.2" y="549" width="0.2" height="15.0" fill="rgb(253,150,17)" rx="2" ry="2" />
<text  x="87.21" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="43.7" y="149" width="0.3" height="15.0" fill="rgb(220,148,42)" rx="2" ry="2" />
<text  x="46.73" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="229" width="0.2" height="15.0" fill="rgb(213,3,34)" rx="2" ry="2" />
<text  x="64.05" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.10%)</title><rect x="180.7" y="277" width="1.1" height="15.0" fill="rgb(242,38,11)" rx="2" ry="2" />
<text  x="183.69" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (3 samples, 0.06%)</title><rect x="705.6" y="453" width="0.7" height="15.0" fill="rgb(239,217,41)" rx="2" ry="2" />
<text  x="708.59" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.11%)</title><rect x="722.7" y="421" width="1.3" height="15.0" fill="rgb(206,214,8)" rx="2" ry="2" />
<text  x="725.68" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (1 samples, 0.02%)</title><rect x="82.9" y="501" width="0.2" height="15.0" fill="rgb(231,218,10)" rx="2" ry="2" />
<text  x="85.86" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="677.0" y="517" width="0.5" height="15.0" fill="rgb(212,206,2)" rx="2" ry="2" />
<text  x="680.02" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(229,117,45)" rx="2" ry="2" />
<text  x="13.67" y="575.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%)</title><rect x="744.3" y="293" width="0.9" height="15.0" fill="rgb(254,20,22)" rx="2" ry="2" />
<text  x="747.27" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (3 samples, 0.06%)</title><rect x="193.5" y="261" width="0.7" height="15.0" fill="rgb(246,178,54)" rx="2" ry="2" />
<text  x="196.51" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="286.2" y="293" width="0.2" height="15.0" fill="rgb(213,158,50)" rx="2" ry="2" />
<text  x="289.17" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="233.3" y="101" width="0.2" height="15.0" fill="rgb(228,177,22)" rx="2" ry="2" />
<text  x="236.32" y="111.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="48.7" y="261" width="0.9" height="15.0" fill="rgb(249,92,52)" rx="2" ry="2" />
<text  x="51.68" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1165.3" y="453" width="0.2" height="15.0" fill="rgb(214,20,10)" rx="2" ry="2" />
<text  x="1168.26" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%)</title><rect x="576.5" y="405" width="0.9" height="15.0" fill="rgb(224,111,51)" rx="2" ry="2" />
<text  x="579.50" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (36 samples, 0.69%)</title><rect x="1094.2" y="437" width="8.1" height="15.0" fill="rgb(247,52,9)" rx="2" ry="2" />
<text  x="1097.20" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="575.6" y="389" width="0.2" height="15.0" fill="rgb(215,18,28)" rx="2" ry="2" />
<text  x="578.60" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="621.7" y="405" width="0.2" height="15.0" fill="rgb(214,167,29)" rx="2" ry="2" />
<text  x="624.70" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="165.4" y="421" width="0.2" height="15.0" fill="rgb(250,8,8)" rx="2" ry="2" />
<text  x="168.40" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_type_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.9" y="405" width="0.2" height="15.0" fill="rgb(242,75,22)" rx="2" ry="2" />
<text  x="67.87" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="618.3" y="405" width="0.3" height="15.0" fill="rgb(215,57,44)" rx="2" ry="2" />
<text  x="621.33" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="900.8" y="389" width="0.2" height="15.0" fill="rgb(217,134,42)" rx="2" ry="2" />
<text  x="903.79" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1017.5" y="245" width="0.5" height="15.0" fill="rgb(229,191,25)" rx="2" ry="2" />
<text  x="1020.51" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (421 samples, 8.02%)</title><rect x="729.2" y="469" width="94.7" height="15.0" fill="rgb(205,98,47)" rx="2" ry="2" />
<text  x="732.20" y="479.5" >cql3::query..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="609.3" y="469" width="1.6" height="15.0" fill="rgb(249,200,24)" rx="2" ry="2" />
<text  x="612.33" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="428.1" y="229" width="0.2" height="15.0" fill="rgb(241,132,9)" rx="2" ry="2" />
<text  x="431.07" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (218 samples, 4.15%)</title><rect x="208.8" y="261" width="49.0" height="15.0" fill="rgb(210,225,9)" rx="2" ry="2" />
<text  x="211.80" y="271.5" >part..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="185.6" y="245" width="0.5" height="15.0" fill="rgb(207,58,29)" rx="2" ry="2" />
<text  x="188.64" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="17.4" y="565" width="0.2" height="15.0" fill="rgb(233,9,20)" rx="2" ry="2" />
<text  x="20.42" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="153.7" y="437" width="0.9" height="15.0" fill="rgb(250,60,24)" rx="2" ry="2" />
<text  x="156.70" y="447.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (12 samples, 0.23%)</title><rect x="419.5" y="277" width="2.7" height="15.0" fill="rgb(211,222,27)" rx="2" ry="2" />
<text  x="422.53" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="712.3" y="533" width="0.3" height="15.0" fill="rgb(222,56,19)" rx="2" ry="2" />
<text  x="715.33" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="44.9" y="341" width="0.9" height="15.0" fill="rgb(212,24,6)" rx="2" ry="2" />
<text  x="47.86" y="351.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (18 samples, 0.34%)</title><rect x="539.2" y="341" width="4.0" height="15.0" fill="rgb(212,89,21)" rx="2" ry="2" />
<text  x="542.17" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="43.1" y="293" width="0.9" height="15.0" fill="rgb(219,69,18)" rx="2" ry="2" />
<text  x="46.06" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="478.7" y="357" width="0.2" height="15.0" fill="rgb(209,73,25)" rx="2" ry="2" />
<text  x="481.67" y="367.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="949.4" y="421" width="0.2" height="15.0" fill="rgb(215,144,47)" rx="2" ry="2" />
<text  x="952.37" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="698.2" y="501" width="0.9" height="15.0" fill="rgb(216,157,16)" rx="2" ry="2" />
<text  x="701.16" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (15 samples, 0.29%)</title><rect x="908.9" y="405" width="3.4" height="15.0" fill="rgb(226,149,7)" rx="2" ry="2" />
<text  x="911.89" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%)</title><rect x="30.2" y="293" width="0.3" height="15.0" fill="rgb(254,6,18)" rx="2" ry="2" />
<text  x="33.24" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (9 samples, 0.17%)</title><rect x="249.5" y="197" width="2.0" height="15.0" fill="rgb(233,111,23)" rx="2" ry="2" />
<text  x="252.51" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="310.9" y="325" width="0.2" height="15.0" fill="rgb(214,0,31)" rx="2" ry="2" />
<text  x="313.90" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1058.4" y="325" width="0.3" height="15.0" fill="rgb(217,104,9)" rx="2" ry="2" />
<text  x="1061.44" y="335.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="79.9" y="613" width="0.3" height="15.0" fill="rgb(222,162,42)" rx="2" ry="2" />
<text  x="82.94" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (2 samples, 0.04%)</title><rect x="1169.1" y="501" width="0.4" height="15.0" fill="rgb(218,218,38)" rx="2" ry="2" />
<text  x="1172.09" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1121.6" y="245" width="0.5" height="15.0" fill="rgb(252,111,10)" rx="2" ry="2" />
<text  x="1124.63" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="38.8" y="341" width="0.4" height="15.0" fill="rgb(210,44,45)" rx="2" ry="2" />
<text  x="41.79" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (2 samples, 0.04%)</title><rect x="599.4" y="421" width="0.5" height="15.0" fill="rgb(250,70,41)" rx="2" ry="2" />
<text  x="602.44" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (2 samples, 0.04%)</title><rect x="105.4" y="517" width="0.4" height="15.0" fill="rgb(229,90,20)" rx="2" ry="2" />
<text  x="108.35" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="41.3" y="373" width="0.2" height="15.0" fill="rgb(221,29,8)" rx="2" ry="2" />
<text  x="44.26" y="383.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="50.0" y="309" width="0.3" height="15.0" fill="rgb(221,179,40)" rx="2" ry="2" />
<text  x="53.03" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="61.1" y="309" width="0.2" height="15.0" fill="rgb(246,24,32)" rx="2" ry="2" />
<text  x="64.05" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (11 samples, 0.21%)</title><rect x="793.3" y="197" width="2.5" height="15.0" fill="rgb(211,37,6)" rx="2" ry="2" />
<text  x="796.29" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt;, std::allocator&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="106.7" y="389" width="0.2" height="15.0" fill="rgb(225,55,39)" rx="2" ry="2" />
<text  x="109.70" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1086.3" y="405" width="0.3" height="15.0" fill="rgb(226,82,5)" rx="2" ry="2" />
<text  x="1089.33" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="819.8" y="325" width="0.3" height="15.0" fill="rgb(220,136,46)" rx="2" ry="2" />
<text  x="822.83" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.8" y="405" width="0.3" height="15.0" fill="rgb(240,164,28)" rx="2" ry="2" />
<text  x="65.85" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (2 samples, 0.04%)</title><rect x="131.7" y="453" width="0.4" height="15.0" fill="rgb(254,58,20)" rx="2" ry="2" />
<text  x="134.67" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1126.4" y="309" width="0.2" height="15.0" fill="rgb(205,174,39)" rx="2" ry="2" />
<text  x="1129.36" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="60.8" y="261" width="0.3" height="15.0" fill="rgb(228,222,49)" rx="2" ry="2" />
<text  x="63.83" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (1 samples, 0.02%)</title><rect x="71.6" y="325" width="0.2" height="15.0" fill="rgb(225,82,32)" rx="2" ry="2" />
<text  x="74.62" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%)</title><rect x="602.4" y="469" width="0.2" height="15.0" fill="rgb(253,39,30)" rx="2" ry="2" />
<text  x="605.36" y="479.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="1166.4" y="293" width="0.2" height="15.0" fill="rgb(252,46,28)" rx="2" ry="2" />
<text  x="1169.39" y="303.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="605.5" y="453" width="1.4" height="15.0" fill="rgb(231,162,43)" rx="2" ry="2" />
<text  x="608.51" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="51.4" y="213" width="0.2" height="15.0" fill="rgb(234,97,51)" rx="2" ry="2" />
<text  x="54.38" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%)</title><rect x="430.3" y="293" width="0.5" height="15.0" fill="rgb(215,22,8)" rx="2" ry="2" />
<text  x="433.32" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (27 samples, 0.51%)</title><rect x="631.8" y="533" width="6.1" height="15.0" fill="rgb(222,177,44)" rx="2" ry="2" />
<text  x="634.82" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%)</title><rect x="21.7" y="437" width="0.4" height="15.0" fill="rgb(230,92,18)" rx="2" ry="2" />
<text  x="24.69" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="978.8" y="325" width="0.3" height="15.0" fill="rgb(205,88,12)" rx="2" ry="2" />
<text  x="981.83" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="809.5" y="325" width="0.4" height="15.0" fill="rgb(223,61,1)" rx="2" ry="2" />
<text  x="812.49" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="815.1" y="309" width="0.2" height="15.0" fill="rgb(208,12,48)" rx="2" ry="2" />
<text  x="818.11" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="735.5" y="421" width="0.2" height="15.0" fill="rgb(239,96,18)" rx="2" ry="2" />
<text  x="738.50" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1086.6" y="405" width="0.6" height="15.0" fill="rgb(246,141,30)" rx="2" ry="2" />
<text  x="1089.55" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.06%)</title><rect x="16.1" y="645" width="0.6" height="15.0" fill="rgb(219,123,3)" rx="2" ry="2" />
<text  x="19.07" y="655.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1152.0" y="437" width="0.2" height="15.0" fill="rgb(212,132,13)" rx="2" ry="2" />
<text  x="1154.99" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="30.0" y="245" width="0.2" height="15.0" fill="rgb(221,136,38)" rx="2" ry="2" />
<text  x="33.02" y="255.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.0" y="549" width="0.2" height="15.0" fill="rgb(226,163,21)" rx="2" ry="2" />
<text  x="19.97" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (2 samples, 0.04%)</title><rect x="215.8" y="165" width="0.4" height="15.0" fill="rgb(236,127,48)" rx="2" ry="2" />
<text  x="218.77" y="175.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="55.2" y="149" width="0.5" height="15.0" fill="rgb(220,155,49)" rx="2" ry="2" />
<text  x="58.20" y="159.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="784.7" y="229" width="1.6" height="15.0" fill="rgb(244,99,9)" rx="2" ry="2" />
<text  x="787.75" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1161.9" y="517" width="0.2" height="15.0" fill="rgb(244,205,49)" rx="2" ry="2" />
<text  x="1164.89" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="469.2" y="293" width="0.5" height="15.0" fill="rgb(242,33,51)" rx="2" ry="2" />
<text  x="472.23" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="485" width="0.7" height="15.0" fill="rgb(252,51,48)" rx="2" ry="2" />
<text  x="689.25" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_end (1 samples, 0.02%)</title><rect x="37.7" y="325" width="0.2" height="15.0" fill="rgb(215,215,21)" rx="2" ry="2" />
<text  x="40.66" y="335.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="18.3" y="325" width="0.2" height="15.0" fill="rgb(225,105,7)" rx="2" ry="2" />
<text  x="21.32" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="781.8" y="277" width="0.2" height="15.0" fill="rgb(209,38,10)" rx="2" ry="2" />
<text  x="784.82" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="23.5" y="357" width="0.2" height="15.0" fill="rgb(254,101,12)" rx="2" ry="2" />
<text  x="26.49" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="985.1" y="213" width="0.2" height="15.0" fill="rgb(224,12,16)" rx="2" ry="2" />
<text  x="988.12" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="817.6" y="373" width="0.2" height="15.0" fill="rgb(211,54,45)" rx="2" ry="2" />
<text  x="820.58" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="79.7" y="181" width="0.2" height="15.0" fill="rgb(213,120,43)" rx="2" ry="2" />
<text  x="82.72" y="191.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="321.7" y="421" width="0.4" height="15.0" fill="rgb(210,48,48)" rx="2" ry="2" />
<text  x="324.70" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%)</title><rect x="740.7" y="389" width="4.7" height="15.0" fill="rgb(221,160,35)" rx="2" ry="2" />
<text  x="743.67" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="933.0" y="389" width="1.3" height="15.0" fill="rgb(253,20,16)" rx="2" ry="2" />
<text  x="935.95" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.15%)</title><rect x="662.4" y="501" width="1.8" height="15.0" fill="rgb(251,144,54)" rx="2" ry="2" />
<text  x="665.41" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.15%)</title><rect x="1151.5" y="469" width="1.8" height="15.0" fill="rgb(232,172,19)" rx="2" ry="2" />
<text  x="1154.54" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="73.4" y="421" width="0.2" height="15.0" fill="rgb(247,68,28)" rx="2" ry="2" />
<text  x="76.42" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="594.5" y="421" width="0.2" height="15.0" fill="rgb(241,105,19)" rx="2" ry="2" />
<text  x="597.49" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.10%)</title><rect x="39.2" y="373" width="1.2" height="15.0" fill="rgb(227,83,25)" rx="2" ry="2" />
<text  x="42.24" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (8 samples, 0.15%)</title><rect x="274.2" y="229" width="1.8" height="15.0" fill="rgb(220,154,47)" rx="2" ry="2" />
<text  x="277.25" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="135.5" y="485" width="0.2" height="15.0" fill="rgb(248,85,42)" rx="2" ry="2" />
<text  x="138.49" y="495.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (2 samples, 0.04%)</title><rect x="121.1" y="485" width="0.4" height="15.0" fill="rgb(235,84,50)" rx="2" ry="2" />
<text  x="124.10" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (493 samples, 9.40%)</title><rect x="326.2" y="357" width="110.9" height="15.0" fill="rgb(240,111,34)" rx="2" ry="2" />
<text  x="329.20" y="367.5" >seastar::inte..</text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="858.3" y="325" width="0.2" height="15.0" fill="rgb(238,1,2)" rx="2" ry="2" />
<text  x="861.29" y="335.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (1 samples, 0.02%)</title><rect x="105.6" y="389" width="0.2" height="15.0" fill="rgb(253,167,53)" rx="2" ry="2" />
<text  x="108.58" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="1189.6" y="661" width="0.2" height="15.0" fill="rgb(242,129,19)" rx="2" ry="2" />
<text  x="1192.55" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="21.9" y="373" width="0.2" height="15.0" fill="rgb(222,205,48)" rx="2" ry="2" />
<text  x="24.92" y="383.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="538.3" y="325" width="0.2" height="15.0" fill="rgb(235,212,38)" rx="2" ry="2" />
<text  x="541.27" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="57.7" y="277" width="0.2" height="15.0" fill="rgb(220,215,44)" rx="2" ry="2" />
<text  x="60.68" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="992.1" y="293" width="2.9" height="15.0" fill="rgb(252,128,29)" rx="2" ry="2" />
<text  x="995.10" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="757.8" y="373" width="0.2" height="15.0" fill="rgb(220,203,29)" rx="2" ry="2" />
<text  x="760.76" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="52.1" y="197" width="0.2" height="15.0" fill="rgb(217,88,35)" rx="2" ry="2" />
<text  x="55.05" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="81.3" y="389" width="0.4" height="15.0" fill="rgb(225,208,50)" rx="2" ry="2" />
<text  x="84.29" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="86.5" y="549" width="0.2" height="15.0" fill="rgb(240,86,30)" rx="2" ry="2" />
<text  x="89.46" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1125.2" y="261" width="0.3" height="15.0" fill="rgb(218,228,23)" rx="2" ry="2" />
<text  x="1128.23" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="658.8" y="517" width="0.5" height="15.0" fill="rgb(220,37,41)" rx="2" ry="2" />
<text  x="661.81" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="537.8" y="341" width="0.2" height="15.0" fill="rgb(208,126,36)" rx="2" ry="2" />
<text  x="540.82" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="81.3" y="373" width="0.2" height="15.0" fill="rgb(235,181,36)" rx="2" ry="2" />
<text  x="84.29" y="383.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="191.9" y="277" width="0.3" height="15.0" fill="rgb(223,216,48)" rx="2" ry="2" />
<text  x="194.94" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="458.9" y="293" width="0.2" height="15.0" fill="rgb(209,16,9)" rx="2" ry="2" />
<text  x="461.88" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="653.4" y="501" width="0.2" height="15.0" fill="rgb(216,218,7)" rx="2" ry="2" />
<text  x="656.41" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="633.8" y="501" width="0.5" height="15.0" fill="rgb(241,173,14)" rx="2" ry="2" />
<text  x="636.85" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.2" y="613" width="0.2" height="15.0" fill="rgb(252,107,11)" rx="2" ry="2" />
<text  x="13.22" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="442.9" y="453" width="0.2" height="15.0" fill="rgb(247,207,36)" rx="2" ry="2" />
<text  x="445.91" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="809.9" y="421" width="0.3" height="15.0" fill="rgb(237,126,45)" rx="2" ry="2" />
<text  x="812.94" y="431.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (3 samples, 0.06%)</title><rect x="855.6" y="309" width="0.7" height="15.0" fill="rgb(229,206,7)" rx="2" ry="2" />
<text  x="858.59" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="758.9" y="405" width="0.2" height="15.0" fill="rgb(205,10,20)" rx="2" ry="2" />
<text  x="761.89" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="247.0" y="133" width="0.3" height="15.0" fill="rgb(205,30,36)" rx="2" ry="2" />
<text  x="250.03" y="143.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="790.6" y="149" width="0.2" height="15.0" fill="rgb(229,150,27)" rx="2" ry="2" />
<text  x="793.59" y="159.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (22 samples, 0.42%)</title><rect x="465.9" y="325" width="4.9" height="15.0" fill="rgb(223,177,9)" rx="2" ry="2" />
<text  x="468.85" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (3 samples, 0.06%)</title><rect x="324.4" y="405" width="0.7" height="15.0" fill="rgb(253,73,48)" rx="2" ry="2" />
<text  x="327.40" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (13 samples, 0.25%)</title><rect x="855.6" y="421" width="2.9" height="15.0" fill="rgb(229,197,10)" rx="2" ry="2" />
<text  x="858.59" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (5 samples, 0.10%)</title><rect x="1013.2" y="181" width="1.2" height="15.0" fill="rgb(246,40,50)" rx="2" ry="2" />
<text  x="1016.24" y="191.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1166.8" y="437" width="0.3" height="15.0" fill="rgb(215,200,10)" rx="2" ry="2" />
<text  x="1169.84" y="447.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="959.9" y="389" width="0.3" height="15.0" fill="rgb(242,37,41)" rx="2" ry="2" />
<text  x="962.94" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;data_value, data_value&gt;, std::allocator&lt;std::pair&lt;data_value, data_value&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="107.2" y="389" width="0.2" height="15.0" fill="rgb(244,225,11)" rx="2" ry="2" />
<text  x="110.15" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="1046.3" y="325" width="0.4" height="15.0" fill="rgb(214,85,15)" rx="2" ry="2" />
<text  x="1049.30" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="46.9" y="309" width="0.2" height="15.0" fill="rgb(228,46,7)" rx="2" ry="2" />
<text  x="49.88" y="319.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="800.7" y="309" width="0.2" height="15.0" fill="rgb(225,203,17)" rx="2" ry="2" />
<text  x="803.71" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="95.2" y="485" width="0.7" height="15.0" fill="rgb(224,31,31)" rx="2" ry="2" />
<text  x="98.23" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="181.8" y="293" width="0.2" height="15.0" fill="rgb(245,179,54)" rx="2" ry="2" />
<text  x="184.82" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (2 samples, 0.04%)</title><rect x="26.9" y="293" width="0.4" height="15.0" fill="rgb(241,106,11)" rx="2" ry="2" />
<text  x="29.87" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1120.7" y="261" width="0.3" height="15.0" fill="rgb(206,25,38)" rx="2" ry="2" />
<text  x="1123.73" y="271.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (2 samples, 0.04%)</title><rect x="439.1" y="373" width="0.4" height="15.0" fill="rgb(254,51,51)" rx="2" ry="2" />
<text  x="442.09" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="42.8" y="165" width="0.3" height="15.0" fill="rgb(221,198,34)" rx="2" ry="2" />
<text  x="45.83" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="16.7" y="565" width="0.3" height="15.0" fill="rgb(244,130,0)" rx="2" ry="2" />
<text  x="19.75" y="575.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (426 samples, 8.12%)</title><rect x="190.8" y="325" width="95.8" height="15.0" fill="rgb(224,132,48)" rx="2" ry="2" />
<text  x="193.81" y="335.5" >seastar::do..</text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.7" y="341" width="0.2" height="15.0" fill="rgb(236,7,44)" rx="2" ry="2" />
<text  x="82.72" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="352.3" y="229" width="0.2" height="15.0" fill="rgb(217,68,34)" rx="2" ry="2" />
<text  x="355.28" y="239.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="81.3" y="309" width="0.2" height="15.0" fill="rgb(219,35,24)" rx="2" ry="2" />
<text  x="84.29" y="319.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%)</title><rect x="105.6" y="261" width="0.2" height="15.0" fill="rgb(210,108,50)" rx="2" ry="2" />
<text  x="108.58" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="40.4" y="373" width="0.2" height="15.0" fill="rgb(246,39,1)" rx="2" ry="2" />
<text  x="43.36" y="383.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1128.8" y="197" width="0.3" height="15.0" fill="rgb(254,98,10)" rx="2" ry="2" />
<text  x="1131.83" y="207.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="601.5" y="437" width="0.2" height="15.0" fill="rgb(245,213,23)" rx="2" ry="2" />
<text  x="604.46" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="57.2" y="101" width="0.3" height="15.0" fill="rgb(206,179,17)" rx="2" ry="2" />
<text  x="60.23" y="111.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="253.3" y="165" width="0.3" height="15.0" fill="rgb(225,130,3)" rx="2" ry="2" />
<text  x="256.33" y="175.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="56.1" y="197" width="0.5" height="15.0" fill="rgb(242,8,47)" rx="2" ry="2" />
<text  x="59.10" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="465.2" y="341" width="0.2" height="15.0" fill="rgb(206,23,2)" rx="2" ry="2" />
<text  x="468.18" y="351.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="1166.4" y="517" width="0.4" height="15.0" fill="rgb(244,83,50)" rx="2" ry="2" />
<text  x="1169.39" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="547.7" y="421" width="0.7" height="15.0" fill="rgb(214,63,2)" rx="2" ry="2" />
<text  x="550.71" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="712.1" y="533" width="0.2" height="15.0" fill="rgb(248,179,5)" rx="2" ry="2" />
<text  x="715.11" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="320.6" y="421" width="0.4" height="15.0" fill="rgb(214,89,4)" rx="2" ry="2" />
<text  x="323.57" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%)</title><rect x="705.8" y="437" width="0.5" height="15.0" fill="rgb(241,1,27)" rx="2" ry="2" />
<text  x="708.81" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (112 samples, 2.13%)</title><rect x="879.7" y="437" width="25.1" height="15.0" fill="rgb(249,123,1)" rx="2" ry="2" />
<text  x="882.65" y="447.5" >c..</text>
</g>
<g >
<title>database::parse_system_tables (1 samples, 0.02%)</title><rect x="79.7" y="293" width="0.2" height="15.0" fill="rgb(210,34,51)" rx="2" ry="2" />
<text  x="82.72" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="646.2" y="453" width="0.2" height="15.0" fill="rgb(232,67,10)" rx="2" ry="2" />
<text  x="649.21" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.1" y="261" width="0.7" height="15.0" fill="rgb(233,142,36)" rx="2" ry="2" />
<text  x="48.08" y="271.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_role_statement*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="64.6" y="341" width="0.3" height="15.0" fill="rgb(216,202,9)" rx="2" ry="2" />
<text  x="67.65" y="351.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="107.8" y="357" width="0.3" height="15.0" fill="rgb(237,79,21)" rx="2" ry="2" />
<text  x="110.83" y="367.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (2 samples, 0.04%)</title><rect x="1131.5" y="133" width="0.5" height="15.0" fill="rgb(244,77,18)" rx="2" ry="2" />
<text  x="1134.53" y="143.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="24.8" y="245" width="0.3" height="15.0" fill="rgb(209,191,52)" rx="2" ry="2" />
<text  x="27.84" y="255.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="830.2" y="421" width="0.2" height="15.0" fill="rgb(246,49,18)" rx="2" ry="2" />
<text  x="833.18" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="618.6" y="405" width="0.2" height="15.0" fill="rgb(248,149,0)" rx="2" ry="2" />
<text  x="621.55" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%)</title><rect x="277.4" y="229" width="0.2" height="15.0" fill="rgb(235,87,6)" rx="2" ry="2" />
<text  x="280.39" y="239.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="516.9" y="261" width="0.2" height="15.0" fill="rgb(228,69,30)" rx="2" ry="2" />
<text  x="519.90" y="271.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%)</title><rect x="344.6" y="197" width="0.7" height="15.0" fill="rgb(225,12,36)" rx="2" ry="2" />
<text  x="347.64" y="207.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (6 samples, 0.11%)</title><rect x="600.3" y="469" width="1.4" height="15.0" fill="rgb(245,23,38)" rx="2" ry="2" />
<text  x="603.34" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%)</title><rect x="787.2" y="197" width="0.9" height="15.0" fill="rgb(216,211,27)" rx="2" ry="2" />
<text  x="790.22" y="207.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (10 samples, 0.19%)</title><rect x="896.3" y="373" width="2.2" height="15.0" fill="rgb(241,124,32)" rx="2" ry="2" />
<text  x="899.29" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (26 samples, 0.50%)</title><rect x="1129.5" y="341" width="5.9" height="15.0" fill="rgb(226,11,46)" rx="2" ry="2" />
<text  x="1132.50" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="203.9" y="261" width="0.2" height="15.0" fill="rgb(236,60,11)" rx="2" ry="2" />
<text  x="206.86" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="45.1" y="245" width="0.7" height="15.0" fill="rgb(230,91,16)" rx="2" ry="2" />
<text  x="48.08" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1008.5" y="213" width="0.2" height="15.0" fill="rgb(207,88,39)" rx="2" ry="2" />
<text  x="1011.51" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="650.3" y="501" width="0.2" height="15.0" fill="rgb(208,158,5)" rx="2" ry="2" />
<text  x="653.26" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="437.1" y="357" width="0.4" height="15.0" fill="rgb(218,101,34)" rx="2" ry="2" />
<text  x="440.07" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="544.6" y="373" width="0.2" height="15.0" fill="rgb(232,94,33)" rx="2" ry="2" />
<text  x="547.56" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (1 samples, 0.02%)</title><rect x="79.0" y="501" width="0.3" height="15.0" fill="rgb(215,65,22)" rx="2" ry="2" />
<text  x="82.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="898.8" y="373" width="0.2" height="15.0" fill="rgb(241,47,9)" rx="2" ry="2" />
<text  x="901.77" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (18 samples, 0.34%)</title><rect x="642.8" y="533" width="4.1" height="15.0" fill="rgb(230,28,42)" rx="2" ry="2" />
<text  x="645.84" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%)</title><rect x="329.6" y="293" width="1.1" height="15.0" fill="rgb(208,125,3)" rx="2" ry="2" />
<text  x="332.57" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="99.5" y="485" width="0.7" height="15.0" fill="rgb(222,115,0)" rx="2" ry="2" />
<text  x="102.51" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="38.3" y="405" width="0.3" height="15.0" fill="rgb(228,29,52)" rx="2" ry="2" />
<text  x="41.34" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;checked_file_impl&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="80.2" y="645" width="0.2" height="15.0" fill="rgb(245,26,41)" rx="2" ry="2" />
<text  x="83.17" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%)</title><rect x="1013.9" y="165" width="0.5" height="15.0" fill="rgb(207,121,18)" rx="2" ry="2" />
<text  x="1016.91" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="756.6" y="373" width="1.2" height="15.0" fill="rgb(235,196,0)" rx="2" ry="2" />
<text  x="759.64" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="44.2" y="277" width="0.2" height="15.0" fill="rgb(231,164,24)" rx="2" ry="2" />
<text  x="47.18" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="935.0" y="437" width="0.2" height="15.0" fill="rgb(216,213,11)" rx="2" ry="2" />
<text  x="937.97" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="782.7" y="293" width="0.2" height="15.0" fill="rgb(250,13,26)" rx="2" ry="2" />
<text  x="785.72" y="303.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="106.5" y="469" width="0.2" height="15.0" fill="rgb(220,79,37)" rx="2" ry="2" />
<text  x="109.48" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="299.2" y="373" width="0.2" height="15.0" fill="rgb(253,51,47)" rx="2" ry="2" />
<text  x="302.21" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%)</title><rect x="851.5" y="325" width="0.5" height="15.0" fill="rgb(213,217,47)" rx="2" ry="2" />
<text  x="854.54" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (6 samples, 0.11%)</title><rect x="748.5" y="405" width="1.4" height="15.0" fill="rgb(234,173,23)" rx="2" ry="2" />
<text  x="751.54" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="763.4" y="373" width="0.4" height="15.0" fill="rgb(207,159,34)" rx="2" ry="2" />
<text  x="766.38" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="241.9" y="149" width="0.4" height="15.0" fill="rgb(252,207,26)" rx="2" ry="2" />
<text  x="244.86" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="61.3" y="133" width="0.2" height="15.0" fill="rgb(211,27,13)" rx="2" ry="2" />
<text  x="64.28" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="437.5" y="373" width="0.5" height="15.0" fill="rgb(226,223,16)" rx="2" ry="2" />
<text  x="440.52" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (3 samples, 0.06%)</title><rect x="796.9" y="293" width="0.7" height="15.0" fill="rgb(208,212,36)" rx="2" ry="2" />
<text  x="799.89" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="42.8" y="181" width="0.3" height="15.0" fill="rgb(247,72,24)" rx="2" ry="2" />
<text  x="45.83" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="881.9" y="325" width="1.6" height="15.0" fill="rgb(235,174,43)" rx="2" ry="2" />
<text  x="884.90" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (1 samples, 0.02%)</title><rect x="515.6" y="293" width="0.2" height="15.0" fill="rgb(228,39,47)" rx="2" ry="2" />
<text  x="518.55" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (9 samples, 0.17%)</title><rect x="873.6" y="453" width="2.0" height="15.0" fill="rgb(205,140,18)" rx="2" ry="2" />
<text  x="876.58" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="77.2" y="469" width="0.3" height="15.0" fill="rgb(233,202,48)" rx="2" ry="2" />
<text  x="80.24" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="658.4" y="517" width="0.4" height="15.0" fill="rgb(244,77,46)" rx="2" ry="2" />
<text  x="661.36" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (10 samples, 0.19%)</title><rect x="979.1" y="325" width="2.2" height="15.0" fill="rgb(217,101,27)" rx="2" ry="2" />
<text  x="982.05" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;, mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="631.1" y="533" width="0.3" height="15.0" fill="rgb(245,81,0)" rx="2" ry="2" />
<text  x="634.15" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="818.3" y="373" width="1.8" height="15.0" fill="rgb(227,161,50)" rx="2" ry="2" />
<text  x="821.26" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="38.8" y="389" width="0.4" height="15.0" fill="rgb(210,159,3)" rx="2" ry="2" />
<text  x="41.79" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="556.0" y="453" width="0.5" height="15.0" fill="rgb(233,40,0)" rx="2" ry="2" />
<text  x="559.03" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="59.7" y="181" width="0.2" height="15.0" fill="rgb(232,12,15)" rx="2" ry="2" />
<text  x="62.70" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="188.3" y="277" width="0.5" height="15.0" fill="rgb(236,130,25)" rx="2" ry="2" />
<text  x="191.34" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="979.7" y="293" width="0.3" height="15.0" fill="rgb(233,158,34)" rx="2" ry="2" />
<text  x="982.73" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="853.8" y="325" width="0.2" height="15.0" fill="rgb(206,6,24)" rx="2" ry="2" />
<text  x="856.79" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="427.6" y="213" width="0.2" height="15.0" fill="rgb(207,47,30)" rx="2" ry="2" />
<text  x="430.62" y="223.5" ></text>
</g>
<g >
<title>query::result_atomic_cell_view::value (1 samples, 0.02%)</title><rect x="107.8" y="309" width="0.3" height="15.0" fill="rgb(208,53,35)" rx="2" ry="2" />
<text  x="110.83" y="319.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (19 samples, 0.36%)</title><rect x="1094.9" y="421" width="4.2" height="15.0" fill="rgb(211,32,12)" rx="2" ry="2" />
<text  x="1097.87" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="201.4" y="197" width="0.2" height="15.0" fill="rgb(243,198,46)" rx="2" ry="2" />
<text  x="204.38" y="207.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="525.2" y="277" width="0.2" height="15.0" fill="rgb(207,58,19)" rx="2" ry="2" />
<text  x="528.22" y="287.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="1153.8" y="469" width="1.3" height="15.0" fill="rgb(251,14,11)" rx="2" ry="2" />
<text  x="1156.79" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (24 samples, 0.46%)</title><rect x="690.5" y="501" width="5.4" height="15.0" fill="rgb(238,19,34)" rx="2" ry="2" />
<text  x="693.52" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.25%)</title><rect x="430.8" y="293" width="2.9" height="15.0" fill="rgb(217,2,18)" rx="2" ry="2" />
<text  x="433.77" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="255.8" y="197" width="0.5" height="15.0" fill="rgb(221,92,24)" rx="2" ry="2" />
<text  x="258.81" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (2 samples, 0.04%)</title><rect x="92.3" y="501" width="0.5" height="15.0" fill="rgb(211,21,45)" rx="2" ry="2" />
<text  x="95.31" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.8" y="101" width="0.2" height="15.0" fill="rgb(219,88,37)" rx="2" ry="2" />
<text  x="1134.75" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (6 samples, 0.11%)</title><rect x="297.9" y="357" width="1.3" height="15.0" fill="rgb(244,153,47)" rx="2" ry="2" />
<text  x="300.86" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%)</title><rect x="923.3" y="389" width="2.5" height="15.0" fill="rgb(226,133,47)" rx="2" ry="2" />
<text  x="926.28" y="399.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="903.3" y="405" width="0.2" height="15.0" fill="rgb(230,54,54)" rx="2" ry="2" />
<text  x="906.26" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="24.8" y="309" width="0.3" height="15.0" fill="rgb(222,111,45)" rx="2" ry="2" />
<text  x="27.84" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (65 samples, 1.24%)</title><rect x="23.7" y="357" width="14.6" height="15.0" fill="rgb(209,145,7)" rx="2" ry="2" />
<text  x="26.72" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (8 samples, 0.15%)</title><rect x="393.9" y="213" width="1.8" height="15.0" fill="rgb(245,205,5)" rx="2" ry="2" />
<text  x="396.89" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="853.3" y="405" width="0.3" height="15.0" fill="rgb(235,92,4)" rx="2" ry="2" />
<text  x="856.34" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="485" width="0.2" height="15.0" fill="rgb(245,62,45)" rx="2" ry="2" />
<text  x="1169.39" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="80.2" y="533" width="0.2" height="15.0" fill="rgb(214,47,7)" rx="2" ry="2" />
<text  x="83.17" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="854.5" y="309" width="0.2" height="15.0" fill="rgb(241,159,21)" rx="2" ry="2" />
<text  x="857.46" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1148.4" y="453" width="0.2" height="15.0" fill="rgb(207,109,24)" rx="2" ry="2" />
<text  x="1151.40" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (9 samples, 0.17%)</title><rect x="393.7" y="229" width="2.0" height="15.0" fill="rgb(244,182,4)" rx="2" ry="2" />
<text  x="396.66" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (2 samples, 0.04%)</title><rect x="806.8" y="373" width="0.4" height="15.0" fill="rgb(248,164,27)" rx="2" ry="2" />
<text  x="809.79" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="52.5" y="229" width="0.2" height="15.0" fill="rgb(239,220,11)" rx="2" ry="2" />
<text  x="55.50" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="839.2" y="373" width="0.9" height="15.0" fill="rgb(216,27,20)" rx="2" ry="2" />
<text  x="842.17" y="383.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (31 samples, 0.59%)</title><rect x="1119.8" y="357" width="7.0" height="15.0" fill="rgb(250,76,9)" rx="2" ry="2" />
<text  x="1122.83" y="367.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="33.2" y="277" width="0.2" height="15.0" fill="rgb(254,220,39)" rx="2" ry="2" />
<text  x="36.16" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="794.2" y="149" width="1.6" height="15.0" fill="rgb(227,164,13)" rx="2" ry="2" />
<text  x="797.19" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (15 samples, 0.29%)</title><rect x="814.2" y="373" width="3.4" height="15.0" fill="rgb(241,165,50)" rx="2" ry="2" />
<text  x="817.21" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="75.7" y="421" width="0.2" height="15.0" fill="rgb(233,194,52)" rx="2" ry="2" />
<text  x="78.67" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="109.4" y="517" width="0.2" height="15.0" fill="rgb(227,195,39)" rx="2" ry="2" />
<text  x="112.40" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (36 samples, 0.69%)</title><rect x="850.6" y="453" width="8.1" height="15.0" fill="rgb(216,164,4)" rx="2" ry="2" />
<text  x="853.64" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%)</title><rect x="742.5" y="325" width="0.9" height="15.0" fill="rgb(243,162,23)" rx="2" ry="2" />
<text  x="745.47" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (3 samples, 0.06%)</title><rect x="339.5" y="245" width="0.6" height="15.0" fill="rgb(226,25,13)" rx="2" ry="2" />
<text  x="342.46" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (9 samples, 0.17%)</title><rect x="344.2" y="213" width="2.0" height="15.0" fill="rgb(206,187,23)" rx="2" ry="2" />
<text  x="347.19" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%)</title><rect x="1135.4" y="341" width="0.2" height="15.0" fill="rgb(251,139,50)" rx="2" ry="2" />
<text  x="1138.35" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="986.9" y="325" width="0.7" height="15.0" fill="rgb(226,131,43)" rx="2" ry="2" />
<text  x="989.92" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="919.7" y="421" width="0.7" height="15.0" fill="rgb(226,9,25)" rx="2" ry="2" />
<text  x="922.68" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1116.2" y="453" width="0.3" height="15.0" fill="rgb(236,176,32)" rx="2" ry="2" />
<text  x="1119.24" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="42.8" y="197" width="0.3" height="15.0" fill="rgb(249,8,25)" rx="2" ry="2" />
<text  x="45.83" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (1 samples, 0.02%)</title><rect x="175.3" y="341" width="0.2" height="15.0" fill="rgb(229,91,16)" rx="2" ry="2" />
<text  x="178.29" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%)</title><rect x="879.0" y="437" width="0.4" height="15.0" fill="rgb(248,197,13)" rx="2" ry="2" />
<text  x="881.98" y="447.5" ></text>
</g>
<g >
<title>schema_mutations::partitioner (1 samples, 0.02%)</title><rect x="107.8" y="421" width="0.3" height="15.0" fill="rgb(207,10,27)" rx="2" ry="2" />
<text  x="110.83" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.2" y="565" width="0.2" height="15.0" fill="rgb(251,52,37)" rx="2" ry="2" />
<text  x="20.20" y="575.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_channel (1 samples, 0.02%)</title><rect x="29.3" y="293" width="0.3" height="15.0" fill="rgb(241,213,19)" rx="2" ry="2" />
<text  x="32.34" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="817.1" y="325" width="0.3" height="15.0" fill="rgb(205,28,5)" rx="2" ry="2" />
<text  x="820.13" y="335.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1133.1" y="229" width="0.2" height="15.0" fill="rgb(244,92,49)" rx="2" ry="2" />
<text  x="1136.10" y="239.5" ></text>
</g>
<g >
<title>row::row (4 samples, 0.08%)</title><rect x="284.8" y="229" width="0.9" height="15.0" fill="rgb(222,60,47)" rx="2" ry="2" />
<text  x="287.82" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.7" y="485" width="0.3" height="15.0" fill="rgb(206,33,3)" rx="2" ry="2" />
<text  x="19.75" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.5" y="229" width="0.2" height="15.0" fill="rgb(240,39,2)" rx="2" ry="2" />
<text  x="1123.51" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="854.5" y="341" width="0.2" height="15.0" fill="rgb(251,144,0)" rx="2" ry="2" />
<text  x="857.46" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="949.6" y="421" width="0.2" height="15.0" fill="rgb(243,72,29)" rx="2" ry="2" />
<text  x="952.59" y="431.5" ></text>
</g>
<g >
<title>libat_store_16_i1 (2 samples, 0.04%)</title><rect x="711.0" y="517" width="0.4" height="15.0" fill="rgb(228,120,30)" rx="2" ry="2" />
<text  x="713.98" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1023.6" y="293" width="0.4" height="15.0" fill="rgb(215,205,39)" rx="2" ry="2" />
<text  x="1026.58" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="58.6" y="357" width="0.2" height="15.0" fill="rgb(238,68,52)" rx="2" ry="2" />
<text  x="61.58" y="367.5" ></text>
</g>
<g >
<title>database::find_schema (10 samples, 0.19%)</title><rect x="752.8" y="421" width="2.3" height="15.0" fill="rgb(232,101,49)" rx="2" ry="2" />
<text  x="755.81" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="24.6" y="277" width="0.2" height="15.0" fill="rgb(229,87,16)" rx="2" ry="2" />
<text  x="27.62" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%)</title><rect x="71.4" y="373" width="0.2" height="15.0" fill="rgb(213,177,8)" rx="2" ry="2" />
<text  x="74.40" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.7" y="501" width="0.3" height="15.0" fill="rgb(247,79,54)" rx="2" ry="2" />
<text  x="19.75" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="553.3" y="357" width="1.2" height="15.0" fill="rgb(211,96,22)" rx="2" ry="2" />
<text  x="556.34" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (3 samples, 0.06%)</title><rect x="904.2" y="421" width="0.6" height="15.0" fill="rgb(236,3,12)" rx="2" ry="2" />
<text  x="907.16" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.2" y="277" width="0.3" height="15.0" fill="rgb(229,143,19)" rx="2" ry="2" />
<text  x="42.24" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (45 samples, 0.86%)</title><rect x="884.1" y="357" width="10.2" height="15.0" fill="rgb(223,209,16)" rx="2" ry="2" />
<text  x="887.15" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="928.9" y="437" width="0.2" height="15.0" fill="rgb(235,183,15)" rx="2" ry="2" />
<text  x="931.90" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="601.9" y="469" width="0.2" height="15.0" fill="rgb(251,36,51)" rx="2" ry="2" />
<text  x="604.91" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.2" y="261" width="0.2" height="15.0" fill="rgb(209,63,46)" rx="2" ry="2" />
<text  x="47.18" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="10.7" y="373" width="0.2" height="15.0" fill="rgb(240,82,45)" rx="2" ry="2" />
<text  x="13.67" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="653.0" y="469" width="0.4" height="15.0" fill="rgb(215,101,23)" rx="2" ry="2" />
<text  x="655.96" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1166.4" y="421" width="0.2" height="15.0" fill="rgb(221,143,46)" rx="2" ry="2" />
<text  x="1169.39" y="431.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1127.5" y="501" width="8.1" height="15.0" fill="rgb(253,161,29)" rx="2" ry="2" />
<text  x="1130.48" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (13 samples, 0.25%)</title><rect x="855.6" y="405" width="2.9" height="15.0" fill="rgb(243,119,51)" rx="2" ry="2" />
<text  x="858.59" y="415.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="20.6" y="517" width="0.2" height="15.0" fill="rgb(233,10,18)" rx="2" ry="2" />
<text  x="23.57" y="527.5" ></text>
</g>
<g >
<title>schema_registry::get (2 samples, 0.04%)</title><rect x="954.1" y="405" width="0.4" height="15.0" fill="rgb(214,216,36)" rx="2" ry="2" />
<text  x="957.09" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(236,128,6)" rx="2" ry="2" />
<text  x="13.67" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (427 samples, 8.14%)</title><rect x="190.6" y="341" width="96.0" height="15.0" fill="rgb(207,82,0)" rx="2" ry="2" />
<text  x="193.59" y="351.5" >partition_s..</text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (113 samples, 2.15%)</title><rect x="777.3" y="357" width="25.4" height="15.0" fill="rgb(250,191,54)" rx="2" ry="2" />
<text  x="780.33" y="367.5" >s..</text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="522.3" y="213" width="0.2" height="15.0" fill="rgb(245,203,25)" rx="2" ry="2" />
<text  x="525.30" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (5 samples, 0.10%)</title><rect x="895.2" y="357" width="1.1" height="15.0" fill="rgb(229,213,13)" rx="2" ry="2" />
<text  x="898.17" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="317.2" y="341" width="0.2" height="15.0" fill="rgb(215,38,33)" rx="2" ry="2" />
<text  x="320.20" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="955.0" y="405" width="0.2" height="15.0" fill="rgb(240,220,48)" rx="2" ry="2" />
<text  x="957.99" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (2 samples, 0.04%)</title><rect x="106.0" y="533" width="0.5" height="15.0" fill="rgb(221,4,49)" rx="2" ry="2" />
<text  x="109.03" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="785.4" y="197" width="0.5" height="15.0" fill="rgb(233,42,28)" rx="2" ry="2" />
<text  x="788.42" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (107 samples, 2.04%)</title><rect x="38.8" y="405" width="24.0" height="15.0" fill="rgb(207,155,26)" rx="2" ry="2" />
<text  x="41.79" y="415.5" >c..</text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (38 samples, 0.72%)</title><rect x="308.7" y="341" width="8.5" height="15.0" fill="rgb(217,180,46)" rx="2" ry="2" />
<text  x="311.65" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="662.4" y="453" width="0.5" height="15.0" fill="rgb(209,223,9)" rx="2" ry="2" />
<text  x="665.41" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="130.8" y="421" width="0.2" height="15.0" fill="rgb(210,222,46)" rx="2" ry="2" />
<text  x="133.77" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="810.8" y="405" width="0.7" height="15.0" fill="rgb(212,55,2)" rx="2" ry="2" />
<text  x="813.83" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="58.4" y="293" width="0.2" height="15.0" fill="rgb(216,4,44)" rx="2" ry="2" />
<text  x="61.35" y="303.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (3 samples, 0.06%)</title><rect x="855.6" y="325" width="0.7" height="15.0" fill="rgb(207,172,3)" rx="2" ry="2" />
<text  x="858.59" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="39.2" y="261" width="0.3" height="15.0" fill="rgb(253,60,27)" rx="2" ry="2" />
<text  x="42.24" y="271.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="711.7" y="485" width="0.2" height="15.0" fill="rgb(253,7,12)" rx="2" ry="2" />
<text  x="714.66" y="495.5" ></text>
</g>
<g >
<title>freeze (13 samples, 0.25%)</title><rect x="1129.7" y="229" width="3.0" height="15.0" fill="rgb(239,220,13)" rx="2" ry="2" />
<text  x="1132.73" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="852.4" y="389" width="0.3" height="15.0" fill="rgb(250,30,43)" rx="2" ry="2" />
<text  x="855.44" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="165" width="0.2" height="15.0" fill="rgb(250,134,48)" rx="2" ry="2" />
<text  x="57.08" y="175.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.6" y="165" width="0.2" height="15.0" fill="rgb(211,207,46)" rx="2" ry="2" />
<text  x="45.61" y="175.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (15 samples, 0.29%)</title><rect x="742.0" y="357" width="3.4" height="15.0" fill="rgb(224,141,17)" rx="2" ry="2" />
<text  x="745.02" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%)</title><rect x="79.9" y="437" width="0.3" height="15.0" fill="rgb(223,4,39)" rx="2" ry="2" />
<text  x="82.94" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.2" y="197" width="0.3" height="15.0" fill="rgb(227,54,46)" rx="2" ry="2" />
<text  x="60.23" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="239.6" y="133" width="0.5" height="15.0" fill="rgb(226,193,32)" rx="2" ry="2" />
<text  x="242.61" y="143.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="61.3" y="101" width="0.2" height="15.0" fill="rgb(239,19,13)" rx="2" ry="2" />
<text  x="64.28" y="111.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.8" y="165" width="0.2" height="15.0" fill="rgb(253,211,53)" rx="2" ry="2" />
<text  x="52.81" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (2 samples, 0.04%)</title><rect x="854.9" y="405" width="0.5" height="15.0" fill="rgb(240,91,4)" rx="2" ry="2" />
<text  x="857.91" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1152.7" y="405" width="0.6" height="15.0" fill="rgb(253,178,51)" rx="2" ry="2" />
<text  x="1155.67" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="82.4" y="405" width="0.2" height="15.0" fill="rgb(216,78,20)" rx="2" ry="2" />
<text  x="85.41" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="243.9" y="165" width="0.2" height="15.0" fill="rgb(249,181,37)" rx="2" ry="2" />
<text  x="246.89" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.1" y="549" width="0.2" height="15.0" fill="rgb(253,32,40)" rx="2" ry="2" />
<text  x="21.10" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="246.8" y="117" width="0.2" height="15.0" fill="rgb(234,44,46)" rx="2" ry="2" />
<text  x="249.81" y="127.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="1189.8" y="613" width="0.2" height="15.0" fill="rgb(211,190,15)" rx="2" ry="2" />
<text  x="1192.78" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (49 samples, 0.93%)</title><rect x="562.6" y="357" width="11.0" height="15.0" fill="rgb(216,123,1)" rx="2" ry="2" />
<text  x="565.56" y="367.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="79.7" y="485" width="0.2" height="15.0" fill="rgb(208,89,23)" rx="2" ry="2" />
<text  x="82.72" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="700.2" y="501" width="0.2" height="15.0" fill="rgb(207,161,29)" rx="2" ry="2" />
<text  x="703.19" y="511.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%)</title><rect x="1128.8" y="213" width="0.3" height="15.0" fill="rgb(234,36,12)" rx="2" ry="2" />
<text  x="1131.83" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="849.1" y="357" width="0.2" height="15.0" fill="rgb(209,111,23)" rx="2" ry="2" />
<text  x="852.07" y="367.5" ></text>
</g>
<g >
<title>database::find_schema (30 samples, 0.57%)</title><rect x="752.4" y="437" width="6.7" height="15.0" fill="rgb(225,39,31)" rx="2" ry="2" />
<text  x="755.36" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%)</title><rect x="790.6" y="165" width="0.4" height="15.0" fill="rgb(237,194,36)" rx="2" ry="2" />
<text  x="793.59" y="175.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.3" y="213" width="0.2" height="15.0" fill="rgb(237,159,16)" rx="2" ry="2" />
<text  x="64.28" y="223.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (25 samples, 0.48%)</title><rect x="495.5" y="277" width="5.7" height="15.0" fill="rgb(229,48,27)" rx="2" ry="2" />
<text  x="498.54" y="287.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (2 samples, 0.04%)</title><rect x="82.0" y="421" width="0.4" height="15.0" fill="rgb(230,122,14)" rx="2" ry="2" />
<text  x="84.96" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="294.5" y="325" width="0.2" height="15.0" fill="rgb(235,148,11)" rx="2" ry="2" />
<text  x="297.49" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="45.1" y="277" width="0.7" height="15.0" fill="rgb(219,21,44)" rx="2" ry="2" />
<text  x="48.08" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="440.4" y="389" width="0.3" height="15.0" fill="rgb(244,149,41)" rx="2" ry="2" />
<text  x="443.44" y="399.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (2 samples, 0.04%)</title><rect x="1115.8" y="437" width="0.4" height="15.0" fill="rgb(236,142,35)" rx="2" ry="2" />
<text  x="1118.79" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1161.7" y="501" width="0.2" height="15.0" fill="rgb(220,160,7)" rx="2" ry="2" />
<text  x="1164.66" y="511.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="895.4" y="341" width="0.9" height="15.0" fill="rgb(246,124,6)" rx="2" ry="2" />
<text  x="898.39" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (8 samples, 0.15%)</title><rect x="920.4" y="421" width="1.8" height="15.0" fill="rgb(224,122,0)" rx="2" ry="2" />
<text  x="923.36" y="431.5" ></text>
</g>
<g >
<title>log_heap_options::bucket_of (1 samples, 0.02%)</title><rect x="80.2" y="437" width="0.2" height="15.0" fill="rgb(226,170,48)" rx="2" ry="2" />
<text  x="83.17" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="796.4" y="213" width="0.3" height="15.0" fill="rgb(232,24,16)" rx="2" ry="2" />
<text  x="799.44" y="223.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="105.6" y="405" width="0.2" height="15.0" fill="rgb(211,219,44)" rx="2" ry="2" />
<text  x="108.58" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="105.8" y="485" width="0.2" height="15.0" fill="rgb(211,185,44)" rx="2" ry="2" />
<text  x="108.80" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1085.4" y="389" width="0.3" height="15.0" fill="rgb(221,189,12)" rx="2" ry="2" />
<text  x="1088.43" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (7 samples, 0.13%)</title><rect x="808.4" y="357" width="1.5" height="15.0" fill="rgb(230,75,47)" rx="2" ry="2" />
<text  x="811.36" y="367.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (1 samples, 0.02%)</title><rect x="1078.7" y="341" width="0.2" height="15.0" fill="rgb(226,69,23)" rx="2" ry="2" />
<text  x="1081.68" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="44.6" y="341" width="0.3" height="15.0" fill="rgb(241,169,49)" rx="2" ry="2" />
<text  x="47.63" y="351.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="616.5" y="405" width="1.8" height="15.0" fill="rgb(236,119,31)" rx="2" ry="2" />
<text  x="619.53" y="415.5" ></text>
</g>
<g >
<title>log_heap&lt;logalloc::segment_descriptor, logalloc::segment_descriptor_hist_options&gt;::adjust_up (1 samples, 0.02%)</title><rect x="80.2" y="453" width="0.2" height="15.0" fill="rgb(217,139,27)" rx="2" ry="2" />
<text  x="83.17" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%)</title><rect x="1144.1" y="517" width="1.6" height="15.0" fill="rgb(238,53,47)" rx="2" ry="2" />
<text  x="1147.12" y="527.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (10 samples, 0.19%)</title><rect x="346.2" y="213" width="2.3" height="15.0" fill="rgb(211,102,51)" rx="2" ry="2" />
<text  x="349.21" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="135.0" y="485" width="0.5" height="15.0" fill="rgb(232,22,51)" rx="2" ry="2" />
<text  x="138.04" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (1 samples, 0.02%)</title><rect x="79.0" y="517" width="0.3" height="15.0" fill="rgb(214,61,5)" rx="2" ry="2" />
<text  x="82.04" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1167.3" y="501" width="0.2" height="15.0" fill="rgb(225,9,49)" rx="2" ry="2" />
<text  x="1170.29" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="469" width="0.2" height="15.0" fill="rgb(245,87,1)" rx="2" ry="2" />
<text  x="1169.39" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="546.1" y="421" width="0.9" height="15.0" fill="rgb(245,184,0)" rx="2" ry="2" />
<text  x="549.14" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.1" y="197" width="0.5" height="15.0" fill="rgb(228,14,48)" rx="2" ry="2" />
<text  x="52.13" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="513.5" y="293" width="0.3" height="15.0" fill="rgb(247,171,49)" rx="2" ry="2" />
<text  x="516.53" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="821.6" y="453" width="0.3" height="15.0" fill="rgb(238,10,52)" rx="2" ry="2" />
<text  x="824.63" y="463.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="1124.3" y="245" width="0.3" height="15.0" fill="rgb(240,78,46)" rx="2" ry="2" />
<text  x="1127.33" y="255.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7 samples, 0.13%)</title><rect x="678.8" y="501" width="1.6" height="15.0" fill="rgb(233,184,42)" rx="2" ry="2" />
<text  x="681.82" y="511.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="105.6" y="341" width="0.2" height="15.0" fill="rgb(254,37,11)" rx="2" ry="2" />
<text  x="108.58" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="856.5" y="293" width="0.2" height="15.0" fill="rgb(206,77,34)" rx="2" ry="2" />
<text  x="859.49" y="303.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="106.7" y="485" width="0.2" height="15.0" fill="rgb(233,203,48)" rx="2" ry="2" />
<text  x="109.70" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="351.6" y="229" width="0.2" height="15.0" fill="rgb(226,209,3)" rx="2" ry="2" />
<text  x="354.61" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="661.1" y="517" width="0.9" height="15.0" fill="rgb(213,225,28)" rx="2" ry="2" />
<text  x="664.06" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="41.9" y="229" width="0.5" height="15.0" fill="rgb(250,120,21)" rx="2" ry="2" />
<text  x="44.93" y="239.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="858.1" y="341" width="0.2" height="15.0" fill="rgb(239,147,0)" rx="2" ry="2" />
<text  x="861.06" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1116.5" y="453" width="0.2" height="15.0" fill="rgb(235,8,49)" rx="2" ry="2" />
<text  x="1119.46" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="41.3" y="325" width="0.2" height="15.0" fill="rgb(205,172,21)" rx="2" ry="2" />
<text  x="44.26" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1057.3" y="325" width="0.2" height="15.0" fill="rgb(207,218,6)" rx="2" ry="2" />
<text  x="1060.31" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="655.0" y="469" width="0.4" height="15.0" fill="rgb(207,99,21)" rx="2" ry="2" />
<text  x="657.99" y="479.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%)</title><rect x="26.0" y="309" width="0.2" height="15.0" fill="rgb(225,50,34)" rx="2" ry="2" />
<text  x="28.97" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="77.7" y="485" width="0.2" height="15.0" fill="rgb(229,63,17)" rx="2" ry="2" />
<text  x="80.69" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%)</title><rect x="753.5" y="405" width="1.6" height="15.0" fill="rgb(220,187,34)" rx="2" ry="2" />
<text  x="756.49" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="183.6" y="277" width="0.2" height="15.0" fill="rgb(234,14,35)" rx="2" ry="2" />
<text  x="186.62" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1132.9" y="213" width="0.2" height="15.0" fill="rgb(207,221,10)" rx="2" ry="2" />
<text  x="1135.88" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="42.6" y="229" width="0.5" height="15.0" fill="rgb(227,126,11)" rx="2" ry="2" />
<text  x="45.61" y="239.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="18.5" y="325" width="0.3" height="15.0" fill="rgb(247,22,45)" rx="2" ry="2" />
<text  x="21.55" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="551.5" y="373" width="0.3" height="15.0" fill="rgb(239,103,32)" rx="2" ry="2" />
<text  x="554.54" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="1089.0" y="421" width="0.9" height="15.0" fill="rgb(236,184,51)" rx="2" ry="2" />
<text  x="1092.02" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="924.6" y="373" width="0.3" height="15.0" fill="rgb(246,217,41)" rx="2" ry="2" />
<text  x="927.63" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="537.6" y="341" width="0.2" height="15.0" fill="rgb(211,67,10)" rx="2" ry="2" />
<text  x="540.59" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::read_table_names_of_keyspace (1 samples, 0.02%)</title><rect x="105.8" y="501" width="0.2" height="15.0" fill="rgb(225,139,18)" rx="2" ry="2" />
<text  x="108.80" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="523.4" y="277" width="0.2" height="15.0" fill="rgb(236,83,2)" rx="2" ry="2" />
<text  x="526.42" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="854.7" y="389" width="0.2" height="15.0" fill="rgb(254,186,39)" rx="2" ry="2" />
<text  x="857.69" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="254.9" y="197" width="0.2" height="15.0" fill="rgb(227,61,29)" rx="2" ry="2" />
<text  x="257.91" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (350 samples, 6.67%)</title><rect x="340.6" y="277" width="78.7" height="15.0" fill="rgb(213,30,13)" rx="2" ry="2" />
<text  x="343.59" y="287.5" >flat_muta..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="640.8" y="517" width="0.7" height="15.0" fill="rgb(245,176,7)" rx="2" ry="2" />
<text  x="643.82" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.13%)</title><rect x="964.2" y="357" width="1.6" height="15.0" fill="rgb(206,81,42)" rx="2" ry="2" />
<text  x="967.21" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="721.1" y="485" width="0.2" height="15.0" fill="rgb(251,105,22)" rx="2" ry="2" />
<text  x="724.10" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::back (1 samples, 0.02%)</title><rect x="49.6" y="309" width="0.2" height="15.0" fill="rgb(214,75,12)" rx="2" ry="2" />
<text  x="52.58" y="319.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="983.6" y="293" width="1.7" height="15.0" fill="rgb(220,20,54)" rx="2" ry="2" />
<text  x="986.55" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="655.4" y="485" width="0.3" height="15.0" fill="rgb(219,89,32)" rx="2" ry="2" />
<text  x="658.44" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="49.8" y="213" width="0.2" height="15.0" fill="rgb(242,11,49)" rx="2" ry="2" />
<text  x="52.81" y="223.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.17%)</title><rect x="42.4" y="341" width="2.0" height="15.0" fill="rgb(229,160,32)" rx="2" ry="2" />
<text  x="45.38" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="671.9" y="485" width="1.1" height="15.0" fill="rgb(235,158,36)" rx="2" ry="2" />
<text  x="674.85" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="739.3" y="389" width="0.7" height="15.0" fill="rgb(233,140,37)" rx="2" ry="2" />
<text  x="742.32" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="554.5" y="421" width="0.2" height="15.0" fill="rgb(219,180,39)" rx="2" ry="2" />
<text  x="557.46" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.3" y="245" width="0.2" height="15.0" fill="rgb(223,170,48)" rx="2" ry="2" />
<text  x="64.28" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="39.2" y="293" width="0.3" height="15.0" fill="rgb(234,98,14)" rx="2" ry="2" />
<text  x="42.24" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="549.5" y="437" width="0.2" height="15.0" fill="rgb(218,30,16)" rx="2" ry="2" />
<text  x="552.51" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.10%)</title><rect x="791.7" y="149" width="1.1" height="15.0" fill="rgb(224,80,24)" rx="2" ry="2" />
<text  x="794.72" y="159.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="11.1" y="629" width="0.2" height="15.0" fill="rgb(234,119,4)" rx="2" ry="2" />
<text  x="14.12" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (37 samples, 0.71%)</title><rect x="850.6" y="485" width="8.4" height="15.0" fill="rgb(224,184,12)" rx="2" ry="2" />
<text  x="853.64" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.1" y="485" width="0.2" height="15.0" fill="rgb(228,35,35)" rx="2" ry="2" />
<text  x="677.10" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="438.4" y="405" width="0.2" height="15.0" fill="rgb(246,170,51)" rx="2" ry="2" />
<text  x="441.42" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="82.0" y="341" width="0.2" height="15.0" fill="rgb(211,162,39)" rx="2" ry="2" />
<text  x="84.96" y="351.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="1107.0" y="453" width="0.9" height="15.0" fill="rgb(231,198,46)" rx="2" ry="2" />
<text  x="1110.02" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.2" y="613" width="0.2" height="15.0" fill="rgb(210,49,12)" rx="2" ry="2" />
<text  x="83.17" y="623.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="105.6" y="453" width="0.2" height="15.0" fill="rgb(221,60,26)" rx="2" ry="2" />
<text  x="108.58" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="686.7" y="309" width="0.2" height="15.0" fill="rgb(218,53,24)" rx="2" ry="2" />
<text  x="689.70" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="445.4" y="421" width="0.2" height="15.0" fill="rgb(241,114,38)" rx="2" ry="2" />
<text  x="448.39" y="431.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (165 samples, 3.14%)</title><rect x="770.6" y="389" width="37.1" height="15.0" fill="rgb(245,198,49)" rx="2" ry="2" />
<text  x="773.58" y="399.5" >ser..</text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (7 samples, 0.13%)</title><rect x="896.3" y="357" width="1.6" height="15.0" fill="rgb(247,204,51)" rx="2" ry="2" />
<text  x="899.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="187.7" y="277" width="0.6" height="15.0" fill="rgb(245,70,31)" rx="2" ry="2" />
<text  x="190.66" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1021.1" y="229" width="0.2" height="15.0" fill="rgb(241,142,26)" rx="2" ry="2" />
<text  x="1024.11" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="801.8" y="325" width="0.9" height="15.0" fill="rgb(250,101,18)" rx="2" ry="2" />
<text  x="804.84" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (2 samples, 0.04%)</title><rect x="570.0" y="325" width="0.4" height="15.0" fill="rgb(252,207,30)" rx="2" ry="2" />
<text  x="572.98" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (4 samples, 0.08%)</title><rect x="726.7" y="373" width="0.9" height="15.0" fill="rgb(218,220,7)" rx="2" ry="2" />
<text  x="729.73" y="383.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="899.7" y="389" width="1.1" height="15.0" fill="rgb(215,88,42)" rx="2" ry="2" />
<text  x="902.67" y="399.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%)</title><rect x="106.9" y="533" width="1.2" height="15.0" fill="rgb(243,121,14)" rx="2" ry="2" />
<text  x="109.93" y="543.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="537.1" y="309" width="0.3" height="15.0" fill="rgb(207,142,10)" rx="2" ry="2" />
<text  x="540.14" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="883.5" y="341" width="0.2" height="15.0" fill="rgb(226,127,14)" rx="2" ry="2" />
<text  x="886.47" y="351.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (4 samples, 0.08%)</title><rect x="1125.9" y="325" width="0.9" height="15.0" fill="rgb(219,14,47)" rx="2" ry="2" />
<text  x="1128.91" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="519.6" y="245" width="0.2" height="15.0" fill="rgb(218,228,10)" rx="2" ry="2" />
<text  x="522.60" y="255.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (2 samples, 0.04%)</title><rect x="827.0" y="469" width="0.5" height="15.0" fill="rgb(211,149,44)" rx="2" ry="2" />
<text  x="830.03" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="42.4" y="293" width="0.7" height="15.0" fill="rgb(253,35,45)" rx="2" ry="2" />
<text  x="45.38" y="303.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (105 samples, 2.00%)</title><rect x="504.5" y="357" width="23.6" height="15.0" fill="rgb(205,18,15)" rx="2" ry="2" />
<text  x="507.53" y="367.5" >m..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="686.2" y="357" width="0.7" height="15.0" fill="rgb(233,151,22)" rx="2" ry="2" />
<text  x="689.25" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.1" y="101" width="0.2" height="15.0" fill="rgb(249,66,47)" rx="2" ry="2" />
<text  x="57.08" y="111.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%)</title><rect x="1090.1" y="437" width="0.5" height="15.0" fill="rgb(217,57,36)" rx="2" ry="2" />
<text  x="1093.15" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="1166.4" y="341" width="0.2" height="15.0" fill="rgb(230,178,33)" rx="2" ry="2" />
<text  x="1169.39" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="1124.3" y="229" width="0.3" height="15.0" fill="rgb(233,224,26)" rx="2" ry="2" />
<text  x="1127.33" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (5 samples, 0.10%)</title><rect x="851.3" y="389" width="1.1" height="15.0" fill="rgb(225,204,12)" rx="2" ry="2" />
<text  x="854.32" y="399.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="1136.9" y="277" width="0.3" height="15.0" fill="rgb(216,111,48)" rx="2" ry="2" />
<text  x="1139.93" y="287.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (8 samples, 0.15%)</title><rect x="338.8" y="261" width="1.8" height="15.0" fill="rgb(219,189,2)" rx="2" ry="2" />
<text  x="341.79" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (8 samples, 0.15%)</title><rect x="467.2" y="293" width="1.8" height="15.0" fill="rgb(241,119,36)" rx="2" ry="2" />
<text  x="470.20" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="557.6" y="453" width="0.5" height="15.0" fill="rgb(208,163,53)" rx="2" ry="2" />
<text  x="560.61" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="79.7" y="597" width="0.2" height="15.0" fill="rgb(249,186,26)" rx="2" ry="2" />
<text  x="82.72" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="442.9" y="437" width="0.2" height="15.0" fill="rgb(231,0,24)" rx="2" ry="2" />
<text  x="445.91" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (11 samples, 0.21%)</title><rect x="881.7" y="357" width="2.4" height="15.0" fill="rgb(234,92,7)" rx="2" ry="2" />
<text  x="884.68" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="660.6" y="517" width="0.2" height="15.0" fill="rgb(224,23,1)" rx="2" ry="2" />
<text  x="663.61" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="633.2" y="517" width="1.1" height="15.0" fill="rgb(220,114,46)" rx="2" ry="2" />
<text  x="636.17" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (471 samples, 8.98%)</title><rect x="443.1" y="453" width="106.0" height="15.0" fill="rgb(238,179,22)" rx="2" ry="2" />
<text  x="446.14" y="463.5" >query::queri..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (33 samples, 0.63%)</title><rect x="612.3" y="469" width="7.4" height="15.0" fill="rgb(214,225,44)" rx="2" ry="2" />
<text  x="615.26" y="479.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.8" y="245" width="0.2" height="15.0" fill="rgb(229,121,36)" rx="2" ry="2" />
<text  x="1127.78" y="255.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="39.5" y="229" width="0.6" height="15.0" fill="rgb(225,118,26)" rx="2" ry="2" />
<text  x="42.46" y="239.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="81.3" y="437" width="0.4" height="15.0" fill="rgb(224,173,42)" rx="2" ry="2" />
<text  x="84.29" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (3 samples, 0.06%)</title><rect x="1131.5" y="149" width="0.7" height="15.0" fill="rgb(254,149,30)" rx="2" ry="2" />
<text  x="1134.53" y="159.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%)</title><rect x="80.6" y="469" width="0.5" height="15.0" fill="rgb(209,29,17)" rx="2" ry="2" />
<text  x="83.62" y="479.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (44 samples, 0.84%)</title><rect x="122.4" y="485" width="9.9" height="15.0" fill="rgb(218,17,39)" rx="2" ry="2" />
<text  x="125.45" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="505.4" y="325" width="0.7" height="15.0" fill="rgb(239,197,19)" rx="2" ry="2" />
<text  x="508.43" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="848.8" y="421" width="0.5" height="15.0" fill="rgb(214,107,0)" rx="2" ry="2" />
<text  x="851.84" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="419.8" y="261" width="0.2" height="15.0" fill="rgb(245,144,18)" rx="2" ry="2" />
<text  x="422.75" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="1099.1" y="421" width="0.5" height="15.0" fill="rgb(232,97,39)" rx="2" ry="2" />
<text  x="1102.14" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (4 samples, 0.08%)</title><rect x="727.9" y="421" width="0.8" height="15.0" fill="rgb(244,142,26)" rx="2" ry="2" />
<text  x="730.85" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (2 samples, 0.04%)</title><rect x="935.2" y="421" width="0.4" height="15.0" fill="rgb(206,142,27)" rx="2" ry="2" />
<text  x="938.20" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="551.8" y="405" width="0.2" height="15.0" fill="rgb(218,149,35)" rx="2" ry="2" />
<text  x="554.76" y="415.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="381.7" y="197" width="0.3" height="15.0" fill="rgb(224,10,51)" rx="2" ry="2" />
<text  x="384.74" y="207.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="18.5" y="565" width="0.5" height="15.0" fill="rgb(246,111,3)" rx="2" ry="2" />
<text  x="21.55" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::operator= (2 samples, 0.04%)</title><rect x="54.5" y="309" width="0.5" height="15.0" fill="rgb(236,163,8)" rx="2" ry="2" />
<text  x="57.53" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1108.6" y="437" width="0.2" height="15.0" fill="rgb(224,196,43)" rx="2" ry="2" />
<text  x="1111.59" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="55.2" y="245" width="0.9" height="15.0" fill="rgb(219,213,54)" rx="2" ry="2" />
<text  x="58.20" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1133.6" y="149" width="0.2" height="15.0" fill="rgb(213,216,15)" rx="2" ry="2" />
<text  x="1136.55" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="104.9" y="517" width="0.2" height="15.0" fill="rgb(240,165,16)" rx="2" ry="2" />
<text  x="107.90" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="113.2" y="501" width="0.2" height="15.0" fill="rgb(253,80,41)" rx="2" ry="2" />
<text  x="116.22" y="511.5" ></text>
</g>
<g >
<title>memtable::apply (24 samples, 0.46%)</title><rect x="1120.1" y="293" width="5.4" height="15.0" fill="rgb(247,209,46)" rx="2" ry="2" />
<text  x="1123.06" y="303.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1125.9" y="261" width="0.2" height="15.0" fill="rgb(235,166,19)" rx="2" ry="2" />
<text  x="1128.91" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="611.8" y="469" width="0.2" height="15.0" fill="rgb(222,65,46)" rx="2" ry="2" />
<text  x="614.81" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="52.5" y="309" width="0.2" height="15.0" fill="rgb(232,56,40)" rx="2" ry="2" />
<text  x="55.50" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="62.4" y="389" width="0.2" height="15.0" fill="rgb(220,208,37)" rx="2" ry="2" />
<text  x="65.40" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (11 samples, 0.21%)</title><rect x="696.6" y="517" width="2.5" height="15.0" fill="rgb(247,148,9)" rx="2" ry="2" />
<text  x="699.59" y="527.5" ></text>
</g>
<g >
<title>validation::validate_column_family (37 samples, 0.71%)</title><rect x="811.7" y="421" width="8.4" height="15.0" fill="rgb(211,171,0)" rx="2" ry="2" />
<text  x="814.73" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.13%)</title><rect x="666.2" y="517" width="1.6" height="15.0" fill="rgb(214,193,44)" rx="2" ry="2" />
<text  x="669.23" y="527.5" ></text>
</g>
<g >
<title>schema_mutations::digest (1 samples, 0.02%)</title><rect x="105.4" y="437" width="0.2" height="15.0" fill="rgb(237,33,25)" rx="2" ry="2" />
<text  x="108.35" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::set_promise (1 samples, 0.02%)</title><rect x="849.5" y="485" width="0.2" height="15.0" fill="rgb(254,166,45)" rx="2" ry="2" />
<text  x="852.52" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="18.5" y="341" width="0.3" height="15.0" fill="rgb(220,20,54)" rx="2" ry="2" />
<text  x="21.55" y="351.5" ></text>
</g>
</g>
</svg>
