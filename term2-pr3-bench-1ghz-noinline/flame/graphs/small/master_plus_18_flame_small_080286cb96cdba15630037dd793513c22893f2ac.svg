<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.4" y="245" width="0.2" height="15.0" fill="rgb(209,165,51)" rx="2" ry="2" />
<text  x="1127.39" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%)</title><rect x="27.5" y="277" width="0.2" height="15.0" fill="rgb(225,225,12)" rx="2" ry="2" />
<text  x="30.48" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (18 samples, 0.35%)</title><rect x="767.1" y="389" width="4.1" height="15.0" fill="rgb(218,73,47)" rx="2" ry="2" />
<text  x="770.08" y="399.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="535.1" y="261" width="0.4" height="15.0" fill="rgb(209,97,11)" rx="2" ry="2" />
<text  x="538.08" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="917.1" y="389" width="0.3" height="15.0" fill="rgb(233,90,54)" rx="2" ry="2" />
<text  x="920.13" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="540.5" y="357" width="0.5" height="15.0" fill="rgb(231,104,36)" rx="2" ry="2" />
<text  x="543.52" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="107.8" y="517" width="0.3" height="15.0" fill="rgb(209,177,16)" rx="2" ry="2" />
<text  x="110.84" y="527.5" ></text>
</g>
<g >
<title>do_with_cql_env_thread (1 samples, 0.02%)</title><rect x="723.0" y="453" width="0.3" height="15.0" fill="rgb(232,192,52)" rx="2" ry="2" />
<text  x="726.04" y="463.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="657.0" y="453" width="0.2" height="15.0" fill="rgb(238,182,47)" rx="2" ry="2" />
<text  x="659.98" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="38.8" y="405" width="0.3" height="15.0" fill="rgb(247,0,27)" rx="2" ry="2" />
<text  x="41.83" y="415.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (20 samples, 0.38%)</title><rect x="847.4" y="453" width="4.6" height="15.0" fill="rgb(236,67,22)" rx="2" ry="2" />
<text  x="850.44" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="422.7" y="165" width="1.1" height="15.0" fill="rgb(211,12,19)" rx="2" ry="2" />
<text  x="425.70" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="670.4" y="405" width="0.4" height="15.0" fill="rgb(245,65,23)" rx="2" ry="2" />
<text  x="673.37" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="428.2" y="197" width="0.2" height="15.0" fill="rgb(217,203,21)" rx="2" ry="2" />
<text  x="431.15" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="562.5" y="421" width="1.2" height="15.0" fill="rgb(214,21,17)" rx="2" ry="2" />
<text  x="565.54" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="17.9" y="341" width="0.3" height="15.0" fill="rgb(215,196,8)" rx="2" ry="2" />
<text  x="20.95" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%)</title><rect x="764.4" y="405" width="1.8" height="15.0" fill="rgb(235,87,8)" rx="2" ry="2" />
<text  x="767.36" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (24 samples, 0.46%)</title><rect x="272.4" y="261" width="5.5" height="15.0" fill="rgb(213,194,20)" rx="2" ry="2" />
<text  x="275.42" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (63 samples, 1.21%)</title><rect x="24.5" y="405" width="14.3" height="15.0" fill="rgb(227,221,11)" rx="2" ry="2" />
<text  x="27.53" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (59 samples, 1.14%)</title><rect x="894.0" y="405" width="13.4" height="15.0" fill="rgb(207,173,35)" rx="2" ry="2" />
<text  x="896.98" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="788.9" y="309" width="0.2" height="15.0" fill="rgb(226,148,45)" rx="2" ry="2" />
<text  x="791.87" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (8 samples, 0.15%)</title><rect x="614.3" y="437" width="1.8" height="15.0" fill="rgb(215,152,18)" rx="2" ry="2" />
<text  x="617.30" y="447.5" ></text>
</g>
<g >
<title>schema_registry::get (1 samples, 0.02%)</title><rect x="960.7" y="405" width="0.2" height="15.0" fill="rgb(249,203,3)" rx="2" ry="2" />
<text  x="963.72" y="415.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1122.4" y="261" width="0.4" height="15.0" fill="rgb(253,116,25)" rx="2" ry="2" />
<text  x="1125.35" y="271.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (21 samples, 0.40%)</title><rect x="321.2" y="341" width="4.8" height="15.0" fill="rgb(214,47,44)" rx="2" ry="2" />
<text  x="324.23" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (10 samples, 0.19%)</title><rect x="804.3" y="181" width="2.3" height="15.0" fill="rgb(254,185,1)" rx="2" ry="2" />
<text  x="807.31" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="106.0" y="469" width="0.3" height="15.0" fill="rgb(207,73,32)" rx="2" ry="2" />
<text  x="109.03" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="61.8" y="325" width="0.4" height="15.0" fill="rgb(237,216,31)" rx="2" ry="2" />
<text  x="64.76" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (4 samples, 0.08%)</title><rect x="1148.7" y="453" width="0.9" height="15.0" fill="rgb(238,195,42)" rx="2" ry="2" />
<text  x="1151.68" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="453.6" y="373" width="0.9" height="15.0" fill="rgb(233,88,13)" rx="2" ry="2" />
<text  x="456.58" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="210.7" y="229" width="0.2" height="15.0" fill="rgb(239,95,1)" rx="2" ry="2" />
<text  x="213.68" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.4" y="165" width="0.2" height="15.0" fill="rgb(254,14,33)" rx="2" ry="2" />
<text  x="48.41" y="175.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1163.7" y="453" width="0.4" height="15.0" fill="rgb(230,162,49)" rx="2" ry="2" />
<text  x="1166.67" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="63.1" y="277" width="0.2" height="15.0" fill="rgb(248,154,41)" rx="2" ry="2" />
<text  x="66.12" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1106.2" y="453" width="0.3" height="15.0" fill="rgb(250,3,18)" rx="2" ry="2" />
<text  x="1109.23" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1133.5" y="373" width="0.4" height="15.0" fill="rgb(235,155,25)" rx="2" ry="2" />
<text  x="1136.47" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="722.8" y="453" width="0.2" height="15.0" fill="rgb(218,118,6)" rx="2" ry="2" />
<text  x="725.81" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="549.6" y="373" width="0.2" height="15.0" fill="rgb(206,151,28)" rx="2" ry="2" />
<text  x="552.60" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="563.7" y="437" width="0.2" height="15.0" fill="rgb(216,138,5)" rx="2" ry="2" />
<text  x="566.68" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (9 samples, 0.17%)</title><rect x="688.3" y="517" width="2.1" height="15.0" fill="rgb(235,179,51)" rx="2" ry="2" />
<text  x="691.31" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="161.9" y="421" width="0.2" height="15.0" fill="rgb(236,58,51)" rx="2" ry="2" />
<text  x="164.87" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.8" y="165" width="0.2" height="15.0" fill="rgb(230,5,42)" rx="2" ry="2" />
<text  x="44.78" y="175.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="615.4" y="405" width="0.5" height="15.0" fill="rgb(250,68,30)" rx="2" ry="2" />
<text  x="618.44" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (14 samples, 0.27%)</title><rect x="896.2" y="341" width="3.2" height="15.0" fill="rgb(211,138,35)" rx="2" ry="2" />
<text  x="899.25" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="109.2" y="405" width="0.2" height="15.0" fill="rgb(214,160,0)" rx="2" ry="2" />
<text  x="112.20" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::expr::expression&gt;::allocate (1 samples, 0.02%)</title><rect x="74.5" y="261" width="0.2" height="15.0" fill="rgb(208,102,54)" rx="2" ry="2" />
<text  x="77.47" y="271.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="223.8" y="229" width="0.3" height="15.0" fill="rgb(228,219,8)" rx="2" ry="2" />
<text  x="226.84" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="879.7" y="485" width="0.2" height="15.0" fill="rgb(240,126,34)" rx="2" ry="2" />
<text  x="882.68" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%)</title><rect x="477.0" y="293" width="0.2" height="15.0" fill="rgb(208,193,21)" rx="2" ry="2" />
<text  x="479.96" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="45.9" y="229" width="0.2" height="15.0" fill="rgb(253,182,3)" rx="2" ry="2" />
<text  x="48.87" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (19 samples, 0.37%)</title><rect x="302.6" y="325" width="4.3" height="15.0" fill="rgb(214,102,50)" rx="2" ry="2" />
<text  x="305.62" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="44.5" y="325" width="0.7" height="15.0" fill="rgb(210,158,35)" rx="2" ry="2" />
<text  x="47.51" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,739 samples, 91.17%)</title><rect x="90.1" y="549" width="1075.8" height="15.0" fill="rgb(248,29,34)" rx="2" ry="2" />
<text  x="93.13" y="559.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (10 samples, 0.19%)</title><rect x="159.8" y="453" width="2.3" height="15.0" fill="rgb(245,161,14)" rx="2" ry="2" />
<text  x="162.83" y="463.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1075.4" y="325" width="0.6" height="15.0" fill="rgb(246,202,54)" rx="2" ry="2" />
<text  x="1078.36" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.08%)</title><rect x="43.6" y="309" width="0.9" height="15.0" fill="rgb(238,20,10)" rx="2" ry="2" />
<text  x="46.60" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.13%)</title><rect x="309.4" y="357" width="1.6" height="15.0" fill="rgb(206,180,8)" rx="2" ry="2" />
<text  x="312.43" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="547.8" y="357" width="0.4" height="15.0" fill="rgb(208,195,38)" rx="2" ry="2" />
<text  x="550.79" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="571.4" y="373" width="0.9" height="15.0" fill="rgb(251,213,47)" rx="2" ry="2" />
<text  x="574.40" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (3 samples, 0.06%)</title><rect x="747.8" y="357" width="0.7" height="15.0" fill="rgb(212,68,23)" rx="2" ry="2" />
<text  x="750.78" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="136.7" y="421" width="0.2" height="15.0" fill="rgb(214,11,0)" rx="2" ry="2" />
<text  x="139.67" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.12%)</title><rect x="343.0" y="325" width="1.4" height="15.0" fill="rgb(205,222,19)" rx="2" ry="2" />
<text  x="346.02" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%)</title><rect x="771.2" y="437" width="0.4" height="15.0" fill="rgb(245,30,31)" rx="2" ry="2" />
<text  x="774.17" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mU (1 samples, 0.02%)</title><rect x="36.3" y="293" width="0.3" height="15.0" fill="rgb(247,190,17)" rx="2" ry="2" />
<text  x="39.33" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="723.0" y="485" width="0.3" height="15.0" fill="rgb(220,227,10)" rx="2" ry="2" />
<text  x="726.04" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (12 samples, 0.23%)</title><rect x="736.4" y="357" width="2.8" height="15.0" fill="rgb(214,90,37)" rx="2" ry="2" />
<text  x="739.43" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="684.9" y="469" width="0.5" height="15.0" fill="rgb(221,210,1)" rx="2" ry="2" />
<text  x="687.90" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.5" y="197" width="0.2" height="15.0" fill="rgb(252,32,8)" rx="2" ry="2" />
<text  x="798.46" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="443.4" y="293" width="0.2" height="15.0" fill="rgb(214,117,50)" rx="2" ry="2" />
<text  x="446.36" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (12 samples, 0.23%)</title><rect x="871.5" y="373" width="2.7" height="15.0" fill="rgb(206,76,52)" rx="2" ry="2" />
<text  x="874.50" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="990.9" y="357" width="0.2" height="15.0" fill="rgb(242,215,27)" rx="2" ry="2" />
<text  x="993.91" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (2 samples, 0.04%)</title><rect x="660.6" y="405" width="0.5" height="15.0" fill="rgb(220,195,52)" rx="2" ry="2" />
<text  x="663.61" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="904.2" y="389" width="0.2" height="15.0" fill="rgb(234,25,42)" rx="2" ry="2" />
<text  x="907.19" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="26.3" y="293" width="1.6" height="15.0" fill="rgb(209,169,29)" rx="2" ry="2" />
<text  x="29.34" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="590.7" y="325" width="0.2" height="15.0" fill="rgb(212,132,29)" rx="2" ry="2" />
<text  x="593.69" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (435 samples, 8.37%)</title><rect x="202.7" y="341" width="98.8" height="15.0" fill="rgb(218,200,15)" rx="2" ry="2" />
<text  x="205.73" y="351.5" >partition_s..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="57.9" y="117" width="0.2" height="15.0" fill="rgb(213,226,53)" rx="2" ry="2" />
<text  x="60.90" y="127.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="580.0" y="325" width="0.3" height="15.0" fill="rgb(207,15,11)" rx="2" ry="2" />
<text  x="583.02" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="827.2" y="309" width="0.3" height="15.0" fill="rgb(223,128,24)" rx="2" ry="2" />
<text  x="830.24" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="559.4" y="341" width="0.2" height="15.0" fill="rgb(225,60,26)" rx="2" ry="2" />
<text  x="562.37" y="351.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="890.8" y="437" width="0.2" height="15.0" fill="rgb(253,107,5)" rx="2" ry="2" />
<text  x="893.80" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="461.8" y="389" width="0.2" height="15.0" fill="rgb(248,61,3)" rx="2" ry="2" />
<text  x="464.75" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="798.2" y="197" width="0.2" height="15.0" fill="rgb(238,8,12)" rx="2" ry="2" />
<text  x="801.18" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="206.1" y="277" width="0.7" height="15.0" fill="rgb(254,173,43)" rx="2" ry="2" />
<text  x="209.14" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="635.4" y="469" width="0.2" height="15.0" fill="rgb(240,206,27)" rx="2" ry="2" />
<text  x="638.41" y="479.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="731.9" y="485" width="0.2" height="15.0" fill="rgb(245,54,21)" rx="2" ry="2" />
<text  x="734.89" y="495.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="139.4" y="485" width="0.2" height="15.0" fill="rgb(232,186,34)" rx="2" ry="2" />
<text  x="142.40" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="56.5" y="277" width="1.6" height="15.0" fill="rgb(240,97,32)" rx="2" ry="2" />
<text  x="59.54" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="660.6" y="389" width="0.5" height="15.0" fill="rgb(215,154,23)" rx="2" ry="2" />
<text  x="663.61" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1037.2" y="229" width="0.2" height="15.0" fill="rgb(246,94,16)" rx="2" ry="2" />
<text  x="1040.22" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="837.0" y="453" width="1.8" height="15.0" fill="rgb(224,121,13)" rx="2" ry="2" />
<text  x="840.00" y="463.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (13 samples, 0.25%)</title><rect x="541.4" y="357" width="3.0" height="15.0" fill="rgb(240,166,12)" rx="2" ry="2" />
<text  x="544.43" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (3 samples, 0.06%)</title><rect x="74.2" y="309" width="0.7" height="15.0" fill="rgb(247,24,10)" rx="2" ry="2" />
<text  x="77.24" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="42.7" y="357" width="0.2" height="15.0" fill="rgb(253,134,19)" rx="2" ry="2" />
<text  x="45.69" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (5 samples, 0.10%)</title><rect x="85.6" y="469" width="1.1" height="15.0" fill="rgb(231,3,22)" rx="2" ry="2" />
<text  x="88.59" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (1 samples, 0.02%)</title><rect x="522.8" y="325" width="0.2" height="15.0" fill="rgb(225,0,35)" rx="2" ry="2" />
<text  x="525.82" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="845.9" y="453" width="0.2" height="15.0" fill="rgb(225,228,21)" rx="2" ry="2" />
<text  x="848.85" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.1" y="293" width="0.4" height="15.0" fill="rgb(246,171,38)" rx="2" ry="2" />
<text  x="47.05" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1021.6" y="229" width="0.2" height="15.0" fill="rgb(247,134,25)" rx="2" ry="2" />
<text  x="1024.56" y="239.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="217.7" y="245" width="0.7" height="15.0" fill="rgb(207,116,49)" rx="2" ry="2" />
<text  x="220.71" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="901.7" y="341" width="0.5" height="15.0" fill="rgb(210,114,1)" rx="2" ry="2" />
<text  x="904.70" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="798.0" y="213" width="0.4" height="15.0" fill="rgb(246,69,35)" rx="2" ry="2" />
<text  x="800.95" y="223.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="109.7" y="501" width="0.2" height="15.0" fill="rgb(245,175,33)" rx="2" ry="2" />
<text  x="112.66" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="841.3" y="437" width="3.4" height="15.0" fill="rgb(228,143,51)" rx="2" ry="2" />
<text  x="844.31" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%)</title><rect x="279.5" y="261" width="0.4" height="15.0" fill="rgb(230,11,48)" rx="2" ry="2" />
<text  x="282.46" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="106.0" y="485" width="0.3" height="15.0" fill="rgb(208,151,42)" rx="2" ry="2" />
<text  x="109.03" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1128.0" y="165" width="0.3" height="15.0" fill="rgb(234,217,12)" rx="2" ry="2" />
<text  x="1131.03" y="175.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="569.4" y="373" width="0.2" height="15.0" fill="rgb(233,16,34)" rx="2" ry="2" />
<text  x="572.35" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1056.1" y="357" width="0.2" height="15.0" fill="rgb(206,182,49)" rx="2" ry="2" />
<text  x="1059.06" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="58.1" y="293" width="0.3" height="15.0" fill="rgb(227,81,7)" rx="2" ry="2" />
<text  x="61.13" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1054.5" y="309" width="0.2" height="15.0" fill="rgb(234,149,20)" rx="2" ry="2" />
<text  x="1057.47" y="319.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.10%)</title><rect x="761.6" y="405" width="1.2" height="15.0" fill="rgb(229,39,44)" rx="2" ry="2" />
<text  x="764.63" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (42 samples, 0.81%)</title><rect x="69.2" y="501" width="9.6" height="15.0" fill="rgb(241,172,13)" rx="2" ry="2" />
<text  x="72.25" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (7 samples, 0.13%)</title><rect x="605.9" y="453" width="1.6" height="15.0" fill="rgb(250,122,54)" rx="2" ry="2" />
<text  x="608.90" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="677.9" y="469" width="0.2" height="15.0" fill="rgb(225,194,38)" rx="2" ry="2" />
<text  x="680.86" y="479.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (7 samples, 0.13%)</title><rect x="999.1" y="309" width="1.6" height="15.0" fill="rgb(223,169,27)" rx="2" ry="2" />
<text  x="1002.08" y="319.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.8" y="69" width="0.2" height="15.0" fill="rgb(252,53,36)" rx="2" ry="2" />
<text  x="59.76" y="79.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="967.8" y="389" width="1.1" height="15.0" fill="rgb(213,138,14)" rx="2" ry="2" />
<text  x="970.76" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (3 samples, 0.06%)</title><rect x="874.2" y="389" width="0.7" height="15.0" fill="rgb(219,2,2)" rx="2" ry="2" />
<text  x="877.23" y="399.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%)</title><rect x="1129.8" y="197" width="1.2" height="15.0" fill="rgb(222,47,48)" rx="2" ry="2" />
<text  x="1132.84" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.1" y="197" width="0.2" height="15.0" fill="rgb(206,146,5)" rx="2" ry="2" />
<text  x="44.10" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="41.6" y="309" width="0.2" height="15.0" fill="rgb(220,166,11)" rx="2" ry="2" />
<text  x="44.55" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="207.5" y="277" width="0.2" height="15.0" fill="rgb(252,59,4)" rx="2" ry="2" />
<text  x="210.50" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="20.7" y="421" width="0.2" height="15.0" fill="rgb(215,104,54)" rx="2" ry="2" />
<text  x="23.67" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%)</title><rect x="948.0" y="437" width="0.2" height="15.0" fill="rgb(219,23,33)" rx="2" ry="2" />
<text  x="951.01" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%)</title><rect x="513.7" y="213" width="0.5" height="15.0" fill="rgb(244,42,3)" rx="2" ry="2" />
<text  x="516.74" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="903.1" y="389" width="0.4" height="15.0" fill="rgb(248,100,47)" rx="2" ry="2" />
<text  x="906.06" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="574.3" y="357" width="0.3" height="15.0" fill="rgb(246,203,0)" rx="2" ry="2" />
<text  x="577.35" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::query_partition_mutation (1 samples, 0.02%)</title><rect x="109.4" y="533" width="0.3" height="15.0" fill="rgb(238,72,41)" rx="2" ry="2" />
<text  x="112.43" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%)</title><rect x="1127.6" y="229" width="0.9" height="15.0" fill="rgb(232,108,54)" rx="2" ry="2" />
<text  x="1130.57" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="330.3" y="389" width="0.2" height="15.0" fill="rgb(249,141,28)" rx="2" ry="2" />
<text  x="333.31" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (6 samples, 0.12%)</title><rect x="1016.1" y="229" width="1.4" height="15.0" fill="rgb(235,149,53)" rx="2" ry="2" />
<text  x="1019.11" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="38.4" y="341" width="0.2" height="15.0" fill="rgb(250,38,1)" rx="2" ry="2" />
<text  x="41.38" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="817.2" y="373" width="0.3" height="15.0" fill="rgb(233,89,18)" rx="2" ry="2" />
<text  x="820.25" y="383.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="82.0" y="533" width="0.2" height="15.0" fill="rgb(228,130,17)" rx="2" ry="2" />
<text  x="84.96" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="806.8" y="245" width="0.2" height="15.0" fill="rgb(209,22,16)" rx="2" ry="2" />
<text  x="809.81" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="74.0" y="309" width="0.2" height="15.0" fill="rgb(252,128,36)" rx="2" ry="2" />
<text  x="77.02" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (218 samples, 4.19%)</title><rect x="222.9" y="245" width="49.5" height="15.0" fill="rgb(214,99,53)" rx="2" ry="2" />
<text  x="225.94" y="255.5" >loga..</text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="44.1" y="181" width="0.2" height="15.0" fill="rgb(226,45,29)" rx="2" ry="2" />
<text  x="47.05" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="86.7" y="517" width="0.5" height="15.0" fill="rgb(253,184,21)" rx="2" ry="2" />
<text  x="89.73" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1082.9" y="389" width="0.2" height="15.0" fill="rgb(234,171,51)" rx="2" ry="2" />
<text  x="1085.85" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%)</title><rect x="821.8" y="373" width="0.7" height="15.0" fill="rgb(249,151,31)" rx="2" ry="2" />
<text  x="824.79" y="383.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (2 samples, 0.04%)</title><rect x="909.4" y="421" width="0.5" height="15.0" fill="rgb(250,102,31)" rx="2" ry="2" />
<text  x="912.42" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="446.3" y="309" width="0.2" height="15.0" fill="rgb(205,201,16)" rx="2" ry="2" />
<text  x="449.31" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="554.4" y="341" width="0.2" height="15.0" fill="rgb(240,112,49)" rx="2" ry="2" />
<text  x="557.37" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="774.6" y="357" width="0.2" height="15.0" fill="rgb(226,84,13)" rx="2" ry="2" />
<text  x="777.57" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;cql3::expr::expression, true, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="64.0" y="309" width="0.3" height="15.0" fill="rgb(223,129,47)" rx="2" ry="2" />
<text  x="67.03" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="840.4" y="469" width="0.7" height="15.0" fill="rgb(245,128,54)" rx="2" ry="2" />
<text  x="843.40" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="118.5" y="501" width="0.5" height="15.0" fill="rgb(250,159,10)" rx="2" ry="2" />
<text  x="121.51" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="665.6" y="453" width="0.9" height="15.0" fill="rgb(218,74,25)" rx="2" ry="2" />
<text  x="668.61" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="1034.0" y="309" width="0.5" height="15.0" fill="rgb(223,70,51)" rx="2" ry="2" />
<text  x="1037.04" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="723.5" y="533" width="0.4" height="15.0" fill="rgb(236,57,9)" rx="2" ry="2" />
<text  x="726.49" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (28 samples, 0.54%)</title><rect x="700.6" y="501" width="6.3" height="15.0" fill="rgb(233,133,24)" rx="2" ry="2" />
<text  x="703.57" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="857.7" y="453" width="0.2" height="15.0" fill="rgb(248,97,34)" rx="2" ry="2" />
<text  x="860.66" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.4" y="325" width="0.2" height="15.0" fill="rgb(215,159,0)" rx="2" ry="2" />
<text  x="83.37" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="565.0" y="437" width="0.5" height="15.0" fill="rgb(211,125,5)" rx="2" ry="2" />
<text  x="568.04" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="50.2" y="149" width="0.2" height="15.0" fill="rgb(246,174,11)" rx="2" ry="2" />
<text  x="53.18" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="710.6" y="517" width="0.2" height="15.0" fill="rgb(238,53,37)" rx="2" ry="2" />
<text  x="713.55" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="592.3" y="405" width="2.0" height="15.0" fill="rgb(225,105,16)" rx="2" ry="2" />
<text  x="595.28" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (2 samples, 0.04%)</title><rect x="1131.0" y="149" width="0.4" height="15.0" fill="rgb(237,199,4)" rx="2" ry="2" />
<text  x="1133.98" y="159.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="839.7" y="469" width="0.2" height="15.0" fill="rgb(207,131,26)" rx="2" ry="2" />
<text  x="842.72" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (8 samples, 0.15%)</title><rect x="669.5" y="437" width="1.8" height="15.0" fill="rgb(232,110,0)" rx="2" ry="2" />
<text  x="672.47" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="272.2" y="229" width="0.2" height="15.0" fill="rgb(251,196,6)" rx="2" ry="2" />
<text  x="275.20" y="239.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="850.8" y="357" width="0.3" height="15.0" fill="rgb(224,124,38)" rx="2" ry="2" />
<text  x="853.85" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (2 samples, 0.04%)</title><rect x="55.6" y="293" width="0.5" height="15.0" fill="rgb(228,145,28)" rx="2" ry="2" />
<text  x="58.63" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="109.2" y="325" width="0.2" height="15.0" fill="rgb(247,138,37)" rx="2" ry="2" />
<text  x="112.20" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1024.3" y="245" width="0.2" height="15.0" fill="rgb(237,88,2)" rx="2" ry="2" />
<text  x="1027.28" y="255.5" ></text>
</g>
<g >
<title>db::view_build_status (1 samples, 0.02%)</title><rect x="110.1" y="517" width="0.2" height="15.0" fill="rgb(243,73,30)" rx="2" ry="2" />
<text  x="113.11" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="18.4" y="389" width="0.2" height="15.0" fill="rgb(222,26,16)" rx="2" ry="2" />
<text  x="21.40" y="399.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1118.7" y="501" width="8.0" height="15.0" fill="rgb(235,6,33)" rx="2" ry="2" />
<text  x="1121.72" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="937.8" y="405" width="0.2" height="15.0" fill="rgb(213,74,20)" rx="2" ry="2" />
<text  x="940.79" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="838.6" y="421" width="0.2" height="15.0" fill="rgb(207,121,36)" rx="2" ry="2" />
<text  x="841.59" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="21.8" y="389" width="0.2" height="15.0" fill="rgb(209,158,12)" rx="2" ry="2" />
<text  x="24.80" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="15.9" y="549" width="0.2" height="15.0" fill="rgb(237,61,10)" rx="2" ry="2" />
<text  x="18.90" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="581.8" y="293" width="0.3" height="15.0" fill="rgb(222,204,34)" rx="2" ry="2" />
<text  x="584.84" y="303.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (8 samples, 0.15%)</title><rect x="787.5" y="325" width="1.8" height="15.0" fill="rgb(244,227,33)" rx="2" ry="2" />
<text  x="790.51" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="200.0" y="293" width="0.5" height="15.0" fill="rgb(207,160,39)" rx="2" ry="2" />
<text  x="203.01" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="749.6" y="389" width="0.7" height="15.0" fill="rgb(237,72,18)" rx="2" ry="2" />
<text  x="752.60" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="647.2" y="517" width="0.5" height="15.0" fill="rgb(221,82,34)" rx="2" ry="2" />
<text  x="650.22" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%)</title><rect x="914.6" y="405" width="2.8" height="15.0" fill="rgb(251,91,12)" rx="2" ry="2" />
<text  x="917.64" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="666.5" y="469" width="0.5" height="15.0" fill="rgb(233,181,31)" rx="2" ry="2" />
<text  x="669.51" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (2 samples, 0.04%)</title><rect x="64.0" y="389" width="0.5" height="15.0" fill="rgb(248,145,0)" rx="2" ry="2" />
<text  x="67.03" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="57.0" y="149" width="0.7" height="15.0" fill="rgb(224,153,48)" rx="2" ry="2" />
<text  x="59.99" y="159.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%)</title><rect x="1032.0" y="293" width="0.5" height="15.0" fill="rgb(235,160,10)" rx="2" ry="2" />
<text  x="1035.00" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (43 samples, 0.83%)</title><rect x="27.9" y="325" width="9.8" height="15.0" fill="rgb(219,151,47)" rx="2" ry="2" />
<text  x="30.93" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="45.6" y="293" width="0.3" height="15.0" fill="rgb(242,165,36)" rx="2" ry="2" />
<text  x="48.64" y="303.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%)</title><rect x="1077.4" y="373" width="0.7" height="15.0" fill="rgb(225,18,23)" rx="2" ry="2" />
<text  x="1080.40" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%)</title><rect x="633.4" y="469" width="0.2" height="15.0" fill="rgb(243,173,32)" rx="2" ry="2" />
<text  x="636.37" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::file&gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::file&gt;, seastar::future&lt;seastar::file&gt;::handle_exception&lt;do_io_check&lt;open_checked_directory (1 samples, 0.02%)</title><rect x="696.7" y="341" width="0.2" height="15.0" fill="rgb(206,105,42)" rx="2" ry="2" />
<text  x="699.71" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (86 samples, 1.65%)</title><rect x="183.2" y="341" width="19.5" height="15.0" fill="rgb(236,209,34)" rx="2" ry="2" />
<text  x="186.21" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="88.1" y="549" width="0.2" height="15.0" fill="rgb(238,30,45)" rx="2" ry="2" />
<text  x="91.09" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="726.0" y="533" width="0.2" height="15.0" fill="rgb(221,179,38)" rx="2" ry="2" />
<text  x="728.99" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="674.5" y="501" width="0.2" height="15.0" fill="rgb(215,50,53)" rx="2" ry="2" />
<text  x="677.46" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="462.0" y="389" width="0.2" height="15.0" fill="rgb(247,165,13)" rx="2" ry="2" />
<text  x="464.98" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (9 samples, 0.17%)</title><rect x="784.1" y="357" width="2.0" height="15.0" fill="rgb(207,179,47)" rx="2" ry="2" />
<text  x="787.11" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%)</title><rect x="49.5" y="245" width="0.5" height="15.0" fill="rgb(232,226,0)" rx="2" ry="2" />
<text  x="52.50" y="255.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="290.8" y="197" width="0.2" height="15.0" fill="rgb(225,169,18)" rx="2" ry="2" />
<text  x="293.81" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="872.6" y="293" width="0.9" height="15.0" fill="rgb(228,93,2)" rx="2" ry="2" />
<text  x="875.64" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.6" y="181" width="0.3" height="15.0" fill="rgb(223,207,29)" rx="2" ry="2" />
<text  x="43.65" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1024.1" y="261" width="0.2" height="15.0" fill="rgb(253,112,11)" rx="2" ry="2" />
<text  x="1027.06" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="711.0" y="501" width="0.2" height="15.0" fill="rgb(253,32,48)" rx="2" ry="2" />
<text  x="714.01" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="57.0" y="133" width="0.7" height="15.0" fill="rgb(237,47,27)" rx="2" ry="2" />
<text  x="59.99" y="143.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="52.7" y="165" width="0.2" height="15.0" fill="rgb(224,145,49)" rx="2" ry="2" />
<text  x="55.68" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="868.3" y="469" width="0.3" height="15.0" fill="rgb(220,54,12)" rx="2" ry="2" />
<text  x="871.33" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="696.5" y="357" width="0.2" height="15.0" fill="rgb(230,66,7)" rx="2" ry="2" />
<text  x="699.48" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="757.8" y="437" width="0.2" height="15.0" fill="rgb(227,7,54)" rx="2" ry="2" />
<text  x="760.77" y="447.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="327.4" y="357" width="0.2" height="15.0" fill="rgb(222,182,4)" rx="2" ry="2" />
<text  x="330.36" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="557.1" y="277" width="0.4" height="15.0" fill="rgb(209,152,50)" rx="2" ry="2" />
<text  x="560.10" y="287.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (23 samples, 0.44%)</title><rect x="852.4" y="453" width="5.3" height="15.0" fill="rgb(210,57,2)" rx="2" ry="2" />
<text  x="855.44" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="592.1" y="357" width="0.2" height="15.0" fill="rgb(225,131,39)" rx="2" ry="2" />
<text  x="595.05" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="967.8" y="373" width="1.1" height="15.0" fill="rgb(225,128,27)" rx="2" ry="2" />
<text  x="970.76" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (8 samples, 0.15%)</title><rect x="948.9" y="389" width="1.8" height="15.0" fill="rgb(213,96,14)" rx="2" ry="2" />
<text  x="951.91" y="399.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%)</title><rect x="1122.8" y="261" width="0.5" height="15.0" fill="rgb(227,177,13)" rx="2" ry="2" />
<text  x="1125.80" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="666.7" y="437" width="0.3" height="15.0" fill="rgb(247,189,36)" rx="2" ry="2" />
<text  x="669.74" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;frozen_mutation&gt;::dispose (1 samples, 0.02%)</title><rect x="722.8" y="469" width="0.2" height="15.0" fill="rgb(218,140,12)" rx="2" ry="2" />
<text  x="725.81" y="479.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="872.0" y="277" width="0.2" height="15.0" fill="rgb(228,108,12)" rx="2" ry="2" />
<text  x="874.96" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="851.5" y="437" width="0.3" height="15.0" fill="rgb(219,12,50)" rx="2" ry="2" />
<text  x="854.53" y="447.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.10%)</title><rect x="410.2" y="213" width="1.2" height="15.0" fill="rgb(225,120,35)" rx="2" ry="2" />
<text  x="413.22" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="108.7" y="389" width="0.3" height="15.0" fill="rgb(222,66,52)" rx="2" ry="2" />
<text  x="111.75" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="973.2" y="341" width="1.1" height="15.0" fill="rgb(245,91,28)" rx="2" ry="2" />
<text  x="976.21" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%)</title><rect x="84.0" y="469" width="0.2" height="15.0" fill="rgb(239,59,24)" rx="2" ry="2" />
<text  x="87.01" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="305.3" y="293" width="0.3" height="15.0" fill="rgb(223,128,18)" rx="2" ry="2" />
<text  x="308.34" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (511 samples, 9.83%)</title><rect x="336.2" y="389" width="116.0" height="15.0" fill="rgb(247,86,52)" rx="2" ry="2" />
<text  x="339.21" y="399.5" >flat_mutation_..</text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1106.5" y="421" width="0.9" height="15.0" fill="rgb(218,210,54)" rx="2" ry="2" />
<text  x="1109.46" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (12 samples, 0.23%)</title><rect x="1024.5" y="261" width="2.7" height="15.0" fill="rgb(232,205,54)" rx="2" ry="2" />
<text  x="1027.51" y="271.5" ></text>
</g>
<g >
<title>database::has_keyspace (14 samples, 0.27%)</title><rect x="828.6" y="389" width="3.2" height="15.0" fill="rgb(238,99,6)" rx="2" ry="2" />
<text  x="831.60" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.15%)</title><rect x="764.4" y="421" width="1.8" height="15.0" fill="rgb(226,91,9)" rx="2" ry="2" />
<text  x="767.36" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.10%)</title><rect x="265.4" y="197" width="1.1" height="15.0" fill="rgb(228,158,6)" rx="2" ry="2" />
<text  x="268.39" y="207.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::list_service_level_statement*, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.0" y="373" width="0.2" height="15.0" fill="rgb(248,67,53)" rx="2" ry="2" />
<text  x="69.98" y="383.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="835.0" y="453" width="1.1" height="15.0" fill="rgb(237,118,7)" rx="2" ry="2" />
<text  x="837.96" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="361.2" y="197" width="0.4" height="15.0" fill="rgb(229,19,18)" rx="2" ry="2" />
<text  x="364.19" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::~reactor_backend_aio (1 samples, 0.02%)</title><rect x="83.8" y="645" width="0.2" height="15.0" fill="rgb(222,37,30)" rx="2" ry="2" />
<text  x="86.78" y="655.5" ></text>
</g>
<g >
<title>seastar::async&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="723.0" y="421" width="0.3" height="15.0" fill="rgb(211,93,49)" rx="2" ry="2" />
<text  x="726.04" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.02%)</title><rect x="16.4" y="453" width="0.2" height="15.0" fill="rgb(238,169,8)" rx="2" ry="2" />
<text  x="19.36" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="937.1" y="405" width="0.7" height="15.0" fill="rgb(239,93,33)" rx="2" ry="2" />
<text  x="940.11" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (1 samples, 0.02%)</title><rect x="515.3" y="325" width="0.3" height="15.0" fill="rgb(211,201,40)" rx="2" ry="2" />
<text  x="518.33" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="61.8" y="309" width="0.4" height="15.0" fill="rgb(254,93,38)" rx="2" ry="2" />
<text  x="64.76" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="720.5" y="453" width="0.3" height="15.0" fill="rgb(246,221,15)" rx="2" ry="2" />
<text  x="723.54" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="753.5" y="309" width="0.2" height="15.0" fill="rgb(215,90,22)" rx="2" ry="2" />
<text  x="756.46" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (62 samples, 1.19%)</title><rect x="1089.7" y="453" width="14.0" height="15.0" fill="rgb(221,110,7)" rx="2" ry="2" />
<text  x="1092.66" y="463.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::~formatbuf (1 samples, 0.02%)</title><rect x="83.1" y="645" width="0.2" height="15.0" fill="rgb(254,173,50)" rx="2" ry="2" />
<text  x="86.10" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1120.3" y="149" width="0.2" height="15.0" fill="rgb(216,2,35)" rx="2" ry="2" />
<text  x="1123.31" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.63%)</title><rect x="799.1" y="213" width="7.5" height="15.0" fill="rgb(235,156,52)" rx="2" ry="2" />
<text  x="802.09" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="162.8" y="469" width="0.4" height="15.0" fill="rgb(206,138,49)" rx="2" ry="2" />
<text  x="165.78" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (3 samples, 0.06%)</title><rect x="590.0" y="309" width="0.7" height="15.0" fill="rgb(219,37,52)" rx="2" ry="2" />
<text  x="593.01" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="37.9" y="325" width="0.5" height="15.0" fill="rgb(219,215,39)" rx="2" ry="2" />
<text  x="40.92" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="98.5" y="517" width="0.5" height="15.0" fill="rgb(229,207,24)" rx="2" ry="2" />
<text  x="101.53" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%)</title><rect x="1120.3" y="213" width="0.7" height="15.0" fill="rgb(206,122,34)" rx="2" ry="2" />
<text  x="1123.31" y="223.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (9 samples, 0.17%)</title><rect x="196.1" y="277" width="2.1" height="15.0" fill="rgb(214,186,54)" rx="2" ry="2" />
<text  x="199.15" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (4 samples, 0.08%)</title><rect x="97.6" y="517" width="0.9" height="15.0" fill="rgb(225,28,33)" rx="2" ry="2" />
<text  x="100.63" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="819.3" y="357" width="0.4" height="15.0" fill="rgb(207,222,24)" rx="2" ry="2" />
<text  x="822.29" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1109.4" y="421" width="0.2" height="15.0" fill="rgb(219,156,33)" rx="2" ry="2" />
<text  x="1112.41" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1133.7" y="277" width="0.2" height="15.0" fill="rgb(238,113,33)" rx="2" ry="2" />
<text  x="1136.70" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.29%)</title><rect x="683.3" y="517" width="3.4" height="15.0" fill="rgb(246,175,20)" rx="2" ry="2" />
<text  x="686.31" y="527.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%)</title><rect x="697.2" y="453" width="0.2" height="15.0" fill="rgb(205,8,13)" rx="2" ry="2" />
<text  x="700.16" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1074.5" y="309" width="0.2" height="15.0" fill="rgb(234,48,34)" rx="2" ry="2" />
<text  x="1077.45" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.4" y="405" width="0.3" height="15.0" fill="rgb(206,164,49)" rx="2" ry="2" />
<text  x="70.43" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1078.3" y="373" width="0.2" height="15.0" fill="rgb(244,72,35)" rx="2" ry="2" />
<text  x="1081.31" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%)</title><rect x="735.5" y="341" width="0.5" height="15.0" fill="rgb(241,58,16)" rx="2" ry="2" />
<text  x="738.53" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="832.2" y="437" width="0.3" height="15.0" fill="rgb(232,51,25)" rx="2" ry="2" />
<text  x="835.23" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_M_head (1 samples, 0.02%)</title><rect x="51.8" y="213" width="0.2" height="15.0" fill="rgb(210,162,7)" rx="2" ry="2" />
<text  x="54.77" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="61.3" y="325" width="0.2" height="15.0" fill="rgb(212,188,49)" rx="2" ry="2" />
<text  x="64.30" y="335.5" ></text>
</g>
<g >
<title>schema_builder::build (2 samples, 0.04%)</title><rect x="110.8" y="421" width="0.4" height="15.0" fill="rgb(229,186,23)" rx="2" ry="2" />
<text  x="113.79" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (28 samples, 0.54%)</title><rect x="52.2" y="325" width="6.4" height="15.0" fill="rgb(251,217,37)" rx="2" ry="2" />
<text  x="55.22" y="335.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (98 samples, 1.89%)</title><rect x="790.0" y="309" width="22.3" height="15.0" fill="rgb(247,56,3)" rx="2" ry="2" />
<text  x="793.01" y="319.5" >a..</text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (3 samples, 0.06%)</title><rect x="355.7" y="229" width="0.7" height="15.0" fill="rgb(239,203,53)" rx="2" ry="2" />
<text  x="358.74" y="239.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1076.7" y="325" width="0.2" height="15.0" fill="rgb(247,105,34)" rx="2" ry="2" />
<text  x="1079.72" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (2 samples, 0.04%)</title><rect x="629.1" y="437" width="0.4" height="15.0" fill="rgb(218,224,0)" rx="2" ry="2" />
<text  x="632.06" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="1044.0" y="309" width="0.7" height="15.0" fill="rgb(251,176,53)" rx="2" ry="2" />
<text  x="1047.03" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="832.5" y="437" width="0.2" height="15.0" fill="rgb(214,50,41)" rx="2" ry="2" />
<text  x="835.46" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="822.7" y="421" width="0.2" height="15.0" fill="rgb(234,179,27)" rx="2" ry="2" />
<text  x="825.70" y="431.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="995.5" y="325" width="0.2" height="15.0" fill="rgb(216,71,24)" rx="2" ry="2" />
<text  x="998.45" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="724.9" y="533" width="0.2" height="15.0" fill="rgb(227,39,28)" rx="2" ry="2" />
<text  x="727.86" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1166.8" y="501" width="0.3" height="15.0" fill="rgb(235,188,41)" rx="2" ry="2" />
<text  x="1169.84" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (73 samples, 1.40%)</title><rect x="893.3" y="437" width="16.6" height="15.0" fill="rgb(238,62,29)" rx="2" ry="2" />
<text  x="896.30" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="61.8" y="277" width="0.4" height="15.0" fill="rgb(253,34,46)" rx="2" ry="2" />
<text  x="64.76" y="287.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="452.4" y="405" width="2.3" height="15.0" fill="rgb(221,95,11)" rx="2" ry="2" />
<text  x="455.44" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="17.9" y="197" width="0.3" height="15.0" fill="rgb(206,52,44)" rx="2" ry="2" />
<text  x="20.95" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%)</title><rect x="352.8" y="229" width="0.2" height="15.0" fill="rgb(220,0,19)" rx="2" ry="2" />
<text  x="355.79" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="55.4" y="309" width="0.2" height="15.0" fill="rgb(216,96,16)" rx="2" ry="2" />
<text  x="58.40" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="539.6" y="309" width="0.5" height="15.0" fill="rgb(236,75,24)" rx="2" ry="2" />
<text  x="542.62" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="41.1" y="309" width="0.2" height="15.0" fill="rgb(253,193,49)" rx="2" ry="2" />
<text  x="44.10" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::emplace_back&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%)</title><rect x="109.0" y="325" width="0.2" height="15.0" fill="rgb(234,94,4)" rx="2" ry="2" />
<text  x="111.98" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="1154.1" y="501" width="0.3" height="15.0" fill="rgb(244,3,13)" rx="2" ry="2" />
<text  x="1157.13" y="511.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (13 samples, 0.25%)</title><rect x="499.2" y="309" width="3.0" height="15.0" fill="rgb(254,94,52)" rx="2" ry="2" />
<text  x="502.21" y="319.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1038.1" y="325" width="0.3" height="15.0" fill="rgb(242,152,21)" rx="2" ry="2" />
<text  x="1041.13" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="707.1" y="517" width="0.3" height="15.0" fill="rgb(239,139,5)" rx="2" ry="2" />
<text  x="710.15" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (1 samples, 0.02%)</title><rect x="696.5" y="373" width="0.2" height="15.0" fill="rgb(212,27,18)" rx="2" ry="2" />
<text  x="699.48" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1129.6" y="197" width="0.2" height="15.0" fill="rgb(213,21,43)" rx="2" ry="2" />
<text  x="1132.62" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (294 samples, 5.66%)</title><rect x="15.9" y="613" width="66.7" height="15.0" fill="rgb(205,8,33)" rx="2" ry="2" />
<text  x="18.90" y="623.5" >seastar..</text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update_timestamp (1 samples, 0.02%)</title><rect x="1121.9" y="245" width="0.2" height="15.0" fill="rgb(221,8,43)" rx="2" ry="2" />
<text  x="1124.90" y="255.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="723.0" y="341" width="0.3" height="15.0" fill="rgb(232,65,30)" rx="2" ry="2" />
<text  x="726.04" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="16.8" y="501" width="0.2" height="15.0" fill="rgb(216,131,27)" rx="2" ry="2" />
<text  x="19.81" y="511.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="111.5" y="309" width="0.2" height="15.0" fill="rgb(252,187,8)" rx="2" ry="2" />
<text  x="114.47" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="638.6" y="437" width="0.4" height="15.0" fill="rgb(239,2,26)" rx="2" ry="2" />
<text  x="641.59" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="866.1" y="533" width="0.2" height="15.0" fill="rgb(218,56,23)" rx="2" ry="2" />
<text  x="869.06" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::CqlLexer (1 samples, 0.02%)</title><rect x="69.0" y="469" width="0.2" height="15.0" fill="rgb(247,33,34)" rx="2" ry="2" />
<text  x="72.02" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (3 samples, 0.06%)</title><rect x="47.5" y="149" width="0.6" height="15.0" fill="rgb(210,141,27)" rx="2" ry="2" />
<text  x="50.46" y="159.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="1139.4" y="517" width="0.4" height="15.0" fill="rgb(218,33,3)" rx="2" ry="2" />
<text  x="1142.38" y="527.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="805.7" y="149" width="0.2" height="15.0" fill="rgb(211,228,8)" rx="2" ry="2" />
<text  x="808.67" y="159.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (32 samples, 0.62%)</title><rect x="1059.7" y="293" width="7.3" height="15.0" fill="rgb(209,103,28)" rx="2" ry="2" />
<text  x="1062.70" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="25.9" y="213" width="0.2" height="15.0" fill="rgb(227,19,12)" rx="2" ry="2" />
<text  x="28.89" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="789.1" y="309" width="0.2" height="15.0" fill="rgb(227,168,8)" rx="2" ry="2" />
<text  x="792.10" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1021.3" y="197" width="0.3" height="15.0" fill="rgb(214,119,19)" rx="2" ry="2" />
<text  x="1024.33" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="697.6" y="533" width="0.2" height="15.0" fill="rgb(253,157,32)" rx="2" ry="2" />
<text  x="700.61" y="543.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="56.5" y="117" width="0.3" height="15.0" fill="rgb(245,65,23)" rx="2" ry="2" />
<text  x="59.54" y="127.5" ></text>
</g>
<g >
<title>seastar::reactor::batch_flush_pollfn::poll (1 samples, 0.02%)</title><rect x="89.7" y="549" width="0.2" height="15.0" fill="rgb(241,29,3)" rx="2" ry="2" />
<text  x="92.68" y="559.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (270 samples, 5.19%)</title><rect x="20.2" y="549" width="61.3" height="15.0" fill="rgb(228,3,11)" rx="2" ry="2" />
<text  x="23.22" y="559.5" >single..</text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%)</title><rect x="63.1" y="325" width="0.2" height="15.0" fill="rgb(229,62,20)" rx="2" ry="2" />
<text  x="66.12" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_realloc_insert&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%)</title><rect x="109.0" y="309" width="0.2" height="15.0" fill="rgb(242,226,12)" rx="2" ry="2" />
<text  x="111.98" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (2 samples, 0.04%)</title><rect x="81.5" y="549" width="0.5" height="15.0" fill="rgb(208,187,44)" rx="2" ry="2" />
<text  x="84.51" y="559.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="613.6" y="437" width="0.2" height="15.0" fill="rgb(213,131,48)" rx="2" ry="2" />
<text  x="616.62" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="308.3" y="325" width="0.2" height="15.0" fill="rgb(229,216,23)" rx="2" ry="2" />
<text  x="311.29" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="560.7" y="357" width="0.7" height="15.0" fill="rgb(222,46,53)" rx="2" ry="2" />
<text  x="563.73" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="677.9" y="517" width="1.1" height="15.0" fill="rgb(239,143,3)" rx="2" ry="2" />
<text  x="680.86" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="359.8" y="197" width="0.3" height="15.0" fill="rgb(218,180,35)" rx="2" ry="2" />
<text  x="362.82" y="207.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="710.1" y="517" width="0.2" height="15.0" fill="rgb(247,85,47)" rx="2" ry="2" />
<text  x="713.10" y="527.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="719.4" y="469" width="0.2" height="15.0" fill="rgb(252,217,25)" rx="2" ry="2" />
<text  x="722.41" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="66.8" y="373" width="0.2" height="15.0" fill="rgb(248,6,16)" rx="2" ry="2" />
<text  x="69.75" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (1 samples, 0.02%)</title><rect x="714.0" y="485" width="0.2" height="15.0" fill="rgb(231,131,35)" rx="2" ry="2" />
<text  x="716.96" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="650.2" y="501" width="0.2" height="15.0" fill="rgb(252,117,31)" rx="2" ry="2" />
<text  x="653.17" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="661.3" y="485" width="0.2" height="15.0" fill="rgb(232,144,20)" rx="2" ry="2" />
<text  x="664.29" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="754.8" y="309" width="0.5" height="15.0" fill="rgb(221,50,49)" rx="2" ry="2" />
<text  x="757.82" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="842.9" y="405" width="1.1" height="15.0" fill="rgb(252,194,14)" rx="2" ry="2" />
<text  x="845.90" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="754.6" y="325" width="0.7" height="15.0" fill="rgb(239,152,31)" rx="2" ry="2" />
<text  x="757.59" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%)</title><rect x="86.7" y="469" width="0.5" height="15.0" fill="rgb(243,30,21)" rx="2" ry="2" />
<text  x="89.73" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="59.3" y="245" width="0.2" height="15.0" fill="rgb(244,200,5)" rx="2" ry="2" />
<text  x="62.26" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (15 samples, 0.29%)</title><rect x="629.7" y="437" width="3.4" height="15.0" fill="rgb(234,123,34)" rx="2" ry="2" />
<text  x="632.74" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="377.3" y="213" width="0.2" height="15.0" fill="rgb(210,50,38)" rx="2" ry="2" />
<text  x="380.30" y="223.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%)</title><rect x="41.6" y="341" width="0.2" height="15.0" fill="rgb(207,18,21)" rx="2" ry="2" />
<text  x="44.55" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.1" y="309" width="0.3" height="15.0" fill="rgb(234,89,17)" rx="2" ry="2" />
<text  x="88.14" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="56.5" y="245" width="0.5" height="15.0" fill="rgb(231,208,3)" rx="2" ry="2" />
<text  x="59.54" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (57 samples, 1.10%)</title><rect x="579.3" y="373" width="13.0" height="15.0" fill="rgb(216,153,43)" rx="2" ry="2" />
<text  x="582.34" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (15 samples, 0.29%)</title><rect x="288.1" y="245" width="3.4" height="15.0" fill="rgb(210,81,24)" rx="2" ry="2" />
<text  x="291.09" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="451.1" y="277" width="0.2" height="15.0" fill="rgb(241,102,7)" rx="2" ry="2" />
<text  x="454.08" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="582.5" y="309" width="0.2" height="15.0" fill="rgb(215,32,10)" rx="2" ry="2" />
<text  x="585.52" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="806.1" y="117" width="0.3" height="15.0" fill="rgb(212,64,26)" rx="2" ry="2" />
<text  x="809.13" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="197" width="0.4" height="15.0" fill="rgb(232,40,54)" rx="2" ry="2" />
<text  x="57.27" y="207.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.9" y="453" width="0.3" height="15.0" fill="rgb(229,70,35)" rx="2" ry="2" />
<text  x="20.95" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%)</title><rect x="737.8" y="325" width="0.9" height="15.0" fill="rgb(253,4,18)" rx="2" ry="2" />
<text  x="740.80" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="358.0" y="197" width="0.5" height="15.0" fill="rgb(205,65,52)" rx="2" ry="2" />
<text  x="361.01" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="593.0" y="389" width="0.4" height="15.0" fill="rgb(230,28,12)" rx="2" ry="2" />
<text  x="595.96" y="399.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (12 samples, 0.23%)</title><rect x="1122.4" y="277" width="2.7" height="15.0" fill="rgb(228,39,2)" rx="2" ry="2" />
<text  x="1125.35" y="287.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="516.2" y="341" width="0.3" height="15.0" fill="rgb(246,218,0)" rx="2" ry="2" />
<text  x="519.23" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4 samples, 0.08%)</title><rect x="719.9" y="469" width="0.9" height="15.0" fill="rgb(237,26,19)" rx="2" ry="2" />
<text  x="722.86" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="936.4" y="389" width="0.5" height="15.0" fill="rgb(233,21,27)" rx="2" ry="2" />
<text  x="939.43" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1035.9" y="245" width="0.4" height="15.0" fill="rgb(234,24,19)" rx="2" ry="2" />
<text  x="1038.86" y="255.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="39.7" y="341" width="0.7" height="15.0" fill="rgb(205,25,17)" rx="2" ry="2" />
<text  x="42.74" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (16 samples, 0.31%)</title><rect x="257.9" y="165" width="3.6" height="15.0" fill="rgb(249,19,8)" rx="2" ry="2" />
<text  x="260.90" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="455.6" y="405" width="0.2" height="15.0" fill="rgb(235,5,15)" rx="2" ry="2" />
<text  x="458.62" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="61.8" y="341" width="0.4" height="15.0" fill="rgb(235,51,44)" rx="2" ry="2" />
<text  x="64.76" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="987.5" y="309" width="0.2" height="15.0" fill="rgb(217,155,39)" rx="2" ry="2" />
<text  x="990.51" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="62.0" y="165" width="0.2" height="15.0" fill="rgb(242,181,10)" rx="2" ry="2" />
<text  x="64.99" y="175.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (40 samples, 0.77%)</title><rect x="565.7" y="437" width="9.1" height="15.0" fill="rgb(233,63,51)" rx="2" ry="2" />
<text  x="568.72" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="42.7" y="245" width="0.2" height="15.0" fill="rgb(235,78,27)" rx="2" ry="2" />
<text  x="45.69" y="255.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1038.6" y="357" width="0.2" height="15.0" fill="rgb(242,140,54)" rx="2" ry="2" />
<text  x="1041.58" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (26 samples, 0.50%)</title><rect x="301.5" y="341" width="5.9" height="15.0" fill="rgb(252,200,37)" rx="2" ry="2" />
<text  x="304.48" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="267.7" y="165" width="0.4" height="15.0" fill="rgb(215,147,20)" rx="2" ry="2" />
<text  x="270.66" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.08%)</title><rect x="43.6" y="325" width="0.9" height="15.0" fill="rgb(237,116,53)" rx="2" ry="2" />
<text  x="46.60" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="675.8" y="517" width="0.2" height="15.0" fill="rgb(240,162,10)" rx="2" ry="2" />
<text  x="678.82" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="110.3" y="325" width="0.3" height="15.0" fill="rgb(228,1,22)" rx="2" ry="2" />
<text  x="113.34" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.10%)</title><rect x="274.9" y="181" width="1.2" height="15.0" fill="rgb(253,198,30)" rx="2" ry="2" />
<text  x="277.92" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="75.4" y="405" width="0.2" height="15.0" fill="rgb(238,21,34)" rx="2" ry="2" />
<text  x="78.38" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1083.1" y="389" width="0.2" height="15.0" fill="rgb(214,114,28)" rx="2" ry="2" />
<text  x="1086.08" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (15 samples, 0.29%)</title><rect x="760.0" y="453" width="3.4" height="15.0" fill="rgb(252,76,44)" rx="2" ry="2" />
<text  x="763.04" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="959.4" y="389" width="1.3" height="15.0" fill="rgb(217,157,30)" rx="2" ry="2" />
<text  x="962.36" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (703 samples, 13.52%)</title><rect x="171.2" y="421" width="159.6" height="15.0" fill="rgb(241,151,4)" rx="2" ry="2" />
<text  x="174.18" y="431.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (8 samples, 0.15%)</title><rect x="761.0" y="421" width="1.8" height="15.0" fill="rgb(240,94,4)" rx="2" ry="2" />
<text  x="763.95" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="39.1" y="373" width="0.6" height="15.0" fill="rgb(225,133,52)" rx="2" ry="2" />
<text  x="42.06" y="383.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (5 samples, 0.10%)</title><rect x="397.5" y="181" width="1.1" height="15.0" fill="rgb(226,67,38)" rx="2" ry="2" />
<text  x="400.51" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="766.2" y="405" width="0.2" height="15.0" fill="rgb(209,107,41)" rx="2" ry="2" />
<text  x="769.17" y="415.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="360.1" y="197" width="0.4" height="15.0" fill="rgb(206,17,13)" rx="2" ry="2" />
<text  x="363.05" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.17%)</title><rect x="948.7" y="405" width="2.0" height="15.0" fill="rgb(205,5,31)" rx="2" ry="2" />
<text  x="951.69" y="415.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="141.2" y="485" width="0.2" height="15.0" fill="rgb(238,34,37)" rx="2" ry="2" />
<text  x="144.21" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="84.7" y="357" width="0.4" height="15.0" fill="rgb(209,136,37)" rx="2" ry="2" />
<text  x="87.69" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="455.2" y="389" width="0.2" height="15.0" fill="rgb(234,93,3)" rx="2" ry="2" />
<text  x="458.17" y="399.5" ></text>
</g>
<g >
<title>sstables::seal_statistics (1 samples, 0.02%)</title><rect x="83.8" y="485" width="0.2" height="15.0" fill="rgb(231,178,39)" rx="2" ry="2" />
<text  x="86.78" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (68 samples, 1.31%)</title><rect x="576.8" y="421" width="15.5" height="15.0" fill="rgb(213,103,19)" rx="2" ry="2" />
<text  x="579.84" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%)</title><rect x="706.7" y="485" width="0.2" height="15.0" fill="rgb(236,193,52)" rx="2" ry="2" />
<text  x="709.69" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (8 samples, 0.15%)</title><rect x="920.1" y="373" width="1.8" height="15.0" fill="rgb(217,11,47)" rx="2" ry="2" />
<text  x="923.08" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%)</title><rect x="1132.8" y="213" width="0.2" height="15.0" fill="rgb(221,93,51)" rx="2" ry="2" />
<text  x="1135.79" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (5 samples, 0.10%)</title><rect x="564.4" y="453" width="1.1" height="15.0" fill="rgb(215,206,39)" rx="2" ry="2" />
<text  x="567.36" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="267.7" y="149" width="0.4" height="15.0" fill="rgb(240,160,22)" rx="2" ry="2" />
<text  x="270.66" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%)</title><rect x="838.1" y="405" width="0.5" height="15.0" fill="rgb(241,124,32)" rx="2" ry="2" />
<text  x="841.13" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::constant::constant (1 samples, 0.02%)</title><rect x="71.7" y="405" width="0.3" height="15.0" fill="rgb(222,88,30)" rx="2" ry="2" />
<text  x="74.75" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="773.4" y="373" width="0.3" height="15.0" fill="rgb(244,224,0)" rx="2" ry="2" />
<text  x="776.44" y="383.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="873.5" y="325" width="0.5" height="15.0" fill="rgb(231,72,45)" rx="2" ry="2" />
<text  x="876.55" y="335.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%)</title><rect x="1158.9" y="501" width="0.7" height="15.0" fill="rgb(222,83,8)" rx="2" ry="2" />
<text  x="1161.90" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="161.0" y="405" width="0.2" height="15.0" fill="rgb(250,126,19)" rx="2" ry="2" />
<text  x="163.96" y="415.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="109.7" y="469" width="0.2" height="15.0" fill="rgb(243,132,54)" rx="2" ry="2" />
<text  x="112.66" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%)</title><rect x="17.3" y="597" width="0.6" height="15.0" fill="rgb(223,157,47)" rx="2" ry="2" />
<text  x="20.26" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="105.8" y="485" width="0.2" height="15.0" fill="rgb(212,198,28)" rx="2" ry="2" />
<text  x="108.80" y="495.5" ></text>
</g>
<g >
<title>seastar::coroutine::internal::maybe_yield_awaiter::run_and_dispose (1 samples, 0.02%)</title><rect x="88.5" y="549" width="0.3" height="15.0" fill="rgb(209,41,49)" rx="2" ry="2" />
<text  x="91.55" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="74.0" y="341" width="0.2" height="15.0" fill="rgb(248,106,54)" rx="2" ry="2" />
<text  x="77.02" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1020.7" y="149" width="0.2" height="15.0" fill="rgb(237,125,27)" rx="2" ry="2" />
<text  x="1023.65" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (21 samples, 0.40%)</title><rect x="766.4" y="405" width="4.8" height="15.0" fill="rgb(240,206,36)" rx="2" ry="2" />
<text  x="769.40" y="415.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="624.7" y="469" width="0.3" height="15.0" fill="rgb(207,219,25)" rx="2" ry="2" />
<text  x="627.74" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (15 samples, 0.29%)</title><rect x="322.6" y="325" width="3.4" height="15.0" fill="rgb(241,84,37)" rx="2" ry="2" />
<text  x="325.59" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%)</title><rect x="1099.9" y="437" width="0.4" height="15.0" fill="rgb(213,152,6)" rx="2" ry="2" />
<text  x="1102.88" y="447.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (37 samples, 0.71%)</title><rect x="130.5" y="485" width="8.4" height="15.0" fill="rgb(213,61,18)" rx="2" ry="2" />
<text  x="133.54" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="309.0" y="357" width="0.4" height="15.0" fill="rgb(248,98,30)" rx="2" ry="2" />
<text  x="311.97" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1021.1" y="197" width="0.2" height="15.0" fill="rgb(216,143,25)" rx="2" ry="2" />
<text  x="1024.10" y="207.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1139.1" y="517" width="0.3" height="15.0" fill="rgb(226,18,5)" rx="2" ry="2" />
<text  x="1142.15" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="672.0" y="469" width="0.2" height="15.0" fill="rgb(217,224,6)" rx="2" ry="2" />
<text  x="674.96" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="557.5" y="277" width="0.3" height="15.0" fill="rgb(235,103,1)" rx="2" ry="2" />
<text  x="560.55" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="561.4" y="357" width="0.2" height="15.0" fill="rgb(229,205,54)" rx="2" ry="2" />
<text  x="564.41" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (2 samples, 0.04%)</title><rect x="50.6" y="293" width="0.5" height="15.0" fill="rgb(238,194,20)" rx="2" ry="2" />
<text  x="53.63" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="724.6" y="533" width="0.3" height="15.0" fill="rgb(218,92,2)" rx="2" ry="2" />
<text  x="727.63" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (3 samples, 0.06%)</title><rect x="54.7" y="277" width="0.7" height="15.0" fill="rgb(210,53,54)" rx="2" ry="2" />
<text  x="57.72" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="45.9" y="309" width="0.2" height="15.0" fill="rgb(219,212,8)" rx="2" ry="2" />
<text  x="48.87" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (2 samples, 0.04%)</title><rect x="409.1" y="229" width="0.4" height="15.0" fill="rgb(254,223,14)" rx="2" ry="2" />
<text  x="412.08" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="762.8" y="437" width="0.2" height="15.0" fill="rgb(241,189,53)" rx="2" ry="2" />
<text  x="765.77" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.9" y="293" width="0.2" height="15.0" fill="rgb(226,42,53)" rx="2" ry="2" />
<text  x="48.87" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="827.5" y="325" width="0.6" height="15.0" fill="rgb(230,57,14)" rx="2" ry="2" />
<text  x="830.46" y="335.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::new_offsets (1 samples, 0.02%)</title><rect x="83.8" y="453" width="0.2" height="15.0" fill="rgb(215,190,25)" rx="2" ry="2" />
<text  x="86.78" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="67.7" y="341" width="0.2" height="15.0" fill="rgb(243,169,21)" rx="2" ry="2" />
<text  x="70.66" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="891.9" y="421" width="0.5" height="15.0" fill="rgb(206,24,37)" rx="2" ry="2" />
<text  x="894.94" y="431.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%)</title><rect x="17.0" y="597" width="0.3" height="15.0" fill="rgb(249,130,10)" rx="2" ry="2" />
<text  x="20.04" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (21 samples, 0.40%)</title><rect x="939.4" y="437" width="4.7" height="15.0" fill="rgb(240,82,39)" rx="2" ry="2" />
<text  x="942.38" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="819.7" y="421" width="0.3" height="15.0" fill="rgb(248,142,40)" rx="2" ry="2" />
<text  x="822.75" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="286.5" y="197" width="0.9" height="15.0" fill="rgb(225,181,24)" rx="2" ry="2" />
<text  x="289.50" y="207.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (2 samples, 0.04%)</title><rect x="1111.7" y="421" width="0.4" height="15.0" fill="rgb(225,65,43)" rx="2" ry="2" />
<text  x="1114.68" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="550.5" y="357" width="0.2" height="15.0" fill="rgb(242,13,21)" rx="2" ry="2" />
<text  x="553.51" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="449.9" y="309" width="1.9" height="15.0" fill="rgb(254,59,37)" rx="2" ry="2" />
<text  x="452.95" y="319.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%)</title><rect x="17.9" y="277" width="0.3" height="15.0" fill="rgb(251,131,4)" rx="2" ry="2" />
<text  x="20.95" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="699.4" y="517" width="0.5" height="15.0" fill="rgb(235,119,43)" rx="2" ry="2" />
<text  x="702.43" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="275.6" y="165" width="0.5" height="15.0" fill="rgb(221,67,20)" rx="2" ry="2" />
<text  x="278.60" y="175.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="618.8" y="437" width="0.3" height="15.0" fill="rgb(226,183,12)" rx="2" ry="2" />
<text  x="621.84" y="447.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.1" y="565" width="0.3" height="15.0" fill="rgb(251,74,18)" rx="2" ry="2" />
<text  x="19.13" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="1043.4" y="341" width="2.2" height="15.0" fill="rgb(223,13,1)" rx="2" ry="2" />
<text  x="1046.35" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="581.2" y="341" width="0.4" height="15.0" fill="rgb(246,164,14)" rx="2" ry="2" />
<text  x="584.16" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::consume (165 samples, 3.17%)</title><rect x="365.7" y="229" width="37.5" height="15.0" fill="rgb(236,44,20)" rx="2" ry="2" />
<text  x="368.73" y="239.5" >mut..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (6 samples, 0.12%)</title><rect x="406.4" y="213" width="1.3" height="15.0" fill="rgb(231,155,0)" rx="2" ry="2" />
<text  x="409.36" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="660.6" y="453" width="0.7" height="15.0" fill="rgb(245,146,32)" rx="2" ry="2" />
<text  x="663.61" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::types (1 samples, 0.02%)</title><rect x="17.9" y="293" width="0.3" height="15.0" fill="rgb(223,214,36)" rx="2" ry="2" />
<text  x="20.95" y="303.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="674.2" y="517" width="0.5" height="15.0" fill="rgb(224,74,30)" rx="2" ry="2" />
<text  x="677.23" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="262.9" y="197" width="0.2" height="15.0" fill="rgb(246,224,1)" rx="2" ry="2" />
<text  x="265.89" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="812.0" y="261" width="0.3" height="15.0" fill="rgb(252,131,10)" rx="2" ry="2" />
<text  x="815.03" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="427.9" y="181" width="0.3" height="15.0" fill="rgb(240,168,54)" rx="2" ry="2" />
<text  x="430.93" y="191.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (2 samples, 0.04%)</title><rect x="689.9" y="485" width="0.5" height="15.0" fill="rgb(205,98,6)" rx="2" ry="2" />
<text  x="692.90" y="495.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%)</title><rect x="82.2" y="533" width="0.2" height="15.0" fill="rgb(241,47,26)" rx="2" ry="2" />
<text  x="85.19" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (30 samples, 0.58%)</title><rect x="1126.7" y="373" width="6.8" height="15.0" fill="rgb(236,15,34)" rx="2" ry="2" />
<text  x="1129.66" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="654.7" y="517" width="0.2" height="15.0" fill="rgb(223,163,0)" rx="2" ry="2" />
<text  x="657.71" y="527.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="808.2" y="293" width="0.2" height="15.0" fill="rgb(215,106,40)" rx="2" ry="2" />
<text  x="811.17" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (11 samples, 0.21%)</title><rect x="1035.0" y="309" width="2.4" height="15.0" fill="rgb(246,147,6)" rx="2" ry="2" />
<text  x="1037.95" y="319.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%)</title><rect x="1042.2" y="373" width="0.7" height="15.0" fill="rgb(214,35,45)" rx="2" ry="2" />
<text  x="1045.22" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="16.1" y="533" width="0.3" height="15.0" fill="rgb(254,63,26)" rx="2" ry="2" />
<text  x="19.13" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="262.9" y="165" width="0.2" height="15.0" fill="rgb(234,221,52)" rx="2" ry="2" />
<text  x="265.89" y="175.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="17.0" y="581" width="0.3" height="15.0" fill="rgb(223,202,36)" rx="2" ry="2" />
<text  x="20.04" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (17 samples, 0.33%)</title><rect x="266.5" y="197" width="3.9" height="15.0" fill="rgb(219,151,54)" rx="2" ry="2" />
<text  x="269.52" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="1042.2" y="341" width="0.7" height="15.0" fill="rgb(227,227,47)" rx="2" ry="2" />
<text  x="1045.22" y="351.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (112 samples, 2.15%)</title><rect x="377.8" y="213" width="25.4" height="15.0" fill="rgb(228,40,0)" rx="2" ry="2" />
<text  x="380.76" y="223.5" >w..</text>
</g>
<g >
<title>operator delete (10 samples, 0.19%)</title><rect x="585.9" y="325" width="2.3" height="15.0" fill="rgb(238,32,49)" rx="2" ry="2" />
<text  x="588.93" y="335.5" ></text>
</g>
<g >
<title>__start_context (294 samples, 5.66%)</title><rect x="15.9" y="645" width="66.7" height="15.0" fill="rgb(253,1,44)" rx="2" ry="2" />
<text  x="18.90" y="655.5" >__start..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%)</title><rect x="292.4" y="229" width="0.2" height="15.0" fill="rgb(250,96,51)" rx="2" ry="2" />
<text  x="295.40" y="239.5" ></text>
</g>
<g >
<title>partition_entry::read (2 samples, 0.04%)</title><rect x="546.2" y="357" width="0.5" height="15.0" fill="rgb(242,158,7)" rx="2" ry="2" />
<text  x="549.20" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="40.4" y="341" width="0.5" height="15.0" fill="rgb(245,22,24)" rx="2" ry="2" />
<text  x="43.42" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (7 samples, 0.13%)</title><rect x="979.3" y="357" width="1.6" height="15.0" fill="rgb(254,75,43)" rx="2" ry="2" />
<text  x="982.33" y="367.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="442.9" y="293" width="0.5" height="15.0" fill="rgb(247,217,13)" rx="2" ry="2" />
<text  x="445.91" y="303.5" ></text>
</g>
<g >
<title>main::$_3::operator (1 samples, 0.02%)</title><rect x="723.0" y="469" width="0.3" height="15.0" fill="rgb(237,218,53)" rx="2" ry="2" />
<text  x="726.04" y="479.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="477.9" y="309" width="0.4" height="15.0" fill="rgb(236,109,7)" rx="2" ry="2" />
<text  x="480.87" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="39.7" y="293" width="0.7" height="15.0" fill="rgb(221,212,11)" rx="2" ry="2" />
<text  x="42.74" y="303.5" ></text>
</g>
<g >
<title>sstables::sstable::create_data (1 samples, 0.02%)</title><rect x="82.9" y="533" width="0.2" height="15.0" fill="rgb(205,79,32)" rx="2" ry="2" />
<text  x="85.87" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.1" y="293" width="0.2" height="15.0" fill="rgb(246,7,53)" rx="2" ry="2" />
<text  x="44.10" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%)</title><rect x="753.7" y="325" width="0.7" height="15.0" fill="rgb(249,173,0)" rx="2" ry="2" />
<text  x="756.69" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="44.5" y="309" width="0.7" height="15.0" fill="rgb(210,42,54)" rx="2" ry="2" />
<text  x="47.51" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (340 samples, 6.54%)</title><rect x="353.5" y="261" width="77.2" height="15.0" fill="rgb(212,109,20)" rx="2" ry="2" />
<text  x="356.47" y="271.5" >compact_..</text>
</g>
<g >
<title>mutation::set_clustered_cell (6 samples, 0.12%)</title><rect x="872.2" y="325" width="1.3" height="15.0" fill="rgb(219,9,52)" rx="2" ry="2" />
<text  x="875.19" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%)</title><rect x="992.3" y="341" width="2.5" height="15.0" fill="rgb(214,159,10)" rx="2" ry="2" />
<text  x="995.27" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="23.6" y="405" width="0.9" height="15.0" fill="rgb(217,159,17)" rx="2" ry="2" />
<text  x="26.62" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.15%)</title><rect x="385.9" y="197" width="1.8" height="15.0" fill="rgb(254,155,32)" rx="2" ry="2" />
<text  x="388.93" y="207.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%)</title><rect x="284.5" y="245" width="0.6" height="15.0" fill="rgb(247,181,6)" rx="2" ry="2" />
<text  x="287.46" y="255.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="763.7" y="437" width="0.2" height="15.0" fill="rgb(228,115,24)" rx="2" ry="2" />
<text  x="766.67" y="447.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (4 samples, 0.08%)</title><rect x="1127.6" y="277" width="0.9" height="15.0" fill="rgb(205,119,23)" rx="2" ry="2" />
<text  x="1130.57" y="287.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="243.8" y="101" width="0.2" height="15.0" fill="rgb(240,218,17)" rx="2" ry="2" />
<text  x="246.82" y="111.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="797.3" y="213" width="0.2" height="15.0" fill="rgb(244,104,6)" rx="2" ry="2" />
<text  x="800.27" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="696.0" y="309" width="0.3" height="15.0" fill="rgb(210,192,11)" rx="2" ry="2" />
<text  x="699.03" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (9 samples, 0.17%)</title><rect x="904.9" y="373" width="2.0" height="15.0" fill="rgb(232,18,18)" rx="2" ry="2" />
<text  x="907.87" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="84.0" y="437" width="0.2" height="15.0" fill="rgb(208,13,2)" rx="2" ry="2" />
<text  x="87.01" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="425.9" y="197" width="2.3" height="15.0" fill="rgb(228,80,27)" rx="2" ry="2" />
<text  x="428.88" y="207.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (15 samples, 0.29%)</title><rect x="828.4" y="405" width="3.4" height="15.0" fill="rgb(232,223,38)" rx="2" ry="2" />
<text  x="831.37" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="365.5" y="229" width="0.2" height="15.0" fill="rgb(235,209,16)" rx="2" ry="2" />
<text  x="368.50" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="44.1" y="245" width="0.4" height="15.0" fill="rgb(219,135,20)" rx="2" ry="2" />
<text  x="47.05" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (35 samples, 0.67%)</title><rect x="435.0" y="277" width="7.9" height="15.0" fill="rgb(218,218,20)" rx="2" ry="2" />
<text  x="437.96" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="63.1" y="309" width="0.2" height="15.0" fill="rgb(239,50,12)" rx="2" ry="2" />
<text  x="66.12" y="319.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="292.9" y="213" width="1.1" height="15.0" fill="rgb(214,50,2)" rx="2" ry="2" />
<text  x="295.85" y="223.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%)</title><rect x="82.0" y="549" width="0.4" height="15.0" fill="rgb(224,108,7)" rx="2" ry="2" />
<text  x="84.96" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="56.1" y="133" width="0.4" height="15.0" fill="rgb(211,217,52)" rx="2" ry="2" />
<text  x="59.08" y="143.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,760 samples, 91.57%)</title><rect x="87.4" y="565" width="1080.6" height="15.0" fill="rgb(243,4,27)" rx="2" ry="2" />
<text  x="90.41" y="575.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%)</title><rect x="907.4" y="405" width="0.4" height="15.0" fill="rgb(253,20,21)" rx="2" ry="2" />
<text  x="910.37" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (2 samples, 0.04%)</title><rect x="279.0" y="261" width="0.5" height="15.0" fill="rgb(226,101,19)" rx="2" ry="2" />
<text  x="282.01" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (6 samples, 0.12%)</title><rect x="1110.8" y="453" width="1.3" height="15.0" fill="rgb(236,78,1)" rx="2" ry="2" />
<text  x="1113.77" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="109.0" y="485" width="0.2" height="15.0" fill="rgb(252,115,25)" rx="2" ry="2" />
<text  x="111.98" y="495.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="109.2" y="453" width="0.2" height="15.0" fill="rgb(233,179,7)" rx="2" ry="2" />
<text  x="112.20" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="271.5" y="181" width="0.2" height="15.0" fill="rgb(232,14,3)" rx="2" ry="2" />
<text  x="274.52" y="191.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="27.7" y="261" width="0.2" height="15.0" fill="rgb(229,38,6)" rx="2" ry="2" />
<text  x="30.71" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,308 samples, 44.40%)</title><rect x="117.1" y="517" width="524.0" height="15.0" fill="rgb(226,105,54)" rx="2" ry="2" />
<text  x="120.15" y="527.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="659.9" y="357" width="0.3" height="15.0" fill="rgb(230,131,25)" rx="2" ry="2" />
<text  x="662.93" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (12 samples, 0.23%)</title><rect x="499.4" y="293" width="2.8" height="15.0" fill="rgb(253,121,3)" rx="2" ry="2" />
<text  x="502.43" y="303.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%)</title><rect x="966.8" y="389" width="0.5" height="15.0" fill="rgb(210,220,24)" rx="2" ry="2" />
<text  x="969.85" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="99.7" y="517" width="0.2" height="15.0" fill="rgb(207,64,31)" rx="2" ry="2" />
<text  x="102.67" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="461.3" y="389" width="0.5" height="15.0" fill="rgb(237,54,54)" rx="2" ry="2" />
<text  x="464.30" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="264.7" y="213" width="0.2" height="15.0" fill="rgb(212,128,43)" rx="2" ry="2" />
<text  x="267.71" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="133" width="0.4" height="15.0" fill="rgb(245,29,36)" rx="2" ry="2" />
<text  x="57.27" y="143.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (1 samples, 0.02%)</title><rect x="69.5" y="469" width="0.2" height="15.0" fill="rgb(217,175,10)" rx="2" ry="2" />
<text  x="72.48" y="479.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (19 samples, 0.37%)</title><rect x="257.2" y="197" width="4.3" height="15.0" fill="rgb(232,160,49)" rx="2" ry="2" />
<text  x="260.21" y="207.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="61.5" y="325" width="0.3" height="15.0" fill="rgb(238,14,9)" rx="2" ry="2" />
<text  x="64.53" y="335.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.2" y="357" width="0.2" height="15.0" fill="rgb(210,196,51)" rx="2" ry="2" />
<text  x="70.21" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.8" y="405" width="0.3" height="15.0" fill="rgb(218,152,5)" rx="2" ry="2" />
<text  x="68.84" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1148.0" y="485" width="0.2" height="15.0" fill="rgb(243,109,44)" rx="2" ry="2" />
<text  x="1151.00" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="936.2" y="405" width="0.2" height="15.0" fill="rgb(207,174,15)" rx="2" ry="2" />
<text  x="939.20" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="537.6" y="277" width="0.2" height="15.0" fill="rgb(250,213,38)" rx="2" ry="2" />
<text  x="540.57" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1021.3" y="181" width="0.3" height="15.0" fill="rgb(214,46,2)" rx="2" ry="2" />
<text  x="1024.33" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="847.2" y="405" width="0.2" height="15.0" fill="rgb(229,51,21)" rx="2" ry="2" />
<text  x="850.21" y="415.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="34.7" y="277" width="0.3" height="15.0" fill="rgb(209,22,19)" rx="2" ry="2" />
<text  x="37.74" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="48.6" y="277" width="0.2" height="15.0" fill="rgb(212,163,23)" rx="2" ry="2" />
<text  x="51.59" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="555.3" y="325" width="0.2" height="15.0" fill="rgb(227,182,29)" rx="2" ry="2" />
<text  x="558.28" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1118.9" y="405" width="7.8" height="15.0" fill="rgb(239,17,19)" rx="2" ry="2" />
<text  x="1121.95" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,761 samples, 91.59%)</title><rect x="87.4" y="613" width="1080.8" height="15.0" fill="rgb(222,145,25)" rx="2" ry="2" />
<text  x="90.41" y="623.5" >seastar::app_template::run</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="62.4" y="325" width="0.3" height="15.0" fill="rgb(248,190,36)" rx="2" ry="2" />
<text  x="65.44" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1168.0" y="565" width="0.2" height="15.0" fill="rgb(250,21,9)" rx="2" ry="2" />
<text  x="1170.98" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="840.2" y="469" width="0.2" height="15.0" fill="rgb(226,91,8)" rx="2" ry="2" />
<text  x="843.18" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::done (1 samples, 0.02%)</title><rect x="696.9" y="533" width="0.3" height="15.0" fill="rgb(234,66,1)" rx="2" ry="2" />
<text  x="699.93" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="389" width="0.5" height="15.0" fill="rgb(213,138,17)" rx="2" ry="2" />
<text  x="699.03" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (2 samples, 0.04%)</title><rect x="696.0" y="533" width="0.5" height="15.0" fill="rgb(213,138,21)" rx="2" ry="2" />
<text  x="699.03" y="543.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="927.3" y="373" width="1.4" height="15.0" fill="rgb(225,139,1)" rx="2" ry="2" />
<text  x="930.35" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1112.6" y="453" width="0.2" height="15.0" fill="rgb(235,213,12)" rx="2" ry="2" />
<text  x="1115.59" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="254.3" y="133" width="0.4" height="15.0" fill="rgb(206,149,10)" rx="2" ry="2" />
<text  x="257.26" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="82.6" y="629" width="0.3" height="15.0" fill="rgb(250,102,23)" rx="2" ry="2" />
<text  x="85.64" y="639.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="582.3" y="325" width="0.4" height="15.0" fill="rgb(227,49,37)" rx="2" ry="2" />
<text  x="585.29" y="335.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="853.8" y="405" width="0.5" height="15.0" fill="rgb(235,177,2)" rx="2" ry="2" />
<text  x="856.80" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="108.1" y="517" width="0.2" height="15.0" fill="rgb(210,5,1)" rx="2" ry="2" />
<text  x="111.07" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="480.1" y="325" width="0.3" height="15.0" fill="rgb(231,17,22)" rx="2" ry="2" />
<text  x="483.14" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="575.3" y="453" width="0.2" height="15.0" fill="rgb(249,156,12)" rx="2" ry="2" />
<text  x="578.26" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%)</title><rect x="25.4" y="245" width="0.7" height="15.0" fill="rgb(220,78,4)" rx="2" ry="2" />
<text  x="28.44" y="255.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="874.5" y="309" width="0.2" height="15.0" fill="rgb(248,58,23)" rx="2" ry="2" />
<text  x="877.46" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.2" y="277" width="0.2" height="15.0" fill="rgb(223,198,18)" rx="2" ry="2" />
<text  x="53.18" y="287.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="290.1" y="213" width="0.5" height="15.0" fill="rgb(230,111,11)" rx="2" ry="2" />
<text  x="293.13" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="841.5" y="421" width="3.2" height="15.0" fill="rgb(232,98,6)" rx="2" ry="2" />
<text  x="844.54" y="431.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Lexer (1 samples, 0.02%)</title><rect x="21.6" y="469" width="0.2" height="15.0" fill="rgb(228,90,42)" rx="2" ry="2" />
<text  x="24.58" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (8 samples, 0.15%)</title><rect x="728.7" y="485" width="1.8" height="15.0" fill="rgb(234,202,8)" rx="2" ry="2" />
<text  x="731.71" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (469 samples, 9.02%)</title><rect x="341.0" y="341" width="106.4" height="15.0" fill="rgb(226,147,12)" rx="2" ry="2" />
<text  x="343.98" y="351.5" >std::__invoke..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="681.0" y="485" width="0.3" height="15.0" fill="rgb(218,88,42)" rx="2" ry="2" />
<text  x="684.04" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="512.6" y="229" width="1.6" height="15.0" fill="rgb(222,171,36)" rx="2" ry="2" />
<text  x="515.60" y="239.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="761.4" y="405" width="0.2" height="15.0" fill="rgb(233,150,50)" rx="2" ry="2" />
<text  x="764.40" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (47 samples, 0.90%)</title><rect x="841.3" y="469" width="10.7" height="15.0" fill="rgb(216,63,25)" rx="2" ry="2" />
<text  x="844.31" y="479.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (38 samples, 0.73%)</title><rect x="506.7" y="293" width="8.6" height="15.0" fill="rgb(219,52,50)" rx="2" ry="2" />
<text  x="509.70" y="303.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (3 samples, 0.06%)</title><rect x="79.9" y="373" width="0.7" height="15.0" fill="rgb(214,34,0)" rx="2" ry="2" />
<text  x="82.92" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="38.4" y="293" width="0.2" height="15.0" fill="rgb(226,167,22)" rx="2" ry="2" />
<text  x="41.38" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="348.2" y="293" width="0.3" height="15.0" fill="rgb(217,87,47)" rx="2" ry="2" />
<text  x="351.25" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="755.3" y="341" width="2.0" height="15.0" fill="rgb(220,75,32)" rx="2" ry="2" />
<text  x="758.28" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="660.6" y="469" width="0.7" height="15.0" fill="rgb(220,34,46)" rx="2" ry="2" />
<text  x="663.61" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.9" y="277" width="0.2" height="15.0" fill="rgb(232,15,2)" rx="2" ry="2" />
<text  x="48.87" y="287.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="78.8" y="405" width="0.2" height="15.0" fill="rgb(218,117,24)" rx="2" ry="2" />
<text  x="81.78" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (13 samples, 0.25%)</title><rect x="404.8" y="245" width="2.9" height="15.0" fill="rgb(221,57,26)" rx="2" ry="2" />
<text  x="407.77" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (1 samples, 0.02%)</title><rect x="38.6" y="357" width="0.2" height="15.0" fill="rgb(247,36,50)" rx="2" ry="2" />
<text  x="41.60" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="684.0" y="485" width="0.9" height="15.0" fill="rgb(242,1,16)" rx="2" ry="2" />
<text  x="686.99" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="696.0" y="341" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="699.03" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (5 samples, 0.10%)</title><rect x="1166.8" y="533" width="1.2" height="15.0" fill="rgb(207,133,36)" rx="2" ry="2" />
<text  x="1169.84" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (28 samples, 0.54%)</title><rect x="595.2" y="405" width="6.4" height="15.0" fill="rgb(224,161,42)" rx="2" ry="2" />
<text  x="598.23" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="342.8" y="277" width="0.2" height="15.0" fill="rgb(224,6,2)" rx="2" ry="2" />
<text  x="345.80" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="615.4" y="389" width="0.5" height="15.0" fill="rgb(221,106,53)" rx="2" ry="2" />
<text  x="618.44" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="108.5" y="373" width="0.2" height="15.0" fill="rgb(206,136,48)" rx="2" ry="2" />
<text  x="111.52" y="383.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="857.9" y="469" width="1.8" height="15.0" fill="rgb(253,142,23)" rx="2" ry="2" />
<text  x="860.88" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (451 samples, 8.68%)</title><rect x="460.2" y="405" width="102.3" height="15.0" fill="rgb(219,197,27)" rx="2" ry="2" />
<text  x="463.16" y="415.5" >std::_Functi..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="776.8" y="389" width="0.3" height="15.0" fill="rgb(250,76,34)" rx="2" ry="2" />
<text  x="779.84" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (16 samples, 0.31%)</title><rect x="871.5" y="421" width="3.6" height="15.0" fill="rgb(245,218,22)" rx="2" ry="2" />
<text  x="874.50" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1037.9" y="325" width="0.2" height="15.0" fill="rgb(234,165,48)" rx="2" ry="2" />
<text  x="1040.90" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="950.1" y="357" width="0.6" height="15.0" fill="rgb(205,89,7)" rx="2" ry="2" />
<text  x="953.05" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.5" y="277" width="0.5" height="15.0" fill="rgb(253,97,28)" rx="2" ry="2" />
<text  x="54.54" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="809.3" y="261" width="0.2" height="15.0" fill="rgb(238,37,23)" rx="2" ry="2" />
<text  x="812.30" y="271.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="15.9" y="533" width="0.2" height="15.0" fill="rgb(241,0,30)" rx="2" ry="2" />
<text  x="18.90" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1160.5" y="501" width="0.2" height="15.0" fill="rgb(212,164,43)" rx="2" ry="2" />
<text  x="1163.49" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="456.5" y="421" width="0.3" height="15.0" fill="rgb(222,52,41)" rx="2" ry="2" />
<text  x="459.53" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%)</title><rect x="1133.5" y="341" width="0.4" height="15.0" fill="rgb(210,79,6)" rx="2" ry="2" />
<text  x="1136.47" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="363.5" y="181" width="0.2" height="15.0" fill="rgb(231,34,27)" rx="2" ry="2" />
<text  x="366.46" y="191.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0" y="517" width="0.2" height="15.0" fill="rgb(238,87,23)" rx="2" ry="2" />
<text  x="22.99" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1165.5" y="373" width="0.2" height="15.0" fill="rgb(232,223,50)" rx="2" ry="2" />
<text  x="1168.48" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="580.5" y="357" width="0.2" height="15.0" fill="rgb(247,182,8)" rx="2" ry="2" />
<text  x="583.48" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="348.0" y="277" width="0.2" height="15.0" fill="rgb(250,179,33)" rx="2" ry="2" />
<text  x="351.02" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.44%)</title><rect x="870.1" y="437" width="5.3" height="15.0" fill="rgb(239,99,7)" rx="2" ry="2" />
<text  x="873.14" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.2" y="293" width="0.4" height="15.0" fill="rgb(219,147,41)" rx="2" ry="2" />
<text  x="48.19" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="574.8" y="437" width="0.5" height="15.0" fill="rgb(250,78,37)" rx="2" ry="2" />
<text  x="577.80" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1127.6" y="181" width="0.2" height="15.0" fill="rgb(212,68,52)" rx="2" ry="2" />
<text  x="1130.57" y="191.5" ></text>
</g>
<g >
<title>seastar::gate::enter (2 samples, 0.04%)</title><rect x="1027.5" y="261" width="0.4" height="15.0" fill="rgb(250,8,24)" rx="2" ry="2" />
<text  x="1030.46" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="266.7" y="181" width="0.3" height="15.0" fill="rgb(207,196,44)" rx="2" ry="2" />
<text  x="269.75" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="870.1" y="373" width="0.3" height="15.0" fill="rgb(248,223,43)" rx="2" ry="2" />
<text  x="873.14" y="383.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%)</title><rect x="721.0" y="501" width="0.5" height="15.0" fill="rgb(248,132,34)" rx="2" ry="2" />
<text  x="724.00" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (13 samples, 0.25%)</title><rect x="683.8" y="501" width="2.9" height="15.0" fill="rgb(241,30,27)" rx="2" ry="2" />
<text  x="686.77" y="511.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;clustering_key_prefix&gt;::has_supporting_index (1 samples, 0.02%)</title><rect x="75.8" y="437" width="0.3" height="15.0" fill="rgb(230,85,1)" rx="2" ry="2" />
<text  x="78.83" y="447.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="120.6" y="501" width="0.2" height="15.0" fill="rgb(231,18,0)" rx="2" ry="2" />
<text  x="123.55" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (24 samples, 0.46%)</title><rect x="480.4" y="325" width="5.4" height="15.0" fill="rgb(229,34,34)" rx="2" ry="2" />
<text  x="483.37" y="335.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (28 samples, 0.54%)</title><rect x="1119.2" y="309" width="6.3" height="15.0" fill="rgb(252,153,29)" rx="2" ry="2" />
<text  x="1122.17" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="56.1" y="149" width="0.4" height="15.0" fill="rgb(242,2,47)" rx="2" ry="2" />
<text  x="59.08" y="159.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="844.3" y="373" width="0.2" height="15.0" fill="rgb(229,182,51)" rx="2" ry="2" />
<text  x="847.26" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="108.7" y="453" width="0.3" height="15.0" fill="rgb(236,99,51)" rx="2" ry="2" />
<text  x="111.75" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (41 samples, 0.79%)</title><rect x="686.7" y="533" width="9.3" height="15.0" fill="rgb(249,170,44)" rx="2" ry="2" />
<text  x="689.72" y="543.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (1 samples, 0.02%)</title><rect x="83.1" y="613" width="0.2" height="15.0" fill="rgb(220,110,25)" rx="2" ry="2" />
<text  x="86.10" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (1 samples, 0.02%)</title><rect x="1109.9" y="453" width="0.2" height="15.0" fill="rgb(251,213,38)" rx="2" ry="2" />
<text  x="1112.87" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (1 samples, 0.02%)</title><rect x="991.1" y="357" width="0.3" height="15.0" fill="rgb(221,174,12)" rx="2" ry="2" />
<text  x="994.14" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="86.7" y="437" width="0.3" height="15.0" fill="rgb(209,176,52)" rx="2" ry="2" />
<text  x="89.73" y="447.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (2 samples, 0.04%)</title><rect x="1120.5" y="181" width="0.5" height="15.0" fill="rgb(244,215,24)" rx="2" ry="2" />
<text  x="1123.53" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="57.0" y="181" width="0.7" height="15.0" fill="rgb(211,127,21)" rx="2" ry="2" />
<text  x="59.99" y="191.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.08%)</title><rect x="1120.3" y="245" width="0.9" height="15.0" fill="rgb(220,86,52)" rx="2" ry="2" />
<text  x="1123.31" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="696.3" y="357" width="0.2" height="15.0" fill="rgb(246,123,29)" rx="2" ry="2" />
<text  x="699.25" y="367.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="263.1" y="197" width="0.5" height="15.0" fill="rgb(245,219,44)" rx="2" ry="2" />
<text  x="266.12" y="207.5" ></text>
</g>
<g >
<title>database::find_uuid (22 samples, 0.42%)</title><rect x="766.2" y="421" width="5.0" height="15.0" fill="rgb(205,29,45)" rx="2" ry="2" />
<text  x="769.17" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (2 samples, 0.04%)</title><rect x="696.0" y="517" width="0.5" height="15.0" fill="rgb(220,174,36)" rx="2" ry="2" />
<text  x="699.03" y="527.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::close (1 samples, 0.02%)</title><rect x="696.9" y="469" width="0.3" height="15.0" fill="rgb(220,127,27)" rx="2" ry="2" />
<text  x="699.93" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="654.9" y="517" width="0.7" height="15.0" fill="rgb(220,55,43)" rx="2" ry="2" />
<text  x="657.94" y="527.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="871.3" y="405" width="0.2" height="15.0" fill="rgb(210,146,25)" rx="2" ry="2" />
<text  x="874.28" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="738.7" y="325" width="0.5" height="15.0" fill="rgb(217,44,38)" rx="2" ry="2" />
<text  x="741.70" y="335.5" ></text>
</g>
<g >
<title>mutation::consume&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="109.9" y="485" width="0.2" height="15.0" fill="rgb(214,37,54)" rx="2" ry="2" />
<text  x="112.88" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (4 samples, 0.08%)</title><rect x="843.1" y="373" width="0.9" height="15.0" fill="rgb(242,162,43)" rx="2" ry="2" />
<text  x="846.13" y="383.5" ></text>
</g>
<g >
<title>siglongjmp@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="19.1" y="533" width="0.4" height="15.0" fill="rgb(217,149,24)" rx="2" ry="2" />
<text  x="22.08" y="543.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1117.8" y="469" width="0.2" height="15.0" fill="rgb(248,194,3)" rx="2" ry="2" />
<text  x="1120.81" y="479.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="18.4" y="453" width="0.2" height="15.0" fill="rgb(252,39,15)" rx="2" ry="2" />
<text  x="21.40" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="61.8" y="197" width="0.4" height="15.0" fill="rgb(246,68,31)" rx="2" ry="2" />
<text  x="64.76" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (33 samples, 0.63%)</title><rect x="130.8" y="453" width="7.5" height="15.0" fill="rgb(218,23,43)" rx="2" ry="2" />
<text  x="133.77" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="689.7" y="501" width="0.7" height="15.0" fill="rgb(231,147,15)" rx="2" ry="2" />
<text  x="692.67" y="511.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="929.4" y="421" width="0.2" height="15.0" fill="rgb(211,132,8)" rx="2" ry="2" />
<text  x="932.39" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="229" width="0.2" height="15.0" fill="rgb(215,59,43)" rx="2" ry="2" />
<text  x="60.90" y="239.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="526.7" y="293" width="0.2" height="15.0" fill="rgb(219,49,0)" rx="2" ry="2" />
<text  x="529.68" y="303.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="502.4" y="309" width="0.2" height="15.0" fill="rgb(240,60,30)" rx="2" ry="2" />
<text  x="505.39" y="319.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="953.5" y="421" width="0.4" height="15.0" fill="rgb(224,160,12)" rx="2" ry="2" />
<text  x="956.46" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="741.0" y="453" width="0.2" height="15.0" fill="rgb(251,112,31)" rx="2" ry="2" />
<text  x="743.97" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="898.7" y="325" width="0.7" height="15.0" fill="rgb(219,130,52)" rx="2" ry="2" />
<text  x="901.75" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="722.4" y="517" width="0.2" height="15.0" fill="rgb(229,109,2)" rx="2" ry="2" />
<text  x="725.36" y="527.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (99 samples, 1.90%)</title><rect x="518.0" y="357" width="22.5" height="15.0" fill="rgb(206,189,36)" rx="2" ry="2" />
<text  x="521.05" y="367.5" >m..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="1143.2" y="517" width="0.7" height="15.0" fill="rgb(205,195,29)" rx="2" ry="2" />
<text  x="1146.24" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1128.9" y="245" width="0.3" height="15.0" fill="rgb(241,83,45)" rx="2" ry="2" />
<text  x="1131.93" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="658.3" y="517" width="0.3" height="15.0" fill="rgb(217,210,44)" rx="2" ry="2" />
<text  x="661.34" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="44.5" y="293" width="0.7" height="15.0" fill="rgb(251,105,40)" rx="2" ry="2" />
<text  x="47.51" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.4" y="309" width="0.2" height="15.0" fill="rgb(237,1,29)" rx="2" ry="2" />
<text  x="83.37" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;cql3::expr::expression&gt;::optional (1 samples, 0.02%)</title><rect x="64.0" y="357" width="0.3" height="15.0" fill="rgb(224,158,6)" rx="2" ry="2" />
<text  x="67.03" y="367.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="20.7" y="437" width="0.2" height="15.0" fill="rgb(243,218,28)" rx="2" ry="2" />
<text  x="23.67" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="922.4" y="421" width="0.2" height="15.0" fill="rgb(213,4,13)" rx="2" ry="2" />
<text  x="925.35" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (1 samples, 0.02%)</title><rect x="696.5" y="389" width="0.2" height="15.0" fill="rgb(213,2,35)" rx="2" ry="2" />
<text  x="699.48" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="697.2" y="501" width="0.2" height="15.0" fill="rgb(233,14,45)" rx="2" ry="2" />
<text  x="700.16" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;locator::i_endpoint_snitch::init_snitch_obj&lt;&gt; (1 samples, 0.02%)</title><rect x="723.0" y="293" width="0.3" height="15.0" fill="rgb(218,125,0)" rx="2" ry="2" />
<text  x="726.04" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="57.7" y="261" width="0.4" height="15.0" fill="rgb(218,157,35)" rx="2" ry="2" />
<text  x="60.67" y="271.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="138.7" y="453" width="0.2" height="15.0" fill="rgb(228,170,12)" rx="2" ry="2" />
<text  x="141.71" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1000.7" y="293" width="2.0" height="15.0" fill="rgb(230,137,54)" rx="2" ry="2" />
<text  x="1003.67" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="814.1" y="309" width="0.4" height="15.0" fill="rgb(223,44,24)" rx="2" ry="2" />
<text  x="817.07" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="950.7" y="405" width="0.3" height="15.0" fill="rgb(246,184,43)" rx="2" ry="2" />
<text  x="953.73" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.7" y="181" width="0.3" height="15.0" fill="rgb(246,97,0)" rx="2" ry="2" />
<text  x="42.74" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="272.0" y="229" width="0.2" height="15.0" fill="rgb(219,71,18)" rx="2" ry="2" />
<text  x="274.97" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1094.4" y="373" width="0.3" height="15.0" fill="rgb(223,155,1)" rx="2" ry="2" />
<text  x="1097.43" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="846.3" y="453" width="0.2" height="15.0" fill="rgb(248,75,53)" rx="2" ry="2" />
<text  x="849.31" y="463.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="824.1" y="373" width="0.4" height="15.0" fill="rgb(237,150,53)" rx="2" ry="2" />
<text  x="827.06" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (3 samples, 0.06%)</title><rect x="108.5" y="501" width="0.7" height="15.0" fill="rgb(237,76,15)" rx="2" ry="2" />
<text  x="111.52" y="511.5" ></text>
</g>
<g >
<title>__strlen_avx2 (6 samples, 0.12%)</title><rect x="1005.2" y="277" width="1.4" height="15.0" fill="rgb(221,155,16)" rx="2" ry="2" />
<text  x="1008.21" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="116.7" y="517" width="0.4" height="15.0" fill="rgb(205,97,0)" rx="2" ry="2" />
<text  x="119.69" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="184.6" y="309" width="0.2" height="15.0" fill="rgb(212,49,35)" rx="2" ry="2" />
<text  x="187.57" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="308.7" y="357" width="0.3" height="15.0" fill="rgb(235,152,5)" rx="2" ry="2" />
<text  x="311.75" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="735.5" y="373" width="0.5" height="15.0" fill="rgb(250,118,8)" rx="2" ry="2" />
<text  x="738.53" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (11 samples, 0.21%)</title><rect x="871.7" y="357" width="2.5" height="15.0" fill="rgb(227,190,13)" rx="2" ry="2" />
<text  x="874.73" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="981.6" y="373" width="0.9" height="15.0" fill="rgb(231,145,4)" rx="2" ry="2" />
<text  x="984.60" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="694.2" y="501" width="0.2" height="15.0" fill="rgb(205,83,27)" rx="2" ry="2" />
<text  x="697.21" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (10 samples, 0.19%)</title><rect x="288.8" y="229" width="2.2" height="15.0" fill="rgb(225,152,9)" rx="2" ry="2" />
<text  x="291.77" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="693.8" y="485" width="0.4" height="15.0" fill="rgb(217,218,8)" rx="2" ry="2" />
<text  x="696.76" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.1" y="261" width="0.4" height="15.0" fill="rgb(234,207,34)" rx="2" ry="2" />
<text  x="47.05" y="271.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="19.8" y="501" width="0.2" height="15.0" fill="rgb(242,130,14)" rx="2" ry="2" />
<text  x="22.76" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1131.7" y="181" width="0.2" height="15.0" fill="rgb(206,8,38)" rx="2" ry="2" />
<text  x="1134.66" y="191.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (4 samples, 0.08%)</title><rect x="1127.6" y="261" width="0.9" height="15.0" fill="rgb(229,185,35)" rx="2" ry="2" />
<text  x="1130.57" y="271.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1075.4" y="341" width="0.6" height="15.0" fill="rgb(228,204,7)" rx="2" ry="2" />
<text  x="1078.36" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1022.2" y="245" width="0.3" height="15.0" fill="rgb(249,188,24)" rx="2" ry="2" />
<text  x="1025.24" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (5 samples, 0.10%)</title><rect x="682.2" y="517" width="1.1" height="15.0" fill="rgb(228,209,38)" rx="2" ry="2" />
<text  x="685.18" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.12%)</title><rect x="313.7" y="357" width="1.4" height="15.0" fill="rgb(223,94,33)" rx="2" ry="2" />
<text  x="316.74" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="852.0" y="485" width="0.2" height="15.0" fill="rgb(242,153,31)" rx="2" ry="2" />
<text  x="854.98" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="1127.6" y="197" width="0.2" height="15.0" fill="rgb(231,175,24)" rx="2" ry="2" />
<text  x="1130.57" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="859.7" y="485" width="0.2" height="15.0" fill="rgb(228,139,27)" rx="2" ry="2" />
<text  x="862.70" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="79.9" y="421" width="0.9" height="15.0" fill="rgb(229,53,49)" rx="2" ry="2" />
<text  x="82.92" y="431.5" ></text>
</g>
<g >
<title>query::result::builder::builder (1 samples, 0.02%)</title><rect x="612.3" y="469" width="0.2" height="15.0" fill="rgb(240,209,5)" rx="2" ry="2" />
<text  x="615.26" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="850.4" y="389" width="0.2" height="15.0" fill="rgb(214,22,13)" rx="2" ry="2" />
<text  x="853.39" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (5 samples, 0.10%)</title><rect x="475.8" y="293" width="1.2" height="15.0" fill="rgb(209,50,12)" rx="2" ry="2" />
<text  x="478.83" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1128.9" y="293" width="4.6" height="15.0" fill="rgb(242,121,26)" rx="2" ry="2" />
<text  x="1131.93" y="303.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="517" width="0.2" height="15.0" fill="rgb(223,210,11)" rx="2" ry="2" />
<text  x="20.26" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="74.5" y="293" width="0.4" height="15.0" fill="rgb(240,193,14)" rx="2" ry="2" />
<text  x="77.47" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (2 samples, 0.04%)</title><rect x="71.7" y="437" width="0.5" height="15.0" fill="rgb(221,30,12)" rx="2" ry="2" />
<text  x="74.75" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="798.4" y="213" width="0.2" height="15.0" fill="rgb(244,223,49)" rx="2" ry="2" />
<text  x="801.41" y="223.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="678.1" y="453" width="0.9" height="15.0" fill="rgb(213,225,38)" rx="2" ry="2" />
<text  x="681.09" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="530.3" y="213" width="0.7" height="15.0" fill="rgb(218,214,52)" rx="2" ry="2" />
<text  x="533.31" y="223.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (4 samples, 0.08%)</title><rect x="508.1" y="245" width="0.9" height="15.0" fill="rgb(241,127,11)" rx="2" ry="2" />
<text  x="511.06" y="255.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="157.8" y="469" width="0.9" height="15.0" fill="rgb(233,70,17)" rx="2" ry="2" />
<text  x="160.78" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.10%)</title><rect x="987.7" y="309" width="1.2" height="15.0" fill="rgb(242,175,26)" rx="2" ry="2" />
<text  x="990.73" y="319.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="696.7" y="373" width="0.2" height="15.0" fill="rgb(246,128,47)" rx="2" ry="2" />
<text  x="699.71" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="723.0" y="517" width="0.3" height="15.0" fill="rgb(229,165,37)" rx="2" ry="2" />
<text  x="726.04" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (211 samples, 4.06%)</title><rect x="21.4" y="501" width="47.8" height="15.0" fill="rgb(205,191,37)" rx="2" ry="2" />
<text  x="24.35" y="511.5" >cql3..</text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (1 samples, 0.02%)</title><rect x="722.8" y="421" width="0.2" height="15.0" fill="rgb(239,140,13)" rx="2" ry="2" />
<text  x="725.81" y="431.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (2 samples, 0.04%)</title><rect x="1047.4" y="373" width="0.5" height="15.0" fill="rgb(232,13,25)" rx="2" ry="2" />
<text  x="1050.44" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (24 samples, 0.46%)</title><rect x="528.9" y="277" width="5.5" height="15.0" fill="rgb(243,119,53)" rx="2" ry="2" />
<text  x="531.95" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.5" y="565" width="0.2" height="15.0" fill="rgb(232,40,5)" rx="2" ry="2" />
<text  x="20.49" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="558.5" y="293" width="0.2" height="15.0" fill="rgb(250,96,46)" rx="2" ry="2" />
<text  x="561.46" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1118.9" y="421" width="7.8" height="15.0" fill="rgb(212,14,18)" rx="2" ry="2" />
<text  x="1121.95" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1118.9" y="453" width="7.8" height="15.0" fill="rgb(210,3,44)" rx="2" ry="2" />
<text  x="1121.95" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.10%)</title><rect x="47.0" y="197" width="1.1" height="15.0" fill="rgb(220,229,50)" rx="2" ry="2" />
<text  x="50.00" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="1123.3" y="229" width="0.2" height="15.0" fill="rgb(237,79,12)" rx="2" ry="2" />
<text  x="1126.26" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="128.3" y="469" width="0.2" height="15.0" fill="rgb(232,208,23)" rx="2" ry="2" />
<text  x="131.27" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="306.2" y="309" width="0.5" height="15.0" fill="rgb(210,141,18)" rx="2" ry="2" />
<text  x="309.25" y="319.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="608.2" y="437" width="1.1" height="15.0" fill="rgb(220,80,54)" rx="2" ry="2" />
<text  x="611.17" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (2 samples, 0.04%)</title><rect x="109.7" y="533" width="0.4" height="15.0" fill="rgb(211,124,38)" rx="2" ry="2" />
<text  x="112.66" y="543.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="108.5" y="421" width="0.2" height="15.0" fill="rgb(235,160,47)" rx="2" ry="2" />
<text  x="111.52" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="732.6" y="485" width="0.2" height="15.0" fill="rgb(219,23,34)" rx="2" ry="2" />
<text  x="735.57" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="204.3" y="293" width="1.2" height="15.0" fill="rgb(214,67,25)" rx="2" ry="2" />
<text  x="207.32" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (16 samples, 0.31%)</title><rect x="437.2" y="229" width="3.7" height="15.0" fill="rgb(234,212,24)" rx="2" ry="2" />
<text  x="440.23" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%)</title><rect x="702.8" y="485" width="0.3" height="15.0" fill="rgb(223,180,0)" rx="2" ry="2" />
<text  x="705.84" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="868.3" y="405" width="0.3" height="15.0" fill="rgb(215,151,43)" rx="2" ry="2" />
<text  x="871.33" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="980.5" y="293" width="0.2" height="15.0" fill="rgb(216,216,54)" rx="2" ry="2" />
<text  x="983.47" y="303.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="110.8" y="293" width="0.2" height="15.0" fill="rgb(208,206,35)" rx="2" ry="2" />
<text  x="113.79" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="134.9" y="405" width="0.2" height="15.0" fill="rgb(207,146,27)" rx="2" ry="2" />
<text  x="137.86" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%)</title><rect x="21.4" y="469" width="0.2" height="15.0" fill="rgb(239,172,51)" rx="2" ry="2" />
<text  x="24.35" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="23.6" y="421" width="0.9" height="15.0" fill="rgb(207,3,53)" rx="2" ry="2" />
<text  x="26.62" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="52.9" y="165" width="0.5" height="15.0" fill="rgb(207,17,45)" rx="2" ry="2" />
<text  x="55.90" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="1084.9" y="421" width="1.6" height="15.0" fill="rgb(217,44,40)" rx="2" ry="2" />
<text  x="1087.89" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%)</title><rect x="594.3" y="405" width="0.9" height="15.0" fill="rgb(228,219,5)" rx="2" ry="2" />
<text  x="597.32" y="415.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="109.2" y="389" width="0.2" height="15.0" fill="rgb(243,187,35)" rx="2" ry="2" />
<text  x="112.20" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="906.7" y="341" width="0.2" height="15.0" fill="rgb(209,34,50)" rx="2" ry="2" />
<text  x="909.69" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (1 samples, 0.02%)</title><rect x="109.2" y="517" width="0.2" height="15.0" fill="rgb(220,222,10)" rx="2" ry="2" />
<text  x="112.20" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="109.0" y="469" width="0.2" height="15.0" fill="rgb(213,27,42)" rx="2" ry="2" />
<text  x="111.98" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="960.9" y="405" width="0.3" height="15.0" fill="rgb(248,6,5)" rx="2" ry="2" />
<text  x="963.95" y="415.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="1131.9" y="229" width="0.2" height="15.0" fill="rgb(222,225,27)" rx="2" ry="2" />
<text  x="1134.89" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="809.3" y="277" width="1.1" height="15.0" fill="rgb(239,219,20)" rx="2" ry="2" />
<text  x="812.30" y="287.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="395.9" y="197" width="2.7" height="15.0" fill="rgb(233,101,46)" rx="2" ry="2" />
<text  x="398.92" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="1078.8" y="389" width="0.2" height="15.0" fill="rgb(236,93,18)" rx="2" ry="2" />
<text  x="1081.76" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="72.2" y="405" width="0.2" height="15.0" fill="rgb(226,212,34)" rx="2" ry="2" />
<text  x="75.20" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (13 samples, 0.25%)</title><rect x="72.9" y="437" width="2.9" height="15.0" fill="rgb(224,67,13)" rx="2" ry="2" />
<text  x="75.88" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (4 samples, 0.08%)</title><rect x="191.2" y="293" width="0.9" height="15.0" fill="rgb(249,184,4)" rx="2" ry="2" />
<text  x="194.15" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (2 samples, 0.04%)</title><rect x="138.3" y="453" width="0.4" height="15.0" fill="rgb(206,137,24)" rx="2" ry="2" />
<text  x="141.26" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%)</title><rect x="17.5" y="581" width="0.2" height="15.0" fill="rgb(243,192,33)" rx="2" ry="2" />
<text  x="20.49" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (71 samples, 1.37%)</title><rect x="792.1" y="293" width="16.1" height="15.0" fill="rgb(229,204,46)" rx="2" ry="2" />
<text  x="795.05" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.4" y="389" width="0.2" height="15.0" fill="rgb(206,5,20)" rx="2" ry="2" />
<text  x="68.39" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="455.4" y="389" width="0.2" height="15.0" fill="rgb(246,156,28)" rx="2" ry="2" />
<text  x="458.39" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="56.8" y="101" width="0.2" height="15.0" fill="rgb(237,20,27)" rx="2" ry="2" />
<text  x="59.76" y="111.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1160.7" y="485" width="0.5" height="15.0" fill="rgb(223,95,9)" rx="2" ry="2" />
<text  x="1163.72" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1036.8" y="245" width="0.6" height="15.0" fill="rgb(221,192,35)" rx="2" ry="2" />
<text  x="1039.77" y="255.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (11 samples, 0.21%)</title><rect x="1129.2" y="245" width="2.5" height="15.0" fill="rgb(209,162,36)" rx="2" ry="2" />
<text  x="1132.16" y="255.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (71 samples, 1.37%)</title><rect x="792.1" y="277" width="16.1" height="15.0" fill="rgb(213,5,12)" rx="2" ry="2" />
<text  x="795.05" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="599.8" y="357" width="0.2" height="15.0" fill="rgb(241,178,16)" rx="2" ry="2" />
<text  x="602.77" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%)</title><rect x="439.7" y="197" width="0.9" height="15.0" fill="rgb(227,116,0)" rx="2" ry="2" />
<text  x="442.73" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1126.0" y="245" width="0.2" height="15.0" fill="rgb(249,20,5)" rx="2" ry="2" />
<text  x="1128.98" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="597.0" y="373" width="0.3" height="15.0" fill="rgb(217,127,27)" rx="2" ry="2" />
<text  x="600.05" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="314.9" y="341" width="0.2" height="15.0" fill="rgb(208,204,14)" rx="2" ry="2" />
<text  x="317.87" y="351.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="297.4" y="245" width="0.2" height="15.0" fill="rgb(249,222,18)" rx="2" ry="2" />
<text  x="300.40" y="255.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="514.6" y="245" width="0.5" height="15.0" fill="rgb(232,225,47)" rx="2" ry="2" />
<text  x="517.64" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="52.7" y="261" width="0.7" height="15.0" fill="rgb(221,179,8)" rx="2" ry="2" />
<text  x="55.68" y="271.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="78.3" y="453" width="0.3" height="15.0" fill="rgb(215,87,50)" rx="2" ry="2" />
<text  x="81.33" y="463.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (2 samples, 0.04%)</title><rect x="227.9" y="165" width="0.5" height="15.0" fill="rgb(238,74,9)" rx="2" ry="2" />
<text  x="230.93" y="175.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1126.0" y="261" width="0.2" height="15.0" fill="rgb(213,156,50)" rx="2" ry="2" />
<text  x="1128.98" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="888.1" y="453" width="0.4" height="15.0" fill="rgb(209,227,6)" rx="2" ry="2" />
<text  x="891.08" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="46.3" y="357" width="0.2" height="15.0" fill="rgb(240,163,11)" rx="2" ry="2" />
<text  x="49.32" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="777.3" y="421" width="0.2" height="15.0" fill="rgb(237,199,1)" rx="2" ry="2" />
<text  x="780.30" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="18.4" y="485" width="0.2" height="15.0" fill="rgb(227,219,9)" rx="2" ry="2" />
<text  x="21.40" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="785.7" y="293" width="0.2" height="15.0" fill="rgb(249,173,26)" rx="2" ry="2" />
<text  x="788.69" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="60.9" y="357" width="0.2" height="15.0" fill="rgb(214,30,41)" rx="2" ry="2" />
<text  x="63.85" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="1011.1" y="245" width="1.2" height="15.0" fill="rgb(229,27,7)" rx="2" ry="2" />
<text  x="1014.12" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (203 samples, 3.91%)</title><rect x="22.9" y="453" width="46.1" height="15.0" fill="rgb(245,162,32)" rx="2" ry="2" />
<text  x="25.94" y="463.5" >seas..</text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="342.1" y="309" width="0.9" height="15.0" fill="rgb(243,95,22)" rx="2" ry="2" />
<text  x="345.12" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%)</title><rect x="945.3" y="453" width="0.4" height="15.0" fill="rgb(230,146,24)" rx="2" ry="2" />
<text  x="948.28" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="37.2" y="309" width="0.3" height="15.0" fill="rgb(222,56,15)" rx="2" ry="2" />
<text  x="40.24" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (37 samples, 0.71%)</title><rect x="50.2" y="341" width="8.4" height="15.0" fill="rgb(235,54,53)" rx="2" ry="2" />
<text  x="53.18" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (6 samples, 0.12%)</title><rect x="598.6" y="389" width="1.4" height="15.0" fill="rgb(218,59,2)" rx="2" ry="2" />
<text  x="601.64" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.0" y="149" width="0.2" height="15.0" fill="rgb(226,31,14)" rx="2" ry="2" />
<text  x="47.96" y="159.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (6 samples, 0.12%)</title><rect x="84.0" y="517" width="1.4" height="15.0" fill="rgb(230,140,49)" rx="2" ry="2" />
<text  x="87.01" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.8" y="229" width="0.2" height="15.0" fill="rgb(246,205,26)" rx="2" ry="2" />
<text  x="44.78" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="871.3" y="373" width="0.2" height="15.0" fill="rgb(234,176,38)" rx="2" ry="2" />
<text  x="874.28" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="79.5" y="421" width="0.2" height="15.0" fill="rgb(251,212,42)" rx="2" ry="2" />
<text  x="82.47" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (16 samples, 0.31%)</title><rect x="159.1" y="469" width="3.7" height="15.0" fill="rgb(225,228,17)" rx="2" ry="2" />
<text  x="162.15" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="361.0" y="197" width="0.2" height="15.0" fill="rgb(236,45,28)" rx="2" ry="2" />
<text  x="363.96" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="53" width="0.2" height="15.0" fill="rgb(217,165,49)" rx="2" ry="2" />
<text  x="57.27" y="63.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="59.3" y="277" width="0.2" height="15.0" fill="rgb(230,223,34)" rx="2" ry="2" />
<text  x="62.26" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.8" y="245" width="0.2" height="15.0" fill="rgb(219,197,10)" rx="2" ry="2" />
<text  x="44.78" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="125.8" y="469" width="0.2" height="15.0" fill="rgb(233,215,41)" rx="2" ry="2" />
<text  x="128.78" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1136.7" y="533" width="0.2" height="15.0" fill="rgb(236,113,30)" rx="2" ry="2" />
<text  x="1139.65" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.10%)</title><rect x="1083.3" y="405" width="1.1" height="15.0" fill="rgb(227,126,20)" rx="2" ry="2" />
<text  x="1086.31" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="56.1" y="229" width="0.4" height="15.0" fill="rgb(214,93,46)" rx="2" ry="2" />
<text  x="59.08" y="239.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (4 samples, 0.08%)</title><rect x="210.9" y="245" width="0.9" height="15.0" fill="rgb(254,14,17)" rx="2" ry="2" />
<text  x="213.90" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.8" y="581" width="0.2" height="15.0" fill="rgb(239,117,5)" rx="2" ry="2" />
<text  x="86.78" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%)</title><rect x="430.7" y="261" width="0.2" height="15.0" fill="rgb(219,139,33)" rx="2" ry="2" />
<text  x="433.65" y="271.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,172 samples, 22.55%)</title><rect x="869.0" y="533" width="266.1" height="15.0" fill="rgb(217,21,21)" rx="2" ry="2" />
<text  x="872.01" y="543.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="16.4" y="565" width="0.2" height="15.0" fill="rgb(215,58,14)" rx="2" ry="2" />
<text  x="19.36" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="696.3" y="341" width="0.2" height="15.0" fill="rgb(247,80,41)" rx="2" ry="2" />
<text  x="699.25" y="351.5" ></text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%)</title><rect x="16.8" y="597" width="0.2" height="15.0" fill="rgb(222,36,51)" rx="2" ry="2" />
<text  x="19.81" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1097.6" y="373" width="1.4" height="15.0" fill="rgb(252,91,47)" rx="2" ry="2" />
<text  x="1100.61" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.5" y="101" width="0.3" height="15.0" fill="rgb(214,184,38)" rx="2" ry="2" />
<text  x="59.54" y="111.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="666.3" y="421" width="0.2" height="15.0" fill="rgb(207,28,24)" rx="2" ry="2" />
<text  x="669.29" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="522.4" y="325" width="0.4" height="15.0" fill="rgb(239,140,19)" rx="2" ry="2" />
<text  x="525.36" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="55.9" y="277" width="0.2" height="15.0" fill="rgb(251,112,23)" rx="2" ry="2" />
<text  x="58.86" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="405.0" y="229" width="0.5" height="15.0" fill="rgb(242,182,20)" rx="2" ry="2" />
<text  x="408.00" y="239.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1067.0" y="293" width="0.2" height="15.0" fill="rgb(253,208,16)" rx="2" ry="2" />
<text  x="1069.96" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="796.1" y="245" width="0.3" height="15.0" fill="rgb(247,39,52)" rx="2" ry="2" />
<text  x="799.14" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (15 samples, 0.29%)</title><rect x="841.3" y="453" width="3.4" height="15.0" fill="rgb(232,40,50)" rx="2" ry="2" />
<text  x="844.31" y="463.5" ></text>
</g>
<g >
<title>partition_entry::read (10 samples, 0.19%)</title><rect x="541.9" y="341" width="2.3" height="15.0" fill="rgb(212,207,48)" rx="2" ry="2" />
<text  x="544.89" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="291.3" y="229" width="0.2" height="15.0" fill="rgb(225,149,51)" rx="2" ry="2" />
<text  x="294.27" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="51.8" y="261" width="0.2" height="15.0" fill="rgb(224,152,15)" rx="2" ry="2" />
<text  x="54.77" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="52.9" y="149" width="0.5" height="15.0" fill="rgb(246,45,15)" rx="2" ry="2" />
<text  x="55.90" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="735.5" y="357" width="0.5" height="15.0" fill="rgb(241,127,0)" rx="2" ry="2" />
<text  x="738.53" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="261.5" y="197" width="0.3" height="15.0" fill="rgb(216,94,5)" rx="2" ry="2" />
<text  x="264.53" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (91 samples, 1.75%)</title><rect x="909.9" y="437" width="20.6" height="15.0" fill="rgb(238,154,25)" rx="2" ry="2" />
<text  x="912.87" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="869.0" y="517" width="0.2" height="15.0" fill="rgb(230,130,31)" rx="2" ry="2" />
<text  x="872.01" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="968.2" y="357" width="0.7" height="15.0" fill="rgb(216,225,33)" rx="2" ry="2" />
<text  x="971.21" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (77 samples, 1.48%)</title><rect x="661.5" y="533" width="17.5" height="15.0" fill="rgb(210,86,15)" rx="2" ry="2" />
<text  x="664.52" y="543.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="869.7" y="389" width="0.4" height="15.0" fill="rgb(237,220,23)" rx="2" ry="2" />
<text  x="872.69" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="627.2" y="437" width="0.3" height="15.0" fill="rgb(224,172,17)" rx="2" ry="2" />
<text  x="630.24" y="447.5" ></text>
</g>
<g >
<title>all (5,198 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(221,172,8)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (52 samples, 1.00%)</title><rect x="698.1" y="533" width="11.8" height="15.0" fill="rgb(224,60,31)" rx="2" ry="2" />
<text  x="701.07" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="50.2" y="293" width="0.2" height="15.0" fill="rgb(249,180,28)" rx="2" ry="2" />
<text  x="53.18" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (77 samples, 1.48%)</title><rect x="1057.9" y="341" width="17.5" height="15.0" fill="rgb(250,44,24)" rx="2" ry="2" />
<text  x="1060.88" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="58.8" y="325" width="0.5" height="15.0" fill="rgb(251,120,50)" rx="2" ry="2" />
<text  x="61.81" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="868.3" y="501" width="0.7" height="15.0" fill="rgb(233,123,48)" rx="2" ry="2" />
<text  x="871.33" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (36 samples, 0.69%)</title><rect x="894.9" y="373" width="8.2" height="15.0" fill="rgb(223,38,53)" rx="2" ry="2" />
<text  x="897.89" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1162.3" y="469" width="0.5" height="15.0" fill="rgb(227,129,49)" rx="2" ry="2" />
<text  x="1165.30" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="139.6" y="485" width="0.2" height="15.0" fill="rgb(239,191,7)" rx="2" ry="2" />
<text  x="142.62" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="844.3" y="389" width="0.2" height="15.0" fill="rgb(205,172,22)" rx="2" ry="2" />
<text  x="847.26" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (2 samples, 0.04%)</title><rect x="590.2" y="293" width="0.5" height="15.0" fill="rgb(245,79,45)" rx="2" ry="2" />
<text  x="593.24" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, auth::standard_role_manager::create_default_role_if_missing (1 samples, 0.02%)</title><rect x="696.5" y="533" width="0.2" height="15.0" fill="rgb(242,55,47)" rx="2" ry="2" />
<text  x="699.48" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="525.5" y="309" width="0.3" height="15.0" fill="rgb(243,22,37)" rx="2" ry="2" />
<text  x="528.54" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="377.1" y="213" width="0.2" height="15.0" fill="rgb(210,64,24)" rx="2" ry="2" />
<text  x="380.08" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.19%)</title><rect x="285.1" y="245" width="2.3" height="15.0" fill="rgb(254,197,19)" rx="2" ry="2" />
<text  x="288.14" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="814.5" y="309" width="0.3" height="15.0" fill="rgb(215,193,23)" rx="2" ry="2" />
<text  x="817.52" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="109.0" y="373" width="0.2" height="15.0" fill="rgb(243,45,43)" rx="2" ry="2" />
<text  x="111.98" y="383.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (34 samples, 0.65%)</title><rect x="1118.9" y="357" width="7.8" height="15.0" fill="rgb(251,69,4)" rx="2" ry="2" />
<text  x="1121.95" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="600.7" y="389" width="0.9" height="15.0" fill="rgb(230,166,0)" rx="2" ry="2" />
<text  x="603.68" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="790.9" y="261" width="0.2" height="15.0" fill="rgb(240,70,36)" rx="2" ry="2" />
<text  x="793.92" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="212.0" y="245" width="1.2" height="15.0" fill="rgb(225,75,28)" rx="2" ry="2" />
<text  x="215.04" y="255.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="622.0" y="453" width="0.5" height="15.0" fill="rgb(216,99,37)" rx="2" ry="2" />
<text  x="625.02" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="828.4" y="389" width="0.2" height="15.0" fill="rgb(210,105,9)" rx="2" ry="2" />
<text  x="831.37" y="399.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1128.3" y="181" width="0.2" height="15.0" fill="rgb(220,78,45)" rx="2" ry="2" />
<text  x="1131.25" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="491.5" y="341" width="0.7" height="15.0" fill="rgb(243,72,52)" rx="2" ry="2" />
<text  x="494.49" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="993.0" y="277" width="1.3" height="15.0" fill="rgb(239,60,39)" rx="2" ry="2" />
<text  x="995.95" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="23.8" y="309" width="0.5" height="15.0" fill="rgb(247,168,47)" rx="2" ry="2" />
<text  x="26.85" y="319.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_following (1 samples, 0.02%)</title><rect x="53.4" y="309" width="0.2" height="15.0" fill="rgb(251,209,39)" rx="2" ry="2" />
<text  x="56.36" y="319.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (44 samples, 0.85%)</title><rect x="1170.7" y="661" width="10.0" height="15.0" fill="rgb(231,85,34)" rx="2" ry="2" />
<text  x="1173.70" y="671.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="646.1" y="517" width="0.4" height="15.0" fill="rgb(243,155,10)" rx="2" ry="2" />
<text  x="649.08" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%)</title><rect x="22.5" y="453" width="0.4" height="15.0" fill="rgb(231,228,31)" rx="2" ry="2" />
<text  x="25.49" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1101.0" y="421" width="0.2" height="15.0" fill="rgb(252,197,31)" rx="2" ry="2" />
<text  x="1104.01" y="431.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="951.2" y="437" width="1.1" height="15.0" fill="rgb(224,210,18)" rx="2" ry="2" />
<text  x="954.19" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="48.6" y="293" width="0.2" height="15.0" fill="rgb(230,219,2)" rx="2" ry="2" />
<text  x="51.59" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (30 samples, 0.58%)</title><rect x="734.2" y="453" width="6.8" height="15.0" fill="rgb(219,109,36)" rx="2" ry="2" />
<text  x="737.16" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="827.0" y="309" width="0.2" height="15.0" fill="rgb(234,177,9)" rx="2" ry="2" />
<text  x="830.01" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (121 samples, 2.33%)</title><rect x="1137.3" y="533" width="27.5" height="15.0" fill="rgb(244,220,10)" rx="2" ry="2" />
<text  x="1140.33" y="543.5" >s..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="307.8" y="341" width="0.7" height="15.0" fill="rgb(220,121,8)" rx="2" ry="2" />
<text  x="310.84" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1142.1" y="485" width="0.2" height="15.0" fill="rgb(235,198,42)" rx="2" ry="2" />
<text  x="1145.10" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="45.2" y="309" width="0.7" height="15.0" fill="rgb(227,16,42)" rx="2" ry="2" />
<text  x="48.19" y="319.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%)</title><rect x="41.6" y="357" width="0.2" height="15.0" fill="rgb(240,47,13)" rx="2" ry="2" />
<text  x="44.55" y="367.5" ></text>
</g>
<g >
<title>make_combined_reader (74 samples, 1.42%)</title><rect x="469.9" y="373" width="16.8" height="15.0" fill="rgb(224,146,20)" rx="2" ry="2" />
<text  x="472.92" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="685.4" y="485" width="0.4" height="15.0" fill="rgb(235,4,40)" rx="2" ry="2" />
<text  x="688.36" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="723.0" y="373" width="0.3" height="15.0" fill="rgb(226,169,34)" rx="2" ry="2" />
<text  x="726.04" y="383.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (6 samples, 0.12%)</title><rect x="110.3" y="533" width="1.4" height="15.0" fill="rgb(254,20,39)" rx="2" ry="2" />
<text  x="113.34" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%)</title><rect x="732.3" y="485" width="0.3" height="15.0" fill="rgb(221,205,15)" rx="2" ry="2" />
<text  x="735.35" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (2 samples, 0.04%)</title><rect x="23.2" y="389" width="0.4" height="15.0" fill="rgb(214,28,25)" rx="2" ry="2" />
<text  x="26.17" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="136.2" y="421" width="0.2" height="15.0" fill="rgb(229,108,4)" rx="2" ry="2" />
<text  x="139.22" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="23.8" y="389" width="0.5" height="15.0" fill="rgb(252,137,18)" rx="2" ry="2" />
<text  x="26.85" y="399.5" ></text>
</g>
<g >
<title>row::row (132 samples, 2.54%)</title><rect x="227.2" y="181" width="30.0" height="15.0" fill="rgb(242,14,20)" rx="2" ry="2" />
<text  x="230.25" y="191.5" >ro..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (282 samples, 5.43%)</title><rect x="18.6" y="597" width="64.0" height="15.0" fill="rgb(214,155,34)" rx="2" ry="2" />
<text  x="21.63" y="607.5" >std::_F..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="300.1" y="293" width="0.2" height="15.0" fill="rgb(210,91,46)" rx="2" ry="2" />
<text  x="303.12" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="936.4" y="405" width="0.5" height="15.0" fill="rgb(248,4,10)" rx="2" ry="2" />
<text  x="939.43" y="415.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="269.7" y="181" width="0.2" height="15.0" fill="rgb(251,149,41)" rx="2" ry="2" />
<text  x="272.70" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="51.8" y="245" width="0.2" height="15.0" fill="rgb(239,142,42)" rx="2" ry="2" />
<text  x="54.77" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1112.4" y="453" width="0.2" height="15.0" fill="rgb(219,138,24)" rx="2" ry="2" />
<text  x="1115.36" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (2 samples, 0.04%)</title><rect x="853.1" y="421" width="0.5" height="15.0" fill="rgb(234,225,14)" rx="2" ry="2" />
<text  x="856.12" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%)</title><rect x="485.8" y="357" width="0.2" height="15.0" fill="rgb(246,53,42)" rx="2" ry="2" />
<text  x="488.81" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="363.2" y="213" width="0.5" height="15.0" fill="rgb(206,135,24)" rx="2" ry="2" />
<text  x="366.23" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="936.0" y="437" width="0.2" height="15.0" fill="rgb(228,223,27)" rx="2" ry="2" />
<text  x="938.98" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="44.3" y="213" width="0.2" height="15.0" fill="rgb(236,195,12)" rx="2" ry="2" />
<text  x="47.28" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.10%)</title><rect x="595.5" y="389" width="1.1" height="15.0" fill="rgb(245,104,21)" rx="2" ry="2" />
<text  x="598.46" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%)</title><rect x="111.0" y="405" width="0.2" height="15.0" fill="rgb(251,127,18)" rx="2" ry="2" />
<text  x="114.02" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="108.5" y="437" width="0.2" height="15.0" fill="rgb(239,123,44)" rx="2" ry="2" />
<text  x="111.52" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.9" y="373" width="0.3" height="15.0" fill="rgb(251,153,39)" rx="2" ry="2" />
<text  x="20.95" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::shared_ptr_count_for&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="657.0" y="501" width="0.2" height="15.0" fill="rgb(216,74,28)" rx="2" ry="2" />
<text  x="659.98" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="213.9" y="229" width="2.9" height="15.0" fill="rgb(232,50,9)" rx="2" ry="2" />
<text  x="216.86" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.3" y="229" width="0.2" height="15.0" fill="rgb(253,184,31)" rx="2" ry="2" />
<text  x="42.28" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (16 samples, 0.31%)</title><rect x="925.1" y="389" width="3.6" height="15.0" fill="rgb(243,217,7)" rx="2" ry="2" />
<text  x="928.08" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (305 samples, 5.87%)</title><rect x="763.4" y="453" width="69.3" height="15.0" fill="rgb(210,198,5)" rx="2" ry="2" />
<text  x="766.45" y="463.5" >cql3::s..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.10%)</title><rect x="821.3" y="389" width="1.2" height="15.0" fill="rgb(207,168,46)" rx="2" ry="2" />
<text  x="824.34" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="879.4" y="501" width="0.5" height="15.0" fill="rgb(211,193,26)" rx="2" ry="2" />
<text  x="882.45" y="511.5" ></text>
</g>
<g >
<title>free (12 samples, 0.23%)</title><rect x="437.9" y="213" width="2.7" height="15.0" fill="rgb(249,19,38)" rx="2" ry="2" />
<text  x="440.91" y="223.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (67 samples, 1.29%)</title><rect x="577.1" y="389" width="15.2" height="15.0" fill="rgb(228,180,45)" rx="2" ry="2" />
<text  x="580.07" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.7" y="181" width="0.3" height="15.0" fill="rgb(218,18,8)" rx="2" ry="2" />
<text  x="52.73" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1131.4" y="165" width="0.3" height="15.0" fill="rgb(251,33,54)" rx="2" ry="2" />
<text  x="1134.43" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (27 samples, 0.52%)</title><rect x="869.5" y="469" width="6.1" height="15.0" fill="rgb(234,94,28)" rx="2" ry="2" />
<text  x="872.46" y="479.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="732.1" y="485" width="0.2" height="15.0" fill="rgb(244,160,22)" rx="2" ry="2" />
<text  x="735.12" y="495.5" ></text>
</g>
<g >
<title>db::extensions::sstable_file_io_extensions (1 samples, 0.02%)</title><rect x="82.9" y="501" width="0.2" height="15.0" fill="rgb(215,23,6)" rx="2" ry="2" />
<text  x="85.87" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="27.9" y="309" width="0.3" height="15.0" fill="rgb(205,112,17)" rx="2" ry="2" />
<text  x="30.93" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="873.8" y="245" width="0.2" height="15.0" fill="rgb(250,193,21)" rx="2" ry="2" />
<text  x="876.77" y="255.5" ></text>
</g>
<g >
<title>database::query (106 samples, 2.04%)</title><rect x="1003.9" y="293" width="24.0" height="15.0" fill="rgb(207,50,12)" rx="2" ry="2" />
<text  x="1006.85" y="303.5" >d..</text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="516.2" y="357" width="0.3" height="15.0" fill="rgb(235,9,31)" rx="2" ry="2" />
<text  x="519.23" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%)</title><rect x="863.8" y="501" width="0.4" height="15.0" fill="rgb(228,50,36)" rx="2" ry="2" />
<text  x="866.79" y="511.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="1165.7" y="533" width="0.2" height="15.0" fill="rgb(236,85,38)" rx="2" ry="2" />
<text  x="1168.71" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="549.1" y="373" width="0.3" height="15.0" fill="rgb(209,157,24)" rx="2" ry="2" />
<text  x="552.15" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="907.8" y="405" width="0.3" height="15.0" fill="rgb(206,147,40)" rx="2" ry="2" />
<text  x="910.83" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="407.7" y="245" width="0.2" height="15.0" fill="rgb(238,81,44)" rx="2" ry="2" />
<text  x="410.72" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="797.7" y="213" width="0.3" height="15.0" fill="rgb(237,22,17)" rx="2" ry="2" />
<text  x="800.73" y="223.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="623.8" y="453" width="0.3" height="15.0" fill="rgb(239,192,6)" rx="2" ry="2" />
<text  x="626.84" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1021.1" y="181" width="0.2" height="15.0" fill="rgb(235,18,5)" rx="2" ry="2" />
<text  x="1024.10" y="191.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="558.0" y="293" width="0.5" height="15.0" fill="rgb(233,156,34)" rx="2" ry="2" />
<text  x="561.00" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="622.9" y="469" width="0.3" height="15.0" fill="rgb(225,40,21)" rx="2" ry="2" />
<text  x="625.93" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (19 samples, 0.37%)</title><rect x="986.1" y="341" width="4.4" height="15.0" fill="rgb(237,99,22)" rx="2" ry="2" />
<text  x="989.14" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="800.0" y="165" width="0.2" height="15.0" fill="rgb(227,0,10)" rx="2" ry="2" />
<text  x="803.00" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="904.4" y="389" width="0.2" height="15.0" fill="rgb(238,162,23)" rx="2" ry="2" />
<text  x="907.42" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="51.5" y="293" width="0.5" height="15.0" fill="rgb(253,61,50)" rx="2" ry="2" />
<text  x="54.54" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (6 samples, 0.12%)</title><rect x="46.8" y="229" width="1.3" height="15.0" fill="rgb(244,7,14)" rx="2" ry="2" />
<text  x="49.78" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (3 samples, 0.06%)</title><rect x="61.5" y="357" width="0.7" height="15.0" fill="rgb(216,80,49)" rx="2" ry="2" />
<text  x="64.53" y="367.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (6 samples, 0.12%)</title><rect x="614.5" y="421" width="1.4" height="15.0" fill="rgb(216,132,17)" rx="2" ry="2" />
<text  x="617.53" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="44.3" y="229" width="0.2" height="15.0" fill="rgb(235,119,49)" rx="2" ry="2" />
<text  x="47.28" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="607.3" y="437" width="0.2" height="15.0" fill="rgb(251,36,54)" rx="2" ry="2" />
<text  x="610.26" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="86.0" y="421" width="0.7" height="15.0" fill="rgb(237,180,41)" rx="2" ry="2" />
<text  x="89.05" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="667.4" y="469" width="0.2" height="15.0" fill="rgb(252,14,37)" rx="2" ry="2" />
<text  x="670.42" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (15 samples, 0.29%)</title><rect x="668.8" y="485" width="3.4" height="15.0" fill="rgb(248,180,2)" rx="2" ry="2" />
<text  x="671.78" y="495.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%)</title><rect x="30.2" y="293" width="0.2" height="15.0" fill="rgb(214,31,9)" rx="2" ry="2" />
<text  x="33.20" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="78.3" y="421" width="0.3" height="15.0" fill="rgb(215,206,35)" rx="2" ry="2" />
<text  x="81.33" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (2 samples, 0.04%)</title><rect x="86.7" y="533" width="0.5" height="15.0" fill="rgb(225,155,43)" rx="2" ry="2" />
<text  x="89.73" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="749.4" y="389" width="0.2" height="15.0" fill="rgb(234,104,46)" rx="2" ry="2" />
<text  x="752.37" y="399.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="510.3" y="229" width="0.7" height="15.0" fill="rgb(224,164,23)" rx="2" ry="2" />
<text  x="513.33" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;data_value, data_value&gt;, std::allocator&lt;std::pair&lt;data_value, data_value&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="109.7" y="357" width="0.2" height="15.0" fill="rgb(209,103,19)" rx="2" ry="2" />
<text  x="112.66" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.15%)</title><rect x="208.9" y="229" width="1.8" height="15.0" fill="rgb(206,38,50)" rx="2" ry="2" />
<text  x="211.86" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;clustering_key_prefix&gt;::empty (1 samples, 0.02%)</title><rect x="73.6" y="421" width="0.2" height="15.0" fill="rgb(218,32,48)" rx="2" ry="2" />
<text  x="76.56" y="431.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="18.2" y="453" width="0.2" height="15.0" fill="rgb(211,41,34)" rx="2" ry="2" />
<text  x="21.17" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="776.2" y="373" width="0.2" height="15.0" fill="rgb(233,72,4)" rx="2" ry="2" />
<text  x="779.16" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="42.0" y="373" width="0.2" height="15.0" fill="rgb(218,179,16)" rx="2" ry="2" />
<text  x="45.01" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="735.5" y="325" width="0.5" height="15.0" fill="rgb(236,96,32)" rx="2" ry="2" />
<text  x="738.53" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1055.2" y="341" width="0.2" height="15.0" fill="rgb(220,2,12)" rx="2" ry="2" />
<text  x="1058.16" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="99.4" y="517" width="0.3" height="15.0" fill="rgb(221,91,3)" rx="2" ry="2" />
<text  x="102.44" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="1120.3" y="165" width="0.2" height="15.0" fill="rgb(242,124,33)" rx="2" ry="2" />
<text  x="1123.31" y="175.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (1 samples, 0.02%)</title><rect x="1022.5" y="245" width="0.2" height="15.0" fill="rgb(210,144,54)" rx="2" ry="2" />
<text  x="1025.47" y="255.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="109.4" y="469" width="0.3" height="15.0" fill="rgb(206,71,20)" rx="2" ry="2" />
<text  x="112.43" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="850.6" y="373" width="0.5" height="15.0" fill="rgb(215,228,54)" rx="2" ry="2" />
<text  x="853.62" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%)</title><rect x="352.1" y="245" width="0.9" height="15.0" fill="rgb(240,228,22)" rx="2" ry="2" />
<text  x="355.10" y="255.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="429.3" y="213" width="0.2" height="15.0" fill="rgb(250,212,19)" rx="2" ry="2" />
<text  x="432.29" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="129.4" y="437" width="0.2" height="15.0" fill="rgb(234,73,29)" rx="2" ry="2" />
<text  x="132.41" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_type_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="65.6" y="405" width="0.2" height="15.0" fill="rgb(211,183,8)" rx="2" ry="2" />
<text  x="68.62" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="116.5" y="517" width="0.2" height="15.0" fill="rgb(242,22,9)" rx="2" ry="2" />
<text  x="119.47" y="527.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="593.4" y="373" width="0.9" height="15.0" fill="rgb(211,23,33)" rx="2" ry="2" />
<text  x="596.42" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.3" y="341" width="0.2" height="15.0" fill="rgb(227,99,37)" rx="2" ry="2" />
<text  x="67.26" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="27.0" y="245" width="0.3" height="15.0" fill="rgb(206,115,4)" rx="2" ry="2" />
<text  x="30.03" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (4 samples, 0.08%)</title><rect x="818.8" y="373" width="0.9" height="15.0" fill="rgb(244,100,48)" rx="2" ry="2" />
<text  x="821.84" y="383.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="109.7" y="373" width="0.2" height="15.0" fill="rgb(218,12,2)" rx="2" ry="2" />
<text  x="112.66" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="874.5" y="277" width="0.2" height="15.0" fill="rgb(221,137,1)" rx="2" ry="2" />
<text  x="877.46" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="50.2" y="165" width="0.2" height="15.0" fill="rgb(225,33,17)" rx="2" ry="2" />
<text  x="53.18" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%)</title><rect x="251.1" y="101" width="0.9" height="15.0" fill="rgb(253,163,40)" rx="2" ry="2" />
<text  x="254.09" y="111.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="38.4" y="277" width="0.2" height="15.0" fill="rgb(214,164,28)" rx="2" ry="2" />
<text  x="41.38" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (3 samples, 0.06%)</title><rect x="589.1" y="309" width="0.7" height="15.0" fill="rgb(240,136,5)" rx="2" ry="2" />
<text  x="592.10" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="723.0" y="357" width="0.3" height="15.0" fill="rgb(216,11,25)" rx="2" ry="2" />
<text  x="726.04" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="61.5" y="229" width="0.3" height="15.0" fill="rgb(251,216,2)" rx="2" ry="2" />
<text  x="64.53" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="953.2" y="421" width="0.3" height="15.0" fill="rgb(243,229,22)" rx="2" ry="2" />
<text  x="956.23" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="62.7" y="293" width="0.2" height="15.0" fill="rgb(214,139,31)" rx="2" ry="2" />
<text  x="65.67" y="303.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::submit_work (1 samples, 0.02%)</title><rect x="1165.9" y="533" width="0.3" height="15.0" fill="rgb(248,134,49)" rx="2" ry="2" />
<text  x="1168.94" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1146.2" y="453" width="0.4" height="15.0" fill="rgb(211,99,1)" rx="2" ry="2" />
<text  x="1149.19" y="463.5" ></text>
</g>
<g >
<title>cql3::result_generator::visit&lt;cql3::untyped_result_set::visitor&gt; (1 samples, 0.02%)</title><rect x="657.0" y="469" width="0.2" height="15.0" fill="rgb(252,212,32)" rx="2" ry="2" />
<text  x="659.98" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="874.0" y="341" width="0.2" height="15.0" fill="rgb(227,195,32)" rx="2" ry="2" />
<text  x="877.00" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (2 samples, 0.04%)</title><rect x="1034.5" y="309" width="0.5" height="15.0" fill="rgb(230,138,6)" rx="2" ry="2" />
<text  x="1037.50" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (8 samples, 0.15%)</title><rect x="937.1" y="437" width="1.8" height="15.0" fill="rgb(232,87,41)" rx="2" ry="2" />
<text  x="940.11" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%)</title><rect x="1020.2" y="181" width="0.2" height="15.0" fill="rgb(253,156,41)" rx="2" ry="2" />
<text  x="1023.20" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="697.6" y="517" width="0.2" height="15.0" fill="rgb(249,99,50)" rx="2" ry="2" />
<text  x="700.61" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%)</title><rect x="18.2" y="501" width="0.4" height="15.0" fill="rgb(235,87,0)" rx="2" ry="2" />
<text  x="21.17" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (710 samples, 13.66%)</title><rect x="170.0" y="437" width="161.2" height="15.0" fill="rgb(239,208,15)" rx="2" ry="2" />
<text  x="173.04" y="447.5" >flat_mutation_reader..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="103.1" y="453" width="0.2" height="15.0" fill="rgb(220,30,27)" rx="2" ry="2" />
<text  x="106.07" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="455.4" y="405" width="0.2" height="15.0" fill="rgb(236,100,35)" rx="2" ry="2" />
<text  x="458.39" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="58.4" y="293" width="0.2" height="15.0" fill="rgb(250,181,16)" rx="2" ry="2" />
<text  x="61.35" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%)</title><rect x="75.6" y="405" width="0.2" height="15.0" fill="rgb(239,26,31)" rx="2" ry="2" />
<text  x="78.61" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (34 samples, 0.65%)</title><rect x="679.0" y="533" width="7.7" height="15.0" fill="rgb(229,9,47)" rx="2" ry="2" />
<text  x="682.00" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.9" y="213" width="0.2" height="15.0" fill="rgb(254,176,39)" rx="2" ry="2" />
<text  x="48.87" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.27%)</title><rect x="24.8" y="341" width="3.1" height="15.0" fill="rgb(241,189,1)" rx="2" ry="2" />
<text  x="27.76" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1021.8" y="229" width="0.4" height="15.0" fill="rgb(252,72,9)" rx="2" ry="2" />
<text  x="1024.79" y="239.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="291.9" y="245" width="0.3" height="15.0" fill="rgb(222,39,37)" rx="2" ry="2" />
<text  x="294.95" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="687.6" y="517" width="0.7" height="15.0" fill="rgb(233,91,44)" rx="2" ry="2" />
<text  x="690.63" y="527.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (2 samples, 0.04%)</title><rect x="10.7" y="629" width="0.4" height="15.0" fill="rgb(210,38,11)" rx="2" ry="2" />
<text  x="13.68" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="77.2" y="421" width="0.2" height="15.0" fill="rgb(224,185,17)" rx="2" ry="2" />
<text  x="80.20" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="696.7" y="469" width="0.2" height="15.0" fill="rgb(229,221,49)" rx="2" ry="2" />
<text  x="699.71" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.29%)</title><rect x="799.3" y="197" width="3.4" height="15.0" fill="rgb(210,105,43)" rx="2" ry="2" />
<text  x="802.32" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="1016.8" y="197" width="0.7" height="15.0" fill="rgb(248,48,24)" rx="2" ry="2" />
<text  x="1019.79" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (16 samples, 0.31%)</title><rect x="607.5" y="453" width="3.6" height="15.0" fill="rgb(207,132,25)" rx="2" ry="2" />
<text  x="610.49" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="687.4" y="517" width="0.2" height="15.0" fill="rgb(236,41,4)" rx="2" ry="2" />
<text  x="690.40" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="203.2" y="309" width="0.2" height="15.0" fill="rgb(225,54,34)" rx="2" ry="2" />
<text  x="206.19" y="319.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="28.2" y="309" width="0.2" height="15.0" fill="rgb(246,213,36)" rx="2" ry="2" />
<text  x="31.16" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (68 samples, 1.31%)</title><rect x="576.8" y="405" width="15.5" height="15.0" fill="rgb(231,67,30)" rx="2" ry="2" />
<text  x="579.84" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1024.5" y="229" width="1.6" height="15.0" fill="rgb(229,130,12)" rx="2" ry="2" />
<text  x="1027.51" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (39 samples, 0.75%)</title><rect x="69.5" y="485" width="8.8" height="15.0" fill="rgb(207,152,43)" rx="2" ry="2" />
<text  x="72.48" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="757.5" y="357" width="0.3" height="15.0" fill="rgb(253,87,51)" rx="2" ry="2" />
<text  x="760.55" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.10%)</title><rect x="431.8" y="261" width="1.1" height="15.0" fill="rgb(210,210,42)" rx="2" ry="2" />
<text  x="434.79" y="271.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_080286cb96cdba15630037dd793513c22893f2ac] (1 samples, 0.02%)</title><rect x="754.6" y="309" width="0.2" height="15.0" fill="rgb(251,205,38)" rx="2" ry="2" />
<text  x="757.59" y="319.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_view_statement*, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.8" y="373" width="0.3" height="15.0" fill="rgb(237,137,13)" rx="2" ry="2" />
<text  x="68.84" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="43.1" y="309" width="0.3" height="15.0" fill="rgb(233,113,21)" rx="2" ry="2" />
<text  x="46.14" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="630.2" y="405" width="0.2" height="15.0" fill="rgb(234,205,37)" rx="2" ry="2" />
<text  x="633.19" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::kernel_submit_work_pollfn::poll (1 samples, 0.02%)</title><rect x="89.9" y="549" width="0.2" height="15.0" fill="rgb(222,143,52)" rx="2" ry="2" />
<text  x="92.91" y="559.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="870.1" y="389" width="0.3" height="15.0" fill="rgb(238,77,16)" rx="2" ry="2" />
<text  x="873.14" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1109.2" y="421" width="0.2" height="15.0" fill="rgb(217,138,13)" rx="2" ry="2" />
<text  x="1112.18" y="431.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (6 samples, 0.12%)</title><rect x="394.6" y="197" width="1.3" height="15.0" fill="rgb(248,43,37)" rx="2" ry="2" />
<text  x="397.56" y="207.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="89.5" y="549" width="0.2" height="15.0" fill="rgb(245,14,51)" rx="2" ry="2" />
<text  x="92.45" y="559.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (133 samples, 2.56%)</title><rect x="227.0" y="197" width="30.2" height="15.0" fill="rgb(224,126,52)" rx="2" ry="2" />
<text  x="230.02" y="207.5" >cl..</text>
</g>
<g >
<title>cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;::accept_new_row (1 samples, 0.02%)</title><rect x="657.0" y="421" width="0.2" height="15.0" fill="rgb(229,227,0)" rx="2" ry="2" />
<text  x="659.98" y="431.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (2 samples, 0.04%)</title><rect x="1126.0" y="309" width="0.4" height="15.0" fill="rgb(208,80,17)" rx="2" ry="2" />
<text  x="1128.98" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1016.1" y="213" width="0.5" height="15.0" fill="rgb(225,209,1)" rx="2" ry="2" />
<text  x="1019.11" y="223.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%)</title><rect x="917.4" y="405" width="0.4" height="15.0" fill="rgb(229,176,39)" rx="2" ry="2" />
<text  x="920.36" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1165.5" y="421" width="0.2" height="15.0" fill="rgb(205,60,3)" rx="2" ry="2" />
<text  x="1168.48" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (8 samples, 0.15%)</title><rect x="659.5" y="485" width="1.8" height="15.0" fill="rgb(226,67,6)" rx="2" ry="2" />
<text  x="662.48" y="495.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="109.4" y="453" width="0.3" height="15.0" fill="rgb(238,128,23)" rx="2" ry="2" />
<text  x="112.43" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="929.6" y="421" width="0.9" height="15.0" fill="rgb(210,173,44)" rx="2" ry="2" />
<text  x="932.62" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="57.7" y="245" width="0.2" height="15.0" fill="rgb(207,179,34)" rx="2" ry="2" />
<text  x="60.67" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="18.4" y="421" width="0.2" height="15.0" fill="rgb(244,35,5)" rx="2" ry="2" />
<text  x="21.40" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="59.3" y="293" width="0.2" height="15.0" fill="rgb(221,183,33)" rx="2" ry="2" />
<text  x="62.26" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (12 samples, 0.23%)</title><rect x="127.6" y="485" width="2.7" height="15.0" fill="rgb(207,105,53)" rx="2" ry="2" />
<text  x="130.59" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="42.0" y="357" width="0.2" height="15.0" fill="rgb(241,48,46)" rx="2" ry="2" />
<text  x="45.01" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="38.4" y="309" width="0.2" height="15.0" fill="rgb(253,0,45)" rx="2" ry="2" />
<text  x="41.38" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="819.1" y="309" width="0.2" height="15.0" fill="rgb(232,223,39)" rx="2" ry="2" />
<text  x="822.07" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%)</title><rect x="985.7" y="357" width="4.8" height="15.0" fill="rgb(242,114,44)" rx="2" ry="2" />
<text  x="988.69" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="41.6" y="325" width="0.2" height="15.0" fill="rgb(249,174,7)" rx="2" ry="2" />
<text  x="44.55" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="616.6" y="469" width="0.2" height="15.0" fill="rgb(237,138,4)" rx="2" ry="2" />
<text  x="619.57" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="23.8" y="325" width="0.5" height="15.0" fill="rgb(234,5,0)" rx="2" ry="2" />
<text  x="26.85" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (2 samples, 0.04%)</title><rect x="64.5" y="389" width="0.4" height="15.0" fill="rgb(229,209,48)" rx="2" ry="2" />
<text  x="67.48" y="399.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="34.7" y="261" width="0.3" height="15.0" fill="rgb(225,34,6)" rx="2" ry="2" />
<text  x="37.74" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (2 samples, 0.04%)</title><rect x="111.2" y="357" width="0.5" height="15.0" fill="rgb(215,32,37)" rx="2" ry="2" />
<text  x="114.25" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_function_statement*, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="66.3" y="357" width="0.2" height="15.0" fill="rgb(253,170,46)" rx="2" ry="2" />
<text  x="69.30" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="736.7" y="341" width="0.2" height="15.0" fill="rgb(248,114,14)" rx="2" ry="2" />
<text  x="739.66" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="838.8" y="453" width="0.2" height="15.0" fill="rgb(217,54,47)" rx="2" ry="2" />
<text  x="841.81" y="463.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="873.3" y="261" width="0.2" height="15.0" fill="rgb(206,205,48)" rx="2" ry="2" />
<text  x="876.32" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="785.9" y="341" width="0.2" height="15.0" fill="rgb(237,60,37)" rx="2" ry="2" />
<text  x="788.92" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="63.6" y="325" width="0.2" height="15.0" fill="rgb(209,102,39)" rx="2" ry="2" />
<text  x="66.57" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (89 samples, 1.71%)</title><rect x="1057.0" y="373" width="20.2" height="15.0" fill="rgb(220,166,21)" rx="2" ry="2" />
<text  x="1059.97" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="665.6" y="437" width="0.9" height="15.0" fill="rgb(214,186,23)" rx="2" ry="2" />
<text  x="668.61" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="84.7" y="373" width="0.4" height="15.0" fill="rgb(211,125,49)" rx="2" ry="2" />
<text  x="87.69" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1024.3" y="261" width="0.2" height="15.0" fill="rgb(222,56,54)" rx="2" ry="2" />
<text  x="1027.28" y="271.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="728.9" y="453" width="0.9" height="15.0" fill="rgb(239,159,33)" rx="2" ry="2" />
<text  x="731.94" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (6 samples, 0.12%)</title><rect x="800.5" y="165" width="1.3" height="15.0" fill="rgb(241,30,36)" rx="2" ry="2" />
<text  x="803.45" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1080.8" y="389" width="0.5" height="15.0" fill="rgb(205,81,33)" rx="2" ry="2" />
<text  x="1083.81" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1166.8" y="485" width="0.3" height="15.0" fill="rgb(215,194,4)" rx="2" ry="2" />
<text  x="1169.84" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1165.0" y="533" width="0.3" height="15.0" fill="rgb(242,132,34)" rx="2" ry="2" />
<text  x="1168.03" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="86.3" y="309" width="0.2" height="15.0" fill="rgb(222,129,35)" rx="2" ry="2" />
<text  x="89.28" y="319.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,761 samples, 91.59%)</title><rect x="87.4" y="629" width="1080.8" height="15.0" fill="rgb(241,67,3)" rx="2" ry="2" />
<text  x="90.41" y="639.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="754.6" y="341" width="0.7" height="15.0" fill="rgb(215,175,25)" rx="2" ry="2" />
<text  x="757.59" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (48 samples, 0.92%)</title><rect x="317.6" y="389" width="10.9" height="15.0" fill="rgb(245,188,12)" rx="2" ry="2" />
<text  x="320.60" y="399.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%)</title><rect x="932.6" y="437" width="2.2" height="15.0" fill="rgb(243,135,0)" rx="2" ry="2" />
<text  x="935.57" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (1 samples, 0.02%)</title><rect x="875.4" y="437" width="0.2" height="15.0" fill="rgb(223,48,5)" rx="2" ry="2" />
<text  x="878.36" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="526.9" y="293" width="0.2" height="15.0" fill="rgb(223,68,33)" rx="2" ry="2" />
<text  x="529.90" y="303.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (1 samples, 0.02%)</title><rect x="36.1" y="261" width="0.2" height="15.0" fill="rgb(240,178,49)" rx="2" ry="2" />
<text  x="39.11" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="182.1" y="325" width="0.2" height="15.0" fill="rgb(208,201,33)" rx="2" ry="2" />
<text  x="185.07" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="140.8" y="485" width="0.4" height="15.0" fill="rgb(251,62,36)" rx="2" ry="2" />
<text  x="143.76" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="45.9" y="181" width="0.2" height="15.0" fill="rgb(229,176,32)" rx="2" ry="2" />
<text  x="48.87" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="696.0" y="453" width="0.5" height="15.0" fill="rgb(226,117,13)" rx="2" ry="2" />
<text  x="699.03" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="377.5" y="213" width="0.3" height="15.0" fill="rgb(246,207,43)" rx="2" ry="2" />
<text  x="380.53" y="223.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (2 samples, 0.04%)</title><rect x="111.2" y="341" width="0.5" height="15.0" fill="rgb(254,212,53)" rx="2" ry="2" />
<text  x="114.25" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="25.4" y="261" width="0.7" height="15.0" fill="rgb(251,191,12)" rx="2" ry="2" />
<text  x="28.44" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator bool (1 samples, 0.02%)</title><rect x="68.8" y="421" width="0.2" height="15.0" fill="rgb(219,108,11)" rx="2" ry="2" />
<text  x="71.80" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="912.6" y="389" width="0.4" height="15.0" fill="rgb(214,64,1)" rx="2" ry="2" />
<text  x="915.59" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="696.7" y="485" width="0.2" height="15.0" fill="rgb(248,7,26)" rx="2" ry="2" />
<text  x="699.71" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%)</title><rect x="1084.4" y="421" width="0.3" height="15.0" fill="rgb(249,97,28)" rx="2" ry="2" />
<text  x="1087.44" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_response_handler (1 samples, 0.02%)</title><rect x="1133.0" y="213" width="0.2" height="15.0" fill="rgb(237,150,54)" rx="2" ry="2" />
<text  x="1136.02" y="223.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="870.8" y="373" width="0.3" height="15.0" fill="rgb(208,4,40)" rx="2" ry="2" />
<text  x="873.82" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1131.9" y="165" width="0.2" height="15.0" fill="rgb(244,75,40)" rx="2" ry="2" />
<text  x="1134.89" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="646.5" y="517" width="0.5" height="15.0" fill="rgb(222,127,5)" rx="2" ry="2" />
<text  x="649.54" y="527.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::init_snitch_obj&lt;&gt; (1 samples, 0.02%)</title><rect x="723.0" y="309" width="0.3" height="15.0" fill="rgb(214,204,40)" rx="2" ry="2" />
<text  x="726.04" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="407.5" y="181" width="0.2" height="15.0" fill="rgb(219,122,8)" rx="2" ry="2" />
<text  x="410.50" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="292.9" y="197" width="1.1" height="15.0" fill="rgb(246,56,22)" rx="2" ry="2" />
<text  x="295.85" y="207.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%)</title><rect x="1127.6" y="213" width="0.2" height="15.0" fill="rgb(232,60,51)" rx="2" ry="2" />
<text  x="1130.57" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="51.1" y="325" width="0.4" height="15.0" fill="rgb(208,173,54)" rx="2" ry="2" />
<text  x="54.09" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="61.5" y="213" width="0.3" height="15.0" fill="rgb(221,167,44)" rx="2" ry="2" />
<text  x="64.53" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.7" y="197" width="0.3" height="15.0" fill="rgb(217,39,38)" rx="2" ry="2" />
<text  x="42.74" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%)</title><rect x="207.3" y="277" width="0.2" height="15.0" fill="rgb(206,164,20)" rx="2" ry="2" />
<text  x="210.27" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (5 samples, 0.10%)</title><rect x="560.5" y="373" width="1.1" height="15.0" fill="rgb(239,15,13)" rx="2" ry="2" />
<text  x="563.50" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="267.4" y="181" width="0.7" height="15.0" fill="rgb(222,202,36)" rx="2" ry="2" />
<text  x="270.43" y="191.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%)</title><rect x="59.3" y="325" width="0.2" height="15.0" fill="rgb(231,31,6)" rx="2" ry="2" />
<text  x="62.26" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1078.5" y="373" width="0.3" height="15.0" fill="rgb(206,40,30)" rx="2" ry="2" />
<text  x="1081.54" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (19 samples, 0.37%)</title><rect x="1128.9" y="261" width="4.3" height="15.0" fill="rgb(222,101,43)" rx="2" ry="2" />
<text  x="1131.93" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%)</title><rect x="810.4" y="293" width="1.9" height="15.0" fill="rgb(236,99,9)" rx="2" ry="2" />
<text  x="813.44" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="572.3" y="357" width="2.0" height="15.0" fill="rgb(215,53,44)" rx="2" ry="2" />
<text  x="575.30" y="367.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (2 samples, 0.04%)</title><rect x="63.3" y="357" width="0.5" height="15.0" fill="rgb(215,226,35)" rx="2" ry="2" />
<text  x="66.35" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.7" y="181" width="0.2" height="15.0" fill="rgb(243,206,30)" rx="2" ry="2" />
<text  x="28.66" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%)</title><rect x="222.0" y="261" width="0.9" height="15.0" fill="rgb(232,73,10)" rx="2" ry="2" />
<text  x="225.03" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (3 samples, 0.06%)</title><rect x="74.2" y="341" width="0.7" height="15.0" fill="rgb(228,79,39)" rx="2" ry="2" />
<text  x="77.24" y="351.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%)</title><rect x="1127.8" y="213" width="0.2" height="15.0" fill="rgb(245,218,12)" rx="2" ry="2" />
<text  x="1130.80" y="223.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="673.8" y="469" width="0.2" height="15.0" fill="rgb(238,40,18)" rx="2" ry="2" />
<text  x="676.78" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%)</title><rect x="670.1" y="421" width="1.2" height="15.0" fill="rgb(240,113,22)" rx="2" ry="2" />
<text  x="673.15" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="334.9" y="405" width="0.9" height="15.0" fill="rgb(253,16,35)" rx="2" ry="2" />
<text  x="337.85" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.29%)</title><rect x="511.0" y="245" width="3.4" height="15.0" fill="rgb(213,60,21)" rx="2" ry="2" />
<text  x="514.01" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (1 samples, 0.02%)</title><rect x="89.2" y="549" width="0.3" height="15.0" fill="rgb(224,80,50)" rx="2" ry="2" />
<text  x="92.23" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.15%)</title><rect x="937.1" y="421" width="1.8" height="15.0" fill="rgb(226,3,52)" rx="2" ry="2" />
<text  x="940.11" y="431.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="275.8" y="133" width="0.3" height="15.0" fill="rgb(232,182,46)" rx="2" ry="2" />
<text  x="278.83" y="143.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1145.5" y="437" width="0.2" height="15.0" fill="rgb(219,101,54)" rx="2" ry="2" />
<text  x="1148.51" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (1 samples, 0.02%)</title><rect x="1161.9" y="485" width="0.2" height="15.0" fill="rgb(214,78,26)" rx="2" ry="2" />
<text  x="1164.85" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (15 samples, 0.29%)</title><rect x="296.7" y="277" width="3.4" height="15.0" fill="rgb(246,34,25)" rx="2" ry="2" />
<text  x="299.71" y="287.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,279 samples, 24.61%)</title><rect x="167.3" y="453" width="290.4" height="15.0" fill="rgb(225,137,17)" rx="2" ry="2" />
<text  x="170.32" y="463.5" >query::consume_page&lt;</text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (64 samples, 1.23%)</title><rect x="793.4" y="261" width="14.5" height="15.0" fill="rgb(242,187,42)" rx="2" ry="2" />
<text  x="796.41" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="824.1" y="341" width="0.4" height="15.0" fill="rgb(246,177,29)" rx="2" ry="2" />
<text  x="827.06" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="206.8" y="277" width="0.2" height="15.0" fill="rgb(227,125,17)" rx="2" ry="2" />
<text  x="209.82" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="676.0" y="517" width="0.3" height="15.0" fill="rgb(229,181,10)" rx="2" ry="2" />
<text  x="679.05" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1029.3" y="261" width="0.7" height="15.0" fill="rgb(236,19,20)" rx="2" ry="2" />
<text  x="1032.28" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.15%)</title><rect x="815.4" y="357" width="1.8" height="15.0" fill="rgb(217,16,4)" rx="2" ry="2" />
<text  x="818.43" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.12%)</title><rect x="949.4" y="373" width="1.3" height="15.0" fill="rgb(205,18,48)" rx="2" ry="2" />
<text  x="952.37" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%)</title><rect x="29.3" y="293" width="0.2" height="15.0" fill="rgb(253,146,0)" rx="2" ry="2" />
<text  x="32.30" y="303.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="1120.1" y="245" width="0.2" height="15.0" fill="rgb(252,170,16)" rx="2" ry="2" />
<text  x="1123.08" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%)</title><rect x="84.0" y="613" width="2.7" height="15.0" fill="rgb(224,118,34)" rx="2" ry="2" />
<text  x="87.01" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="1117.4" y="469" width="0.4" height="15.0" fill="rgb(251,159,4)" rx="2" ry="2" />
<text  x="1120.36" y="479.5" ></text>
</g>
<g >
<title>database::find_schema (32 samples, 0.62%)</title><rect x="763.9" y="437" width="7.3" height="15.0" fill="rgb(250,187,19)" rx="2" ry="2" />
<text  x="766.90" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%)</title><rect x="764.6" y="389" width="1.6" height="15.0" fill="rgb(244,77,23)" rx="2" ry="2" />
<text  x="767.58" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="659.9" y="309" width="0.3" height="15.0" fill="rgb(211,28,21)" rx="2" ry="2" />
<text  x="662.93" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="717.6" y="453" width="0.2" height="15.0" fill="rgb(214,76,10)" rx="2" ry="2" />
<text  x="720.59" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="533" width="0.2" height="15.0" fill="rgb(222,112,23)" rx="2" ry="2" />
<text  x="20.26" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="873.5" y="309" width="0.5" height="15.0" fill="rgb(253,96,9)" rx="2" ry="2" />
<text  x="876.55" y="319.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::slow_write (1 samples, 0.02%)</title><rect x="85.8" y="389" width="0.2" height="15.0" fill="rgb(227,212,20)" rx="2" ry="2" />
<text  x="88.82" y="399.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (3 samples, 0.06%)</title><rect x="1075.4" y="293" width="0.6" height="15.0" fill="rgb(222,141,14)" rx="2" ry="2" />
<text  x="1078.36" y="303.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="110.8" y="309" width="0.2" height="15.0" fill="rgb(217,125,26)" rx="2" ry="2" />
<text  x="113.79" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (9 samples, 0.17%)</title><rect x="1052.9" y="341" width="2.0" height="15.0" fill="rgb(242,103,45)" rx="2" ry="2" />
<text  x="1055.89" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="252.0" y="149" width="0.7" height="15.0" fill="rgb(207,1,53)" rx="2" ry="2" />
<text  x="254.99" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.6" y="261" width="0.5" height="15.0" fill="rgb(229,215,29)" rx="2" ry="2" />
<text  x="53.63" y="271.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="78.3" y="485" width="0.5" height="15.0" fill="rgb(218,192,5)" rx="2" ry="2" />
<text  x="81.33" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="943.9" y="421" width="0.2" height="15.0" fill="rgb(207,201,27)" rx="2" ry="2" />
<text  x="946.92" y="431.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="527.6" y="261" width="0.2" height="15.0" fill="rgb(244,46,25)" rx="2" ry="2" />
<text  x="530.58" y="271.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="602.0" y="421" width="0.3" height="15.0" fill="rgb(208,0,42)" rx="2" ry="2" />
<text  x="605.04" y="431.5" ></text>
</g>
<g >
<title>auth::resource::resource (11 samples, 0.21%)</title><rect x="774.8" y="421" width="2.5" height="15.0" fill="rgb(239,55,54)" rx="2" ry="2" />
<text  x="777.80" y="431.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%)</title><rect x="1124.4" y="261" width="0.2" height="15.0" fill="rgb(230,2,44)" rx="2" ry="2" />
<text  x="1127.39" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (43 samples, 0.83%)</title><rect x="27.9" y="341" width="9.8" height="15.0" fill="rgb(252,146,47)" rx="2" ry="2" />
<text  x="30.93" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="127.4" y="485" width="0.2" height="15.0" fill="rgb(205,195,7)" rx="2" ry="2" />
<text  x="130.36" y="495.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%)</title><rect x="1165.5" y="517" width="0.2" height="15.0" fill="rgb(213,182,51)" rx="2" ry="2" />
<text  x="1168.48" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="18.2" y="533" width="0.4" height="15.0" fill="rgb(215,227,46)" rx="2" ry="2" />
<text  x="21.17" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="68.1" y="357" width="0.2" height="15.0" fill="rgb(225,71,18)" rx="2" ry="2" />
<text  x="71.11" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="306.9" y="325" width="0.3" height="15.0" fill="rgb(238,137,1)" rx="2" ry="2" />
<text  x="309.93" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="979.1" y="373" width="0.2" height="15.0" fill="rgb(250,47,11)" rx="2" ry="2" />
<text  x="982.11" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.33%)</title><rect x="101.0" y="501" width="3.9" height="15.0" fill="rgb(230,157,19)" rx="2" ry="2" />
<text  x="104.03" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="80.1" y="341" width="0.5" height="15.0" fill="rgb(237,131,43)" rx="2" ry="2" />
<text  x="83.15" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="48.8" y="325" width="0.2" height="15.0" fill="rgb(207,69,41)" rx="2" ry="2" />
<text  x="51.82" y="335.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (3 samples, 0.06%)</title><rect x="598.0" y="389" width="0.6" height="15.0" fill="rgb(229,114,30)" rx="2" ry="2" />
<text  x="600.96" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="63.1" y="133" width="0.2" height="15.0" fill="rgb(221,192,0)" rx="2" ry="2" />
<text  x="66.12" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="17.9" y="229" width="0.3" height="15.0" fill="rgb(246,88,5)" rx="2" ry="2" />
<text  x="20.95" y="239.5" ></text>
</g>
<g >
<title>ser::row_view::columns (1 samples, 0.02%)</title><rect x="1124.6" y="261" width="0.2" height="15.0" fill="rgb(224,224,25)" rx="2" ry="2" />
<text  x="1127.62" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%)</title><rect x="679.9" y="517" width="2.1" height="15.0" fill="rgb(211,35,28)" rx="2" ry="2" />
<text  x="682.91" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="653.1" y="501" width="0.2" height="15.0" fill="rgb(215,201,13)" rx="2" ry="2" />
<text  x="656.12" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="722.6" y="517" width="0.2" height="15.0" fill="rgb(221,189,28)" rx="2" ry="2" />
<text  x="725.59" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (11 samples, 0.21%)</title><rect x="61.3" y="373" width="2.5" height="15.0" fill="rgb(209,100,11)" rx="2" ry="2" />
<text  x="64.30" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%)</title><rect x="260.8" y="133" width="0.7" height="15.0" fill="rgb(229,161,14)" rx="2" ry="2" />
<text  x="263.85" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::init_cpu_mem (1 samples, 0.02%)</title><rect x="1168.0" y="549" width="0.2" height="15.0" fill="rgb(236,160,38)" rx="2" ry="2" />
<text  x="1170.98" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.7" y="213" width="0.2" height="15.0" fill="rgb(228,217,27)" rx="2" ry="2" />
<text  x="28.66" y="223.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (59 samples, 1.14%)</title><rect x="744.4" y="437" width="13.4" height="15.0" fill="rgb(241,193,32)" rx="2" ry="2" />
<text  x="747.38" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::invoke_on_all&lt;locator::i_endpoint_snitch::init_snitch_obj&lt;&gt; (1 samples, 0.02%)</title><rect x="723.0" y="261" width="0.3" height="15.0" fill="rgb(227,25,44)" rx="2" ry="2" />
<text  x="726.04" y="271.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%)</title><rect x="1154.4" y="501" width="0.2" height="15.0" fill="rgb(223,26,27)" rx="2" ry="2" />
<text  x="1157.36" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="75.4" y="421" width="0.4" height="15.0" fill="rgb(241,15,46)" rx="2" ry="2" />
<text  x="78.38" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%)</title><rect x="82.9" y="549" width="0.2" height="15.0" fill="rgb(226,98,37)" rx="2" ry="2" />
<text  x="85.87" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="633.6" y="453" width="0.2" height="15.0" fill="rgb(207,167,13)" rx="2" ry="2" />
<text  x="636.60" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1153.7" y="485" width="0.2" height="15.0" fill="rgb(237,183,30)" rx="2" ry="2" />
<text  x="1156.68" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1046.3" y="357" width="0.9" height="15.0" fill="rgb(237,46,17)" rx="2" ry="2" />
<text  x="1049.30" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="316.9" y="373" width="0.7" height="15.0" fill="rgb(211,97,43)" rx="2" ry="2" />
<text  x="319.92" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="811.6" y="261" width="0.4" height="15.0" fill="rgb(220,48,40)" rx="2" ry="2" />
<text  x="814.57" y="271.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (3 samples, 0.06%)</title><rect x="1027.2" y="277" width="0.7" height="15.0" fill="rgb(209,122,39)" rx="2" ry="2" />
<text  x="1030.23" y="287.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="893.1" y="405" width="0.2" height="15.0" fill="rgb(229,198,23)" rx="2" ry="2" />
<text  x="896.07" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="667.6" y="469" width="0.3" height="15.0" fill="rgb(235,143,33)" rx="2" ry="2" />
<text  x="670.65" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="307.4" y="341" width="0.2" height="15.0" fill="rgb(238,145,29)" rx="2" ry="2" />
<text  x="310.38" y="351.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="61.1" y="357" width="0.2" height="15.0" fill="rgb(249,49,27)" rx="2" ry="2" />
<text  x="64.08" y="367.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%)</title><rect x="1075.6" y="277" width="0.4" height="15.0" fill="rgb(231,151,44)" rx="2" ry="2" />
<text  x="1078.59" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="56.5" y="261" width="0.5" height="15.0" fill="rgb(219,127,20)" rx="2" ry="2" />
<text  x="59.54" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (27 samples, 0.52%)</title><rect x="479.7" y="341" width="6.1" height="15.0" fill="rgb(221,222,20)" rx="2" ry="2" />
<text  x="482.68" y="351.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (4 samples, 0.08%)</title><rect x="11.4" y="613" width="0.9" height="15.0" fill="rgb(235,7,31)" rx="2" ry="2" />
<text  x="14.36" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="560.7" y="341" width="0.7" height="15.0" fill="rgb(229,65,35)" rx="2" ry="2" />
<text  x="563.73" y="351.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="934.8" y="437" width="0.3" height="15.0" fill="rgb(236,84,15)" rx="2" ry="2" />
<text  x="937.84" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="110.3" y="293" width="0.3" height="15.0" fill="rgb(250,220,43)" rx="2" ry="2" />
<text  x="113.34" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="862.9" y="453" width="0.2" height="15.0" fill="rgb(223,47,16)" rx="2" ry="2" />
<text  x="865.88" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (9 samples, 0.17%)</title><rect x="136.2" y="437" width="2.1" height="15.0" fill="rgb(253,34,2)" rx="2" ry="2" />
<text  x="139.22" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (5 samples, 0.10%)</title><rect x="1093.5" y="405" width="1.2" height="15.0" fill="rgb(245,206,2)" rx="2" ry="2" />
<text  x="1096.52" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (37 samples, 0.71%)</title><rect x="823.4" y="421" width="8.4" height="15.0" fill="rgb(219,150,26)" rx="2" ry="2" />
<text  x="826.38" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="435.4" y="261" width="0.2" height="15.0" fill="rgb(246,103,32)" rx="2" ry="2" />
<text  x="438.42" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (1 samples, 0.02%)</title><rect x="142.1" y="437" width="0.2" height="15.0" fill="rgb(254,38,14)" rx="2" ry="2" />
<text  x="145.12" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="63.6" y="261" width="0.2" height="15.0" fill="rgb(237,20,16)" rx="2" ry="2" />
<text  x="66.57" y="271.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (3 samples, 0.06%)</title><rect x="279.9" y="277" width="0.7" height="15.0" fill="rgb(217,27,36)" rx="2" ry="2" />
<text  x="282.92" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="54.7" y="261" width="0.7" height="15.0" fill="rgb(249,167,12)" rx="2" ry="2" />
<text  x="57.72" y="271.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="86.7" y="597" width="0.5" height="15.0" fill="rgb(236,39,44)" rx="2" ry="2" />
<text  x="89.73" y="607.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (2 samples, 0.04%)</title><rect x="86.7" y="549" width="0.5" height="15.0" fill="rgb(222,171,50)" rx="2" ry="2" />
<text  x="89.73" y="559.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (2 samples, 0.04%)</title><rect x="111.2" y="405" width="0.5" height="15.0" fill="rgb(241,57,3)" rx="2" ry="2" />
<text  x="114.25" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%)</title><rect x="468.6" y="373" width="0.6" height="15.0" fill="rgb(230,135,38)" rx="2" ry="2" />
<text  x="471.56" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%)</title><rect x="944.1" y="437" width="0.3" height="15.0" fill="rgb(251,170,31)" rx="2" ry="2" />
<text  x="947.15" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (2 samples, 0.04%)</title><rect x="1122.8" y="245" width="0.5" height="15.0" fill="rgb(253,33,33)" rx="2" ry="2" />
<text  x="1125.80" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="681.3" y="501" width="0.4" height="15.0" fill="rgb(226,148,27)" rx="2" ry="2" />
<text  x="684.27" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="108.3" y="517" width="0.2" height="15.0" fill="rgb(229,201,16)" rx="2" ry="2" />
<text  x="111.30" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="45.2" y="181" width="0.4" height="15.0" fill="rgb(215,93,33)" rx="2" ry="2" />
<text  x="48.19" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,760 samples, 91.57%)</title><rect x="87.4" y="581" width="1080.6" height="15.0" fill="rgb(234,37,16)" rx="2" ry="2" />
<text  x="90.41" y="591.5" >seastar::reactor::run</text>
</g>
<g >
<title>[unknown] (19 samples, 0.37%)</title><rect x="11.4" y="629" width="4.3" height="15.0" fill="rgb(244,174,21)" rx="2" ry="2" />
<text  x="14.36" y="639.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::create_default_role_if_missing (1 samples, 0.02%)</title><rect x="696.5" y="517" width="0.2" height="15.0" fill="rgb(231,154,32)" rx="2" ry="2" />
<text  x="699.48" y="527.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%)</title><rect x="1031.5" y="309" width="1.0" height="15.0" fill="rgb(221,71,5)" rx="2" ry="2" />
<text  x="1034.55" y="319.5" ></text>
</g>
<g >
<title>row::row (3 samples, 0.06%)</title><rect x="299.0" y="229" width="0.7" height="15.0" fill="rgb(254,99,16)" rx="2" ry="2" />
<text  x="301.98" y="239.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%)</title><rect x="996.6" y="325" width="0.4" height="15.0" fill="rgb(254,108,34)" rx="2" ry="2" />
<text  x="999.59" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (64 samples, 1.23%)</title><rect x="281.5" y="293" width="14.5" height="15.0" fill="rgb(211,177,37)" rx="2" ry="2" />
<text  x="284.50" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="720.1" y="453" width="0.4" height="15.0" fill="rgb(246,198,42)" rx="2" ry="2" />
<text  x="723.09" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="793.6" y="245" width="0.3" height="15.0" fill="rgb(245,211,44)" rx="2" ry="2" />
<text  x="796.64" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="68.1" y="341" width="0.2" height="15.0" fill="rgb(241,5,41)" rx="2" ry="2" />
<text  x="71.11" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1166.4" y="517" width="0.2" height="15.0" fill="rgb(217,162,28)" rx="2" ry="2" />
<text  x="1169.39" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="75.6" y="373" width="0.2" height="15.0" fill="rgb(228,23,40)" rx="2" ry="2" />
<text  x="78.61" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="622.0" y="437" width="0.5" height="15.0" fill="rgb(238,97,20)" rx="2" ry="2" />
<text  x="625.02" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="52.0" y="309" width="0.2" height="15.0" fill="rgb(239,34,13)" rx="2" ry="2" />
<text  x="55.00" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="455.8" y="405" width="0.3" height="15.0" fill="rgb(225,109,4)" rx="2" ry="2" />
<text  x="458.85" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice (1 samples, 0.02%)</title><rect x="70.2" y="453" width="0.2" height="15.0" fill="rgb(211,36,36)" rx="2" ry="2" />
<text  x="73.16" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.1" y="229" width="0.2" height="15.0" fill="rgb(224,191,35)" rx="2" ry="2" />
<text  x="44.10" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="717.8" y="437" width="0.2" height="15.0" fill="rgb(246,0,19)" rx="2" ry="2" />
<text  x="720.82" y="447.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1097.4" y="389" width="1.6" height="15.0" fill="rgb(248,17,40)" rx="2" ry="2" />
<text  x="1100.38" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%)</title><rect x="809.5" y="261" width="0.9" height="15.0" fill="rgb(245,32,13)" rx="2" ry="2" />
<text  x="812.53" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="531.7" y="229" width="0.2" height="15.0" fill="rgb(214,124,35)" rx="2" ry="2" />
<text  x="534.67" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="40.4" y="357" width="0.5" height="15.0" fill="rgb(213,63,8)" rx="2" ry="2" />
<text  x="43.42" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.40%)</title><rect x="447.4" y="341" width="4.8" height="15.0" fill="rgb(216,121,26)" rx="2" ry="2" />
<text  x="450.45" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="558.7" y="309" width="0.4" height="15.0" fill="rgb(246,176,3)" rx="2" ry="2" />
<text  x="561.68" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="338.9" y="325" width="0.5" height="15.0" fill="rgb(215,77,31)" rx="2" ry="2" />
<text  x="341.94" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="1096.2" y="421" width="3.7" height="15.0" fill="rgb(234,16,40)" rx="2" ry="2" />
<text  x="1099.24" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="805.9" y="149" width="0.2" height="15.0" fill="rgb(213,152,1)" rx="2" ry="2" />
<text  x="808.90" y="159.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="56.8" y="117" width="0.2" height="15.0" fill="rgb(242,137,9)" rx="2" ry="2" />
<text  x="59.76" y="127.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="447.4" y="325" width="1.0" height="15.0" fill="rgb(251,216,9)" rx="2" ry="2" />
<text  x="450.45" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%)</title><rect x="823.6" y="389" width="0.9" height="15.0" fill="rgb(206,102,29)" rx="2" ry="2" />
<text  x="826.61" y="399.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (17 samples, 0.33%)</title><rect x="555.5" y="341" width="3.9" height="15.0" fill="rgb(217,13,5)" rx="2" ry="2" />
<text  x="558.51" y="351.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::raw (1 samples, 0.02%)</title><rect x="64.0" y="373" width="0.3" height="15.0" fill="rgb(235,60,42)" rx="2" ry="2" />
<text  x="67.03" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="715.3" y="469" width="0.2" height="15.0" fill="rgb(235,7,21)" rx="2" ry="2" />
<text  x="718.32" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="960.3" y="373" width="0.4" height="15.0" fill="rgb(243,97,32)" rx="2" ry="2" />
<text  x="963.27" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="820.2" y="405" width="0.5" height="15.0" fill="rgb(229,8,19)" rx="2" ry="2" />
<text  x="823.20" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1143.0" y="517" width="0.2" height="15.0" fill="rgb(243,127,34)" rx="2" ry="2" />
<text  x="1146.01" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="791.6" y="293" width="0.2" height="15.0" fill="rgb(205,228,35)" rx="2" ry="2" />
<text  x="794.60" y="303.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartLine (1 samples, 0.02%)</title><rect x="30.4" y="293" width="0.3" height="15.0" fill="rgb(254,12,38)" rx="2" ry="2" />
<text  x="33.43" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1165.5" y="405" width="0.2" height="15.0" fill="rgb(217,85,33)" rx="2" ry="2" />
<text  x="1168.48" y="415.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="299.7" y="245" width="0.4" height="15.0" fill="rgb(216,164,37)" rx="2" ry="2" />
<text  x="302.67" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="1157.3" y="517" width="0.9" height="15.0" fill="rgb(223,200,1)" rx="2" ry="2" />
<text  x="1160.31" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_access (180 samples, 3.46%)</title><rect x="778.9" y="405" width="40.8" height="15.0" fill="rgb(214,101,48)" rx="2" ry="2" />
<text  x="781.88" y="415.5" >ser..</text>
</g>
<g >
<title>from_hex (2 samples, 0.04%)</title><rect x="71.3" y="373" width="0.4" height="15.0" fill="rgb(230,67,1)" rx="2" ry="2" />
<text  x="74.29" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="216.6" y="197" width="0.2" height="15.0" fill="rgb(231,154,17)" rx="2" ry="2" />
<text  x="219.58" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="749.1" y="389" width="0.3" height="15.0" fill="rgb(241,69,42)" rx="2" ry="2" />
<text  x="752.15" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="759.6" y="437" width="0.2" height="15.0" fill="rgb(207,137,40)" rx="2" ry="2" />
<text  x="762.59" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="605.4" y="453" width="0.3" height="15.0" fill="rgb(229,160,34)" rx="2" ry="2" />
<text  x="608.45" y="463.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1128.0" y="181" width="0.3" height="15.0" fill="rgb(219,138,46)" rx="2" ry="2" />
<text  x="1131.03" y="191.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (114 samples, 2.19%)</title><rect x="39.1" y="405" width="25.8" height="15.0" fill="rgb(207,52,51)" rx="2" ry="2" />
<text  x="42.06" y="415.5" >c..</text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="983.2" y="341" width="2.5" height="15.0" fill="rgb(246,221,54)" rx="2" ry="2" />
<text  x="986.19" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="311.0" y="357" width="0.5" height="15.0" fill="rgb(214,111,8)" rx="2" ry="2" />
<text  x="314.02" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="870.1" y="357" width="0.3" height="15.0" fill="rgb(250,191,22)" rx="2" ry="2" />
<text  x="873.14" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (191 samples, 3.67%)</title><rect x="995.0" y="341" width="43.4" height="15.0" fill="rgb(234,51,6)" rx="2" ry="2" />
<text  x="998.00" y="351.5" >serv..</text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="696.0" y="501" width="0.5" height="15.0" fill="rgb(221,140,25)" rx="2" ry="2" />
<text  x="699.03" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.2" y="261" width="0.4" height="15.0" fill="rgb(205,195,45)" rx="2" ry="2" />
<text  x="48.19" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (1 samples, 0.02%)</title><rect x="902.4" y="357" width="0.2" height="15.0" fill="rgb(229,143,13)" rx="2" ry="2" />
<text  x="905.38" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (6 samples, 0.12%)</title><rect x="1148.2" y="485" width="1.4" height="15.0" fill="rgb(253,156,28)" rx="2" ry="2" />
<text  x="1151.23" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.7" y="181" width="0.2" height="15.0" fill="rgb(222,176,36)" rx="2" ry="2" />
<text  x="55.68" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="709.2" y="485" width="0.2" height="15.0" fill="rgb(220,229,14)" rx="2" ry="2" />
<text  x="712.19" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="563.5" y="405" width="0.2" height="15.0" fill="rgb(249,42,11)" rx="2" ry="2" />
<text  x="566.45" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="21.8" y="421" width="0.2" height="15.0" fill="rgb(214,228,34)" rx="2" ry="2" />
<text  x="24.80" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="676.7" y="517" width="1.2" height="15.0" fill="rgb(205,43,20)" rx="2" ry="2" />
<text  x="679.73" y="527.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="42.2" y="357" width="0.3" height="15.0" fill="rgb(230,91,30)" rx="2" ry="2" />
<text  x="45.24" y="367.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="696.0" y="325" width="0.3" height="15.0" fill="rgb(217,213,45)" rx="2" ry="2" />
<text  x="699.03" y="335.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::expr::expression::impl*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="63.6" y="229" width="0.2" height="15.0" fill="rgb(232,146,34)" rx="2" ry="2" />
<text  x="66.57" y="239.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="599.1" y="373" width="0.9" height="15.0" fill="rgb(242,159,48)" rx="2" ry="2" />
<text  x="602.09" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="18.4" y="373" width="0.2" height="15.0" fill="rgb(242,150,54)" rx="2" ry="2" />
<text  x="21.40" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1150.0" y="453" width="1.2" height="15.0" fill="rgb(234,103,37)" rx="2" ry="2" />
<text  x="1153.05" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%)</title><rect x="407.9" y="245" width="0.5" height="15.0" fill="rgb(219,87,33)" rx="2" ry="2" />
<text  x="410.95" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="107.8" y="501" width="0.3" height="15.0" fill="rgb(210,206,26)" rx="2" ry="2" />
<text  x="110.84" y="511.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="616.1" y="437" width="0.2" height="15.0" fill="rgb(248,95,54)" rx="2" ry="2" />
<text  x="619.12" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (4 samples, 0.08%)</title><rect x="740.1" y="421" width="0.9" height="15.0" fill="rgb(226,78,13)" rx="2" ry="2" />
<text  x="743.07" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.0" y="133" width="0.2" height="15.0" fill="rgb(215,53,47)" rx="2" ry="2" />
<text  x="47.96" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="940.1" y="405" width="0.9" height="15.0" fill="rgb(226,8,26)" rx="2" ry="2" />
<text  x="943.06" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="644.3" y="501" width="0.4" height="15.0" fill="rgb(225,204,37)" rx="2" ry="2" />
<text  x="647.27" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (2 samples, 0.04%)</title><rect x="131.7" y="437" width="0.4" height="15.0" fill="rgb(226,210,47)" rx="2" ry="2" />
<text  x="134.68" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="50.0" y="293" width="0.2" height="15.0" fill="rgb(250,147,26)" rx="2" ry="2" />
<text  x="52.95" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="256.3" y="165" width="0.9" height="15.0" fill="rgb(234,35,42)" rx="2" ry="2" />
<text  x="259.31" y="175.5" ></text>
</g>
<g >
<title>posix_memalign (15 samples, 0.29%)</title><rect x="244.7" y="85" width="3.4" height="15.0" fill="rgb(241,175,9)" rx="2" ry="2" />
<text  x="247.73" y="95.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (34 samples, 0.65%)</title><rect x="507.6" y="277" width="7.7" height="15.0" fill="rgb(211,19,16)" rx="2" ry="2" />
<text  x="510.61" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="922.8" y="405" width="0.5" height="15.0" fill="rgb(214,187,40)" rx="2" ry="2" />
<text  x="925.81" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="317.8" y="373" width="0.3" height="15.0" fill="rgb(231,62,20)" rx="2" ry="2" />
<text  x="320.83" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (1 samples, 0.02%)</title><rect x="860.8" y="501" width="0.3" height="15.0" fill="rgb(225,22,43)" rx="2" ry="2" />
<text  x="863.83" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (29 samples, 0.56%)</title><rect x="99.9" y="517" width="6.6" height="15.0" fill="rgb(214,153,42)" rx="2" ry="2" />
<text  x="102.90" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (27 samples, 0.52%)</title><rect x="1068.3" y="293" width="6.2" height="15.0" fill="rgb(236,13,35)" rx="2" ry="2" />
<text  x="1071.32" y="303.5" ></text>
</g>
<g >
<title>write&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="1126.4" y="309" width="0.3" height="15.0" fill="rgb(209,107,22)" rx="2" ry="2" />
<text  x="1129.44" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="892.6" y="405" width="0.5" height="15.0" fill="rgb(218,114,11)" rx="2" ry="2" />
<text  x="895.62" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%)</title><rect x="253.4" y="149" width="1.3" height="15.0" fill="rgb(207,138,41)" rx="2" ry="2" />
<text  x="256.36" y="159.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="357" width="0.3" height="15.0" fill="rgb(207,102,54)" rx="2" ry="2" />
<text  x="113.34" y="367.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (10 samples, 0.19%)</title><rect x="392.3" y="197" width="2.3" height="15.0" fill="rgb(222,140,40)" rx="2" ry="2" />
<text  x="395.29" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (609 samples, 11.72%)</title><rect x="726.2" y="533" width="138.3" height="15.0" fill="rgb(235,196,1)" rx="2" ry="2" />
<text  x="729.22" y="543.5" >seastar::internal..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="76.1" y="437" width="0.2" height="15.0" fill="rgb(247,38,51)" rx="2" ry="2" />
<text  x="79.06" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (3 samples, 0.06%)</title><rect x="50.4" y="325" width="0.7" height="15.0" fill="rgb(232,194,21)" rx="2" ry="2" />
<text  x="53.41" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (5 samples, 0.10%)</title><rect x="62.2" y="357" width="1.1" height="15.0" fill="rgb(215,148,30)" rx="2" ry="2" />
<text  x="65.21" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (4 samples, 0.08%)</title><rect x="602.3" y="437" width="0.9" height="15.0" fill="rgb(212,48,48)" rx="2" ry="2" />
<text  x="605.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="357.6" y="197" width="0.4" height="15.0" fill="rgb(246,209,49)" rx="2" ry="2" />
<text  x="360.55" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="84.7" y="405" width="0.4" height="15.0" fill="rgb(214,76,32)" rx="2" ry="2" />
<text  x="87.69" y="415.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (10 samples, 0.19%)</title><rect x="616.8" y="469" width="2.3" height="15.0" fill="rgb(218,23,11)" rx="2" ry="2" />
<text  x="619.80" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="292.2" y="245" width="0.2" height="15.0" fill="rgb(213,171,48)" rx="2" ry="2" />
<text  x="295.17" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1161.4" y="485" width="0.2" height="15.0" fill="rgb(252,110,18)" rx="2" ry="2" />
<text  x="1164.40" y="495.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1121.7" y="245" width="0.2" height="15.0" fill="rgb(205,93,44)" rx="2" ry="2" />
<text  x="1124.67" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="86.3" y="341" width="0.2" height="15.0" fill="rgb(249,178,28)" rx="2" ry="2" />
<text  x="89.28" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="666.5" y="453" width="0.5" height="15.0" fill="rgb(209,184,45)" rx="2" ry="2" />
<text  x="669.51" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.3" y="325" width="0.2" height="15.0" fill="rgb(213,220,30)" rx="2" ry="2" />
<text  x="874.28" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="875.1" y="421" width="0.3" height="15.0" fill="rgb(249,215,37)" rx="2" ry="2" />
<text  x="878.14" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="641.1" y="517" width="0.4" height="15.0" fill="rgb(219,146,15)" rx="2" ry="2" />
<text  x="644.09" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.4" y="213" width="0.2" height="15.0" fill="rgb(229,80,23)" rx="2" ry="2" />
<text  x="41.38" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="26.8" y="213" width="0.2" height="15.0" fill="rgb(225,165,31)" rx="2" ry="2" />
<text  x="29.80" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (8 samples, 0.15%)</title><rect x="630.4" y="421" width="1.8" height="15.0" fill="rgb(251,48,51)" rx="2" ry="2" />
<text  x="633.42" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="696.5" y="421" width="0.2" height="15.0" fill="rgb(239,219,43)" rx="2" ry="2" />
<text  x="699.48" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (7 samples, 0.13%)</title><rect x="505.1" y="293" width="1.6" height="15.0" fill="rgb(253,147,14)" rx="2" ry="2" />
<text  x="508.11" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (3 samples, 0.06%)</title><rect x="1030.2" y="293" width="0.7" height="15.0" fill="rgb(209,49,42)" rx="2" ry="2" />
<text  x="1033.18" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (9 samples, 0.17%)</title><rect x="297.6" y="245" width="2.1" height="15.0" fill="rgb(243,155,26)" rx="2" ry="2" />
<text  x="300.62" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="519.2" y="309" width="0.4" height="15.0" fill="rgb(225,199,23)" rx="2" ry="2" />
<text  x="522.18" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="421" width="0.5" height="15.0" fill="rgb(224,4,28)" rx="2" ry="2" />
<text  x="699.03" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="42.7" y="293" width="0.2" height="15.0" fill="rgb(242,149,7)" rx="2" ry="2" />
<text  x="45.69" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="56.5" y="149" width="0.3" height="15.0" fill="rgb(222,62,48)" rx="2" ry="2" />
<text  x="59.54" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="1139.6" y="501" width="0.2" height="15.0" fill="rgb(226,219,36)" rx="2" ry="2" />
<text  x="1142.60" y="511.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="979.6" y="325" width="1.1" height="15.0" fill="rgb(237,215,4)" rx="2" ry="2" />
<text  x="982.56" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (5 samples, 0.10%)</title><rect x="429.5" y="245" width="1.2" height="15.0" fill="rgb(246,168,48)" rx="2" ry="2" />
<text  x="432.52" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.1" y="213" width="0.2" height="15.0" fill="rgb(220,152,33)" rx="2" ry="2" />
<text  x="47.05" y="223.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::put (1 samples, 0.02%)</title><rect x="85.8" y="373" width="0.2" height="15.0" fill="rgb(226,63,14)" rx="2" ry="2" />
<text  x="88.82" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="835.4" y="437" width="0.7" height="15.0" fill="rgb(223,47,24)" rx="2" ry="2" />
<text  x="838.41" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="46.3" y="341" width="0.2" height="15.0" fill="rgb(252,100,48)" rx="2" ry="2" />
<text  x="49.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="874.0" y="309" width="0.2" height="15.0" fill="rgb(209,78,11)" rx="2" ry="2" />
<text  x="877.00" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="746.2" y="421" width="0.2" height="15.0" fill="rgb(238,126,41)" rx="2" ry="2" />
<text  x="749.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="650.4" y="501" width="0.2" height="15.0" fill="rgb(238,190,5)" rx="2" ry="2" />
<text  x="653.40" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="868.3" y="373" width="0.3" height="15.0" fill="rgb(244,129,22)" rx="2" ry="2" />
<text  x="871.33" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%)</title><rect x="364.4" y="229" width="0.6" height="15.0" fill="rgb(245,174,27)" rx="2" ry="2" />
<text  x="367.36" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (3 samples, 0.06%)</title><rect x="1026.6" y="229" width="0.6" height="15.0" fill="rgb(253,128,28)" rx="2" ry="2" />
<text  x="1029.55" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::invoke_on_all&lt;locator::i_endpoint_snitch::init_snitch_obj&lt;&gt; (1 samples, 0.02%)</title><rect x="723.0" y="277" width="0.3" height="15.0" fill="rgb(238,83,19)" rx="2" ry="2" />
<text  x="726.04" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::dispose (1 samples, 0.02%)</title><rect x="722.8" y="485" width="0.2" height="15.0" fill="rgb(209,193,25)" rx="2" ry="2" />
<text  x="725.81" y="495.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="18.4" y="469" width="0.2" height="15.0" fill="rgb(223,68,35)" rx="2" ry="2" />
<text  x="21.40" y="479.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="37.9" y="341" width="0.5" height="15.0" fill="rgb(210,187,37)" rx="2" ry="2" />
<text  x="40.92" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (5 samples, 0.10%)</title><rect x="1036.3" y="277" width="1.1" height="15.0" fill="rgb(207,159,50)" rx="2" ry="2" />
<text  x="1039.31" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%)</title><rect x="77.4" y="421" width="0.2" height="15.0" fill="rgb(242,90,20)" rx="2" ry="2" />
<text  x="80.42" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.9" y="485" width="0.3" height="15.0" fill="rgb(237,104,49)" rx="2" ry="2" />
<text  x="20.95" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="88.3" y="549" width="0.2" height="15.0" fill="rgb(226,68,25)" rx="2" ry="2" />
<text  x="91.32" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.1" y="245" width="0.2" height="15.0" fill="rgb(230,164,14)" rx="2" ry="2" />
<text  x="66.12" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="86.7" y="581" width="0.5" height="15.0" fill="rgb(231,61,27)" rx="2" ry="2" />
<text  x="89.73" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="456.8" y="421" width="0.2" height="15.0" fill="rgb(217,205,52)" rx="2" ry="2" />
<text  x="459.76" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1144.8" y="469" width="1.2" height="15.0" fill="rgb(214,189,30)" rx="2" ry="2" />
<text  x="1147.82" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.7" y="229" width="0.2" height="15.0" fill="rgb(210,8,21)" rx="2" ry="2" />
<text  x="798.68" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="721.9" y="517" width="0.5" height="15.0" fill="rgb(213,196,35)" rx="2" ry="2" />
<text  x="724.90" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="17.0" y="533" width="0.3" height="15.0" fill="rgb(243,149,47)" rx="2" ry="2" />
<text  x="20.04" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="77.9" y="469" width="0.2" height="15.0" fill="rgb(240,28,42)" rx="2" ry="2" />
<text  x="80.88" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="559.6" y="341" width="0.2" height="15.0" fill="rgb(245,146,23)" rx="2" ry="2" />
<text  x="562.59" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.4" y="389" width="0.3" height="15.0" fill="rgb(244,41,20)" rx="2" ry="2" />
<text  x="70.43" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.9" y="245" width="0.2" height="15.0" fill="rgb(222,64,44)" rx="2" ry="2" />
<text  x="798.91" y="255.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%)</title><rect x="872.0" y="293" width="0.2" height="15.0" fill="rgb(233,35,11)" rx="2" ry="2" />
<text  x="874.96" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (35 samples, 0.67%)</title><rect x="69.9" y="469" width="8.0" height="15.0" fill="rgb(206,146,8)" rx="2" ry="2" />
<text  x="72.93" y="479.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="618.2" y="453" width="0.2" height="15.0" fill="rgb(206,201,8)" rx="2" ry="2" />
<text  x="621.16" y="463.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%)</title><rect x="71.7" y="421" width="0.5" height="15.0" fill="rgb(223,45,53)" rx="2" ry="2" />
<text  x="74.75" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="636.5" y="421" width="0.7" height="15.0" fill="rgb(245,214,37)" rx="2" ry="2" />
<text  x="639.55" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="270.4" y="197" width="0.2" height="15.0" fill="rgb(226,193,29)" rx="2" ry="2" />
<text  x="273.38" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="99.0" y="517" width="0.4" height="15.0" fill="rgb(249,118,26)" rx="2" ry="2" />
<text  x="101.99" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.13%)</title><rect x="292.6" y="229" width="1.6" height="15.0" fill="rgb(233,3,49)" rx="2" ry="2" />
<text  x="295.63" y="239.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="30.2" y="277" width="0.2" height="15.0" fill="rgb(221,14,17)" rx="2" ry="2" />
<text  x="33.20" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="573.7" y="341" width="0.6" height="15.0" fill="rgb(205,117,5)" rx="2" ry="2" />
<text  x="576.67" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%)</title><rect x="869.5" y="437" width="0.6" height="15.0" fill="rgb(243,205,26)" rx="2" ry="2" />
<text  x="872.46" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="477.2" y="293" width="0.2" height="15.0" fill="rgb(226,110,19)" rx="2" ry="2" />
<text  x="480.19" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="575.5" y="453" width="0.7" height="15.0" fill="rgb(217,72,53)" rx="2" ry="2" />
<text  x="578.48" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (3 samples, 0.06%)</title><rect x="471.1" y="357" width="0.6" height="15.0" fill="rgb(213,68,29)" rx="2" ry="2" />
<text  x="474.06" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.7" y="373" width="0.2" height="15.0" fill="rgb(226,175,18)" rx="2" ry="2" />
<text  x="70.66" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="57.0" y="229" width="0.7" height="15.0" fill="rgb(242,25,10)" rx="2" ry="2" />
<text  x="59.99" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (18 samples, 0.35%)</title><rect x="296.0" y="293" width="4.1" height="15.0" fill="rgb(238,162,51)" rx="2" ry="2" />
<text  x="299.03" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="311.5" y="373" width="0.2" height="15.0" fill="rgb(227,187,4)" rx="2" ry="2" />
<text  x="314.47" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="57.9" y="245" width="0.2" height="15.0" fill="rgb(215,174,45)" rx="2" ry="2" />
<text  x="60.90" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1149.1" y="405" width="0.5" height="15.0" fill="rgb(220,160,47)" rx="2" ry="2" />
<text  x="1152.14" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="280.6" y="277" width="0.2" height="15.0" fill="rgb(205,35,50)" rx="2" ry="2" />
<text  x="283.60" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="1006.6" y="261" width="1.1" height="15.0" fill="rgb(250,73,11)" rx="2" ry="2" />
<text  x="1009.58" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (566 samples, 10.89%)</title><rect x="180.3" y="357" width="128.4" height="15.0" fill="rgb(216,109,2)" rx="2" ry="2" />
<text  x="183.26" y="367.5" >mutation_reader_..</text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="723.0" y="229" width="0.3" height="15.0" fill="rgb(210,179,10)" rx="2" ry="2" />
<text  x="726.04" y="239.5" ></text>
</g>
<g >
<title>clustering_key_prefix::clustering_key_prefix (1 samples, 0.02%)</title><rect x="1124.2" y="229" width="0.2" height="15.0" fill="rgb(246,162,15)" rx="2" ry="2" />
<text  x="1127.17" y="239.5" ></text>
</g>
<g >
<title>timerfd_settime (2 samples, 0.04%)</title><rect x="1167.5" y="469" width="0.5" height="15.0" fill="rgb(254,214,30)" rx="2" ry="2" />
<text  x="1170.53" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="79.5" y="437" width="0.2" height="15.0" fill="rgb(238,92,23)" rx="2" ry="2" />
<text  x="82.47" y="447.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (153 samples, 2.94%)</title><rect x="782.5" y="373" width="34.7" height="15.0" fill="rgb(231,132,33)" rx="2" ry="2" />
<text  x="785.52" y="383.5" >se..</text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="110.3" y="309" width="0.3" height="15.0" fill="rgb(225,105,44)" rx="2" ry="2" />
<text  x="113.34" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%)</title><rect x="342.6" y="293" width="0.4" height="15.0" fill="rgb(205,57,15)" rx="2" ry="2" />
<text  x="345.57" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="45.2" y="245" width="0.4" height="15.0" fill="rgb(236,189,51)" rx="2" ry="2" />
<text  x="48.19" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="921.0" y="357" width="0.9" height="15.0" fill="rgb(252,20,28)" rx="2" ry="2" />
<text  x="923.99" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (83 samples, 1.60%)</title><rect x="409.5" y="229" width="18.9" height="15.0" fill="rgb(211,49,48)" rx="2" ry="2" />
<text  x="412.54" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="172.1" y="405" width="0.2" height="15.0" fill="rgb(217,159,5)" rx="2" ry="2" />
<text  x="175.09" y="415.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (31 samples, 0.60%)</title><rect x="734.2" y="469" width="7.0" height="15.0" fill="rgb(207,73,53)" rx="2" ry="2" />
<text  x="737.16" y="479.5" ></text>
</g>
<g >
<title>auth::resource::parent (3 samples, 0.06%)</title><rect x="786.1" y="357" width="0.7" height="15.0" fill="rgb(230,104,47)" rx="2" ry="2" />
<text  x="789.15" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="198.4" y="261" width="0.2" height="15.0" fill="rgb(221,150,54)" rx="2" ry="2" />
<text  x="201.42" y="271.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="111.5" y="325" width="0.2" height="15.0" fill="rgb(221,203,33)" rx="2" ry="2" />
<text  x="114.47" y="335.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="923.0" y="389" width="0.3" height="15.0" fill="rgb(213,218,10)" rx="2" ry="2" />
<text  x="926.04" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (5 samples, 0.10%)</title><rect x="333.7" y="405" width="1.2" height="15.0" fill="rgb(227,79,21)" rx="2" ry="2" />
<text  x="336.72" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="267.2" y="165" width="0.2" height="15.0" fill="rgb(210,2,20)" rx="2" ry="2" />
<text  x="270.20" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="119.0" y="501" width="0.2" height="15.0" fill="rgb(230,222,23)" rx="2" ry="2" />
<text  x="121.96" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%)</title><rect x="611.6" y="437" width="0.4" height="15.0" fill="rgb(216,50,53)" rx="2" ry="2" />
<text  x="614.58" y="447.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="1120.1" y="261" width="0.2" height="15.0" fill="rgb(246,58,27)" rx="2" ry="2" />
<text  x="1123.08" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="222.5" y="245" width="0.4" height="15.0" fill="rgb(234,25,19)" rx="2" ry="2" />
<text  x="225.48" y="255.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="271.7" y="213" width="0.3" height="15.0" fill="rgb(226,190,13)" rx="2" ry="2" />
<text  x="274.74" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="84.7" y="277" width="0.2" height="15.0" fill="rgb(223,156,24)" rx="2" ry="2" />
<text  x="87.69" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::raw::cf_statement::cf_statement (1 samples, 0.02%)</title><rect x="64.5" y="357" width="0.2" height="15.0" fill="rgb(239,115,49)" rx="2" ry="2" />
<text  x="67.48" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (46 samples, 0.88%)</title><rect x="581.6" y="357" width="10.5" height="15.0" fill="rgb(249,125,1)" rx="2" ry="2" />
<text  x="584.61" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="623.8" y="437" width="0.3" height="15.0" fill="rgb(228,171,0)" rx="2" ry="2" />
<text  x="626.84" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="1123.3" y="197" width="0.2" height="15.0" fill="rgb(245,198,19)" rx="2" ry="2" />
<text  x="1126.26" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="320.8" y="325" width="0.2" height="15.0" fill="rgb(219,205,49)" rx="2" ry="2" />
<text  x="323.78" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (3 samples, 0.06%)</title><rect x="632.5" y="405" width="0.6" height="15.0" fill="rgb(230,63,16)" rx="2" ry="2" />
<text  x="635.46" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="197.7" y="261" width="0.5" height="15.0" fill="rgb(211,21,4)" rx="2" ry="2" />
<text  x="200.74" y="271.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;seastar::lowres_clock&gt;, &amp;seastar::timer&lt;seastar::lowres_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1166.2" y="517" width="0.2" height="15.0" fill="rgb(232,33,3)" rx="2" ry="2" />
<text  x="1169.16" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (22 samples, 0.42%)</title><rect x="272.9" y="229" width="5.0" height="15.0" fill="rgb(249,2,31)" rx="2" ry="2" />
<text  x="275.88" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1054.9" y="341" width="0.3" height="15.0" fill="rgb(252,129,53)" rx="2" ry="2" />
<text  x="1057.93" y="351.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="671.5" y="453" width="0.2" height="15.0" fill="rgb(240,107,52)" rx="2" ry="2" />
<text  x="674.51" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%)</title><rect x="1127.6" y="245" width="0.9" height="15.0" fill="rgb(240,148,43)" rx="2" ry="2" />
<text  x="1130.57" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.9" y="261" width="0.2" height="15.0" fill="rgb(246,211,14)" rx="2" ry="2" />
<text  x="48.87" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="637.2" y="421" width="0.3" height="15.0" fill="rgb(236,205,45)" rx="2" ry="2" />
<text  x="640.23" y="431.5" ></text>
</g>
<g >
<title>db::filter_for_query (4 samples, 0.08%)</title><rect x="1046.3" y="373" width="0.9" height="15.0" fill="rgb(212,69,39)" rx="2" ry="2" />
<text  x="1049.30" y="383.5" ></text>
</g>
<g >
<title>database::apply (2 samples, 0.04%)</title><rect x="1128.0" y="197" width="0.5" height="15.0" fill="rgb(220,150,0)" rx="2" ry="2" />
<text  x="1131.03" y="207.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="161.0" y="421" width="0.2" height="15.0" fill="rgb(225,167,2)" rx="2" ry="2" />
<text  x="163.96" y="431.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%)</title><rect x="1125.1" y="277" width="0.2" height="15.0" fill="rgb(224,181,30)" rx="2" ry="2" />
<text  x="1128.08" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="693.3" y="485" width="0.5" height="15.0" fill="rgb(237,38,13)" rx="2" ry="2" />
<text  x="696.30" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (20 samples, 0.38%)</title><rect x="734.6" y="437" width="4.6" height="15.0" fill="rgb(252,199,4)" rx="2" ry="2" />
<text  x="737.62" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (3 samples, 0.06%)</title><rect x="1075.4" y="309" width="0.6" height="15.0" fill="rgb(221,183,52)" rx="2" ry="2" />
<text  x="1078.36" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="263.3" y="181" width="0.3" height="15.0" fill="rgb(249,142,30)" rx="2" ry="2" />
<text  x="266.34" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="721.5" y="517" width="0.4" height="15.0" fill="rgb(228,57,23)" rx="2" ry="2" />
<text  x="724.45" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.6" y="325" width="0.3" height="15.0" fill="rgb(251,9,37)" rx="2" ry="2" />
<text  x="43.65" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="46.1" y="357" width="0.2" height="15.0" fill="rgb(205,101,22)" rx="2" ry="2" />
<text  x="49.09" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="74.2" y="293" width="0.3" height="15.0" fill="rgb(209,77,44)" rx="2" ry="2" />
<text  x="77.24" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="868.3" y="357" width="0.3" height="15.0" fill="rgb(223,0,46)" rx="2" ry="2" />
<text  x="871.33" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="44.1" y="277" width="0.4" height="15.0" fill="rgb(205,30,41)" rx="2" ry="2" />
<text  x="47.05" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="1099.0" y="389" width="0.9" height="15.0" fill="rgb(246,77,28)" rx="2" ry="2" />
<text  x="1101.97" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (7 samples, 0.13%)</title><rect x="758.0" y="437" width="1.6" height="15.0" fill="rgb(243,228,9)" rx="2" ry="2" />
<text  x="761.00" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.37%)</title><rect x="273.3" y="213" width="4.3" height="15.0" fill="rgb(207,182,23)" rx="2" ry="2" />
<text  x="276.33" y="223.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.7" y="437" width="0.7" height="15.0" fill="rgb(229,132,15)" rx="2" ry="2" />
<text  x="87.69" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%)</title><rect x="938.0" y="405" width="0.9" height="15.0" fill="rgb(222,52,5)" rx="2" ry="2" />
<text  x="941.02" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%)</title><rect x="109.2" y="533" width="0.2" height="15.0" fill="rgb(243,173,24)" rx="2" ry="2" />
<text  x="112.20" y="543.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (20 samples, 0.38%)</title><rect x="734.6" y="421" width="4.6" height="15.0" fill="rgb(233,166,46)" rx="2" ry="2" />
<text  x="737.62" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_function_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.3" y="421" width="0.3" height="15.0" fill="rgb(219,188,6)" rx="2" ry="2" />
<text  x="71.34" y="431.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="110.8" y="405" width="0.2" height="15.0" fill="rgb(225,216,39)" rx="2" ry="2" />
<text  x="113.79" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="26.6" y="229" width="0.4" height="15.0" fill="rgb(232,19,49)" rx="2" ry="2" />
<text  x="29.57" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="485.6" y="309" width="0.2" height="15.0" fill="rgb(241,132,39)" rx="2" ry="2" />
<text  x="488.59" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="516.0" y="341" width="0.2" height="15.0" fill="rgb(228,42,24)" rx="2" ry="2" />
<text  x="519.01" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="216.6" y="181" width="0.2" height="15.0" fill="rgb(219,153,10)" rx="2" ry="2" />
<text  x="219.58" y="191.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%)</title><rect x="20.4" y="469" width="0.5" height="15.0" fill="rgb(205,56,26)" rx="2" ry="2" />
<text  x="23.44" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="72.9" y="389" width="0.2" height="15.0" fill="rgb(230,169,33)" rx="2" ry="2" />
<text  x="75.88" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="252.7" y="149" width="0.2" height="15.0" fill="rgb(241,175,28)" rx="2" ry="2" />
<text  x="255.67" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1023.6" y="261" width="0.5" height="15.0" fill="rgb(247,47,26)" rx="2" ry="2" />
<text  x="1026.60" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;cql3::expr::expression const*&gt; (2 samples, 0.04%)</title><rect x="74.5" y="277" width="0.4" height="15.0" fill="rgb(232,7,23)" rx="2" ry="2" />
<text  x="77.47" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="859.9" y="501" width="0.3" height="15.0" fill="rgb(224,147,39)" rx="2" ry="2" />
<text  x="862.93" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="659.7" y="453" width="0.5" height="15.0" fill="rgb(211,130,39)" rx="2" ry="2" />
<text  x="662.70" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%)</title><rect x="430.9" y="261" width="0.2" height="15.0" fill="rgb(207,53,13)" rx="2" ry="2" />
<text  x="433.88" y="271.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.4" y="357" width="0.3" height="15.0" fill="rgb(222,78,15)" rx="2" ry="2" />
<text  x="70.43" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_end (1 samples, 0.02%)</title><rect x="722.4" y="485" width="0.2" height="15.0" fill="rgb(226,162,5)" rx="2" ry="2" />
<text  x="725.36" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (6 samples, 0.12%)</title><rect x="85.4" y="517" width="1.3" height="15.0" fill="rgb(222,193,16)" rx="2" ry="2" />
<text  x="88.37" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="61.8" y="213" width="0.4" height="15.0" fill="rgb(248,48,49)" rx="2" ry="2" />
<text  x="64.76" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="515.8" y="357" width="0.4" height="15.0" fill="rgb(228,142,34)" rx="2" ry="2" />
<text  x="518.78" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="534.2" y="261" width="0.2" height="15.0" fill="rgb(221,128,14)" rx="2" ry="2" />
<text  x="537.17" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="593.2" y="373" width="0.2" height="15.0" fill="rgb(244,111,19)" rx="2" ry="2" />
<text  x="596.19" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="848.3" y="405" width="0.3" height="15.0" fill="rgb(249,147,21)" rx="2" ry="2" />
<text  x="851.35" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (1 samples, 0.02%)</title><rect x="1012.3" y="277" width="0.2" height="15.0" fill="rgb(215,68,43)" rx="2" ry="2" />
<text  x="1015.25" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%)</title><rect x="870.1" y="421" width="0.3" height="15.0" fill="rgb(211,191,44)" rx="2" ry="2" />
<text  x="873.14" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (61 samples, 1.17%)</title><rect x="24.5" y="357" width="13.9" height="15.0" fill="rgb(220,75,38)" rx="2" ry="2" />
<text  x="27.53" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (8 samples, 0.15%)</title><rect x="769.3" y="373" width="1.9" height="15.0" fill="rgb(219,102,27)" rx="2" ry="2" />
<text  x="772.35" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="459.7" y="405" width="0.2" height="15.0" fill="rgb(233,81,44)" rx="2" ry="2" />
<text  x="462.71" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="601.8" y="405" width="0.2" height="15.0" fill="rgb(211,101,28)" rx="2" ry="2" />
<text  x="604.82" y="415.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="37.7" y="341" width="0.2" height="15.0" fill="rgb(222,41,18)" rx="2" ry="2" />
<text  x="40.70" y="351.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="698.7" y="517" width="0.7" height="15.0" fill="rgb(247,220,29)" rx="2" ry="2" />
<text  x="701.75" y="527.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="111.7" y="517" width="0.2" height="15.0" fill="rgb(230,148,16)" rx="2" ry="2" />
<text  x="114.70" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%)</title><rect x="41.8" y="373" width="0.2" height="15.0" fill="rgb(239,102,17)" rx="2" ry="2" />
<text  x="44.78" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="769.1" y="357" width="0.2" height="15.0" fill="rgb(215,83,23)" rx="2" ry="2" />
<text  x="772.12" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%)</title><rect x="25.7" y="229" width="0.4" height="15.0" fill="rgb(240,165,3)" rx="2" ry="2" />
<text  x="28.66" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (208 samples, 4.00%)</title><rect x="991.4" y="357" width="47.2" height="15.0" fill="rgb(254,191,13)" rx="2" ry="2" />
<text  x="994.37" y="367.5" >serv..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="372.3" y="213" width="0.2" height="15.0" fill="rgb(230,22,52)" rx="2" ry="2" />
<text  x="375.31" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="37" width="0.2" height="15.0" fill="rgb(205,122,5)" rx="2" ry="2" />
<text  x="57.27" y="47.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="405" width="7.2" height="15.0" fill="rgb(244,101,2)" rx="2" ry="2" />
<text  x="1129.66" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.5" y="85" width="0.3" height="15.0" fill="rgb(220,206,48)" rx="2" ry="2" />
<text  x="59.54" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1006.6" y="245" width="1.1" height="15.0" fill="rgb(222,219,10)" rx="2" ry="2" />
<text  x="1009.58" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="626.8" y="469" width="0.7" height="15.0" fill="rgb(243,191,42)" rx="2" ry="2" />
<text  x="629.79" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="1101.5" y="437" width="0.9" height="15.0" fill="rgb(232,188,53)" rx="2" ry="2" />
<text  x="1104.47" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="27.7" y="229" width="0.2" height="15.0" fill="rgb(241,220,48)" rx="2" ry="2" />
<text  x="30.71" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.17%)</title><rect x="669.5" y="453" width="2.0" height="15.0" fill="rgb(231,89,42)" rx="2" ry="2" />
<text  x="672.47" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%)</title><rect x="41.3" y="389" width="0.7" height="15.0" fill="rgb(246,39,2)" rx="2" ry="2" />
<text  x="44.33" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%)</title><rect x="1018.8" y="181" width="0.7" height="15.0" fill="rgb(215,150,43)" rx="2" ry="2" />
<text  x="1021.83" y="191.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (8 samples, 0.15%)</title><rect x="338.0" y="341" width="1.8" height="15.0" fill="rgb(245,191,13)" rx="2" ry="2" />
<text  x="341.03" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="539.4" y="309" width="0.2" height="15.0" fill="rgb(214,210,49)" rx="2" ry="2" />
<text  x="542.39" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="67.9" y="389" width="0.2" height="15.0" fill="rgb(216,133,8)" rx="2" ry="2" />
<text  x="70.89" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="847.9" y="405" width="0.4" height="15.0" fill="rgb(228,150,8)" rx="2" ry="2" />
<text  x="850.90" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="61.8" y="229" width="0.4" height="15.0" fill="rgb(209,84,7)" rx="2" ry="2" />
<text  x="64.76" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="57.0" y="117" width="0.7" height="15.0" fill="rgb(248,225,46)" rx="2" ry="2" />
<text  x="59.99" y="127.5" ></text>
</g>
<g >
<title>LZ4_compress_fast (1 samples, 0.02%)</title><rect x="85.8" y="325" width="0.2" height="15.0" fill="rgb(254,96,7)" rx="2" ry="2" />
<text  x="88.82" y="335.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.5" y="229" width="0.2" height="15.0" fill="rgb(249,115,4)" rx="2" ry="2" />
<text  x="30.48" y="239.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="102.6" y="453" width="0.5" height="15.0" fill="rgb(252,204,10)" rx="2" ry="2" />
<text  x="105.62" y="463.5" ></text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.5" y="245" width="0.2" height="15.0" fill="rgb(240,108,37)" rx="2" ry="2" />
<text  x="30.48" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (4,761 samples, 91.59%)</title><rect x="87.4" y="661" width="1080.8" height="15.0" fill="rgb(225,172,46)" rx="2" ry="2" />
<text  x="90.41" y="671.5" >__libc_start_main</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%)</title><rect x="16.6" y="597" width="0.2" height="15.0" fill="rgb(227,178,45)" rx="2" ry="2" />
<text  x="19.58" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (4 samples, 0.08%)</title><rect x="693.3" y="501" width="0.9" height="15.0" fill="rgb(220,131,25)" rx="2" ry="2" />
<text  x="696.30" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="111.9" y="533" width="0.3" height="15.0" fill="rgb(219,149,16)" rx="2" ry="2" />
<text  x="114.93" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.7" y="357" width="0.2" height="15.0" fill="rgb(251,90,17)" rx="2" ry="2" />
<text  x="919.68" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="16.4" y="549" width="0.2" height="15.0" fill="rgb(213,198,22)" rx="2" ry="2" />
<text  x="19.36" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="72.9" y="405" width="0.2" height="15.0" fill="rgb(211,19,29)" rx="2" ry="2" />
<text  x="75.88" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::unique_response_handler::~unique_response_handler (1 samples, 0.02%)</title><rect x="1133.2" y="277" width="0.3" height="15.0" fill="rgb(227,83,42)" rx="2" ry="2" />
<text  x="1136.25" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="668.3" y="485" width="0.5" height="15.0" fill="rgb(216,85,48)" rx="2" ry="2" />
<text  x="671.33" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="173.0" y="405" width="0.4" height="15.0" fill="rgb(244,205,35)" rx="2" ry="2" />
<text  x="175.99" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="66.3" y="389" width="0.2" height="15.0" fill="rgb(246,140,27)" rx="2" ry="2" />
<text  x="69.30" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1164.8" y="533" width="0.2" height="15.0" fill="rgb(216,151,10)" rx="2" ry="2" />
<text  x="1167.80" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (633 samples, 12.18%)</title><rect x="945.7" y="453" width="143.7" height="15.0" fill="rgb(227,45,38)" rx="2" ry="2" />
<text  x="948.74" y="463.5" >cql3::statements::..</text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="84.7" y="485" width="0.7" height="15.0" fill="rgb(252,81,23)" rx="2" ry="2" />
<text  x="87.69" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.4" y="293" width="0.2" height="15.0" fill="rgb(229,70,20)" rx="2" ry="2" />
<text  x="51.36" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="811.1" y="277" width="1.2" height="15.0" fill="rgb(238,111,40)" rx="2" ry="2" />
<text  x="814.12" y="287.5" ></text>
</g>
<g >
<title>sstables::sstable::write_filter (1 samples, 0.02%)</title><rect x="16.4" y="533" width="0.2" height="15.0" fill="rgb(232,104,27)" rx="2" ry="2" />
<text  x="19.36" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="15.9" y="565" width="0.2" height="15.0" fill="rgb(215,151,54)" rx="2" ry="2" />
<text  x="18.90" y="575.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.02%)</title><rect x="83.3" y="645" width="0.3" height="15.0" fill="rgb(251,133,50)" rx="2" ry="2" />
<text  x="86.32" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="723.0" y="213" width="0.3" height="15.0" fill="rgb(237,192,16)" rx="2" ry="2" />
<text  x="726.04" y="223.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1078.1" y="373" width="0.2" height="15.0" fill="rgb(245,148,40)" rx="2" ry="2" />
<text  x="1081.08" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="162.8" y="453" width="0.2" height="15.0" fill="rgb(220,139,17)" rx="2" ry="2" />
<text  x="165.78" y="463.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.02%)</title><rect x="11.1" y="629" width="0.3" height="15.0" fill="rgb(211,53,34)" rx="2" ry="2" />
<text  x="14.14" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="853.6" y="421" width="0.2" height="15.0" fill="rgb(208,223,50)" rx="2" ry="2" />
<text  x="856.57" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="16.4" y="581" width="0.2" height="15.0" fill="rgb(222,204,40)" rx="2" ry="2" />
<text  x="19.36" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="921.9" y="373" width="0.5" height="15.0" fill="rgb(218,150,8)" rx="2" ry="2" />
<text  x="924.90" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%)</title><rect x="27.5" y="261" width="0.2" height="15.0" fill="rgb(232,26,23)" rx="2" ry="2" />
<text  x="30.48" y="271.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.7" y="245" width="0.2" height="15.0" fill="rgb(209,119,7)" rx="2" ry="2" />
<text  x="1126.71" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1146.2" y="469" width="0.4" height="15.0" fill="rgb(234,78,24)" rx="2" ry="2" />
<text  x="1149.19" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="994.5" y="309" width="0.3" height="15.0" fill="rgb(213,170,25)" rx="2" ry="2" />
<text  x="997.54" y="319.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (4 samples, 0.08%)</title><rect x="110.8" y="485" width="0.9" height="15.0" fill="rgb(233,7,35)" rx="2" ry="2" />
<text  x="113.79" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="938.7" y="357" width="0.2" height="15.0" fill="rgb(224,179,35)" rx="2" ry="2" />
<text  x="941.70" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (9 samples, 0.17%)</title><rect x="861.1" y="501" width="2.0" height="15.0" fill="rgb(252,124,7)" rx="2" ry="2" />
<text  x="864.06" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (2 samples, 0.04%)</title><rect x="195.7" y="277" width="0.4" height="15.0" fill="rgb(252,150,12)" rx="2" ry="2" />
<text  x="198.69" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (565 samples, 10.87%)</title><rect x="956.2" y="421" width="128.2" height="15.0" fill="rgb(210,205,10)" rx="2" ry="2" />
<text  x="959.18" y="431.5" >service::storage..</text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="864.5" y="533" width="0.2" height="15.0" fill="rgb(219,208,43)" rx="2" ry="2" />
<text  x="867.47" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="615.9" y="421" width="0.2" height="15.0" fill="rgb(228,106,15)" rx="2" ry="2" />
<text  x="618.89" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="857.4" y="437" width="0.3" height="15.0" fill="rgb(246,111,32)" rx="2" ry="2" />
<text  x="860.43" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1160.0" y="485" width="0.3" height="15.0" fill="rgb(218,177,50)" rx="2" ry="2" />
<text  x="1163.03" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="571.2" y="389" width="1.1" height="15.0" fill="rgb(239,2,31)" rx="2" ry="2" />
<text  x="574.17" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%)</title><rect x="1128.9" y="277" width="4.3" height="15.0" fill="rgb(228,22,23)" rx="2" ry="2" />
<text  x="1131.93" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.5" y="293" width="0.5" height="15.0" fill="rgb(231,153,11)" rx="2" ry="2" />
<text  x="52.50" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="360.5" y="197" width="0.5" height="15.0" fill="rgb(225,97,35)" rx="2" ry="2" />
<text  x="363.50" y="207.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="40.6" y="229" width="0.3" height="15.0" fill="rgb(224,229,28)" rx="2" ry="2" />
<text  x="43.65" y="239.5" ></text>
</g>
<g >
<title>sstables::mc::writer::flush_tmp_bufs (1 samples, 0.02%)</title><rect x="85.8" y="437" width="0.2" height="15.0" fill="rgb(218,217,32)" rx="2" ry="2" />
<text  x="88.82" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="793.9" y="245" width="2.0" height="15.0" fill="rgb(206,51,8)" rx="2" ry="2" />
<text  x="796.87" y="255.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (34 samples, 0.65%)</title><rect x="1118.9" y="437" width="7.8" height="15.0" fill="rgb(225,175,34)" rx="2" ry="2" />
<text  x="1121.95" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1035.2" y="277" width="1.1" height="15.0" fill="rgb(213,63,33)" rx="2" ry="2" />
<text  x="1038.18" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="127.1" y="485" width="0.3" height="15.0" fill="rgb(239,225,8)" rx="2" ry="2" />
<text  x="130.14" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%)</title><rect x="132.1" y="437" width="0.3" height="15.0" fill="rgb(226,29,42)" rx="2" ry="2" />
<text  x="135.13" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="810.4" y="277" width="0.7" height="15.0" fill="rgb(222,199,24)" rx="2" ry="2" />
<text  x="813.44" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1102.6" y="437" width="0.7" height="15.0" fill="rgb(211,214,48)" rx="2" ry="2" />
<text  x="1105.60" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.1" y="245" width="0.2" height="15.0" fill="rgb(245,32,0)" rx="2" ry="2" />
<text  x="44.10" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="707.4" y="517" width="0.4" height="15.0" fill="rgb(241,190,23)" rx="2" ry="2" />
<text  x="710.38" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1136.4" y="533" width="0.3" height="15.0" fill="rgb(210,103,7)" rx="2" ry="2" />
<text  x="1139.43" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="794.3" y="213" width="1.4" height="15.0" fill="rgb(207,0,0)" rx="2" ry="2" />
<text  x="797.32" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="543.9" y="309" width="0.3" height="15.0" fill="rgb(236,207,24)" rx="2" ry="2" />
<text  x="546.93" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="805.4" y="149" width="0.3" height="15.0" fill="rgb(215,146,6)" rx="2" ry="2" />
<text  x="808.44" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="938.7" y="341" width="0.2" height="15.0" fill="rgb(213,10,53)" rx="2" ry="2" />
<text  x="941.70" y="351.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.8" y="613" width="0.2" height="15.0" fill="rgb(227,60,48)" rx="2" ry="2" />
<text  x="86.78" y="623.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="612.0" y="453" width="0.3" height="15.0" fill="rgb(205,101,25)" rx="2" ry="2" />
<text  x="615.03" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (23 samples, 0.44%)</title><rect x="435.9" y="245" width="5.2" height="15.0" fill="rgb(235,121,6)" rx="2" ry="2" />
<text  x="438.87" y="255.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="18.4" y="437" width="0.2" height="15.0" fill="rgb(220,227,16)" rx="2" ry="2" />
<text  x="21.40" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="837.9" y="421" width="0.7" height="15.0" fill="rgb(230,150,37)" rx="2" ry="2" />
<text  x="840.91" y="431.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (2 samples, 0.04%)</title><rect x="1123.9" y="261" width="0.5" height="15.0" fill="rgb(243,88,31)" rx="2" ry="2" />
<text  x="1126.94" y="271.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.8" y="597" width="0.2" height="15.0" fill="rgb(211,56,15)" rx="2" ry="2" />
<text  x="86.78" y="607.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="373.9" y="213" width="2.3" height="15.0" fill="rgb(242,216,31)" rx="2" ry="2" />
<text  x="376.90" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (268 samples, 5.16%)</title><rect x="219.1" y="277" width="60.8" height="15.0" fill="rgb(253,152,30)" rx="2" ry="2" />
<text  x="222.08" y="287.5" >partit..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="182.3" y="325" width="0.2" height="15.0" fill="rgb(253,114,4)" rx="2" ry="2" />
<text  x="185.30" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="864.2" y="517" width="0.3" height="15.0" fill="rgb(214,92,19)" rx="2" ry="2" />
<text  x="867.24" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.13%)</title><rect x="639.5" y="501" width="1.6" height="15.0" fill="rgb(254,144,25)" rx="2" ry="2" />
<text  x="642.50" y="511.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (19 samples, 0.37%)</title><rect x="714.6" y="485" width="4.4" height="15.0" fill="rgb(250,184,28)" rx="2" ry="2" />
<text  x="717.64" y="495.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%)</title><rect x="87.2" y="661" width="0.2" height="15.0" fill="rgb(237,141,5)" rx="2" ry="2" />
<text  x="90.18" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (14 samples, 0.27%)</title><rect x="24.8" y="309" width="3.1" height="15.0" fill="rgb(216,8,11)" rx="2" ry="2" />
<text  x="27.76" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="39.5" y="261" width="0.2" height="15.0" fill="rgb(237,189,28)" rx="2" ry="2" />
<text  x="42.51" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.10%)</title><rect x="900.1" y="341" width="1.1" height="15.0" fill="rgb(246,85,21)" rx="2" ry="2" />
<text  x="903.11" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1161.6" y="485" width="0.3" height="15.0" fill="rgb(216,30,27)" rx="2" ry="2" />
<text  x="1164.62" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="723.0" y="389" width="0.3" height="15.0" fill="rgb(226,56,9)" rx="2" ry="2" />
<text  x="726.04" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="684.9" y="485" width="0.5" height="15.0" fill="rgb(234,208,36)" rx="2" ry="2" />
<text  x="687.90" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="84.7" y="469" width="0.7" height="15.0" fill="rgb(231,35,13)" rx="2" ry="2" />
<text  x="87.69" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="868.1" y="533" width="0.2" height="15.0" fill="rgb(222,177,20)" rx="2" ry="2" />
<text  x="871.10" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::list_users_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="67.2" y="325" width="0.2" height="15.0" fill="rgb(207,224,9)" rx="2" ry="2" />
<text  x="70.21" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="458.3" y="437" width="0.3" height="15.0" fill="rgb(224,125,31)" rx="2" ry="2" />
<text  x="461.35" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="287.4" y="245" width="0.7" height="15.0" fill="rgb(246,189,30)" rx="2" ry="2" />
<text  x="290.41" y="255.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1075.4" y="277" width="0.2" height="15.0" fill="rgb(246,46,16)" rx="2" ry="2" />
<text  x="1078.36" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (17 samples, 0.33%)</title><rect x="847.7" y="421" width="3.8" height="15.0" fill="rgb(242,75,5)" rx="2" ry="2" />
<text  x="850.67" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.12%)</title><rect x="119.2" y="501" width="1.4" height="15.0" fill="rgb(236,13,36)" rx="2" ry="2" />
<text  x="122.19" y="511.5" ></text>
</g>
<g >
<title>mutation::mutation (3 samples, 0.06%)</title><rect x="874.2" y="357" width="0.7" height="15.0" fill="rgb(252,161,35)" rx="2" ry="2" />
<text  x="877.23" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="78.8" y="453" width="0.2" height="15.0" fill="rgb(250,223,3)" rx="2" ry="2" />
<text  x="81.78" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (18 samples, 0.35%)</title><rect x="668.1" y="501" width="4.1" height="15.0" fill="rgb(245,103,13)" rx="2" ry="2" />
<text  x="671.10" y="511.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="790.2" y="277" width="0.7" height="15.0" fill="rgb(207,227,13)" rx="2" ry="2" />
<text  x="793.23" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="52.0" y="293" width="0.2" height="15.0" fill="rgb(236,8,17)" rx="2" ry="2" />
<text  x="55.00" y="303.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="111.0" y="389" width="0.2" height="15.0" fill="rgb(230,187,43)" rx="2" ry="2" />
<text  x="114.02" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="121.2" y="501" width="0.3" height="15.0" fill="rgb(241,168,9)" rx="2" ry="2" />
<text  x="124.24" y="511.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (2 samples, 0.04%)</title><rect x="1120.5" y="197" width="0.5" height="15.0" fill="rgb(211,111,18)" rx="2" ry="2" />
<text  x="1123.53" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="40.0" y="197" width="0.4" height="15.0" fill="rgb(205,183,1)" rx="2" ry="2" />
<text  x="42.97" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1141.6" y="501" width="0.5" height="15.0" fill="rgb(230,142,48)" rx="2" ry="2" />
<text  x="1144.65" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%)</title><rect x="747.8" y="341" width="0.7" height="15.0" fill="rgb(254,208,15)" rx="2" ry="2" />
<text  x="750.78" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::attributes::raw&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.3" y="373" width="0.2" height="15.0" fill="rgb(220,103,34)" rx="2" ry="2" />
<text  x="67.26" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="776.4" y="405" width="0.2" height="15.0" fill="rgb(241,107,5)" rx="2" ry="2" />
<text  x="779.39" y="415.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1120.3" y="229" width="0.9" height="15.0" fill="rgb(217,151,47)" rx="2" ry="2" />
<text  x="1123.31" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="1105.1" y="453" width="1.1" height="15.0" fill="rgb(233,42,14)" rx="2" ry="2" />
<text  x="1108.10" y="463.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="289.4" y="213" width="0.7" height="15.0" fill="rgb(205,186,39)" rx="2" ry="2" />
<text  x="292.45" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (3 samples, 0.06%)</title><rect x="478.8" y="341" width="0.7" height="15.0" fill="rgb(210,198,36)" rx="2" ry="2" />
<text  x="481.78" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="362.5" y="213" width="0.3" height="15.0" fill="rgb(233,217,41)" rx="2" ry="2" />
<text  x="365.55" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="108.5" y="389" width="0.2" height="15.0" fill="rgb(254,229,16)" rx="2" ry="2" />
<text  x="111.52" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.5" y="389" width="0.3" height="15.0" fill="rgb(217,128,27)" rx="2" ry="2" />
<text  x="69.53" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="533.3" y="229" width="0.2" height="15.0" fill="rgb(206,112,13)" rx="2" ry="2" />
<text  x="536.26" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.19%)</title><rect x="102.6" y="469" width="2.3" height="15.0" fill="rgb(208,47,27)" rx="2" ry="2" />
<text  x="105.62" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="519.9" y="341" width="0.2" height="15.0" fill="rgb(225,52,20)" rx="2" ry="2" />
<text  x="522.87" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="812.0" y="245" width="0.3" height="15.0" fill="rgb(211,11,5)" rx="2" ry="2" />
<text  x="815.03" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (6 samples, 0.12%)</title><rect x="104.9" y="501" width="1.4" height="15.0" fill="rgb(223,111,16)" rx="2" ry="2" />
<text  x="107.89" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%)</title><rect x="74.9" y="341" width="0.3" height="15.0" fill="rgb(215,20,5)" rx="2" ry="2" />
<text  x="77.92" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="142.1" y="453" width="0.2" height="15.0" fill="rgb(239,110,24)" rx="2" ry="2" />
<text  x="145.12" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%)</title><rect x="559.1" y="325" width="0.3" height="15.0" fill="rgb(241,159,36)" rx="2" ry="2" />
<text  x="562.14" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (64 samples, 1.23%)</title><rect x="893.8" y="421" width="14.5" height="15.0" fill="rgb(231,223,3)" rx="2" ry="2" />
<text  x="896.75" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="277.6" y="213" width="0.3" height="15.0" fill="rgb(225,163,36)" rx="2" ry="2" />
<text  x="280.65" y="223.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (12 samples, 0.23%)</title><rect x="1162.1" y="485" width="2.7" height="15.0" fill="rgb(217,117,48)" rx="2" ry="2" />
<text  x="1165.08" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1165.5" y="437" width="0.2" height="15.0" fill="rgb(214,106,24)" rx="2" ry="2" />
<text  x="1168.48" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="275.6" y="149" width="0.5" height="15.0" fill="rgb(232,171,17)" rx="2" ry="2" />
<text  x="278.60" y="159.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1133.5" y="309" width="0.2" height="15.0" fill="rgb(244,222,28)" rx="2" ry="2" />
<text  x="1136.47" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="339.4" y="325" width="0.4" height="15.0" fill="rgb(233,144,34)" rx="2" ry="2" />
<text  x="342.39" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="41.8" y="325" width="0.2" height="15.0" fill="rgb(228,215,29)" rx="2" ry="2" />
<text  x="44.78" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="281.3" y="277" width="0.2" height="15.0" fill="rgb(217,3,18)" rx="2" ry="2" />
<text  x="284.28" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%)</title><rect x="1016.6" y="213" width="0.9" height="15.0" fill="rgb(211,20,54)" rx="2" ry="2" />
<text  x="1019.56" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="517.6" y="341" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="520.60" y="351.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (26 samples, 0.50%)</title><rect x="1061.1" y="277" width="5.9" height="15.0" fill="rgb(236,30,13)" rx="2" ry="2" />
<text  x="1064.06" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="715.1" y="453" width="0.2" height="15.0" fill="rgb(236,158,37)" rx="2" ry="2" />
<text  x="718.09" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="581.6" y="309" width="0.5" height="15.0" fill="rgb(236,167,24)" rx="2" ry="2" />
<text  x="584.61" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="661.1" y="389" width="0.2" height="15.0" fill="rgb(237,132,32)" rx="2" ry="2" />
<text  x="664.07" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="533.3" y="213" width="0.2" height="15.0" fill="rgb(234,142,16)" rx="2" ry="2" />
<text  x="536.26" y="223.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%)</title><rect x="634.3" y="437" width="0.7" height="15.0" fill="rgb(234,92,33)" rx="2" ry="2" />
<text  x="637.28" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1044.5" y="293" width="0.2" height="15.0" fill="rgb(225,165,40)" rx="2" ry="2" />
<text  x="1047.49" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="682.0" y="517" width="0.2" height="15.0" fill="rgb(244,24,29)" rx="2" ry="2" />
<text  x="684.95" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="81.3" y="533" width="0.2" height="15.0" fill="rgb(242,191,15)" rx="2" ry="2" />
<text  x="84.28" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="1105.6" y="437" width="0.4" height="15.0" fill="rgb(236,79,51)" rx="2" ry="2" />
<text  x="1108.55" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="659.9" y="373" width="0.3" height="15.0" fill="rgb(213,99,21)" rx="2" ry="2" />
<text  x="662.93" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="713.3" y="485" width="0.4" height="15.0" fill="rgb(239,51,24)" rx="2" ry="2" />
<text  x="716.28" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%)</title><rect x="82.9" y="565" width="0.2" height="15.0" fill="rgb(212,189,6)" rx="2" ry="2" />
<text  x="85.87" y="575.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="516.9" y="341" width="0.7" height="15.0" fill="rgb(225,39,9)" rx="2" ry="2" />
<text  x="519.91" y="351.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="33.6" y="277" width="0.2" height="15.0" fill="rgb(233,66,43)" rx="2" ry="2" />
<text  x="36.61" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="44.3" y="181" width="0.2" height="15.0" fill="rgb(239,7,31)" rx="2" ry="2" />
<text  x="47.28" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.5" y="309" width="0.5" height="15.0" fill="rgb(218,115,2)" rx="2" ry="2" />
<text  x="54.54" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.10%)</title><rect x="677.9" y="485" width="1.1" height="15.0" fill="rgb(254,177,25)" rx="2" ry="2" />
<text  x="680.86" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="21.8" y="373" width="0.2" height="15.0" fill="rgb(250,6,38)" rx="2" ry="2" />
<text  x="24.80" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (6 samples, 0.12%)</title><rect x="826.1" y="341" width="1.4" height="15.0" fill="rgb(215,114,9)" rx="2" ry="2" />
<text  x="829.10" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="243.6" y="85" width="0.2" height="15.0" fill="rgb(208,180,42)" rx="2" ry="2" />
<text  x="246.59" y="95.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%)</title><rect x="84.0" y="581" width="2.7" height="15.0" fill="rgb(228,76,9)" rx="2" ry="2" />
<text  x="87.01" y="591.5" ></text>
</g>
<g >
<title>seastar::file::close (1 samples, 0.02%)</title><rect x="696.9" y="517" width="0.3" height="15.0" fill="rgb(206,188,12)" rx="2" ry="2" />
<text  x="699.93" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="18.4" y="405" width="0.2" height="15.0" fill="rgb(234,203,21)" rx="2" ry="2" />
<text  x="21.40" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="629.5" y="437" width="0.2" height="15.0" fill="rgb(226,193,29)" rx="2" ry="2" />
<text  x="632.51" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="469.7" y="373" width="0.2" height="15.0" fill="rgb(224,88,28)" rx="2" ry="2" />
<text  x="472.70" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.5" y="245" width="0.3" height="15.0" fill="rgb(206,122,6)" rx="2" ry="2" />
<text  x="64.53" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="994.3" y="293" width="0.2" height="15.0" fill="rgb(242,201,22)" rx="2" ry="2" />
<text  x="997.32" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="822.9" y="405" width="0.5" height="15.0" fill="rgb(250,196,44)" rx="2" ry="2" />
<text  x="825.92" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="952.1" y="405" width="0.2" height="15.0" fill="rgb(244,181,48)" rx="2" ry="2" />
<text  x="955.09" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="59.3" y="229" width="0.2" height="15.0" fill="rgb(231,210,47)" rx="2" ry="2" />
<text  x="62.26" y="239.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="753.2" y="309" width="0.3" height="15.0" fill="rgb(224,36,47)" rx="2" ry="2" />
<text  x="756.23" y="319.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="567.1" y="405" width="3.2" height="15.0" fill="rgb(211,121,42)" rx="2" ry="2" />
<text  x="570.08" y="415.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1167.3" y="469" width="0.2" height="15.0" fill="rgb(212,24,31)" rx="2" ry="2" />
<text  x="1170.30" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="66.8" y="341" width="0.2" height="15.0" fill="rgb(215,144,49)" rx="2" ry="2" />
<text  x="69.75" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.4" y="405" width="0.2" height="15.0" fill="rgb(217,194,11)" rx="2" ry="2" />
<text  x="68.39" y="415.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (693 samples, 13.33%)</title><rect x="173.4" y="405" width="157.4" height="15.0" fill="rgb(207,158,8)" rx="2" ry="2" />
<text  x="176.45" y="415.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>seastar::gate::enter (2 samples, 0.04%)</title><rect x="1026.8" y="213" width="0.4" height="15.0" fill="rgb(230,89,44)" rx="2" ry="2" />
<text  x="1029.78" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="1033.4" y="309" width="0.6" height="15.0" fill="rgb(209,68,23)" rx="2" ry="2" />
<text  x="1036.36" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.19%)</title><rect x="400.9" y="197" width="2.3" height="15.0" fill="rgb(245,40,31)" rx="2" ry="2" />
<text  x="403.91" y="207.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="80.1" y="357" width="0.5" height="15.0" fill="rgb(245,63,12)" rx="2" ry="2" />
<text  x="83.15" y="367.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.35%)</title><rect x="970.3" y="373" width="4.0" height="15.0" fill="rgb(221,172,24)" rx="2" ry="2" />
<text  x="973.25" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="197" width="0.2" height="15.0" fill="rgb(252,179,29)" rx="2" ry="2" />
<text  x="60.90" y="207.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%)</title><rect x="18.2" y="581" width="0.4" height="15.0" fill="rgb(205,168,10)" rx="2" ry="2" />
<text  x="21.17" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="40.6" y="261" width="0.3" height="15.0" fill="rgb(253,118,20)" rx="2" ry="2" />
<text  x="43.65" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (3 samples, 0.06%)</title><rect x="97.9" y="501" width="0.6" height="15.0" fill="rgb(228,44,46)" rx="2" ry="2" />
<text  x="100.85" y="511.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (3 samples, 0.06%)</title><rect x="1019.5" y="181" width="0.7" height="15.0" fill="rgb(208,112,32)" rx="2" ry="2" />
<text  x="1022.52" y="191.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="86.5" y="357" width="0.2" height="15.0" fill="rgb(220,142,35)" rx="2" ry="2" />
<text  x="89.50" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (33 samples, 0.63%)</title><rect x="894.9" y="357" width="7.5" height="15.0" fill="rgb(219,86,12)" rx="2" ry="2" />
<text  x="897.89" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%)</title><rect x="280.8" y="277" width="0.5" height="15.0" fill="rgb(221,124,35)" rx="2" ry="2" />
<text  x="283.82" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="659.7" y="405" width="0.5" height="15.0" fill="rgb(237,14,24)" rx="2" ry="2" />
<text  x="662.70" y="415.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%)</title><rect x="918.5" y="405" width="3.9" height="15.0" fill="rgb(239,193,13)" rx="2" ry="2" />
<text  x="921.50" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1118.7" y="485" width="8.0" height="15.0" fill="rgb(211,148,51)" rx="2" ry="2" />
<text  x="1121.72" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (10 samples, 0.19%)</title><rect x="405.5" y="229" width="2.2" height="15.0" fill="rgb(220,22,44)" rx="2" ry="2" />
<text  x="408.45" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.5" y="117" width="0.2" height="15.0" fill="rgb(210,105,22)" rx="2" ry="2" />
<text  x="57.49" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="797.0" y="229" width="0.3" height="15.0" fill="rgb(215,172,35)" rx="2" ry="2" />
<text  x="800.05" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%)</title><rect x="530.3" y="245" width="0.7" height="15.0" fill="rgb(227,123,29)" rx="2" ry="2" />
<text  x="533.31" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="634.5" y="421" width="0.5" height="15.0" fill="rgb(242,198,50)" rx="2" ry="2" />
<text  x="637.51" y="431.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="109.4" y="501" width="0.3" height="15.0" fill="rgb(242,188,30)" rx="2" ry="2" />
<text  x="112.43" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="961.2" y="405" width="0.2" height="15.0" fill="rgb(216,64,43)" rx="2" ry="2" />
<text  x="964.17" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="101" width="0.2" height="15.0" fill="rgb(210,65,37)" rx="2" ry="2" />
<text  x="57.27" y="111.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="18.2" y="565" width="0.4" height="15.0" fill="rgb(228,81,52)" rx="2" ry="2" />
<text  x="21.17" y="575.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%)</title><rect x="111.2" y="325" width="0.3" height="15.0" fill="rgb(214,204,28)" rx="2" ry="2" />
<text  x="114.25" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="42.7" y="341" width="0.2" height="15.0" fill="rgb(211,107,24)" rx="2" ry="2" />
<text  x="45.69" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="635.0" y="469" width="0.4" height="15.0" fill="rgb(213,146,30)" rx="2" ry="2" />
<text  x="637.96" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="857.9" y="453" width="1.8" height="15.0" fill="rgb(205,193,34)" rx="2" ry="2" />
<text  x="860.88" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,280 samples, 43.86%)</title><rect x="121.9" y="501" width="517.6" height="15.0" fill="rgb(220,73,50)" rx="2" ry="2" />
<text  x="124.92" y="511.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="844.5" y="405" width="0.2" height="15.0" fill="rgb(223,8,53)" rx="2" ry="2" />
<text  x="847.49" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1047.9" y="373" width="0.2" height="15.0" fill="rgb(235,40,41)" rx="2" ry="2" />
<text  x="1050.89" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.3" y="341" width="0.4" height="15.0" fill="rgb(221,175,16)" rx="2" ry="2" />
<text  x="42.28" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="1131.7" y="149" width="0.2" height="15.0" fill="rgb(254,101,21)" rx="2" ry="2" />
<text  x="1134.66" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="854.3" y="405" width="0.2" height="15.0" fill="rgb(235,212,3)" rx="2" ry="2" />
<text  x="857.25" y="415.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="873.3" y="245" width="0.2" height="15.0" fill="rgb(222,153,53)" rx="2" ry="2" />
<text  x="876.32" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="486.0" y="357" width="0.5" height="15.0" fill="rgb(238,175,20)" rx="2" ry="2" />
<text  x="489.04" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="828.8" y="357" width="0.3" height="15.0" fill="rgb(254,77,13)" rx="2" ry="2" />
<text  x="831.83" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (3 samples, 0.06%)</title><rect x="527.1" y="293" width="0.7" height="15.0" fill="rgb(219,0,9)" rx="2" ry="2" />
<text  x="530.13" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%)</title><rect x="1135.3" y="533" width="0.9" height="15.0" fill="rgb(228,12,46)" rx="2" ry="2" />
<text  x="1138.29" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="491.9" y="325" width="0.3" height="15.0" fill="rgb(238,184,25)" rx="2" ry="2" />
<text  x="494.94" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (8 samples, 0.15%)</title><rect x="609.3" y="437" width="1.8" height="15.0" fill="rgb(221,64,47)" rx="2" ry="2" />
<text  x="612.31" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1028.4" y="277" width="1.6" height="15.0" fill="rgb(218,68,2)" rx="2" ry="2" />
<text  x="1031.37" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%)</title><rect x="824.1" y="357" width="0.4" height="15.0" fill="rgb(210,90,44)" rx="2" ry="2" />
<text  x="827.06" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (32 samples, 0.62%)</title><rect x="699.9" y="517" width="7.2" height="15.0" fill="rgb(252,46,54)" rx="2" ry="2" />
<text  x="702.88" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (34 samples, 0.65%)</title><rect x="1059.5" y="309" width="7.7" height="15.0" fill="rgb(228,150,54)" rx="2" ry="2" />
<text  x="1062.47" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="44.7" y="165" width="0.5" height="15.0" fill="rgb(227,116,14)" rx="2" ry="2" />
<text  x="47.73" y="175.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (3 samples, 0.06%)</title><rect x="922.6" y="421" width="0.7" height="15.0" fill="rgb(217,191,50)" rx="2" ry="2" />
<text  x="925.58" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, column_definition const*, std::allocator&lt;column_definition const*&gt;, std::__detail::_Identity, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="660.2" y="469" width="0.2" height="15.0" fill="rgb(212,116,21)" rx="2" ry="2" />
<text  x="663.16" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="713.7" y="485" width="0.3" height="15.0" fill="rgb(254,187,7)" rx="2" ry="2" />
<text  x="716.73" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="109.2" y="421" width="0.2" height="15.0" fill="rgb(220,114,48)" rx="2" ry="2" />
<text  x="112.20" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%)</title><rect x="747.6" y="405" width="0.9" height="15.0" fill="rgb(207,57,41)" rx="2" ry="2" />
<text  x="750.56" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.10%)</title><rect x="79.7" y="453" width="1.1" height="15.0" fill="rgb(217,13,10)" rx="2" ry="2" />
<text  x="82.69" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (2 samples, 0.04%)</title><rect x="135.8" y="437" width="0.4" height="15.0" fill="rgb(218,41,6)" rx="2" ry="2" />
<text  x="138.76" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="702.6" y="485" width="0.2" height="15.0" fill="rgb(231,165,14)" rx="2" ry="2" />
<text  x="705.61" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%)</title><rect x="407.3" y="197" width="0.4" height="15.0" fill="rgb(235,60,16)" rx="2" ry="2" />
<text  x="410.27" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (4 samples, 0.08%)</title><rect x="1167.1" y="517" width="0.9" height="15.0" fill="rgb(224,127,33)" rx="2" ry="2" />
<text  x="1170.07" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (3 samples, 0.06%)</title><rect x="186.8" y="309" width="0.7" height="15.0" fill="rgb(240,78,7)" rx="2" ry="2" />
<text  x="189.84" y="319.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="902.2" y="341" width="0.2" height="15.0" fill="rgb(233,48,15)" rx="2" ry="2" />
<text  x="905.15" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%)</title><rect x="589.8" y="309" width="0.2" height="15.0" fill="rgb(216,201,29)" rx="2" ry="2" />
<text  x="592.78" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="61.3" y="341" width="0.2" height="15.0" fill="rgb(214,227,28)" rx="2" ry="2" />
<text  x="64.30" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="1123.3" y="213" width="0.2" height="15.0" fill="rgb(247,80,40)" rx="2" ry="2" />
<text  x="1126.26" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="454.5" y="389" width="0.2" height="15.0" fill="rgb(205,216,51)" rx="2" ry="2" />
<text  x="457.49" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="839.0" y="469" width="0.3" height="15.0" fill="rgb(209,62,4)" rx="2" ry="2" />
<text  x="842.04" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (10 samples, 0.19%)</title><rect x="736.9" y="341" width="2.3" height="15.0" fill="rgb(214,155,42)" rx="2" ry="2" />
<text  x="739.89" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="469" width="0.5" height="15.0" fill="rgb(218,213,31)" rx="2" ry="2" />
<text  x="699.03" y="479.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="748.5" y="405" width="0.4" height="15.0" fill="rgb(212,115,9)" rx="2" ry="2" />
<text  x="751.46" y="415.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="998.9" y="309" width="0.2" height="15.0" fill="rgb(243,211,46)" rx="2" ry="2" />
<text  x="1001.86" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (12 samples, 0.23%)</title><rect x="871.5" y="389" width="2.7" height="15.0" fill="rgb(215,20,36)" rx="2" ry="2" />
<text  x="874.50" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%)</title><rect x="1089.4" y="453" width="0.3" height="15.0" fill="rgb(226,12,3)" rx="2" ry="2" />
<text  x="1092.43" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="88.8" y="549" width="0.2" height="15.0" fill="rgb(219,20,46)" rx="2" ry="2" />
<text  x="91.77" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="936.9" y="437" width="0.2" height="15.0" fill="rgb(221,66,30)" rx="2" ry="2" />
<text  x="939.88" y="447.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (13 samples, 0.25%)</title><rect x="754.4" y="357" width="2.9" height="15.0" fill="rgb(217,100,43)" rx="2" ry="2" />
<text  x="757.37" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::shared_ptr_count_for&lt;column_definition const&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="72.2" y="421" width="0.2" height="15.0" fill="rgb(250,133,22)" rx="2" ry="2" />
<text  x="75.20" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="579.8" y="341" width="0.5" height="15.0" fill="rgb(240,138,16)" rx="2" ry="2" />
<text  x="582.80" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="39.1" y="389" width="0.6" height="15.0" fill="rgb(216,33,29)" rx="2" ry="2" />
<text  x="42.06" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="68.1" y="389" width="0.2" height="15.0" fill="rgb(250,47,7)" rx="2" ry="2" />
<text  x="71.11" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="522.4" y="309" width="0.4" height="15.0" fill="rgb(228,102,12)" rx="2" ry="2" />
<text  x="525.36" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="48.6" y="229" width="0.2" height="15.0" fill="rgb(234,59,33)" rx="2" ry="2" />
<text  x="51.59" y="239.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%)</title><rect x="86.0" y="373" width="0.7" height="15.0" fill="rgb(222,219,48)" rx="2" ry="2" />
<text  x="89.05" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.2" y="181" width="0.2" height="15.0" fill="rgb(248,52,53)" rx="2" ry="2" />
<text  x="43.19" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (9 samples, 0.17%)</title><rect x="1162.8" y="469" width="2.0" height="15.0" fill="rgb(231,79,42)" rx="2" ry="2" />
<text  x="1165.76" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="55.2" y="245" width="0.2" height="15.0" fill="rgb(222,199,49)" rx="2" ry="2" />
<text  x="58.18" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="18.9" y="549" width="0.2" height="15.0" fill="rgb(252,144,41)" rx="2" ry="2" />
<text  x="21.85" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="44.7" y="181" width="0.5" height="15.0" fill="rgb(236,201,4)" rx="2" ry="2" />
<text  x="47.73" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (7 samples, 0.13%)</title><rect x="274.5" y="197" width="1.6" height="15.0" fill="rgb(251,67,49)" rx="2" ry="2" />
<text  x="277.47" y="207.5" ></text>
</g>
<g >
<title>query_mutation (1 samples, 0.02%)</title><rect x="109.9" y="501" width="0.2" height="15.0" fill="rgb(246,10,28)" rx="2" ry="2" />
<text  x="112.88" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%)</title><rect x="445.6" y="277" width="0.7" height="15.0" fill="rgb(237,10,21)" rx="2" ry="2" />
<text  x="448.63" y="287.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (32 samples, 0.62%)</title><rect x="1126.7" y="437" width="7.2" height="15.0" fill="rgb(234,103,42)" rx="2" ry="2" />
<text  x="1129.66" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="63.3" y="341" width="0.3" height="15.0" fill="rgb(224,119,27)" rx="2" ry="2" />
<text  x="66.35" y="351.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (5 samples, 0.10%)</title><rect x="728.7" y="469" width="1.1" height="15.0" fill="rgb(239,27,1)" rx="2" ry="2" />
<text  x="731.71" y="479.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="1123.5" y="261" width="0.2" height="15.0" fill="rgb(239,109,10)" rx="2" ry="2" />
<text  x="1126.49" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%)</title><rect x="827.5" y="341" width="0.6" height="15.0" fill="rgb(228,98,19)" rx="2" ry="2" />
<text  x="830.46" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="789.3" y="325" width="0.3" height="15.0" fill="rgb(219,138,46)" rx="2" ry="2" />
<text  x="792.33" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1156.4" y="501" width="0.9" height="15.0" fill="rgb(254,146,13)" rx="2" ry="2" />
<text  x="1159.40" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, std::function&lt;void  (1 samples, 0.02%)</title><rect x="723.0" y="533" width="0.3" height="15.0" fill="rgb(227,212,43)" rx="2" ry="2" />
<text  x="726.04" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="1095.3" y="421" width="0.5" height="15.0" fill="rgb(222,192,44)" rx="2" ry="2" />
<text  x="1098.34" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (2 samples, 0.04%)</title><rect x="21.8" y="453" width="0.5" height="15.0" fill="rgb(209,195,43)" rx="2" ry="2" />
<text  x="24.80" y="463.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (2 samples, 0.04%)</title><rect x="659.7" y="469" width="0.5" height="15.0" fill="rgb(242,127,9)" rx="2" ry="2" />
<text  x="662.70" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="121.0" y="501" width="0.2" height="15.0" fill="rgb(232,207,3)" rx="2" ry="2" />
<text  x="124.01" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1094.7" y="405" width="0.2" height="15.0" fill="rgb(208,180,16)" rx="2" ry="2" />
<text  x="1097.66" y="415.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="696.7" y="389" width="0.2" height="15.0" fill="rgb(227,155,33)" rx="2" ry="2" />
<text  x="699.71" y="399.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="20.7" y="453" width="0.2" height="15.0" fill="rgb(241,46,39)" rx="2" ry="2" />
<text  x="23.67" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="109.2" y="469" width="0.2" height="15.0" fill="rgb(238,201,44)" rx="2" ry="2" />
<text  x="112.20" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.02%)</title><rect x="697.2" y="405" width="0.2" height="15.0" fill="rgb(246,35,24)" rx="2" ry="2" />
<text  x="700.16" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="786.6" y="325" width="0.2" height="15.0" fill="rgb(252,219,24)" rx="2" ry="2" />
<text  x="789.60" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="473.8" y="293" width="0.4" height="15.0" fill="rgb(230,82,51)" rx="2" ry="2" />
<text  x="476.78" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%)</title><rect x="626.3" y="469" width="0.5" height="15.0" fill="rgb(223,91,26)" rx="2" ry="2" />
<text  x="629.33" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="89.0" y="549" width="0.2" height="15.0" fill="rgb(248,34,14)" rx="2" ry="2" />
<text  x="92.00" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (11 samples, 0.21%)</title><rect x="665.4" y="485" width="2.5" height="15.0" fill="rgb(247,127,11)" rx="2" ry="2" />
<text  x="668.38" y="495.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="531.9" y="229" width="1.4" height="15.0" fill="rgb(226,15,12)" rx="2" ry="2" />
<text  x="534.90" y="239.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%)</title><rect x="1119.4" y="277" width="0.2" height="15.0" fill="rgb(226,90,21)" rx="2" ry="2" />
<text  x="1122.40" y="287.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="696.7" y="517" width="0.2" height="15.0" fill="rgb(236,184,29)" rx="2" ry="2" />
<text  x="699.71" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="746.0" y="405" width="0.2" height="15.0" fill="rgb(237,188,8)" rx="2" ry="2" />
<text  x="748.97" y="415.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="323.7" y="309" width="1.8" height="15.0" fill="rgb(240,181,3)" rx="2" ry="2" />
<text  x="326.73" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="623.2" y="469" width="0.2" height="15.0" fill="rgb(242,159,7)" rx="2" ry="2" />
<text  x="626.16" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (45 samples, 0.87%)</title><rect x="318.1" y="373" width="10.2" height="15.0" fill="rgb(213,206,4)" rx="2" ry="2" />
<text  x="321.05" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1082.2" y="389" width="0.2" height="15.0" fill="rgb(218,58,11)" rx="2" ry="2" />
<text  x="1085.17" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="597.3" y="389" width="0.7" height="15.0" fill="rgb(221,99,44)" rx="2" ry="2" />
<text  x="600.28" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="56.1" y="277" width="0.4" height="15.0" fill="rgb(219,21,11)" rx="2" ry="2" />
<text  x="59.08" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_function_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.3" y="405" width="0.2" height="15.0" fill="rgb(224,36,53)" rx="2" ry="2" />
<text  x="69.30" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="56.5" y="133" width="0.3" height="15.0" fill="rgb(239,159,19)" rx="2" ry="2" />
<text  x="59.54" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.4" y="277" width="0.2" height="15.0" fill="rgb(223,31,34)" rx="2" ry="2" />
<text  x="83.37" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.7" y="165" width="0.2" height="15.0" fill="rgb(208,126,11)" rx="2" ry="2" />
<text  x="1134.66" y="175.5" ></text>
</g>
<g >
<title>row::external_memory_usage (18 samples, 0.35%)</title><rect x="257.4" y="181" width="4.1" height="15.0" fill="rgb(240,198,2)" rx="2" ry="2" />
<text  x="260.44" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%)</title><rect x="723.9" y="533" width="0.3" height="15.0" fill="rgb(239,218,16)" rx="2" ry="2" />
<text  x="726.95" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="561.6" y="373" width="0.7" height="15.0" fill="rgb(251,205,22)" rx="2" ry="2" />
<text  x="564.64" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="24.1" y="197" width="0.2" height="15.0" fill="rgb(230,30,28)" rx="2" ry="2" />
<text  x="27.07" y="207.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="548.9" y="373" width="0.2" height="15.0" fill="rgb(230,8,38)" rx="2" ry="2" />
<text  x="551.92" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="703.1" y="485" width="0.4" height="15.0" fill="rgb(214,227,48)" rx="2" ry="2" />
<text  x="706.06" y="495.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="79.5" y="469" width="0.2" height="15.0" fill="rgb(223,83,25)" rx="2" ry="2" />
<text  x="82.47" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (11 samples, 0.21%)</title><rect x="1035.0" y="293" width="2.4" height="15.0" fill="rgb(209,145,33)" rx="2" ry="2" />
<text  x="1037.95" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="15.9" y="581" width="0.5" height="15.0" fill="rgb(241,137,13)" rx="2" ry="2" />
<text  x="18.90" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="482.9" y="293" width="0.4" height="15.0" fill="rgb(239,143,18)" rx="2" ry="2" />
<text  x="485.86" y="303.5" ></text>
</g>
<g >
<title>mutation::data::data (2 samples, 0.04%)</title><rect x="874.2" y="341" width="0.5" height="15.0" fill="rgb(248,51,27)" rx="2" ry="2" />
<text  x="877.23" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%)</title><rect x="554.6" y="341" width="0.9" height="15.0" fill="rgb(253,186,23)" rx="2" ry="2" />
<text  x="557.60" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="529.9" y="261" width="0.2" height="15.0" fill="rgb(205,51,7)" rx="2" ry="2" />
<text  x="532.85" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="40.0" y="245" width="0.4" height="15.0" fill="rgb(222,99,38)" rx="2" ry="2" />
<text  x="42.97" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="320.6" y="341" width="0.6" height="15.0" fill="rgb(237,89,22)" rx="2" ry="2" />
<text  x="323.55" y="351.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (4 samples, 0.08%)</title><rect x="110.8" y="453" width="0.9" height="15.0" fill="rgb(227,188,6)" rx="2" ry="2" />
<text  x="113.79" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="606.4" y="437" width="0.9" height="15.0" fill="rgb(206,46,31)" rx="2" ry="2" />
<text  x="609.36" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (18 samples, 0.35%)</title><rect x="735.1" y="389" width="4.1" height="15.0" fill="rgb(252,95,17)" rx="2" ry="2" />
<text  x="738.07" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="22.7" y="421" width="0.2" height="15.0" fill="rgb(231,198,4)" rx="2" ry="2" />
<text  x="25.71" y="431.5" ></text>
</g>
<g >
<title>seastar::data_sink::put (1 samples, 0.02%)</title><rect x="85.8" y="357" width="0.2" height="15.0" fill="rgb(225,224,24)" rx="2" ry="2" />
<text  x="88.82" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.0" y="117" width="0.2" height="15.0" fill="rgb(234,150,3)" rx="2" ry="2" />
<text  x="1133.98" y="127.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (294 samples, 5.66%)</title><rect x="15.9" y="629" width="66.7" height="15.0" fill="rgb(232,201,15)" rx="2" ry="2" />
<text  x="18.90" y="639.5" >seastar..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="700.1" y="501" width="0.5" height="15.0" fill="rgb(205,53,49)" rx="2" ry="2" />
<text  x="703.11" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%)</title><rect x="110.8" y="357" width="0.2" height="15.0" fill="rgb(250,154,41)" rx="2" ry="2" />
<text  x="113.79" y="367.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (211 samples, 4.06%)</title><rect x="21.4" y="485" width="47.8" height="15.0" fill="rgb(221,183,17)" rx="2" ry="2" />
<text  x="24.35" y="495.5" >cql3..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1102.4" y="437" width="0.2" height="15.0" fill="rgb(221,34,43)" rx="2" ry="2" />
<text  x="1105.37" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="326.5" y="325" width="0.9" height="15.0" fill="rgb(226,108,53)" rx="2" ry="2" />
<text  x="329.45" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (12 samples, 0.23%)</title><rect x="649.3" y="517" width="2.7" height="15.0" fill="rgb(252,213,36)" rx="2" ry="2" />
<text  x="652.26" y="527.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1165.5" y="533" width="0.2" height="15.0" fill="rgb(239,134,42)" rx="2" ry="2" />
<text  x="1168.48" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="389" width="7.2" height="15.0" fill="rgb(223,143,21)" rx="2" ry="2" />
<text  x="1129.66" y="399.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1120.1" y="229" width="0.2" height="15.0" fill="rgb(218,7,23)" rx="2" ry="2" />
<text  x="1123.08" y="239.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="953.9" y="421" width="0.5" height="15.0" fill="rgb(233,93,11)" rx="2" ry="2" />
<text  x="956.91" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="868.3" y="389" width="0.3" height="15.0" fill="rgb(248,11,31)" rx="2" ry="2" />
<text  x="871.33" y="399.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="863.1" y="501" width="0.7" height="15.0" fill="rgb(240,46,18)" rx="2" ry="2" />
<text  x="866.11" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="41.3" y="373" width="0.3" height="15.0" fill="rgb(236,159,54)" rx="2" ry="2" />
<text  x="44.33" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (7 samples, 0.13%)</title><rect x="1131.7" y="245" width="1.5" height="15.0" fill="rgb(241,192,45)" rx="2" ry="2" />
<text  x="1134.66" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="48.4" y="309" width="0.2" height="15.0" fill="rgb(231,1,34)" rx="2" ry="2" />
<text  x="51.36" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="211.4" y="197" width="0.4" height="15.0" fill="rgb(232,97,9)" rx="2" ry="2" />
<text  x="214.36" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="995.9" y="325" width="0.7" height="15.0" fill="rgb(219,183,46)" rx="2" ry="2" />
<text  x="998.91" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1164.6" y="453" width="0.2" height="15.0" fill="rgb(245,132,19)" rx="2" ry="2" />
<text  x="1167.57" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="562.3" y="373" width="0.2" height="15.0" fill="rgb(244,189,10)" rx="2" ry="2" />
<text  x="565.32" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (6 samples, 0.12%)</title><rect x="73.8" y="405" width="1.4" height="15.0" fill="rgb(214,19,34)" rx="2" ry="2" />
<text  x="76.79" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (15 samples, 0.29%)</title><rect x="824.7" y="373" width="3.4" height="15.0" fill="rgb(243,178,48)" rx="2" ry="2" />
<text  x="827.74" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="1145.7" y="453" width="0.3" height="15.0" fill="rgb(247,93,16)" rx="2" ry="2" />
<text  x="1148.73" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.13%)</title><rect x="248.4" y="149" width="1.5" height="15.0" fill="rgb(232,96,4)" rx="2" ry="2" />
<text  x="251.36" y="159.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.9" y="501" width="0.3" height="15.0" fill="rgb(221,125,6)" rx="2" ry="2" />
<text  x="20.95" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="647.0" y="517" width="0.2" height="15.0" fill="rgb(205,87,23)" rx="2" ry="2" />
<text  x="649.99" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="437" width="0.5" height="15.0" fill="rgb(220,174,54)" rx="2" ry="2" />
<text  x="699.03" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="812.3" y="309" width="0.2" height="15.0" fill="rgb(222,102,17)" rx="2" ry="2" />
<text  x="815.25" y="319.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="696.0" y="277" width="0.3" height="15.0" fill="rgb(248,168,34)" rx="2" ry="2" />
<text  x="699.03" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="696.7" y="437" width="0.2" height="15.0" fill="rgb(241,41,54)" rx="2" ry="2" />
<text  x="699.71" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="78.3" y="469" width="0.3" height="15.0" fill="rgb(236,14,46)" rx="2" ry="2" />
<text  x="81.33" y="479.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="1123.3" y="149" width="0.2" height="15.0" fill="rgb(252,36,49)" rx="2" ry="2" />
<text  x="1126.26" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="83.8" y="533" width="0.2" height="15.0" fill="rgb(250,135,0)" rx="2" ry="2" />
<text  x="86.78" y="543.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::complete (1 samples, 0.02%)</title><rect x="1166.6" y="517" width="0.2" height="15.0" fill="rgb(236,144,10)" rx="2" ry="2" />
<text  x="1169.62" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%)</title><rect x="747.6" y="373" width="0.9" height="15.0" fill="rgb(232,146,10)" rx="2" ry="2" />
<text  x="750.56" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1002.0" y="277" width="0.7" height="15.0" fill="rgb(254,226,4)" rx="2" ry="2" />
<text  x="1005.04" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (1 samples, 0.02%)</title><rect x="746.4" y="421" width="0.2" height="15.0" fill="rgb(225,125,23)" rx="2" ry="2" />
<text  x="749.42" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="697.6" y="501" width="0.2" height="15.0" fill="rgb(231,119,38)" rx="2" ry="2" />
<text  x="700.61" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (53 samples, 1.02%)</title><rect x="525.8" y="309" width="12.0" height="15.0" fill="rgb(220,46,19)" rx="2" ry="2" />
<text  x="528.77" y="319.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="489.7" y="357" width="0.2" height="15.0" fill="rgb(226,150,20)" rx="2" ry="2" />
<text  x="492.67" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="1128.5" y="309" width="0.2" height="15.0" fill="rgb(214,217,4)" rx="2" ry="2" />
<text  x="1131.48" y="319.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="959.4" y="405" width="1.3" height="15.0" fill="rgb(217,208,35)" rx="2" ry="2" />
<text  x="962.36" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="42.9" y="341" width="1.6" height="15.0" fill="rgb(247,140,49)" rx="2" ry="2" />
<text  x="45.92" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1131.9" y="197" width="0.2" height="15.0" fill="rgb(242,142,49)" rx="2" ry="2" />
<text  x="1134.89" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="479.0" y="325" width="0.5" height="15.0" fill="rgb(242,208,33)" rx="2" ry="2" />
<text  x="482.00" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.25%)</title><rect x="941.0" y="421" width="2.9" height="15.0" fill="rgb(211,77,29)" rx="2" ry="2" />
<text  x="943.97" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%)</title><rect x="17.9" y="309" width="0.3" height="15.0" fill="rgb(221,16,19)" rx="2" ry="2" />
<text  x="20.95" y="319.5" ></text>
</g>
<g >
<title>distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%)</title><rect x="696.7" y="421" width="0.2" height="15.0" fill="rgb(251,24,51)" rx="2" ry="2" />
<text  x="699.71" y="431.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%)</title><rect x="720.1" y="437" width="0.4" height="15.0" fill="rgb(254,216,54)" rx="2" ry="2" />
<text  x="723.09" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1150.7" y="437" width="0.5" height="15.0" fill="rgb(250,124,2)" rx="2" ry="2" />
<text  x="1153.73" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1121.0" y="213" width="0.2" height="15.0" fill="rgb(225,129,2)" rx="2" ry="2" />
<text  x="1123.99" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (8 samples, 0.15%)</title><rect x="992.7" y="309" width="1.8" height="15.0" fill="rgb(210,34,41)" rx="2" ry="2" />
<text  x="995.73" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1035.2" y="261" width="1.1" height="15.0" fill="rgb(246,189,7)" rx="2" ry="2" />
<text  x="1038.18" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="549.4" y="373" width="0.2" height="15.0" fill="rgb(240,40,15)" rx="2" ry="2" />
<text  x="552.38" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="728.9" y="437" width="0.9" height="15.0" fill="rgb(211,95,6)" rx="2" ry="2" />
<text  x="731.94" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (15 samples, 0.29%)</title><rect x="664.7" y="501" width="3.4" height="15.0" fill="rgb(240,117,32)" rx="2" ry="2" />
<text  x="667.70" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="17.9" y="357" width="0.3" height="15.0" fill="rgb(235,211,47)" rx="2" ry="2" />
<text  x="20.95" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1097.2" y="389" width="0.2" height="15.0" fill="rgb(243,100,15)" rx="2" ry="2" />
<text  x="1100.15" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="708.5" y="501" width="0.2" height="15.0" fill="rgb(238,106,42)" rx="2" ry="2" />
<text  x="711.51" y="511.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="974.3" y="373" width="0.5" height="15.0" fill="rgb(230,134,23)" rx="2" ry="2" />
<text  x="977.34" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="548.5" y="357" width="0.2" height="15.0" fill="rgb(220,0,22)" rx="2" ry="2" />
<text  x="551.47" y="367.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set::visitor::accept_value (1 samples, 0.02%)</title><rect x="657.0" y="389" width="0.2" height="15.0" fill="rgb(237,25,31)" rx="2" ry="2" />
<text  x="659.98" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="66.3" y="373" width="0.2" height="15.0" fill="rgb(230,127,22)" rx="2" ry="2" />
<text  x="69.30" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="365.0" y="229" width="0.5" height="15.0" fill="rgb(209,70,39)" rx="2" ry="2" />
<text  x="368.04" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (1 samples, 0.02%)</title><rect x="1126.7" y="341" width="0.2" height="15.0" fill="rgb(234,128,31)" rx="2" ry="2" />
<text  x="1129.66" y="351.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="672.2" y="501" width="0.2" height="15.0" fill="rgb(249,61,40)" rx="2" ry="2" />
<text  x="675.19" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="58.6" y="341" width="0.2" height="15.0" fill="rgb(215,125,41)" rx="2" ry="2" />
<text  x="61.58" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (84 samples, 1.62%)</title><rect x="1057.0" y="357" width="19.0" height="15.0" fill="rgb(248,8,35)" rx="2" ry="2" />
<text  x="1059.97" y="367.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="611.8" y="421" width="0.2" height="15.0" fill="rgb(246,109,15)" rx="2" ry="2" />
<text  x="614.80" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="696.3" y="373" width="0.2" height="15.0" fill="rgb(220,160,34)" rx="2" ry="2" />
<text  x="699.25" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="775.9" y="389" width="0.5" height="15.0" fill="rgb(221,150,41)" rx="2" ry="2" />
<text  x="778.93" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="23.8" y="373" width="0.5" height="15.0" fill="rgb(210,102,38)" rx="2" ry="2" />
<text  x="26.85" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (1 samples, 0.02%)</title><rect x="706.9" y="501" width="0.2" height="15.0" fill="rgb(225,213,13)" rx="2" ry="2" />
<text  x="709.92" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="815.9" y="341" width="0.7" height="15.0" fill="rgb(251,27,23)" rx="2" ry="2" />
<text  x="818.89" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (3 samples, 0.06%)</title><rect x="1167.3" y="485" width="0.7" height="15.0" fill="rgb(208,65,15)" rx="2" ry="2" />
<text  x="1170.30" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (10 samples, 0.19%)</title><rect x="891.0" y="437" width="2.3" height="15.0" fill="rgb(232,8,53)" rx="2" ry="2" />
<text  x="894.03" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="590.9" y="325" width="0.5" height="15.0" fill="rgb(216,110,34)" rx="2" ry="2" />
<text  x="593.92" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="992.5" y="309" width="0.2" height="15.0" fill="rgb(209,147,10)" rx="2" ry="2" />
<text  x="995.50" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (3 samples, 0.06%)</title><rect x="74.2" y="325" width="0.7" height="15.0" fill="rgb(223,166,37)" rx="2" ry="2" />
<text  x="77.24" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="648.8" y="501" width="0.2" height="15.0" fill="rgb(221,66,47)" rx="2" ry="2" />
<text  x="651.81" y="511.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (5 samples, 0.10%)</title><rect x="35.2" y="277" width="1.1" height="15.0" fill="rgb(251,159,22)" rx="2" ry="2" />
<text  x="38.20" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="773.2" y="389" width="0.2" height="15.0" fill="rgb(246,23,45)" rx="2" ry="2" />
<text  x="776.21" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="562.5" y="437" width="1.2" height="15.0" fill="rgb(212,183,44)" rx="2" ry="2" />
<text  x="565.54" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4 samples, 0.08%)</title><rect x="1151.2" y="485" width="0.9" height="15.0" fill="rgb(248,227,34)" rx="2" ry="2" />
<text  x="1154.18" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="1033.6" y="277" width="0.4" height="15.0" fill="rgb(218,41,35)" rx="2" ry="2" />
<text  x="1036.59" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.10%)</title><rect x="955.0" y="421" width="1.2" height="15.0" fill="rgb(212,208,5)" rx="2" ry="2" />
<text  x="958.04" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (89 samples, 1.71%)</title><rect x="520.3" y="341" width="20.2" height="15.0" fill="rgb(239,141,26)" rx="2" ry="2" />
<text  x="523.32" y="351.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (4 samples, 0.08%)</title><rect x="110.8" y="469" width="0.9" height="15.0" fill="rgb(211,101,37)" rx="2" ry="2" />
<text  x="113.79" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%)</title><rect x="110.1" y="485" width="0.2" height="15.0" fill="rgb(243,19,2)" rx="2" ry="2" />
<text  x="113.11" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="797.3" y="229" width="0.2" height="15.0" fill="rgb(224,169,34)" rx="2" ry="2" />
<text  x="800.27" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%)</title><rect x="931.0" y="437" width="1.1" height="15.0" fill="rgb(251,70,46)" rx="2" ry="2" />
<text  x="933.98" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="278.8" y="261" width="0.2" height="15.0" fill="rgb(214,123,41)" rx="2" ry="2" />
<text  x="281.78" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="725.3" y="533" width="0.2" height="15.0" fill="rgb(251,27,47)" rx="2" ry="2" />
<text  x="728.31" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="765.7" y="357" width="0.5" height="15.0" fill="rgb(216,30,18)" rx="2" ry="2" />
<text  x="768.72" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1055.8" y="357" width="0.3" height="15.0" fill="rgb(254,78,43)" rx="2" ry="2" />
<text  x="1058.84" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (3 samples, 0.06%)</title><rect x="621.1" y="469" width="0.7" height="15.0" fill="rgb(252,90,47)" rx="2" ry="2" />
<text  x="624.11" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (211 samples, 4.06%)</title><rect x="224.1" y="229" width="47.9" height="15.0" fill="rgb(233,10,3)" rx="2" ry="2" />
<text  x="227.07" y="239.5" >part..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1121.2" y="245" width="0.2" height="15.0" fill="rgb(233,68,33)" rx="2" ry="2" />
<text  x="1124.22" y="255.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="755.3" y="309" width="0.4" height="15.0" fill="rgb(227,34,32)" rx="2" ry="2" />
<text  x="758.28" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="975.7" y="389" width="0.5" height="15.0" fill="rgb(235,82,28)" rx="2" ry="2" />
<text  x="978.70" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="41.8" y="293" width="0.2" height="15.0" fill="rgb(208,77,36)" rx="2" ry="2" />
<text  x="44.78" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="16.6" y="581" width="0.2" height="15.0" fill="rgb(243,45,37)" rx="2" ry="2" />
<text  x="19.58" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%)</title><rect x="82.2" y="469" width="0.2" height="15.0" fill="rgb(253,70,15)" rx="2" ry="2" />
<text  x="85.19" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="580.7" y="357" width="0.9" height="15.0" fill="rgb(230,177,38)" rx="2" ry="2" />
<text  x="583.70" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (3 samples, 0.06%)</title><rect x="47.5" y="165" width="0.6" height="15.0" fill="rgb(250,35,18)" rx="2" ry="2" />
<text  x="50.46" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="931.9" y="421" width="0.2" height="15.0" fill="rgb(240,30,9)" rx="2" ry="2" />
<text  x="934.89" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (4 samples, 0.08%)</title><rect x="216.8" y="245" width="0.9" height="15.0" fill="rgb(220,29,8)" rx="2" ry="2" />
<text  x="219.81" y="255.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="57.9" y="101" width="0.2" height="15.0" fill="rgb(220,46,8)" rx="2" ry="2" />
<text  x="60.90" y="111.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_channel (2 samples, 0.04%)</title><rect x="43.6" y="293" width="0.5" height="15.0" fill="rgb(210,40,52)" rx="2" ry="2" />
<text  x="46.60" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="86.7" y="421" width="0.3" height="15.0" fill="rgb(242,174,18)" rx="2" ry="2" />
<text  x="89.73" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%)</title><rect x="307.2" y="325" width="0.2" height="15.0" fill="rgb(224,121,14)" rx="2" ry="2" />
<text  x="310.16" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="807.9" y="261" width="0.3" height="15.0" fill="rgb(249,213,14)" rx="2" ry="2" />
<text  x="810.94" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (6 samples, 0.12%)</title><rect x="85.4" y="501" width="1.3" height="15.0" fill="rgb(214,146,48)" rx="2" ry="2" />
<text  x="88.37" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (8 samples, 0.15%)</title><rect x="46.5" y="309" width="1.9" height="15.0" fill="rgb(247,25,8)" rx="2" ry="2" />
<text  x="49.55" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="609.8" y="405" width="0.4" height="15.0" fill="rgb(227,117,11)" rx="2" ry="2" />
<text  x="612.76" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (552 samples, 10.62%)</title><rect x="331.7" y="437" width="125.3" height="15.0" fill="rgb(208,201,7)" rx="2" ry="2" />
<text  x="334.67" y="447.5" >seastar::future..</text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="110.3" y="389" width="0.3" height="15.0" fill="rgb(216,183,1)" rx="2" ry="2" />
<text  x="113.34" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="680.8" y="501" width="0.2" height="15.0" fill="rgb(246,17,1)" rx="2" ry="2" />
<text  x="683.82" y="511.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="16.8" y="565" width="0.2" height="15.0" fill="rgb(243,121,17)" rx="2" ry="2" />
<text  x="19.81" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.27%)</title><rect x="24.8" y="325" width="3.1" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="27.76" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%)</title><rect x="619.7" y="453" width="0.3" height="15.0" fill="rgb(215,202,42)" rx="2" ry="2" />
<text  x="622.75" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="221.8" y="261" width="0.2" height="15.0" fill="rgb(211,212,9)" rx="2" ry="2" />
<text  x="224.80" y="271.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.08%)</title><rect x="294.9" y="261" width="0.9" height="15.0" fill="rgb(211,120,19)" rx="2" ry="2" />
<text  x="297.90" y="271.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_descriptor::encode (1 samples, 0.02%)</title><rect x="87.0" y="405" width="0.2" height="15.0" fill="rgb(210,92,30)" rx="2" ry="2" />
<text  x="89.96" y="415.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="581" width="0.2" height="15.0" fill="rgb(248,132,7)" rx="2" ry="2" />
<text  x="20.26" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="792.7" y="261" width="0.3" height="15.0" fill="rgb(241,61,46)" rx="2" ry="2" />
<text  x="795.73" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.5" y="277" width="0.3" height="15.0" fill="rgb(214,149,52)" rx="2" ry="2" />
<text  x="64.53" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="68.1" y="405" width="0.2" height="15.0" fill="rgb(245,71,21)" rx="2" ry="2" />
<text  x="71.11" y="415.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (2 samples, 0.04%)</title><rect x="111.2" y="389" width="0.5" height="15.0" fill="rgb(215,132,36)" rx="2" ry="2" />
<text  x="114.25" y="399.5" ></text>
</g>
<g >
<title>row::external_memory_usage (3 samples, 0.06%)</title><rect x="263.6" y="197" width="0.7" height="15.0" fill="rgb(246,163,7)" rx="2" ry="2" />
<text  x="266.57" y="207.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (79 samples, 1.52%)</title><rect x="184.8" y="325" width="17.9" height="15.0" fill="rgb(226,53,20)" rx="2" ry="2" />
<text  x="187.80" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="942.8" y="373" width="0.7" height="15.0" fill="rgb(254,138,9)" rx="2" ry="2" />
<text  x="945.79" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="842.9" y="373" width="0.2" height="15.0" fill="rgb(205,71,26)" rx="2" ry="2" />
<text  x="845.90" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="27.7" y="277" width="0.2" height="15.0" fill="rgb(252,57,12)" rx="2" ry="2" />
<text  x="30.71" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="100.8" y="485" width="0.2" height="15.0" fill="rgb(245,111,32)" rx="2" ry="2" />
<text  x="103.80" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%)</title><rect x="887.4" y="453" width="0.2" height="15.0" fill="rgb(220,165,14)" rx="2" ry="2" />
<text  x="890.40" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="59.0" y="309" width="0.3" height="15.0" fill="rgb(251,130,32)" rx="2" ry="2" />
<text  x="62.03" y="319.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1168.0" y="581" width="0.2" height="15.0" fill="rgb(250,170,31)" rx="2" ry="2" />
<text  x="1170.98" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (19 samples, 0.37%)</title><rect x="657.2" y="533" width="4.3" height="15.0" fill="rgb(253,161,44)" rx="2" ry="2" />
<text  x="660.21" y="543.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.6" y="245" width="0.2" height="15.0" fill="rgb(251,36,44)" rx="2" ry="2" />
<text  x="1127.62" y="255.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="618.8" y="421" width="0.3" height="15.0" fill="rgb(211,80,25)" rx="2" ry="2" />
<text  x="621.84" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="203.9" y="293" width="0.4" height="15.0" fill="rgb(225,17,53)" rx="2" ry="2" />
<text  x="206.87" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="100.1" y="501" width="0.9" height="15.0" fill="rgb(252,155,54)" rx="2" ry="2" />
<text  x="103.12" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (2 samples, 0.04%)</title><rect x="457.2" y="437" width="0.5" height="15.0" fill="rgb(248,214,43)" rx="2" ry="2" />
<text  x="460.21" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="218.6" y="261" width="0.2" height="15.0" fill="rgb(244,54,22)" rx="2" ry="2" />
<text  x="221.62" y="271.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="1123.3" y="245" width="0.2" height="15.0" fill="rgb(234,92,49)" rx="2" ry="2" />
<text  x="1126.26" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.5" y="469" width="0.2" height="15.0" fill="rgb(227,163,51)" rx="2" ry="2" />
<text  x="87.46" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="61.1" y="373" width="0.2" height="15.0" fill="rgb(248,68,39)" rx="2" ry="2" />
<text  x="64.08" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="63.6" y="245" width="0.2" height="15.0" fill="rgb(235,121,33)" rx="2" ry="2" />
<text  x="66.57" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%)</title><rect x="868.3" y="517" width="0.7" height="15.0" fill="rgb(234,72,47)" rx="2" ry="2" />
<text  x="871.33" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="138.9" y="485" width="0.5" height="15.0" fill="rgb(254,146,22)" rx="2" ry="2" />
<text  x="141.94" y="495.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.6" y="245" width="0.5" height="15.0" fill="rgb(251,83,51)" rx="2" ry="2" />
<text  x="53.63" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="296.5" y="277" width="0.2" height="15.0" fill="rgb(224,10,46)" rx="2" ry="2" />
<text  x="299.49" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1113.0" y="453" width="0.3" height="15.0" fill="rgb(214,137,52)" rx="2" ry="2" />
<text  x="1116.04" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="469" width="7.2" height="15.0" fill="rgb(243,202,39)" rx="2" ry="2" />
<text  x="1129.66" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%)</title><rect x="110.8" y="373" width="0.2" height="15.0" fill="rgb(227,66,3)" rx="2" ry="2" />
<text  x="113.79" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="58.4" y="277" width="0.2" height="15.0" fill="rgb(250,164,13)" rx="2" ry="2" />
<text  x="61.35" y="287.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1126.0" y="277" width="0.2" height="15.0" fill="rgb(243,25,7)" rx="2" ry="2" />
<text  x="1128.98" y="287.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (4 samples, 0.08%)</title><rect x="800.9" y="149" width="0.9" height="15.0" fill="rgb(235,197,18)" rx="2" ry="2" />
<text  x="803.90" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (21 samples, 0.40%)</title><rect x="208.4" y="261" width="4.8" height="15.0" fill="rgb(253,200,13)" rx="2" ry="2" />
<text  x="211.41" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (8 samples, 0.15%)</title><rect x="708.1" y="517" width="1.8" height="15.0" fill="rgb(239,141,49)" rx="2" ry="2" />
<text  x="711.06" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="227.0" y="181" width="0.2" height="15.0" fill="rgb(240,200,15)" rx="2" ry="2" />
<text  x="230.02" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="453" width="7.2" height="15.0" fill="rgb(210,172,4)" rx="2" ry="2" />
<text  x="1129.66" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (3 samples, 0.06%)</title><rect x="20.2" y="501" width="0.7" height="15.0" fill="rgb(246,78,13)" rx="2" ry="2" />
<text  x="23.22" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%)</title><rect x="728.5" y="501" width="2.0" height="15.0" fill="rgb(239,150,5)" rx="2" ry="2" />
<text  x="731.49" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="85.1" y="341" width="0.3" height="15.0" fill="rgb(205,72,23)" rx="2" ry="2" />
<text  x="88.14" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="373" width="0.3" height="15.0" fill="rgb(227,35,41)" rx="2" ry="2" />
<text  x="113.34" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,041 samples, 20.03%)</title><rect x="882.4" y="485" width="236.3" height="15.0" fill="rgb(207,139,6)" rx="2" ry="2" />
<text  x="885.40" y="495.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="479.5" y="341" width="0.2" height="15.0" fill="rgb(238,100,37)" rx="2" ry="2" />
<text  x="482.46" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.2" y="405" width="0.2" height="15.0" fill="rgb(226,53,44)" rx="2" ry="2" />
<text  x="68.16" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="543.7" y="309" width="0.2" height="15.0" fill="rgb(249,96,0)" rx="2" ry="2" />
<text  x="546.70" y="319.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="18.2" y="485" width="0.2" height="15.0" fill="rgb(214,102,20)" rx="2" ry="2" />
<text  x="21.17" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="56.1" y="181" width="0.4" height="15.0" fill="rgb(242,141,20)" rx="2" ry="2" />
<text  x="59.08" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="1149.6" y="485" width="1.6" height="15.0" fill="rgb(227,160,14)" rx="2" ry="2" />
<text  x="1152.59" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="808.4" y="293" width="0.2" height="15.0" fill="rgb(231,150,4)" rx="2" ry="2" />
<text  x="811.40" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="679.7" y="517" width="0.2" height="15.0" fill="rgb(250,154,5)" rx="2" ry="2" />
<text  x="682.68" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1165.5" y="389" width="0.2" height="15.0" fill="rgb(246,216,17)" rx="2" ry="2" />
<text  x="1168.48" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="979.6" y="309" width="1.1" height="15.0" fill="rgb(247,87,37)" rx="2" ry="2" />
<text  x="982.56" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="40.9" y="341" width="0.4" height="15.0" fill="rgb(246,125,6)" rx="2" ry="2" />
<text  x="43.87" y="351.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="722.4" y="469" width="0.2" height="15.0" fill="rgb(225,128,42)" rx="2" ry="2" />
<text  x="725.36" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="641.3" y="501" width="0.2" height="15.0" fill="rgb(235,17,47)" rx="2" ry="2" />
<text  x="644.32" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="1079.4" y="389" width="1.4" height="15.0" fill="rgb(219,148,18)" rx="2" ry="2" />
<text  x="1082.45" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="724.4" y="533" width="0.2" height="15.0" fill="rgb(244,150,28)" rx="2" ry="2" />
<text  x="727.40" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="25.2" y="293" width="1.1" height="15.0" fill="rgb(208,88,7)" rx="2" ry="2" />
<text  x="28.21" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="42.7" y="213" width="0.2" height="15.0" fill="rgb(241,92,45)" rx="2" ry="2" />
<text  x="45.69" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="52.9" y="197" width="0.5" height="15.0" fill="rgb(222,111,20)" rx="2" ry="2" />
<text  x="55.90" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.4" y="229" width="0.2" height="15.0" fill="rgb(252,204,29)" rx="2" ry="2" />
<text  x="41.38" y="239.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%)</title><rect x="852.7" y="421" width="0.4" height="15.0" fill="rgb(248,132,0)" rx="2" ry="2" />
<text  x="855.66" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="806.6" y="229" width="0.2" height="15.0" fill="rgb(235,137,33)" rx="2" ry="2" />
<text  x="809.58" y="239.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (8 samples, 0.15%)</title><rect x="1120.1" y="277" width="1.8" height="15.0" fill="rgb(248,38,10)" rx="2" ry="2" />
<text  x="1123.08" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="81.3" y="517" width="0.2" height="15.0" fill="rgb(246,44,35)" rx="2" ry="2" />
<text  x="84.28" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (1 samples, 0.02%)</title><rect x="60.6" y="389" width="0.3" height="15.0" fill="rgb(252,172,18)" rx="2" ry="2" />
<text  x="63.62" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (10 samples, 0.19%)</title><rect x="1107.4" y="437" width="2.2" height="15.0" fill="rgb(253,167,33)" rx="2" ry="2" />
<text  x="1110.37" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="56.8" y="133" width="0.2" height="15.0" fill="rgb(251,27,42)" rx="2" ry="2" />
<text  x="59.76" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="323.7" y="293" width="1.8" height="15.0" fill="rgb(249,68,24)" rx="2" ry="2" />
<text  x="326.73" y="303.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (3 samples, 0.06%)</title><rect x="1110.1" y="453" width="0.7" height="15.0" fill="rgb(210,116,51)" rx="2" ry="2" />
<text  x="1113.09" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="575.7" y="437" width="0.5" height="15.0" fill="rgb(251,125,1)" rx="2" ry="2" />
<text  x="578.71" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (6 samples, 0.12%)</title><rect x="988.9" y="309" width="1.3" height="15.0" fill="rgb(222,13,18)" rx="2" ry="2" />
<text  x="991.87" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="136.7" y="405" width="0.2" height="15.0" fill="rgb(245,0,28)" rx="2" ry="2" />
<text  x="139.67" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="134.2" y="405" width="0.2" height="15.0" fill="rgb(254,205,27)" rx="2" ry="2" />
<text  x="137.17" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="862.0" y="437" width="0.4" height="15.0" fill="rgb(218,159,29)" rx="2" ry="2" />
<text  x="864.97" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (3 samples, 0.06%)</title><rect x="57.0" y="101" width="0.7" height="15.0" fill="rgb(234,224,26)" rx="2" ry="2" />
<text  x="59.99" y="111.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="637.7" y="421" width="0.9" height="15.0" fill="rgb(219,187,4)" rx="2" ry="2" />
<text  x="640.68" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (506 samples, 9.73%)</title><rect x="337.3" y="357" width="114.9" height="15.0" fill="rgb(222,131,29)" rx="2" ry="2" />
<text  x="340.35" y="367.5" >seastar::inter..</text>
</g>
<g >
<title>frozen_mutation::partition (2 samples, 0.04%)</title><rect x="1119.6" y="277" width="0.5" height="15.0" fill="rgb(232,65,27)" rx="2" ry="2" />
<text  x="1122.63" y="287.5" ></text>
</g>
<g >
<title>database::find_schema (22 samples, 0.42%)</title><rect x="823.4" y="405" width="5.0" height="15.0" fill="rgb(239,15,32)" rx="2" ry="2" />
<text  x="826.38" y="415.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="32.7" y="277" width="0.5" height="15.0" fill="rgb(233,167,26)" rx="2" ry="2" />
<text  x="35.70" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (13 samples, 0.25%)</title><rect x="668.8" y="469" width="2.9" height="15.0" fill="rgb(229,59,31)" rx="2" ry="2" />
<text  x="671.78" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%)</title><rect x="211.1" y="229" width="0.7" height="15.0" fill="rgb(226,212,40)" rx="2" ry="2" />
<text  x="214.13" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.08%)</title><rect x="585.0" y="325" width="0.9" height="15.0" fill="rgb(231,42,16)" rx="2" ry="2" />
<text  x="588.02" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="728.3" y="501" width="0.2" height="15.0" fill="rgb(245,180,10)" rx="2" ry="2" />
<text  x="731.26" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="819.1" y="341" width="0.2" height="15.0" fill="rgb(229,38,32)" rx="2" ry="2" />
<text  x="822.07" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="341.7" y="325" width="0.4" height="15.0" fill="rgb(245,190,25)" rx="2" ry="2" />
<text  x="344.66" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="63.6" y="309" width="0.2" height="15.0" fill="rgb(216,198,25)" rx="2" ry="2" />
<text  x="66.57" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="1026.3" y="229" width="0.3" height="15.0" fill="rgb(237,86,18)" rx="2" ry="2" />
<text  x="1029.33" y="239.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="17.9" y="325" width="0.3" height="15.0" fill="rgb(207,114,4)" rx="2" ry="2" />
<text  x="20.95" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="1133.5" y="357" width="0.4" height="15.0" fill="rgb(235,58,43)" rx="2" ry="2" />
<text  x="1136.47" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="49.5" y="213" width="0.5" height="15.0" fill="rgb(215,181,47)" rx="2" ry="2" />
<text  x="52.50" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="826.1" y="325" width="0.5" height="15.0" fill="rgb(208,225,9)" rx="2" ry="2" />
<text  x="829.10" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="39.7" y="373" width="1.6" height="15.0" fill="rgb(206,226,10)" rx="2" ry="2" />
<text  x="42.74" y="383.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="111.2" y="293" width="0.3" height="15.0" fill="rgb(219,212,17)" rx="2" ry="2" />
<text  x="114.25" y="303.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="278.6" y="245" width="0.2" height="15.0" fill="rgb(253,20,34)" rx="2" ry="2" />
<text  x="281.55" y="255.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (5 samples, 0.10%)</title><rect x="85.6" y="453" width="1.1" height="15.0" fill="rgb(234,201,15)" rx="2" ry="2" />
<text  x="88.59" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="61.5" y="341" width="0.3" height="15.0" fill="rgb(243,95,44)" rx="2" ry="2" />
<text  x="64.53" y="351.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="109.9" y="437" width="0.2" height="15.0" fill="rgb(248,178,54)" rx="2" ry="2" />
<text  x="112.88" y="447.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (14 samples, 0.27%)</title><rect x="358.5" y="213" width="3.1" height="15.0" fill="rgb(215,194,35)" rx="2" ry="2" />
<text  x="361.46" y="223.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.1" y="181" width="0.2" height="15.0" fill="rgb(228,107,24)" rx="2" ry="2" />
<text  x="44.10" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="716.7" y="453" width="0.2" height="15.0" fill="rgb(237,13,9)" rx="2" ry="2" />
<text  x="719.68" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="43.4" y="309" width="0.2" height="15.0" fill="rgb(229,182,43)" rx="2" ry="2" />
<text  x="46.37" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="873.8" y="293" width="0.2" height="15.0" fill="rgb(251,107,23)" rx="2" ry="2" />
<text  x="876.77" y="303.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="26.1" y="277" width="0.2" height="15.0" fill="rgb(211,208,33)" rx="2" ry="2" />
<text  x="29.12" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (3 samples, 0.06%)</title><rect x="716.9" y="453" width="0.7" height="15.0" fill="rgb(212,125,50)" rx="2" ry="2" />
<text  x="719.91" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (1 samples, 0.02%)</title><rect x="87.6" y="549" width="0.3" height="15.0" fill="rgb(243,43,21)" rx="2" ry="2" />
<text  x="90.64" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="63.6" y="277" width="0.2" height="15.0" fill="rgb(227,197,45)" rx="2" ry="2" />
<text  x="66.57" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="23.8" y="293" width="0.3" height="15.0" fill="rgb(218,117,19)" rx="2" ry="2" />
<text  x="26.85" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (3 samples, 0.06%)</title><rect x="26.6" y="277" width="0.7" height="15.0" fill="rgb(247,31,49)" rx="2" ry="2" />
<text  x="29.57" y="287.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="874.5" y="293" width="0.2" height="15.0" fill="rgb(224,150,6)" rx="2" ry="2" />
<text  x="877.46" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="330.1" y="389" width="0.2" height="15.0" fill="rgb(230,35,53)" rx="2" ry="2" />
<text  x="333.08" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (45 samples, 0.87%)</title><rect x="1013.2" y="261" width="10.2" height="15.0" fill="rgb(249,139,24)" rx="2" ry="2" />
<text  x="1016.16" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="545.1" y="341" width="1.1" height="15.0" fill="rgb(215,136,51)" rx="2" ry="2" />
<text  x="548.06" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="57.0" y="165" width="0.7" height="15.0" fill="rgb(239,138,36)" rx="2" ry="2" />
<text  x="59.99" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (4 samples, 0.08%)</title><rect x="524.6" y="309" width="0.9" height="15.0" fill="rgb(228,22,9)" rx="2" ry="2" />
<text  x="527.63" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.0" y="357" width="0.3" height="15.0" fill="rgb(212,207,20)" rx="2" ry="2" />
<text  x="699.03" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="764.8" y="373" width="1.4" height="15.0" fill="rgb(242,45,32)" rx="2" ry="2" />
<text  x="767.81" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (75 samples, 1.44%)</title><rect x="523.0" y="325" width="17.1" height="15.0" fill="rgb(225,91,25)" rx="2" ry="2" />
<text  x="526.04" y="335.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.08%)</title><rect x="611.1" y="453" width="0.9" height="15.0" fill="rgb(247,197,49)" rx="2" ry="2" />
<text  x="614.12" y="463.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="126.5" y="485" width="0.4" height="15.0" fill="rgb(237,128,17)" rx="2" ry="2" />
<text  x="129.46" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="1141.2" y="517" width="0.4" height="15.0" fill="rgb(251,86,3)" rx="2" ry="2" />
<text  x="1144.19" y="527.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="1120.8" y="165" width="0.2" height="15.0" fill="rgb(210,79,15)" rx="2" ry="2" />
<text  x="1123.76" y="175.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="291.0" y="229" width="0.3" height="15.0" fill="rgb(252,40,23)" rx="2" ry="2" />
<text  x="294.04" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="57.9" y="213" width="0.2" height="15.0" fill="rgb(206,36,30)" rx="2" ry="2" />
<text  x="60.90" y="223.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="545.1" y="357" width="1.1" height="15.0" fill="rgb(239,15,12)" rx="2" ry="2" />
<text  x="548.06" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="548.7" y="357" width="0.2" height="15.0" fill="rgb(248,130,0)" rx="2" ry="2" />
<text  x="551.70" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.12%)</title><rect x="268.1" y="165" width="1.4" height="15.0" fill="rgb(229,48,23)" rx="2" ry="2" />
<text  x="271.11" y="175.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%)</title><rect x="803.4" y="165" width="0.9" height="15.0" fill="rgb(222,47,30)" rx="2" ry="2" />
<text  x="806.40" y="175.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="62.4" y="309" width="0.3" height="15.0" fill="rgb(228,164,50)" rx="2" ry="2" />
<text  x="65.44" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (24 samples, 0.46%)</title><rect x="473.3" y="325" width="5.5" height="15.0" fill="rgb(230,142,14)" rx="2" ry="2" />
<text  x="476.33" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="396.8" y="181" width="0.5" height="15.0" fill="rgb(206,149,31)" rx="2" ry="2" />
<text  x="399.83" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="24.1" y="293" width="0.2" height="15.0" fill="rgb(215,127,18)" rx="2" ry="2" />
<text  x="27.07" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (3 samples, 0.06%)</title><rect x="664.0" y="501" width="0.7" height="15.0" fill="rgb(251,102,47)" rx="2" ry="2" />
<text  x="667.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="103.5" y="453" width="0.3" height="15.0" fill="rgb(220,15,44)" rx="2" ry="2" />
<text  x="106.53" y="463.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="109.0" y="357" width="0.2" height="15.0" fill="rgb(232,172,41)" rx="2" ry="2" />
<text  x="111.98" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="816.3" y="325" width="0.3" height="15.0" fill="rgb(254,26,8)" rx="2" ry="2" />
<text  x="819.34" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (3 samples, 0.06%)</title><rect x="133.7" y="421" width="0.7" height="15.0" fill="rgb(228,72,21)" rx="2" ry="2" />
<text  x="136.72" y="431.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1046.1" y="373" width="0.2" height="15.0" fill="rgb(232,71,8)" rx="2" ry="2" />
<text  x="1049.08" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="643.8" y="517" width="0.5" height="15.0" fill="rgb(209,45,24)" rx="2" ry="2" />
<text  x="646.81" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="525.3" y="293" width="0.2" height="15.0" fill="rgb(225,103,39)" rx="2" ry="2" />
<text  x="528.31" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="574.1" y="309" width="0.2" height="15.0" fill="rgb(220,8,42)" rx="2" ry="2" />
<text  x="577.12" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%)</title><rect x="926.2" y="373" width="0.7" height="15.0" fill="rgb(210,147,5)" rx="2" ry="2" />
<text  x="929.21" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="63.1" y="101" width="0.2" height="15.0" fill="rgb(212,168,44)" rx="2" ry="2" />
<text  x="66.12" y="111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="141.9" y="485" width="0.2" height="15.0" fill="rgb(250,181,48)" rx="2" ry="2" />
<text  x="144.89" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.12%)</title><rect x="136.9" y="405" width="1.4" height="15.0" fill="rgb(217,176,22)" rx="2" ry="2" />
<text  x="139.90" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="202.1" y="309" width="0.6" height="15.0" fill="rgb(241,96,31)" rx="2" ry="2" />
<text  x="205.05" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (4 samples, 0.08%)</title><rect x="132.6" y="421" width="0.9" height="15.0" fill="rgb(242,186,27)" rx="2" ry="2" />
<text  x="135.59" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (6 samples, 0.12%)</title><rect x="773.4" y="405" width="1.4" height="15.0" fill="rgb(224,67,42)" rx="2" ry="2" />
<text  x="776.44" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="325.5" y="309" width="0.5" height="15.0" fill="rgb(232,38,23)" rx="2" ry="2" />
<text  x="328.54" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1129.4" y="197" width="0.2" height="15.0" fill="rgb(210,86,3)" rx="2" ry="2" />
<text  x="1132.39" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="763.2" y="437" width="0.2" height="15.0" fill="rgb(208,93,46)" rx="2" ry="2" />
<text  x="766.22" y="447.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (15 samples, 0.29%)</title><rect x="566.9" y="421" width="3.4" height="15.0" fill="rgb(248,79,8)" rx="2" ry="2" />
<text  x="569.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="118.7" y="485" width="0.3" height="15.0" fill="rgb(218,104,19)" rx="2" ry="2" />
<text  x="121.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="482.6" y="293" width="0.3" height="15.0" fill="rgb(253,10,12)" rx="2" ry="2" />
<text  x="485.64" y="303.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="341.4" y="325" width="0.3" height="15.0" fill="rgb(246,211,35)" rx="2" ry="2" />
<text  x="344.44" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="722.8" y="437" width="0.2" height="15.0" fill="rgb(209,156,39)" rx="2" ry="2" />
<text  x="725.81" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (2 samples, 0.04%)</title><rect x="895.8" y="341" width="0.4" height="15.0" fill="rgb(219,134,9)" rx="2" ry="2" />
<text  x="898.79" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="75.6" y="389" width="0.2" height="15.0" fill="rgb(233,37,35)" rx="2" ry="2" />
<text  x="78.61" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="423.8" y="197" width="0.5" height="15.0" fill="rgb(222,218,54)" rx="2" ry="2" />
<text  x="426.84" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (4 samples, 0.08%)</title><rect x="1132.3" y="229" width="0.9" height="15.0" fill="rgb(224,5,20)" rx="2" ry="2" />
<text  x="1135.34" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (3 samples, 0.06%)</title><rect x="719.0" y="485" width="0.6" height="15.0" fill="rgb(246,103,15)" rx="2" ry="2" />
<text  x="721.95" y="495.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="110.1" y="533" width="0.2" height="15.0" fill="rgb(208,198,31)" rx="2" ry="2" />
<text  x="113.11" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="74.9" y="309" width="0.3" height="15.0" fill="rgb(240,4,31)" rx="2" ry="2" />
<text  x="77.92" y="319.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%)</title><rect x="197.1" y="261" width="0.6" height="15.0" fill="rgb(248,33,48)" rx="2" ry="2" />
<text  x="200.06" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="73.3" y="405" width="0.3" height="15.0" fill="rgb(241,59,48)" rx="2" ry="2" />
<text  x="76.34" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="585.2" y="309" width="0.7" height="15.0" fill="rgb(211,15,25)" rx="2" ry="2" />
<text  x="588.24" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (10 samples, 0.19%)</title><rect x="572.3" y="389" width="2.3" height="15.0" fill="rgb(232,97,20)" rx="2" ry="2" />
<text  x="575.30" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="677.9" y="501" width="1.1" height="15.0" fill="rgb(254,182,49)" rx="2" ry="2" />
<text  x="680.86" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%)</title><rect x="1000.2" y="293" width="0.5" height="15.0" fill="rgb(205,110,52)" rx="2" ry="2" />
<text  x="1003.22" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="706.0" y="485" width="0.5" height="15.0" fill="rgb(232,123,53)" rx="2" ry="2" />
<text  x="709.01" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="659.7" y="421" width="0.5" height="15.0" fill="rgb(242,123,24)" rx="2" ry="2" />
<text  x="662.70" y="431.5" ></text>
</g>
<g >
<title>generate_legacy_id (1 samples, 0.02%)</title><rect x="110.1" y="501" width="0.2" height="15.0" fill="rgb(247,198,26)" rx="2" ry="2" />
<text  x="113.11" y="511.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1122.1" y="245" width="0.3" height="15.0" fill="rgb(246,83,25)" rx="2" ry="2" />
<text  x="1125.12" y="255.5" ></text>
</g>
<g >
<title>difference&lt;std::map, utils::UUID, schema_mutations, std::equal_to&lt;schema_mutations&gt;, std::less&lt;utils::UUID&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, schema_mutations&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="108.5" y="485" width="0.2" height="15.0" fill="rgb(244,49,35)" rx="2" ry="2" />
<text  x="111.52" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="205.5" y="293" width="0.2" height="15.0" fill="rgb(249,66,9)" rx="2" ry="2" />
<text  x="208.46" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="1044.0" y="293" width="0.5" height="15.0" fill="rgb(238,22,35)" rx="2" ry="2" />
<text  x="1047.03" y="303.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (8 samples, 0.15%)</title><rect x="1154.6" y="501" width="1.8" height="15.0" fill="rgb(229,61,52)" rx="2" ry="2" />
<text  x="1157.59" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.6" y="197" width="0.3" height="15.0" fill="rgb(244,90,49)" rx="2" ry="2" />
<text  x="43.65" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="81.1" y="517" width="0.2" height="15.0" fill="rgb(245,205,15)" rx="2" ry="2" />
<text  x="84.05" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.8" y="277" width="0.2" height="15.0" fill="rgb(219,21,1)" rx="2" ry="2" />
<text  x="44.78" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="72.0" y="373" width="0.2" height="15.0" fill="rgb(235,210,38)" rx="2" ry="2" />
<text  x="74.97" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="96.7" y="517" width="0.5" height="15.0" fill="rgb(225,182,23)" rx="2" ry="2" />
<text  x="99.72" y="527.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="82.9" y="645" width="0.2" height="15.0" fill="rgb(232,219,0)" rx="2" ry="2" />
<text  x="85.87" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="821.6" y="373" width="0.2" height="15.0" fill="rgb(210,173,6)" rx="2" ry="2" />
<text  x="824.56" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="669.9" y="421" width="0.2" height="15.0" fill="rgb(254,214,35)" rx="2" ry="2" />
<text  x="672.92" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="85.1" y="357" width="0.3" height="15.0" fill="rgb(208,26,43)" rx="2" ry="2" />
<text  x="88.14" y="367.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="53.8" y="277" width="0.2" height="15.0" fill="rgb(252,165,37)" rx="2" ry="2" />
<text  x="56.81" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="476.1" y="261" width="0.9" height="15.0" fill="rgb(252,40,28)" rx="2" ry="2" />
<text  x="479.05" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (4 samples, 0.08%)</title><rect x="906.0" y="357" width="0.9" height="15.0" fill="rgb(211,54,23)" rx="2" ry="2" />
<text  x="909.01" y="367.5" ></text>
</g>
<g >
<title>ser::after_column__id&lt;bytes_ostream&gt;::start_c_variant (1 samples, 0.02%)</title><rect x="1130.8" y="133" width="0.2" height="15.0" fill="rgb(227,67,34)" rx="2" ry="2" />
<text  x="1133.75" y="143.5" ></text>
</g>
<g >
<title>service::shared_mutation::~shared_mutation (1 samples, 0.02%)</title><rect x="697.8" y="501" width="0.3" height="15.0" fill="rgb(231,134,4)" rx="2" ry="2" />
<text  x="700.84" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="285.6" y="229" width="0.2" height="15.0" fill="rgb(212,39,40)" rx="2" ry="2" />
<text  x="288.59" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="136.4" y="421" width="0.3" height="15.0" fill="rgb(226,133,50)" rx="2" ry="2" />
<text  x="139.44" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="391.8" y="197" width="0.5" height="15.0" fill="rgb(247,21,19)" rx="2" ry="2" />
<text  x="394.83" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="574.8" y="421" width="0.5" height="15.0" fill="rgb(214,9,24)" rx="2" ry="2" />
<text  x="577.80" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="184.3" y="325" width="0.3" height="15.0" fill="rgb(243,7,11)" rx="2" ry="2" />
<text  x="187.34" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1075.1" y="325" width="0.3" height="15.0" fill="rgb(245,166,8)" rx="2" ry="2" />
<text  x="1078.13" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="48.6" y="261" width="0.2" height="15.0" fill="rgb(207,30,53)" rx="2" ry="2" />
<text  x="51.59" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="582.1" y="325" width="0.2" height="15.0" fill="rgb(220,34,33)" rx="2" ry="2" />
<text  x="585.07" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="268.6" y="149" width="0.6" height="15.0" fill="rgb(222,77,40)" rx="2" ry="2" />
<text  x="271.56" y="159.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="167.1" y="453" width="0.2" height="15.0" fill="rgb(218,120,40)" rx="2" ry="2" />
<text  x="170.09" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1054.7" y="325" width="0.2" height="15.0" fill="rgb(209,81,3)" rx="2" ry="2" />
<text  x="1057.70" y="335.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="212.0" y="229" width="1.2" height="15.0" fill="rgb(242,192,10)" rx="2" ry="2" />
<text  x="215.04" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_write_response_handler&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1132.6" y="213" width="0.2" height="15.0" fill="rgb(222,105,22)" rx="2" ry="2" />
<text  x="1135.57" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="831.1" y="325" width="0.2" height="15.0" fill="rgb(241,84,31)" rx="2" ry="2" />
<text  x="834.10" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.9" y="405" width="0.3" height="15.0" fill="rgb(242,45,18)" rx="2" ry="2" />
<text  x="67.94" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1109.0" y="421" width="0.2" height="15.0" fill="rgb(223,3,18)" rx="2" ry="2" />
<text  x="1111.96" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_impl::switch_in (1 samples, 0.02%)</title><rect x="1137.1" y="533" width="0.2" height="15.0" fill="rgb(224,193,42)" rx="2" ry="2" />
<text  x="1140.11" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1119.2" y="277" width="0.2" height="15.0" fill="rgb(251,110,41)" rx="2" ry="2" />
<text  x="1122.17" y="287.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="832.0" y="437" width="0.2" height="15.0" fill="rgb(221,216,43)" rx="2" ry="2" />
<text  x="835.00" y="447.5" ></text>
</g>
<g >
<title>query::result::builder::build (5 samples, 0.10%)</title><rect x="611.1" y="469" width="1.2" height="15.0" fill="rgb(216,24,9)" rx="2" ry="2" />
<text  x="614.12" y="479.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="158.7" y="469" width="0.4" height="15.0" fill="rgb(219,22,31)" rx="2" ry="2" />
<text  x="161.69" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="694.0" y="469" width="0.2" height="15.0" fill="rgb(210,227,22)" rx="2" ry="2" />
<text  x="696.98" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (9 samples, 0.17%)</title><rect x="760.7" y="437" width="2.1" height="15.0" fill="rgb(231,176,4)" rx="2" ry="2" />
<text  x="763.72" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="55.2" y="229" width="0.2" height="15.0" fill="rgb(250,197,49)" rx="2" ry="2" />
<text  x="58.18" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1133.7" y="261" width="0.2" height="15.0" fill="rgb(229,166,11)" rx="2" ry="2" />
<text  x="1136.70" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="737.3" y="325" width="0.5" height="15.0" fill="rgb(216,118,35)" rx="2" ry="2" />
<text  x="740.34" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="533.3" y="197" width="0.2" height="15.0" fill="rgb(216,153,15)" rx="2" ry="2" />
<text  x="536.26" y="207.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="211.4" y="213" width="0.4" height="15.0" fill="rgb(248,159,34)" rx="2" ry="2" />
<text  x="214.36" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.4" y="293" width="0.2" height="15.0" fill="rgb(243,184,6)" rx="2" ry="2" />
<text  x="83.37" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="405" width="0.5" height="15.0" fill="rgb(206,62,18)" rx="2" ry="2" />
<text  x="699.03" y="415.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (1 samples, 0.02%)</title><rect x="109.0" y="389" width="0.2" height="15.0" fill="rgb(248,170,54)" rx="2" ry="2" />
<text  x="111.98" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="618.6" y="437" width="0.2" height="15.0" fill="rgb(237,191,12)" rx="2" ry="2" />
<text  x="621.61" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%)</title><rect x="656.1" y="517" width="0.9" height="15.0" fill="rgb(222,67,46)" rx="2" ry="2" />
<text  x="659.07" y="527.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="261.8" y="197" width="1.1" height="15.0" fill="rgb(242,100,16)" rx="2" ry="2" />
<text  x="264.75" y="207.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="59.3" y="261" width="0.2" height="15.0" fill="rgb(232,34,54)" rx="2" ry="2" />
<text  x="62.26" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%)</title><rect x="915.3" y="389" width="1.8" height="15.0" fill="rgb(253,149,37)" rx="2" ry="2" />
<text  x="918.32" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="50.2" y="197" width="0.2" height="15.0" fill="rgb(219,8,29)" rx="2" ry="2" />
<text  x="53.18" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="57.0" y="213" width="0.7" height="15.0" fill="rgb(213,80,30)" rx="2" ry="2" />
<text  x="59.99" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="660.4" y="469" width="0.2" height="15.0" fill="rgb(245,193,37)" rx="2" ry="2" />
<text  x="663.38" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="459.9" y="405" width="0.3" height="15.0" fill="rgb(214,177,29)" rx="2" ry="2" />
<text  x="462.93" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="78.3" y="437" width="0.3" height="15.0" fill="rgb(222,0,3)" rx="2" ry="2" />
<text  x="81.33" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="53.6" y="309" width="0.2" height="15.0" fill="rgb(240,55,3)" rx="2" ry="2" />
<text  x="56.59" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%)</title><rect x="852.9" y="405" width="0.2" height="15.0" fill="rgb(223,17,47)" rx="2" ry="2" />
<text  x="855.89" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1134.4" y="517" width="0.7" height="15.0" fill="rgb(210,141,12)" rx="2" ry="2" />
<text  x="1137.38" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%)</title><rect x="535.5" y="261" width="0.7" height="15.0" fill="rgb(250,83,53)" rx="2" ry="2" />
<text  x="538.53" y="271.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="819.1" y="325" width="0.2" height="15.0" fill="rgb(214,21,54)" rx="2" ry="2" />
<text  x="822.07" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="825.2" y="357" width="2.9" height="15.0" fill="rgb(206,202,40)" rx="2" ry="2" />
<text  x="828.19" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="630.2" y="421" width="0.2" height="15.0" fill="rgb(241,83,43)" rx="2" ry="2" />
<text  x="633.19" y="431.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (3 samples, 0.06%)</title><rect x="519.0" y="341" width="0.6" height="15.0" fill="rgb(250,49,36)" rx="2" ry="2" />
<text  x="521.96" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="649.0" y="517" width="0.3" height="15.0" fill="rgb(248,13,54)" rx="2" ry="2" />
<text  x="652.03" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%)</title><rect x="752.8" y="341" width="1.6" height="15.0" fill="rgb(214,108,48)" rx="2" ry="2" />
<text  x="755.78" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="22.3" y="389" width="0.2" height="15.0" fill="rgb(217,223,14)" rx="2" ry="2" />
<text  x="25.26" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="308.5" y="341" width="0.2" height="15.0" fill="rgb(212,73,34)" rx="2" ry="2" />
<text  x="311.52" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="66.8" y="389" width="0.2" height="15.0" fill="rgb(239,9,1)" rx="2" ry="2" />
<text  x="69.75" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="906.7" y="325" width="0.2" height="15.0" fill="rgb(233,207,19)" rx="2" ry="2" />
<text  x="909.69" y="335.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.2" y="341" width="0.2" height="15.0" fill="rgb(241,142,22)" rx="2" ry="2" />
<text  x="112.20" y="351.5" ></text>
</g>
<g >
<title>dht::tri_compare (14 samples, 0.27%)</title><rect x="1063.8" y="261" width="3.2" height="15.0" fill="rgb(221,43,52)" rx="2" ry="2" />
<text  x="1066.78" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="787.7" y="293" width="1.2" height="15.0" fill="rgb(208,62,37)" rx="2" ry="2" />
<text  x="790.74" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="50.2" y="309" width="0.2" height="15.0" fill="rgb(238,165,7)" rx="2" ry="2" />
<text  x="53.18" y="319.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="41.6" y="373" width="0.2" height="15.0" fill="rgb(237,225,54)" rx="2" ry="2" />
<text  x="44.55" y="383.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="667.9" y="485" width="0.2" height="15.0" fill="rgb(218,193,38)" rx="2" ry="2" />
<text  x="670.88" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="951.0" y="405" width="0.2" height="15.0" fill="rgb(232,118,15)" rx="2" ry="2" />
<text  x="953.96" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="899.2" y="309" width="0.2" height="15.0" fill="rgb(244,80,52)" rx="2" ry="2" />
<text  x="902.20" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="63.1" y="197" width="0.2" height="15.0" fill="rgb(253,183,49)" rx="2" ry="2" />
<text  x="66.12" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (2 samples, 0.04%)</title><rect x="469.2" y="373" width="0.5" height="15.0" fill="rgb(218,148,46)" rx="2" ry="2" />
<text  x="472.24" y="383.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1126.2" y="293" width="0.2" height="15.0" fill="rgb(237,125,23)" rx="2" ry="2" />
<text  x="1129.21" y="303.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (53 samples, 1.02%)</title><rect x="503.3" y="325" width="12.0" height="15.0" fill="rgb(206,210,50)" rx="2" ry="2" />
<text  x="506.29" y="335.5" ></text>
</g>
<g >
<title>table::query (2,190 samples, 42.13%)</title><rect x="142.3" y="485" width="497.2" height="15.0" fill="rgb(240,208,8)" rx="2" ry="2" />
<text  x="145.35" y="495.5" >table::query</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="327.6" y="357" width="0.4" height="15.0" fill="rgb(244,36,45)" rx="2" ry="2" />
<text  x="330.59" y="367.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (1 samples, 0.02%)</title><rect x="109.0" y="421" width="0.2" height="15.0" fill="rgb(241,99,44)" rx="2" ry="2" />
<text  x="111.98" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::select_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.7" y="405" width="0.2" height="15.0" fill="rgb(243,5,3)" rx="2" ry="2" />
<text  x="70.66" y="415.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (2 samples, 0.04%)</title><rect x="111.2" y="437" width="0.5" height="15.0" fill="rgb(218,19,15)" rx="2" ry="2" />
<text  x="114.25" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%)</title><rect x="1165.5" y="501" width="0.2" height="15.0" fill="rgb(234,73,21)" rx="2" ry="2" />
<text  x="1168.48" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="45.9" y="325" width="0.2" height="15.0" fill="rgb(208,185,17)" rx="2" ry="2" />
<text  x="48.87" y="335.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%)</title><rect x="1000.0" y="293" width="0.2" height="15.0" fill="rgb(242,13,16)" rx="2" ry="2" />
<text  x="1002.99" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="807.3" y="229" width="0.2" height="15.0" fill="rgb(213,102,2)" rx="2" ry="2" />
<text  x="810.26" y="239.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="872.0" y="325" width="0.2" height="15.0" fill="rgb(224,70,48)" rx="2" ry="2" />
<text  x="874.96" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="104.9" y="469" width="0.2" height="15.0" fill="rgb(238,30,42)" rx="2" ry="2" />
<text  x="107.89" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.5" y="293" width="0.3" height="15.0" fill="rgb(239,219,15)" rx="2" ry="2" />
<text  x="64.53" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.9" y="421" width="0.3" height="15.0" fill="rgb(251,175,35)" rx="2" ry="2" />
<text  x="20.95" y="431.5" ></text>
</g>
<g >
<title>query::result_set::result_set (2 samples, 0.04%)</title><rect x="109.7" y="517" width="0.4" height="15.0" fill="rgb(241,76,50)" rx="2" ry="2" />
<text  x="112.66" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="39.7" y="389" width="1.6" height="15.0" fill="rgb(213,124,46)" rx="2" ry="2" />
<text  x="42.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="903.7" y="389" width="0.3" height="15.0" fill="rgb(253,55,19)" rx="2" ry="2" />
<text  x="906.74" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="816.6" y="341" width="0.6" height="15.0" fill="rgb(244,35,24)" rx="2" ry="2" />
<text  x="819.57" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (10 samples, 0.19%)</title><rect x="904.6" y="389" width="2.3" height="15.0" fill="rgb(245,146,27)" rx="2" ry="2" />
<text  x="907.65" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%)</title><rect x="110.3" y="437" width="0.5" height="15.0" fill="rgb(249,161,12)" rx="2" ry="2" />
<text  x="113.34" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="82.9" y="597" width="0.2" height="15.0" fill="rgb(228,194,21)" rx="2" ry="2" />
<text  x="85.87" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="1036.5" y="261" width="0.9" height="15.0" fill="rgb(227,126,41)" rx="2" ry="2" />
<text  x="1039.54" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="820.0" y="421" width="0.2" height="15.0" fill="rgb(244,165,14)" rx="2" ry="2" />
<text  x="822.97" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="810.0" y="245" width="0.4" height="15.0" fill="rgb(249,62,28)" rx="2" ry="2" />
<text  x="812.98" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="43.1" y="325" width="0.5" height="15.0" fill="rgb(233,215,39)" rx="2" ry="2" />
<text  x="46.14" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (5 samples, 0.10%)</title><rect x="270.6" y="213" width="1.1" height="15.0" fill="rgb(229,127,25)" rx="2" ry="2" />
<text  x="273.61" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%)</title><rect x="870.6" y="389" width="0.5" height="15.0" fill="rgb(237,74,46)" rx="2" ry="2" />
<text  x="873.60" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (37 samples, 0.71%)</title><rect x="1048.6" y="373" width="8.4" height="15.0" fill="rgb(239,46,22)" rx="2" ry="2" />
<text  x="1051.57" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.7" y="309" width="0.7" height="15.0" fill="rgb(246,217,26)" rx="2" ry="2" />
<text  x="42.74" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="78.8" y="501" width="0.2" height="15.0" fill="rgb(231,177,12)" rx="2" ry="2" />
<text  x="81.78" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="56.8" y="149" width="0.2" height="15.0" fill="rgb(237,62,13)" rx="2" ry="2" />
<text  x="59.76" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (15 samples, 0.29%)</title><rect x="853.8" y="421" width="3.4" height="15.0" fill="rgb(252,116,46)" rx="2" ry="2" />
<text  x="856.80" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__203 (1 samples, 0.02%)</title><rect x="34.7" y="293" width="0.3" height="15.0" fill="rgb(208,30,3)" rx="2" ry="2" />
<text  x="37.74" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (5 samples, 0.10%)</title><rect x="537.8" y="309" width="1.1" height="15.0" fill="rgb(207,188,54)" rx="2" ry="2" />
<text  x="540.80" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="54.7" y="293" width="0.7" height="15.0" fill="rgb(251,139,14)" rx="2" ry="2" />
<text  x="57.72" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="25.4" y="277" width="0.7" height="15.0" fill="rgb(223,163,10)" rx="2" ry="2" />
<text  x="28.44" y="287.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="109.0" y="453" width="0.2" height="15.0" fill="rgb(234,179,7)" rx="2" ry="2" />
<text  x="111.98" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="245" width="0.4" height="15.0" fill="rgb(234,189,30)" rx="2" ry="2" />
<text  x="59.08" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="77.6" y="453" width="0.3" height="15.0" fill="rgb(252,190,36)" rx="2" ry="2" />
<text  x="80.65" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="49.3" y="309" width="0.9" height="15.0" fill="rgb(215,62,44)" rx="2" ry="2" />
<text  x="52.27" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="676.5" y="517" width="0.2" height="15.0" fill="rgb(235,189,27)" rx="2" ry="2" />
<text  x="679.50" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="544.2" y="341" width="0.2" height="15.0" fill="rgb(252,96,45)" rx="2" ry="2" />
<text  x="547.16" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="22.0" y="421" width="0.3" height="15.0" fill="rgb(238,121,41)" rx="2" ry="2" />
<text  x="25.03" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (2 samples, 0.04%)</title><rect x="1131.0" y="197" width="0.4" height="15.0" fill="rgb(215,229,38)" rx="2" ry="2" />
<text  x="1133.98" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="271.1" y="197" width="0.6" height="15.0" fill="rgb(224,72,45)" rx="2" ry="2" />
<text  x="274.06" y="207.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1020.7" y="165" width="0.2" height="15.0" fill="rgb(252,205,19)" rx="2" ry="2" />
<text  x="1023.65" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%)</title><rect x="116.2" y="517" width="0.3" height="15.0" fill="rgb(240,105,31)" rx="2" ry="2" />
<text  x="119.24" y="527.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%)</title><rect x="78.8" y="469" width="0.2" height="15.0" fill="rgb(220,195,36)" rx="2" ry="2" />
<text  x="81.78" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.8" y="309" width="0.2" height="15.0" fill="rgb(208,229,48)" rx="2" ry="2" />
<text  x="44.78" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="1142.3" y="517" width="0.7" height="15.0" fill="rgb(232,18,51)" rx="2" ry="2" />
<text  x="1145.33" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="759.8" y="437" width="0.2" height="15.0" fill="rgb(220,17,41)" rx="2" ry="2" />
<text  x="762.82" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="24.3" y="389" width="0.2" height="15.0" fill="rgb(225,112,19)" rx="2" ry="2" />
<text  x="27.30" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%)</title><rect x="940.1" y="389" width="0.6" height="15.0" fill="rgb(210,132,14)" rx="2" ry="2" />
<text  x="943.06" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="84.0" y="565" width="2.7" height="15.0" fill="rgb(214,106,22)" rx="2" ry="2" />
<text  x="87.01" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (193 samples, 3.71%)</title><rect x="24.5" y="421" width="43.8" height="15.0" fill="rgb(209,49,36)" rx="2" ry="2" />
<text  x="27.53" y="431.5" >cql3..</text>
</g>
<g >
<title>sstables::sstable::write_simple&lt; (1 samples, 0.02%)</title><rect x="16.4" y="517" width="0.2" height="15.0" fill="rgb(250,74,14)" rx="2" ry="2" />
<text  x="19.36" y="527.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%)</title><rect x="1160.3" y="517" width="0.2" height="15.0" fill="rgb(224,1,19)" rx="2" ry="2" />
<text  x="1163.26" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="871.7" y="325" width="0.3" height="15.0" fill="rgb(248,156,43)" rx="2" ry="2" />
<text  x="874.73" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (28 samples, 0.54%)</title><rect x="751.4" y="373" width="6.4" height="15.0" fill="rgb(253,28,12)" rx="2" ry="2" />
<text  x="754.42" y="383.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="967.3" y="389" width="0.2" height="15.0" fill="rgb(220,65,41)" rx="2" ry="2" />
<text  x="970.30" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="844.0" y="405" width="0.3" height="15.0" fill="rgb(228,191,11)" rx="2" ry="2" />
<text  x="847.04" y="415.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (6 samples, 0.12%)</title><rect x="84.0" y="501" width="1.4" height="15.0" fill="rgb(236,87,28)" rx="2" ry="2" />
<text  x="87.01" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="873.8" y="277" width="0.2" height="15.0" fill="rgb(251,28,2)" rx="2" ry="2" />
<text  x="876.77" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="162.6" y="453" width="0.2" height="15.0" fill="rgb(226,95,39)" rx="2" ry="2" />
<text  x="165.55" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="49.5" y="229" width="0.5" height="15.0" fill="rgb(248,165,41)" rx="2" ry="2" />
<text  x="52.50" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="16.4" y="597" width="0.2" height="15.0" fill="rgb(213,48,30)" rx="2" ry="2" />
<text  x="19.36" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="950.3" y="341" width="0.2" height="15.0" fill="rgb(223,46,26)" rx="2" ry="2" />
<text  x="953.28" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="84.9" y="309" width="0.2" height="15.0" fill="rgb(225,200,22)" rx="2" ry="2" />
<text  x="87.91" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::basic_format_parse_context&lt;char, fmt::v7::detail::error_handler&gt;::advance_to (1 samples, 0.02%)</title><rect x="19.5" y="517" width="0.3" height="15.0" fill="rgb(243,211,31)" rx="2" ry="2" />
<text  x="22.53" y="527.5" ></text>
</g>
<g >
<title>create_partitions (281 samples, 5.41%)</title><rect x="18.6" y="565" width="63.8" height="15.0" fill="rgb(210,88,51)" rx="2" ry="2" />
<text  x="21.63" y="575.5" >create_..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.6" y="277" width="0.3" height="15.0" fill="rgb(240,139,54)" rx="2" ry="2" />
<text  x="43.65" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1053.3" y="325" width="0.5" height="15.0" fill="rgb(239,1,15)" rx="2" ry="2" />
<text  x="1056.34" y="335.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="48.4" y="325" width="0.2" height="15.0" fill="rgb(245,124,25)" rx="2" ry="2" />
<text  x="51.36" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="610.9" y="421" width="0.2" height="15.0" fill="rgb(220,223,10)" rx="2" ry="2" />
<text  x="613.90" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="39.5" y="277" width="0.2" height="15.0" fill="rgb(244,216,5)" rx="2" ry="2" />
<text  x="42.51" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1132.1" y="213" width="0.2" height="15.0" fill="rgb(216,145,44)" rx="2" ry="2" />
<text  x="1135.11" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="435.2" y="261" width="0.2" height="15.0" fill="rgb(251,37,22)" rx="2" ry="2" />
<text  x="438.19" y="271.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="993.0" y="293" width="1.3" height="15.0" fill="rgb(209,9,54)" rx="2" ry="2" />
<text  x="995.95" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (3 samples, 0.06%)</title><rect x="618.4" y="453" width="0.7" height="15.0" fill="rgb(240,205,36)" rx="2" ry="2" />
<text  x="621.39" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="54.0" y="245" width="0.7" height="15.0" fill="rgb(242,12,28)" rx="2" ry="2" />
<text  x="57.04" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (20 samples, 0.38%)</title><rect x="852.7" y="437" width="4.5" height="15.0" fill="rgb(217,199,0)" rx="2" ry="2" />
<text  x="855.66" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="340.8" y="341" width="0.2" height="15.0" fill="rgb(217,92,17)" rx="2" ry="2" />
<text  x="343.75" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1160.7" y="469" width="0.5" height="15.0" fill="rgb(250,42,46)" rx="2" ry="2" />
<text  x="1163.72" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%)</title><rect x="84.0" y="597" width="2.7" height="15.0" fill="rgb(252,49,31)" rx="2" ry="2" />
<text  x="87.01" y="607.5" ></text>
</g>
<g >
<title>mutation_partition_view::accept (1 samples, 0.02%)</title><rect x="1125.3" y="293" width="0.2" height="15.0" fill="rgb(220,207,31)" rx="2" ry="2" />
<text  x="1128.30" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.25%)</title><rect x="836.1" y="469" width="2.9" height="15.0" fill="rgb(228,183,34)" rx="2" ry="2" />
<text  x="839.09" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="937.3" y="389" width="0.5" height="15.0" fill="rgb(217,31,44)" rx="2" ry="2" />
<text  x="940.34" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="716.5" y="453" width="0.2" height="15.0" fill="rgb(213,113,19)" rx="2" ry="2" />
<text  x="719.46" y="463.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt;::emplace_back&lt;ser::deletable_row_view&gt; (1 samples, 0.02%)</title><rect x="1124.4" y="213" width="0.2" height="15.0" fill="rgb(218,33,8)" rx="2" ry="2" />
<text  x="1127.39" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (35 samples, 0.67%)</title><rect x="982.5" y="373" width="8.0" height="15.0" fill="rgb(225,119,52)" rx="2" ry="2" />
<text  x="985.51" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="786.4" y="325" width="0.2" height="15.0" fill="rgb(250,8,51)" rx="2" ry="2" />
<text  x="789.38" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%)</title><rect x="697.2" y="533" width="0.2" height="15.0" fill="rgb(244,120,7)" rx="2" ry="2" />
<text  x="700.16" y="543.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="1128.3" y="149" width="0.2" height="15.0" fill="rgb(241,94,17)" rx="2" ry="2" />
<text  x="1131.25" y="159.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%)</title><rect x="429.1" y="245" width="0.4" height="15.0" fill="rgb(225,129,9)" rx="2" ry="2" />
<text  x="432.06" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1086.3" y="405" width="0.2" height="15.0" fill="rgb(215,146,24)" rx="2" ry="2" />
<text  x="1089.26" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="659.9" y="325" width="0.3" height="15.0" fill="rgb(240,88,45)" rx="2" ry="2" />
<text  x="662.93" y="335.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (13 samples, 0.25%)</title><rect x="636.1" y="453" width="2.9" height="15.0" fill="rgb(221,29,44)" rx="2" ry="2" />
<text  x="639.09" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%)</title><rect x="536.2" y="261" width="0.5" height="15.0" fill="rgb(227,18,29)" rx="2" ry="2" />
<text  x="539.21" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::apply (2 samples, 0.04%)</title><rect x="111.2" y="373" width="0.5" height="15.0" fill="rgb(250,139,43)" rx="2" ry="2" />
<text  x="114.25" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="564.8" y="437" width="0.2" height="15.0" fill="rgb(225,53,0)" rx="2" ry="2" />
<text  x="567.81" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="485" width="7.2" height="15.0" fill="rgb(245,86,15)" rx="2" ry="2" />
<text  x="1129.66" y="495.5" ></text>
</g>
<g >
<title>service::client_state::has_access (5 samples, 0.10%)</title><rect x="79.7" y="469" width="1.1" height="15.0" fill="rgb(216,173,26)" rx="2" ry="2" />
<text  x="82.69" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="784.3" y="325" width="0.5" height="15.0" fill="rgb(208,19,4)" rx="2" ry="2" />
<text  x="787.33" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="338.0" y="309" width="0.9" height="15.0" fill="rgb(236,135,29)" rx="2" ry="2" />
<text  x="341.03" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="809.1" y="277" width="0.2" height="15.0" fill="rgb(209,103,23)" rx="2" ry="2" />
<text  x="812.08" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="62.9" y="325" width="0.2" height="15.0" fill="rgb(247,152,48)" rx="2" ry="2" />
<text  x="65.89" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="77.4" y="437" width="0.2" height="15.0" fill="rgb(240,0,24)" rx="2" ry="2" />
<text  x="80.42" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;int&gt;  (1 samples, 0.02%)</title><rect x="723.0" y="501" width="0.3" height="15.0" fill="rgb(231,124,26)" rx="2" ry="2" />
<text  x="726.04" y="511.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="609.3" y="421" width="0.9" height="15.0" fill="rgb(212,217,36)" rx="2" ry="2" />
<text  x="612.31" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="135.1" y="437" width="0.7" height="15.0" fill="rgb(215,25,38)" rx="2" ry="2" />
<text  x="138.08" y="447.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (9 samples, 0.17%)</title><rect x="1144.6" y="501" width="2.0" height="15.0" fill="rgb(234,12,10)" rx="2" ry="2" />
<text  x="1147.60" y="511.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (3 samples, 0.06%)</title><rect x="19.5" y="533" width="0.7" height="15.0" fill="rgb(252,227,43)" rx="2" ry="2" />
<text  x="22.53" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%)</title><rect x="1116.4" y="469" width="0.5" height="15.0" fill="rgb(247,6,18)" rx="2" ry="2" />
<text  x="1119.45" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (10 samples, 0.19%)</title><rect x="641.5" y="517" width="2.3" height="15.0" fill="rgb(213,158,40)" rx="2" ry="2" />
<text  x="644.54" y="527.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="18.2" y="469" width="0.2" height="15.0" fill="rgb(218,9,24)" rx="2" ry="2" />
<text  x="21.17" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="181.8" y="341" width="0.7" height="15.0" fill="rgb(240,84,31)" rx="2" ry="2" />
<text  x="184.85" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="447.0" y="309" width="0.4" height="15.0" fill="rgb(247,151,11)" rx="2" ry="2" />
<text  x="449.99" y="319.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="79.5" y="485" width="0.2" height="15.0" fill="rgb(238,169,2)" rx="2" ry="2" />
<text  x="82.47" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="194.6" y="277" width="0.2" height="15.0" fill="rgb(226,184,14)" rx="2" ry="2" />
<text  x="197.56" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="564.1" y="453" width="0.3" height="15.0" fill="rgb(246,168,36)" rx="2" ry="2" />
<text  x="567.13" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1081.5" y="373" width="0.2" height="15.0" fill="rgb(217,56,2)" rx="2" ry="2" />
<text  x="1084.49" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (2 samples, 0.04%)</title><rect x="673.8" y="485" width="0.4" height="15.0" fill="rgb(211,93,21)" rx="2" ry="2" />
<text  x="676.78" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (61 samples, 1.17%)</title><rect x="282.0" y="277" width="13.8" height="15.0" fill="rgb(218,84,1)" rx="2" ry="2" />
<text  x="284.96" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1018.6" y="181" width="0.2" height="15.0" fill="rgb(229,7,16)" rx="2" ry="2" />
<text  x="1021.61" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%)</title><rect x="747.3" y="405" width="0.3" height="15.0" fill="rgb(207,74,52)" rx="2" ry="2" />
<text  x="750.33" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (267 samples, 5.14%)</title><rect x="20.2" y="533" width="60.6" height="15.0" fill="rgb(205,210,28)" rx="2" ry="2" />
<text  x="23.22" y="543.5" >cql3::..</text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%)</title><rect x="766.4" y="389" width="0.7" height="15.0" fill="rgb(214,37,13)" rx="2" ry="2" />
<text  x="769.40" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1043.8" y="309" width="0.2" height="15.0" fill="rgb(244,142,29)" rx="2" ry="2" />
<text  x="1046.81" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (7 samples, 0.13%)</title><rect x="285.8" y="213" width="1.6" height="15.0" fill="rgb(212,43,17)" rx="2" ry="2" />
<text  x="288.82" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="63.1" y="149" width="0.2" height="15.0" fill="rgb(248,13,53)" rx="2" ry="2" />
<text  x="66.12" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (29 samples, 0.56%)</title><rect x="751.2" y="389" width="6.6" height="15.0" fill="rgb(252,223,5)" rx="2" ry="2" />
<text  x="754.19" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (37 samples, 0.71%)</title><rect x="894.7" y="389" width="8.4" height="15.0" fill="rgb(234,52,11)" rx="2" ry="2" />
<text  x="897.66" y="399.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%)</title><rect x="84.0" y="485" width="0.7" height="15.0" fill="rgb(215,14,34)" rx="2" ry="2" />
<text  x="87.01" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="73.1" y="373" width="0.2" height="15.0" fill="rgb(208,39,2)" rx="2" ry="2" />
<text  x="76.11" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.2" y="165" width="0.2" height="15.0" fill="rgb(249,156,0)" rx="2" ry="2" />
<text  x="43.19" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1049.3" y="341" width="2.5" height="15.0" fill="rgb(235,140,38)" rx="2" ry="2" />
<text  x="1052.25" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (9 samples, 0.17%)</title><rect x="249.9" y="149" width="2.1" height="15.0" fill="rgb(245,145,54)" rx="2" ry="2" />
<text  x="252.95" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="540.1" y="325" width="0.4" height="15.0" fill="rgb(249,71,17)" rx="2" ry="2" />
<text  x="543.07" y="335.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="291.5" y="245" width="0.4" height="15.0" fill="rgb(252,200,40)" rx="2" ry="2" />
<text  x="294.49" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (19 samples, 0.37%)</title><rect x="11.4" y="645" width="4.3" height="15.0" fill="rgb(236,17,34)" rx="2" ry="2" />
<text  x="14.36" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="1103.7" y="453" width="0.3" height="15.0" fill="rgb(237,147,25)" rx="2" ry="2" />
<text  x="1106.74" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="1038.4" y="341" width="0.2" height="15.0" fill="rgb(253,153,40)" rx="2" ry="2" />
<text  x="1041.36" y="351.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="717.8" y="453" width="0.2" height="15.0" fill="rgb(217,53,36)" rx="2" ry="2" />
<text  x="720.82" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="269.2" y="149" width="0.3" height="15.0" fill="rgb(227,41,13)" rx="2" ry="2" />
<text  x="272.25" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="485.4" y="309" width="0.2" height="15.0" fill="rgb(224,150,7)" rx="2" ry="2" />
<text  x="488.36" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="39.7" y="261" width="0.7" height="15.0" fill="rgb(246,219,28)" rx="2" ry="2" />
<text  x="42.74" y="271.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="762.5" y="389" width="0.3" height="15.0" fill="rgb(250,83,9)" rx="2" ry="2" />
<text  x="765.54" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="456.1" y="405" width="0.4" height="15.0" fill="rgb(235,8,7)" rx="2" ry="2" />
<text  x="459.08" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (4 samples, 0.08%)</title><rect x="403.2" y="229" width="0.9" height="15.0" fill="rgb(228,29,35)" rx="2" ry="2" />
<text  x="406.18" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="745.7" y="421" width="0.3" height="15.0" fill="rgb(233,177,34)" rx="2" ry="2" />
<text  x="748.74" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (615 samples, 11.83%)</title><rect x="177.1" y="389" width="139.6" height="15.0" fill="rgb(247,51,30)" rx="2" ry="2" />
<text  x="180.08" y="399.5" >mutation_fragment..</text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="764.1" y="421" width="0.3" height="15.0" fill="rgb(249,61,43)" rx="2" ry="2" />
<text  x="767.13" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="85.1" y="405" width="0.3" height="15.0" fill="rgb(227,47,29)" rx="2" ry="2" />
<text  x="88.14" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="62.2" y="325" width="0.2" height="15.0" fill="rgb(225,65,39)" rx="2" ry="2" />
<text  x="65.21" y="335.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="861.1" y="469" width="1.3" height="15.0" fill="rgb(244,107,50)" rx="2" ry="2" />
<text  x="864.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="527.6" y="277" width="0.2" height="15.0" fill="rgb(234,149,1)" rx="2" ry="2" />
<text  x="530.58" y="287.5" ></text>
</g>
<g >
<title>auth::get_permissions (123 samples, 2.37%)</title><rect x="787.3" y="341" width="27.9" height="15.0" fill="rgb(246,166,24)" rx="2" ry="2" />
<text  x="790.28" y="351.5" >a..</text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="764.6" y="373" width="0.2" height="15.0" fill="rgb(230,202,1)" rx="2" ry="2" />
<text  x="767.58" y="383.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="111.7" y="501" width="0.2" height="15.0" fill="rgb(211,208,51)" rx="2" ry="2" />
<text  x="114.70" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="666.3" y="405" width="0.2" height="15.0" fill="rgb(221,126,49)" rx="2" ry="2" />
<text  x="669.29" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="831.3" y="325" width="0.3" height="15.0" fill="rgb(241,9,22)" rx="2" ry="2" />
<text  x="834.32" y="335.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%)</title><rect x="69.2" y="485" width="0.3" height="15.0" fill="rgb(235,78,31)" rx="2" ry="2" />
<text  x="72.25" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="825.0" y="357" width="0.2" height="15.0" fill="rgb(225,90,49)" rx="2" ry="2" />
<text  x="827.97" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (38 samples, 0.73%)</title><rect x="28.4" y="309" width="8.6" height="15.0" fill="rgb(226,27,8)" rx="2" ry="2" />
<text  x="31.39" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="888.5" y="453" width="0.3" height="15.0" fill="rgb(206,161,7)" rx="2" ry="2" />
<text  x="891.53" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="42.7" y="197" width="0.2" height="15.0" fill="rgb(209,3,52)" rx="2" ry="2" />
<text  x="45.69" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="157.3" y="453" width="0.5" height="15.0" fill="rgb(206,166,38)" rx="2" ry="2" />
<text  x="160.33" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="723.3" y="533" width="0.2" height="15.0" fill="rgb(239,221,32)" rx="2" ry="2" />
<text  x="726.27" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (418 samples, 8.04%)</title><rect x="741.2" y="469" width="94.9" height="15.0" fill="rgb(238,166,50)" rx="2" ry="2" />
<text  x="744.20" y="479.5" >cql3::query..</text>
</g>
<g >
<title>position_in_partition::position_in_partition (3 samples, 0.06%)</title><rect x="277.9" y="261" width="0.7" height="15.0" fill="rgb(249,26,15)" rx="2" ry="2" />
<text  x="280.87" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="548.2" y="357" width="0.3" height="15.0" fill="rgb(243,59,52)" rx="2" ry="2" />
<text  x="551.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_max_size (1 samples, 0.02%)</title><rect x="50.0" y="277" width="0.2" height="15.0" fill="rgb(220,69,20)" rx="2" ry="2" />
<text  x="52.95" y="287.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (2 samples, 0.04%)</title><rect x="49.5" y="197" width="0.5" height="15.0" fill="rgb(249,199,10)" rx="2" ry="2" />
<text  x="52.50" y="207.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%)</title><rect x="697.8" y="517" width="0.3" height="15.0" fill="rgb(210,145,43)" rx="2" ry="2" />
<text  x="700.84" y="527.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (4 samples, 0.08%)</title><rect x="495.6" y="309" width="0.9" height="15.0" fill="rgb(210,116,45)" rx="2" ry="2" />
<text  x="498.58" y="319.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%)</title><rect x="15.9" y="597" width="0.5" height="15.0" fill="rgb(207,125,3)" rx="2" ry="2" />
<text  x="18.90" y="607.5" ></text>
</g>
<g >
<title>query_state::query_state (17 samples, 0.33%)</title><rect x="612.5" y="469" width="3.8" height="15.0" fill="rgb(249,142,46)" rx="2" ry="2" />
<text  x="615.49" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="104.9" y="485" width="0.2" height="15.0" fill="rgb(245,100,5)" rx="2" ry="2" />
<text  x="107.89" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="294.7" y="261" width="0.2" height="15.0" fill="rgb(239,50,11)" rx="2" ry="2" />
<text  x="297.67" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="207.0" y="277" width="0.3" height="15.0" fill="rgb(208,189,7)" rx="2" ry="2" />
<text  x="210.05" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="24.1" y="229" width="0.2" height="15.0" fill="rgb(249,27,13)" rx="2" ry="2" />
<text  x="27.07" y="239.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="753.9" y="309" width="0.5" height="15.0" fill="rgb(233,64,44)" rx="2" ry="2" />
<text  x="756.91" y="319.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="871.3" y="389" width="0.2" height="15.0" fill="rgb(222,0,31)" rx="2" ry="2" />
<text  x="874.28" y="399.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="39.7" y="213" width="0.3" height="15.0" fill="rgb(253,26,18)" rx="2" ry="2" />
<text  x="42.74" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.3" y="357" width="0.2" height="15.0" fill="rgb(213,198,46)" rx="2" ry="2" />
<text  x="874.28" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (1 samples, 0.02%)</title><rect x="745.3" y="405" width="0.2" height="15.0" fill="rgb(223,186,19)" rx="2" ry="2" />
<text  x="748.29" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="287.6" y="229" width="0.5" height="15.0" fill="rgb(234,187,46)" rx="2" ry="2" />
<text  x="290.63" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="722.4" y="533" width="0.4" height="15.0" fill="rgb(233,167,14)" rx="2" ry="2" />
<text  x="725.36" y="543.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="804.3" y="165" width="0.2" height="15.0" fill="rgb(254,28,4)" rx="2" ry="2" />
<text  x="807.31" y="175.5" ></text>
</g>
<g >
<title>table::set_hit_rate (4 samples, 0.08%)</title><rect x="719.9" y="485" width="0.9" height="15.0" fill="rgb(237,62,27)" rx="2" ry="2" />
<text  x="722.86" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="696.5" y="501" width="0.2" height="15.0" fill="rgb(246,169,23)" rx="2" ry="2" />
<text  x="699.48" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="485.1" y="309" width="0.3" height="15.0" fill="rgb(238,122,28)" rx="2" ry="2" />
<text  x="488.13" y="319.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="110.1" y="453" width="0.2" height="15.0" fill="rgb(247,112,44)" rx="2" ry="2" />
<text  x="113.11" y="463.5" ></text>
</g>
<g >
<title>do_io_check&lt;open_checked_directory (1 samples, 0.02%)</title><rect x="696.7" y="357" width="0.2" height="15.0" fill="rgb(221,159,48)" rx="2" ry="2" />
<text  x="699.71" y="367.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="331.4" y="437" width="0.3" height="15.0" fill="rgb(253,175,42)" rx="2" ry="2" />
<text  x="334.45" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="161.2" y="437" width="0.9" height="15.0" fill="rgb(241,111,25)" rx="2" ry="2" />
<text  x="164.19" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1149.4" y="389" width="0.2" height="15.0" fill="rgb(229,26,51)" rx="2" ry="2" />
<text  x="1152.37" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (58 samples, 1.12%)</title><rect x="1144.1" y="517" width="13.2" height="15.0" fill="rgb(243,89,18)" rx="2" ry="2" />
<text  x="1147.14" y="527.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="844.7" y="453" width="1.2" height="15.0" fill="rgb(234,46,41)" rx="2" ry="2" />
<text  x="847.72" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="323.3" y="309" width="0.4" height="15.0" fill="rgb(228,7,31)" rx="2" ry="2" />
<text  x="326.27" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="18.2" y="373" width="0.2" height="15.0" fill="rgb(249,225,48)" rx="2" ry="2" />
<text  x="21.17" y="383.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="509.0" y="245" width="2.0" height="15.0" fill="rgb(209,22,19)" rx="2" ry="2" />
<text  x="511.97" y="255.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="111.7" y="533" width="0.2" height="15.0" fill="rgb(234,124,48)" rx="2" ry="2" />
<text  x="114.70" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.8" y="565" width="0.2" height="15.0" fill="rgb(235,12,48)" rx="2" ry="2" />
<text  x="86.78" y="575.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="278.3" y="245" width="0.3" height="15.0" fill="rgb(211,73,18)" rx="2" ry="2" />
<text  x="281.33" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.5" y="453" width="0.2" height="15.0" fill="rgb(243,8,44)" rx="2" ry="2" />
<text  x="87.46" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="60.4" y="373" width="0.2" height="15.0" fill="rgb(232,79,53)" rx="2" ry="2" />
<text  x="63.40" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="297.2" y="245" width="0.2" height="15.0" fill="rgb(244,113,23)" rx="2" ry="2" />
<text  x="300.17" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (20 samples, 0.38%)</title><rect x="628.6" y="453" width="4.5" height="15.0" fill="rgb(231,110,49)" rx="2" ry="2" />
<text  x="631.60" y="463.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="44.1" y="197" width="0.2" height="15.0" fill="rgb(250,38,19)" rx="2" ry="2" />
<text  x="47.05" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="794.5" y="197" width="1.0" height="15.0" fill="rgb(228,205,11)" rx="2" ry="2" />
<text  x="797.55" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="661.1" y="373" width="0.2" height="15.0" fill="rgb(235,58,31)" rx="2" ry="2" />
<text  x="664.07" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (6 samples, 0.12%)</title><rect x="693.1" y="517" width="1.3" height="15.0" fill="rgb(237,75,11)" rx="2" ry="2" />
<text  x="696.07" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="570.0" y="389" width="0.3" height="15.0" fill="rgb(251,125,1)" rx="2" ry="2" />
<text  x="573.03" y="399.5" ></text>
</g>
<g >
<title>main (4,761 samples, 91.59%)</title><rect x="87.4" y="645" width="1080.8" height="15.0" fill="rgb(226,173,9)" rx="2" ry="2" />
<text  x="90.41" y="655.5" >main</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%)</title><rect x="363.9" y="245" width="0.2" height="15.0" fill="rgb(252,81,23)" rx="2" ry="2" />
<text  x="366.91" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1094.9" y="405" width="0.4" height="15.0" fill="rgb(207,17,37)" rx="2" ry="2" />
<text  x="1097.88" y="415.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%)</title><rect x="1166.8" y="517" width="0.3" height="15.0" fill="rgb(205,135,29)" rx="2" ry="2" />
<text  x="1169.84" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="134.4" y="421" width="0.7" height="15.0" fill="rgb(214,7,10)" rx="2" ry="2" />
<text  x="137.40" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (13 samples, 0.25%)</title><rect x="948.2" y="437" width="3.0" height="15.0" fill="rgb(210,178,20)" rx="2" ry="2" />
<text  x="951.23" y="447.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.69%)</title><rect x="798.6" y="245" width="8.2" height="15.0" fill="rgb(211,66,41)" rx="2" ry="2" />
<text  x="801.63" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%)</title><rect x="86.7" y="453" width="0.5" height="15.0" fill="rgb(218,150,25)" rx="2" ry="2" />
<text  x="89.73" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="786.1" y="341" width="0.7" height="15.0" fill="rgb(219,97,21)" rx="2" ry="2" />
<text  x="789.15" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="445.6" y="261" width="0.3" height="15.0" fill="rgb(233,146,34)" rx="2" ry="2" />
<text  x="448.63" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="943.5" y="373" width="0.4" height="15.0" fill="rgb(218,107,22)" rx="2" ry="2" />
<text  x="946.47" y="383.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%)</title><rect x="541.0" y="357" width="0.4" height="15.0" fill="rgb(239,227,43)" rx="2" ry="2" />
<text  x="543.98" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (1 samples, 0.02%)</title><rect x="87.9" y="549" width="0.2" height="15.0" fill="rgb(246,113,5)" rx="2" ry="2" />
<text  x="90.86" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="40.6" y="213" width="0.3" height="15.0" fill="rgb(221,216,29)" rx="2" ry="2" />
<text  x="43.65" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="639.0" y="469" width="0.3" height="15.0" fill="rgb(252,101,26)" rx="2" ry="2" />
<text  x="642.05" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (36 samples, 0.69%)</title><rect x="355.7" y="245" width="8.2" height="15.0" fill="rgb(228,225,42)" rx="2" ry="2" />
<text  x="358.74" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="723.0" y="133" width="0.3" height="15.0" fill="rgb(253,176,6)" rx="2" ry="2" />
<text  x="726.04" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="134.6" y="405" width="0.3" height="15.0" fill="rgb(226,82,45)" rx="2" ry="2" />
<text  x="137.63" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1055.4" y="341" width="0.4" height="15.0" fill="rgb(214,60,35)" rx="2" ry="2" />
<text  x="1058.38" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="797.5" y="229" width="1.1" height="15.0" fill="rgb(232,121,30)" rx="2" ry="2" />
<text  x="800.50" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="831.8" y="437" width="0.2" height="15.0" fill="rgb(234,138,15)" rx="2" ry="2" />
<text  x="834.78" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="161.0" y="437" width="0.2" height="15.0" fill="rgb(244,130,30)" rx="2" ry="2" />
<text  x="163.96" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.6" y="309" width="0.3" height="15.0" fill="rgb(246,7,35)" rx="2" ry="2" />
<text  x="43.65" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (33 samples, 0.63%)</title><rect x="319.9" y="357" width="7.5" height="15.0" fill="rgb(235,90,54)" rx="2" ry="2" />
<text  x="322.87" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="41.8" y="357" width="0.2" height="15.0" fill="rgb(243,90,27)" rx="2" ry="2" />
<text  x="44.78" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.7" y="181" width="0.2" height="15.0" fill="rgb(253,173,53)" rx="2" ry="2" />
<text  x="45.69" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.5" y="517" width="0.2" height="15.0" fill="rgb(211,50,27)" rx="2" ry="2" />
<text  x="20.49" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="40.0" y="213" width="0.4" height="15.0" fill="rgb(218,194,3)" rx="2" ry="2" />
<text  x="42.97" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="872.2" y="309" width="0.2" height="15.0" fill="rgb(205,70,4)" rx="2" ry="2" />
<text  x="875.19" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="593.0" y="373" width="0.2" height="15.0" fill="rgb(248,44,45)" rx="2" ry="2" />
<text  x="595.96" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="549" width="0.2" height="15.0" fill="rgb(221,77,29)" rx="2" ry="2" />
<text  x="20.26" y="559.5" ></text>
</g>
<g >
<title>schema::get_column_definition (5 samples, 0.10%)</title><rect x="76.3" y="453" width="1.1" height="15.0" fill="rgb(248,174,20)" rx="2" ry="2" />
<text  x="79.29" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="52.7" y="293" width="0.7" height="15.0" fill="rgb(251,145,7)" rx="2" ry="2" />
<text  x="55.68" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="685.6" y="469" width="0.2" height="15.0" fill="rgb(225,126,14)" rx="2" ry="2" />
<text  x="688.58" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.3" y="341" width="0.2" height="15.0" fill="rgb(245,113,16)" rx="2" ry="2" />
<text  x="874.28" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="165" width="0.4" height="15.0" fill="rgb(241,24,23)" rx="2" ry="2" />
<text  x="57.27" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="446.5" y="309" width="0.5" height="15.0" fill="rgb(245,96,45)" rx="2" ry="2" />
<text  x="449.54" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="828.8" y="373" width="2.8" height="15.0" fill="rgb(237,111,25)" rx="2" ry="2" />
<text  x="831.83" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="863.8" y="517" width="0.4" height="15.0" fill="rgb(251,174,1)" rx="2" ry="2" />
<text  x="866.79" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="1048.1" y="373" width="0.5" height="15.0" fill="rgb(232,20,37)" rx="2" ry="2" />
<text  x="1051.12" y="383.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::write (1 samples, 0.02%)</title><rect x="85.8" y="405" width="0.2" height="15.0" fill="rgb(240,196,20)" rx="2" ry="2" />
<text  x="88.82" y="415.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1121.9" y="261" width="0.5" height="15.0" fill="rgb(234,222,52)" rx="2" ry="2" />
<text  x="1124.90" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="45.2" y="325" width="0.7" height="15.0" fill="rgb(246,220,27)" rx="2" ry="2" />
<text  x="48.19" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="724.2" y="533" width="0.2" height="15.0" fill="rgb(224,174,45)" rx="2" ry="2" />
<text  x="727.17" y="543.5" ></text>
</g>
<g >
<title>row_cache::make_reader (44 samples, 0.85%)</title><rect x="550.1" y="373" width="9.9" height="15.0" fill="rgb(241,126,17)" rx="2" ry="2" />
<text  x="553.06" y="383.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (6 samples, 0.12%)</title><rect x="790.2" y="293" width="1.4" height="15.0" fill="rgb(244,143,47)" rx="2" ry="2" />
<text  x="793.23" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="660.2" y="453" width="0.2" height="15.0" fill="rgb(251,191,5)" rx="2" ry="2" />
<text  x="663.16" y="463.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="1136.2" y="533" width="0.2" height="15.0" fill="rgb(218,132,45)" rx="2" ry="2" />
<text  x="1139.20" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%)</title><rect x="871.1" y="405" width="0.2" height="15.0" fill="rgb(248,132,44)" rx="2" ry="2" />
<text  x="874.05" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="22.3" y="405" width="0.2" height="15.0" fill="rgb(207,48,47)" rx="2" ry="2" />
<text  x="25.26" y="415.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="966.4" y="389" width="0.4" height="15.0" fill="rgb(220,91,25)" rx="2" ry="2" />
<text  x="969.39" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="1086.5" y="437" width="0.9" height="15.0" fill="rgb(226,169,34)" rx="2" ry="2" />
<text  x="1089.48" y="447.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%)</title><rect x="1167.1" y="485" width="0.2" height="15.0" fill="rgb(230,211,1)" rx="2" ry="2" />
<text  x="1170.07" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (23 samples, 0.44%)</title><rect x="213.2" y="261" width="5.2" height="15.0" fill="rgb(207,58,24)" rx="2" ry="2" />
<text  x="216.17" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%)</title><rect x="37.0" y="309" width="0.2" height="15.0" fill="rgb(243,3,26)" rx="2" ry="2" />
<text  x="40.01" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="722.8" y="405" width="0.2" height="15.0" fill="rgb(219,38,28)" rx="2" ry="2" />
<text  x="725.81" y="415.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%)</title><rect x="1130.3" y="181" width="0.7" height="15.0" fill="rgb(239,210,7)" rx="2" ry="2" />
<text  x="1133.30" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%)</title><rect x="812.7" y="325" width="2.5" height="15.0" fill="rgb(215,133,50)" rx="2" ry="2" />
<text  x="815.71" y="335.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="476.1" y="277" width="0.9" height="15.0" fill="rgb(251,60,36)" rx="2" ry="2" />
<text  x="479.05" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="1043.1" y="341" width="0.3" height="15.0" fill="rgb(253,107,0)" rx="2" ry="2" />
<text  x="1046.12" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="563.9" y="437" width="0.2" height="15.0" fill="rgb(246,140,6)" rx="2" ry="2" />
<text  x="566.91" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="86.0" y="389" width="0.7" height="15.0" fill="rgb(232,177,1)" rx="2" ry="2" />
<text  x="89.05" y="399.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1133.7" y="197" width="0.2" height="15.0" fill="rgb(215,197,33)" rx="2" ry="2" />
<text  x="1136.70" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (5 samples, 0.10%)</title><rect x="633.8" y="453" width="1.2" height="15.0" fill="rgb(225,110,35)" rx="2" ry="2" />
<text  x="636.82" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (12 samples, 0.23%)</title><rect x="245.4" y="69" width="2.7" height="15.0" fill="rgb(222,80,18)" rx="2" ry="2" />
<text  x="248.41" y="79.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%)</title><rect x="109.9" y="453" width="0.2" height="15.0" fill="rgb(246,195,44)" rx="2" ry="2" />
<text  x="112.88" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="331.0" y="405" width="0.2" height="15.0" fill="rgb(220,91,18)" rx="2" ry="2" />
<text  x="333.99" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="980.9" y="357" width="0.3" height="15.0" fill="rgb(230,185,31)" rx="2" ry="2" />
<text  x="983.92" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="391.2" y="181" width="0.6" height="15.0" fill="rgb(233,105,27)" rx="2" ry="2" />
<text  x="394.15" y="191.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="356.9" y="197" width="0.7" height="15.0" fill="rgb(220,148,30)" rx="2" ry="2" />
<text  x="359.87" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="486.0" y="341" width="0.5" height="15.0" fill="rgb(208,96,15)" rx="2" ry="2" />
<text  x="489.04" y="351.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="57.9" y="133" width="0.2" height="15.0" fill="rgb(254,157,49)" rx="2" ry="2" />
<text  x="60.90" y="143.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="806.1" y="149" width="0.5" height="15.0" fill="rgb(208,137,22)" rx="2" ry="2" />
<text  x="809.13" y="159.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="111.2" y="261" width="0.3" height="15.0" fill="rgb(225,21,42)" rx="2" ry="2" />
<text  x="114.25" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (5 samples, 0.10%)</title><rect x="1076.0" y="357" width="1.2" height="15.0" fill="rgb(245,224,9)" rx="2" ry="2" />
<text  x="1079.04" y="367.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="489.0" y="357" width="0.2" height="15.0" fill="rgb(235,68,48)" rx="2" ry="2" />
<text  x="491.99" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.8" y="389" width="0.3" height="15.0" fill="rgb(226,98,18)" rx="2" ry="2" />
<text  x="68.84" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="961.4" y="405" width="0.5" height="15.0" fill="rgb(249,215,7)" rx="2" ry="2" />
<text  x="964.40" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="904.0" y="389" width="0.2" height="15.0" fill="rgb(240,29,1)" rx="2" ry="2" />
<text  x="906.97" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="613.4" y="421" width="0.2" height="15.0" fill="rgb(212,196,32)" rx="2" ry="2" />
<text  x="616.39" y="431.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="589.6" y="293" width="0.2" height="15.0" fill="rgb(247,96,42)" rx="2" ry="2" />
<text  x="592.56" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (220 samples, 4.23%)</title><rect x="889.0" y="453" width="49.9" height="15.0" fill="rgb(221,145,23)" rx="2" ry="2" />
<text  x="891.98" y="463.5" >cql3:..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="696.7" y="533" width="0.2" height="15.0" fill="rgb(227,107,37)" rx="2" ry="2" />
<text  x="699.71" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="905.3" y="341" width="0.7" height="15.0" fill="rgb(240,184,34)" rx="2" ry="2" />
<text  x="908.33" y="351.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="19.8" y="517" width="0.2" height="15.0" fill="rgb(208,85,38)" rx="2" ry="2" />
<text  x="22.76" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,348 samples, 45.17%)</title><rect x="112.2" y="533" width="533.0" height="15.0" fill="rgb(205,33,13)" rx="2" ry="2" />
<text  x="115.15" y="543.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%)</title><rect x="495.3" y="325" width="1.2" height="15.0" fill="rgb(237,149,53)" rx="2" ry="2" />
<text  x="498.35" y="335.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1121.9" y="277" width="0.5" height="15.0" fill="rgb(235,191,19)" rx="2" ry="2" />
<text  x="1124.90" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="706.5" y="485" width="0.2" height="15.0" fill="rgb(214,99,11)" rx="2" ry="2" />
<text  x="709.47" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="24.1" y="213" width="0.2" height="15.0" fill="rgb(223,170,51)" rx="2" ry="2" />
<text  x="27.07" y="223.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (379 samples, 7.29%)</title><rect x="348.5" y="293" width="86.0" height="15.0" fill="rgb(213,63,17)" rx="2" ry="2" />
<text  x="351.47" y="303.5" >mutation_f..</text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="581.6" y="325" width="0.5" height="15.0" fill="rgb(229,61,5)" rx="2" ry="2" />
<text  x="584.61" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (42 samples, 0.81%)</title><rect x="493.1" y="341" width="9.5" height="15.0" fill="rgb(224,77,0)" rx="2" ry="2" />
<text  x="496.08" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.2" y="389" width="0.2" height="15.0" fill="rgb(244,73,40)" rx="2" ry="2" />
<text  x="70.21" y="399.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="84.7" y="261" width="0.2" height="15.0" fill="rgb(229,158,43)" rx="2" ry="2" />
<text  x="87.69" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="85" width="0.2" height="15.0" fill="rgb(222,24,34)" rx="2" ry="2" />
<text  x="57.27" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="658.8" y="517" width="0.7" height="15.0" fill="rgb(234,62,17)" rx="2" ry="2" />
<text  x="661.80" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="62.7" y="325" width="0.2" height="15.0" fill="rgb(247,78,29)" rx="2" ry="2" />
<text  x="65.67" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.10%)</title><rect x="47.0" y="181" width="1.1" height="15.0" fill="rgb(219,60,47)" rx="2" ry="2" />
<text  x="50.00" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.3" y="309" width="0.4" height="15.0" fill="rgb(238,184,22)" rx="2" ry="2" />
<text  x="42.28" y="319.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (4 samples, 0.08%)</title><rect x="556.9" y="293" width="0.9" height="15.0" fill="rgb(243,194,2)" rx="2" ry="2" />
<text  x="559.87" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="61.3" y="293" width="0.2" height="15.0" fill="rgb(235,100,7)" rx="2" ry="2" />
<text  x="64.30" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="51.1" y="309" width="0.4" height="15.0" fill="rgb(217,157,7)" rx="2" ry="2" />
<text  x="54.09" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="109.7" y="421" width="0.2" height="15.0" fill="rgb(205,123,31)" rx="2" ry="2" />
<text  x="112.66" y="431.5" ></text>
</g>
<g >
<title>ser::column_view::id (1 samples, 0.02%)</title><rect x="1123.7" y="261" width="0.2" height="15.0" fill="rgb(207,102,30)" rx="2" ry="2" />
<text  x="1126.71" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="788.4" y="277" width="0.5" height="15.0" fill="rgb(231,228,40)" rx="2" ry="2" />
<text  x="791.42" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="837.7" y="421" width="0.2" height="15.0" fill="rgb(233,10,15)" rx="2" ry="2" />
<text  x="840.68" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (5 samples, 0.10%)</title><rect x="870.4" y="421" width="1.1" height="15.0" fill="rgb(208,184,32)" rx="2" ry="2" />
<text  x="873.37" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (4 samples, 0.08%)</title><rect x="801.8" y="181" width="0.9" height="15.0" fill="rgb(234,96,20)" rx="2" ry="2" />
<text  x="804.81" y="191.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="322.1" y="325" width="0.3" height="15.0" fill="rgb(221,6,26)" rx="2" ry="2" />
<text  x="325.14" y="335.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (1 samples, 0.02%)</title><rect x="51.8" y="229" width="0.2" height="15.0" fill="rgb(240,213,54)" rx="2" ry="2" />
<text  x="54.77" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (43 samples, 0.83%)</title><rect x="565.5" y="453" width="9.8" height="15.0" fill="rgb(213,202,15)" rx="2" ry="2" />
<text  x="568.49" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="457.0" y="437" width="0.2" height="15.0" fill="rgb(208,154,39)" rx="2" ry="2" />
<text  x="459.98" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="903.5" y="389" width="0.2" height="15.0" fill="rgb(217,93,48)" rx="2" ry="2" />
<text  x="906.51" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="988.6" y="293" width="0.3" height="15.0" fill="rgb(208,102,32)" rx="2" ry="2" />
<text  x="991.64" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="938.5" y="373" width="0.4" height="15.0" fill="rgb(253,164,7)" rx="2" ry="2" />
<text  x="941.47" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="56.5" y="293" width="1.6" height="15.0" fill="rgb(214,76,12)" rx="2" ry="2" />
<text  x="59.54" y="303.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (1 samples, 0.02%)</title><rect x="1030.9" y="293" width="0.2" height="15.0" fill="rgb(251,90,4)" rx="2" ry="2" />
<text  x="1033.87" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="1120.3" y="133" width="0.2" height="15.0" fill="rgb(227,115,13)" rx="2" ry="2" />
<text  x="1123.31" y="143.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (4 samples, 0.08%)</title><rect x="1125.8" y="325" width="0.9" height="15.0" fill="rgb(248,5,34)" rx="2" ry="2" />
<text  x="1128.76" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (3 samples, 0.06%)</title><rect x="954.4" y="421" width="0.6" height="15.0" fill="rgb(224,3,40)" rx="2" ry="2" />
<text  x="957.36" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="204.5" y="277" width="1.0" height="15.0" fill="rgb(232,198,43)" rx="2" ry="2" />
<text  x="207.55" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="213" width="0.4" height="15.0" fill="rgb(247,47,33)" rx="2" ry="2" />
<text  x="59.08" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="40.0" y="229" width="0.4" height="15.0" fill="rgb(240,95,2)" rx="2" ry="2" />
<text  x="42.97" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="24.1" y="261" width="0.2" height="15.0" fill="rgb(217,163,3)" rx="2" ry="2" />
<text  x="27.07" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (2 samples, 0.04%)</title><rect x="771.6" y="437" width="0.5" height="15.0" fill="rgb(228,182,34)" rx="2" ry="2" />
<text  x="774.62" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="176.9" y="389" width="0.2" height="15.0" fill="rgb(254,193,31)" rx="2" ry="2" />
<text  x="179.85" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (2 samples, 0.04%)</title><rect x="1133.5" y="325" width="0.4" height="15.0" fill="rgb(247,177,31)" rx="2" ry="2" />
<text  x="1136.47" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="713.3" y="469" width="0.4" height="15.0" fill="rgb(229,17,53)" rx="2" ry="2" />
<text  x="716.28" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="1108.5" y="421" width="0.5" height="15.0" fill="rgb(213,6,28)" rx="2" ry="2" />
<text  x="1111.50" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="42.2" y="341" width="0.3" height="15.0" fill="rgb(212,93,14)" rx="2" ry="2" />
<text  x="45.24" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (114 samples, 2.19%)</title><rect x="576.4" y="437" width="25.9" height="15.0" fill="rgb(212,185,7)" rx="2" ry="2" />
<text  x="579.39" y="447.5" >f..</text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%)</title><rect x="432.9" y="261" width="1.6" height="15.0" fill="rgb(209,101,38)" rx="2" ry="2" />
<text  x="435.92" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="48.6" y="325" width="0.2" height="15.0" fill="rgb(228,133,26)" rx="2" ry="2" />
<text  x="51.59" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (584 samples, 11.24%)</title><rect x="178.9" y="373" width="132.6" height="15.0" fill="rgb(247,165,48)" rx="2" ry="2" />
<text  x="181.90" y="383.5" >mutation_fragmen..</text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (570 samples, 10.97%)</title><rect x="730.5" y="501" width="129.4" height="15.0" fill="rgb(235,115,50)" rx="2" ry="2" />
<text  x="733.53" y="511.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="838.1" y="389" width="0.5" height="15.0" fill="rgb(230,87,36)" rx="2" ry="2" />
<text  x="841.13" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.10%)</title><rect x="328.5" y="389" width="1.1" height="15.0" fill="rgb(207,24,51)" rx="2" ry="2" />
<text  x="331.50" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="53.6" y="277" width="0.2" height="15.0" fill="rgb(230,158,31)" rx="2" ry="2" />
<text  x="56.59" y="287.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.33%)</title><rect x="824.5" y="389" width="3.9" height="15.0" fill="rgb(217,10,17)" rx="2" ry="2" />
<text  x="827.51" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="452.2" y="389" width="0.2" height="15.0" fill="rgb(206,181,7)" rx="2" ry="2" />
<text  x="455.22" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="686.9" y="517" width="0.5" height="15.0" fill="rgb(248,126,19)" rx="2" ry="2" />
<text  x="689.94" y="527.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (4 samples, 0.08%)</title><rect x="644.3" y="517" width="0.9" height="15.0" fill="rgb(232,158,12)" rx="2" ry="2" />
<text  x="647.27" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="679.0" y="517" width="0.7" height="15.0" fill="rgb(244,186,50)" rx="2" ry="2" />
<text  x="682.00" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_WHERE (1 samples, 0.02%)</title><rect x="34.3" y="293" width="0.2" height="15.0" fill="rgb(234,113,46)" rx="2" ry="2" />
<text  x="37.29" y="303.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (2 samples, 0.04%)</title><rect x="1027.9" y="293" width="0.5" height="15.0" fill="rgb(225,108,43)" rx="2" ry="2" />
<text  x="1030.91" y="303.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%)</title><rect x="1131.0" y="133" width="0.2" height="15.0" fill="rgb(238,176,38)" rx="2" ry="2" />
<text  x="1133.98" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="198.2" y="277" width="0.4" height="15.0" fill="rgb(248,89,41)" rx="2" ry="2" />
<text  x="201.19" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="23.2" y="421" width="0.4" height="15.0" fill="rgb(247,98,52)" rx="2" ry="2" />
<text  x="26.17" y="431.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%)</title><rect x="54.0" y="277" width="0.7" height="15.0" fill="rgb(248,107,10)" rx="2" ry="2" />
<text  x="57.04" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="1133.7" y="213" width="0.2" height="15.0" fill="rgb(219,201,23)" rx="2" ry="2" />
<text  x="1136.70" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (2 samples, 0.04%)</title><rect x="20.4" y="485" width="0.5" height="15.0" fill="rgb(207,73,19)" rx="2" ry="2" />
<text  x="23.44" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="745.5" y="421" width="0.2" height="15.0" fill="rgb(226,178,30)" rx="2" ry="2" />
<text  x="748.51" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="45.9" y="197" width="0.2" height="15.0" fill="rgb(248,119,39)" rx="2" ry="2" />
<text  x="48.87" y="207.5" ></text>
</g>
<g >
<title>checked_file_impl::list_directory (1 samples, 0.02%)</title><rect x="697.2" y="437" width="0.2" height="15.0" fill="rgb(232,28,6)" rx="2" ry="2" />
<text  x="700.16" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%)</title><rect x="581.6" y="341" width="1.1" height="15.0" fill="rgb(244,12,13)" rx="2" ry="2" />
<text  x="584.61" y="351.5" ></text>
</g>
<g >
<title>[[vdso]] (25 samples, 0.48%)</title><rect x="1171.8" y="645" width="5.7" height="15.0" fill="rgb(236,126,25)" rx="2" ry="2" />
<text  x="1174.84" y="655.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%)</title><rect x="579.8" y="357" width="0.7" height="15.0" fill="rgb(244,46,28)" rx="2" ry="2" />
<text  x="582.80" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="17.0" y="565" width="0.3" height="15.0" fill="rgb(216,91,49)" rx="2" ry="2" />
<text  x="20.04" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="329.6" y="389" width="0.5" height="15.0" fill="rgb(210,56,2)" rx="2" ry="2" />
<text  x="332.63" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="757.3" y="357" width="0.2" height="15.0" fill="rgb(238,102,39)" rx="2" ry="2" />
<text  x="760.32" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1033.6" y="293" width="0.4" height="15.0" fill="rgb(224,6,10)" rx="2" ry="2" />
<text  x="1036.59" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="196.8" y="245" width="0.3" height="15.0" fill="rgb(232,71,14)" rx="2" ry="2" />
<text  x="199.83" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.7" y="309" width="0.2" height="15.0" fill="rgb(222,151,30)" rx="2" ry="2" />
<text  x="45.69" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="723.0" y="245" width="0.3" height="15.0" fill="rgb(254,181,21)" rx="2" ry="2" />
<text  x="726.04" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,022 samples, 19.66%)</title><rect x="884.4" y="469" width="232.0" height="15.0" fill="rgb(247,206,8)" rx="2" ry="2" />
<text  x="887.44" y="479.5" >cql3::statements::select_state..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.5" y="213" width="0.2" height="15.0" fill="rgb(242,67,21)" rx="2" ry="2" />
<text  x="42.51" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="790.2" y="261" width="0.7" height="15.0" fill="rgb(226,69,51)" rx="2" ry="2" />
<text  x="793.23" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="306.7" y="309" width="0.2" height="15.0" fill="rgb(218,102,17)" rx="2" ry="2" />
<text  x="309.70" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (218 samples, 4.19%)</title><rect x="222.9" y="261" width="49.5" height="15.0" fill="rgb(249,216,35)" rx="2" ry="2" />
<text  x="225.94" y="271.5" >part..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="372.1" y="213" width="0.2" height="15.0" fill="rgb(220,111,27)" rx="2" ry="2" />
<text  x="375.08" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="680.4" y="501" width="0.4" height="15.0" fill="rgb(215,13,34)" rx="2" ry="2" />
<text  x="683.36" y="511.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="110.8" y="325" width="0.2" height="15.0" fill="rgb(222,65,22)" rx="2" ry="2" />
<text  x="113.79" y="335.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="84.7" y="293" width="0.2" height="15.0" fill="rgb(251,36,39)" rx="2" ry="2" />
<text  x="87.69" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%)</title><rect x="162.1" y="453" width="0.5" height="15.0" fill="rgb(253,51,25)" rx="2" ry="2" />
<text  x="165.10" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1165.5" y="453" width="0.2" height="15.0" fill="rgb(219,81,44)" rx="2" ry="2" />
<text  x="1168.48" y="463.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::select_statement*, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.7" y="357" width="0.2" height="15.0" fill="rgb(236,205,51)" rx="2" ry="2" />
<text  x="70.66" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (37 samples, 0.71%)</title><rect x="434.5" y="293" width="8.4" height="15.0" fill="rgb(236,61,54)" rx="2" ry="2" />
<text  x="437.51" y="303.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="82.9" y="629" width="0.2" height="15.0" fill="rgb(254,62,51)" rx="2" ry="2" />
<text  x="85.87" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="133.5" y="421" width="0.2" height="15.0" fill="rgb(235,28,10)" rx="2" ry="2" />
<text  x="136.49" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.9" y="405" width="0.3" height="15.0" fill="rgb(253,138,35)" rx="2" ry="2" />
<text  x="20.95" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="59.5" y="309" width="0.4" height="15.0" fill="rgb(224,101,21)" rx="2" ry="2" />
<text  x="62.49" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="62.2" y="341" width="0.2" height="15.0" fill="rgb(206,181,41)" rx="2" ry="2" />
<text  x="65.21" y="351.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.04%)</title><rect x="1168.2" y="661" width="0.5" height="15.0" fill="rgb(218,15,30)" rx="2" ry="2" />
<text  x="1171.21" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="627.5" y="469" width="0.2" height="15.0" fill="rgb(205,4,8)" rx="2" ry="2" />
<text  x="630.47" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::drain_tombstones (1 samples, 0.02%)</title><rect x="85.4" y="469" width="0.2" height="15.0" fill="rgb(233,166,24)" rx="2" ry="2" />
<text  x="88.37" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="868.3" y="533" width="0.7" height="15.0" fill="rgb(217,69,33)" rx="2" ry="2" />
<text  x="871.33" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="786.6" y="309" width="0.2" height="15.0" fill="rgb(232,9,5)" rx="2" ry="2" />
<text  x="789.60" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="804.5" y="165" width="0.3" height="15.0" fill="rgb(241,62,44)" rx="2" ry="2" />
<text  x="807.54" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (8 samples, 0.15%)</title><rect x="46.5" y="325" width="1.9" height="15.0" fill="rgb(250,129,21)" rx="2" ry="2" />
<text  x="49.55" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="674.0" y="469" width="0.2" height="15.0" fill="rgb(216,136,50)" rx="2" ry="2" />
<text  x="677.01" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%)</title><rect x="126.9" y="485" width="0.2" height="15.0" fill="rgb(240,71,3)" rx="2" ry="2" />
<text  x="129.91" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.8" y="85" width="0.2" height="15.0" fill="rgb(220,67,40)" rx="2" ry="2" />
<text  x="59.76" y="95.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="23.2" y="405" width="0.4" height="15.0" fill="rgb(242,111,40)" rx="2" ry="2" />
<text  x="26.17" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="555.3" y="309" width="0.2" height="15.0" fill="rgb(209,20,41)" rx="2" ry="2" />
<text  x="558.28" y="319.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::deletable_row_view&gt;::doit&lt;seastar::simple_memory_input_stream, utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1124.4" y="229" width="0.2" height="15.0" fill="rgb(235,14,26)" rx="2" ry="2" />
<text  x="1127.39" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="102.8" y="437" width="0.3" height="15.0" fill="rgb(250,128,44)" rx="2" ry="2" />
<text  x="105.85" y="447.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 6.54%)</title><rect x="10.0" y="661" width="77.2" height="15.0" fill="rgb(253,167,26)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >[unknown]</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="993.9" y="261" width="0.4" height="15.0" fill="rgb(237,154,51)" rx="2" ry="2" />
<text  x="996.86" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="62.0" y="149" width="0.2" height="15.0" fill="rgb(249,117,42)" rx="2" ry="2" />
<text  x="64.99" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.67%)</title><rect x="1118.7" y="469" width="8.0" height="15.0" fill="rgb(235,9,2)" rx="2" ry="2" />
<text  x="1121.72" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="683.3" y="501" width="0.2" height="15.0" fill="rgb(253,169,21)" rx="2" ry="2" />
<text  x="686.31" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="39.1" y="357" width="0.2" height="15.0" fill="rgb(231,18,1)" rx="2" ry="2" />
<text  x="42.06" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="591.4" y="325" width="0.2" height="15.0" fill="rgb(251,94,24)" rx="2" ry="2" />
<text  x="594.37" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="73.8" y="373" width="0.2" height="15.0" fill="rgb(207,124,46)" rx="2" ry="2" />
<text  x="76.79" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.19%)</title><rect x="871.7" y="341" width="2.3" height="15.0" fill="rgb(232,57,40)" rx="2" ry="2" />
<text  x="874.73" y="351.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.5" y="245" width="0.2" height="15.0" fill="rgb(225,43,51)" rx="2" ry="2" />
<text  x="1126.49" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (47 samples, 0.90%)</title><rect x="710.8" y="517" width="10.7" height="15.0" fill="rgb(231,94,21)" rx="2" ry="2" />
<text  x="713.78" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (7 samples, 0.13%)</title><rect x="758.0" y="421" width="1.6" height="15.0" fill="rgb(236,10,8)" rx="2" ry="2" />
<text  x="761.00" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="746.0" y="421" width="0.2" height="15.0" fill="rgb(246,129,49)" rx="2" ry="2" />
<text  x="748.97" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="17.9" y="565" width="0.3" height="15.0" fill="rgb(210,14,27)" rx="2" ry="2" />
<text  x="20.95" y="575.5" ></text>
</g>
<g >
<title>partition_slice_builder::build (1 samples, 0.02%)</title><rect x="109.0" y="341" width="0.2" height="15.0" fill="rgb(247,222,38)" rx="2" ry="2" />
<text  x="111.98" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="48.6" y="309" width="0.2" height="15.0" fill="rgb(246,201,54)" rx="2" ry="2" />
<text  x="51.59" y="319.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="697.2" y="517" width="0.2" height="15.0" fill="rgb(222,208,11)" rx="2" ry="2" />
<text  x="700.16" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="588.4" y="309" width="0.7" height="15.0" fill="rgb(218,164,26)" rx="2" ry="2" />
<text  x="591.42" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="307.6" y="341" width="0.2" height="15.0" fill="rgb(250,195,41)" rx="2" ry="2" />
<text  x="310.61" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="775.3" y="373" width="0.6" height="15.0" fill="rgb(238,131,35)" rx="2" ry="2" />
<text  x="778.25" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="644.9" y="485" width="0.3" height="15.0" fill="rgb(239,39,7)" rx="2" ry="2" />
<text  x="647.95" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (49 samples, 0.94%)</title><rect x="746.6" y="421" width="11.2" height="15.0" fill="rgb(216,23,23)" rx="2" ry="2" />
<text  x="749.65" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1045.6" y="357" width="0.5" height="15.0" fill="rgb(235,10,27)" rx="2" ry="2" />
<text  x="1048.62" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%)</title><rect x="79.2" y="517" width="0.3" height="15.0" fill="rgb(236,123,19)" rx="2" ry="2" />
<text  x="82.24" y="527.5" ></text>
</g>
<g >
<title>do_cql_test (282 samples, 5.43%)</title><rect x="18.6" y="581" width="64.0" height="15.0" fill="rgb(254,191,46)" rx="2" ry="2" />
<text  x="21.63" y="591.5" >do_cql_..</text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (72 samples, 1.39%)</title><rect x="743.7" y="453" width="16.3" height="15.0" fill="rgb(229,132,48)" rx="2" ry="2" />
<text  x="746.70" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (6 samples, 0.12%)</title><rect x="73.8" y="421" width="1.4" height="15.0" fill="rgb(211,16,14)" rx="2" ry="2" />
<text  x="76.79" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.4" y="373" width="0.3" height="15.0" fill="rgb(212,20,42)" rx="2" ry="2" />
<text  x="70.43" y="383.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%)</title><rect x="928.7" y="421" width="0.7" height="15.0" fill="rgb(233,143,10)" rx="2" ry="2" />
<text  x="931.71" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, bool  (1 samples, 0.02%)</title><rect x="72.4" y="437" width="0.3" height="15.0" fill="rgb(239,131,51)" rx="2" ry="2" />
<text  x="75.43" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="363.7" y="229" width="0.2" height="15.0" fill="rgb(213,217,52)" rx="2" ry="2" />
<text  x="366.68" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1123.9" y="245" width="0.5" height="15.0" fill="rgb(241,117,44)" rx="2" ry="2" />
<text  x="1126.94" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1118.3" y="469" width="0.2" height="15.0" fill="rgb(254,170,13)" rx="2" ry="2" />
<text  x="1121.26" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%)</title><rect x="46.5" y="261" width="1.9" height="15.0" fill="rgb(238,29,21)" rx="2" ry="2" />
<text  x="49.55" y="271.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%)</title><rect x="621.3" y="453" width="0.5" height="15.0" fill="rgb(242,193,54)" rx="2" ry="2" />
<text  x="624.34" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (17 samples, 0.33%)</title><rect x="802.7" y="197" width="3.9" height="15.0" fill="rgb(249,41,17)" rx="2" ry="2" />
<text  x="805.72" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="451.3" y="293" width="0.5" height="15.0" fill="rgb(251,163,39)" rx="2" ry="2" />
<text  x="454.31" y="303.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1057.7" y="341" width="0.2" height="15.0" fill="rgb(225,175,7)" rx="2" ry="2" />
<text  x="1060.65" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="916.9" y="357" width="0.2" height="15.0" fill="rgb(250,100,39)" rx="2" ry="2" />
<text  x="919.91" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%)</title><rect x="709.4" y="485" width="0.5" height="15.0" fill="rgb(250,186,16)" rx="2" ry="2" />
<text  x="712.42" y="495.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (10 samples, 0.19%)</title><rect x="1129.4" y="213" width="2.3" height="15.0" fill="rgb(241,113,38)" rx="2" ry="2" />
<text  x="1132.39" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%)</title><rect x="73.1" y="389" width="0.2" height="15.0" fill="rgb(219,6,24)" rx="2" ry="2" />
<text  x="76.11" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (30 samples, 0.58%)</title><rect x="1093.1" y="437" width="6.8" height="15.0" fill="rgb(225,108,39)" rx="2" ry="2" />
<text  x="1096.07" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="748.2" y="325" width="0.3" height="15.0" fill="rgb(213,98,4)" rx="2" ry="2" />
<text  x="751.24" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="362.1" y="213" width="0.2" height="15.0" fill="rgb(247,35,22)" rx="2" ry="2" />
<text  x="365.09" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (2 samples, 0.04%)</title><rect x="673.8" y="501" width="0.4" height="15.0" fill="rgb(253,165,33)" rx="2" ry="2" />
<text  x="676.78" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="844.3" y="405" width="0.2" height="15.0" fill="rgb(250,108,8)" rx="2" ry="2" />
<text  x="847.26" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="79.5" y="453" width="0.2" height="15.0" fill="rgb(224,84,9)" rx="2" ry="2" />
<text  x="82.47" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_input (1 samples, 0.02%)</title><rect x="28.6" y="293" width="0.2" height="15.0" fill="rgb(211,14,3)" rx="2" ry="2" />
<text  x="31.61" y="303.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (3 samples, 0.06%)</title><rect x="19.5" y="549" width="0.7" height="15.0" fill="rgb(217,157,46)" rx="2" ry="2" />
<text  x="22.53" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;unsigned long&amp;, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; (1 samples, 0.02%)</title><rect x="1133.0" y="197" width="0.2" height="15.0" fill="rgb(208,11,52)" rx="2" ry="2" />
<text  x="1136.02" y="207.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (103 samples, 1.98%)</title><rect x="492.2" y="357" width="23.4" height="15.0" fill="rgb(244,182,24)" rx="2" ry="2" />
<text  x="495.17" y="367.5" >d..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="305.6" y="309" width="0.6" height="15.0" fill="rgb(205,192,45)" rx="2" ry="2" />
<text  x="308.57" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="671.1" y="405" width="0.2" height="15.0" fill="rgb(207,18,24)" rx="2" ry="2" />
<text  x="674.05" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="341" width="0.3" height="15.0" fill="rgb(220,92,48)" rx="2" ry="2" />
<text  x="113.34" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="50.2" y="325" width="0.2" height="15.0" fill="rgb(252,227,46)" rx="2" ry="2" />
<text  x="53.18" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="342.1" y="325" width="0.9" height="15.0" fill="rgb(253,82,20)" rx="2" ry="2" />
<text  x="345.12" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%)</title><rect x="1126.7" y="357" width="0.2" height="15.0" fill="rgb(245,84,33)" rx="2" ry="2" />
<text  x="1129.66" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.7" y="277" width="0.2" height="15.0" fill="rgb(245,179,42)" rx="2" ry="2" />
<text  x="45.69" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%)</title><rect x="941.9" y="389" width="2.0" height="15.0" fill="rgb(223,161,46)" rx="2" ry="2" />
<text  x="944.88" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (9 samples, 0.17%)</title><rect x="1165.9" y="549" width="2.1" height="15.0" fill="rgb(239,121,49)" rx="2" ry="2" />
<text  x="1168.94" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (454 samples, 8.73%)</title><rect x="459.5" y="421" width="103.0" height="15.0" fill="rgb(216,134,9)" rx="2" ry="2" />
<text  x="462.48" y="431.5" >std::functio..</text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="311.7" y="373" width="0.7" height="15.0" fill="rgb(241,1,1)" rx="2" ry="2" />
<text  x="314.70" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%)</title><rect x="489.2" y="357" width="0.5" height="15.0" fill="rgb(250,100,16)" rx="2" ry="2" />
<text  x="492.22" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="56.5" y="165" width="0.5" height="15.0" fill="rgb(216,138,11)" rx="2" ry="2" />
<text  x="59.54" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="697.4" y="517" width="0.2" height="15.0" fill="rgb(223,117,28)" rx="2" ry="2" />
<text  x="700.39" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="904.6" y="373" width="0.3" height="15.0" fill="rgb(242,78,13)" rx="2" ry="2" />
<text  x="907.65" y="383.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (4 samples, 0.08%)</title><rect x="530.1" y="261" width="0.9" height="15.0" fill="rgb(251,30,16)" rx="2" ry="2" />
<text  x="533.08" y="271.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="101.5" y="485" width="0.7" height="15.0" fill="rgb(235,80,9)" rx="2" ry="2" />
<text  x="104.49" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1131.9" y="181" width="0.2" height="15.0" fill="rgb(205,10,30)" rx="2" ry="2" />
<text  x="1134.89" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1164.3" y="453" width="0.3" height="15.0" fill="rgb(218,22,39)" rx="2" ry="2" />
<text  x="1167.35" y="463.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (263 samples, 5.06%)</title><rect x="772.1" y="437" width="59.7" height="15.0" fill="rgb(248,138,13)" rx="2" ry="2" />
<text  x="775.07" y="447.5" >servic..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_type_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.8" y="405" width="0.2" height="15.0" fill="rgb(224,129,43)" rx="2" ry="2" />
<text  x="69.75" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="696.0" y="485" width="0.5" height="15.0" fill="rgb(210,196,34)" rx="2" ry="2" />
<text  x="699.03" y="495.5" ></text>
</g>
<g >
<title>database::query (8 samples, 0.15%)</title><rect x="106.5" y="533" width="1.8" height="15.0" fill="rgb(254,53,15)" rx="2" ry="2" />
<text  x="109.48" y="543.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (16 samples, 0.31%)</title><rect x="555.5" y="325" width="3.6" height="15.0" fill="rgb(237,60,36)" rx="2" ry="2" />
<text  x="558.51" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.5" y="197" width="0.2" height="15.0" fill="rgb(232,16,44)" rx="2" ry="2" />
<text  x="42.51" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="42.9" y="357" width="1.6" height="15.0" fill="rgb(248,107,43)" rx="2" ry="2" />
<text  x="45.92" y="367.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%)</title><rect x="874.9" y="389" width="0.2" height="15.0" fill="rgb(224,86,13)" rx="2" ry="2" />
<text  x="877.91" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (22 samples, 0.42%)</title><rect x="652.0" y="533" width="5.0" height="15.0" fill="rgb(217,9,39)" rx="2" ry="2" />
<text  x="654.99" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (166 samples, 3.19%)</title><rect x="227.0" y="213" width="37.7" height="15.0" fill="rgb(207,82,53)" rx="2" ry="2" />
<text  x="230.02" y="223.5" >mut..</text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="983.2" y="357" width="2.5" height="15.0" fill="rgb(208,49,49)" rx="2" ry="2" />
<text  x="986.19" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="21.8" y="405" width="0.2" height="15.0" fill="rgb(241,222,44)" rx="2" ry="2" />
<text  x="24.80" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="76.3" y="437" width="1.1" height="15.0" fill="rgb(211,174,5)" rx="2" ry="2" />
<text  x="79.29" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="872.0" y="261" width="0.2" height="15.0" fill="rgb(243,82,49)" rx="2" ry="2" />
<text  x="874.96" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="207.7" y="277" width="0.3" height="15.0" fill="rgb(226,212,45)" rx="2" ry="2" />
<text  x="210.73" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (12 samples, 0.23%)</title><rect x="854.5" y="405" width="2.7" height="15.0" fill="rgb(213,56,19)" rx="2" ry="2" />
<text  x="857.48" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="514.4" y="245" width="0.2" height="15.0" fill="rgb(253,140,2)" rx="2" ry="2" />
<text  x="517.42" y="255.5" ></text>
</g>
<g >
<title>linearized&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1131.2" y="133" width="0.2" height="15.0" fill="rgb(206,75,11)" rx="2" ry="2" />
<text  x="1134.20" y="143.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="912.8" y="373" width="0.2" height="15.0" fill="rgb(216,132,0)" rx="2" ry="2" />
<text  x="915.82" y="383.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="869.9" y="373" width="0.2" height="15.0" fill="rgb(223,143,45)" rx="2" ry="2" />
<text  x="872.92" y="383.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%)</title><rect x="473.6" y="309" width="0.9" height="15.0" fill="rgb(244,63,37)" rx="2" ry="2" />
<text  x="476.56" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (6 samples, 0.12%)</title><rect x="748.9" y="405" width="1.4" height="15.0" fill="rgb(239,26,48)" rx="2" ry="2" />
<text  x="751.92" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%)</title><rect x="547.3" y="357" width="0.5" height="15.0" fill="rgb(238,186,54)" rx="2" ry="2" />
<text  x="550.33" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (126 samples, 2.42%)</title><rect x="786.8" y="357" width="28.6" height="15.0" fill="rgb(235,207,22)" rx="2" ry="2" />
<text  x="789.83" y="367.5" >st..</text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%)</title><rect x="756.2" y="293" width="0.9" height="15.0" fill="rgb(212,139,36)" rx="2" ry="2" />
<text  x="759.18" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="57.9" y="181" width="0.2" height="15.0" fill="rgb(254,12,45)" rx="2" ry="2" />
<text  x="60.90" y="191.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (24 samples, 0.46%)</title><rect x="923.3" y="421" width="5.4" height="15.0" fill="rgb(206,89,27)" rx="2" ry="2" />
<text  x="926.26" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="84.7" y="245" width="0.2" height="15.0" fill="rgb(244,199,49)" rx="2" ry="2" />
<text  x="87.69" y="255.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="795.0" y="181" width="0.5" height="15.0" fill="rgb(238,228,6)" rx="2" ry="2" />
<text  x="798.00" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (8 samples, 0.15%)</title><rect x="979.3" y="373" width="1.9" height="15.0" fill="rgb(222,67,4)" rx="2" ry="2" />
<text  x="982.33" y="383.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1119.9" y="261" width="0.2" height="15.0" fill="rgb(246,176,52)" rx="2" ry="2" />
<text  x="1122.85" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="815.0" y="293" width="0.2" height="15.0" fill="rgb(227,181,48)" rx="2" ry="2" />
<text  x="817.98" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="41.3" y="357" width="0.3" height="15.0" fill="rgb(214,144,49)" rx="2" ry="2" />
<text  x="44.33" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1161.2" y="485" width="0.2" height="15.0" fill="rgb(222,157,41)" rx="2" ry="2" />
<text  x="1164.17" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="18.2" y="389" width="0.2" height="15.0" fill="rgb(219,184,2)" rx="2" ry="2" />
<text  x="21.17" y="399.5" ></text>
</g>
<g >
<title>auth::get_permissions (4 samples, 0.08%)</title><rect x="79.9" y="405" width="0.9" height="15.0" fill="rgb(216,208,35)" rx="2" ry="2" />
<text  x="82.92" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1158.2" y="517" width="0.5" height="15.0" fill="rgb(249,175,16)" rx="2" ry="2" />
<text  x="1161.22" y="527.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="108.5" y="405" width="0.2" height="15.0" fill="rgb(240,158,22)" rx="2" ry="2" />
<text  x="111.52" y="415.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="18.2" y="549" width="0.4" height="15.0" fill="rgb(224,152,5)" rx="2" ry="2" />
<text  x="21.17" y="559.5" ></text>
</g>
<g >
<title>abstract_type::from_string (2 samples, 0.04%)</title><rect x="71.3" y="405" width="0.4" height="15.0" fill="rgb(248,161,31)" rx="2" ry="2" />
<text  x="74.29" y="415.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="18.2" y="437" width="0.2" height="15.0" fill="rgb(235,159,26)" rx="2" ry="2" />
<text  x="21.17" y="447.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="722.4" y="453" width="0.2" height="15.0" fill="rgb(209,78,16)" rx="2" ry="2" />
<text  x="725.36" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="78.8" y="485" width="0.2" height="15.0" fill="rgb(243,132,18)" rx="2" ry="2" />
<text  x="81.78" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1026.1" y="245" width="0.2" height="15.0" fill="rgb(215,21,26)" rx="2" ry="2" />
<text  x="1029.10" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%)</title><rect x="753.2" y="325" width="0.5" height="15.0" fill="rgb(225,27,38)" rx="2" ry="2" />
<text  x="756.23" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="697.2" y="485" width="0.2" height="15.0" fill="rgb(233,175,53)" rx="2" ry="2" />
<text  x="700.16" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="556.4" y="309" width="0.2" height="15.0" fill="rgb(228,139,7)" rx="2" ry="2" />
<text  x="559.41" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1037.4" y="309" width="0.3" height="15.0" fill="rgb(211,99,22)" rx="2" ry="2" />
<text  x="1040.45" y="319.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (3 samples, 0.06%)</title><rect x="863.1" y="485" width="0.7" height="15.0" fill="rgb(234,46,33)" rx="2" ry="2" />
<text  x="866.11" y="495.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="1123.3" y="261" width="0.2" height="15.0" fill="rgb(241,165,53)" rx="2" ry="2" />
<text  x="1126.26" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="873.8" y="261" width="0.2" height="15.0" fill="rgb(243,60,5)" rx="2" ry="2" />
<text  x="876.77" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%)</title><rect x="292.4" y="245" width="1.8" height="15.0" fill="rgb(230,222,9)" rx="2" ry="2" />
<text  x="295.40" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (4 samples, 0.08%)</title><rect x="62.4" y="341" width="0.9" height="15.0" fill="rgb(251,164,0)" rx="2" ry="2" />
<text  x="65.44" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%)</title><rect x="269.9" y="181" width="0.5" height="15.0" fill="rgb(248,179,31)" rx="2" ry="2" />
<text  x="272.93" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="321.0" y="325" width="0.2" height="15.0" fill="rgb(234,195,0)" rx="2" ry="2" />
<text  x="324.00" y="335.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1163.9" y="437" width="0.2" height="15.0" fill="rgb(227,142,37)" rx="2" ry="2" />
<text  x="1166.89" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (31 samples, 0.60%)</title><rect x="356.6" y="229" width="7.1" height="15.0" fill="rgb(228,37,32)" rx="2" ry="2" />
<text  x="359.64" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (39 samples, 0.75%)</title><rect x="1013.4" y="245" width="8.8" height="15.0" fill="rgb(246,192,54)" rx="2" ry="2" />
<text  x="1016.39" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="49.0" y="325" width="0.3" height="15.0" fill="rgb(229,72,34)" rx="2" ry="2" />
<text  x="52.05" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="52.7" y="309" width="0.7" height="15.0" fill="rgb(250,108,46)" rx="2" ry="2" />
<text  x="55.68" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%)</title><rect x="975.5" y="389" width="0.2" height="15.0" fill="rgb(223,167,45)" rx="2" ry="2" />
<text  x="978.48" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="898.3" y="325" width="0.4" height="15.0" fill="rgb(249,59,26)" rx="2" ry="2" />
<text  x="901.29" y="335.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="553.2" y="309" width="0.9" height="15.0" fill="rgb(219,47,20)" rx="2" ry="2" />
<text  x="556.24" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.12%)</title><rect x="691.0" y="485" width="1.4" height="15.0" fill="rgb(208,169,15)" rx="2" ry="2" />
<text  x="694.03" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="140.5" y="485" width="0.3" height="15.0" fill="rgb(216,153,15)" rx="2" ry="2" />
<text  x="143.53" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (5 samples, 0.10%)</title><rect x="872.4" y="309" width="1.1" height="15.0" fill="rgb(212,87,20)" rx="2" ry="2" />
<text  x="875.41" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (122 samples, 2.35%)</title><rect x="228.6" y="165" width="27.7" height="15.0" fill="rgb(235,77,36)" rx="2" ry="2" />
<text  x="231.61" y="175.5" >c..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="50.2" y="261" width="0.2" height="15.0" fill="rgb(219,182,12)" rx="2" ry="2" />
<text  x="53.18" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.10%)</title><rect x="637.5" y="437" width="1.1" height="15.0" fill="rgb(231,147,49)" rx="2" ry="2" />
<text  x="640.46" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="692.6" y="485" width="0.5" height="15.0" fill="rgb(226,69,16)" rx="2" ry="2" />
<text  x="695.62" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="793.0" y="261" width="0.4" height="15.0" fill="rgb(210,59,2)" rx="2" ry="2" />
<text  x="795.96" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="831.6" y="373" width="0.2" height="15.0" fill="rgb(218,171,44)" rx="2" ry="2" />
<text  x="834.55" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%)</title><rect x="316.7" y="389" width="0.9" height="15.0" fill="rgb(241,158,4)" rx="2" ry="2" />
<text  x="319.69" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="45.2" y="213" width="0.4" height="15.0" fill="rgb(250,17,6)" rx="2" ry="2" />
<text  x="48.19" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="944.6" y="437" width="0.2" height="15.0" fill="rgb(247,200,10)" rx="2" ry="2" />
<text  x="947.60" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (3 samples, 0.06%)</title><rect x="620.0" y="469" width="0.7" height="15.0" fill="rgb(220,215,32)" rx="2" ry="2" />
<text  x="622.98" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="647.9" y="517" width="1.1" height="15.0" fill="rgb(212,29,29)" rx="2" ry="2" />
<text  x="650.90" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="671.7" y="469" width="0.3" height="15.0" fill="rgb(205,2,46)" rx="2" ry="2" />
<text  x="674.74" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="574.1" y="293" width="0.2" height="15.0" fill="rgb(232,73,24)" rx="2" ry="2" />
<text  x="577.12" y="303.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="79.0" y="501" width="0.2" height="15.0" fill="rgb(233,176,38)" rx="2" ry="2" />
<text  x="82.01" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="1082.9" y="405" width="0.4" height="15.0" fill="rgb(242,102,46)" rx="2" ry="2" />
<text  x="1085.85" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="704.2" y="469" width="0.2" height="15.0" fill="rgb(236,62,47)" rx="2" ry="2" />
<text  x="707.20" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="725.1" y="533" width="0.2" height="15.0" fill="rgb(228,129,11)" rx="2" ry="2" />
<text  x="728.08" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="697.8" y="533" width="0.3" height="15.0" fill="rgb(251,135,14)" rx="2" ry="2" />
<text  x="700.84" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="39.3" y="325" width="0.4" height="15.0" fill="rgb(222,34,28)" rx="2" ry="2" />
<text  x="42.28" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::insert_statement::prepare_internal (1 samples, 0.02%)</title><rect x="696.5" y="453" width="0.2" height="15.0" fill="rgb(222,54,22)" rx="2" ry="2" />
<text  x="699.48" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="64.0" y="341" width="0.3" height="15.0" fill="rgb(216,204,4)" rx="2" ry="2" />
<text  x="67.03" y="351.5" ></text>
</g>
<g >
<title>query::result_set_row::get_ptr&lt;double&gt; (1 samples, 0.02%)</title><rect x="108.7" y="405" width="0.3" height="15.0" fill="rgb(224,108,20)" rx="2" ry="2" />
<text  x="111.75" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="940.5" y="357" width="0.2" height="15.0" fill="rgb(250,13,20)" rx="2" ry="2" />
<text  x="943.52" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (1 samples, 0.02%)</title><rect x="1023.4" y="261" width="0.2" height="15.0" fill="rgb(228,5,42)" rx="2" ry="2" />
<text  x="1026.37" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="305.3" y="309" width="0.3" height="15.0" fill="rgb(207,146,13)" rx="2" ry="2" />
<text  x="308.34" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="108.7" y="485" width="0.3" height="15.0" fill="rgb(208,22,26)" rx="2" ry="2" />
<text  x="111.75" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (3 samples, 0.06%)</title><rect x="936.2" y="437" width="0.7" height="15.0" fill="rgb(213,18,9)" rx="2" ry="2" />
<text  x="939.20" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (3 samples, 0.06%)</title><rect x="108.5" y="517" width="0.7" height="15.0" fill="rgb(209,128,47)" rx="2" ry="2" />
<text  x="111.52" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_S_relocate (1 samples, 0.02%)</title><rect x="109.0" y="293" width="0.2" height="15.0" fill="rgb(209,170,13)" rx="2" ry="2" />
<text  x="111.98" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="486.5" y="357" width="0.2" height="15.0" fill="rgb(229,96,32)" rx="2" ry="2" />
<text  x="489.49" y="367.5" ></text>
</g>
<g >
<title>memtable::apply (27 samples, 0.52%)</title><rect x="1119.2" y="293" width="6.1" height="15.0" fill="rgb(218,174,2)" rx="2" ry="2" />
<text  x="1122.17" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="42.7" y="229" width="0.2" height="15.0" fill="rgb(250,229,11)" rx="2" ry="2" />
<text  x="45.69" y="239.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="502.2" y="309" width="0.2" height="15.0" fill="rgb(234,4,2)" rx="2" ry="2" />
<text  x="505.16" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="874.0" y="325" width="0.2" height="15.0" fill="rgb(236,127,53)" rx="2" ry="2" />
<text  x="877.00" y="335.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="108.5" y="357" width="0.2" height="15.0" fill="rgb(215,109,0)" rx="2" ry="2" />
<text  x="111.52" y="367.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="109.0" y="405" width="0.2" height="15.0" fill="rgb(213,137,35)" rx="2" ry="2" />
<text  x="111.98" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="326.2" y="341" width="1.2" height="15.0" fill="rgb(251,135,14)" rx="2" ry="2" />
<text  x="329.23" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="17.0" y="549" width="0.3" height="15.0" fill="rgb(211,114,30)" rx="2" ry="2" />
<text  x="20.04" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1081.7" y="389" width="0.2" height="15.0" fill="rgb(224,211,9)" rx="2" ry="2" />
<text  x="1084.72" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%)</title><rect x="593.4" y="389" width="0.9" height="15.0" fill="rgb(217,167,29)" rx="2" ry="2" />
<text  x="596.42" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1128.0" y="213" width="0.5" height="15.0" fill="rgb(229,109,30)" rx="2" ry="2" />
<text  x="1131.03" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="57.0" y="197" width="0.7" height="15.0" fill="rgb(243,226,44)" rx="2" ry="2" />
<text  x="59.99" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (465 samples, 8.95%)</title><rect x="458.6" y="453" width="105.5" height="15.0" fill="rgb(241,84,23)" rx="2" ry="2" />
<text  x="461.57" y="463.5" >query::queri..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (4 samples, 0.08%)</title><rect x="703.5" y="485" width="0.9" height="15.0" fill="rgb(229,187,47)" rx="2" ry="2" />
<text  x="706.52" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="1043.8" y="325" width="0.9" height="15.0" fill="rgb(240,165,33)" rx="2" ry="2" />
<text  x="1046.81" y="335.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (2 samples, 0.04%)</title><rect x="404.3" y="245" width="0.5" height="15.0" fill="rgb(241,226,25)" rx="2" ry="2" />
<text  x="407.32" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="694.9" y="517" width="0.4" height="15.0" fill="rgb(239,31,49)" rx="2" ry="2" />
<text  x="697.89" y="527.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (1 samples, 0.02%)</title><rect x="10.0" y="645" width="0.2" height="15.0" fill="rgb(252,214,33)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="448.4" y="325" width="0.2" height="15.0" fill="rgb(253,106,40)" rx="2" ry="2" />
<text  x="451.36" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (1 samples, 0.02%)</title><rect x="696.5" y="405" width="0.2" height="15.0" fill="rgb(254,87,11)" rx="2" ry="2" />
<text  x="699.48" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (7 samples, 0.13%)</title><rect x="285.8" y="229" width="1.6" height="15.0" fill="rgb(249,4,40)" rx="2" ry="2" />
<text  x="288.82" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="42.2" y="373" width="0.3" height="15.0" fill="rgb(234,17,41)" rx="2" ry="2" />
<text  x="45.24" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (3 samples, 0.06%)</title><rect x="1148.9" y="437" width="0.7" height="15.0" fill="rgb(240,126,0)" rx="2" ry="2" />
<text  x="1151.91" y="447.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="534.4" y="277" width="0.2" height="15.0" fill="rgb(208,69,29)" rx="2" ry="2" />
<text  x="537.39" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (32 samples, 0.62%)</title><rect x="1067.2" y="309" width="7.3" height="15.0" fill="rgb(238,216,43)" rx="2" ry="2" />
<text  x="1070.19" y="319.5" ></text>
</g>
<g >
<title>freeze (11 samples, 0.21%)</title><rect x="1129.2" y="229" width="2.5" height="15.0" fill="rgb(208,48,17)" rx="2" ry="2" />
<text  x="1132.16" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="306.5" y="293" width="0.2" height="15.0" fill="rgb(210,89,43)" rx="2" ry="2" />
<text  x="309.48" y="303.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (2 samples, 0.04%)</title><rect x="536.7" y="261" width="0.4" height="15.0" fill="rgb(238,26,52)" rx="2" ry="2" />
<text  x="539.66" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="800.7" y="149" width="0.2" height="15.0" fill="rgb(219,215,38)" rx="2" ry="2" />
<text  x="803.68" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (6 samples, 0.12%)</title><rect x="46.8" y="245" width="1.3" height="15.0" fill="rgb(220,149,10)" rx="2" ry="2" />
<text  x="49.78" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="509.6" y="229" width="0.7" height="15.0" fill="rgb(220,111,30)" rx="2" ry="2" />
<text  x="512.65" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="56.1" y="261" width="0.4" height="15.0" fill="rgb(236,117,41)" rx="2" ry="2" />
<text  x="59.08" y="271.5" ></text>
</g>
<g >
<title>_longjmp_unwind (1 samples, 0.02%)</title><rect x="1168.7" y="661" width="0.2" height="15.0" fill="rgb(211,61,12)" rx="2" ry="2" />
<text  x="1171.66" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="622.5" y="453" width="0.4" height="15.0" fill="rgb(252,115,48)" rx="2" ry="2" />
<text  x="625.47" y="463.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1120.3" y="197" width="0.2" height="15.0" fill="rgb(228,51,53)" rx="2" ry="2" />
<text  x="1123.31" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="822.9" y="421" width="0.5" height="15.0" fill="rgb(230,160,12)" rx="2" ry="2" />
<text  x="825.92" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (12 samples, 0.23%)</title><rect x="102.2" y="485" width="2.7" height="15.0" fill="rgb(235,78,49)" rx="2" ry="2" />
<text  x="105.17" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="22.3" y="437" width="0.2" height="15.0" fill="rgb(223,148,3)" rx="2" ry="2" />
<text  x="25.26" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.1" y="405" width="0.2" height="15.0" fill="rgb(218,23,48)" rx="2" ry="2" />
<text  x="69.07" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="22.7" y="437" width="0.2" height="15.0" fill="rgb(235,218,26)" rx="2" ry="2" />
<text  x="25.71" y="447.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="84.7" y="309" width="0.2" height="15.0" fill="rgb(248,118,24)" rx="2" ry="2" />
<text  x="87.69" y="319.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%)</title><rect x="860.2" y="501" width="0.2" height="15.0" fill="rgb(220,172,35)" rx="2" ry="2" />
<text  x="863.15" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.2" y="245" width="0.2" height="15.0" fill="rgb(222,66,8)" rx="2" ry="2" />
<text  x="53.18" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (24 samples, 0.46%)</title><rect x="852.4" y="469" width="5.5" height="15.0" fill="rgb(230,48,38)" rx="2" ry="2" />
<text  x="855.44" y="479.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="443.8" y="277" width="1.8" height="15.0" fill="rgb(235,142,3)" rx="2" ry="2" />
<text  x="446.82" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="949.8" y="357" width="0.3" height="15.0" fill="rgb(245,75,17)" rx="2" ry="2" />
<text  x="952.82" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="868.8" y="469" width="0.2" height="15.0" fill="rgb(233,203,39)" rx="2" ry="2" />
<text  x="871.78" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (3 samples, 0.06%)</title><rect x="869.5" y="421" width="0.6" height="15.0" fill="rgb(213,9,51)" rx="2" ry="2" />
<text  x="872.46" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="938.5" y="389" width="0.4" height="15.0" fill="rgb(236,220,31)" rx="2" ry="2" />
<text  x="941.47" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (17 samples, 0.33%)</title><rect x="570.7" y="405" width="3.9" height="15.0" fill="rgb(224,79,4)" rx="2" ry="2" />
<text  x="573.72" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (525 samples, 10.10%)</title><rect x="732.8" y="485" width="119.2" height="15.0" fill="rgb(236,77,44)" rx="2" ry="2" />
<text  x="735.80" y="495.5" >single_node_cq..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="60.9" y="373" width="0.2" height="15.0" fill="rgb(228,0,24)" rx="2" ry="2" />
<text  x="63.85" y="383.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%)</title><rect x="376.2" y="213" width="0.2" height="15.0" fill="rgb(214,35,33)" rx="2" ry="2" />
<text  x="379.17" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="984.8" y="325" width="0.9" height="15.0" fill="rgb(219,105,38)" rx="2" ry="2" />
<text  x="987.78" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="600.5" y="373" width="0.2" height="15.0" fill="rgb(207,74,45)" rx="2" ry="2" />
<text  x="603.45" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="820.9" y="389" width="0.2" height="15.0" fill="rgb(244,66,13)" rx="2" ry="2" />
<text  x="823.88" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (15 samples, 0.29%)</title><rect x="987.1" y="325" width="3.4" height="15.0" fill="rgb(247,121,16)" rx="2" ry="2" />
<text  x="990.05" y="335.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1049.3" y="357" width="2.5" height="15.0" fill="rgb(218,20,35)" rx="2" ry="2" />
<text  x="1052.25" y="367.5" ></text>
</g>
<g >
<title>query::result::builder::builder (15 samples, 0.29%)</title><rect x="612.9" y="453" width="3.4" height="15.0" fill="rgb(248,184,7)" rx="2" ry="2" />
<text  x="615.94" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1056.3" y="357" width="0.7" height="15.0" fill="rgb(243,57,12)" rx="2" ry="2" />
<text  x="1059.29" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (9 samples, 0.17%)</title><rect x="861.1" y="485" width="2.0" height="15.0" fill="rgb(224,144,51)" rx="2" ry="2" />
<text  x="864.06" y="495.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%)</title><rect x="85.8" y="421" width="0.2" height="15.0" fill="rgb(228,66,26)" rx="2" ry="2" />
<text  x="88.82" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="534.6" y="277" width="0.2" height="15.0" fill="rgb(219,110,32)" rx="2" ry="2" />
<text  x="537.62" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="39.3" y="277" width="0.2" height="15.0" fill="rgb(224,197,8)" rx="2" ry="2" />
<text  x="42.28" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="53.6" y="293" width="0.2" height="15.0" fill="rgb(245,73,40)" rx="2" ry="2" />
<text  x="56.59" y="303.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%)</title><rect x="82.9" y="581" width="0.2" height="15.0" fill="rgb(227,225,29)" rx="2" ry="2" />
<text  x="85.87" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="812.9" y="309" width="1.2" height="15.0" fill="rgb(253,74,38)" rx="2" ry="2" />
<text  x="815.94" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="950.5" y="341" width="0.2" height="15.0" fill="rgb(221,187,21)" rx="2" ry="2" />
<text  x="953.50" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.5" y="277" width="0.5" height="15.0" fill="rgb(229,56,46)" rx="2" ry="2" />
<text  x="52.50" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="846.1" y="453" width="0.2" height="15.0" fill="rgb(240,171,42)" rx="2" ry="2" />
<text  x="849.08" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.37%)</title><rect x="1007.9" y="261" width="4.4" height="15.0" fill="rgb(233,104,43)" rx="2" ry="2" />
<text  x="1010.94" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.3" y="213" width="0.2" height="15.0" fill="rgb(225,191,10)" rx="2" ry="2" />
<text  x="42.28" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.9" y="341" width="0.2" height="15.0" fill="rgb(206,178,15)" rx="2" ry="2" />
<text  x="63.85" y="351.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="110.3" y="405" width="0.3" height="15.0" fill="rgb(247,53,24)" rx="2" ry="2" />
<text  x="113.34" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1128.9" y="341" width="4.6" height="15.0" fill="rgb(207,75,1)" rx="2" ry="2" />
<text  x="1131.93" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="84.0" y="453" width="0.2" height="15.0" fill="rgb(205,169,53)" rx="2" ry="2" />
<text  x="87.01" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="888.8" y="453" width="0.2" height="15.0" fill="rgb(244,100,15)" rx="2" ry="2" />
<text  x="891.76" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="77.2" y="405" width="0.2" height="15.0" fill="rgb(206,28,20)" rx="2" ry="2" />
<text  x="80.20" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="63.1" y="229" width="0.2" height="15.0" fill="rgb(247,129,32)" rx="2" ry="2" />
<text  x="66.12" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="69.2" y="469" width="0.3" height="15.0" fill="rgb(239,41,21)" rx="2" ry="2" />
<text  x="72.25" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="755.7" y="309" width="1.6" height="15.0" fill="rgb(223,98,39)" rx="2" ry="2" />
<text  x="758.73" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="580.3" y="341" width="0.2" height="15.0" fill="rgb(206,181,30)" rx="2" ry="2" />
<text  x="583.25" y="351.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="850.6" y="389" width="0.5" height="15.0" fill="rgb(208,150,38)" rx="2" ry="2" />
<text  x="853.62" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="787.7" y="309" width="1.2" height="15.0" fill="rgb(247,14,15)" rx="2" ry="2" />
<text  x="790.74" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="824.7" y="357" width="0.3" height="15.0" fill="rgb(205,99,48)" rx="2" ry="2" />
<text  x="827.74" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="51.5" y="325" width="0.5" height="15.0" fill="rgb(232,133,13)" rx="2" ry="2" />
<text  x="54.54" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="627.2" y="453" width="0.3" height="15.0" fill="rgb(220,51,30)" rx="2" ry="2" />
<text  x="630.24" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (65 samples, 1.25%)</title><rect x="1012.5" y="277" width="14.7" height="15.0" fill="rgb(241,223,37)" rx="2" ry="2" />
<text  x="1015.48" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (274 samples, 5.27%)</title><rect x="976.6" y="389" width="62.2" height="15.0" fill="rgb(236,2,45)" rx="2" ry="2" />
<text  x="979.61" y="399.5" >servic..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="773.2" y="405" width="0.2" height="15.0" fill="rgb(233,209,35)" rx="2" ry="2" />
<text  x="776.21" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="976.2" y="389" width="0.4" height="15.0" fill="rgb(230,194,50)" rx="2" ry="2" />
<text  x="979.16" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%)</title><rect x="939.6" y="421" width="1.4" height="15.0" fill="rgb(212,70,35)" rx="2" ry="2" />
<text  x="942.61" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="519.2" y="325" width="0.4" height="15.0" fill="rgb(245,144,49)" rx="2" ry="2" />
<text  x="522.18" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="632.0" y="389" width="0.2" height="15.0" fill="rgb(207,166,44)" rx="2" ry="2" />
<text  x="635.01" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (8 samples, 0.15%)</title><rect x="46.5" y="341" width="1.9" height="15.0" fill="rgb(224,205,51)" rx="2" ry="2" />
<text  x="49.55" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="619.5" y="453" width="0.2" height="15.0" fill="rgb(218,7,17)" rx="2" ry="2" />
<text  x="622.52" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,071 samples, 20.60%)</title><rect x="875.6" y="517" width="243.1" height="15.0" fill="rgb(245,20,48)" rx="2" ry="2" />
<text  x="878.59" y="527.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (9 samples, 0.17%)</title><rect x="552.3" y="325" width="2.1" height="15.0" fill="rgb(248,103,6)" rx="2" ry="2" />
<text  x="555.33" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="61.8" y="181" width="0.4" height="15.0" fill="rgb(243,186,44)" rx="2" ry="2" />
<text  x="64.76" y="191.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.5" y="309" width="0.3" height="15.0" fill="rgb(222,4,48)" rx="2" ry="2" />
<text  x="64.53" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql3::untyped_result_set&gt; &gt;, cql3::query_processor::execute_paged_internal (1 samples, 0.02%)</title><rect x="657.0" y="533" width="0.2" height="15.0" fill="rgb(214,201,11)" rx="2" ry="2" />
<text  x="659.98" y="543.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="33.2" y="277" width="0.2" height="15.0" fill="rgb(247,178,41)" rx="2" ry="2" />
<text  x="36.16" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (17 samples, 0.33%)</title><rect x="312.4" y="373" width="3.8" height="15.0" fill="rgb(248,119,26)" rx="2" ry="2" />
<text  x="315.38" y="383.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (1 samples, 0.02%)</title><rect x="549.8" y="373" width="0.3" height="15.0" fill="rgb(224,58,9)" rx="2" ry="2" />
<text  x="552.83" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1145.3" y="453" width="0.4" height="15.0" fill="rgb(244,197,10)" rx="2" ry="2" />
<text  x="1148.28" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="445.9" y="261" width="0.4" height="15.0" fill="rgb(214,193,22)" rx="2" ry="2" />
<text  x="448.86" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="330.5" y="389" width="0.3" height="15.0" fill="rgb(211,31,46)" rx="2" ry="2" />
<text  x="333.54" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="325" width="0.3" height="15.0" fill="rgb(233,14,9)" rx="2" ry="2" />
<text  x="83.15" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::recreate_current_row (1 samples, 0.02%)</title><rect x="17.7" y="581" width="0.2" height="15.0" fill="rgb(231,201,10)" rx="2" ry="2" />
<text  x="20.72" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="1037.4" y="325" width="0.3" height="15.0" fill="rgb(247,225,46)" rx="2" ry="2" />
<text  x="1040.45" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="563.7" y="421" width="0.2" height="15.0" fill="rgb(228,48,23)" rx="2" ry="2" />
<text  x="566.68" y="431.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="109.4" y="485" width="0.3" height="15.0" fill="rgb(209,61,16)" rx="2" ry="2" />
<text  x="112.43" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="659.9" y="341" width="0.3" height="15.0" fill="rgb(216,99,21)" rx="2" ry="2" />
<text  x="662.93" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (63 samples, 1.21%)</title><rect x="24.5" y="373" width="14.3" height="15.0" fill="rgb(240,41,35)" rx="2" ry="2" />
<text  x="27.53" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (9 samples, 0.17%)</title><rect x="556.6" y="309" width="2.1" height="15.0" fill="rgb(215,94,16)" rx="2" ry="2" />
<text  x="559.64" y="319.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.2" y="357" width="0.2" height="15.0" fill="rgb(251,46,6)" rx="2" ry="2" />
<text  x="112.20" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="658.6" y="517" width="0.2" height="15.0" fill="rgb(206,111,12)" rx="2" ry="2" />
<text  x="661.57" y="527.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.2" y="373" width="0.2" height="15.0" fill="rgb(226,55,19)" rx="2" ry="2" />
<text  x="112.20" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="868.3" y="437" width="0.3" height="15.0" fill="rgb(217,6,19)" rx="2" ry="2" />
<text  x="871.33" y="447.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="872.0" y="309" width="0.2" height="15.0" fill="rgb(216,205,49)" rx="2" ry="2" />
<text  x="874.96" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="484.0" y="293" width="1.1" height="15.0" fill="rgb(205,204,52)" rx="2" ry="2" />
<text  x="487.00" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="1126.9" y="341" width="1.8" height="15.0" fill="rgb(221,74,1)" rx="2" ry="2" />
<text  x="1129.89" y="351.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (2 samples, 0.04%)</title><rect x="102.2" y="469" width="0.4" height="15.0" fill="rgb(240,93,24)" rx="2" ry="2" />
<text  x="105.17" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1126.0" y="293" width="0.2" height="15.0" fill="rgb(253,66,22)" rx="2" ry="2" />
<text  x="1128.98" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="515.6" y="357" width="0.2" height="15.0" fill="rgb(242,43,21)" rx="2" ry="2" />
<text  x="518.55" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="591.6" y="341" width="0.5" height="15.0" fill="rgb(229,106,54)" rx="2" ry="2" />
<text  x="594.60" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (1 samples, 0.02%)</title><rect x="373.7" y="197" width="0.2" height="15.0" fill="rgb(227,171,52)" rx="2" ry="2" />
<text  x="376.67" y="207.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (213 samples, 4.10%)</title><rect x="990.5" y="373" width="48.3" height="15.0" fill="rgb(244,196,20)" rx="2" ry="2" />
<text  x="993.46" y="383.5" >serv..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (44 samples, 0.85%)</title><rect x="527.8" y="293" width="10.0" height="15.0" fill="rgb(237,107,28)" rx="2" ry="2" />
<text  x="530.81" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="159.1" y="453" width="0.5" height="15.0" fill="rgb(230,87,32)" rx="2" ry="2" />
<text  x="162.15" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="455.6" y="389" width="0.2" height="15.0" fill="rgb(242,209,32)" rx="2" ry="2" />
<text  x="458.62" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="750.1" y="373" width="0.2" height="15.0" fill="rgb(227,25,43)" rx="2" ry="2" />
<text  x="753.05" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (30 samples, 0.58%)</title><rect x="645.2" y="533" width="6.8" height="15.0" fill="rgb(221,30,46)" rx="2" ry="2" />
<text  x="648.18" y="543.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="79.7" y="437" width="1.1" height="15.0" fill="rgb(254,107,24)" rx="2" ry="2" />
<text  x="82.69" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (119 samples, 2.29%)</title><rect x="576.2" y="453" width="27.0" height="15.0" fill="rgb(241,178,42)" rx="2" ry="2" />
<text  x="579.16" y="463.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1088.8" y="421" width="0.6" height="15.0" fill="rgb(211,171,30)" rx="2" ry="2" />
<text  x="1091.75" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (1 samples, 0.02%)</title><rect x="696.5" y="469" width="0.2" height="15.0" fill="rgb(241,161,53)" rx="2" ry="2" />
<text  x="699.48" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="660.6" y="421" width="0.7" height="15.0" fill="rgb(242,208,2)" rx="2" ry="2" />
<text  x="663.61" y="431.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (4 samples, 0.08%)</title><rect x="1167.1" y="501" width="0.9" height="15.0" fill="rgb(244,126,30)" rx="2" ry="2" />
<text  x="1170.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.7" y="245" width="0.5" height="15.0" fill="rgb(241,91,43)" rx="2" ry="2" />
<text  x="47.73" y="255.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%)</title><rect x="356.4" y="229" width="0.2" height="15.0" fill="rgb(211,212,7)" rx="2" ry="2" />
<text  x="359.42" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (10 samples, 0.19%)</title><rect x="534.8" y="277" width="2.3" height="15.0" fill="rgb(229,2,34)" rx="2" ry="2" />
<text  x="537.85" y="287.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%)</title><rect x="696.7" y="501" width="0.2" height="15.0" fill="rgb(254,66,38)" rx="2" ry="2" />
<text  x="699.71" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="39.5" y="229" width="0.2" height="15.0" fill="rgb(223,220,0)" rx="2" ry="2" />
<text  x="42.51" y="239.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="857.2" y="437" width="0.2" height="15.0" fill="rgb(250,198,13)" rx="2" ry="2" />
<text  x="860.20" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="478.3" y="309" width="0.5" height="15.0" fill="rgb(209,124,1)" rx="2" ry="2" />
<text  x="481.32" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="63.6" y="341" width="0.2" height="15.0" fill="rgb(245,174,51)" rx="2" ry="2" />
<text  x="66.57" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1030.0" y="293" width="0.2" height="15.0" fill="rgb(248,162,23)" rx="2" ry="2" />
<text  x="1032.96" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (32 samples, 0.62%)</title><rect x="435.6" y="261" width="7.3" height="15.0" fill="rgb(217,220,16)" rx="2" ry="2" />
<text  x="438.64" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1088.3" y="421" width="0.5" height="15.0" fill="rgb(252,39,19)" rx="2" ry="2" />
<text  x="1091.30" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="519.6" y="341" width="0.3" height="15.0" fill="rgb(229,158,22)" rx="2" ry="2" />
<text  x="522.64" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="768.9" y="325" width="0.2" height="15.0" fill="rgb(209,96,23)" rx="2" ry="2" />
<text  x="771.90" y="335.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="86.0" y="437" width="0.7" height="15.0" fill="rgb(210,189,35)" rx="2" ry="2" />
<text  x="89.05" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="768.7" y="373" width="0.6" height="15.0" fill="rgb(219,15,20)" rx="2" ry="2" />
<text  x="771.67" y="383.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="966.2" y="389" width="0.2" height="15.0" fill="rgb(235,112,15)" rx="2" ry="2" />
<text  x="969.17" y="399.5" ></text>
</g>
<g >
<title>database::add_column_family (6 samples, 0.12%)</title><rect x="110.3" y="517" width="1.4" height="15.0" fill="rgb(229,71,18)" rx="2" ry="2" />
<text  x="113.34" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (12 samples, 0.23%)</title><rect x="751.6" y="357" width="2.8" height="15.0" fill="rgb(225,95,52)" rx="2" ry="2" />
<text  x="754.64" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="694.7" y="517" width="0.2" height="15.0" fill="rgb(233,27,25)" rx="2" ry="2" />
<text  x="697.66" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;locator::snitch_ptr&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="723.0" y="165" width="0.3" height="15.0" fill="rgb(212,143,24)" rx="2" ry="2" />
<text  x="726.04" y="175.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="818.8" y="341" width="0.3" height="15.0" fill="rgb(254,115,50)" rx="2" ry="2" />
<text  x="821.84" y="351.5" ></text>
</g>
<g >
<title>database::find_keyspace (14 samples, 0.27%)</title><rect x="1042.9" y="373" width="3.2" height="15.0" fill="rgb(254,127,11)" rx="2" ry="2" />
<text  x="1045.90" y="383.5" ></text>
</g>
<g >
<title>cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;::accept_new_row (1 samples, 0.02%)</title><rect x="657.0" y="405" width="0.2" height="15.0" fill="rgb(237,115,5)" rx="2" ry="2" />
<text  x="659.98" y="415.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.38%)</title><rect x="1007.7" y="277" width="4.6" height="15.0" fill="rgb(205,24,50)" rx="2" ry="2" />
<text  x="1010.71" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="990.2" y="309" width="0.3" height="15.0" fill="rgb(253,224,50)" rx="2" ry="2" />
<text  x="993.23" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (3 samples, 0.06%)</title><rect x="108.5" y="533" width="0.7" height="15.0" fill="rgb(213,226,13)" rx="2" ry="2" />
<text  x="111.52" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="261.8" y="181" width="1.1" height="15.0" fill="rgb(240,21,38)" rx="2" ry="2" />
<text  x="264.75" y="191.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="86.7" y="613" width="0.5" height="15.0" fill="rgb(213,139,14)" rx="2" ry="2" />
<text  x="89.73" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%)</title><rect x="1166.2" y="533" width="0.2" height="15.0" fill="rgb(214,53,4)" rx="2" ry="2" />
<text  x="1169.16" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="62.4" y="277" width="0.3" height="15.0" fill="rgb(212,155,27)" rx="2" ry="2" />
<text  x="65.44" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="62.7" y="309" width="0.2" height="15.0" fill="rgb(240,35,0)" rx="2" ry="2" />
<text  x="65.67" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="375.7" y="197" width="0.5" height="15.0" fill="rgb(206,64,32)" rx="2" ry="2" />
<text  x="378.71" y="207.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (4 samples, 0.08%)</title><rect x="79.9" y="389" width="0.9" height="15.0" fill="rgb(228,132,33)" rx="2" ry="2" />
<text  x="82.92" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="84.7" y="341" width="0.4" height="15.0" fill="rgb(208,15,48)" rx="2" ry="2" />
<text  x="87.69" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (2 samples, 0.04%)</title><rect x="729.8" y="469" width="0.5" height="15.0" fill="rgb(208,133,0)" rx="2" ry="2" />
<text  x="732.85" y="479.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (2 samples, 0.04%)</title><rect x="71.3" y="389" width="0.4" height="15.0" fill="rgb(205,66,52)" rx="2" ry="2" />
<text  x="74.29" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.12%)</title><rect x="1139.8" y="517" width="1.4" height="15.0" fill="rgb(205,22,28)" rx="2" ry="2" />
<text  x="1142.83" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="213" width="0.4" height="15.0" fill="rgb(241,208,54)" rx="2" ry="2" />
<text  x="57.27" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,052 samples, 20.24%)</title><rect x="879.9" y="501" width="238.8" height="15.0" fill="rgb(218,109,33)" rx="2" ry="2" />
<text  x="882.90" y="511.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="1116.0" y="453" width="0.4" height="15.0" fill="rgb(231,80,33)" rx="2" ry="2" />
<text  x="1118.99" y="463.5" ></text>
</g>
<g >
<title>schema::~schema (1 samples, 0.02%)</title><rect x="17.9" y="245" width="0.3" height="15.0" fill="rgb(230,12,37)" rx="2" ry="2" />
<text  x="20.95" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (4 samples, 0.08%)</title><rect x="12.3" y="613" width="0.9" height="15.0" fill="rgb(205,184,20)" rx="2" ry="2" />
<text  x="15.27" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="1158.7" y="517" width="1.6" height="15.0" fill="rgb(214,121,7)" rx="2" ry="2" />
<text  x="1161.67" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="533.5" y="213" width="0.4" height="15.0" fill="rgb(254,86,1)" rx="2" ry="2" />
<text  x="536.49" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1042.9" y="341" width="0.2" height="15.0" fill="rgb(210,50,23)" rx="2" ry="2" />
<text  x="1045.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="775.3" y="389" width="0.6" height="15.0" fill="rgb(248,0,19)" rx="2" ry="2" />
<text  x="778.25" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="63.1" y="181" width="0.2" height="15.0" fill="rgb(239,20,12)" rx="2" ry="2" />
<text  x="66.12" y="191.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.4" y="277" width="0.2" height="15.0" fill="rgb(253,11,28)" rx="2" ry="2" />
<text  x="51.36" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (63 samples, 1.21%)</title><rect x="234.1" y="149" width="14.3" height="15.0" fill="rgb(211,211,35)" rx="2" ry="2" />
<text  x="237.06" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (29 samples, 0.56%)</title><rect x="192.1" y="293" width="6.5" height="15.0" fill="rgb(216,60,29)" rx="2" ry="2" />
<text  x="195.06" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="78.8" y="421" width="0.2" height="15.0" fill="rgb(224,182,53)" rx="2" ry="2" />
<text  x="81.78" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (202 samples, 3.89%)</title><rect x="23.2" y="437" width="45.8" height="15.0" fill="rgb(209,223,54)" rx="2" ry="2" />
<text  x="26.17" y="447.5" >cql3..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="36.6" y="293" width="0.4" height="15.0" fill="rgb(236,146,29)" rx="2" ry="2" />
<text  x="39.56" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="107.6" y="517" width="0.2" height="15.0" fill="rgb(246,134,10)" rx="2" ry="2" />
<text  x="110.61" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="673.1" y="501" width="0.7" height="15.0" fill="rgb(254,77,6)" rx="2" ry="2" />
<text  x="676.10" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1028.4" y="293" width="1.6" height="15.0" fill="rgb(230,39,49)" rx="2" ry="2" />
<text  x="1031.37" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (55 samples, 1.06%)</title><rect x="709.9" y="533" width="12.5" height="15.0" fill="rgb(240,156,23)" rx="2" ry="2" />
<text  x="712.87" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="760.7" y="421" width="0.3" height="15.0" fill="rgb(244,21,52)" rx="2" ry="2" />
<text  x="763.72" y="431.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (34 samples, 0.65%)</title><rect x="507.6" y="261" width="7.7" height="15.0" fill="rgb(242,32,15)" rx="2" ry="2" />
<text  x="510.61" y="271.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1131.4" y="181" width="0.3" height="15.0" fill="rgb(249,222,30)" rx="2" ry="2" />
<text  x="1134.43" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="111.7" y="485" width="0.2" height="15.0" fill="rgb(221,90,37)" rx="2" ry="2" />
<text  x="114.70" y="495.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="111.2" y="277" width="0.3" height="15.0" fill="rgb(213,110,25)" rx="2" ry="2" />
<text  x="114.25" y="287.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="50.6" y="309" width="0.5" height="15.0" fill="rgb(207,121,14)" rx="2" ry="2" />
<text  x="53.63" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (9 samples, 0.17%)</title><rect x="42.5" y="373" width="2.0" height="15.0" fill="rgb(240,190,22)" rx="2" ry="2" />
<text  x="45.46" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::expr::expression const*, cql3::expr::expression*&gt; (1 samples, 0.02%)</title><rect x="74.7" y="261" width="0.2" height="15.0" fill="rgb(240,23,40)" rx="2" ry="2" />
<text  x="77.70" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="514.2" y="229" width="0.2" height="15.0" fill="rgb(216,129,12)" rx="2" ry="2" />
<text  x="517.19" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (52 samples, 1.00%)</title><rect x="236.3" y="133" width="11.8" height="15.0" fill="rgb(220,131,26)" rx="2" ry="2" />
<text  x="239.33" y="143.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.12%)</title><rect x="1127.1" y="293" width="1.4" height="15.0" fill="rgb(236,22,52)" rx="2" ry="2" />
<text  x="1130.12" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="51.1" y="293" width="0.4" height="15.0" fill="rgb(235,213,48)" rx="2" ry="2" />
<text  x="54.09" y="303.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (2 samples, 0.04%)</title><rect x="361.6" y="213" width="0.5" height="15.0" fill="rgb(246,90,1)" rx="2" ry="2" />
<text  x="364.64" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="722.8" y="533" width="0.2" height="15.0" fill="rgb(224,37,35)" rx="2" ry="2" />
<text  x="725.81" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (3 samples, 0.06%)</title><rect x="26.6" y="261" width="0.7" height="15.0" fill="rgb(227,200,24)" rx="2" ry="2" />
<text  x="29.57" y="271.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="723.0" y="437" width="0.3" height="15.0" fill="rgb(216,223,40)" rx="2" ry="2" />
<text  x="726.04" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="868.6" y="469" width="0.2" height="15.0" fill="rgb(231,34,52)" rx="2" ry="2" />
<text  x="871.55" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="45.2" y="197" width="0.4" height="15.0" fill="rgb(206,15,48)" rx="2" ry="2" />
<text  x="48.19" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="40.6" y="245" width="0.3" height="15.0" fill="rgb(254,158,31)" rx="2" ry="2" />
<text  x="43.65" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::resize (1 samples, 0.02%)</title><rect x="82.2" y="501" width="0.2" height="15.0" fill="rgb(222,209,35)" rx="2" ry="2" />
<text  x="85.19" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="38.4" y="245" width="0.2" height="15.0" fill="rgb(227,98,40)" rx="2" ry="2" />
<text  x="41.38" y="255.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="757.1" y="293" width="0.2" height="15.0" fill="rgb(240,113,8)" rx="2" ry="2" />
<text  x="760.09" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.12%)</title><rect x="653.3" y="517" width="1.4" height="15.0" fill="rgb(252,205,48)" rx="2" ry="2" />
<text  x="656.35" y="527.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1123.3" y="165" width="0.2" height="15.0" fill="rgb(237,48,54)" rx="2" ry="2" />
<text  x="1126.26" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="18.2" y="405" width="0.2" height="15.0" fill="rgb(243,212,37)" rx="2" ry="2" />
<text  x="21.17" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (38 samples, 0.73%)</title><rect x="583.0" y="341" width="8.6" height="15.0" fill="rgb(212,128,20)" rx="2" ry="2" />
<text  x="585.97" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (441 samples, 8.48%)</title><rect x="346.2" y="309" width="100.1" height="15.0" fill="rgb(241,76,20)" rx="2" ry="2" />
<text  x="349.20" y="319.5" >flat_mutatio..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="27.7" y="245" width="0.2" height="15.0" fill="rgb(235,16,49)" rx="2" ry="2" />
<text  x="30.71" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (7 samples, 0.13%)</title><rect x="832.9" y="453" width="1.6" height="15.0" fill="rgb(229,145,7)" rx="2" ry="2" />
<text  x="835.91" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="63.8" y="389" width="0.2" height="15.0" fill="rgb(236,1,18)" rx="2" ry="2" />
<text  x="66.80" y="399.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="404.1" y="229" width="0.2" height="15.0" fill="rgb(230,23,46)" rx="2" ry="2" />
<text  x="407.09" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="78.8" y="437" width="0.2" height="15.0" fill="rgb(213,189,51)" rx="2" ry="2" />
<text  x="81.78" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (19 samples, 0.37%)</title><rect x="570.3" y="421" width="4.3" height="15.0" fill="rgb(211,179,45)" rx="2" ry="2" />
<text  x="573.26" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (176 samples, 3.39%)</title><rect x="1038.8" y="389" width="40.0" height="15.0" fill="rgb(209,91,27)" rx="2" ry="2" />
<text  x="1041.81" y="399.5" >ser..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1133.7" y="229" width="0.2" height="15.0" fill="rgb(229,228,2)" rx="2" ry="2" />
<text  x="1136.70" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1025.9" y="213" width="0.2" height="15.0" fill="rgb(220,217,21)" rx="2" ry="2" />
<text  x="1028.87" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="108.7" y="469" width="0.3" height="15.0" fill="rgb(221,179,27)" rx="2" ry="2" />
<text  x="111.75" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1129.8" y="181" width="0.3" height="15.0" fill="rgb(248,156,46)" rx="2" ry="2" />
<text  x="1132.84" y="191.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (4 samples, 0.08%)</title><rect x="1125.8" y="341" width="0.9" height="15.0" fill="rgb(245,53,27)" rx="2" ry="2" />
<text  x="1128.76" y="351.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (8 samples, 0.15%)</title><rect x="739.2" y="437" width="1.8" height="15.0" fill="rgb(232,177,34)" rx="2" ry="2" />
<text  x="742.16" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="109.9" y="421" width="0.2" height="15.0" fill="rgb(230,207,0)" rx="2" ry="2" />
<text  x="112.88" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="777.1" y="389" width="0.2" height="15.0" fill="rgb(205,97,35)" rx="2" ry="2" />
<text  x="780.07" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (1 samples, 0.02%)</title><rect x="1141.4" y="501" width="0.2" height="15.0" fill="rgb(247,18,43)" rx="2" ry="2" />
<text  x="1144.42" y="511.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (43 samples, 0.83%)</title><rect x="912.6" y="421" width="9.8" height="15.0" fill="rgb(223,136,33)" rx="2" ry="2" />
<text  x="915.59" y="431.5" ></text>
</g>
<g >
<title>__cxa_thread_atexit_impl (1 samples, 0.02%)</title><rect x="10.2" y="629" width="0.3" height="15.0" fill="rgb(237,186,51)" rx="2" ry="2" />
<text  x="13.23" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="1128.7" y="341" width="0.2" height="15.0" fill="rgb(226,80,13)" rx="2" ry="2" />
<text  x="1131.71" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="69.9" y="405" width="0.3" height="15.0" fill="rgb(252,74,26)" rx="2" ry="2" />
<text  x="72.93" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%)</title><rect x="567.3" y="389" width="2.7" height="15.0" fill="rgb(250,95,17)" rx="2" ry="2" />
<text  x="570.31" y="399.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (3 samples, 0.06%)</title><rect x="428.4" y="245" width="0.7" height="15.0" fill="rgb(205,44,54)" rx="2" ry="2" />
<text  x="431.38" y="255.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::estimated_histogram (1 samples, 0.02%)</title><rect x="83.8" y="469" width="0.2" height="15.0" fill="rgb(205,121,24)" rx="2" ry="2" />
<text  x="86.78" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (7 samples, 0.13%)</title><rect x="276.1" y="197" width="1.5" height="15.0" fill="rgb(227,108,30)" rx="2" ry="2" />
<text  x="279.06" y="207.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (11 samples, 0.21%)</title><rect x="551.9" y="341" width="2.5" height="15.0" fill="rgb(251,77,7)" rx="2" ry="2" />
<text  x="554.87" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="520.1" y="341" width="0.2" height="15.0" fill="rgb(249,178,37)" rx="2" ry="2" />
<text  x="523.09" y="351.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%)</title><rect x="54.0" y="261" width="0.7" height="15.0" fill="rgb(245,210,5)" rx="2" ry="2" />
<text  x="57.04" y="271.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (3 samples, 0.06%)</title><rect x="1076.3" y="341" width="0.6" height="15.0" fill="rgb(247,32,11)" rx="2" ry="2" />
<text  x="1079.27" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%)</title><rect x="473.1" y="325" width="0.2" height="15.0" fill="rgb(245,76,31)" rx="2" ry="2" />
<text  x="476.10" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="53.8" y="309" width="0.9" height="15.0" fill="rgb(251,45,27)" rx="2" ry="2" />
<text  x="56.81" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (6 samples, 0.12%)</title><rect x="242.5" y="101" width="1.3" height="15.0" fill="rgb(233,113,21)" rx="2" ry="2" />
<text  x="245.46" y="111.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.1" y="261" width="0.2" height="15.0" fill="rgb(208,42,35)" rx="2" ry="2" />
<text  x="44.10" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (45 samples, 0.87%)</title><rect x="96.3" y="533" width="10.2" height="15.0" fill="rgb(210,102,26)" rx="2" ry="2" />
<text  x="99.26" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="339.8" y="341" width="0.7" height="15.0" fill="rgb(236,171,42)" rx="2" ry="2" />
<text  x="342.85" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="647.7" y="517" width="0.2" height="15.0" fill="rgb(218,181,38)" rx="2" ry="2" />
<text  x="650.67" y="527.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%)</title><rect x="1120.3" y="181" width="0.2" height="15.0" fill="rgb(249,132,52)" rx="2" ry="2" />
<text  x="1123.31" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (53 samples, 1.02%)</title><rect x="662.2" y="517" width="12.0" height="15.0" fill="rgb(235,133,13)" rx="2" ry="2" />
<text  x="665.20" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1022.9" y="245" width="0.5" height="15.0" fill="rgb(205,172,32)" rx="2" ry="2" />
<text  x="1025.92" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (1 samples, 0.02%)</title><rect x="59.9" y="357" width="0.3" height="15.0" fill="rgb(248,226,21)" rx="2" ry="2" />
<text  x="62.94" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;column_definition const*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="111.0" y="309" width="0.2" height="15.0" fill="rgb(215,216,47)" rx="2" ry="2" />
<text  x="114.02" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="851.1" y="389" width="0.4" height="15.0" fill="rgb(246,77,49)" rx="2" ry="2" />
<text  x="854.07" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1150.0" y="469" width="1.2" height="15.0" fill="rgb(218,16,19)" rx="2" ry="2" />
<text  x="1153.05" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="868.3" y="453" width="0.3" height="15.0" fill="rgb(253,129,33)" rx="2" ry="2" />
<text  x="871.33" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::close (119 samples, 2.29%)</title><rect x="576.2" y="469" width="27.0" height="15.0" fill="rgb(244,36,48)" rx="2" ry="2" />
<text  x="579.16" y="479.5" >q..</text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;::pair (1 samples, 0.02%)</title><rect x="109.7" y="389" width="0.2" height="15.0" fill="rgb(237,88,52)" rx="2" ry="2" />
<text  x="112.66" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.9" y="437" width="0.3" height="15.0" fill="rgb(222,205,34)" rx="2" ry="2" />
<text  x="20.95" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="44.7" y="261" width="0.5" height="15.0" fill="rgb(230,123,21)" rx="2" ry="2" />
<text  x="47.73" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_Storage&lt;cql3::expr::expression, false&gt;::_Storage (1 samples, 0.02%)</title><rect x="64.0" y="293" width="0.3" height="15.0" fill="rgb(220,105,16)" rx="2" ry="2" />
<text  x="67.03" y="303.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,761 samples, 91.59%)</title><rect x="87.4" y="597" width="1080.8" height="15.0" fill="rgb(211,93,43)" rx="2" ry="2" />
<text  x="90.41" y="607.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="68.1" y="373" width="0.2" height="15.0" fill="rgb(227,89,27)" rx="2" ry="2" />
<text  x="71.11" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1136.9" y="533" width="0.2" height="15.0" fill="rgb(209,191,49)" rx="2" ry="2" />
<text  x="1139.88" y="543.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="533.5" y="229" width="0.4" height="15.0" fill="rgb(227,104,46)" rx="2" ry="2" />
<text  x="536.49" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.7" y="421" width="0.7" height="15.0" fill="rgb(239,18,0)" rx="2" ry="2" />
<text  x="87.69" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="44.7" y="197" width="0.5" height="15.0" fill="rgb(231,155,6)" rx="2" ry="2" />
<text  x="47.73" y="207.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="652.4" y="517" width="0.9" height="15.0" fill="rgb(238,161,14)" rx="2" ry="2" />
<text  x="655.44" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (8 samples, 0.15%)</title><rect x="866.3" y="533" width="1.8" height="15.0" fill="rgb(240,186,29)" rx="2" ry="2" />
<text  x="869.28" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="48.4" y="341" width="0.2" height="15.0" fill="rgb(224,11,24)" rx="2" ry="2" />
<text  x="51.36" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (2 samples, 0.04%)</title><rect x="49.5" y="261" width="0.5" height="15.0" fill="rgb(236,35,52)" rx="2" ry="2" />
<text  x="52.50" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="347.1" y="293" width="0.2" height="15.0" fill="rgb(216,168,22)" rx="2" ry="2" />
<text  x="350.11" y="303.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%)</title><rect x="110.8" y="341" width="0.2" height="15.0" fill="rgb(243,183,1)" rx="2" ry="2" />
<text  x="113.79" y="351.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1123.3" y="181" width="0.2" height="15.0" fill="rgb(209,183,23)" rx="2" ry="2" />
<text  x="1126.26" y="191.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="555.1" y="325" width="0.2" height="15.0" fill="rgb(244,57,13)" rx="2" ry="2" />
<text  x="558.05" y="335.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1116.9" y="469" width="0.2" height="15.0" fill="rgb(207,178,18)" rx="2" ry="2" />
<text  x="1119.90" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (18 samples, 0.35%)</title><rect x="1051.8" y="357" width="4.0" height="15.0" fill="rgb(217,166,15)" rx="2" ry="2" />
<text  x="1054.75" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="199.1" y="293" width="0.9" height="15.0" fill="rgb(249,113,42)" rx="2" ry="2" />
<text  x="202.10" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="531.0" y="245" width="0.2" height="15.0" fill="rgb(251,208,29)" rx="2" ry="2" />
<text  x="533.99" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%)</title><rect x="78.1" y="469" width="0.2" height="15.0" fill="rgb(207,211,8)" rx="2" ry="2" />
<text  x="81.10" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="109.7" y="405" width="0.2" height="15.0" fill="rgb(249,67,29)" rx="2" ry="2" />
<text  x="112.66" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="86.3" y="325" width="0.2" height="15.0" fill="rgb(241,229,22)" rx="2" ry="2" />
<text  x="89.28" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (25 samples, 0.48%)</title><rect x="264.9" y="213" width="5.7" height="15.0" fill="rgb(233,35,3)" rx="2" ry="2" />
<text  x="267.93" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="160.7" y="437" width="0.3" height="15.0" fill="rgb(239,193,6)" rx="2" ry="2" />
<text  x="163.73" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="331.2" y="437" width="0.2" height="15.0" fill="rgb(225,18,5)" rx="2" ry="2" />
<text  x="334.22" y="447.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.10%)</title><rect x="250.9" y="133" width="1.1" height="15.0" fill="rgb(251,79,15)" rx="2" ry="2" />
<text  x="253.86" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="117" width="0.2" height="15.0" fill="rgb(246,68,31)" rx="2" ry="2" />
<text  x="57.27" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="141.4" y="485" width="0.3" height="15.0" fill="rgb(238,153,28)" rx="2" ry="2" />
<text  x="144.44" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="39.3" y="293" width="0.4" height="15.0" fill="rgb(210,185,54)" rx="2" ry="2" />
<text  x="42.28" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="803.9" y="149" width="0.4" height="15.0" fill="rgb(232,18,24)" rx="2" ry="2" />
<text  x="806.86" y="159.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="689.4" y="485" width="0.3" height="15.0" fill="rgb(245,225,45)" rx="2" ry="2" />
<text  x="692.44" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1149.1" y="421" width="0.5" height="15.0" fill="rgb(219,101,16)" rx="2" ry="2" />
<text  x="1152.14" y="431.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (9 samples, 0.17%)</title><rect x="70.4" y="453" width="2.0" height="15.0" fill="rgb(240,101,19)" rx="2" ry="2" />
<text  x="73.38" y="463.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (3 samples, 0.06%)</title><rect x="1111.5" y="437" width="0.6" height="15.0" fill="rgb(227,97,4)" rx="2" ry="2" />
<text  x="1114.45" y="447.5" ></text>
</g>
<g >
<title>ser::deletable_row__deleted_at&lt;bytes_ostream&gt;::deletable_row__deleted_at (1 samples, 0.02%)</title><rect x="1130.1" y="181" width="0.2" height="15.0" fill="rgb(206,192,16)" rx="2" ry="2" />
<text  x="1133.07" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="839.3" y="469" width="0.4" height="15.0" fill="rgb(208,223,17)" rx="2" ry="2" />
<text  x="842.27" y="479.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="872.0" y="245" width="0.2" height="15.0" fill="rgb(211,219,6)" rx="2" ry="2" />
<text  x="874.96" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1042.4" y="325" width="0.5" height="15.0" fill="rgb(238,191,13)" rx="2" ry="2" />
<text  x="1045.44" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="86.0" y="405" width="0.7" height="15.0" fill="rgb(211,86,20)" rx="2" ry="2" />
<text  x="89.05" y="415.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="905.3" y="357" width="0.7" height="15.0" fill="rgb(214,158,5)" rx="2" ry="2" />
<text  x="908.33" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%)</title><rect x="889.9" y="437" width="0.9" height="15.0" fill="rgb(251,153,15)" rx="2" ry="2" />
<text  x="892.89" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (13 samples, 0.25%)</title><rect x="55.6" y="309" width="3.0" height="15.0" fill="rgb(236,93,47)" rx="2" ry="2" />
<text  x="58.63" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="449.3" y="309" width="0.4" height="15.0" fill="rgb(214,101,10)" rx="2" ry="2" />
<text  x="452.27" y="319.5" ></text>
</g>
<g >
<title>executor&lt;test_read (601 samples, 11.56%)</title><rect x="727.4" y="517" width="136.4" height="15.0" fill="rgb(217,154,16)" rx="2" ry="2" />
<text  x="730.35" y="527.5" >executor&lt;test_read</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (3 samples, 0.06%)</title><rect x="862.4" y="469" width="0.7" height="15.0" fill="rgb(205,204,24)" rx="2" ry="2" />
<text  x="865.42" y="479.5" ></text>
</g>
<g >
<title>utils::murmur_hash::read_block&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1120.1" y="213" width="0.2" height="15.0" fill="rgb(241,45,45)" rx="2" ry="2" />
<text  x="1123.08" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="217.5" y="213" width="0.2" height="15.0" fill="rgb(238,67,30)" rx="2" ry="2" />
<text  x="220.49" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="516.5" y="357" width="0.2" height="15.0" fill="rgb(235,79,47)" rx="2" ry="2" />
<text  x="519.46" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="63.1" y="117" width="0.2" height="15.0" fill="rgb(241,48,1)" rx="2" ry="2" />
<text  x="66.12" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="483.3" y="293" width="0.7" height="15.0" fill="rgb(215,62,7)" rx="2" ry="2" />
<text  x="486.32" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints (1 samples, 0.02%)</title><rect x="1126.9" y="293" width="0.2" height="15.0" fill="rgb(254,87,36)" rx="2" ry="2" />
<text  x="1129.89" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (32 samples, 0.62%)</title><rect x="1126.7" y="517" width="7.2" height="15.0" fill="rgb(232,36,34)" rx="2" ry="2" />
<text  x="1129.66" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="666.1" y="421" width="0.2" height="15.0" fill="rgb(251,190,44)" rx="2" ry="2" />
<text  x="669.06" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="837.0" y="437" width="0.2" height="15.0" fill="rgb(252,225,29)" rx="2" ry="2" />
<text  x="840.00" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.5" y="181" width="0.5" height="15.0" fill="rgb(212,98,42)" rx="2" ry="2" />
<text  x="59.54" y="191.5" ></text>
</g>
<g >
<title>table::make_reader (441 samples, 8.48%)</title><rect x="462.4" y="389" width="100.1" height="15.0" fill="rgb(241,31,50)" rx="2" ry="2" />
<text  x="465.43" y="399.5" >table::make_..</text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="340.5" y="341" width="0.3" height="15.0" fill="rgb(237,216,10)" rx="2" ry="2" />
<text  x="343.53" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="86.7" y="629" width="0.5" height="15.0" fill="rgb(236,21,25)" rx="2" ry="2" />
<text  x="89.73" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (8 samples, 0.15%)</title><rect x="356.6" y="213" width="1.9" height="15.0" fill="rgb(219,162,54)" rx="2" ry="2" />
<text  x="359.64" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.7" y="197" width="0.2" height="15.0" fill="rgb(206,86,5)" rx="2" ry="2" />
<text  x="28.66" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="41.8" y="261" width="0.2" height="15.0" fill="rgb(237,34,0)" rx="2" ry="2" />
<text  x="44.78" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="310.6" y="341" width="0.4" height="15.0" fill="rgb(209,170,26)" rx="2" ry="2" />
<text  x="313.56" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1121.4" y="245" width="0.3" height="15.0" fill="rgb(229,43,2)" rx="2" ry="2" />
<text  x="1124.44" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="56.5" y="229" width="0.5" height="15.0" fill="rgb(219,79,19)" rx="2" ry="2" />
<text  x="59.54" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;cql3::column_specification&gt;::dispose (1 samples, 0.02%)</title><rect x="17.9" y="213" width="0.3" height="15.0" fill="rgb(234,145,32)" rx="2" ry="2" />
<text  x="20.95" y="223.5" ></text>
</g>
<g >
<title>database::do_apply (34 samples, 0.65%)</title><rect x="1118.9" y="373" width="7.8" height="15.0" fill="rgb(247,178,26)" rx="2" ry="2" />
<text  x="1121.95" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (7 samples, 0.13%)</title><rect x="1152.1" y="485" width="1.6" height="15.0" fill="rgb(232,34,44)" rx="2" ry="2" />
<text  x="1155.09" y="495.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%)</title><rect x="688.8" y="501" width="0.4" height="15.0" fill="rgb(209,153,10)" rx="2" ry="2" />
<text  x="691.76" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="77.4" y="453" width="0.2" height="15.0" fill="rgb(234,186,9)" rx="2" ry="2" />
<text  x="80.42" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.12%)</title><rect x="48.8" y="341" width="1.4" height="15.0" fill="rgb(219,151,43)" rx="2" ry="2" />
<text  x="51.82" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="248.1" y="133" width="0.3" height="15.0" fill="rgb(254,39,53)" rx="2" ry="2" />
<text  x="251.13" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1113.5" y="437" width="0.2" height="15.0" fill="rgb(223,195,3)" rx="2" ry="2" />
<text  x="1116.50" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.5" y="549" width="0.2" height="15.0" fill="rgb(231,145,34)" rx="2" ry="2" />
<text  x="20.49" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (126 samples, 2.42%)</title><rect x="1002.7" y="309" width="28.6" height="15.0" fill="rgb(223,199,0)" rx="2" ry="2" />
<text  x="1005.72" y="319.5" >se..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1074.7" y="309" width="0.4" height="15.0" fill="rgb(239,119,27)" rx="2" ry="2" />
<text  x="1077.68" y="319.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (16 samples, 0.31%)</title><rect x="1017.9" y="229" width="3.7" height="15.0" fill="rgb(250,70,3)" rx="2" ry="2" />
<text  x="1020.93" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="633.1" y="469" width="0.3" height="15.0" fill="rgb(227,157,5)" rx="2" ry="2" />
<text  x="636.14" y="479.5" ></text>
</g>
<g >
<title>table::as_mutation_source (14 samples, 0.27%)</title><rect x="635.9" y="469" width="3.1" height="15.0" fill="rgb(205,158,50)" rx="2" ry="2" />
<text  x="638.87" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="650.6" y="501" width="1.2" height="15.0" fill="rgb(251,167,22)" rx="2" ry="2" />
<text  x="653.62" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="269.5" y="181" width="0.2" height="15.0" fill="rgb(233,151,36)" rx="2" ry="2" />
<text  x="272.47" y="191.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="696.7" y="453" width="0.2" height="15.0" fill="rgb(231,78,44)" rx="2" ry="2" />
<text  x="699.71" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.21%)</title><rect x="588.2" y="325" width="2.5" height="15.0" fill="rgb(211,0,12)" rx="2" ry="2" />
<text  x="591.20" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.63%)</title><rect x="799.1" y="229" width="7.5" height="15.0" fill="rgb(244,207,34)" rx="2" ry="2" />
<text  x="802.09" y="239.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.23%)</title><rect x="84.0" y="629" width="2.7" height="15.0" fill="rgb(227,139,25)" rx="2" ry="2" />
<text  x="87.01" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (8 samples, 0.15%)</title><rect x="796.8" y="245" width="1.8" height="15.0" fill="rgb(248,97,11)" rx="2" ry="2" />
<text  x="799.82" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (177 samples, 3.41%)</title><rect x="997.3" y="325" width="40.1" height="15.0" fill="rgb(214,122,48)" rx="2" ry="2" />
<text  x="1000.27" y="335.5" >ser..</text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="216.8" y="229" width="0.2" height="15.0" fill="rgb(221,99,18)" rx="2" ry="2" />
<text  x="219.81" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (2 samples, 0.04%)</title><rect x="887.6" y="453" width="0.5" height="15.0" fill="rgb(218,28,6)" rx="2" ry="2" />
<text  x="890.62" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="440.9" y="229" width="0.2" height="15.0" fill="rgb(230,111,41)" rx="2" ry="2" />
<text  x="443.87" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (33 samples, 0.63%)</title><rect x="852.2" y="485" width="7.5" height="15.0" fill="rgb(245,219,54)" rx="2" ry="2" />
<text  x="855.21" y="495.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;int&gt; &gt; (1 samples, 0.02%)</title><rect x="696.9" y="453" width="0.3" height="15.0" fill="rgb(254,95,50)" rx="2" ry="2" />
<text  x="699.93" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="725.8" y="533" width="0.2" height="15.0" fill="rgb(216,220,16)" rx="2" ry="2" />
<text  x="728.76" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%)</title><rect x="46.5" y="293" width="1.9" height="15.0" fill="rgb(237,7,39)" rx="2" ry="2" />
<text  x="49.55" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="704.4" y="469" width="0.9" height="15.0" fill="rgb(238,3,45)" rx="2" ry="2" />
<text  x="707.42" y="479.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%)</title><rect x="111.0" y="341" width="0.2" height="15.0" fill="rgb(208,69,53)" rx="2" ry="2" />
<text  x="114.02" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="72.9" y="421" width="0.2" height="15.0" fill="rgb(225,98,43)" rx="2" ry="2" />
<text  x="75.88" y="431.5" ></text>
</g>
<g >
<title>_start (8 samples, 0.15%)</title><rect x="1168.9" y="661" width="1.8" height="15.0" fill="rgb(251,50,51)" rx="2" ry="2" />
<text  x="1171.89" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="48.6" y="245" width="0.2" height="15.0" fill="rgb(214,73,8)" rx="2" ry="2" />
<text  x="51.59" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="129.2" y="453" width="0.2" height="15.0" fill="rgb(238,17,24)" rx="2" ry="2" />
<text  x="132.18" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="163.0" y="453" width="0.2" height="15.0" fill="rgb(236,91,30)" rx="2" ry="2" />
<text  x="166.01" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (5 samples, 0.10%)</title><rect x="842.9" y="389" width="1.1" height="15.0" fill="rgb(237,90,7)" rx="2" ry="2" />
<text  x="845.90" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="228.4" y="165" width="0.2" height="15.0" fill="rgb(253,123,16)" rx="2" ry="2" />
<text  x="231.38" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (1 samples, 0.02%)</title><rect x="69.7" y="469" width="0.2" height="15.0" fill="rgb(233,37,38)" rx="2" ry="2" />
<text  x="72.70" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (49 samples, 0.94%)</title><rect x="208.0" y="277" width="11.1" height="15.0" fill="rgb(252,220,29)" rx="2" ry="2" />
<text  x="210.95" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (591 samples, 11.37%)</title><rect x="952.3" y="437" width="134.2" height="15.0" fill="rgb(226,82,38)" rx="2" ry="2" />
<text  x="955.32" y="447.5" >service::storage..</text>
</g>
<g >
<title>tracing::add_table_name (3 samples, 0.06%)</title><rect x="1113.7" y="453" width="0.7" height="15.0" fill="rgb(215,211,24)" rx="2" ry="2" />
<text  x="1116.72" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="723.0" y="197" width="0.3" height="15.0" fill="rgb(235,20,20)" rx="2" ry="2" />
<text  x="726.04" y="207.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%)</title><rect x="613.2" y="437" width="0.4" height="15.0" fill="rgb(222,211,32)" rx="2" ry="2" />
<text  x="616.17" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1118.5" y="469" width="0.2" height="15.0" fill="rgb(238,118,19)" rx="2" ry="2" />
<text  x="1121.49" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="806.4" y="133" width="0.2" height="15.0" fill="rgb(250,209,15)" rx="2" ry="2" />
<text  x="809.35" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%)</title><rect x="667.0" y="469" width="0.4" height="15.0" fill="rgb(253,37,34)" rx="2" ry="2" />
<text  x="669.97" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="927.8" y="357" width="0.9" height="15.0" fill="rgb(239,219,8)" rx="2" ry="2" />
<text  x="930.80" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (9 samples, 0.17%)</title><rect x="659.5" y="501" width="2.0" height="15.0" fill="rgb(209,21,20)" rx="2" ry="2" />
<text  x="662.48" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1113.3" y="453" width="0.4" height="15.0" fill="rgb(216,202,4)" rx="2" ry="2" />
<text  x="1116.27" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_view_statement*, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.1" y="389" width="0.2" height="15.0" fill="rgb(219,55,0)" rx="2" ry="2" />
<text  x="69.07" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="932.1" y="437" width="0.5" height="15.0" fill="rgb(224,62,19)" rx="2" ry="2" />
<text  x="935.12" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1133.7" y="245" width="0.2" height="15.0" fill="rgb(220,54,18)" rx="2" ry="2" />
<text  x="1136.70" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="201.4" y="293" width="0.2" height="15.0" fill="rgb(235,157,41)" rx="2" ry="2" />
<text  x="204.37" y="303.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%)</title><rect x="364.1" y="245" width="0.3" height="15.0" fill="rgb(225,95,7)" rx="2" ry="2" />
<text  x="367.14" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="830.9" y="341" width="0.7" height="15.0" fill="rgb(251,220,50)" rx="2" ry="2" />
<text  x="833.87" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1084.7" y="421" width="0.2" height="15.0" fill="rgb(208,147,20)" rx="2" ry="2" />
<text  x="1087.67" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.12%)</title><rect x="1059.7" y="277" width="1.4" height="15.0" fill="rgb(234,208,16)" rx="2" ry="2" />
<text  x="1062.70" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="141.7" y="485" width="0.2" height="15.0" fill="rgb(211,59,8)" rx="2" ry="2" />
<text  x="144.67" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.23%)</title><rect x="443.6" y="293" width="2.7" height="15.0" fill="rgb(223,158,28)" rx="2" ry="2" />
<text  x="446.59" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%)</title><rect x="373.2" y="181" width="0.5" height="15.0" fill="rgb(219,130,32)" rx="2" ry="2" />
<text  x="376.22" y="191.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1119.6" y="261" width="0.3" height="15.0" fill="rgb(243,97,48)" rx="2" ry="2" />
<text  x="1122.63" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (2 samples, 0.04%)</title><rect x="121.5" y="501" width="0.4" height="15.0" fill="rgb(236,148,41)" rx="2" ry="2" />
<text  x="124.46" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%)</title><rect x="110.3" y="453" width="0.5" height="15.0" fill="rgb(252,117,14)" rx="2" ry="2" />
<text  x="113.34" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="637.9" y="405" width="0.7" height="15.0" fill="rgb(207,92,34)" rx="2" ry="2" />
<text  x="640.91" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="67.0" y="389" width="0.2" height="15.0" fill="rgb(233,8,35)" rx="2" ry="2" />
<text  x="69.98" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.9" y="149" width="0.2" height="15.0" fill="rgb(225,151,38)" rx="2" ry="2" />
<text  x="60.90" y="159.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (37 samples, 0.71%)</title><rect x="130.5" y="469" width="8.4" height="15.0" fill="rgb(215,161,44)" rx="2" ry="2" />
<text  x="133.54" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%)</title><rect x="182.5" y="341" width="0.7" height="15.0" fill="rgb(254,175,47)" rx="2" ry="2" />
<text  x="185.53" y="351.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (7 samples, 0.13%)</title><rect x="800.2" y="181" width="1.6" height="15.0" fill="rgb(211,190,23)" rx="2" ry="2" />
<text  x="803.22" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="588.0" y="309" width="0.2" height="15.0" fill="rgb(207,70,11)" rx="2" ry="2" />
<text  x="590.97" y="319.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (1 samples, 0.02%)</title><rect x="718.5" y="453" width="0.2" height="15.0" fill="rgb(224,4,32)" rx="2" ry="2" />
<text  x="721.50" y="463.5" ></text>
</g>
<g >
<title>schema_registry::get (26 samples, 0.50%)</title><rect x="968.9" y="389" width="5.9" height="15.0" fill="rgb(225,28,41)" rx="2" ry="2" />
<text  x="971.89" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (2 samples, 0.04%)</title><rect x="1017.5" y="229" width="0.4" height="15.0" fill="rgb(220,43,41)" rx="2" ry="2" />
<text  x="1020.47" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1086.3" y="389" width="0.2" height="15.0" fill="rgb(220,89,13)" rx="2" ry="2" />
<text  x="1089.26" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="674.7" y="517" width="0.7" height="15.0" fill="rgb(228,56,35)" rx="2" ry="2" />
<text  x="677.69" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1159.6" y="501" width="0.7" height="15.0" fill="rgb(208,149,37)" rx="2" ry="2" />
<text  x="1162.58" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%)</title><rect x="546.7" y="357" width="0.6" height="15.0" fill="rgb(240,157,54)" rx="2" ry="2" />
<text  x="549.65" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="782.3" y="373" width="0.2" height="15.0" fill="rgb(249,208,7)" rx="2" ry="2" />
<text  x="785.29" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1128.3" y="165" width="0.2" height="15.0" fill="rgb(232,152,12)" rx="2" ry="2" />
<text  x="1131.25" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.3" y="69" width="0.2" height="15.0" fill="rgb(206,148,51)" rx="2" ry="2" />
<text  x="57.27" y="79.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="872.9" y="277" width="0.6" height="15.0" fill="rgb(247,104,28)" rx="2" ry="2" />
<text  x="875.87" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (3 samples, 0.06%)</title><rect x="596.6" y="389" width="0.7" height="15.0" fill="rgb(241,147,27)" rx="2" ry="2" />
<text  x="599.59" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="50.2" y="213" width="0.2" height="15.0" fill="rgb(226,206,34)" rx="2" ry="2" />
<text  x="53.18" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1165.5" y="485" width="0.2" height="15.0" fill="rgb(220,122,22)" rx="2" ry="2" />
<text  x="1168.48" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%)</title><rect x="1006.6" y="277" width="1.1" height="15.0" fill="rgb(233,158,30)" rx="2" ry="2" />
<text  x="1009.58" y="287.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%)</title><rect x="486.7" y="373" width="0.2" height="15.0" fill="rgb(219,57,39)" rx="2" ry="2" />
<text  x="489.72" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%)</title><rect x="644.7" y="501" width="0.5" height="15.0" fill="rgb(225,212,7)" rx="2" ry="2" />
<text  x="647.72" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%)</title><rect x="817.9" y="373" width="0.9" height="15.0" fill="rgb(210,176,2)" rx="2" ry="2" />
<text  x="820.93" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="17.5" y="501" width="0.2" height="15.0" fill="rgb(250,176,23)" rx="2" ry="2" />
<text  x="20.49" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="229" width="0.4" height="15.0" fill="rgb(250,77,26)" rx="2" ry="2" />
<text  x="57.27" y="239.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%)</title><rect x="1143.9" y="517" width="0.2" height="15.0" fill="rgb(224,132,4)" rx="2" ry="2" />
<text  x="1146.92" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="605.7" y="453" width="0.2" height="15.0" fill="rgb(241,83,35)" rx="2" ry="2" />
<text  x="608.68" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="710.3" y="517" width="0.3" height="15.0" fill="rgb(210,19,13)" rx="2" ry="2" />
<text  x="713.33" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (4 samples, 0.08%)</title><rect x="709.0" y="501" width="0.9" height="15.0" fill="rgb(233,25,22)" rx="2" ry="2" />
<text  x="711.96" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="44.7" y="213" width="0.5" height="15.0" fill="rgb(245,117,10)" rx="2" ry="2" />
<text  x="47.73" y="223.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="53.8" y="293" width="0.9" height="15.0" fill="rgb(218,144,54)" rx="2" ry="2" />
<text  x="56.81" y="303.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%)</title><rect x="22.3" y="453" width="0.2" height="15.0" fill="rgb(246,174,27)" rx="2" ry="2" />
<text  x="25.26" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (4 samples, 0.08%)</title><rect x="846.5" y="453" width="0.9" height="15.0" fill="rgb(244,93,17)" rx="2" ry="2" />
<text  x="849.53" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (28 samples, 0.54%)</title><rect x="869.2" y="517" width="6.4" height="15.0" fill="rgb(225,163,22)" rx="2" ry="2" />
<text  x="872.23" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="594.1" y="357" width="0.2" height="15.0" fill="rgb(249,146,34)" rx="2" ry="2" />
<text  x="597.10" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;partition_snapshot_row_cursor::position_in_version, 2ul&gt;::emplace_back&lt;partition_snapshot_row_cursor::position_in_version const&amp;&gt; (1 samples, 0.02%)</title><rect x="17.7" y="565" width="0.2" height="15.0" fill="rgb(235,143,43)" rx="2" ry="2" />
<text  x="20.72" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (18 samples, 0.35%)</title><rect x="481.0" y="309" width="4.1" height="15.0" fill="rgb(235,38,54)" rx="2" ry="2" />
<text  x="484.05" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="1073.8" y="277" width="0.7" height="15.0" fill="rgb(241,69,1)" rx="2" ry="2" />
<text  x="1076.77" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="695.3" y="517" width="0.5" height="15.0" fill="rgb(213,3,19)" rx="2" ry="2" />
<text  x="698.34" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="110.8" y="437" width="0.4" height="15.0" fill="rgb(230,42,27)" rx="2" ry="2" />
<text  x="113.79" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="18.2" y="517" width="0.4" height="15.0" fill="rgb(249,107,18)" rx="2" ry="2" />
<text  x="21.17" y="527.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (2 samples, 0.04%)</title><rect x="537.1" y="277" width="0.5" height="15.0" fill="rgb(225,136,29)" rx="2" ry="2" />
<text  x="540.12" y="287.5" ></text>
</g>
<g >
<title>partition_entry::evict (2 samples, 0.04%)</title><rect x="86.7" y="565" width="0.5" height="15.0" fill="rgb(244,176,16)" rx="2" ry="2" />
<text  x="89.73" y="575.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="935.5" y="437" width="0.2" height="15.0" fill="rgb(216,21,25)" rx="2" ry="2" />
<text  x="938.52" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (27 samples, 0.52%)</title><rect x="869.5" y="485" width="6.1" height="15.0" fill="rgb(222,80,48)" rx="2" ry="2" />
<text  x="872.46" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1079.0" y="389" width="0.4" height="15.0" fill="rgb(207,67,46)" rx="2" ry="2" />
<text  x="1081.99" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="694.4" y="517" width="0.3" height="15.0" fill="rgb(234,179,29)" rx="2" ry="2" />
<text  x="697.44" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="1146.0" y="485" width="0.6" height="15.0" fill="rgb(239,11,29)" rx="2" ry="2" />
<text  x="1148.96" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (1 samples, 0.02%)</title><rect x="184.6" y="325" width="0.2" height="15.0" fill="rgb(207,135,27)" rx="2" ry="2" />
<text  x="187.57" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="294.2" y="261" width="0.5" height="15.0" fill="rgb(239,124,54)" rx="2" ry="2" />
<text  x="297.22" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%)</title><rect x="1020.4" y="181" width="0.5" height="15.0" fill="rgb(210,83,20)" rx="2" ry="2" />
<text  x="1023.42" y="191.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_large_cells (1 samples, 0.02%)</title><rect x="86.3" y="357" width="0.2" height="15.0" fill="rgb(233,207,40)" rx="2" ry="2" />
<text  x="89.28" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="1126.9" y="325" width="1.8" height="15.0" fill="rgb(227,112,29)" rx="2" ry="2" />
<text  x="1129.89" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (18 samples, 0.35%)</title><rect x="244.0" y="101" width="4.1" height="15.0" fill="rgb(205,141,32)" rx="2" ry="2" />
<text  x="247.05" y="111.5" ></text>
</g>
<g >
<title>sstables::write&lt;unsigned int, unsigned long&gt; (1 samples, 0.02%)</title><rect x="16.4" y="469" width="0.2" height="15.0" fill="rgb(246,111,24)" rx="2" ry="2" />
<text  x="19.36" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="22.0" y="437" width="0.3" height="15.0" fill="rgb(222,189,9)" rx="2" ry="2" />
<text  x="25.03" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::operation::raw_update*, false&gt;::_Head_base&lt;cql3::operation::raw_update*&gt; (1 samples, 0.02%)</title><rect x="49.5" y="165" width="0.2" height="15.0" fill="rgb(248,190,8)" rx="2" ry="2" />
<text  x="52.50" y="175.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (10 samples, 0.19%)</title><rect x="1018.6" y="197" width="2.3" height="15.0" fill="rgb(227,61,46)" rx="2" ry="2" />
<text  x="1021.61" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="785.2" y="325" width="0.7" height="15.0" fill="rgb(211,28,21)" rx="2" ry="2" />
<text  x="788.24" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="72.7" y="437" width="0.2" height="15.0" fill="rgb(216,117,48)" rx="2" ry="2" />
<text  x="75.65" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="666.5" y="421" width="0.2" height="15.0" fill="rgb(223,184,44)" rx="2" ry="2" />
<text  x="669.51" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="723.0" y="181" width="0.3" height="15.0" fill="rgb(207,48,23)" rx="2" ry="2" />
<text  x="726.04" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (27 samples, 0.52%)</title><rect x="869.5" y="453" width="6.1" height="15.0" fill="rgb(247,16,37)" rx="2" ry="2" />
<text  x="872.46" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="71.7" y="389" width="0.3" height="15.0" fill="rgb(253,145,7)" rx="2" ry="2" />
<text  x="74.75" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="821.1" y="389" width="0.2" height="15.0" fill="rgb(252,135,43)" rx="2" ry="2" />
<text  x="824.11" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="61.8" y="261" width="0.4" height="15.0" fill="rgb(235,33,19)" rx="2" ry="2" />
<text  x="64.76" y="271.5" ></text>
</g>
<g >
<title>row::compact_and_expire (88 samples, 1.69%)</title><rect x="408.4" y="245" width="20.0" height="15.0" fill="rgb(244,142,5)" rx="2" ry="2" />
<text  x="411.40" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="208.6" y="229" width="0.3" height="15.0" fill="rgb(227,124,34)" rx="2" ry="2" />
<text  x="211.63" y="239.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (1 samples, 0.02%)</title><rect x="73.1" y="405" width="0.2" height="15.0" fill="rgb(252,30,12)" rx="2" ry="2" />
<text  x="76.11" y="415.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="69.9" y="453" width="0.3" height="15.0" fill="rgb(215,13,53)" rx="2" ry="2" />
<text  x="72.93" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (4 samples, 0.08%)</title><rect x="20.2" y="517" width="0.9" height="15.0" fill="rgb(234,70,15)" rx="2" ry="2" />
<text  x="23.22" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (52 samples, 1.00%)</title><rect x="282.4" y="261" width="11.8" height="15.0" fill="rgb(213,54,42)" rx="2" ry="2" />
<text  x="285.41" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="940.5" y="373" width="0.2" height="15.0" fill="rgb(241,91,10)" rx="2" ry="2" />
<text  x="943.52" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%)</title><rect x="717.1" y="437" width="0.5" height="15.0" fill="rgb(222,196,26)" rx="2" ry="2" />
<text  x="720.14" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="85.1" y="389" width="0.3" height="15.0" fill="rgb(223,117,46)" rx="2" ry="2" />
<text  x="88.14" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="110.1" y="469" width="0.2" height="15.0" fill="rgb(207,92,35)" rx="2" ry="2" />
<text  x="113.11" y="479.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (29 samples, 0.56%)</title><rect x="1119.2" y="341" width="6.6" height="15.0" fill="rgb(217,183,18)" rx="2" ry="2" />
<text  x="1122.17" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.9" y="389" width="0.3" height="15.0" fill="rgb(212,108,46)" rx="2" ry="2" />
<text  x="20.95" y="399.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1106.5" y="437" width="0.9" height="15.0" fill="rgb(208,73,26)" rx="2" ry="2" />
<text  x="1109.46" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="129.4" y="453" width="0.2" height="15.0" fill="rgb(248,161,47)" rx="2" ry="2" />
<text  x="132.41" y="463.5" ></text>
</g>
<g >
<title>query::result_set_row::get&lt;double&gt; (1 samples, 0.02%)</title><rect x="108.7" y="421" width="0.3" height="15.0" fill="rgb(205,110,48)" rx="2" ry="2" />
<text  x="111.75" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="22.0" y="405" width="0.3" height="15.0" fill="rgb(239,90,37)" rx="2" ry="2" />
<text  x="25.03" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (29 samples, 0.56%)</title><rect x="1126.9" y="357" width="6.6" height="15.0" fill="rgb(228,41,21)" rx="2" ry="2" />
<text  x="1129.89" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="16.8" y="549" width="0.2" height="15.0" fill="rgb(234,204,51)" rx="2" ry="2" />
<text  x="19.81" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="85.1" y="373" width="0.3" height="15.0" fill="rgb(231,164,26)" rx="2" ry="2" />
<text  x="88.14" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1103.5" y="437" width="0.2" height="15.0" fill="rgb(229,134,38)" rx="2" ry="2" />
<text  x="1106.51" y="447.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="25.9" y="197" width="0.2" height="15.0" fill="rgb(230,93,45)" rx="2" ry="2" />
<text  x="28.89" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="26.6" y="245" width="0.4" height="15.0" fill="rgb(231,98,41)" rx="2" ry="2" />
<text  x="29.57" y="255.5" ></text>
</g>
<g >
<title>schema_registry::learn (6 samples, 0.12%)</title><rect x="110.3" y="501" width="1.4" height="15.0" fill="rgb(236,119,50)" rx="2" ry="2" />
<text  x="113.34" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.17%)</title><rect x="234.3" y="133" width="2.0" height="15.0" fill="rgb(226,122,20)" rx="2" ry="2" />
<text  x="237.29" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="347.3" y="293" width="0.9" height="15.0" fill="rgb(246,9,28)" rx="2" ry="2" />
<text  x="350.34" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.8" y="181" width="0.2" height="15.0" fill="rgb(237,2,16)" rx="2" ry="2" />
<text  x="44.78" y="191.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="110.3" y="421" width="0.5" height="15.0" fill="rgb(247,209,50)" rx="2" ry="2" />
<text  x="113.34" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.10%)</title><rect x="1100.3" y="437" width="1.2" height="15.0" fill="rgb(207,201,54)" rx="2" ry="2" />
<text  x="1103.33" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="560.3" y="373" width="0.2" height="15.0" fill="rgb(249,203,40)" rx="2" ry="2" />
<text  x="563.27" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="328.0" y="357" width="0.3" height="15.0" fill="rgb(207,211,2)" rx="2" ry="2" />
<text  x="331.04" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1081.3" y="389" width="0.4" height="15.0" fill="rgb(250,26,34)" rx="2" ry="2" />
<text  x="1084.26" y="399.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="22.3" y="421" width="0.2" height="15.0" fill="rgb(211,83,4)" rx="2" ry="2" />
<text  x="25.26" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="820.4" y="389" width="0.3" height="15.0" fill="rgb(209,24,37)" rx="2" ry="2" />
<text  x="823.43" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.6" y="277" width="0.5" height="15.0" fill="rgb(208,124,24)" rx="2" ry="2" />
<text  x="53.63" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (75 samples, 1.44%)</title><rect x="411.4" y="213" width="17.0" height="15.0" fill="rgb(250,176,15)" rx="2" ry="2" />
<text  x="414.35" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="829.1" y="357" width="2.5" height="15.0" fill="rgb(241,99,14)" rx="2" ry="2" />
<text  x="832.05" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (3 samples, 0.06%)</title><rect x="57.0" y="85" width="0.7" height="15.0" fill="rgb(234,101,39)" rx="2" ry="2" />
<text  x="59.99" y="95.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="1044.9" y="309" width="0.7" height="15.0" fill="rgb(224,12,26)" rx="2" ry="2" />
<text  x="1047.94" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="40.9" y="357" width="0.4" height="15.0" fill="rgb(219,2,25)" rx="2" ry="2" />
<text  x="43.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="902.6" y="357" width="0.5" height="15.0" fill="rgb(253,201,20)" rx="2" ry="2" />
<text  x="905.60" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (2 samples, 0.04%)</title><rect x="818.8" y="357" width="0.5" height="15.0" fill="rgb(235,143,22)" rx="2" ry="2" />
<text  x="821.84" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="109.2" y="437" width="0.2" height="15.0" fill="rgb(211,74,16)" rx="2" ry="2" />
<text  x="112.20" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1031.3" y="309" width="0.2" height="15.0" fill="rgb(233,48,41)" rx="2" ry="2" />
<text  x="1034.32" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%)</title><rect x="696.7" y="405" width="0.2" height="15.0" fill="rgb(252,111,20)" rx="2" ry="2" />
<text  x="699.71" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.7" y="453" width="0.7" height="15.0" fill="rgb(246,17,23)" rx="2" ry="2" />
<text  x="87.69" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1098.7" y="357" width="0.3" height="15.0" fill="rgb(228,28,27)" rx="2" ry="2" />
<text  x="1101.74" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="934.4" y="421" width="0.4" height="15.0" fill="rgb(220,145,12)" rx="2" ry="2" />
<text  x="937.39" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="59.3" y="309" width="0.2" height="15.0" fill="rgb(241,87,4)" rx="2" ry="2" />
<text  x="62.26" y="319.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="124.9" y="485" width="1.1" height="15.0" fill="rgb(241,210,12)" rx="2" ry="2" />
<text  x="127.87" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (63 samples, 1.21%)</title><rect x="24.5" y="389" width="14.3" height="15.0" fill="rgb(215,65,54)" rx="2" ry="2" />
<text  x="27.53" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="660.6" y="341" width="0.5" height="15.0" fill="rgb(253,158,36)" rx="2" ry="2" />
<text  x="663.61" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (27 samples, 0.52%)</title><rect x="869.5" y="501" width="6.1" height="15.0" fill="rgb(241,202,30)" rx="2" ry="2" />
<text  x="872.46" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="39.7" y="325" width="0.7" height="15.0" fill="rgb(231,64,44)" rx="2" ry="2" />
<text  x="42.74" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (12 samples, 0.23%)</title><rect x="350.3" y="277" width="2.7" height="15.0" fill="rgb(227,217,51)" rx="2" ry="2" />
<text  x="353.29" y="287.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="1165.3" y="533" width="0.2" height="15.0" fill="rgb(238,136,50)" rx="2" ry="2" />
<text  x="1168.26" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1133.7" y="309" width="0.2" height="15.0" fill="rgb(250,208,0)" rx="2" ry="2" />
<text  x="1136.70" y="319.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (6 samples, 0.12%)</title><rect x="79.5" y="501" width="1.3" height="15.0" fill="rgb(228,122,40)" rx="2" ry="2" />
<text  x="82.47" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (514 samples, 9.89%)</title><rect x="335.8" y="405" width="116.6" height="15.0" fill="rgb(228,46,30)" rx="2" ry="2" />
<text  x="338.76" y="415.5" >flat_mutation_..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::drop_type_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="66.8" y="325" width="0.2" height="15.0" fill="rgb(231,51,32)" rx="2" ry="2" />
<text  x="69.75" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="636.5" y="405" width="0.7" height="15.0" fill="rgb(247,32,18)" rx="2" ry="2" />
<text  x="639.55" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="1130.5" y="149" width="0.5" height="15.0" fill="rgb(218,168,3)" rx="2" ry="2" />
<text  x="1133.52" y="159.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="290.6" y="213" width="0.4" height="15.0" fill="rgb(246,122,24)" rx="2" ry="2" />
<text  x="293.58" y="223.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (164 samples, 3.16%)</title><rect x="780.5" y="389" width="37.2" height="15.0" fill="rgb(215,129,5)" rx="2" ry="2" />
<text  x="783.47" y="399.5" >ser..</text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="558.0" y="277" width="0.5" height="15.0" fill="rgb(226,196,19)" rx="2" ry="2" />
<text  x="561.00" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="607.3" y="421" width="0.2" height="15.0" fill="rgb(240,88,13)" rx="2" ry="2" />
<text  x="610.26" y="431.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%)</title><rect x="86.5" y="341" width="0.2" height="15.0" fill="rgb(250,37,4)" rx="2" ry="2" />
<text  x="89.50" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="78.6" y="469" width="0.2" height="15.0" fill="rgb(253,151,12)" rx="2" ry="2" />
<text  x="81.56" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="363.2" y="197" width="0.5" height="15.0" fill="rgb(216,12,11)" rx="2" ry="2" />
<text  x="366.23" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (3 samples, 0.06%)</title><rect x="33.6" y="293" width="0.7" height="15.0" fill="rgb(217,39,10)" rx="2" ry="2" />
<text  x="36.61" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (3 samples, 0.06%)</title><rect x="936.2" y="421" width="0.7" height="15.0" fill="rgb(205,111,20)" rx="2" ry="2" />
<text  x="939.20" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.9" y="405" width="0.2" height="15.0" fill="rgb(245,138,17)" rx="2" ry="2" />
<text  x="70.89" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%)</title><rect x="620.7" y="469" width="0.4" height="15.0" fill="rgb(219,167,13)" rx="2" ry="2" />
<text  x="623.66" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.1" y="213" width="0.2" height="15.0" fill="rgb(246,38,35)" rx="2" ry="2" />
<text  x="66.12" y="223.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1180.7" y="661" width="0.2" height="15.0" fill="rgb(232,32,27)" rx="2" ry="2" />
<text  x="1183.69" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+= (1 samples, 0.02%)</title><rect x="82.2" y="485" width="0.2" height="15.0" fill="rgb(243,84,52)" rx="2" ry="2" />
<text  x="85.19" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.8" y="629" width="0.2" height="15.0" fill="rgb(243,210,45)" rx="2" ry="2" />
<text  x="86.78" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="108.7" y="373" width="0.3" height="15.0" fill="rgb(219,190,37)" rx="2" ry="2" />
<text  x="111.75" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.1" y="629" width="0.2" height="15.0" fill="rgb(228,55,22)" rx="2" ry="2" />
<text  x="86.10" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="279.5" y="245" width="0.4" height="15.0" fill="rgb(226,39,15)" rx="2" ry="2" />
<text  x="282.46" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="17.9" y="533" width="0.3" height="15.0" fill="rgb(213,228,40)" rx="2" ry="2" />
<text  x="20.95" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1133.0" y="181" width="0.2" height="15.0" fill="rgb(236,0,39)" rx="2" ry="2" />
<text  x="1136.02" y="191.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (12 samples, 0.23%)</title><rect x="132.4" y="437" width="2.7" height="15.0" fill="rgb(212,191,53)" rx="2" ry="2" />
<text  x="135.36" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (3 samples, 0.06%)</title><rect x="129.6" y="469" width="0.7" height="15.0" fill="rgb(222,185,52)" rx="2" ry="2" />
<text  x="132.63" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (6 samples, 0.12%)</title><rect x="73.8" y="389" width="1.4" height="15.0" fill="rgb(250,16,10)" rx="2" ry="2" />
<text  x="76.79" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="294.0" y="213" width="0.2" height="15.0" fill="rgb(221,1,47)" rx="2" ry="2" />
<text  x="296.99" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="38.4" y="261" width="0.2" height="15.0" fill="rgb(232,150,23)" rx="2" ry="2" />
<text  x="41.38" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (6 samples, 0.12%)</title><rect x="46.8" y="213" width="1.3" height="15.0" fill="rgb(236,32,3)" rx="2" ry="2" />
<text  x="49.78" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="330.8" y="421" width="0.4" height="15.0" fill="rgb(211,216,38)" rx="2" ry="2" />
<text  x="333.77" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1096.5" y="405" width="0.2" height="15.0" fill="rgb(233,187,21)" rx="2" ry="2" />
<text  x="1099.47" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1081.9" y="389" width="0.3" height="15.0" fill="rgb(234,27,17)" rx="2" ry="2" />
<text  x="1084.94" y="399.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="17.9" y="581" width="0.3" height="15.0" fill="rgb(210,185,34)" rx="2" ry="2" />
<text  x="20.95" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="834.5" y="453" width="0.2" height="15.0" fill="rgb(225,172,26)" rx="2" ry="2" />
<text  x="837.50" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%)</title><rect x="870.4" y="405" width="0.2" height="15.0" fill="rgb(238,16,43)" rx="2" ry="2" />
<text  x="873.37" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (4 samples, 0.08%)</title><rect x="678.1" y="469" width="0.9" height="15.0" fill="rgb(217,204,3)" rx="2" ry="2" />
<text  x="681.09" y="479.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (57 samples, 1.10%)</title><rect x="502.6" y="341" width="13.0" height="15.0" fill="rgb(247,181,34)" rx="2" ry="2" />
<text  x="505.61" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (15 samples, 0.29%)</title><rect x="431.1" y="277" width="3.4" height="15.0" fill="rgb(236,183,34)" rx="2" ry="2" />
<text  x="434.10" y="287.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="622.9" y="453" width="0.3" height="15.0" fill="rgb(242,110,53)" rx="2" ry="2" />
<text  x="625.93" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="42.7" y="261" width="0.2" height="15.0" fill="rgb(214,181,47)" rx="2" ry="2" />
<text  x="45.69" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;cql3::expr::expression, false, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="64.0" y="325" width="0.3" height="15.0" fill="rgb(211,74,49)" rx="2" ry="2" />
<text  x="67.03" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="935.7" y="437" width="0.3" height="15.0" fill="rgb(243,191,10)" rx="2" ry="2" />
<text  x="938.75" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="52.0" y="325" width="0.2" height="15.0" fill="rgb(232,78,37)" rx="2" ry="2" />
<text  x="55.00" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="266.1" y="181" width="0.4" height="15.0" fill="rgb(205,205,45)" rx="2" ry="2" />
<text  x="269.07" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.12%)</title><rect x="864.7" y="533" width="1.4" height="15.0" fill="rgb(214,29,15)" rx="2" ry="2" />
<text  x="867.69" y="543.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1031.1" y="293" width="0.2" height="15.0" fill="rgb(222,78,9)" rx="2" ry="2" />
<text  x="1034.09" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="457.7" y="453" width="0.6" height="15.0" fill="rgb(226,70,11)" rx="2" ry="2" />
<text  x="460.66" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (506 samples, 9.73%)</title><rect x="337.3" y="373" width="114.9" height="15.0" fill="rgb(236,35,5)" rx="2" ry="2" />
<text  x="340.35" y="383.5" >seastar::futur..</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_function_statement*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="66.3" y="341" width="0.2" height="15.0" fill="rgb(233,229,54)" rx="2" ry="2" />
<text  x="69.30" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="907.1" y="373" width="0.3" height="15.0" fill="rgb(240,193,11)" rx="2" ry="2" />
<text  x="910.15" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.4" y="149" width="0.2" height="15.0" fill="rgb(237,186,51)" rx="2" ry="2" />
<text  x="48.41" y="159.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (208 samples, 4.00%)</title><rect x="21.8" y="469" width="47.2" height="15.0" fill="rgb(214,167,12)" rx="2" ry="2" />
<text  x="24.80" y="479.5" >cql3..</text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="267.0" y="181" width="0.4" height="15.0" fill="rgb(245,56,49)" rx="2" ry="2" />
<text  x="269.98" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="72.0" y="389" width="0.2" height="15.0" fill="rgb(230,204,39)" rx="2" ry="2" />
<text  x="74.97" y="399.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="515.1" y="245" width="0.2" height="15.0" fill="rgb(252,202,21)" rx="2" ry="2" />
<text  x="518.10" y="255.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (454 samples, 8.73%)</title><rect x="459.5" y="437" width="103.0" height="15.0" fill="rgb(243,43,19)" rx="2" ry="2" />
<text  x="462.48" y="447.5" >mutation_sou..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1128.9" y="325" width="4.6" height="15.0" fill="rgb(232,78,53)" rx="2" ry="2" />
<text  x="1131.93" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (17 samples, 0.33%)</title><rect x="72.4" y="453" width="3.9" height="15.0" fill="rgb(220,45,27)" rx="2" ry="2" />
<text  x="75.43" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.10%)</title><rect x="79.7" y="485" width="1.1" height="15.0" fill="rgb(249,11,28)" rx="2" ry="2" />
<text  x="82.69" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="817.7" y="389" width="2.0" height="15.0" fill="rgb(241,2,7)" rx="2" ry="2" />
<text  x="820.70" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (14 samples, 0.27%)</title><rect x="1106.5" y="453" width="3.1" height="15.0" fill="rgb(238,210,28)" rx="2" ry="2" />
<text  x="1109.46" y="463.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="111.0" y="373" width="0.2" height="15.0" fill="rgb(238,141,41)" rx="2" ry="2" />
<text  x="114.02" y="383.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%)</title><rect x="1129.2" y="213" width="0.2" height="15.0" fill="rgb(248,185,10)" rx="2" ry="2" />
<text  x="1132.16" y="223.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::list_directory (1 samples, 0.02%)</title><rect x="697.2" y="421" width="0.2" height="15.0" fill="rgb(213,91,28)" rx="2" ry="2" />
<text  x="700.16" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="670.8" y="405" width="0.3" height="15.0" fill="rgb(219,96,24)" rx="2" ry="2" />
<text  x="673.83" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="111.2" y="309" width="0.3" height="15.0" fill="rgb(247,136,41)" rx="2" ry="2" />
<text  x="114.25" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%)</title><rect x="747.6" y="389" width="0.9" height="15.0" fill="rgb(237,170,54)" rx="2" ry="2" />
<text  x="750.56" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="967.5" y="389" width="0.3" height="15.0" fill="rgb(221,124,25)" rx="2" ry="2" />
<text  x="970.53" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="97.2" y="517" width="0.2" height="15.0" fill="rgb(212,152,42)" rx="2" ry="2" />
<text  x="100.17" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1125.1" y="261" width="0.2" height="15.0" fill="rgb(245,16,7)" rx="2" ry="2" />
<text  x="1128.08" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="172.3" y="405" width="0.7" height="15.0" fill="rgb(211,41,42)" rx="2" ry="2" />
<text  x="175.31" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="981.2" y="373" width="0.2" height="15.0" fill="rgb(221,73,20)" rx="2" ry="2" />
<text  x="984.15" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="338.0" y="325" width="0.9" height="15.0" fill="rgb(231,160,47)" rx="2" ry="2" />
<text  x="341.03" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (24 samples, 0.46%)</title><rect x="627.7" y="469" width="5.4" height="15.0" fill="rgb(237,101,37)" rx="2" ry="2" />
<text  x="630.70" y="479.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (14 samples, 0.27%)</title><rect x="1177.5" y="645" width="3.2" height="15.0" fill="rgb(219,187,33)" rx="2" ry="2" />
<text  x="1180.51" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="51.5" y="261" width="0.3" height="15.0" fill="rgb(231,172,5)" rx="2" ry="2" />
<text  x="54.54" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%)</title><rect x="110.3" y="469" width="0.5" height="15.0" fill="rgb(231,92,30)" rx="2" ry="2" />
<text  x="113.34" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="57.0" y="245" width="0.7" height="15.0" fill="rgb(254,5,42)" rx="2" ry="2" />
<text  x="59.99" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="530.1" y="245" width="0.2" height="15.0" fill="rgb(205,47,4)" rx="2" ry="2" />
<text  x="533.08" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.7" y="277" width="0.5" height="15.0" fill="rgb(218,0,32)" rx="2" ry="2" />
<text  x="47.73" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="52.7" y="149" width="0.2" height="15.0" fill="rgb(228,61,10)" rx="2" ry="2" />
<text  x="55.68" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="858.8" y="437" width="0.9" height="15.0" fill="rgb(214,25,51)" rx="2" ry="2" />
<text  x="861.79" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="660.6" y="357" width="0.5" height="15.0" fill="rgb(224,53,17)" rx="2" ry="2" />
<text  x="663.61" y="367.5" ></text>
</g>
<g >
<title>perf_simple_que (5,198 samples, 100.00%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(254,22,8)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >perf_simple_que</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="23.8" y="357" width="0.5" height="15.0" fill="rgb(216,39,11)" rx="2" ry="2" />
<text  x="26.85" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (32 samples, 0.62%)</title><rect x="1146.6" y="501" width="7.3" height="15.0" fill="rgb(232,165,35)" rx="2" ry="2" />
<text  x="1149.64" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%)</title><rect x="722.8" y="517" width="0.2" height="15.0" fill="rgb(243,100,4)" rx="2" ry="2" />
<text  x="725.81" y="527.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="1104.2" y="453" width="0.9" height="15.0" fill="rgb(244,210,7)" rx="2" ry="2" />
<text  x="1107.19" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1095.8" y="421" width="0.4" height="15.0" fill="rgb(248,2,31)" rx="2" ry="2" />
<text  x="1098.79" y="431.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%)</title><rect x="120.8" y="501" width="0.2" height="15.0" fill="rgb(236,34,6)" rx="2" ry="2" />
<text  x="123.78" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="531.9" y="213" width="1.4" height="15.0" fill="rgb(206,177,22)" rx="2" ry="2" />
<text  x="534.90" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="718.7" y="469" width="0.3" height="15.0" fill="rgb(254,202,18)" rx="2" ry="2" />
<text  x="721.73" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.9" y="245" width="0.2" height="15.0" fill="rgb(223,192,23)" rx="2" ry="2" />
<text  x="48.87" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="651.8" y="501" width="0.2" height="15.0" fill="rgb(252,74,8)" rx="2" ry="2" />
<text  x="654.76" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="790.9" y="277" width="0.7" height="15.0" fill="rgb(254,194,33)" rx="2" ry="2" />
<text  x="793.92" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="807.0" y="245" width="0.9" height="15.0" fill="rgb(253,15,15)" rx="2" ry="2" />
<text  x="810.03" y="255.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1123.0" y="213" width="0.3" height="15.0" fill="rgb(245,6,49)" rx="2" ry="2" />
<text  x="1126.03" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="83.8" y="517" width="0.2" height="15.0" fill="rgb(237,135,24)" rx="2" ry="2" />
<text  x="86.78" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (3 samples, 0.06%)</title><rect x="160.1" y="437" width="0.6" height="15.0" fill="rgb(239,61,14)" rx="2" ry="2" />
<text  x="163.05" y="447.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="501" width="7.2" height="15.0" fill="rgb(211,21,30)" rx="2" ry="2" />
<text  x="1129.66" y="511.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (2 samples, 0.04%)</title><rect x="1131.0" y="165" width="0.4" height="15.0" fill="rgb(209,98,46)" rx="2" ry="2" />
<text  x="1133.98" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.10%)</title><rect x="784.8" y="341" width="1.1" height="15.0" fill="rgb(206,70,35)" rx="2" ry="2" />
<text  x="787.79" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.7" y="229" width="0.3" height="15.0" fill="rgb(214,178,39)" rx="2" ry="2" />
<text  x="42.74" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="82.4" y="565" width="0.2" height="15.0" fill="rgb(236,204,54)" rx="2" ry="2" />
<text  x="85.42" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="610.2" y="405" width="0.2" height="15.0" fill="rgb(234,142,9)" rx="2" ry="2" />
<text  x="613.22" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (3 samples, 0.06%)</title><rect x="195.0" y="277" width="0.7" height="15.0" fill="rgb(218,227,4)" rx="2" ry="2" />
<text  x="198.01" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1007.3" y="229" width="0.4" height="15.0" fill="rgb(241,13,53)" rx="2" ry="2" />
<text  x="1010.26" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="56.1" y="117" width="0.2" height="15.0" fill="rgb(227,189,34)" rx="2" ry="2" />
<text  x="59.08" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="265.8" y="181" width="0.3" height="15.0" fill="rgb(214,172,39)" rx="2" ry="2" />
<text  x="268.84" y="191.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.12%)</title><rect x="136.9" y="421" width="1.4" height="15.0" fill="rgb(234,81,13)" rx="2" ry="2" />
<text  x="139.90" y="431.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="450.2" y="293" width="1.1" height="15.0" fill="rgb(233,111,32)" rx="2" ry="2" />
<text  x="453.17" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1112.1" y="453" width="0.3" height="15.0" fill="rgb(231,75,43)" rx="2" ry="2" />
<text  x="1115.14" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="52.7" y="133" width="0.2" height="15.0" fill="rgb(218,60,8)" rx="2" ry="2" />
<text  x="55.68" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8 samples, 0.15%)</title><rect x="769.3" y="357" width="1.9" height="15.0" fill="rgb(205,33,19)" rx="2" ry="2" />
<text  x="772.35" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="49.3" y="325" width="0.9" height="15.0" fill="rgb(233,67,52)" rx="2" ry="2" />
<text  x="52.27" y="335.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="477.4" y="309" width="0.5" height="15.0" fill="rgb(244,186,43)" rx="2" ry="2" />
<text  x="480.41" y="319.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.17%)</title><rect x="912.6" y="405" width="2.0" height="15.0" fill="rgb(246,201,13)" rx="2" ry="2" />
<text  x="915.59" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%)</title><rect x="659.7" y="437" width="0.5" height="15.0" fill="rgb(222,174,44)" rx="2" ry="2" />
<text  x="662.70" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="51.1" y="277" width="0.4" height="15.0" fill="rgb(229,210,30)" rx="2" ry="2" />
<text  x="54.09" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="1053.8" y="325" width="0.9" height="15.0" fill="rgb(211,50,49)" rx="2" ry="2" />
<text  x="1056.79" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="274.2" y="197" width="0.3" height="15.0" fill="rgb(245,73,52)" rx="2" ry="2" />
<text  x="277.24" y="207.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (5 samples, 0.10%)</title><rect x="636.3" y="437" width="1.2" height="15.0" fill="rgb(210,1,6)" rx="2" ry="2" />
<text  x="639.32" y="447.5" ></text>
</g>
<g >
<title>auth::get_permissions (1 samples, 0.02%)</title><rect x="79.7" y="421" width="0.2" height="15.0" fill="rgb(211,25,53)" rx="2" ry="2" />
<text  x="82.69" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="582.7" y="341" width="0.3" height="15.0" fill="rgb(208,33,47)" rx="2" ry="2" />
<text  x="585.75" y="351.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%)</title><rect x="429.1" y="229" width="0.4" height="15.0" fill="rgb(229,160,47)" rx="2" ry="2" />
<text  x="432.06" y="239.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="17.9" y="597" width="0.7" height="15.0" fill="rgb(224,16,52)" rx="2" ry="2" />
<text  x="20.95" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (4 samples, 0.08%)</title><rect x="622.0" y="469" width="0.9" height="15.0" fill="rgb(211,180,31)" rx="2" ry="2" />
<text  x="625.02" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (27 samples, 0.52%)</title><rect x="496.5" y="325" width="6.1" height="15.0" fill="rgb(247,109,23)" rx="2" ry="2" />
<text  x="499.48" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (2 samples, 0.04%)</title><rect x="86.7" y="485" width="0.5" height="15.0" fill="rgb(226,10,41)" rx="2" ry="2" />
<text  x="89.73" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (4 samples, 0.08%)</title><rect x="623.4" y="469" width="0.9" height="15.0" fill="rgb(247,190,52)" rx="2" ry="2" />
<text  x="626.38" y="479.5" ></text>
</g>
<g >
<title>column_definition::column_definition (1 samples, 0.02%)</title><rect x="111.0" y="277" width="0.2" height="15.0" fill="rgb(229,112,43)" rx="2" ry="2" />
<text  x="114.02" y="287.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (434 samples, 8.35%)</title><rect x="203.0" y="325" width="98.5" height="15.0" fill="rgb(250,204,26)" rx="2" ry="2" />
<text  x="205.96" y="335.5" >seastar::do..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="27.3" y="277" width="0.2" height="15.0" fill="rgb(229,38,3)" rx="2" ry="2" />
<text  x="30.25" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="704.4" y="485" width="0.9" height="15.0" fill="rgb(251,95,50)" rx="2" ry="2" />
<text  x="707.42" y="495.5" ></text>
</g>
<g >
<title>compressed_file_data_sink_impl&lt;crc32_utils,  (1 samples, 0.02%)</title><rect x="85.8" y="341" width="0.2" height="15.0" fill="rgb(218,227,9)" rx="2" ry="2" />
<text  x="88.82" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="52.9" y="181" width="0.5" height="15.0" fill="rgb(221,227,12)" rx="2" ry="2" />
<text  x="55.90" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (9 samples, 0.17%)</title><rect x="1087.4" y="437" width="2.0" height="15.0" fill="rgb(240,215,49)" rx="2" ry="2" />
<text  x="1090.39" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1082.4" y="405" width="0.5" height="15.0" fill="rgb(241,89,49)" rx="2" ry="2" />
<text  x="1085.40" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="730.3" y="469" width="0.2" height="15.0" fill="rgb(221,195,18)" rx="2" ry="2" />
<text  x="733.30" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.5" y="261" width="0.3" height="15.0" fill="rgb(238,131,39)" rx="2" ry="2" />
<text  x="64.53" y="271.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="530.3" y="229" width="0.7" height="15.0" fill="rgb(226,161,5)" rx="2" ry="2" />
<text  x="533.31" y="239.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (548 samples, 10.54%)</title><rect x="332.1" y="421" width="124.4" height="15.0" fill="rgb(206,223,0)" rx="2" ry="2" />
<text  x="335.13" y="431.5" >query::consume_..</text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="533.9" y="245" width="0.3" height="15.0" fill="rgb(221,174,2)" rx="2" ry="2" />
<text  x="536.94" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="621.8" y="469" width="0.2" height="15.0" fill="rgb(223,60,3)" rx="2" ry="2" />
<text  x="624.79" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="250.6" y="133" width="0.3" height="15.0" fill="rgb(227,192,6)" rx="2" ry="2" />
<text  x="253.63" y="143.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (13 samples, 0.25%)</title><rect x="919.4" y="389" width="3.0" height="15.0" fill="rgb(214,202,20)" rx="2" ry="2" />
<text  x="922.40" y="399.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1120.1" y="197" width="0.2" height="15.0" fill="rgb(205,58,41)" rx="2" ry="2" />
<text  x="1123.08" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="616.3" y="469" width="0.3" height="15.0" fill="rgb(231,218,15)" rx="2" ry="2" />
<text  x="619.34" y="479.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="907.1" y="389" width="0.3" height="15.0" fill="rgb(224,54,43)" rx="2" ry="2" />
<text  x="910.15" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="83.8" y="501" width="0.2" height="15.0" fill="rgb(208,171,0)" rx="2" ry="2" />
<text  x="86.78" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="454.7" y="405" width="0.7" height="15.0" fill="rgb(239,177,21)" rx="2" ry="2" />
<text  x="457.71" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="84.9" y="325" width="0.2" height="15.0" fill="rgb(243,204,3)" rx="2" ry="2" />
<text  x="87.91" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="284.0" y="245" width="0.5" height="15.0" fill="rgb(244,51,11)" rx="2" ry="2" />
<text  x="287.00" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="105.1" y="485" width="0.7" height="15.0" fill="rgb(251,189,34)" rx="2" ry="2" />
<text  x="108.12" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.08%)</title><rect x="892.4" y="421" width="0.9" height="15.0" fill="rgb(249,49,52)" rx="2" ry="2" />
<text  x="895.39" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="796.6" y="245" width="0.2" height="15.0" fill="rgb(242,48,14)" rx="2" ry="2" />
<text  x="799.59" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1157.1" y="485" width="0.2" height="15.0" fill="rgb(225,153,2)" rx="2" ry="2" />
<text  x="1160.08" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (344 samples, 6.62%)</title><rect x="353.0" y="277" width="78.1" height="15.0" fill="rgb(234,46,13)" rx="2" ry="2" />
<text  x="356.01" y="287.5" >flat_muta..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="63.6" y="293" width="0.2" height="15.0" fill="rgb(250,198,43)" rx="2" ry="2" />
<text  x="66.57" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="951.4" y="421" width="0.9" height="15.0" fill="rgb(254,171,2)" rx="2" ry="2" />
<text  x="954.41" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (3 samples, 0.06%)</title><rect x="869.5" y="405" width="0.6" height="15.0" fill="rgb(234,170,22)" rx="2" ry="2" />
<text  x="872.46" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="82.9" y="613" width="0.2" height="15.0" fill="rgb(209,135,0)" rx="2" ry="2" />
<text  x="85.87" y="623.5" ></text>
</g>
<g >
<title>database::apply_in_memory (28 samples, 0.54%)</title><rect x="1119.2" y="325" width="6.3" height="15.0" fill="rgb(205,210,3)" rx="2" ry="2" />
<text  x="1122.17" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="931.4" y="421" width="0.5" height="15.0" fill="rgb(231,2,47)" rx="2" ry="2" />
<text  x="934.44" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="63.1" y="261" width="0.2" height="15.0" fill="rgb(228,197,18)" rx="2" ry="2" />
<text  x="66.12" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="846.5" y="421" width="0.9" height="15.0" fill="rgb(253,33,45)" rx="2" ry="2" />
<text  x="849.53" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="557.8" y="293" width="0.2" height="15.0" fill="rgb(225,151,43)" rx="2" ry="2" />
<text  x="560.78" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="828.1" y="373" width="0.3" height="15.0" fill="rgb(205,139,50)" rx="2" ry="2" />
<text  x="831.15" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="600.0" y="389" width="0.7" height="15.0" fill="rgb(229,135,18)" rx="2" ry="2" />
<text  x="603.00" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="87.0" y="421" width="0.2" height="15.0" fill="rgb(235,210,47)" rx="2" ry="2" />
<text  x="89.96" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (10 samples, 0.19%)</title><rect x="941.7" y="405" width="2.2" height="15.0" fill="rgb(218,147,54)" rx="2" ry="2" />
<text  x="944.65" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="106.3" y="501" width="0.2" height="15.0" fill="rgb(234,43,13)" rx="2" ry="2" />
<text  x="109.25" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (4 samples, 0.08%)</title><rect x="1148.7" y="469" width="0.9" height="15.0" fill="rgb(222,25,20)" rx="2" ry="2" />
<text  x="1151.68" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="683.5" y="501" width="0.3" height="15.0" fill="rgb(223,164,42)" rx="2" ry="2" />
<text  x="686.54" y="511.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="17.9" y="261" width="0.3" height="15.0" fill="rgb(238,177,3)" rx="2" ry="2" />
<text  x="20.95" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="44.5" y="357" width="1.6" height="15.0" fill="rgb(249,69,15)" rx="2" ry="2" />
<text  x="47.51" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1133.7" y="293" width="0.2" height="15.0" fill="rgb(244,102,14)" rx="2" ry="2" />
<text  x="1136.70" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (4 samples, 0.08%)</title><rect x="1032.5" y="309" width="0.9" height="15.0" fill="rgb(232,41,2)" rx="2" ry="2" />
<text  x="1035.45" y="319.5" ></text>
</g>
<g >
<title>database::has_keyspace (17 samples, 0.33%)</title><rect x="847.7" y="437" width="3.8" height="15.0" fill="rgb(215,226,40)" rx="2" ry="2" />
<text  x="850.67" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1141.0" y="501" width="0.2" height="15.0" fill="rgb(230,203,7)" rx="2" ry="2" />
<text  x="1143.97" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="56.5" y="197" width="0.5" height="15.0" fill="rgb(254,177,40)" rx="2" ry="2" />
<text  x="59.54" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.6" y="293" width="0.3" height="15.0" fill="rgb(245,110,33)" rx="2" ry="2" />
<text  x="43.65" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%)</title><rect x="661.1" y="357" width="0.2" height="15.0" fill="rgb(233,228,38)" rx="2" ry="2" />
<text  x="664.07" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="661.1" y="405" width="0.2" height="15.0" fill="rgb(248,226,53)" rx="2" ry="2" />
<text  x="664.07" y="415.5" ></text>
</g>
<g >
<title>ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt;::linearize (1 samples, 0.02%)</title><rect x="657.0" y="373" width="0.2" height="15.0" fill="rgb(240,134,28)" rx="2" ry="2" />
<text  x="659.98" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="994.8" y="341" width="0.2" height="15.0" fill="rgb(231,72,11)" rx="2" ry="2" />
<text  x="997.77" y="351.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="899.4" y="341" width="0.3" height="15.0" fill="rgb(222,95,39)" rx="2" ry="2" />
<text  x="902.43" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (37 samples, 0.71%)</title><rect x="415.4" y="197" width="8.4" height="15.0" fill="rgb(214,217,44)" rx="2" ry="2" />
<text  x="418.44" y="207.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="695.8" y="517" width="0.2" height="15.0" fill="rgb(235,222,37)" rx="2" ry="2" />
<text  x="698.80" y="527.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="803.4" y="181" width="0.9" height="15.0" fill="rgb(206,79,3)" rx="2" ry="2" />
<text  x="806.40" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="681.0" y="501" width="0.3" height="15.0" fill="rgb(218,219,13)" rx="2" ry="2" />
<text  x="684.04" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1126.7" y="421" width="7.2" height="15.0" fill="rgb(229,87,47)" rx="2" ry="2" />
<text  x="1129.66" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="453.6" y="357" width="0.9" height="15.0" fill="rgb(243,70,5)" rx="2" ry="2" />
<text  x="456.58" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="949.6" y="357" width="0.2" height="15.0" fill="rgb(251,147,14)" rx="2" ry="2" />
<text  x="952.60" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="252.9" y="149" width="0.5" height="15.0" fill="rgb(250,88,15)" rx="2" ry="2" />
<text  x="255.90" y="159.5" ></text>
</g>
<g >
<title>compact (1 samples, 0.02%)</title><rect x="108.5" y="453" width="0.2" height="15.0" fill="rgb(208,8,20)" rx="2" ry="2" />
<text  x="111.52" y="463.5" ></text>
</g>
<g >
<title>__strdup (1 samples, 0.02%)</title><rect x="82.6" y="645" width="0.3" height="15.0" fill="rgb(206,135,34)" rx="2" ry="2" />
<text  x="85.64" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mE (1 samples, 0.02%)</title><rect x="30.7" y="293" width="0.2" height="15.0" fill="rgb(229,28,10)" rx="2" ry="2" />
<text  x="33.66" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.7" y="277" width="0.7" height="15.0" fill="rgb(240,130,15)" rx="2" ry="2" />
<text  x="42.74" y="287.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%)</title><rect x="995.7" y="325" width="0.2" height="15.0" fill="rgb(231,190,52)" rx="2" ry="2" />
<text  x="998.68" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="55.4" y="293" width="0.2" height="15.0" fill="rgb(245,66,14)" rx="2" ry="2" />
<text  x="58.40" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="55.4" y="277" width="0.2" height="15.0" fill="rgb(212,101,18)" rx="2" ry="2" />
<text  x="58.40" y="287.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="376.4" y="213" width="0.7" height="15.0" fill="rgb(206,14,48)" rx="2" ry="2" />
<text  x="379.39" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (9 samples, 0.17%)</title><rect x="659.5" y="517" width="2.0" height="15.0" fill="rgb(239,182,40)" rx="2" ry="2" />
<text  x="662.48" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (18 samples, 0.35%)</title><rect x="735.1" y="405" width="4.1" height="15.0" fill="rgb(237,73,48)" rx="2" ry="2" />
<text  x="738.07" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%)</title><rect x="260.2" y="133" width="0.6" height="15.0" fill="rgb(207,152,17)" rx="2" ry="2" />
<text  x="263.17" y="143.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="84.7" y="389" width="0.4" height="15.0" fill="rgb(242,139,37)" rx="2" ry="2" />
<text  x="87.69" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="828.6" y="373" width="0.2" height="15.0" fill="rgb(232,227,17)" rx="2" ry="2" />
<text  x="831.60" y="383.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="565" width="0.2" height="15.0" fill="rgb(232,79,22)" rx="2" ry="2" />
<text  x="20.26" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="980.7" y="341" width="0.2" height="15.0" fill="rgb(210,95,8)" rx="2" ry="2" />
<text  x="983.70" y="351.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%)</title><rect x="945.1" y="453" width="0.2" height="15.0" fill="rgb(206,131,29)" rx="2" ry="2" />
<text  x="948.06" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="57.0" y="261" width="0.7" height="15.0" fill="rgb(251,121,38)" rx="2" ry="2" />
<text  x="59.99" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="50.2" y="229" width="0.2" height="15.0" fill="rgb(215,47,30)" rx="2" ry="2" />
<text  x="53.18" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="608.9" y="421" width="0.4" height="15.0" fill="rgb(221,163,12)" rx="2" ry="2" />
<text  x="611.85" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="56.1" y="197" width="0.4" height="15.0" fill="rgb(217,88,8)" rx="2" ry="2" />
<text  x="59.08" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="72.0" y="405" width="0.2" height="15.0" fill="rgb(207,169,12)" rx="2" ry="2" />
<text  x="74.97" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (13 samples, 0.25%)</title><rect x="474.5" y="309" width="2.9" height="15.0" fill="rgb(218,210,42)" rx="2" ry="2" />
<text  x="477.46" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="61.8" y="293" width="0.4" height="15.0" fill="rgb(220,8,13)" rx="2" ry="2" />
<text  x="64.76" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.3" y="117" width="0.2" height="15.0" fill="rgb(208,31,7)" rx="2" ry="2" />
<text  x="59.31" y="127.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="86.7" y="645" width="0.5" height="15.0" fill="rgb(240,124,34)" rx="2" ry="2" />
<text  x="89.73" y="655.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="111.2" y="421" width="0.5" height="15.0" fill="rgb(229,78,34)" rx="2" ry="2" />
<text  x="114.25" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.5" y="213" width="0.5" height="15.0" fill="rgb(244,212,53)" rx="2" ry="2" />
<text  x="59.54" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="610.4" y="421" width="0.5" height="15.0" fill="rgb(237,140,21)" rx="2" ry="2" />
<text  x="613.44" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="16.4" y="485" width="0.2" height="15.0" fill="rgb(235,105,35)" rx="2" ry="2" />
<text  x="19.36" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="17.9" y="549" width="0.3" height="15.0" fill="rgb(227,26,27)" rx="2" ry="2" />
<text  x="20.95" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (5 samples, 0.10%)</title><rect x="74.0" y="357" width="1.2" height="15.0" fill="rgb(241,86,50)" rx="2" ry="2" />
<text  x="77.02" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="624.3" y="469" width="0.4" height="15.0" fill="rgb(240,104,18)" rx="2" ry="2" />
<text  x="627.29" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="807.5" y="229" width="0.4" height="15.0" fill="rgb(229,24,28)" rx="2" ry="2" />
<text  x="810.49" y="239.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1018.4" y="213" width="3.2" height="15.0" fill="rgb(247,78,52)" rx="2" ry="2" />
<text  x="1021.38" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%)</title><rect x="405.7" y="213" width="0.7" height="15.0" fill="rgb(211,207,6)" rx="2" ry="2" />
<text  x="408.68" y="223.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%)</title><rect x="142.1" y="485" width="0.2" height="15.0" fill="rgb(213,8,6)" rx="2" ry="2" />
<text  x="145.12" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="776.6" y="405" width="0.7" height="15.0" fill="rgb(208,91,1)" rx="2" ry="2" />
<text  x="779.61" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.0" y="229" width="0.3" height="15.0" fill="rgb(207,59,32)" rx="2" ry="2" />
<text  x="57.04" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="727.1" y="517" width="0.3" height="15.0" fill="rgb(239,205,35)" rx="2" ry="2" />
<text  x="730.13" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="543.7" y="293" width="0.2" height="15.0" fill="rgb(243,22,47)" rx="2" ry="2" />
<text  x="546.70" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="851.8" y="437" width="0.2" height="15.0" fill="rgb(212,68,25)" rx="2" ry="2" />
<text  x="854.75" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1135.1" y="533" width="0.2" height="15.0" fill="rgb(237,179,12)" rx="2" ry="2" />
<text  x="1138.06" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="61.3" y="309" width="0.2" height="15.0" fill="rgb(228,125,38)" rx="2" ry="2" />
<text  x="64.30" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="854.9" y="373" width="2.3" height="15.0" fill="rgb(212,107,2)" rx="2" ry="2" />
<text  x="857.93" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="812.5" y="309" width="0.2" height="15.0" fill="rgb(247,224,17)" rx="2" ry="2" />
<text  x="815.48" y="319.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="841.1" y="469" width="0.2" height="15.0" fill="rgb(253,174,37)" rx="2" ry="2" />
<text  x="844.09" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="419.3" y="181" width="1.4" height="15.0" fill="rgb(249,120,42)" rx="2" ry="2" />
<text  x="422.30" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.0" y="373" width="0.3" height="15.0" fill="rgb(218,99,27)" rx="2" ry="2" />
<text  x="699.03" y="383.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (3 samples, 0.06%)</title><rect x="974.8" y="389" width="0.7" height="15.0" fill="rgb(251,127,7)" rx="2" ry="2" />
<text  x="977.79" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="109.2" y="485" width="0.2" height="15.0" fill="rgb(228,92,24)" rx="2" ry="2" />
<text  x="112.20" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="77.0" y="405" width="0.2" height="15.0" fill="rgb(240,169,31)" rx="2" ry="2" />
<text  x="79.97" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="791.8" y="293" width="0.3" height="15.0" fill="rgb(246,65,41)" rx="2" ry="2" />
<text  x="794.82" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="20.9" y="501" width="0.2" height="15.0" fill="rgb(232,34,37)" rx="2" ry="2" />
<text  x="23.90" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="940.7" y="389" width="0.3" height="15.0" fill="rgb(214,217,42)" rx="2" ry="2" />
<text  x="943.74" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="601.6" y="405" width="0.2" height="15.0" fill="rgb(207,110,1)" rx="2" ry="2" />
<text  x="604.59" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="655.6" y="517" width="0.5" height="15.0" fill="rgb(223,38,30)" rx="2" ry="2" />
<text  x="658.62" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="1042.2" y="357" width="0.7" height="15.0" fill="rgb(249,170,32)" rx="2" ry="2" />
<text  x="1045.22" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (3 samples, 0.06%)</title><rect x="54.7" y="309" width="0.7" height="15.0" fill="rgb(222,169,38)" rx="2" ry="2" />
<text  x="57.72" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="207.3" y="261" width="0.2" height="15.0" fill="rgb(245,193,38)" rx="2" ry="2" />
<text  x="210.27" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (18 samples, 0.35%)</title><rect x="1160.7" y="501" width="4.1" height="15.0" fill="rgb(250,109,31)" rx="2" ry="2" />
<text  x="1163.72" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (6 samples, 0.12%)</title><rect x="351.7" y="261" width="1.3" height="15.0" fill="rgb(220,207,14)" rx="2" ry="2" />
<text  x="354.65" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="67.4" y="341" width="0.3" height="15.0" fill="rgb(205,149,42)" rx="2" ry="2" />
<text  x="70.43" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="848.6" y="405" width="2.9" height="15.0" fill="rgb(253,55,49)" rx="2" ry="2" />
<text  x="851.58" y="415.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="16.8" y="581" width="0.2" height="15.0" fill="rgb(219,24,21)" rx="2" ry="2" />
<text  x="19.81" y="591.5" ></text>
</g>
<g >
<title>partition_version::~partition_version (1 samples, 0.02%)</title><rect x="16.8" y="533" width="0.2" height="15.0" fill="rgb(238,175,3)" rx="2" ry="2" />
<text  x="19.81" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%)</title><rect x="64.5" y="373" width="0.2" height="15.0" fill="rgb(208,210,50)" rx="2" ry="2" />
<text  x="67.48" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="681.7" y="501" width="0.3" height="15.0" fill="rgb(222,120,17)" rx="2" ry="2" />
<text  x="684.72" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (1 samples, 0.02%)</title><rect x="1132.1" y="229" width="0.2" height="15.0" fill="rgb(206,155,46)" rx="2" ry="2" />
<text  x="1135.11" y="239.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="784.3" y="341" width="0.5" height="15.0" fill="rgb(248,177,1)" rx="2" ry="2" />
<text  x="787.33" y="351.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (3 samples, 0.06%)</title><rect x="1094.0" y="389" width="0.7" height="15.0" fill="rgb(223,108,16)" rx="2" ry="2" />
<text  x="1096.97" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (82 samples, 1.58%)</title><rect x="42.0" y="389" width="18.6" height="15.0" fill="rgb(239,85,38)" rx="2" ry="2" />
<text  x="45.01" y="399.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,819 samples, 34.99%)</title><rect x="163.2" y="469" width="413.0" height="15.0" fill="rgb(241,76,32)" rx="2" ry="2" />
<text  x="166.23" y="479.5" >query::querier&lt;</text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="480.4" y="309" width="0.6" height="15.0" fill="rgb(225,98,54)" rx="2" ry="2" />
<text  x="483.37" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="39.7" y="245" width="0.3" height="15.0" fill="rgb(253,151,24)" rx="2" ry="2" />
<text  x="42.74" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="574.6" y="421" width="0.2" height="15.0" fill="rgb(219,8,2)" rx="2" ry="2" />
<text  x="577.57" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (2 samples, 0.04%)</title><rect x="578.4" y="373" width="0.5" height="15.0" fill="rgb(210,128,51)" rx="2" ry="2" />
<text  x="581.43" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.3" y="357" width="0.2" height="15.0" fill="rgb(208,209,22)" rx="2" ry="2" />
<text  x="67.26" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="24.1" y="277" width="0.2" height="15.0" fill="rgb(228,107,24)" rx="2" ry="2" />
<text  x="27.07" y="287.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="61.5" y="165" width="0.3" height="15.0" fill="rgb(251,42,43)" rx="2" ry="2" />
<text  x="64.53" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (30 samples, 0.58%)</title><rect x="241.3" y="117" width="6.8" height="15.0" fill="rgb(253,95,53)" rx="2" ry="2" />
<text  x="244.32" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (12 samples, 0.23%)</title><rect x="690.4" y="517" width="2.7" height="15.0" fill="rgb(207,55,49)" rx="2" ry="2" />
<text  x="693.35" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (9 samples, 0.17%)</title><rect x="259.5" y="149" width="2.0" height="15.0" fill="rgb(208,25,25)" rx="2" ry="2" />
<text  x="262.48" y="159.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (10 samples, 0.19%)</title><rect x="398.6" y="197" width="2.3" height="15.0" fill="rgb(241,62,2)" rx="2" ry="2" />
<text  x="401.64" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="217.9" y="229" width="0.5" height="15.0" fill="rgb(253,63,4)" rx="2" ry="2" />
<text  x="220.94" y="239.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="111.5" y="293" width="0.2" height="15.0" fill="rgb(246,196,51)" rx="2" ry="2" />
<text  x="114.47" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="44.3" y="197" width="0.2" height="15.0" fill="rgb(216,113,54)" rx="2" ry="2" />
<text  x="47.28" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="22.3" y="373" width="0.2" height="15.0" fill="rgb(246,139,48)" rx="2" ry="2" />
<text  x="25.26" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="944.4" y="437" width="0.2" height="15.0" fill="rgb(254,194,3)" rx="2" ry="2" />
<text  x="947.37" y="447.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="82.2" y="517" width="0.2" height="15.0" fill="rgb(253,4,21)" rx="2" ry="2" />
<text  x="85.19" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="430.4" y="213" width="0.3" height="15.0" fill="rgb(251,163,44)" rx="2" ry="2" />
<text  x="433.42" y="223.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (14 samples, 0.27%)</title><rect x="715.5" y="469" width="3.2" height="15.0" fill="rgb(216,172,9)" rx="2" ry="2" />
<text  x="718.55" y="479.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="213.9" y="245" width="2.9" height="15.0" fill="rgb(252,114,8)" rx="2" ry="2" />
<text  x="216.86" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%)</title><rect x="196.4" y="261" width="0.7" height="15.0" fill="rgb(232,87,54)" rx="2" ry="2" />
<text  x="199.38" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="264.3" y="197" width="0.4" height="15.0" fill="rgb(208,140,47)" rx="2" ry="2" />
<text  x="267.25" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (2 samples, 0.04%)</title><rect x="538.9" y="309" width="0.5" height="15.0" fill="rgb(254,1,47)" rx="2" ry="2" />
<text  x="541.93" y="319.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (3 samples, 0.06%)</title><rect x="874.2" y="373" width="0.7" height="15.0" fill="rgb(212,42,13)" rx="2" ry="2" />
<text  x="877.23" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="362.8" y="213" width="0.4" height="15.0" fill="rgb(230,12,19)" rx="2" ry="2" />
<text  x="365.77" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="215.4" y="213" width="1.4" height="15.0" fill="rgb(224,104,54)" rx="2" ry="2" />
<text  x="218.44" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (1 samples, 0.02%)</title><rect x="1118.0" y="469" width="0.3" height="15.0" fill="rgb(208,19,44)" rx="2" ry="2" />
<text  x="1121.04" y="479.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="874.7" y="341" width="0.2" height="15.0" fill="rgb(226,203,23)" rx="2" ry="2" />
<text  x="877.68" y="351.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%)</title><rect x="696.9" y="421" width="0.3" height="15.0" fill="rgb(208,30,12)" rx="2" ry="2" />
<text  x="699.93" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="834.3" y="437" width="0.2" height="15.0" fill="rgb(211,226,31)" rx="2" ry="2" />
<text  x="837.27" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::open_or_create_data (1 samples, 0.02%)</title><rect x="82.9" y="517" width="0.2" height="15.0" fill="rgb(241,109,31)" rx="2" ry="2" />
<text  x="85.87" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="61.3" y="357" width="0.2" height="15.0" fill="rgb(227,216,42)" rx="2" ry="2" />
<text  x="64.30" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="763.0" y="437" width="0.2" height="15.0" fill="rgb(208,92,35)" rx="2" ry="2" />
<text  x="765.99" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="80.8" y="533" width="0.3" height="15.0" fill="rgb(241,221,31)" rx="2" ry="2" />
<text  x="83.83" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="42.7" y="325" width="0.2" height="15.0" fill="rgb(215,99,50)" rx="2" ry="2" />
<text  x="45.69" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="559.8" y="357" width="0.2" height="15.0" fill="rgb(205,122,39)" rx="2" ry="2" />
<text  x="562.82" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%)</title><rect x="815.2" y="341" width="0.2" height="15.0" fill="rgb(230,158,19)" rx="2" ry="2" />
<text  x="818.21" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (5 samples, 0.10%)</title><rect x="908.3" y="421" width="1.1" height="15.0" fill="rgb(205,66,19)" rx="2" ry="2" />
<text  x="911.28" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.12%)</title><rect x="633.6" y="469" width="1.4" height="15.0" fill="rgb(228,129,25)" rx="2" ry="2" />
<text  x="636.60" y="479.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="1131.7" y="229" width="0.2" height="15.0" fill="rgb(232,108,10)" rx="2" ry="2" />
<text  x="1134.66" y="239.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::index_impl (1 samples, 0.02%)</title><rect x="30.2" y="261" width="0.2" height="15.0" fill="rgb(220,60,4)" rx="2" ry="2" />
<text  x="33.20" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="327.1" y="309" width="0.3" height="15.0" fill="rgb(221,38,18)" rx="2" ry="2" />
<text  x="330.13" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1128.9" y="229" width="0.3" height="15.0" fill="rgb(232,21,22)" rx="2" ry="2" />
<text  x="1131.93" y="239.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (33 samples, 0.63%)</title><rect x="750.3" y="405" width="7.5" height="15.0" fill="rgb(232,70,9)" rx="2" ry="2" />
<text  x="753.28" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (531 samples, 10.22%)</title><rect x="961.9" y="405" width="120.5" height="15.0" fill="rgb(209,156,20)" rx="2" ry="2" />
<text  x="964.85" y="415.5" >service::storag..</text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (1 samples, 0.02%)</title><rect x="696.5" y="437" width="0.2" height="15.0" fill="rgb(208,20,46)" rx="2" ry="2" />
<text  x="699.48" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="1044.9" y="325" width="0.7" height="15.0" fill="rgb(238,73,52)" rx="2" ry="2" />
<text  x="1047.94" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="604.1" y="437" width="0.2" height="15.0" fill="rgb(236,146,53)" rx="2" ry="2" />
<text  x="607.09" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="684.7" y="469" width="0.2" height="15.0" fill="rgb(227,33,18)" rx="2" ry="2" />
<text  x="687.67" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (1 samples, 0.02%)</title><rect x="1118.7" y="453" width="0.2" height="15.0" fill="rgb(245,24,7)" rx="2" ry="2" />
<text  x="1121.72" y="463.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="596.8" y="373" width="0.2" height="15.0" fill="rgb(217,116,43)" rx="2" ry="2" />
<text  x="599.82" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1109.0" y="405" width="0.2" height="15.0" fill="rgb(243,113,39)" rx="2" ry="2" />
<text  x="1111.96" y="415.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="544.4" y="357" width="0.7" height="15.0" fill="rgb(247,60,15)" rx="2" ry="2" />
<text  x="547.38" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="84.7" y="325" width="0.2" height="15.0" fill="rgb(242,158,26)" rx="2" ry="2" />
<text  x="87.69" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (5 samples, 0.10%)</title><rect x="74.0" y="373" width="1.2" height="15.0" fill="rgb(218,75,50)" rx="2" ry="2" />
<text  x="77.02" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="474.2" y="293" width="0.3" height="15.0" fill="rgb(209,26,3)" rx="2" ry="2" />
<text  x="477.24" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt;::allocator (1 samples, 0.02%)</title><rect x="22.7" y="405" width="0.2" height="15.0" fill="rgb(219,109,20)" rx="2" ry="2" />
<text  x="25.71" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (43 samples, 0.83%)</title><rect x="592.3" y="421" width="9.7" height="15.0" fill="rgb(213,22,4)" rx="2" ry="2" />
<text  x="595.28" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="553.5" y="293" width="0.6" height="15.0" fill="rgb(229,181,24)" rx="2" ry="2" />
<text  x="556.46" y="303.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%)</title><rect x="110.3" y="485" width="0.5" height="15.0" fill="rgb(248,118,14)" rx="2" ry="2" />
<text  x="113.34" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (12 samples, 0.23%)</title><rect x="531.2" y="245" width="2.7" height="15.0" fill="rgb(211,200,8)" rx="2" ry="2" />
<text  x="534.22" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.4" y="357" width="0.2" height="15.0" fill="rgb(219,189,16)" rx="2" ry="2" />
<text  x="41.38" y="367.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.10%)</title><rect x="10.2" y="645" width="1.2" height="15.0" fill="rgb(216,74,19)" rx="2" ry="2" />
<text  x="13.23" y="655.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (273 samples, 5.25%)</title><rect x="486.9" y="373" width="62.0" height="15.0" fill="rgb(211,172,5)" rx="2" ry="2" />
<text  x="489.95" y="383.5" >memtab..</text>
</g>
<g >
<title>db::schema_tables::prepare_builder_from_table_row (1 samples, 0.02%)</title><rect x="108.7" y="437" width="0.3" height="15.0" fill="rgb(232,176,28)" rx="2" ry="2" />
<text  x="111.75" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;column_definition const*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt;, column_definition*&gt; (1 samples, 0.02%)</title><rect x="111.0" y="293" width="0.2" height="15.0" fill="rgb(214,139,47)" rx="2" ry="2" />
<text  x="114.02" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.08%)</title><rect x="632.2" y="421" width="0.9" height="15.0" fill="rgb(214,42,12)" rx="2" ry="2" />
<text  x="635.24" y="431.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%)</title><rect x="278.6" y="261" width="0.2" height="15.0" fill="rgb(222,6,21)" rx="2" ry="2" />
<text  x="281.55" y="271.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="832.7" y="453" width="0.2" height="15.0" fill="rgb(240,124,28)" rx="2" ry="2" />
<text  x="835.69" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="837.5" y="421" width="0.2" height="15.0" fill="rgb(212,9,31)" rx="2" ry="2" />
<text  x="840.45" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%)</title><rect x="660.6" y="373" width="0.5" height="15.0" fill="rgb(224,19,1)" rx="2" ry="2" />
<text  x="663.61" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="734.4" y="437" width="0.2" height="15.0" fill="rgb(241,76,12)" rx="2" ry="2" />
<text  x="737.39" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="550.7" y="357" width="0.3" height="15.0" fill="rgb(222,17,49)" rx="2" ry="2" />
<text  x="553.74" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="76.5" y="421" width="0.7" height="15.0" fill="rgb(226,105,15)" rx="2" ry="2" />
<text  x="79.51" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (6 samples, 0.12%)</title><rect x="79.5" y="517" width="1.3" height="15.0" fill="rgb(244,204,10)" rx="2" ry="2" />
<text  x="82.47" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="703.1" y="469" width="0.4" height="15.0" fill="rgb(240,187,48)" rx="2" ry="2" />
<text  x="706.06" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="45.2" y="229" width="0.4" height="15.0" fill="rgb(208,99,34)" rx="2" ry="2" />
<text  x="48.19" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="109.2" y="501" width="0.2" height="15.0" fill="rgb(248,225,27)" rx="2" ry="2" />
<text  x="112.20" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%)</title><rect x="140.1" y="485" width="0.4" height="15.0" fill="rgb(233,94,5)" rx="2" ry="2" />
<text  x="143.08" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__199 (1 samples, 0.02%)</title><rect x="37.5" y="309" width="0.2" height="15.0" fill="rgb(252,138,39)" rx="2" ry="2" />
<text  x="40.47" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="839.9" y="469" width="0.3" height="15.0" fill="rgb(222,156,15)" rx="2" ry="2" />
<text  x="842.95" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restrictions, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="75.2" y="421" width="0.2" height="15.0" fill="rgb(226,105,44)" rx="2" ry="2" />
<text  x="78.15" y="431.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="39.3" y="245" width="0.2" height="15.0" fill="rgb(251,42,4)" rx="2" ry="2" />
<text  x="42.28" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1104.0" y="453" width="0.2" height="15.0" fill="rgb(217,122,6)" rx="2" ry="2" />
<text  x="1106.96" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="84.0" y="549" width="2.7" height="15.0" fill="rgb(229,51,45)" rx="2" ry="2" />
<text  x="87.01" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="44.1" y="229" width="0.2" height="15.0" fill="rgb(229,124,13)" rx="2" ry="2" />
<text  x="47.05" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="159.6" y="453" width="0.2" height="15.0" fill="rgb(218,36,7)" rx="2" ry="2" />
<text  x="162.60" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="48.6" y="341" width="0.2" height="15.0" fill="rgb(230,91,2)" rx="2" ry="2" />
<text  x="51.59" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (14 samples, 0.27%)</title><rect x="531.0" y="261" width="3.2" height="15.0" fill="rgb(212,35,46)" rx="2" ry="2" />
<text  x="533.99" y="271.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (1 samples, 0.02%)</title><rect x="452.9" y="389" width="0.2" height="15.0" fill="rgb(243,53,5)" rx="2" ry="2" />
<text  x="455.90" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="97.4" y="517" width="0.2" height="15.0" fill="rgb(214,4,6)" rx="2" ry="2" />
<text  x="100.40" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="736.0" y="373" width="0.2" height="15.0" fill="rgb(246,70,4)" rx="2" ry="2" />
<text  x="738.98" y="383.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="109.4" y="517" width="0.3" height="15.0" fill="rgb(231,13,28)" rx="2" ry="2" />
<text  x="112.43" y="527.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="77.0" y="389" width="0.2" height="15.0" fill="rgb(205,203,49)" rx="2" ry="2" />
<text  x="79.97" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="218.8" y="261" width="0.3" height="15.0" fill="rgb(219,170,49)" rx="2" ry="2" />
<text  x="221.85" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="669.2" y="453" width="0.3" height="15.0" fill="rgb(233,222,25)" rx="2" ry="2" />
<text  x="672.24" y="463.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="628.1" y="453" width="0.5" height="15.0" fill="rgb(209,209,16)" rx="2" ry="2" />
<text  x="631.15" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="61.8" y="245" width="0.4" height="15.0" fill="rgb(253,6,7)" rx="2" ry="2" />
<text  x="64.76" y="255.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="109.7" y="453" width="0.2" height="15.0" fill="rgb(225,192,34)" rx="2" ry="2" />
<text  x="112.66" y="463.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::create_snitch&lt;&gt; (1 samples, 0.02%)</title><rect x="723.0" y="325" width="0.3" height="15.0" fill="rgb(246,185,46)" rx="2" ry="2" />
<text  x="726.04" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="22.9" y="437" width="0.3" height="15.0" fill="rgb(216,108,43)" rx="2" ry="2" />
<text  x="25.94" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="981.4" y="373" width="0.2" height="15.0" fill="rgb(225,86,7)" rx="2" ry="2" />
<text  x="984.38" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="191.6" y="277" width="0.5" height="15.0" fill="rgb(252,185,0)" rx="2" ry="2" />
<text  x="194.61" y="287.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (2 samples, 0.04%)</title><rect x="874.2" y="325" width="0.5" height="15.0" fill="rgb(218,151,36)" rx="2" ry="2" />
<text  x="877.23" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (69 samples, 1.33%)</title><rect x="44.5" y="373" width="15.7" height="15.0" fill="rgb(224,71,17)" rx="2" ry="2" />
<text  x="47.51" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.27%)</title><rect x="448.6" y="325" width="3.2" height="15.0" fill="rgb(219,77,33)" rx="2" ry="2" />
<text  x="451.58" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="316.2" y="373" width="0.5" height="15.0" fill="rgb(207,211,16)" rx="2" ry="2" />
<text  x="319.24" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="69.9" y="437" width="0.3" height="15.0" fill="rgb(254,67,51)" rx="2" ry="2" />
<text  x="72.93" y="447.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="204.3" y="277" width="0.2" height="15.0" fill="rgb(242,92,38)" rx="2" ry="2" />
<text  x="207.32" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="180.0" y="357" width="0.3" height="15.0" fill="rgb(207,194,10)" rx="2" ry="2" />
<text  x="183.03" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="971.8" y="357" width="2.5" height="15.0" fill="rgb(228,90,20)" rx="2" ry="2" />
<text  x="974.84" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="635.6" y="469" width="0.3" height="15.0" fill="rgb(229,61,38)" rx="2" ry="2" />
<text  x="638.64" y="479.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="527.1" y="277" width="0.5" height="15.0" fill="rgb(217,196,25)" rx="2" ry="2" />
<text  x="530.13" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="676.3" y="517" width="0.2" height="15.0" fill="rgb(214,141,24)" rx="2" ry="2" />
<text  x="679.28" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (256 samples, 4.92%)</title><rect x="21.1" y="517" width="58.1" height="15.0" fill="rgb(239,67,34)" rx="2" ry="2" />
<text  x="24.12" y="527.5" >cql3::..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="697.4" y="533" width="0.2" height="15.0" fill="rgb(232,153,32)" rx="2" ry="2" />
<text  x="700.39" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%)</title><rect x="33.4" y="293" width="0.2" height="15.0" fill="rgb(214,206,13)" rx="2" ry="2" />
<text  x="36.38" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="826.6" y="325" width="0.9" height="15.0" fill="rgb(240,89,21)" rx="2" ry="2" />
<text  x="829.56" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="52.7" y="213" width="0.7" height="15.0" fill="rgb(227,101,34)" rx="2" ry="2" />
<text  x="55.68" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (2 samples, 0.04%)</title><rect x="1166.4" y="533" width="0.4" height="15.0" fill="rgb(211,87,22)" rx="2" ry="2" />
<text  x="1169.39" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="295.8" y="277" width="0.2" height="15.0" fill="rgb(251,185,48)" rx="2" ry="2" />
<text  x="298.81" y="287.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="154.6" y="469" width="0.2" height="15.0" fill="rgb(206,195,42)" rx="2" ry="2" />
<text  x="157.61" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="707.8" y="517" width="0.3" height="15.0" fill="rgb(212,210,31)" rx="2" ry="2" />
<text  x="710.83" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="560.0" y="373" width="0.3" height="15.0" fill="rgb(211,101,34)" rx="2" ry="2" />
<text  x="563.05" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.1" y="325" width="0.3" height="15.0" fill="rgb(247,86,22)" rx="2" ry="2" />
<text  x="88.14" y="335.5" ></text>
</g>
<g >
<title>sstables::sstable::do_write_simple (1 samples, 0.02%)</title><rect x="16.4" y="501" width="0.2" height="15.0" fill="rgb(217,96,13)" rx="2" ry="2" />
<text  x="19.36" y="511.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.25%)</title><rect x="154.8" y="469" width="3.0" height="15.0" fill="rgb(250,43,54)" rx="2" ry="2" />
<text  x="157.83" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (2 samples, 0.04%)</title><rect x="71.3" y="421" width="0.4" height="15.0" fill="rgb(225,14,53)" rx="2" ry="2" />
<text  x="74.29" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (2 samples, 0.04%)</title><rect x="613.8" y="437" width="0.5" height="15.0" fill="rgb(233,164,38)" rx="2" ry="2" />
<text  x="616.85" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (6 samples, 0.12%)</title><rect x="979.3" y="341" width="1.4" height="15.0" fill="rgb(244,164,3)" rx="2" ry="2" />
<text  x="982.33" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="569.6" y="373" width="0.4" height="15.0" fill="rgb(226,193,33)" rx="2" ry="2" />
<text  x="572.58" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1112.8" y="453" width="0.2" height="15.0" fill="rgb(214,211,17)" rx="2" ry="2" />
<text  x="1115.82" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.10%)</title><rect x="103.8" y="453" width="1.1" height="15.0" fill="rgb(219,125,48)" rx="2" ry="2" />
<text  x="106.76" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="109.9" y="469" width="0.2" height="15.0" fill="rgb(218,14,33)" rx="2" ry="2" />
<text  x="112.88" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="899.7" y="341" width="0.4" height="15.0" fill="rgb(232,196,54)" rx="2" ry="2" />
<text  x="902.65" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%)</title><rect x="868.3" y="485" width="0.7" height="15.0" fill="rgb(231,66,20)" rx="2" ry="2" />
<text  x="871.33" y="495.5" ></text>
</g>
<g >
<title>schema_mutations::operator== (1 samples, 0.02%)</title><rect x="108.5" y="469" width="0.2" height="15.0" fill="rgb(227,164,33)" rx="2" ry="2" />
<text  x="111.52" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (454 samples, 8.73%)</title><rect x="344.4" y="325" width="103.0" height="15.0" fill="rgb(213,190,6)" rx="2" ry="2" />
<text  x="347.39" y="335.5" >seastar::rep..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="720.8" y="485" width="0.2" height="15.0" fill="rgb(250,202,13)" rx="2" ry="2" />
<text  x="723.77" y="495.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%)</title><rect x="639.3" y="469" width="0.2" height="15.0" fill="rgb(246,179,21)" rx="2" ry="2" />
<text  x="642.27" y="479.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (2 samples, 0.04%)</title><rect x="200.5" y="293" width="0.4" height="15.0" fill="rgb(229,24,20)" rx="2" ry="2" />
<text  x="203.46" y="303.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_Head_base&lt;std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="59.3" y="213" width="0.2" height="15.0" fill="rgb(220,205,9)" rx="2" ry="2" />
<text  x="62.26" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="23.8" y="341" width="0.5" height="15.0" fill="rgb(223,192,35)" rx="2" ry="2" />
<text  x="26.85" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="10.5" y="629" width="0.2" height="15.0" fill="rgb(254,84,41)" rx="2" ry="2" />
<text  x="13.45" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="914.0" y="373" width="0.6" height="15.0" fill="rgb(217,88,13)" rx="2" ry="2" />
<text  x="916.96" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="200.9" y="293" width="0.5" height="15.0" fill="rgb(251,26,14)" rx="2" ry="2" />
<text  x="203.92" y="303.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.4" y="373" width="0.2" height="15.0" fill="rgb(237,126,11)" rx="2" ry="2" />
<text  x="68.39" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="41.8" y="341" width="0.2" height="15.0" fill="rgb(205,110,35)" rx="2" ry="2" />
<text  x="44.78" y="351.5" ></text>
</g>
<g >
<title>free (8 samples, 0.15%)</title><rect x="441.1" y="229" width="1.8" height="15.0" fill="rgb(222,38,44)" rx="2" ry="2" />
<text  x="444.09" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="1044.7" y="325" width="0.2" height="15.0" fill="rgb(254,199,39)" rx="2" ry="2" />
<text  x="1047.71" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="142.1" y="469" width="0.2" height="15.0" fill="rgb(212,145,33)" rx="2" ry="2" />
<text  x="145.12" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (37 samples, 0.71%)</title><rect x="551.4" y="357" width="8.4" height="15.0" fill="rgb(231,173,16)" rx="2" ry="2" />
<text  x="554.42" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1099.6" y="373" width="0.3" height="15.0" fill="rgb(250,11,41)" rx="2" ry="2" />
<text  x="1102.65" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%)</title><rect x="208.6" y="245" width="2.3" height="15.0" fill="rgb(246,126,18)" rx="2" ry="2" />
<text  x="211.63" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="201.6" y="309" width="0.5" height="15.0" fill="rgb(213,215,51)" rx="2" ry="2" />
<text  x="204.60" y="319.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (5 samples, 0.10%)</title><rect x="617.0" y="453" width="1.2" height="15.0" fill="rgb(235,203,12)" rx="2" ry="2" />
<text  x="620.03" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (5 samples, 0.10%)</title><rect x="58.8" y="341" width="1.1" height="15.0" fill="rgb(216,3,46)" rx="2" ry="2" />
<text  x="61.81" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="80.6" y="373" width="0.2" height="15.0" fill="rgb(229,129,8)" rx="2" ry="2" />
<text  x="83.60" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1101.2" y="421" width="0.3" height="15.0" fill="rgb(236,185,16)" rx="2" ry="2" />
<text  x="1104.24" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%)</title><rect x="516.7" y="357" width="1.3" height="15.0" fill="rgb(207,65,3)" rx="2" ry="2" />
<text  x="519.69" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1074.9" y="293" width="0.2" height="15.0" fill="rgb(236,203,44)" rx="2" ry="2" />
<text  x="1077.91" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="63.1" y="293" width="0.2" height="15.0" fill="rgb(238,69,24)" rx="2" ry="2" />
<text  x="66.12" y="303.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="870.1" y="405" width="0.3" height="15.0" fill="rgb(222,166,53)" rx="2" ry="2" />
<text  x="873.14" y="415.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (18 samples, 0.35%)</title><rect x="387.7" y="197" width="4.1" height="15.0" fill="rgb(254,120,1)" rx="2" ry="2" />
<text  x="390.75" y="207.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set::untyped_result_set (1 samples, 0.02%)</title><rect x="657.0" y="485" width="0.2" height="15.0" fill="rgb(210,121,27)" rx="2" ry="2" />
<text  x="659.98" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="55.6" y="277" width="0.3" height="15.0" fill="rgb(218,49,30)" rx="2" ry="2" />
<text  x="58.63" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.1" y="325" width="0.2" height="15.0" fill="rgb(251,91,49)" rx="2" ry="2" />
<text  x="44.10" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1128.9" y="309" width="4.6" height="15.0" fill="rgb(240,215,49)" rx="2" ry="2" />
<text  x="1131.93" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_users_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.2" y="405" width="0.2" height="15.0" fill="rgb(208,25,9)" rx="2" ry="2" />
<text  x="70.21" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="659.7" y="389" width="0.5" height="15.0" fill="rgb(229,57,23)" rx="2" ry="2" />
<text  x="662.70" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="326.0" y="341" width="0.2" height="15.0" fill="rgb(210,130,31)" rx="2" ry="2" />
<text  x="329.00" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%)</title><rect x="690.8" y="501" width="1.6" height="15.0" fill="rgb(212,197,45)" rx="2" ry="2" />
<text  x="693.80" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="675.4" y="517" width="0.4" height="15.0" fill="rgb(253,172,28)" rx="2" ry="2" />
<text  x="678.37" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="59.5" y="325" width="0.4" height="15.0" fill="rgb(212,163,1)" rx="2" ry="2" />
<text  x="62.49" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (334 samples, 6.43%)</title><rect x="205.7" y="293" width="75.8" height="15.0" fill="rgb(232,133,44)" rx="2" ry="2" />
<text  x="208.68" y="303.5" >partitio..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1022.7" y="245" width="0.2" height="15.0" fill="rgb(240,3,30)" rx="2" ry="2" />
<text  x="1025.69" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1131.7" y="197" width="0.2" height="15.0" fill="rgb(240,156,47)" rx="2" ry="2" />
<text  x="1134.66" y="207.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="769.1" y="341" width="0.2" height="15.0" fill="rgb(228,189,9)" rx="2" ry="2" />
<text  x="772.12" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="665.4" y="469" width="1.1" height="15.0" fill="rgb(242,196,22)" rx="2" ry="2" />
<text  x="668.38" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="693.3" y="469" width="0.5" height="15.0" fill="rgb(250,225,7)" rx="2" ry="2" />
<text  x="696.30" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="194.8" y="277" width="0.2" height="15.0" fill="rgb(235,121,53)" rx="2" ry="2" />
<text  x="197.79" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="906.9" y="389" width="0.2" height="15.0" fill="rgb(217,110,12)" rx="2" ry="2" />
<text  x="909.92" y="399.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1024.5" y="245" width="1.6" height="15.0" fill="rgb(234,128,54)" rx="2" ry="2" />
<text  x="1027.51" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1085.8" y="405" width="0.5" height="15.0" fill="rgb(248,90,4)" rx="2" ry="2" />
<text  x="1088.80" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (5 samples, 0.10%)</title><rect x="1144.8" y="485" width="1.2" height="15.0" fill="rgb(207,93,12)" rx="2" ry="2" />
<text  x="1147.82" y="495.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::close (1 samples, 0.02%)</title><rect x="696.9" y="485" width="0.3" height="15.0" fill="rgb(245,142,30)" rx="2" ry="2" />
<text  x="699.93" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="796.4" y="245" width="0.2" height="15.0" fill="rgb(216,220,51)" rx="2" ry="2" />
<text  x="799.36" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="52.7" y="277" width="0.7" height="15.0" fill="rgb(226,206,1)" rx="2" ry="2" />
<text  x="55.68" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.2" y="165" width="0.3" height="15.0" fill="rgb(219,17,33)" rx="2" ry="2" />
<text  x="798.23" y="175.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (11 samples, 0.21%)</title><rect x="13.2" y="613" width="2.5" height="15.0" fill="rgb(226,90,45)" rx="2" ry="2" />
<text  x="16.18" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="39.7" y="357" width="0.7" height="15.0" fill="rgb(229,53,36)" rx="2" ry="2" />
<text  x="42.74" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="44.5" y="341" width="1.6" height="15.0" fill="rgb(232,71,34)" rx="2" ry="2" />
<text  x="47.51" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1033.4" y="293" width="0.2" height="15.0" fill="rgb(235,96,40)" rx="2" ry="2" />
<text  x="1036.36" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.4" y="325" width="0.2" height="15.0" fill="rgb(242,137,20)" rx="2" ry="2" />
<text  x="41.38" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="19.8" y="485" width="0.2" height="15.0" fill="rgb(206,37,0)" rx="2" ry="2" />
<text  x="22.76" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="844.9" y="437" width="1.0" height="15.0" fill="rgb(208,166,54)" rx="2" ry="2" />
<text  x="847.94" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume (176 samples, 3.39%)</title><rect x="364.4" y="245" width="39.9" height="15.0" fill="rgb(210,83,49)" rx="2" ry="2" />
<text  x="367.36" y="255.5" >que..</text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (11 samples, 0.21%)</title><rect x="30.9" y="293" width="2.5" height="15.0" fill="rgb(210,207,37)" rx="2" ry="2" />
<text  x="33.88" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="407.9" y="229" width="0.5" height="15.0" fill="rgb(225,168,32)" rx="2" ry="2" />
<text  x="410.95" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.13%)</title><rect x="254.7" y="149" width="1.6" height="15.0" fill="rgb(211,220,52)" rx="2" ry="2" />
<text  x="257.72" y="159.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="86.7" y="501" width="0.5" height="15.0" fill="rgb(222,212,18)" rx="2" ry="2" />
<text  x="89.73" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="822.5" y="405" width="0.2" height="15.0" fill="rgb(207,154,8)" rx="2" ry="2" />
<text  x="825.47" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="66.8" y="357" width="0.2" height="15.0" fill="rgb(226,169,52)" rx="2" ry="2" />
<text  x="69.75" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="929.6" y="405" width="0.9" height="15.0" fill="rgb(224,135,50)" rx="2" ry="2" />
<text  x="932.62" y="415.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="947.8" y="437" width="0.2" height="15.0" fill="rgb(235,202,28)" rx="2" ry="2" />
<text  x="950.78" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="1103.3" y="437" width="0.2" height="15.0" fill="rgb(236,94,38)" rx="2" ry="2" />
<text  x="1106.28" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (6 samples, 0.12%)</title><rect x="85.4" y="485" width="1.3" height="15.0" fill="rgb(247,105,8)" rx="2" ry="2" />
<text  x="88.37" y="495.5" ></text>
</g>
<g >
<title>schema::get_partitioner (2 samples, 0.04%)</title><rect x="935.1" y="437" width="0.4" height="15.0" fill="rgb(254,172,26)" rx="2" ry="2" />
<text  x="938.07" y="447.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (49 samples, 0.94%)</title><rect x="504.2" y="309" width="11.1" height="15.0" fill="rgb(239,223,8)" rx="2" ry="2" />
<text  x="507.20" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (4 samples, 0.08%)</title><rect x="1026.3" y="245" width="0.9" height="15.0" fill="rgb(244,60,13)" rx="2" ry="2" />
<text  x="1029.33" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="672.4" y="501" width="0.7" height="15.0" fill="rgb(239,189,21)" rx="2" ry="2" />
<text  x="675.42" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setTokenStream (1 samples, 0.02%)</title><rect x="22.5" y="437" width="0.2" height="15.0" fill="rgb(230,69,49)" rx="2" ry="2" />
<text  x="25.49" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1128.3" y="133" width="0.2" height="15.0" fill="rgb(213,11,50)" rx="2" ry="2" />
<text  x="1131.25" y="143.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%)</title><rect x="1047.2" y="373" width="0.2" height="15.0" fill="rgb(216,62,48)" rx="2" ry="2" />
<text  x="1050.21" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="584.8" y="325" width="0.2" height="15.0" fill="rgb(235,11,46)" rx="2" ry="2" />
<text  x="587.79" y="335.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (2 samples, 0.04%)</title><rect x="551.0" y="357" width="0.4" height="15.0" fill="rgb(232,205,23)" rx="2" ry="2" />
<text  x="553.97" y="367.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="806.1" y="133" width="0.3" height="15.0" fill="rgb(213,155,52)" rx="2" ry="2" />
<text  x="809.13" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="768.9" y="357" width="0.2" height="15.0" fill="rgb(222,171,34)" rx="2" ry="2" />
<text  x="771.90" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="198.6" y="293" width="0.5" height="15.0" fill="rgb(221,79,41)" rx="2" ry="2" />
<text  x="201.65" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="103.3" y="453" width="0.2" height="15.0" fill="rgb(240,56,14)" rx="2" ry="2" />
<text  x="106.30" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (6 samples, 0.12%)</title><rect x="268.1" y="181" width="1.4" height="15.0" fill="rgb(221,205,8)" rx="2" ry="2" />
<text  x="271.11" y="191.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1000.7" y="309" width="2.0" height="15.0" fill="rgb(207,16,50)" rx="2" ry="2" />
<text  x="1003.67" y="319.5" ></text>
</g>
<g >
<title>auth::resource::resource (6 samples, 0.12%)</title><rect x="775.0" y="405" width="1.4" height="15.0" fill="rgb(218,127,22)" rx="2" ry="2" />
<text  x="778.03" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="372.5" y="213" width="0.7" height="15.0" fill="rgb(229,133,5)" rx="2" ry="2" />
<text  x="375.54" y="223.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="624.1" y="453" width="0.2" height="15.0" fill="rgb(247,175,27)" rx="2" ry="2" />
<text  x="627.06" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="362.3" y="213" width="0.2" height="15.0" fill="rgb(231,25,29)" rx="2" ry="2" />
<text  x="365.32" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="768.9" y="341" width="0.2" height="15.0" fill="rgb(214,102,0)" rx="2" ry="2" />
<text  x="771.90" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1123.0" y="229" width="0.3" height="15.0" fill="rgb(215,6,6)" rx="2" ry="2" />
<text  x="1126.03" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="39.3" y="357" width="0.4" height="15.0" fill="rgb(239,229,24)" rx="2" ry="2" />
<text  x="42.28" y="367.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (2 samples, 0.04%)</title><rect x="1131.0" y="181" width="0.4" height="15.0" fill="rgb(236,169,34)" rx="2" ry="2" />
<text  x="1133.98" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="328.3" y="373" width="0.2" height="15.0" fill="rgb(235,207,15)" rx="2" ry="2" />
<text  x="331.27" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (3 samples, 0.06%)</title><rect x="373.2" y="213" width="0.7" height="15.0" fill="rgb(205,138,36)" rx="2" ry="2" />
<text  x="376.22" y="223.5" ></text>
</g>
<g >
<title>partition_key::partition_key (3 samples, 0.06%)</title><rect x="1121.2" y="261" width="0.7" height="15.0" fill="rgb(238,162,9)" rx="2" ry="2" />
<text  x="1124.22" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%)</title><rect x="433.6" y="245" width="0.9" height="15.0" fill="rgb(242,170,44)" rx="2" ry="2" />
<text  x="436.60" y="255.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="61.5" y="197" width="0.3" height="15.0" fill="rgb(243,181,24)" rx="2" ry="2" />
<text  x="64.53" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (4 samples, 0.08%)</title><rect x="70.8" y="437" width="0.9" height="15.0" fill="rgb(233,202,46)" rx="2" ry="2" />
<text  x="73.84" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="139.8" y="485" width="0.3" height="15.0" fill="rgb(241,187,26)" rx="2" ry="2" />
<text  x="142.85" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (6 samples, 0.12%)</title><rect x="35.0" y="293" width="1.3" height="15.0" fill="rgb(222,143,51)" rx="2" ry="2" />
<text  x="37.97" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="607.0" y="421" width="0.3" height="15.0" fill="rgb(209,206,15)" rx="2" ry="2" />
<text  x="610.04" y="431.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (5 samples, 0.10%)</title><rect x="1155.3" y="485" width="1.1" height="15.0" fill="rgb(211,219,33)" rx="2" ry="2" />
<text  x="1158.27" y="495.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::delete_segments (1 samples, 0.02%)</title><rect x="108.3" y="533" width="0.2" height="15.0" fill="rgb(226,193,7)" rx="2" ry="2" />
<text  x="111.30" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (1 samples, 0.02%)</title><rect x="570.5" y="405" width="0.2" height="15.0" fill="rgb(208,45,15)" rx="2" ry="2" />
<text  x="573.49" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="692.4" y="501" width="0.7" height="15.0" fill="rgb(225,117,52)" rx="2" ry="2" />
<text  x="695.39" y="511.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;locator::snitch_ptr&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="723.0" y="149" width="0.3" height="15.0" fill="rgb(252,178,46)" rx="2" ry="2" />
<text  x="726.04" y="159.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="49.0" y="309" width="0.3" height="15.0" fill="rgb(221,106,44)" rx="2" ry="2" />
<text  x="52.05" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="111.0" y="325" width="0.2" height="15.0" fill="rgb(212,36,51)" rx="2" ry="2" />
<text  x="114.02" y="335.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="657.0" y="437" width="0.2" height="15.0" fill="rgb(237,216,27)" rx="2" ry="2" />
<text  x="659.98" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="705.3" y="485" width="0.7" height="15.0" fill="rgb(209,97,52)" rx="2" ry="2" />
<text  x="708.33" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="782.1" y="373" width="0.2" height="15.0" fill="rgb(234,8,29)" rx="2" ry="2" />
<text  x="785.06" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="52.7" y="197" width="0.2" height="15.0" fill="rgb(231,195,18)" rx="2" ry="2" />
<text  x="55.68" y="207.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="475.6" y="293" width="0.2" height="15.0" fill="rgb(205,122,34)" rx="2" ry="2" />
<text  x="478.60" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="820.2" y="421" width="2.5" height="15.0" fill="rgb(246,147,4)" rx="2" ry="2" />
<text  x="823.20" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="39.5" y="245" width="0.2" height="15.0" fill="rgb(251,205,4)" rx="2" ry="2" />
<text  x="42.51" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="901.2" y="341" width="0.5" height="15.0" fill="rgb(222,117,35)" rx="2" ry="2" />
<text  x="904.24" y="351.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="689.2" y="501" width="0.5" height="15.0" fill="rgb(212,224,46)" rx="2" ry="2" />
<text  x="692.22" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="915.8" y="373" width="1.3" height="15.0" fill="rgb(245,166,30)" rx="2" ry="2" />
<text  x="918.77" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%)</title><rect x="296.9" y="261" width="3.2" height="15.0" fill="rgb(239,25,7)" rx="2" ry="2" />
<text  x="299.94" y="271.5" ></text>
</g>
<g >
<title>checked_file_impl::close (1 samples, 0.02%)</title><rect x="696.9" y="501" width="0.3" height="15.0" fill="rgb(241,138,15)" rx="2" ry="2" />
<text  x="699.93" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (9 samples, 0.17%)</title><rect x="755.3" y="325" width="2.0" height="15.0" fill="rgb(247,173,38)" rx="2" ry="2" />
<text  x="758.28" y="335.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="671.3" y="437" width="0.2" height="15.0" fill="rgb(216,200,15)" rx="2" ry="2" />
<text  x="674.28" y="447.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="572.3" y="373" width="2.3" height="15.0" fill="rgb(253,17,22)" rx="2" ry="2" />
<text  x="575.30" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="997.0" y="325" width="0.3" height="15.0" fill="rgb(238,189,16)" rx="2" ry="2" />
<text  x="1000.04" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_line (2 samples, 0.04%)</title><rect x="28.8" y="293" width="0.5" height="15.0" fill="rgb(253,87,2)" rx="2" ry="2" />
<text  x="31.84" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="451.8" y="325" width="0.4" height="15.0" fill="rgb(220,68,38)" rx="2" ry="2" />
<text  x="454.76" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (427 samples, 8.21%)</title><rect x="203.4" y="309" width="96.9" height="15.0" fill="rgb(232,49,34)" rx="2" ry="2" />
<text  x="206.41" y="319.5" >logalloc::a..</text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="83.8" y="549" width="0.2" height="15.0" fill="rgb(232,89,44)" rx="2" ry="2" />
<text  x="86.78" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (2 samples, 0.04%)</title><rect x="102.2" y="453" width="0.4" height="15.0" fill="rgb(243,148,26)" rx="2" ry="2" />
<text  x="105.17" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (24 samples, 0.46%)</title><rect x="923.3" y="405" width="5.4" height="15.0" fill="rgb(242,194,48)" rx="2" ry="2" />
<text  x="926.26" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="57.9" y="165" width="0.2" height="15.0" fill="rgb(217,56,45)" rx="2" ry="2" />
<text  x="60.90" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (102 samples, 1.96%)</title><rect x="789.6" y="325" width="23.1" height="15.0" fill="rgb(209,171,21)" rx="2" ry="2" />
<text  x="792.55" y="335.5" >s..</text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="917.8" y="405" width="0.7" height="15.0" fill="rgb(235,0,10)" rx="2" ry="2" />
<text  x="920.81" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (7 samples, 0.13%)</title><rect x="1114.4" y="453" width="1.6" height="15.0" fill="rgb(210,52,3)" rx="2" ry="2" />
<text  x="1117.41" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="841.1" y="453" width="0.2" height="15.0" fill="rgb(228,156,39)" rx="2" ry="2" />
<text  x="844.09" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="52.7" y="229" width="0.7" height="15.0" fill="rgb(219,0,39)" rx="2" ry="2" />
<text  x="55.68" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::setter, false&gt;::make&lt;column_definition const&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="72.2" y="437" width="0.2" height="15.0" fill="rgb(249,163,5)" rx="2" ry="2" />
<text  x="75.20" y="447.5" ></text>
</g>
<g >
<title>schema::make_column_specification (1 samples, 0.02%)</title><rect x="110.8" y="389" width="0.2" height="15.0" fill="rgb(240,185,22)" rx="2" ry="2" />
<text  x="113.79" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="74.9" y="325" width="0.3" height="15.0" fill="rgb(247,182,9)" rx="2" ry="2" />
<text  x="77.92" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="63.1" y="165" width="0.2" height="15.0" fill="rgb(236,101,32)" rx="2" ry="2" />
<text  x="66.12" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="181" width="0.4" height="15.0" fill="rgb(228,193,28)" rx="2" ry="2" />
<text  x="57.27" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="126.0" y="485" width="0.5" height="15.0" fill="rgb(244,74,26)" rx="2" ry="2" />
<text  x="129.00" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="84.0" y="533" width="2.7" height="15.0" fill="rgb(235,104,29)" rx="2" ry="2" />
<text  x="87.01" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::untyped_result_set, false&gt;::make&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="657.0" y="517" width="0.2" height="15.0" fill="rgb(220,117,13)" rx="2" ry="2" />
<text  x="659.98" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="1130.3" y="165" width="0.7" height="15.0" fill="rgb(233,145,52)" rx="2" ry="2" />
<text  x="1133.30" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.13%)</title><rect x="837.2" y="437" width="1.6" height="15.0" fill="rgb(208,202,25)" rx="2" ry="2" />
<text  x="840.23" y="447.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="130.3" y="485" width="0.2" height="15.0" fill="rgb(251,82,35)" rx="2" ry="2" />
<text  x="133.32" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1106.0" y="437" width="0.2" height="15.0" fill="rgb(232,25,15)" rx="2" ry="2" />
<text  x="1109.01" y="447.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (10 samples, 0.19%)</title><rect x="489.9" y="357" width="2.3" height="15.0" fill="rgb(241,153,39)" rx="2" ry="2" />
<text  x="492.90" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="874.0" y="293" width="0.2" height="15.0" fill="rgb(222,155,47)" rx="2" ry="2" />
<text  x="877.00" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1142.1" y="501" width="0.2" height="15.0" fill="rgb(253,79,48)" rx="2" ry="2" />
<text  x="1145.10" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.5" y="245" width="0.3" height="15.0" fill="rgb(229,13,46)" rx="2" ry="2" />
<text  x="49.55" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (19 samples, 0.37%)</title><rect x="1160.5" y="517" width="4.3" height="15.0" fill="rgb(227,209,42)" rx="2" ry="2" />
<text  x="1163.49" y="527.5" ></text>
</g>
<g >
<title>schema::cdc_options (1 samples, 0.02%)</title><rect x="869.5" y="389" width="0.2" height="15.0" fill="rgb(221,171,49)" rx="2" ry="2" />
<text  x="872.46" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="834.7" y="453" width="0.3" height="15.0" fill="rgb(206,216,40)" rx="2" ry="2" />
<text  x="837.73" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="34.5" y="277" width="0.2" height="15.0" fill="rgb(214,164,5)" rx="2" ry="2" />
<text  x="37.52" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (59 samples, 1.14%)</title><rect x="46.5" y="357" width="13.4" height="15.0" fill="rgb(254,80,9)" rx="2" ry="2" />
<text  x="49.55" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2 samples, 0.04%)</title><rect x="870.6" y="405" width="0.5" height="15.0" fill="rgb(216,107,18)" rx="2" ry="2" />
<text  x="873.60" y="415.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="18.2" y="421" width="0.2" height="15.0" fill="rgb(217,121,21)" rx="2" ry="2" />
<text  x="21.17" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="908.1" y="405" width="0.2" height="15.0" fill="rgb(252,198,49)" rx="2" ry="2" />
<text  x="911.05" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1118.9" y="389" width="7.8" height="15.0" fill="rgb(240,96,1)" rx="2" ry="2" />
<text  x="1121.95" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_range&lt;std::__detail::_Node_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, false, true&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="109.7" y="437" width="0.2" height="15.0" fill="rgb(233,142,53)" rx="2" ry="2" />
<text  x="112.66" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="60.2" y="373" width="0.2" height="15.0" fill="rgb(207,138,28)" rx="2" ry="2" />
<text  x="63.17" y="383.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%)</title><rect x="697.2" y="469" width="0.2" height="15.0" fill="rgb(221,228,53)" rx="2" ry="2" />
<text  x="700.16" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="218.4" y="261" width="0.2" height="15.0" fill="rgb(243,129,52)" rx="2" ry="2" />
<text  x="221.40" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="860.4" y="501" width="0.4" height="15.0" fill="rgb(245,21,28)" rx="2" ry="2" />
<text  x="863.38" y="511.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (35 samples, 0.67%)</title><rect x="1118.7" y="517" width="8.0" height="15.0" fill="rgb(236,119,9)" rx="2" ry="2" />
<text  x="1121.72" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="429.7" y="229" width="1.0" height="15.0" fill="rgb(253,41,32)" rx="2" ry="2" />
<text  x="432.74" y="239.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1126.7" y="325" width="0.2" height="15.0" fill="rgb(205,101,33)" rx="2" ry="2" />
<text  x="1129.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.10%)</title><rect x="604.3" y="453" width="1.1" height="15.0" fill="rgb(236,16,27)" rx="2" ry="2" />
<text  x="607.31" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (62 samples, 1.19%)</title><rect x="187.5" y="309" width="14.1" height="15.0" fill="rgb(230,36,49)" rx="2" ry="2" />
<text  x="190.52" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="61.5" y="181" width="0.3" height="15.0" fill="rgb(238,228,11)" rx="2" ry="2" />
<text  x="64.53" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1108.7" y="405" width="0.3" height="15.0" fill="rgb(209,55,11)" rx="2" ry="2" />
<text  x="1111.73" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="791.1" y="261" width="0.5" height="15.0" fill="rgb(245,229,52)" rx="2" ry="2" />
<text  x="794.14" y="271.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (2 samples, 0.04%)</title><rect x="73.1" y="421" width="0.5" height="15.0" fill="rgb(233,203,12)" rx="2" ry="2" />
<text  x="76.11" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.3" y="261" width="0.2" height="15.0" fill="rgb(246,118,3)" rx="2" ry="2" />
<text  x="42.28" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="1077.2" y="373" width="0.2" height="15.0" fill="rgb(253,119,23)" rx="2" ry="2" />
<text  x="1080.18" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="610.2" y="421" width="0.2" height="15.0" fill="rgb(247,41,38)" rx="2" ry="2" />
<text  x="613.22" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.3" y="149" width="0.4" height="15.0" fill="rgb(248,166,34)" rx="2" ry="2" />
<text  x="57.27" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="894.7" y="373" width="0.2" height="15.0" fill="rgb(209,4,47)" rx="2" ry="2" />
<text  x="897.66" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="722.8" y="501" width="0.2" height="15.0" fill="rgb(220,72,53)" rx="2" ry="2" />
<text  x="725.81" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="110.1" y="437" width="0.2" height="15.0" fill="rgb(237,207,39)" rx="2" ry="2" />
<text  x="113.11" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (7 samples, 0.13%)</title><rect x="773.2" y="421" width="1.6" height="15.0" fill="rgb(214,46,41)" rx="2" ry="2" />
<text  x="776.21" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%)</title><rect x="81.1" y="533" width="0.2" height="15.0" fill="rgb(224,165,23)" rx="2" ry="2" />
<text  x="84.05" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.7" y="389" width="0.2" height="15.0" fill="rgb(221,211,18)" rx="2" ry="2" />
<text  x="70.66" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="68.6" y="421" width="0.2" height="15.0" fill="rgb(207,82,22)" rx="2" ry="2" />
<text  x="71.57" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="723.0" y="405" width="0.3" height="15.0" fill="rgb(214,121,16)" rx="2" ry="2" />
<text  x="726.04" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.5" y="533" width="0.2" height="15.0" fill="rgb(251,162,31)" rx="2" ry="2" />
<text  x="20.49" y="543.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1076.9" y="341" width="0.3" height="15.0" fill="rgb(220,3,40)" rx="2" ry="2" />
<text  x="1079.95" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (8 samples, 0.15%)</title><rect x="441.1" y="245" width="1.8" height="15.0" fill="rgb(232,79,20)" rx="2" ry="2" />
<text  x="444.09" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="773.7" y="373" width="1.1" height="15.0" fill="rgb(233,158,14)" rx="2" ry="2" />
<text  x="776.66" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="696.0" y="293" width="0.3" height="15.0" fill="rgb(247,152,54)" rx="2" ry="2" />
<text  x="699.03" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.1" y="213" width="0.2" height="15.0" fill="rgb(252,72,15)" rx="2" ry="2" />
<text  x="44.10" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (16 samples, 0.31%)</title><rect x="871.5" y="405" width="3.6" height="15.0" fill="rgb(218,21,28)" rx="2" ry="2" />
<text  x="874.50" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mA (2 samples, 0.04%)</title><rect x="33.8" y="277" width="0.5" height="15.0" fill="rgb(207,140,34)" rx="2" ry="2" />
<text  x="36.84" y="287.5" ></text>
</g>
<g >
<title>__popcountdi2 (1 samples, 0.02%)</title><rect x="15.7" y="645" width="0.2" height="15.0" fill="rgb(235,184,13)" rx="2" ry="2" />
<text  x="18.68" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="1141.6" y="517" width="0.7" height="15.0" fill="rgb(242,116,27)" rx="2" ry="2" />
<text  x="1144.65" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="666.5" y="437" width="0.2" height="15.0" fill="rgb(217,144,3)" rx="2" ry="2" />
<text  x="669.51" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="722.4" y="501" width="0.2" height="15.0" fill="rgb(247,188,41)" rx="2" ry="2" />
<text  x="725.36" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (22 samples, 0.42%)</title><rect x="272.9" y="245" width="5.0" height="15.0" fill="rgb(217,162,54)" rx="2" ry="2" />
<text  x="275.88" y="255.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="16.8" y="517" width="0.2" height="15.0" fill="rgb(250,228,7)" rx="2" ry="2" />
<text  x="19.81" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.3" y="101" width="0.2" height="15.0" fill="rgb(231,134,50)" rx="2" ry="2" />
<text  x="59.31" y="111.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.10%)</title><rect x="103.8" y="437" width="1.1" height="15.0" fill="rgb(226,22,26)" rx="2" ry="2" />
<text  x="106.76" y="447.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%)</title><rect x="109.0" y="437" width="0.2" height="15.0" fill="rgb(207,143,39)" rx="2" ry="2" />
<text  x="111.98" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (8 samples, 0.15%)</title><rect x="820.7" y="405" width="1.8" height="15.0" fill="rgb(221,104,6)" rx="2" ry="2" />
<text  x="823.65" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="17.9" y="517" width="0.3" height="15.0" fill="rgb(248,123,4)" rx="2" ry="2" />
<text  x="20.95" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="38.1" y="309" width="0.3" height="15.0" fill="rgb(241,168,12)" rx="2" ry="2" />
<text  x="41.15" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="814.8" y="309" width="0.4" height="15.0" fill="rgb(254,3,47)" rx="2" ry="2" />
<text  x="817.75" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (8 samples, 0.15%)</title><rect x="46.5" y="277" width="1.9" height="15.0" fill="rgb(221,216,17)" rx="2" ry="2" />
<text  x="49.55" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="930.5" y="437" width="0.5" height="15.0" fill="rgb(220,54,49)" rx="2" ry="2" />
<text  x="933.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (4 samples, 0.08%)</title><rect x="603.4" y="453" width="0.9" height="15.0" fill="rgb(238,184,23)" rx="2" ry="2" />
<text  x="606.41" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1020.9" y="197" width="0.2" height="15.0" fill="rgb(251,113,18)" rx="2" ry="2" />
<text  x="1023.88" y="207.5" ></text>
</g>
<g >
<title>make_combined_reader (62 samples, 1.19%)</title><rect x="471.7" y="357" width="14.1" height="15.0" fill="rgb(237,196,28)" rx="2" ry="2" />
<text  x="474.74" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1131.9" y="213" width="0.2" height="15.0" fill="rgb(219,67,49)" rx="2" ry="2" />
<text  x="1134.89" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (4 samples, 0.08%)</title><rect x="543.2" y="325" width="1.0" height="15.0" fill="rgb(254,1,7)" rx="2" ry="2" />
<text  x="546.25" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (4 samples, 0.08%)</title><rect x="619.1" y="469" width="0.9" height="15.0" fill="rgb(237,129,18)" rx="2" ry="2" />
<text  x="622.07" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="56.1" y="293" width="0.4" height="15.0" fill="rgb(250,220,38)" rx="2" ry="2" />
<text  x="59.08" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="861.1" y="453" width="1.3" height="15.0" fill="rgb(217,102,5)" rx="2" ry="2" />
<text  x="864.06" y="463.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="630.4" y="405" width="1.8" height="15.0" fill="rgb(246,133,44)" rx="2" ry="2" />
<text  x="633.42" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="62.2" y="309" width="0.2" height="15.0" fill="rgb(222,31,47)" rx="2" ry="2" />
<text  x="65.21" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="440.6" y="213" width="0.3" height="15.0" fill="rgb(214,117,49)" rx="2" ry="2" />
<text  x="443.64" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="817.5" y="373" width="0.2" height="15.0" fill="rgb(241,73,51)" rx="2" ry="2" />
<text  x="820.48" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="34.5" y="293" width="0.2" height="15.0" fill="rgb(218,91,8)" rx="2" ry="2" />
<text  x="37.52" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="157.8" y="453" width="0.9" height="15.0" fill="rgb(239,186,15)" rx="2" ry="2" />
<text  x="160.78" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="21.8" y="437" width="0.2" height="15.0" fill="rgb(241,68,40)" rx="2" ry="2" />
<text  x="24.80" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1164.1" y="453" width="0.2" height="15.0" fill="rgb(236,33,4)" rx="2" ry="2" />
<text  x="1167.12" y="463.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (2 samples, 0.04%)</title><rect x="578.9" y="373" width="0.4" height="15.0" fill="rgb(242,132,39)" rx="2" ry="2" />
<text  x="581.89" y="383.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="109.7" y="485" width="0.2" height="15.0" fill="rgb(239,220,40)" rx="2" ry="2" />
<text  x="112.66" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (5 samples, 0.10%)</title><rect x="128.5" y="469" width="1.1" height="15.0" fill="rgb(220,68,1)" rx="2" ry="2" />
<text  x="131.50" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="657.9" y="517" width="0.4" height="15.0" fill="rgb(209,112,9)" rx="2" ry="2" />
<text  x="660.89" y="527.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.77%)</title><rect x="1180.9" y="661" width="9.1" height="15.0" fill="rgb(243,145,3)" rx="2" ry="2" />
<text  x="1183.92" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="449.7" y="309" width="0.2" height="15.0" fill="rgb(209,126,24)" rx="2" ry="2" />
<text  x="452.72" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="868.3" y="421" width="0.3" height="15.0" fill="rgb(236,38,27)" rx="2" ry="2" />
<text  x="871.33" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1020.2" y="165" width="0.2" height="15.0" fill="rgb(235,16,7)" rx="2" ry="2" />
<text  x="1023.20" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (10 samples, 0.19%)</title><rect x="992.5" y="325" width="2.3" height="15.0" fill="rgb(237,8,40)" rx="2" ry="2" />
<text  x="995.50" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="1125.5" y="325" width="0.3" height="15.0" fill="rgb(240,26,35)" rx="2" ry="2" />
<text  x="1128.53" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="748.5" y="389" width="0.4" height="15.0" fill="rgb(245,190,54)" rx="2" ry="2" />
<text  x="751.46" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="44.7" y="229" width="0.5" height="15.0" fill="rgb(227,151,16)" rx="2" ry="2" />
<text  x="47.73" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%)</title><rect x="725.5" y="533" width="0.3" height="15.0" fill="rgb(239,32,51)" rx="2" ry="2" />
<text  x="728.54" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="794.1" y="229" width="1.6" height="15.0" fill="rgb(249,190,44)" rx="2" ry="2" />
<text  x="797.09" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="203.6" y="293" width="0.3" height="15.0" fill="rgb(209,22,54)" rx="2" ry="2" />
<text  x="206.64" y="303.5" ></text>
</g>
<g >
<title>hwloc_compare_types (1 samples, 0.02%)</title><rect x="83.6" y="645" width="0.2" height="15.0" fill="rgb(236,110,6)" rx="2" ry="2" />
<text  x="86.55" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1128.0" y="149" width="0.3" height="15.0" fill="rgb(244,118,31)" rx="2" ry="2" />
<text  x="1131.03" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="52.7" y="245" width="0.7" height="15.0" fill="rgb(241,168,43)" rx="2" ry="2" />
<text  x="55.68" y="255.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="84.2" y="469" width="0.3" height="15.0" fill="rgb(250,207,6)" rx="2" ry="2" />
<text  x="87.23" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="926.9" y="373" width="0.4" height="15.0" fill="rgb(236,44,11)" rx="2" ry="2" />
<text  x="929.89" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="719.6" y="485" width="0.3" height="15.0" fill="rgb(234,151,43)" rx="2" ry="2" />
<text  x="722.63" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="45.2" y="277" width="0.4" height="15.0" fill="rgb(209,174,51)" rx="2" ry="2" />
<text  x="48.19" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (186 samples, 3.58%)</title><rect x="777.5" y="421" width="42.2" height="15.0" fill="rgb(221,45,47)" rx="2" ry="2" />
<text  x="780.52" y="431.5" >std..</text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.12%)</title><rect x="625.0" y="469" width="1.3" height="15.0" fill="rgb(244,135,4)" rx="2" ry="2" />
<text  x="627.97" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="1124.8" y="261" width="0.3" height="15.0" fill="rgb(205,162,21)" rx="2" ry="2" />
<text  x="1127.85" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.10%)</title><rect x="315.1" y="357" width="1.1" height="15.0" fill="rgb(226,10,42)" rx="2" ry="2" />
<text  x="318.10" y="367.5" ></text>
</g>
<g >
<title>posix_memalign (4 samples, 0.08%)</title><rect x="251.1" y="117" width="0.9" height="15.0" fill="rgb(214,194,21)" rx="2" ry="2" />
<text  x="254.09" y="127.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="29.5" y="293" width="0.7" height="15.0" fill="rgb(253,67,6)" rx="2" ry="2" />
<text  x="32.52" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="574.1" y="325" width="0.2" height="15.0" fill="rgb(241,48,33)" rx="2" ry="2" />
<text  x="577.12" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="708.7" y="501" width="0.3" height="15.0" fill="rgb(212,229,37)" rx="2" ry="2" />
<text  x="711.74" y="511.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="846.5" y="437" width="0.9" height="15.0" fill="rgb(221,2,46)" rx="2" ry="2" />
<text  x="849.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="74.0" y="325" width="0.2" height="15.0" fill="rgb(227,187,10)" rx="2" ry="2" />
<text  x="77.02" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="462.2" y="389" width="0.2" height="15.0" fill="rgb(230,213,20)" rx="2" ry="2" />
<text  x="465.20" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="211.8" y="245" width="0.2" height="15.0" fill="rgb(232,20,17)" rx="2" ry="2" />
<text  x="214.81" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%)</title><rect x="745.1" y="421" width="0.4" height="15.0" fill="rgb(238,178,28)" rx="2" ry="2" />
<text  x="748.06" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="87.0" y="437" width="0.2" height="15.0" fill="rgb(211,189,6)" rx="2" ry="2" />
<text  x="89.96" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (5 samples, 0.10%)</title><rect x="300.3" y="309" width="1.2" height="15.0" fill="rgb(217,157,32)" rx="2" ry="2" />
<text  x="303.35" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (14 samples, 0.27%)</title><rect x="1096.7" y="405" width="3.2" height="15.0" fill="rgb(254,222,38)" rx="2" ry="2" />
<text  x="1099.70" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (6 samples, 0.12%)</title><rect x="773.4" y="389" width="1.4" height="15.0" fill="rgb(243,21,18)" rx="2" ry="2" />
<text  x="776.44" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="1045.2" y="293" width="0.4" height="15.0" fill="rgb(216,40,33)" rx="2" ry="2" />
<text  x="1048.17" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (8 samples, 0.15%)</title><rect x="804.8" y="165" width="1.8" height="15.0" fill="rgb(229,81,45)" rx="2" ry="2" />
<text  x="807.76" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="685.8" y="485" width="0.9" height="15.0" fill="rgb(234,101,19)" rx="2" ry="2" />
<text  x="688.81" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="785.2" y="309" width="0.7" height="15.0" fill="rgb(226,191,42)" rx="2" ry="2" />
<text  x="788.24" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (2 samples, 0.04%)</title><rect x="19.1" y="549" width="0.4" height="15.0" fill="rgb(233,87,44)" rx="2" ry="2" />
<text  x="22.08" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="24.1" y="245" width="0.2" height="15.0" fill="rgb(238,115,50)" rx="2" ry="2" />
<text  x="27.07" y="255.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1153.9" y="501" width="0.2" height="15.0" fill="rgb(243,68,28)" rx="2" ry="2" />
<text  x="1156.91" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="56.1" y="165" width="0.4" height="15.0" fill="rgb(250,63,36)" rx="2" ry="2" />
<text  x="59.08" y="175.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (9 samples, 0.17%)</title><rect x="1093.3" y="421" width="2.0" height="15.0" fill="rgb(231,8,29)" rx="2" ry="2" />
<text  x="1096.29" y="431.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%)</title><rect x="1123.5" y="229" width="0.2" height="15.0" fill="rgb(242,130,13)" rx="2" ry="2" />
<text  x="1126.49" y="239.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="110.6" y="405" width="0.2" height="15.0" fill="rgb(219,197,9)" rx="2" ry="2" />
<text  x="113.57" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1109.6" y="453" width="0.3" height="15.0" fill="rgb(210,86,19)" rx="2" ry="2" />
<text  x="1112.64" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.5" y="405" width="0.3" height="15.0" fill="rgb(251,18,45)" rx="2" ry="2" />
<text  x="69.53" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="799.8" y="181" width="0.4" height="15.0" fill="rgb(224,45,48)" rx="2" ry="2" />
<text  x="802.77" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="53.6" y="261" width="0.2" height="15.0" fill="rgb(230,152,48)" rx="2" ry="2" />
<text  x="56.59" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (14 samples, 0.27%)</title><rect x="420.7" y="181" width="3.1" height="15.0" fill="rgb(236,4,17)" rx="2" ry="2" />
<text  x="423.66" y="191.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="111.0" y="357" width="0.2" height="15.0" fill="rgb(217,159,26)" rx="2" ry="2" />
<text  x="114.02" y="367.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (1 samples, 0.02%)</title><rect x="781.8" y="373" width="0.3" height="15.0" fill="rgb(253,185,48)" rx="2" ry="2" />
<text  x="784.84" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="262.9" y="181" width="0.2" height="15.0" fill="rgb(221,187,29)" rx="2" ry="2" />
<text  x="265.89" y="191.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (3 samples, 0.06%)</title><rect x="660.6" y="437" width="0.7" height="15.0" fill="rgb(207,99,47)" rx="2" ry="2" />
<text  x="663.61" y="447.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%)</title><rect x="1117.1" y="469" width="0.3" height="15.0" fill="rgb(243,132,28)" rx="2" ry="2" />
<text  x="1120.13" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (6 samples, 0.12%)</title><rect x="453.1" y="389" width="1.4" height="15.0" fill="rgb(224,184,53)" rx="2" ry="2" />
<text  x="456.12" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.7" y="373" width="0.2" height="15.0" fill="rgb(211,24,40)" rx="2" ry="2" />
<text  x="67.71" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="714.2" y="485" width="0.4" height="15.0" fill="rgb(240,100,43)" rx="2" ry="2" />
<text  x="717.19" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1050.8" y="325" width="1.0" height="15.0" fill="rgb(208,216,13)" rx="2" ry="2" />
<text  x="1053.84" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (43 samples, 0.83%)</title><rect x="711.2" y="501" width="9.8" height="15.0" fill="rgb(228,97,31)" rx="2" ry="2" />
<text  x="714.24" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="16.1" y="549" width="0.3" height="15.0" fill="rgb(218,210,45)" rx="2" ry="2" />
<text  x="19.13" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (1 samples, 0.02%)</title><rect x="696.5" y="485" width="0.2" height="15.0" fill="rgb(228,211,46)" rx="2" ry="2" />
<text  x="699.48" y="495.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation&lt;bytes_ostream&gt;::writer_of_mutation (1 samples, 0.02%)</title><rect x="1131.4" y="197" width="0.3" height="15.0" fill="rgb(216,134,24)" rx="2" ry="2" />
<text  x="1134.43" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (13 samples, 0.25%)</title><rect x="60.9" y="389" width="2.9" height="15.0" fill="rgb(230,204,3)" rx="2" ry="2" />
<text  x="63.85" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (8 samples, 0.15%)</title><rect x="808.6" y="293" width="1.8" height="15.0" fill="rgb(241,5,38)" rx="2" ry="2" />
<text  x="811.62" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (12 samples, 0.23%)</title><rect x="1042.9" y="357" width="2.7" height="15.0" fill="rgb(247,50,52)" rx="2" ry="2" />
<text  x="1045.90" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%)</title><rect x="373.2" y="197" width="0.5" height="15.0" fill="rgb(226,0,21)" rx="2" ry="2" />
<text  x="376.22" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="715.1" y="469" width="0.2" height="15.0" fill="rgb(209,118,47)" rx="2" ry="2" />
<text  x="718.09" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="397.3" y="181" width="0.2" height="15.0" fill="rgb(224,150,48)" rx="2" ry="2" />
<text  x="400.28" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.9" y="469" width="0.3" height="15.0" fill="rgb(218,93,4)" rx="2" ry="2" />
<text  x="20.95" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1037.7" y="325" width="0.2" height="15.0" fill="rgb(212,224,43)" rx="2" ry="2" />
<text  x="1040.68" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%)</title><rect x="736.2" y="373" width="3.0" height="15.0" fill="rgb(219,189,44)" rx="2" ry="2" />
<text  x="739.21" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="1165.5" y="469" width="0.2" height="15.0" fill="rgb(240,69,52)" rx="2" ry="2" />
<text  x="1168.48" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.8" y="213" width="0.2" height="15.0" fill="rgb(212,217,8)" rx="2" ry="2" />
<text  x="44.78" y="223.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (35 samples, 0.67%)</title><rect x="603.2" y="469" width="7.9" height="15.0" fill="rgb(229,209,11)" rx="2" ry="2" />
<text  x="606.18" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (12 samples, 0.23%)</title><rect x="948.5" y="421" width="2.7" height="15.0" fill="rgb(254,141,18)" rx="2" ry="2" />
<text  x="951.46" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="897.4" y="325" width="0.9" height="15.0" fill="rgb(253,82,3)" rx="2" ry="2" />
<text  x="900.38" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="1133.9" y="517" width="0.5" height="15.0" fill="rgb(243,181,49)" rx="2" ry="2" />
<text  x="1136.93" y="527.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="854.9" y="389" width="2.3" height="15.0" fill="rgb(248,85,11)" rx="2" ry="2" />
<text  x="857.93" y="399.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.08%)</title><rect x="1120.3" y="261" width="0.9" height="15.0" fill="rgb(227,137,18)" rx="2" ry="2" />
<text  x="1123.31" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="67.2" y="341" width="0.2" height="15.0" fill="rgb(237,170,49)" rx="2" ry="2" />
<text  x="70.21" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="282.2" y="261" width="0.2" height="15.0" fill="rgb(227,27,44)" rx="2" ry="2" />
<text  x="285.19" y="271.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%)</title><rect x="84.0" y="645" width="2.7" height="15.0" fill="rgb(223,111,40)" rx="2" ry="2" />
<text  x="87.01" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="217.0" y="229" width="0.7" height="15.0" fill="rgb(214,77,28)" rx="2" ry="2" />
<text  x="220.03" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="69.9" y="421" width="0.3" height="15.0" fill="rgb(213,44,8)" rx="2" ry="2" />
<text  x="72.93" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="322.4" y="325" width="0.2" height="15.0" fill="rgb(241,161,17)" rx="2" ry="2" />
<text  x="325.37" y="335.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%)</title><rect x="696.9" y="437" width="0.3" height="15.0" fill="rgb(236,180,42)" rx="2" ry="2" />
<text  x="699.93" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="50.2" y="181" width="0.2" height="15.0" fill="rgb(213,175,5)" rx="2" ry="2" />
<text  x="53.18" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (27 samples, 0.52%)</title><rect x="938.9" y="453" width="6.2" height="15.0" fill="rgb(214,130,37)" rx="2" ry="2" />
<text  x="941.93" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="424.3" y="197" width="1.6" height="15.0" fill="rgb(232,194,0)" rx="2" ry="2" />
<text  x="427.29" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="62.4" y="293" width="0.3" height="15.0" fill="rgb(214,167,28)" rx="2" ry="2" />
<text  x="65.44" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="522.1" y="325" width="0.3" height="15.0" fill="rgb(254,143,19)" rx="2" ry="2" />
<text  x="525.14" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.2" y="373" width="0.2" height="15.0" fill="rgb(235,192,14)" rx="2" ry="2" />
<text  x="70.21" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="458.3" y="453" width="0.3" height="15.0" fill="rgb(252,18,5)" rx="2" ry="2" />
<text  x="461.35" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="48.1" y="245" width="0.3" height="15.0" fill="rgb(214,165,52)" rx="2" ry="2" />
<text  x="51.14" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.0" y="405" width="0.2" height="15.0" fill="rgb(220,166,43)" rx="2" ry="2" />
<text  x="69.98" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (30 samples, 0.58%)</title><rect x="472.0" y="341" width="6.8" height="15.0" fill="rgb(232,194,42)" rx="2" ry="2" />
<text  x="474.97" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="940.1" y="373" width="0.4" height="15.0" fill="rgb(231,208,38)" rx="2" ry="2" />
<text  x="943.06" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="913.0" y="389" width="1.6" height="15.0" fill="rgb(210,112,22)" rx="2" ry="2" />
<text  x="916.05" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1131.7" y="213" width="0.2" height="15.0" fill="rgb(245,194,34)" rx="2" ry="2" />
<text  x="1134.66" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="675.1" y="501" width="0.3" height="15.0" fill="rgb(247,217,2)" rx="2" ry="2" />
<text  x="678.14" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (7 samples, 0.13%)</title><rect x="1126.9" y="309" width="1.6" height="15.0" fill="rgb(208,34,29)" rx="2" ry="2" />
<text  x="1129.89" y="319.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (2 samples, 0.04%)</title><rect x="718.0" y="453" width="0.5" height="15.0" fill="rgb(248,160,35)" rx="2" ry="2" />
<text  x="721.05" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="554.1" y="309" width="0.3" height="15.0" fill="rgb(217,75,30)" rx="2" ry="2" />
<text  x="557.14" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="944.8" y="437" width="0.3" height="15.0" fill="rgb(248,202,2)" rx="2" ry="2" />
<text  x="947.83" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%)</title><rect x="96.5" y="517" width="0.2" height="15.0" fill="rgb(205,199,0)" rx="2" ry="2" />
<text  x="99.49" y="527.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (70 samples, 1.35%)</title><rect x="1059.2" y="325" width="15.9" height="15.0" fill="rgb(224,196,43)" rx="2" ry="2" />
<text  x="1062.24" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.8" y="197" width="0.2" height="15.0" fill="rgb(211,92,31)" rx="2" ry="2" />
<text  x="44.78" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="41.1" y="277" width="0.2" height="15.0" fill="rgb(214,145,53)" rx="2" ry="2" />
<text  x="44.10" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.5" y="181" width="0.2" height="15.0" fill="rgb(210,178,29)" rx="2" ry="2" />
<text  x="52.50" y="191.5" ></text>
</g>
</g>
</svg>
