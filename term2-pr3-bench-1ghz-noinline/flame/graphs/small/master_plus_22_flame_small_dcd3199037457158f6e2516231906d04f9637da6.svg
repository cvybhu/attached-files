<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="870.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="853" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="853" > </text>
<g id="frames">
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="511.8" y="485" width="0.2" height="15.0" fill="rgb(210,185,54)" rx="2" ry="2" />
<text  x="514.76" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="41.9" y="389" width="0.2" height="15.0" fill="rgb(247,149,5)" rx="2" ry="2" />
<text  x="44.90" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="640.7" y="549" width="0.2" height="15.0" fill="rgb(251,220,31)" rx="2" ry="2" />
<text  x="643.72" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="842.2" y="485" width="0.2" height="15.0" fill="rgb(211,112,5)" rx="2" ry="2" />
<text  x="845.18" y="495.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="108.8" y="453" width="0.3" height="15.0" fill="rgb(228,135,17)" rx="2" ry="2" />
<text  x="111.84" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (56 samples, 1.06%)</title><rect x="524.0" y="421" width="12.5" height="15.0" fill="rgb(206,172,2)" rx="2" ry="2" />
<text  x="527.03" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (231 samples, 4.37%)</title><rect x="211.2" y="389" width="51.6" height="15.0" fill="rgb(234,21,38)" rx="2" ry="2" />
<text  x="214.24" y="399.5" >parti..</text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="690.9" y="645" width="0.2" height="15.0" fill="rgb(210,159,21)" rx="2" ry="2" />
<text  x="693.92" y="655.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%)</title><rect x="82.1" y="613" width="0.6" height="15.0" fill="rgb(233,134,32)" rx="2" ry="2" />
<text  x="85.06" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="172.9" y="469" width="0.6" height="15.0" fill="rgb(217,83,43)" rx="2" ry="2" />
<text  x="175.87" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (6 samples, 0.11%)</title><rect x="746.7" y="453" width="1.3" height="15.0" fill="rgb(212,147,34)" rx="2" ry="2" />
<text  x="749.69" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="56.9" y="357" width="0.6" height="15.0" fill="rgb(239,81,16)" rx="2" ry="2" />
<text  x="59.85" y="367.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="282.4" y="325" width="0.2" height="15.0" fill="rgb(206,29,6)" rx="2" ry="2" />
<text  x="285.41" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="443.5" y="389" width="0.2" height="15.0" fill="rgb(224,126,41)" rx="2" ry="2" />
<text  x="446.49" y="399.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%)</title><rect x="729.7" y="581" width="0.3" height="15.0" fill="rgb(252,143,4)" rx="2" ry="2" />
<text  x="732.74" y="591.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.09%)</title><rect x="78.7" y="581" width="1.1" height="15.0" fill="rgb(238,131,25)" rx="2" ry="2" />
<text  x="81.72" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%)</title><rect x="563.1" y="517" width="0.9" height="15.0" fill="rgb(247,181,54)" rx="2" ry="2" />
<text  x="566.08" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%)</title><rect x="123.8" y="581" width="0.4" height="15.0" fill="rgb(223,129,1)" rx="2" ry="2" />
<text  x="126.78" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="808.0" y="421" width="0.3" height="15.0" fill="rgb(233,206,53)" rx="2" ry="2" />
<text  x="811.04" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="253.4" y="309" width="0.2" height="15.0" fill="rgb(214,126,33)" rx="2" ry="2" />
<text  x="256.41" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="109.5" y="549" width="0.2" height="15.0" fill="rgb(219,63,19)" rx="2" ry="2" />
<text  x="112.50" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1153.9" y="629" width="0.2" height="15.0" fill="rgb(240,134,41)" rx="2" ry="2" />
<text  x="1156.86" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="701.0" y="613" width="0.8" height="15.0" fill="rgb(245,178,46)" rx="2" ry="2" />
<text  x="703.95" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (7 samples, 0.13%)</title><rect x="566.6" y="517" width="1.6" height="15.0" fill="rgb(240,195,1)" rx="2" ry="2" />
<text  x="569.65" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%)</title><rect x="985.9" y="437" width="0.6" height="15.0" fill="rgb(223,1,27)" rx="2" ry="2" />
<text  x="988.86" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="81.6" y="373" width="0.2" height="15.0" fill="rgb(219,8,28)" rx="2" ry="2" />
<text  x="84.62" y="383.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="32.5" y="405" width="0.5" height="15.0" fill="rgb(226,220,41)" rx="2" ry="2" />
<text  x="35.53" y="415.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%)</title><rect x="232.9" y="213" width="0.4" height="15.0" fill="rgb(239,133,26)" rx="2" ry="2" />
<text  x="235.88" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="583.4" y="437" width="0.4" height="15.0" fill="rgb(244,121,31)" rx="2" ry="2" />
<text  x="586.38" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="1144.7" y="613" width="0.5" height="15.0" fill="rgb(248,218,13)" rx="2" ry="2" />
<text  x="1147.71" y="623.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="869.2" y="565" width="0.2" height="15.0" fill="rgb(223,72,35)" rx="2" ry="2" />
<text  x="872.18" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="51.9" y="421" width="0.3" height="15.0" fill="rgb(221,175,23)" rx="2" ry="2" />
<text  x="54.94" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (717 samples, 13.56%)</title><rect x="163.3" y="565" width="159.9" height="15.0" fill="rgb(208,26,28)" rx="2" ry="2" />
<text  x="166.27" y="575.5" >flat_mutation_reader..</text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1163.7" y="613" width="0.2" height="15.0" fill="rgb(249,191,54)" rx="2" ry="2" />
<text  x="1166.67" y="623.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (7 samples, 0.13%)</title><rect x="449.3" y="517" width="1.6" height="15.0" fill="rgb(212,161,35)" rx="2" ry="2" />
<text  x="452.29" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::grant_role_statement*, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.1" y="501" width="0.2" height="15.0" fill="rgb(221,64,9)" rx="2" ry="2" />
<text  x="70.11" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="11.1" y="709" width="0.2" height="15.0" fill="rgb(224,163,43)" rx="2" ry="2" />
<text  x="14.12" y="719.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="75.4" y="565" width="0.4" height="15.0" fill="rgb(243,197,38)" rx="2" ry="2" />
<text  x="78.37" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="48.8" y="357" width="0.5" height="15.0" fill="rgb(220,5,12)" rx="2" ry="2" />
<text  x="51.82" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (4 samples, 0.08%)</title><rect x="722.8" y="565" width="0.9" height="15.0" fill="rgb(243,220,17)" rx="2" ry="2" />
<text  x="725.82" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="875.6" y="517" width="0.5" height="15.0" fill="rgb(232,66,52)" rx="2" ry="2" />
<text  x="878.65" y="527.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%)</title><rect x="136.1" y="581" width="0.4" height="15.0" fill="rgb(249,217,25)" rx="2" ry="2" />
<text  x="139.05" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="984.3" y="453" width="0.2" height="15.0" fill="rgb(238,28,37)" rx="2" ry="2" />
<text  x="987.30" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="551.0" y="469" width="0.3" height="15.0" fill="rgb(228,213,0)" rx="2" ry="2" />
<text  x="554.03" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="217.7" y="293" width="0.5" height="15.0" fill="rgb(232,104,9)" rx="2" ry="2" />
<text  x="220.71" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%)</title><rect x="732.9" y="661" width="0.4" height="15.0" fill="rgb(234,198,39)" rx="2" ry="2" />
<text  x="735.86" y="671.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="456.4" y="533" width="0.3" height="15.0" fill="rgb(252,152,27)" rx="2" ry="2" />
<text  x="459.43" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="81.6" y="501" width="0.2" height="15.0" fill="rgb(245,173,20)" rx="2" ry="2" />
<text  x="84.62" y="511.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="1117.5" y="293" width="0.2" height="15.0" fill="rgb(236,101,4)" rx="2" ry="2" />
<text  x="1120.49" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="287.5" y="405" width="0.3" height="15.0" fill="rgb(235,67,10)" rx="2" ry="2" />
<text  x="290.54" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="980.7" y="469" width="0.3" height="15.0" fill="rgb(245,70,23)" rx="2" ry="2" />
<text  x="983.73" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="133.2" y="533" width="0.4" height="15.0" fill="rgb(211,36,35)" rx="2" ry="2" />
<text  x="136.15" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="712.1" y="629" width="0.2" height="15.0" fill="rgb(208,165,22)" rx="2" ry="2" />
<text  x="715.11" y="639.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="58.6" y="357" width="0.3" height="15.0" fill="rgb(251,93,46)" rx="2" ry="2" />
<text  x="61.64" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (4 samples, 0.08%)</title><rect x="121.8" y="613" width="0.9" height="15.0" fill="rgb(251,83,37)" rx="2" ry="2" />
<text  x="124.78" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (2 samples, 0.04%)</title><rect x="993.0" y="421" width="0.4" height="15.0" fill="rgb(235,7,17)" rx="2" ry="2" />
<text  x="996.00" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="846.2" y="469" width="0.2" height="15.0" fill="rgb(234,171,52)" rx="2" ry="2" />
<text  x="849.20" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1086.9" y="533" width="0.2" height="15.0" fill="rgb(208,162,21)" rx="2" ry="2" />
<text  x="1089.93" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="857.1" y="565" width="0.3" height="15.0" fill="rgb(252,21,0)" rx="2" ry="2" />
<text  x="860.13" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1074.0" y="453" width="0.2" height="15.0" fill="rgb(231,34,16)" rx="2" ry="2" />
<text  x="1076.99" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="12.9" y="741" width="0.2" height="15.0" fill="rgb(237,210,12)" rx="2" ry="2" />
<text  x="15.90" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (5 samples, 0.09%)</title><rect x="877.0" y="549" width="1.1" height="15.0" fill="rgb(250,71,12)" rx="2" ry="2" />
<text  x="879.98" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1155.4" y="629" width="0.5" height="15.0" fill="rgb(252,10,9)" rx="2" ry="2" />
<text  x="1158.42" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="782.4" y="485" width="0.4" height="15.0" fill="rgb(208,173,20)" rx="2" ry="2" />
<text  x="785.39" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="187.8" y="421" width="0.2" height="15.0" fill="rgb(212,148,19)" rx="2" ry="2" />
<text  x="190.81" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="877.9" y="453" width="0.2" height="15.0" fill="rgb(227,170,21)" rx="2" ry="2" />
<text  x="880.88" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="567.8" y="421" width="0.2" height="15.0" fill="rgb(245,33,27)" rx="2" ry="2" />
<text  x="570.76" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="51.7" y="389" width="0.2" height="15.0" fill="rgb(244,175,30)" rx="2" ry="2" />
<text  x="54.72" y="399.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="728.8" y="373" width="0.3" height="15.0" fill="rgb(208,105,45)" rx="2" ry="2" />
<text  x="731.84" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (2 samples, 0.04%)</title><rect x="184.2" y="405" width="0.5" height="15.0" fill="rgb(219,155,33)" rx="2" ry="2" />
<text  x="187.24" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%)</title><rect x="1130.0" y="325" width="0.7" height="15.0" fill="rgb(247,145,14)" rx="2" ry="2" />
<text  x="1132.98" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%)</title><rect x="156.6" y="565" width="0.4" height="15.0" fill="rgb(227,128,43)" rx="2" ry="2" />
<text  x="159.58" y="575.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%)</title><rect x="1127.1" y="325" width="0.2" height="15.0" fill="rgb(240,190,5)" rx="2" ry="2" />
<text  x="1130.08" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.66%)</title><rect x="815.0" y="357" width="7.8" height="15.0" fill="rgb(235,189,18)" rx="2" ry="2" />
<text  x="817.96" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="701.8" y="581" width="0.3" height="15.0" fill="rgb(240,176,5)" rx="2" ry="2" />
<text  x="704.85" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="985.6" y="437" width="0.3" height="15.0" fill="rgb(226,67,21)" rx="2" ry="2" />
<text  x="988.64" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%)</title><rect x="286.2" y="389" width="0.2" height="15.0" fill="rgb(248,160,44)" rx="2" ry="2" />
<text  x="289.20" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="58.9" y="437" width="0.2" height="15.0" fill="rgb(250,87,39)" rx="2" ry="2" />
<text  x="61.86" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="61.3" y="437" width="0.2" height="15.0" fill="rgb(227,138,4)" rx="2" ry="2" />
<text  x="64.31" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="814.1" y="325" width="0.6" height="15.0" fill="rgb(249,185,31)" rx="2" ry="2" />
<text  x="817.07" y="335.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1124.4" y="485" width="0.2" height="15.0" fill="rgb(205,205,49)" rx="2" ry="2" />
<text  x="1127.41" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="61.5" y="437" width="0.5" height="15.0" fill="rgb(232,157,23)" rx="2" ry="2" />
<text  x="64.54" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.8" y="325" width="0.2" height="15.0" fill="rgb(225,90,16)" rx="2" ry="2" />
<text  x="49.81" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="763.6" y="453" width="0.3" height="15.0" fill="rgb(238,64,36)" rx="2" ry="2" />
<text  x="766.65" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (700 samples, 13.24%)</title><rect x="165.7" y="533" width="156.2" height="15.0" fill="rgb(250,162,29)" rx="2" ry="2" />
<text  x="168.73" y="543.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.2" y="277" width="0.2" height="15.0" fill="rgb(225,145,1)" rx="2" ry="2" />
<text  x="57.17" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="18.0" y="405" width="0.3" height="15.0" fill="rgb(235,126,22)" rx="2" ry="2" />
<text  x="21.03" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (51 samples, 0.96%)</title><rect x="275.7" y="421" width="11.4" height="15.0" fill="rgb(220,102,49)" rx="2" ry="2" />
<text  x="278.72" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (39 samples, 0.74%)</title><rect x="501.9" y="453" width="8.7" height="15.0" fill="rgb(222,180,31)" rx="2" ry="2" />
<text  x="504.95" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%)</title><rect x="1163.7" y="661" width="0.2" height="15.0" fill="rgb(209,154,0)" rx="2" ry="2" />
<text  x="1166.67" y="671.5" ></text>
</g>
<g >
<title>std::operator== (2 samples, 0.04%)</title><rect x="37.2" y="469" width="0.5" height="15.0" fill="rgb(226,62,20)" rx="2" ry="2" />
<text  x="40.22" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.4" y="757" width="0.3" height="15.0" fill="rgb(232,165,53)" rx="2" ry="2" />
<text  x="13.45" y="767.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="77.8" y="565" width="0.5" height="15.0" fill="rgb(206,11,31)" rx="2" ry="2" />
<text  x="80.82" y="575.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%)</title><rect x="721.7" y="597" width="0.2" height="15.0" fill="rgb(253,171,37)" rx="2" ry="2" />
<text  x="724.70" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (3 samples, 0.06%)</title><rect x="218.2" y="293" width="0.6" height="15.0" fill="rgb(238,42,39)" rx="2" ry="2" />
<text  x="221.16" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (19 samples, 0.36%)</title><rect x="234.9" y="197" width="4.2" height="15.0" fill="rgb(231,167,4)" rx="2" ry="2" />
<text  x="237.89" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="559.3" y="565" width="0.2" height="15.0" fill="rgb(219,211,29)" rx="2" ry="2" />
<text  x="562.28" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="295.6" y="421" width="0.6" height="15.0" fill="rgb(248,67,4)" rx="2" ry="2" />
<text  x="298.57" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="786.0" y="485" width="0.2" height="15.0" fill="rgb(247,42,34)" rx="2" ry="2" />
<text  x="788.96" y="495.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (7 samples, 0.13%)</title><rect x="34.3" y="405" width="1.6" height="15.0" fill="rgb(234,85,52)" rx="2" ry="2" />
<text  x="37.32" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (8 samples, 0.15%)</title><rect x="277.7" y="373" width="1.8" height="15.0" fill="rgb(238,148,10)" rx="2" ry="2" />
<text  x="280.73" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="727.5" y="581" width="0.2" height="15.0" fill="rgb(206,185,32)" rx="2" ry="2" />
<text  x="730.50" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="50.6" y="293" width="0.2" height="15.0" fill="rgb(239,21,46)" rx="2" ry="2" />
<text  x="53.61" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="955.7" y="549" width="0.5" height="15.0" fill="rgb(232,123,9)" rx="2" ry="2" />
<text  x="958.74" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (9 samples, 0.17%)</title><rect x="192.5" y="421" width="2.0" height="15.0" fill="rgb(217,154,49)" rx="2" ry="2" />
<text  x="195.50" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="652.5" y="629" width="0.9" height="15.0" fill="rgb(237,66,14)" rx="2" ry="2" />
<text  x="655.54" y="639.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="988.1" y="437" width="0.2" height="15.0" fill="rgb(247,206,8)" rx="2" ry="2" />
<text  x="991.09" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="140.1" y="309" width="0.2" height="15.0" fill="rgb(214,76,6)" rx="2" ry="2" />
<text  x="143.07" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%)</title><rect x="17.4" y="677" width="0.4" height="15.0" fill="rgb(246,204,37)" rx="2" ry="2" />
<text  x="20.36" y="687.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 1.29%)</title><rect x="808.5" y="405" width="15.2" height="15.0" fill="rgb(236,215,44)" rx="2" ry="2" />
<text  x="811.49" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%)</title><rect x="40.3" y="517" width="0.3" height="15.0" fill="rgb(210,125,22)" rx="2" ry="2" />
<text  x="43.34" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (1 samples, 0.02%)</title><rect x="1142.5" y="629" width="0.2" height="15.0" fill="rgb(213,70,43)" rx="2" ry="2" />
<text  x="1145.48" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="641.8" y="549" width="0.3" height="15.0" fill="rgb(247,23,39)" rx="2" ry="2" />
<text  x="644.83" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="833.5" y="485" width="0.2" height="15.0" fill="rgb(252,47,50)" rx="2" ry="2" />
<text  x="836.48" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (9 samples, 0.17%)</title><rect x="18.7" y="661" width="2.0" height="15.0" fill="rgb(250,221,2)" rx="2" ry="2" />
<text  x="21.70" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="57.1" y="245" width="0.2" height="15.0" fill="rgb(229,73,30)" rx="2" ry="2" />
<text  x="60.08" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="453.3" y="517" width="0.2" height="15.0" fill="rgb(232,133,52)" rx="2" ry="2" />
<text  x="456.31" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="876.3" y="629" width="0.2" height="15.0" fill="rgb(208,62,24)" rx="2" ry="2" />
<text  x="879.31" y="639.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%)</title><rect x="82.3" y="597" width="0.4" height="15.0" fill="rgb(238,54,47)" rx="2" ry="2" />
<text  x="85.29" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="533" width="9.2" height="15.0" fill="rgb(232,25,47)" rx="2" ry="2" />
<text  x="1118.71" y="543.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%)</title><rect x="744.0" y="565" width="0.2" height="15.0" fill="rgb(233,10,2)" rx="2" ry="2" />
<text  x="747.01" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (197 samples, 3.72%)</title><rect x="24.1" y="549" width="43.9" height="15.0" fill="rgb(208,181,49)" rx="2" ry="2" />
<text  x="27.06" y="559.5" >cql3..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt;, true&gt;::_M_head (1 samples, 0.02%)</title><rect x="50.6" y="277" width="0.2" height="15.0" fill="rgb(211,118,27)" rx="2" ry="2" />
<text  x="53.61" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="790.4" y="501" width="0.2" height="15.0" fill="rgb(208,21,8)" rx="2" ry="2" />
<text  x="793.42" y="511.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.2" y="405" width="0.2" height="15.0" fill="rgb(232,174,49)" rx="2" ry="2" />
<text  x="63.20" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (2 samples, 0.04%)</title><rect x="865.8" y="549" width="0.5" height="15.0" fill="rgb(217,70,36)" rx="2" ry="2" />
<text  x="868.83" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (14 samples, 0.26%)</title><rect x="759.2" y="501" width="3.1" height="15.0" fill="rgb(245,191,44)" rx="2" ry="2" />
<text  x="762.19" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_impl_nrvo&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="646.3" y="645" width="0.2" height="15.0" fill="rgb(247,63,54)" rx="2" ry="2" />
<text  x="649.29" y="655.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="921.8" y="517" width="0.3" height="15.0" fill="rgb(214,86,27)" rx="2" ry="2" />
<text  x="924.83" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="152.3" y="581" width="0.3" height="15.0" fill="rgb(226,71,6)" rx="2" ry="2" />
<text  x="155.34" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="349.6" y="325" width="0.2" height="15.0" fill="rgb(209,112,35)" rx="2" ry="2" />
<text  x="352.57" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.7" y="517" width="0.2" height="15.0" fill="rgb(219,110,30)" rx="2" ry="2" />
<text  x="69.67" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%)</title><rect x="1163.7" y="341" width="0.2" height="15.0" fill="rgb(215,91,22)" rx="2" ry="2" />
<text  x="1166.67" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (43 samples, 0.81%)</title><rect x="432.3" y="421" width="9.6" height="15.0" fill="rgb(248,143,23)" rx="2" ry="2" />
<text  x="435.34" y="431.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="899.3" y="469" width="0.4" height="15.0" fill="rgb(246,186,33)" rx="2" ry="2" />
<text  x="902.29" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="821.4" y="277" width="0.9" height="15.0" fill="rgb(229,24,4)" rx="2" ry="2" />
<text  x="824.43" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="61.1" y="453" width="0.2" height="15.0" fill="rgb(239,195,46)" rx="2" ry="2" />
<text  x="64.09" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (26 samples, 0.49%)</title><rect x="938.8" y="581" width="5.8" height="15.0" fill="rgb(218,111,13)" rx="2" ry="2" />
<text  x="941.78" y="591.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1095.2" y="517" width="2.4" height="15.0" fill="rgb(222,133,51)" rx="2" ry="2" />
<text  x="1098.18" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1081.3" y="517" width="0.5" height="15.0" fill="rgb(253,19,51)" rx="2" ry="2" />
<text  x="1084.35" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="108.8" y="533" width="0.5" height="15.0" fill="rgb(235,177,42)" rx="2" ry="2" />
<text  x="111.84" y="543.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="623.3" y="549" width="0.2" height="15.0" fill="rgb(209,196,21)" rx="2" ry="2" />
<text  x="626.31" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="51.7" y="373" width="0.2" height="15.0" fill="rgb(225,189,14)" rx="2" ry="2" />
<text  x="54.72" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="57.1" y="293" width="0.4" height="15.0" fill="rgb(227,229,7)" rx="2" ry="2" />
<text  x="60.08" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="17.6" y="597" width="0.2" height="15.0" fill="rgb(237,19,35)" rx="2" ry="2" />
<text  x="20.59" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%)</title><rect x="1131.1" y="325" width="0.2" height="15.0" fill="rgb(236,132,16)" rx="2" ry="2" />
<text  x="1134.10" y="335.5" ></text>
</g>
<g >
<title>create_partitions (280 samples, 5.29%)</title><rect x="18.5" y="693" width="62.4" height="15.0" fill="rgb(209,39,42)" rx="2" ry="2" />
<text  x="21.48" y="703.5" >create..</text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.3" y="501" width="0.2" height="15.0" fill="rgb(251,130,43)" rx="2" ry="2" />
<text  x="112.28" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="62.0" y="341" width="0.2" height="15.0" fill="rgb(246,165,30)" rx="2" ry="2" />
<text  x="64.98" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="598.1" y="501" width="0.4" height="15.0" fill="rgb(252,58,3)" rx="2" ry="2" />
<text  x="601.10" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%)</title><rect x="1001.9" y="405" width="1.4" height="15.0" fill="rgb(246,125,21)" rx="2" ry="2" />
<text  x="1004.92" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="527.4" y="373" width="0.2" height="15.0" fill="rgb(235,217,46)" rx="2" ry="2" />
<text  x="530.38" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.6" y="789" width="0.2" height="15.0" fill="rgb(237,78,37)" rx="2" ry="2" />
<text  x="1192.55" y="799.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="140.1" y="597" width="0.2" height="15.0" fill="rgb(240,20,12)" rx="2" ry="2" />
<text  x="143.07" y="607.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="613" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="21.03" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.1" y="405" width="0.2" height="15.0" fill="rgb(242,144,35)" rx="2" ry="2" />
<text  x="64.09" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="581" width="0.2" height="15.0" fill="rgb(215,63,48)" rx="2" ry="2" />
<text  x="1166.67" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (215 samples, 4.07%)</title><rect x="213.9" y="357" width="48.0" height="15.0" fill="rgb(235,70,22)" rx="2" ry="2" />
<text  x="216.92" y="367.5" >part..</text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (14 samples, 0.26%)</title><rect x="985.2" y="453" width="3.1" height="15.0" fill="rgb(209,127,48)" rx="2" ry="2" />
<text  x="988.19" y="463.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7 samples, 0.13%)</title><rect x="693.6" y="613" width="1.6" height="15.0" fill="rgb(214,185,28)" rx="2" ry="2" />
<text  x="696.59" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1080.9" y="501" width="0.4" height="15.0" fill="rgb(221,52,21)" rx="2" ry="2" />
<text  x="1083.90" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="930.5" y="533" width="0.5" height="15.0" fill="rgb(239,120,34)" rx="2" ry="2" />
<text  x="933.53" y="543.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="109.7" y="549" width="0.3" height="15.0" fill="rgb(215,170,53)" rx="2" ry="2" />
<text  x="112.73" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="837.0" y="453" width="0.5" height="15.0" fill="rgb(219,68,12)" rx="2" ry="2" />
<text  x="840.05" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (11 samples, 0.21%)</title><rect x="30.5" y="421" width="2.5" height="15.0" fill="rgb(229,3,37)" rx="2" ry="2" />
<text  x="33.53" y="431.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="835.9" y="469" width="0.3" height="15.0" fill="rgb(253,98,26)" rx="2" ry="2" />
<text  x="838.93" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="39.9" y="421" width="0.2" height="15.0" fill="rgb(252,113,19)" rx="2" ry="2" />
<text  x="42.90" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (23 samples, 0.43%)</title><rect x="1043.2" y="485" width="5.1" height="15.0" fill="rgb(250,62,0)" rx="2" ry="2" />
<text  x="1046.20" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="55.3" y="437" width="0.2" height="15.0" fill="rgb(215,24,2)" rx="2" ry="2" />
<text  x="58.29" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="424.1" y="325" width="0.7" height="15.0" fill="rgb(251,147,5)" rx="2" ry="2" />
<text  x="427.08" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;reconcilable_result&gt;  (1 samples, 0.02%)</title><rect x="140.1" y="501" width="0.2" height="15.0" fill="rgb(233,187,13)" rx="2" ry="2" />
<text  x="143.07" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="860.3" y="533" width="0.2" height="15.0" fill="rgb(228,43,39)" rx="2" ry="2" />
<text  x="863.25" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.9" y="757" width="0.2" height="15.0" fill="rgb(229,15,45)" rx="2" ry="2" />
<text  x="88.86" y="767.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.2" y="661" width="0.2" height="15.0" fill="rgb(210,34,31)" rx="2" ry="2" />
<text  x="88.19" y="671.5" ></text>
</g>
<g >
<title>db::rp_set::put (1 samples, 0.02%)</title><rect x="1116.4" y="405" width="0.2" height="15.0" fill="rgb(245,54,5)" rx="2" ry="2" />
<text  x="1119.38" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (4 samples, 0.08%)</title><rect x="701.0" y="645" width="0.8" height="15.0" fill="rgb(210,93,22)" rx="2" ry="2" />
<text  x="703.95" y="655.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="933.7" y="565" width="0.2" height="15.0" fill="rgb(229,190,8)" rx="2" ry="2" />
<text  x="936.65" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.15%)</title><rect x="1147.2" y="581" width="1.7" height="15.0" fill="rgb(205,8,3)" rx="2" ry="2" />
<text  x="1150.16" y="591.5" ></text>
</g>
<g >
<title>table::as_mutation_source (7 samples, 0.13%)</title><rect x="640.5" y="597" width="1.6" height="15.0" fill="rgb(215,90,39)" rx="2" ry="2" />
<text  x="643.49" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (3 samples, 0.06%)</title><rect x="659.5" y="613" width="0.6" height="15.0" fill="rgb(209,75,17)" rx="2" ry="2" />
<text  x="662.46" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="157.7" y="581" width="0.4" height="15.0" fill="rgb(205,42,16)" rx="2" ry="2" />
<text  x="160.70" y="591.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="589.6" y="485" width="0.2" height="15.0" fill="rgb(217,226,52)" rx="2" ry="2" />
<text  x="592.63" y="495.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (57 samples, 1.08%)</title><rect x="1061.3" y="453" width="12.7" height="15.0" fill="rgb(246,112,45)" rx="2" ry="2" />
<text  x="1064.27" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1143.4" y="581" width="0.2" height="15.0" fill="rgb(231,211,51)" rx="2" ry="2" />
<text  x="1146.37" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="39.7" y="485" width="0.4" height="15.0" fill="rgb(215,111,30)" rx="2" ry="2" />
<text  x="42.67" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="110.6" y="421" width="0.2" height="15.0" fill="rgb(228,209,43)" rx="2" ry="2" />
<text  x="113.62" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%)</title><rect x="1124.9" y="613" width="8.0" height="15.0" fill="rgb(240,116,12)" rx="2" ry="2" />
<text  x="1127.85" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1003.3" y="437" width="0.4" height="15.0" fill="rgb(249,30,37)" rx="2" ry="2" />
<text  x="1006.26" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.11%)</title><rect x="940.1" y="533" width="1.4" height="15.0" fill="rgb(205,53,38)" rx="2" ry="2" />
<text  x="943.12" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="667.9" y="549" width="0.3" height="15.0" fill="rgb(224,122,7)" rx="2" ry="2" />
<text  x="670.94" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%)</title><rect x="877.0" y="517" width="0.2" height="15.0" fill="rgb(245,144,41)" rx="2" ry="2" />
<text  x="879.98" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="764.3" y="469" width="0.2" height="15.0" fill="rgb(226,211,2)" rx="2" ry="2" />
<text  x="767.32" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="1132.9" y="645" width="0.4" height="15.0" fill="rgb(237,64,14)" rx="2" ry="2" />
<text  x="1135.89" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="699.2" y="597" width="0.4" height="15.0" fill="rgb(244,103,23)" rx="2" ry="2" />
<text  x="702.17" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="272.4" y="405" width="0.4" height="15.0" fill="rgb(213,227,22)" rx="2" ry="2" />
<text  x="275.37" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%)</title><rect x="35.9" y="421" width="0.2" height="15.0" fill="rgb(213,143,17)" rx="2" ry="2" />
<text  x="38.88" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%)</title><rect x="29.0" y="421" width="0.2" height="15.0" fill="rgb(242,67,15)" rx="2" ry="2" />
<text  x="31.96" y="431.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="866.9" y="517" width="2.1" height="15.0" fill="rgb(228,163,29)" rx="2" ry="2" />
<text  x="869.94" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="59.8" y="357" width="0.2" height="15.0" fill="rgb(236,59,3)" rx="2" ry="2" />
<text  x="62.75" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="798.7" y="469" width="0.9" height="15.0" fill="rgb(213,218,9)" rx="2" ry="2" />
<text  x="801.67" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="11.1" y="725" width="0.2" height="15.0" fill="rgb(233,210,8)" rx="2" ry="2" />
<text  x="14.12" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (5 samples, 0.09%)</title><rect x="25.6" y="373" width="1.1" height="15.0" fill="rgb(252,121,38)" rx="2" ry="2" />
<text  x="28.62" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (326 samples, 6.16%)</title><rect x="775.2" y="581" width="72.8" height="15.0" fill="rgb(241,159,52)" rx="2" ry="2" />
<text  x="778.25" y="591.5" >cql3::st..</text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%)</title><rect x="870.7" y="629" width="0.3" height="15.0" fill="rgb(253,130,46)" rx="2" ry="2" />
<text  x="873.74" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.11%)</title><rect x="62.0" y="485" width="1.3" height="15.0" fill="rgb(219,17,30)" rx="2" ry="2" />
<text  x="64.98" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (9 samples, 0.17%)</title><rect x="402.7" y="357" width="2.0" height="15.0" fill="rgb(234,37,28)" rx="2" ry="2" />
<text  x="405.66" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="63.1" y="373" width="0.2" height="15.0" fill="rgb(250,49,6)" rx="2" ry="2" />
<text  x="66.10" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="807.8" y="421" width="0.2" height="15.0" fill="rgb(240,74,36)" rx="2" ry="2" />
<text  x="810.82" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="832.6" y="453" width="0.2" height="15.0" fill="rgb(225,212,9)" rx="2" ry="2" />
<text  x="835.59" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="45.9" y="453" width="0.2" height="15.0" fill="rgb(250,53,23)" rx="2" ry="2" />
<text  x="48.92" y="463.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="108.6" y="533" width="0.2" height="15.0" fill="rgb(240,207,29)" rx="2" ry="2" />
<text  x="111.61" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="79.6" y="533" width="0.2" height="15.0" fill="rgb(240,145,48)" rx="2" ry="2" />
<text  x="82.61" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="605.9" y="581" width="0.2" height="15.0" fill="rgb(235,127,51)" rx="2" ry="2" />
<text  x="608.91" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (6 samples, 0.11%)</title><rect x="40.6" y="485" width="1.3" height="15.0" fill="rgb(207,153,41)" rx="2" ry="2" />
<text  x="43.57" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="758.1" y="549" width="0.2" height="15.0" fill="rgb(226,88,33)" rx="2" ry="2" />
<text  x="761.07" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="84.7" y="437" width="0.3" height="15.0" fill="rgb(215,126,27)" rx="2" ry="2" />
<text  x="87.74" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.7" y="325" width="0.2" height="15.0" fill="rgb(213,15,44)" rx="2" ry="2" />
<text  x="44.68" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.06%)</title><rect x="26.1" y="357" width="0.6" height="15.0" fill="rgb(238,12,20)" rx="2" ry="2" />
<text  x="29.06" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="60.2" y="485" width="0.2" height="15.0" fill="rgb(247,208,10)" rx="2" ry="2" />
<text  x="63.20" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1017.8" y="309" width="0.2" height="15.0" fill="rgb(247,169,12)" rx="2" ry="2" />
<text  x="1020.76" y="319.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="501.1" y="437" width="0.6" height="15.0" fill="rgb(254,157,42)" rx="2" ry="2" />
<text  x="504.05" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (27 samples, 0.51%)</title><rect x="839.7" y="533" width="6.0" height="15.0" fill="rgb(228,156,43)" rx="2" ry="2" />
<text  x="842.73" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="707.2" y="613" width="0.4" height="15.0" fill="rgb(241,219,25)" rx="2" ry="2" />
<text  x="710.20" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (4 samples, 0.08%)</title><rect x="50.8" y="421" width="0.9" height="15.0" fill="rgb(213,101,52)" rx="2" ry="2" />
<text  x="53.83" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="581" width="9.2" height="15.0" fill="rgb(236,59,18)" rx="2" ry="2" />
<text  x="1118.71" y="591.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="453" width="0.2" height="15.0" fill="rgb(242,150,4)" rx="2" ry="2" />
<text  x="143.07" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="81.6" y="549" width="0.2" height="15.0" fill="rgb(245,131,21)" rx="2" ry="2" />
<text  x="84.62" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="1147.8" y="549" width="1.1" height="15.0" fill="rgb(224,209,7)" rx="2" ry="2" />
<text  x="1150.83" y="559.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="1163.7" y="325" width="0.2" height="15.0" fill="rgb(231,165,44)" rx="2" ry="2" />
<text  x="1166.67" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1030.3" y="437" width="0.2" height="15.0" fill="rgb(235,228,32)" rx="2" ry="2" />
<text  x="1033.26" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="443.3" y="405" width="0.4" height="15.0" fill="rgb(251,55,12)" rx="2" ry="2" />
<text  x="446.27" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="473.6" y="437" width="0.2" height="15.0" fill="rgb(230,35,15)" rx="2" ry="2" />
<text  x="476.61" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (16 samples, 0.30%)</title><rect x="1104.3" y="581" width="3.6" height="15.0" fill="rgb(220,187,3)" rx="2" ry="2" />
<text  x="1107.33" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (2 samples, 0.04%)</title><rect x="137.8" y="613" width="0.5" height="15.0" fill="rgb(229,157,20)" rx="2" ry="2" />
<text  x="140.84" y="623.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="822.1" y="229" width="0.2" height="15.0" fill="rgb(240,1,51)" rx="2" ry="2" />
<text  x="825.10" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="44.4" y="277" width="0.2" height="15.0" fill="rgb(228,194,12)" rx="2" ry="2" />
<text  x="47.36" y="287.5" ></text>
</g>
<g >
<title>CryptoPP::Weak1::MD5::~MD5 (1 samples, 0.02%)</title><rect x="10.2" y="773" width="0.2" height="15.0" fill="rgb(243,6,3)" rx="2" ry="2" />
<text  x="13.22" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="76.3" y="549" width="0.2" height="15.0" fill="rgb(211,29,22)" rx="2" ry="2" />
<text  x="79.26" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (65 samples, 1.23%)</title><rect x="714.3" y="661" width="14.5" height="15.0" fill="rgb(253,80,7)" rx="2" ry="2" />
<text  x="717.34" y="671.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="175.5" y="453" width="0.3" height="15.0" fill="rgb(238,171,25)" rx="2" ry="2" />
<text  x="178.54" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="1018.0" y="293" width="0.7" height="15.0" fill="rgb(250,104,0)" rx="2" ry="2" />
<text  x="1020.99" y="303.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%)</title><rect x="1111.2" y="565" width="0.3" height="15.0" fill="rgb(231,54,9)" rx="2" ry="2" />
<text  x="1114.24" y="575.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="81.6" y="613" width="0.2" height="15.0" fill="rgb(235,212,30)" rx="2" ry="2" />
<text  x="84.62" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (28 samples, 0.53%)</title><rect x="433.2" y="373" width="6.3" height="15.0" fill="rgb(219,16,46)" rx="2" ry="2" />
<text  x="436.23" y="383.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%)</title><rect x="327.7" y="485" width="0.2" height="15.0" fill="rgb(211,94,12)" rx="2" ry="2" />
<text  x="330.70" y="495.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%)</title><rect x="487.2" y="501" width="0.2" height="15.0" fill="rgb(221,3,17)" rx="2" ry="2" />
<text  x="490.22" y="511.5" ></text>
</g>
<g >
<title>schema::~schema (1 samples, 0.02%)</title><rect x="110.4" y="533" width="0.2" height="15.0" fill="rgb(243,125,1)" rx="2" ry="2" />
<text  x="113.40" y="543.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="541.9" y="485" width="1.3" height="15.0" fill="rgb(252,29,38)" rx="2" ry="2" />
<text  x="544.88" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (20 samples, 0.38%)</title><rect x="815.6" y="325" width="4.5" height="15.0" fill="rgb(243,67,0)" rx="2" ry="2" />
<text  x="818.63" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="838.6" y="517" width="0.2" height="15.0" fill="rgb(231,100,9)" rx="2" ry="2" />
<text  x="841.61" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="973.6" y="501" width="0.2" height="15.0" fill="rgb(217,179,4)" rx="2" ry="2" />
<text  x="976.59" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.0" y="421" width="0.5" height="15.0" fill="rgb(209,46,38)" rx="2" ry="2" />
<text  x="48.03" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1022.7" y="389" width="0.2" height="15.0" fill="rgb(251,165,22)" rx="2" ry="2" />
<text  x="1025.67" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="454.6" y="581" width="0.3" height="15.0" fill="rgb(234,101,14)" rx="2" ry="2" />
<text  x="457.65" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,372 samples, 44.85%)</title><rect x="113.5" y="645" width="529.2" height="15.0" fill="rgb(216,29,47)" rx="2" ry="2" />
<text  x="116.52" y="655.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1020.7" y="357" width="0.4" height="15.0" fill="rgb(224,135,52)" rx="2" ry="2" />
<text  x="1023.66" y="367.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (4 samples, 0.08%)</title><rect x="546.8" y="485" width="0.9" height="15.0" fill="rgb(206,32,6)" rx="2" ry="2" />
<text  x="549.79" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="85.2" y="773" width="0.4" height="15.0" fill="rgb(253,209,27)" rx="2" ry="2" />
<text  x="88.19" y="783.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (3 samples, 0.06%)</title><rect x="510.9" y="485" width="0.6" height="15.0" fill="rgb(215,29,47)" rx="2" ry="2" />
<text  x="513.87" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.09%)</title><rect x="44.4" y="469" width="1.1" height="15.0" fill="rgb(217,51,52)" rx="2" ry="2" />
<text  x="47.36" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (13 samples, 0.25%)</title><rect x="248.9" y="277" width="2.9" height="15.0" fill="rgb(215,33,51)" rx="2" ry="2" />
<text  x="251.94" y="287.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="18.3" y="565" width="0.2" height="15.0" fill="rgb(205,160,28)" rx="2" ry="2" />
<text  x="21.25" y="575.5" ></text>
</g>
<g >
<title>database::find_column_family (12 samples, 0.23%)</title><rect x="777.0" y="533" width="2.7" height="15.0" fill="rgb(221,54,28)" rx="2" ry="2" />
<text  x="780.03" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (1 samples, 0.02%)</title><rect x="1037.0" y="517" width="0.2" height="15.0" fill="rgb(220,163,35)" rx="2" ry="2" />
<text  x="1039.95" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::with_merge_lock (1 samples, 0.02%)</title><rect x="728.8" y="613" width="0.3" height="15.0" fill="rgb(228,156,33)" rx="2" ry="2" />
<text  x="731.84" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="850.7" y="517" width="0.6" height="15.0" fill="rgb(208,200,4)" rx="2" ry="2" />
<text  x="853.66" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="822.5" y="341" width="0.3" height="15.0" fill="rgb(226,190,27)" rx="2" ry="2" />
<text  x="825.55" y="351.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (5 samples, 0.09%)</title><rect x="1117.3" y="373" width="1.1" height="15.0" fill="rgb(205,228,39)" rx="2" ry="2" />
<text  x="1120.27" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.2" y="325" width="0.3" height="15.0" fill="rgb(235,180,14)" rx="2" ry="2" />
<text  x="44.23" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="721.3" y="581" width="0.2" height="15.0" fill="rgb(246,40,34)" rx="2" ry="2" />
<text  x="724.26" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.09%)</title><rect x="1090.9" y="517" width="1.2" height="15.0" fill="rgb(222,194,12)" rx="2" ry="2" />
<text  x="1093.94" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (205 samples, 3.88%)</title><rect x="893.0" y="581" width="45.8" height="15.0" fill="rgb(233,155,19)" rx="2" ry="2" />
<text  x="896.05" y="591.5" >cql3..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="52.4" y="389" width="0.2" height="15.0" fill="rgb(253,139,49)" rx="2" ry="2" />
<text  x="55.39" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="58.9" y="405" width="0.2" height="15.0" fill="rgb(248,41,8)" rx="2" ry="2" />
<text  x="61.86" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="184.7" y="373" width="0.2" height="15.0" fill="rgb(227,105,49)" rx="2" ry="2" />
<text  x="187.69" y="383.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (3 samples, 0.06%)</title><rect x="1076.2" y="469" width="0.7" height="15.0" fill="rgb(206,52,5)" rx="2" ry="2" />
<text  x="1079.22" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="23.2" y="517" width="0.2" height="15.0" fill="rgb(223,5,24)" rx="2" ry="2" />
<text  x="26.16" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="808.7" y="389" width="0.2" height="15.0" fill="rgb(236,160,35)" rx="2" ry="2" />
<text  x="811.71" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (11 samples, 0.21%)</title><rect x="633.4" y="581" width="2.4" height="15.0" fill="rgb(228,169,27)" rx="2" ry="2" />
<text  x="636.35" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selectStatement (1 samples, 0.02%)</title><rect x="10.7" y="405" width="0.2" height="15.0" fill="rgb(250,64,2)" rx="2" ry="2" />
<text  x="13.67" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.09%)</title><rect x="1128.6" y="277" width="1.2" height="15.0" fill="rgb(206,107,29)" rx="2" ry="2" />
<text  x="1131.65" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (2 samples, 0.04%)</title><rect x="621.5" y="597" width="0.5" height="15.0" fill="rgb(238,177,26)" rx="2" ry="2" />
<text  x="624.53" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (3 samples, 0.06%)</title><rect x="729.1" y="661" width="0.6" height="15.0" fill="rgb(225,17,7)" rx="2" ry="2" />
<text  x="732.07" y="671.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="644.5" y="645" width="0.2" height="15.0" fill="rgb(224,55,48)" rx="2" ry="2" />
<text  x="647.51" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.7" y="357" width="0.3" height="15.0" fill="rgb(234,20,1)" rx="2" ry="2" />
<text  x="705.74" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="115.3" y="629" width="0.2" height="15.0" fill="rgb(212,185,11)" rx="2" ry="2" />
<text  x="118.31" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (6 samples, 0.11%)</title><rect x="760.5" y="453" width="1.4" height="15.0" fill="rgb(250,26,18)" rx="2" ry="2" />
<text  x="763.52" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (2 samples, 0.04%)</title><rect x="1122.0" y="357" width="0.4" height="15.0" fill="rgb(237,189,28)" rx="2" ry="2" />
<text  x="1124.95" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="109.1" y="453" width="0.2" height="15.0" fill="rgb(250,211,37)" rx="2" ry="2" />
<text  x="112.06" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="260.8" y="341" width="0.2" height="15.0" fill="rgb(232,161,4)" rx="2" ry="2" />
<text  x="263.77" y="351.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.09%)</title><rect x="109.7" y="629" width="1.1" height="15.0" fill="rgb(250,36,48)" rx="2" ry="2" />
<text  x="112.73" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="55.1" y="437" width="0.2" height="15.0" fill="rgb(213,115,51)" rx="2" ry="2" />
<text  x="58.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (6 samples, 0.11%)</title><rect x="1147.6" y="565" width="1.3" height="15.0" fill="rgb(246,81,50)" rx="2" ry="2" />
<text  x="1150.61" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%)</title><rect x="155.0" y="565" width="0.7" height="15.0" fill="rgb(211,141,48)" rx="2" ry="2" />
<text  x="158.02" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (39 samples, 0.74%)</title><rect x="1145.2" y="629" width="8.7" height="15.0" fill="rgb(251,197,2)" rx="2" ry="2" />
<text  x="1148.16" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="140.1" y="565" width="0.2" height="15.0" fill="rgb(215,226,3)" rx="2" ry="2" />
<text  x="143.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="54.6" y="213" width="0.5" height="15.0" fill="rgb(228,64,47)" rx="2" ry="2" />
<text  x="57.62" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (3 samples, 0.06%)</title><rect x="136.9" y="613" width="0.7" height="15.0" fill="rgb(223,74,36)" rx="2" ry="2" />
<text  x="139.95" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1100.1" y="565" width="0.2" height="15.0" fill="rgb(209,125,36)" rx="2" ry="2" />
<text  x="1103.09" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (3 samples, 0.06%)</title><rect x="441.0" y="373" width="0.7" height="15.0" fill="rgb(209,147,14)" rx="2" ry="2" />
<text  x="444.04" y="383.5" ></text>
</g>
<g >
<title>cdc::cdc_service::needs_cdc_augmentation (1 samples, 0.02%)</title><rect x="876.8" y="517" width="0.2" height="15.0" fill="rgb(237,67,16)" rx="2" ry="2" />
<text  x="879.76" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="74.3" y="533" width="0.2" height="15.0" fill="rgb(210,75,20)" rx="2" ry="2" />
<text  x="77.25" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="588.3" y="453" width="0.7" height="15.0" fill="rgb(225,78,2)" rx="2" ry="2" />
<text  x="591.29" y="463.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (2 samples, 0.04%)</title><rect x="108.2" y="645" width="0.4" height="15.0" fill="rgb(220,89,0)" rx="2" ry="2" />
<text  x="111.17" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.11%)</title><rect x="840.4" y="485" width="1.3" height="15.0" fill="rgb(251,121,23)" rx="2" ry="2" />
<text  x="843.40" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="665.0" y="549" width="0.5" height="15.0" fill="rgb(223,10,42)" rx="2" ry="2" />
<text  x="668.03" y="559.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (9 samples, 0.17%)</title><rect x="788.4" y="549" width="2.0" height="15.0" fill="rgb(249,119,41)" rx="2" ry="2" />
<text  x="791.41" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="872.1" y="581" width="0.2" height="15.0" fill="rgb(250,38,41)" rx="2" ry="2" />
<text  x="875.08" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="56.9" y="277" width="0.2" height="15.0" fill="rgb(229,160,27)" rx="2" ry="2" />
<text  x="59.85" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="27.2" y="341" width="0.2" height="15.0" fill="rgb(207,38,8)" rx="2" ry="2" />
<text  x="30.18" y="351.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%)</title><rect x="43.7" y="469" width="0.2" height="15.0" fill="rgb(205,208,9)" rx="2" ry="2" />
<text  x="46.69" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="60.6" y="277" width="0.3" height="15.0" fill="rgb(213,67,27)" rx="2" ry="2" />
<text  x="63.64" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="807.2" y="405" width="0.6" height="15.0" fill="rgb(252,133,15)" rx="2" ry="2" />
<text  x="810.15" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="832.8" y="469" width="0.7" height="15.0" fill="rgb(230,164,24)" rx="2" ry="2" />
<text  x="835.81" y="479.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::prepare (1 samples, 0.02%)</title><rect x="68.7" y="597" width="0.2" height="15.0" fill="rgb(219,42,17)" rx="2" ry="2" />
<text  x="71.68" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="698.5" y="629" width="0.4" height="15.0" fill="rgb(239,70,9)" rx="2" ry="2" />
<text  x="701.50" y="639.5" ></text>
</g>
<g >
<title>query_result_builder::consume (212 samples, 4.01%)</title><rect x="354.5" y="373" width="47.3" height="15.0" fill="rgb(236,93,25)" rx="2" ry="2" />
<text  x="357.47" y="383.5" >quer..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%)</title><rect x="820.1" y="293" width="0.9" height="15.0" fill="rgb(221,15,25)" rx="2" ry="2" />
<text  x="823.09" y="303.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_dcd3199037457158f6e2516231906d04f9637da6] (1 samples, 0.02%)</title><rect x="84.3" y="485" width="0.2" height="15.0" fill="rgb(234,24,21)" rx="2" ry="2" />
<text  x="87.29" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="81.6" y="517" width="0.2" height="15.0" fill="rgb(252,200,39)" rx="2" ry="2" />
<text  x="84.62" y="527.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="58.0" y="389" width="0.2" height="15.0" fill="rgb(230,97,32)" rx="2" ry="2" />
<text  x="60.97" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.9" y="229" width="0.2" height="15.0" fill="rgb(246,146,30)" rx="2" ry="2" />
<text  x="59.85" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="728.8" y="485" width="0.3" height="15.0" fill="rgb(249,167,49)" rx="2" ry="2" />
<text  x="731.84" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.09%)</title><rect x="447.1" y="437" width="1.1" height="15.0" fill="rgb(205,163,16)" rx="2" ry="2" />
<text  x="450.06" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="705.9" y="613" width="0.2" height="15.0" fill="rgb(227,14,39)" rx="2" ry="2" />
<text  x="708.86" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1030.0" y="389" width="0.3" height="15.0" fill="rgb(208,95,34)" rx="2" ry="2" />
<text  x="1033.03" y="399.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="562.6" y="533" width="1.4" height="15.0" fill="rgb(250,164,35)" rx="2" ry="2" />
<text  x="565.63" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="315.4" y="421" width="1.6" height="15.0" fill="rgb(220,38,3)" rx="2" ry="2" />
<text  x="318.43" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%)</title><rect x="876.1" y="517" width="0.2" height="15.0" fill="rgb(243,174,34)" rx="2" ry="2" />
<text  x="879.09" y="527.5" ></text>
</g>
<g >
<title>table::make_reader (448 samples, 8.47%)</title><rect x="458.2" y="517" width="100.0" height="15.0" fill="rgb(232,46,48)" rx="2" ry="2" />
<text  x="461.22" y="527.5" >table::make_..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="656.1" y="645" width="0.2" height="15.0" fill="rgb(254,193,27)" rx="2" ry="2" />
<text  x="659.11" y="655.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.0" y="661" width="0.3" height="15.0" fill="rgb(221,162,16)" rx="2" ry="2" />
<text  x="21.03" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="1133.8" y="645" width="0.2" height="15.0" fill="rgb(231,90,52)" rx="2" ry="2" />
<text  x="1136.78" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="58.6" y="437" width="0.3" height="15.0" fill="rgb(242,196,31)" rx="2" ry="2" />
<text  x="61.64" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="877.7" y="501" width="0.2" height="15.0" fill="rgb(221,148,54)" rx="2" ry="2" />
<text  x="880.65" y="511.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%)</title><rect x="85.6" y="773" width="0.3" height="15.0" fill="rgb(212,130,36)" rx="2" ry="2" />
<text  x="88.63" y="783.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="81.6" y="453" width="0.2" height="15.0" fill="rgb(211,212,26)" rx="2" ry="2" />
<text  x="84.62" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="82.5" y="581" width="0.2" height="15.0" fill="rgb(242,12,5)" rx="2" ry="2" />
<text  x="85.51" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="671.1" y="613" width="0.2" height="15.0" fill="rgb(250,22,17)" rx="2" ry="2" />
<text  x="674.06" y="623.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="76.9" y="517" width="0.3" height="15.0" fill="rgb(237,134,50)" rx="2" ry="2" />
<text  x="79.93" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1118.4" y="357" width="0.2" height="15.0" fill="rgb(241,68,9)" rx="2" ry="2" />
<text  x="1121.38" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="108.6" y="613" width="0.2" height="15.0" fill="rgb(246,59,48)" rx="2" ry="2" />
<text  x="111.61" y="623.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1024.9" y="421" width="0.2" height="15.0" fill="rgb(253,158,19)" rx="2" ry="2" />
<text  x="1027.90" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="858.9" y="549" width="1.6" height="15.0" fill="rgb(229,162,41)" rx="2" ry="2" />
<text  x="861.91" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="676.0" y="629" width="0.2" height="15.0" fill="rgb(216,117,6)" rx="2" ry="2" />
<text  x="678.97" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="555.5" y="453" width="0.2" height="15.0" fill="rgb(252,8,9)" rx="2" ry="2" />
<text  x="558.49" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (1 samples, 0.02%)</title><rect x="71.4" y="581" width="0.2" height="15.0" fill="rgb(211,173,9)" rx="2" ry="2" />
<text  x="74.35" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (11 samples, 0.21%)</title><rect x="941.5" y="549" width="2.4" height="15.0" fill="rgb(252,70,0)" rx="2" ry="2" />
<text  x="944.46" y="559.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.13%)</title><rect x="840.2" y="517" width="1.5" height="15.0" fill="rgb(247,88,42)" rx="2" ry="2" />
<text  x="843.17" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="832.1" y="485" width="0.3" height="15.0" fill="rgb(226,226,15)" rx="2" ry="2" />
<text  x="835.14" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (3 samples, 0.06%)</title><rect x="629.8" y="597" width="0.7" height="15.0" fill="rgb(247,1,31)" rx="2" ry="2" />
<text  x="632.78" y="607.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="258.5" y="309" width="0.3" height="15.0" fill="rgb(251,81,52)" rx="2" ry="2" />
<text  x="261.54" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1012.6" y="389" width="0.3" height="15.0" fill="rgb(221,134,12)" rx="2" ry="2" />
<text  x="1015.63" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="745.6" y="453" width="0.2" height="15.0" fill="rgb(245,52,3)" rx="2" ry="2" />
<text  x="748.58" y="463.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%)</title><rect x="105.0" y="661" width="0.3" height="15.0" fill="rgb(240,160,42)" rx="2" ry="2" />
<text  x="108.04" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, column_definition const*, std::allocator&lt;column_definition const*&gt;, std::__detail::_Identity, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="75.1" y="549" width="0.3" height="15.0" fill="rgb(249,70,29)" rx="2" ry="2" />
<text  x="78.15" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="702.1" y="469" width="0.2" height="15.0" fill="rgb(252,195,43)" rx="2" ry="2" />
<text  x="705.07" y="479.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1048.6" y="501" width="0.2" height="15.0" fill="rgb(226,174,40)" rx="2" ry="2" />
<text  x="1051.55" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="802.5" y="469" width="0.2" height="15.0" fill="rgb(224,21,50)" rx="2" ry="2" />
<text  x="805.47" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (9 samples, 0.17%)</title><rect x="304.5" y="485" width="2.0" height="15.0" fill="rgb(205,138,2)" rx="2" ry="2" />
<text  x="307.50" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="291.3" y="421" width="0.3" height="15.0" fill="rgb(229,102,18)" rx="2" ry="2" />
<text  x="294.33" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::maybe_reclaim (1 samples, 0.02%)</title><rect x="1166.6" y="613" width="0.2" height="15.0" fill="rgb(247,194,23)" rx="2" ry="2" />
<text  x="1169.57" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="643.8" y="645" width="0.7" height="15.0" fill="rgb(218,30,34)" rx="2" ry="2" />
<text  x="646.84" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="197" width="0.3" height="15.0" fill="rgb(205,149,48)" rx="2" ry="2" />
<text  x="57.84" y="207.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (2 samples, 0.04%)</title><rect x="320.3" y="485" width="0.5" height="15.0" fill="rgb(224,88,18)" rx="2" ry="2" />
<text  x="323.34" y="495.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (46 samples, 0.87%)</title><rect x="757.0" y="565" width="10.2" height="15.0" fill="rgb(243,147,16)" rx="2" ry="2" />
<text  x="759.95" y="575.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%)</title><rect x="110.6" y="517" width="0.2" height="15.0" fill="rgb(221,196,5)" rx="2" ry="2" />
<text  x="113.62" y="527.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (3 samples, 0.06%)</title><rect x="401.1" y="357" width="0.7" height="15.0" fill="rgb(236,196,3)" rx="2" ry="2" />
<text  x="404.10" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (42 samples, 0.79%)</title><rect x="718.8" y="629" width="9.4" height="15.0" fill="rgb(222,205,6)" rx="2" ry="2" />
<text  x="721.80" y="639.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="577.8" y="469" width="0.4" height="15.0" fill="rgb(219,47,48)" rx="2" ry="2" />
<text  x="580.80" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="43.5" y="469" width="0.2" height="15.0" fill="rgb(239,133,51)" rx="2" ry="2" />
<text  x="46.47" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="216.1" y="309" width="0.7" height="15.0" fill="rgb(247,1,2)" rx="2" ry="2" />
<text  x="219.15" y="319.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%)</title><rect x="729.7" y="565" width="0.3" height="15.0" fill="rgb(205,105,5)" rx="2" ry="2" />
<text  x="732.74" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="39.7" y="501" width="0.4" height="15.0" fill="rgb(218,31,19)" rx="2" ry="2" />
<text  x="42.67" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="55.1" y="421" width="0.2" height="15.0" fill="rgb(231,34,28)" rx="2" ry="2" />
<text  x="58.07" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="672.0" y="597" width="0.2" height="15.0" fill="rgb(236,165,1)" rx="2" ry="2" />
<text  x="674.95" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="595.9" y="501" width="0.4" height="15.0" fill="rgb(252,78,47)" rx="2" ry="2" />
<text  x="598.87" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="629.6" y="597" width="0.2" height="15.0" fill="rgb(215,71,40)" rx="2" ry="2" />
<text  x="632.56" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="609.5" y="549" width="0.2" height="15.0" fill="rgb(252,150,51)" rx="2" ry="2" />
<text  x="612.48" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1166.6" y="693" width="0.2" height="15.0" fill="rgb(246,201,37)" rx="2" ry="2" />
<text  x="1169.57" y="703.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1008.4" y="405" width="0.2" height="15.0" fill="rgb(227,143,54)" rx="2" ry="2" />
<text  x="1011.39" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="952.4" y="533" width="0.9" height="15.0" fill="rgb(244,155,45)" rx="2" ry="2" />
<text  x="955.39" y="543.5" ></text>
</g>
<g >
<title>fmt::v7::basic_format_parse_context&lt;char, fmt::v7::detail::error_handler&gt;::advance_to (1 samples, 0.02%)</title><rect x="19.1" y="645" width="0.3" height="15.0" fill="rgb(246,11,47)" rx="2" ry="2" />
<text  x="22.15" y="655.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.09%)</title><rect x="642.7" y="645" width="1.1" height="15.0" fill="rgb(205,151,15)" rx="2" ry="2" />
<text  x="645.72" y="655.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.09%)</title><rect x="431.0" y="389" width="1.1" height="15.0" fill="rgb(251,158,36)" rx="2" ry="2" />
<text  x="434.00" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="108.6" y="581" width="0.2" height="15.0" fill="rgb(244,122,10)" rx="2" ry="2" />
<text  x="111.61" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (50 samples, 0.95%)</title><rect x="703.2" y="661" width="11.1" height="15.0" fill="rgb(211,16,25)" rx="2" ry="2" />
<text  x="706.19" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (9 samples, 0.17%)</title><rect x="609.0" y="565" width="2.0" height="15.0" fill="rgb(210,127,52)" rx="2" ry="2" />
<text  x="612.04" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="60.4" y="245" width="0.2" height="15.0" fill="rgb(222,115,30)" rx="2" ry="2" />
<text  x="63.42" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="321.2" y="517" width="0.3" height="15.0" fill="rgb(233,96,4)" rx="2" ry="2" />
<text  x="324.23" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="110.4" y="517" width="0.2" height="15.0" fill="rgb(228,157,18)" rx="2" ry="2" />
<text  x="113.40" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.7" y="469" width="0.4" height="15.0" fill="rgb(216,142,31)" rx="2" ry="2" />
<text  x="42.67" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="60.4" y="453" width="0.5" height="15.0" fill="rgb(242,123,15)" rx="2" ry="2" />
<text  x="63.42" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (2 samples, 0.04%)</title><rect x="723.9" y="581" width="0.5" height="15.0" fill="rgb(242,60,48)" rx="2" ry="2" />
<text  x="726.93" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (23 samples, 0.43%)</title><rect x="292.7" y="453" width="5.1" height="15.0" fill="rgb(216,226,43)" rx="2" ry="2" />
<text  x="295.67" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (2 samples, 0.04%)</title><rect x="400.7" y="357" width="0.4" height="15.0" fill="rgb(210,6,13)" rx="2" ry="2" />
<text  x="403.66" y="367.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (3 samples, 0.06%)</title><rect x="593.0" y="533" width="0.6" height="15.0" fill="rgb(222,205,10)" rx="2" ry="2" />
<text  x="595.97" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="620.2" y="517" width="0.7" height="15.0" fill="rgb(245,219,15)" rx="2" ry="2" />
<text  x="623.19" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.3" y="389" width="0.4" height="15.0" fill="rgb(245,86,33)" rx="2" ry="2" />
<text  x="50.26" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (1 samples, 0.02%)</title><rect x="22.5" y="565" width="0.2" height="15.0" fill="rgb(252,75,50)" rx="2" ry="2" />
<text  x="25.49" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="61.1" y="469" width="0.2" height="15.0" fill="rgb(251,112,52)" rx="2" ry="2" />
<text  x="64.09" y="479.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="109.7" y="565" width="0.3" height="15.0" fill="rgb(217,98,17)" rx="2" ry="2" />
<text  x="112.73" y="575.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="856.7" y="501" width="0.2" height="15.0" fill="rgb(250,201,49)" rx="2" ry="2" />
<text  x="859.68" y="511.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="427.0" y="373" width="0.2" height="15.0" fill="rgb(245,137,32)" rx="2" ry="2" />
<text  x="429.98" y="383.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%)</title><rect x="889.3" y="597" width="0.2" height="15.0" fill="rgb(251,220,46)" rx="2" ry="2" />
<text  x="892.26" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="701.6" y="485" width="0.2" height="15.0" fill="rgb(221,12,15)" rx="2" ry="2" />
<text  x="704.62" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="943.7" y="485" width="0.2" height="15.0" fill="rgb(245,82,46)" rx="2" ry="2" />
<text  x="946.69" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%)</title><rect x="42.8" y="501" width="0.2" height="15.0" fill="rgb(241,199,51)" rx="2" ry="2" />
<text  x="45.80" y="511.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="21.2" y="597" width="0.2" height="15.0" fill="rgb(224,65,49)" rx="2" ry="2" />
<text  x="24.16" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="74.9" y="549" width="0.2" height="15.0" fill="rgb(243,130,38)" rx="2" ry="2" />
<text  x="77.92" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.0" y="533" width="0.2" height="15.0" fill="rgb(225,154,4)" rx="2" ry="2" />
<text  x="69.00" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="953.3" y="565" width="0.2" height="15.0" fill="rgb(220,121,14)" rx="2" ry="2" />
<text  x="956.29" y="575.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="536.3" y="405" width="0.2" height="15.0" fill="rgb(225,109,34)" rx="2" ry="2" />
<text  x="539.30" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="1113.9" y="581" width="0.5" height="15.0" fill="rgb(245,151,33)" rx="2" ry="2" />
<text  x="1116.92" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="76.3" y="581" width="0.2" height="15.0" fill="rgb(236,24,35)" rx="2" ry="2" />
<text  x="79.26" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1097.9" y="501" width="0.4" height="15.0" fill="rgb(233,86,33)" rx="2" ry="2" />
<text  x="1100.86" y="511.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="348.4" y="325" width="0.3" height="15.0" fill="rgb(209,33,48)" rx="2" ry="2" />
<text  x="351.45" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="82.5" y="533" width="0.2" height="15.0" fill="rgb(243,51,7)" rx="2" ry="2" />
<text  x="85.51" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="944.6" y="581" width="0.2" height="15.0" fill="rgb(252,203,17)" rx="2" ry="2" />
<text  x="947.58" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_keyspace (1 samples, 0.02%)</title><rect x="728.8" y="533" width="0.3" height="15.0" fill="rgb(224,52,6)" rx="2" ry="2" />
<text  x="731.84" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="489.2" y="485" width="0.3" height="15.0" fill="rgb(225,70,28)" rx="2" ry="2" />
<text  x="492.23" y="495.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="881.9" y="549" width="0.2" height="15.0" fill="rgb(252,9,51)" rx="2" ry="2" />
<text  x="884.89" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (2 samples, 0.04%)</title><rect x="17.4" y="725" width="0.4" height="15.0" fill="rgb(239,187,52)" rx="2" ry="2" />
<text  x="20.36" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (6 samples, 0.11%)</title><rect x="821.0" y="309" width="1.3" height="15.0" fill="rgb(210,97,38)" rx="2" ry="2" />
<text  x="823.99" y="319.5" ></text>
</g>
<g >
<title>seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="105.0" y="613" width="0.3" height="15.0" fill="rgb(217,35,13)" rx="2" ry="2" />
<text  x="108.04" y="623.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="17.8" y="453" width="0.2" height="15.0" fill="rgb(226,82,35)" rx="2" ry="2" />
<text  x="20.81" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="65.1" y="501" width="0.2" height="15.0" fill="rgb(227,220,15)" rx="2" ry="2" />
<text  x="68.11" y="511.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="18.0" y="469" width="0.3" height="15.0" fill="rgb(205,165,47)" rx="2" ry="2" />
<text  x="21.03" y="479.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.09%)</title><rect x="1074.2" y="469" width="1.1" height="15.0" fill="rgb(251,136,37)" rx="2" ry="2" />
<text  x="1077.21" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="445.5" y="453" width="1.1" height="15.0" fill="rgb(212,41,9)" rx="2" ry="2" />
<text  x="448.50" y="463.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (2 samples, 0.04%)</title><rect x="926.1" y="517" width="0.4" height="15.0" fill="rgb(254,74,24)" rx="2" ry="2" />
<text  x="929.07" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="260.5" y="309" width="0.3" height="15.0" fill="rgb(241,87,44)" rx="2" ry="2" />
<text  x="263.55" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="46.8" y="341" width="0.2" height="15.0" fill="rgb(244,125,28)" rx="2" ry="2" />
<text  x="49.81" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (6 samples, 0.11%)</title><rect x="53.7" y="437" width="1.4" height="15.0" fill="rgb(239,203,38)" rx="2" ry="2" />
<text  x="56.73" y="447.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="624.0" y="581" width="0.7" height="15.0" fill="rgb(252,225,30)" rx="2" ry="2" />
<text  x="626.98" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="81.8" y="629" width="0.3" height="15.0" fill="rgb(247,19,7)" rx="2" ry="2" />
<text  x="84.84" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="136.7" y="613" width="0.2" height="15.0" fill="rgb(246,178,36)" rx="2" ry="2" />
<text  x="139.72" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="56.2" y="357" width="0.4" height="15.0" fill="rgb(224,90,45)" rx="2" ry="2" />
<text  x="59.18" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="641.2" y="533" width="0.6" height="15.0" fill="rgb(229,37,31)" rx="2" ry="2" />
<text  x="644.16" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="1163.7" y="357" width="0.2" height="15.0" fill="rgb(248,112,51)" rx="2" ry="2" />
<text  x="1166.67" y="367.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1126.2" y="309" width="0.2" height="15.0" fill="rgb(207,167,18)" rx="2" ry="2" />
<text  x="1129.19" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="51.7" y="341" width="0.2" height="15.0" fill="rgb(232,115,24)" rx="2" ry="2" />
<text  x="54.72" y="351.5" ></text>
</g>
<g >
<title>utils::directories::verify_owner_and_mode (1 samples, 0.02%)</title><rect x="730.0" y="645" width="0.2" height="15.0" fill="rgb(227,95,8)" rx="2" ry="2" />
<text  x="732.96" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="23.6" y="581" width="0.2" height="15.0" fill="rgb(209,82,3)" rx="2" ry="2" />
<text  x="26.61" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,015 samples, 19.19%)</title><rect x="888.6" y="613" width="226.4" height="15.0" fill="rgb(245,97,52)" rx="2" ry="2" />
<text  x="891.59" y="623.5" >seastar::noncopyable_function..</text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="677.5" y="645" width="0.5" height="15.0" fill="rgb(230,143,16)" rx="2" ry="2" />
<text  x="680.53" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="658.8" y="645" width="0.2" height="15.0" fill="rgb(252,16,12)" rx="2" ry="2" />
<text  x="661.79" y="655.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="265.7" y="357" width="0.2" height="15.0" fill="rgb(221,227,15)" rx="2" ry="2" />
<text  x="268.68" y="367.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="730.0" y="613" width="0.2" height="15.0" fill="rgb(241,53,34)" rx="2" ry="2" />
<text  x="732.96" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1150.5" y="597" width="0.5" height="15.0" fill="rgb(217,109,46)" rx="2" ry="2" />
<text  x="1153.51" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="320.1" y="485" width="0.2" height="15.0" fill="rgb(222,55,13)" rx="2" ry="2" />
<text  x="323.12" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%)</title><rect x="284.4" y="373" width="1.8" height="15.0" fill="rgb(220,24,37)" rx="2" ry="2" />
<text  x="287.42" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (172 samples, 3.25%)</title><rect x="215.5" y="341" width="38.4" height="15.0" fill="rgb(253,172,2)" rx="2" ry="2" />
<text  x="218.48" y="351.5" >mut..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::do_resize (1 samples, 0.02%)</title><rect x="1166.6" y="661" width="0.2" height="15.0" fill="rgb(242,207,42)" rx="2" ry="2" />
<text  x="1169.57" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (36 samples, 0.68%)</title><rect x="68.7" y="613" width="8.0" height="15.0" fill="rgb(239,161,21)" rx="2" ry="2" />
<text  x="71.68" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="56.2" y="293" width="0.2" height="15.0" fill="rgb(206,122,31)" rx="2" ry="2" />
<text  x="59.18" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="654.8" y="645" width="0.2" height="15.0" fill="rgb(219,55,18)" rx="2" ry="2" />
<text  x="657.77" y="655.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%)</title><rect x="1164.6" y="645" width="0.2" height="15.0" fill="rgb(241,99,33)" rx="2" ry="2" />
<text  x="1167.57" y="655.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (114 samples, 2.16%)</title><rect x="514.2" y="485" width="25.5" height="15.0" fill="rgb(241,98,43)" rx="2" ry="2" />
<text  x="517.22" y="495.5" >m..</text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="991.2" y="405" width="1.8" height="15.0" fill="rgb(245,94,4)" rx="2" ry="2" />
<text  x="994.21" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (8 samples, 0.15%)</title><rect x="695.6" y="645" width="1.8" height="15.0" fill="rgb(253,32,46)" rx="2" ry="2" />
<text  x="698.60" y="655.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%)</title><rect x="18.0" y="421" width="0.3" height="15.0" fill="rgb(217,223,39)" rx="2" ry="2" />
<text  x="21.03" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;sstables::foreign_sstable_open_info [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="16.5" y="693" width="0.2" height="15.0" fill="rgb(223,193,16)" rx="2" ry="2" />
<text  x="19.47" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1092.5" y="533" width="0.2" height="15.0" fill="rgb(254,114,19)" rx="2" ry="2" />
<text  x="1095.50" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="474.3" y="421" width="0.2" height="15.0" fill="rgb(208,48,2)" rx="2" ry="2" />
<text  x="477.28" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="266.8" y="373" width="0.2" height="15.0" fill="rgb(231,203,35)" rx="2" ry="2" />
<text  x="269.79" y="383.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%)</title><rect x="922.3" y="501" width="2.7" height="15.0" fill="rgb(223,71,52)" rx="2" ry="2" />
<text  x="925.27" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="748.7" y="517" width="0.2" height="15.0" fill="rgb(207,57,44)" rx="2" ry="2" />
<text  x="751.70" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::prepare_to_join (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(215,71,24)" rx="2" ry="2" />
<text  x="13.67" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1117.3" y="341" width="0.9" height="15.0" fill="rgb(247,132,45)" rx="2" ry="2" />
<text  x="1120.27" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="57.5" y="277" width="0.5" height="15.0" fill="rgb(212,180,43)" rx="2" ry="2" />
<text  x="60.52" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_access (192 samples, 3.63%)</title><rect x="794.7" y="533" width="42.8" height="15.0" fill="rgb(245,109,52)" rx="2" ry="2" />
<text  x="797.66" y="543.5" >serv..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%)</title><rect x="381.5" y="325" width="2.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="384.47" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (22 samples, 0.42%)</title><rect x="59.8" y="517" width="4.9" height="15.0" fill="rgb(216,146,6)" rx="2" ry="2" />
<text  x="62.75" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="43.5" y="485" width="0.2" height="15.0" fill="rgb(252,210,42)" rx="2" ry="2" />
<text  x="46.47" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="597" width="9.2" height="15.0" fill="rgb(252,149,51)" rx="2" ry="2" />
<text  x="1118.71" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1139.1" y="645" width="0.3" height="15.0" fill="rgb(225,120,4)" rx="2" ry="2" />
<text  x="1142.13" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="734.2" y="661" width="0.2" height="15.0" fill="rgb(221,89,21)" rx="2" ry="2" />
<text  x="737.20" y="671.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%)</title><rect x="1189.8" y="773" width="0.2" height="15.0" fill="rgb(223,219,35)" rx="2" ry="2" />
<text  x="1192.78" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (4 samples, 0.08%)</title><rect x="725.1" y="597" width="0.8" height="15.0" fill="rgb(238,35,44)" rx="2" ry="2" />
<text  x="728.05" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="140.1" y="405" width="0.2" height="15.0" fill="rgb(209,69,31)" rx="2" ry="2" />
<text  x="143.07" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="17.1" y="645" width="0.3" height="15.0" fill="rgb(240,62,14)" rx="2" ry="2" />
<text  x="20.14" y="655.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (9 samples, 0.17%)</title><rect x="1090.5" y="533" width="2.0" height="15.0" fill="rgb(232,197,16)" rx="2" ry="2" />
<text  x="1093.50" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="667.5" y="613" width="0.2" height="15.0" fill="rgb(210,197,8)" rx="2" ry="2" />
<text  x="670.49" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="957.7" y="533" width="0.3" height="15.0" fill="rgb(225,32,43)" rx="2" ry="2" />
<text  x="960.75" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="578.7" y="453" width="0.2" height="15.0" fill="rgb(244,61,46)" rx="2" ry="2" />
<text  x="581.69" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (14 samples, 0.26%)</title><rect x="82.1" y="741" width="3.1" height="15.0" fill="rgb(218,51,9)" rx="2" ry="2" />
<text  x="85.06" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (1 samples, 0.02%)</title><rect x="350.7" y="341" width="0.2" height="15.0" fill="rgb(220,45,39)" rx="2" ry="2" />
<text  x="353.68" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="265.9" y="357" width="0.2" height="15.0" fill="rgb(211,196,22)" rx="2" ry="2" />
<text  x="268.90" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, utils::directories::verify_owner_and_mode (1 samples, 0.02%)</title><rect x="730.0" y="661" width="0.2" height="15.0" fill="rgb(221,103,0)" rx="2" ry="2" />
<text  x="732.96" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (25 samples, 0.47%)</title><rect x="876.5" y="581" width="5.6" height="15.0" fill="rgb(233,195,52)" rx="2" ry="2" />
<text  x="879.54" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1059.0" y="485" width="0.3" height="15.0" fill="rgb(223,175,17)" rx="2" ry="2" />
<text  x="1062.04" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.32%)</title><rect x="1008.8" y="389" width="3.8" height="15.0" fill="rgb(248,2,19)" rx="2" ry="2" />
<text  x="1011.84" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="1139.4" y="645" width="0.6" height="15.0" fill="rgb(205,82,42)" rx="2" ry="2" />
<text  x="1142.36" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="450.4" y="501" width="0.5" height="15.0" fill="rgb(240,183,29)" rx="2" ry="2" />
<text  x="453.41" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::migration_manager::include_keyspace_and_announce (1 samples, 0.02%)</title><rect x="728.8" y="661" width="0.3" height="15.0" fill="rgb(229,108,12)" rx="2" ry="2" />
<text  x="731.84" y="671.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (507 samples, 9.59%)</title><rect x="332.2" y="453" width="113.1" height="15.0" fill="rgb(240,171,16)" rx="2" ry="2" />
<text  x="335.16" y="463.5" >seastar::repe..</text>
</g>
<g >
<title>utils::estimated_histogram::add (6 samples, 0.11%)</title><rect x="1154.1" y="629" width="1.3" height="15.0" fill="rgb(248,213,29)" rx="2" ry="2" />
<text  x="1157.08" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::deserialize_kind (1 samples, 0.02%)</title><rect x="110.0" y="533" width="0.2" height="15.0" fill="rgb(223,86,41)" rx="2" ry="2" />
<text  x="112.95" y="543.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (2 samples, 0.04%)</title><rect x="108.8" y="581" width="0.5" height="15.0" fill="rgb(232,125,11)" rx="2" ry="2" />
<text  x="111.84" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="629.1" y="597" width="0.5" height="15.0" fill="rgb(215,71,14)" rx="2" ry="2" />
<text  x="632.12" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="943.2" y="485" width="0.5" height="15.0" fill="rgb(250,57,29)" rx="2" ry="2" />
<text  x="946.25" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="816.3" y="309" width="0.7" height="15.0" fill="rgb(210,150,53)" rx="2" ry="2" />
<text  x="819.30" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="1047.7" y="453" width="0.4" height="15.0" fill="rgb(207,186,24)" rx="2" ry="2" />
<text  x="1050.66" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_counters&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1132.2" y="501" width="0.2" height="15.0" fill="rgb(223,124,7)" rx="2" ry="2" />
<text  x="1135.22" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="656.3" y="645" width="0.3" height="15.0" fill="rgb(235,4,10)" rx="2" ry="2" />
<text  x="659.33" y="655.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="253.4" y="325" width="0.2" height="15.0" fill="rgb(221,100,12)" rx="2" ry="2" />
<text  x="256.41" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="909.8" y="501" width="0.2" height="15.0" fill="rgb(253,7,21)" rx="2" ry="2" />
<text  x="912.78" y="511.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (58 samples, 1.10%)</title><rect x="756.3" y="581" width="12.9" height="15.0" fill="rgb(216,95,43)" rx="2" ry="2" />
<text  x="759.28" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="63.3" y="453" width="0.2" height="15.0" fill="rgb(222,116,10)" rx="2" ry="2" />
<text  x="66.32" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="838.8" y="517" width="0.5" height="15.0" fill="rgb(245,15,18)" rx="2" ry="2" />
<text  x="841.83" y="527.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="762.1" y="485" width="0.2" height="15.0" fill="rgb(205,38,47)" rx="2" ry="2" />
<text  x="765.09" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="56.0" y="405" width="0.6" height="15.0" fill="rgb(231,6,4)" rx="2" ry="2" />
<text  x="58.96" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::~_Optional_base (1 samples, 0.02%)</title><rect x="43.2" y="501" width="0.3" height="15.0" fill="rgb(225,134,32)" rx="2" ry="2" />
<text  x="46.24" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="829.0" y="437" width="0.2" height="15.0" fill="rgb(244,171,19)" rx="2" ry="2" />
<text  x="832.02" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="875.9" y="389" width="0.2" height="15.0" fill="rgb(234,171,54)" rx="2" ry="2" />
<text  x="878.87" y="399.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::deserialize_visitor&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="469" width="0.2" height="15.0" fill="rgb(249,156,41)" rx="2" ry="2" />
<text  x="649.07" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="45.5" y="469" width="0.2" height="15.0" fill="rgb(227,192,53)" rx="2" ry="2" />
<text  x="48.47" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="186.3" y="421" width="0.4" height="15.0" fill="rgb(233,165,28)" rx="2" ry="2" />
<text  x="189.25" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (7 samples, 0.13%)</title><rect x="1126.0" y="405" width="1.5" height="15.0" fill="rgb(207,99,48)" rx="2" ry="2" />
<text  x="1128.97" y="415.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.7" y="757" width="0.2" height="15.0" fill="rgb(249,62,30)" rx="2" ry="2" />
<text  x="13.67" y="767.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="202.3" y="373" width="2.2" height="15.0" fill="rgb(238,117,52)" rx="2" ry="2" />
<text  x="205.32" y="383.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (26 samples, 0.49%)</title><rect x="311.9" y="469" width="5.8" height="15.0" fill="rgb(237,1,15)" rx="2" ry="2" />
<text  x="314.86" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="574.7" y="469" width="0.2" height="15.0" fill="rgb(244,194,30)" rx="2" ry="2" />
<text  x="577.68" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (594 samples, 11.23%)</title><rect x="169.7" y="501" width="132.6" height="15.0" fill="rgb(215,121,8)" rx="2" ry="2" />
<text  x="172.74" y="511.5" >mutation_fragmen..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%)</title><rect x="135.8" y="581" width="0.3" height="15.0" fill="rgb(231,71,10)" rx="2" ry="2" />
<text  x="138.83" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="85.4" y="565" width="0.2" height="15.0" fill="rgb(250,85,46)" rx="2" ry="2" />
<text  x="88.41" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="243.8" y="277" width="0.2" height="15.0" fill="rgb(226,114,11)" rx="2" ry="2" />
<text  x="246.81" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1034.3" y="373" width="0.2" height="15.0" fill="rgb(236,8,44)" rx="2" ry="2" />
<text  x="1037.27" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="629" width="0.2" height="15.0" fill="rgb(232,86,12)" rx="2" ry="2" />
<text  x="1166.67" y="639.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (103 samples, 1.95%)</title><rect x="516.4" y="469" width="23.0" height="15.0" fill="rgb(230,73,48)" rx="2" ry="2" />
<text  x="519.45" y="479.5" >s..</text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="47.9" y="453" width="0.3" height="15.0" fill="rgb(226,68,33)" rx="2" ry="2" />
<text  x="50.93" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="41.5" y="341" width="0.4" height="15.0" fill="rgb(227,214,6)" rx="2" ry="2" />
<text  x="44.46" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%)</title><rect x="635.1" y="549" width="0.7" height="15.0" fill="rgb(252,71,17)" rx="2" ry="2" />
<text  x="638.14" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (7 samples, 0.13%)</title><rect x="1126.0" y="373" width="1.5" height="15.0" fill="rgb(246,8,9)" rx="2" ry="2" />
<text  x="1128.97" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (3 samples, 0.06%)</title><rect x="58.4" y="469" width="0.7" height="15.0" fill="rgb(246,87,35)" rx="2" ry="2" />
<text  x="61.41" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="790.2" y="501" width="0.2" height="15.0" fill="rgb(215,114,36)" rx="2" ry="2" />
<text  x="793.20" y="511.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="621.3" y="565" width="0.2" height="15.0" fill="rgb(222,211,45)" rx="2" ry="2" />
<text  x="624.31" y="575.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (18 samples, 0.34%)</title><rect x="336.4" y="405" width="4.0" height="15.0" fill="rgb(221,1,6)" rx="2" ry="2" />
<text  x="339.40" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (39 samples, 0.74%)</title><rect x="68.7" y="629" width="8.7" height="15.0" fill="rgb(238,121,23)" rx="2" ry="2" />
<text  x="71.68" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="46.6" y="453" width="0.2" height="15.0" fill="rgb(214,82,9)" rx="2" ry="2" />
<text  x="49.59" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="51.7" y="437" width="0.2" height="15.0" fill="rgb(240,30,38)" rx="2" ry="2" />
<text  x="54.72" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.4" y="421" width="0.4" height="15.0" fill="rgb(238,207,46)" rx="2" ry="2" />
<text  x="53.38" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="589.4" y="469" width="0.2" height="15.0" fill="rgb(228,24,16)" rx="2" ry="2" />
<text  x="592.40" y="479.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%)</title><rect x="1056.1" y="437" width="0.5" height="15.0" fill="rgb(252,19,19)" rx="2" ry="2" />
<text  x="1059.14" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="692.0" y="645" width="0.3" height="15.0" fill="rgb(251,210,35)" rx="2" ry="2" />
<text  x="695.03" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="591.2" y="501" width="0.2" height="15.0" fill="rgb(239,103,54)" rx="2" ry="2" />
<text  x="594.19" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (14 samples, 0.26%)</title><rect x="263.0" y="373" width="3.1" height="15.0" fill="rgb(225,162,36)" rx="2" ry="2" />
<text  x="266.00" y="383.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (9 samples, 0.17%)</title><rect x="1128.0" y="325" width="2.0" height="15.0" fill="rgb(243,99,8)" rx="2" ry="2" />
<text  x="1130.98" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="672.4" y="629" width="0.4" height="15.0" fill="rgb(208,160,54)" rx="2" ry="2" />
<text  x="675.40" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="671.7" y="597" width="0.3" height="15.0" fill="rgb(249,66,28)" rx="2" ry="2" />
<text  x="674.73" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="265.0" y="309" width="0.2" height="15.0" fill="rgb(237,1,32)" rx="2" ry="2" />
<text  x="268.01" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1030.5" y="437" width="0.2" height="15.0" fill="rgb(236,120,9)" rx="2" ry="2" />
<text  x="1033.48" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (11 samples, 0.21%)</title><rect x="866.7" y="533" width="2.5" height="15.0" fill="rgb(251,30,6)" rx="2" ry="2" />
<text  x="869.72" y="543.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1119.3" y="373" width="0.2" height="15.0" fill="rgb(243,153,49)" rx="2" ry="2" />
<text  x="1122.28" y="383.5" ></text>
</g>
<g >
<title>auth::service::get_uncached_permissions (1 samples, 0.02%)</title><rect x="1163.7" y="501" width="0.2" height="15.0" fill="rgb(242,60,36)" rx="2" ry="2" />
<text  x="1166.67" y="511.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="77.2" y="581" width="0.2" height="15.0" fill="rgb(233,183,10)" rx="2" ry="2" />
<text  x="80.15" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::shared_ptr_count_for&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="533" width="0.3" height="15.0" fill="rgb(229,46,29)" rx="2" ry="2" />
<text  x="21.03" y="543.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (24 samples, 0.45%)</title><rect x="1015.3" y="357" width="5.4" height="15.0" fill="rgb(215,11,36)" rx="2" ry="2" />
<text  x="1018.31" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="702.1" y="309" width="0.2" height="15.0" fill="rgb(219,160,54)" rx="2" ry="2" />
<text  x="705.07" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="44.4" y="309" width="0.2" height="15.0" fill="rgb(245,83,5)" rx="2" ry="2" />
<text  x="47.36" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="773.9" y="549" width="1.1" height="15.0" fill="rgb(218,62,4)" rx="2" ry="2" />
<text  x="776.91" y="559.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="828.6" y="437" width="0.2" height="15.0" fill="rgb(220,169,14)" rx="2" ry="2" />
<text  x="831.57" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="699.2" y="613" width="0.4" height="15.0" fill="rgb(246,228,37)" rx="2" ry="2" />
<text  x="702.17" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.11%)</title><rect x="674.6" y="645" width="1.4" height="15.0" fill="rgb(249,116,20)" rx="2" ry="2" />
<text  x="677.63" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::init (1 samples, 0.02%)</title><rect x="22.7" y="565" width="0.2" height="15.0" fill="rgb(224,51,44)" rx="2" ry="2" />
<text  x="25.72" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%)</title><rect x="365.4" y="341" width="1.6" height="15.0" fill="rgb(246,207,34)" rx="2" ry="2" />
<text  x="368.41" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="477.9" y="453" width="0.6" height="15.0" fill="rgb(236,135,20)" rx="2" ry="2" />
<text  x="480.85" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="555.3" y="421" width="0.2" height="15.0" fill="rgb(239,228,27)" rx="2" ry="2" />
<text  x="558.27" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.19%)</title><rect x="40.6" y="517" width="2.2" height="15.0" fill="rgb(236,5,46)" rx="2" ry="2" />
<text  x="43.57" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="640.3" y="597" width="0.2" height="15.0" fill="rgb(229,30,26)" rx="2" ry="2" />
<text  x="643.27" y="607.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.2" y="757" width="0.2" height="15.0" fill="rgb(247,30,8)" rx="2" ry="2" />
<text  x="13.22" y="767.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="290.0" y="357" width="0.2" height="15.0" fill="rgb(246,195,4)" rx="2" ry="2" />
<text  x="293.00" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="354.3" y="373" width="0.2" height="15.0" fill="rgb(235,118,45)" rx="2" ry="2" />
<text  x="357.25" y="383.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;long, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.2" y="693" width="0.3" height="15.0" fill="rgb(212,26,32)" rx="2" ry="2" />
<text  x="19.25" y="703.5" ></text>
</g>
<g >
<title>abstract_type::deserialize&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="646.1" y="549" width="0.2" height="15.0" fill="rgb(216,22,42)" rx="2" ry="2" />
<text  x="649.07" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (58 samples, 1.10%)</title><rect x="308.1" y="517" width="12.9" height="15.0" fill="rgb(234,199,10)" rx="2" ry="2" />
<text  x="311.07" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="894.2" y="533" width="0.6" height="15.0" fill="rgb(210,170,10)" rx="2" ry="2" />
<text  x="897.16" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;database&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="581" width="0.3" height="15.0" fill="rgb(211,85,27)" rx="2" ry="2" />
<text  x="21.03" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="610.4" y="549" width="0.2" height="15.0" fill="rgb(229,54,54)" rx="2" ry="2" />
<text  x="613.37" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.36%)</title><rect x="247.8" y="293" width="4.3" height="15.0" fill="rgb(241,170,39)" rx="2" ry="2" />
<text  x="250.83" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="645.8" y="613" width="0.3" height="15.0" fill="rgb(226,94,31)" rx="2" ry="2" />
<text  x="648.85" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="41.2" y="357" width="0.3" height="15.0" fill="rgb(221,31,29)" rx="2" ry="2" />
<text  x="44.23" y="367.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%)</title><rect x="724.4" y="581" width="0.2" height="15.0" fill="rgb(240,6,54)" rx="2" ry="2" />
<text  x="727.38" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="61.5" y="325" width="0.5" height="15.0" fill="rgb(206,171,13)" rx="2" ry="2" />
<text  x="64.54" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="821.4" y="261" width="0.7" height="15.0" fill="rgb(239,173,7)" rx="2" ry="2" />
<text  x="824.43" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="875.6" y="565" width="0.7" height="15.0" fill="rgb(243,58,30)" rx="2" ry="2" />
<text  x="878.65" y="575.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,844 samples, 91.59%)</title><rect x="86.1" y="741" width="1080.7" height="15.0" fill="rgb(217,117,54)" rx="2" ry="2" />
<text  x="89.08" y="751.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="719.9" y="613" width="0.2" height="15.0" fill="rgb(243,197,6)" rx="2" ry="2" />
<text  x="722.92" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="940.8" y="501" width="0.4" height="15.0" fill="rgb(212,174,44)" rx="2" ry="2" />
<text  x="943.79" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1111.5" y="581" width="0.2" height="15.0" fill="rgb(229,119,14)" rx="2" ry="2" />
<text  x="1114.47" y="591.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="668.2" y="549" width="0.2" height="15.0" fill="rgb(221,126,14)" rx="2" ry="2" />
<text  x="671.16" y="559.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%)</title><rect x="878.5" y="421" width="0.3" height="15.0" fill="rgb(205,208,22)" rx="2" ry="2" />
<text  x="881.55" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="67.1" y="517" width="0.2" height="15.0" fill="rgb(231,175,20)" rx="2" ry="2" />
<text  x="70.11" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="681.5" y="645" width="0.3" height="15.0" fill="rgb(220,86,18)" rx="2" ry="2" />
<text  x="684.54" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (28 samples, 0.53%)</title><rect x="779.9" y="517" width="6.3" height="15.0" fill="rgb(252,46,26)" rx="2" ry="2" />
<text  x="782.93" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="421" width="0.2" height="15.0" fill="rgb(209,108,12)" rx="2" ry="2" />
<text  x="143.07" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="56.6" y="293" width="0.3" height="15.0" fill="rgb(254,46,12)" rx="2" ry="2" />
<text  x="59.63" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="910.0" y="517" width="0.4" height="15.0" fill="rgb(216,136,21)" rx="2" ry="2" />
<text  x="913.00" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1073.8" y="437" width="0.2" height="15.0" fill="rgb(235,56,50)" rx="2" ry="2" />
<text  x="1076.76" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="56.2" y="309" width="0.2" height="15.0" fill="rgb(233,197,25)" rx="2" ry="2" />
<text  x="59.18" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="60.4" y="293" width="0.2" height="15.0" fill="rgb(217,143,17)" rx="2" ry="2" />
<text  x="63.42" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.3" y="373" width="0.2" height="15.0" fill="rgb(251,55,9)" rx="2" ry="2" />
<text  x="64.31" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="110.2" y="453" width="0.2" height="15.0" fill="rgb(236,78,8)" rx="2" ry="2" />
<text  x="113.17" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="41.2" y="373" width="0.3" height="15.0" fill="rgb(220,55,16)" rx="2" ry="2" />
<text  x="44.23" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (51 samples, 0.96%)</title><rect x="1012.9" y="405" width="11.3" height="15.0" fill="rgb(228,168,32)" rx="2" ry="2" />
<text  x="1015.85" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_dcd3199037457158f6e2516231906d04f9637da6] (1 samples, 0.02%)</title><rect x="955.3" y="549" width="0.2" height="15.0" fill="rgb(216,40,29)" rx="2" ry="2" />
<text  x="958.29" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%)</title><rect x="984.7" y="453" width="0.5" height="15.0" fill="rgb(220,65,0)" rx="2" ry="2" />
<text  x="987.74" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="729.1" y="645" width="0.2" height="15.0" fill="rgb(222,151,51)" rx="2" ry="2" />
<text  x="732.07" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="881.4" y="549" width="0.3" height="15.0" fill="rgb(237,73,21)" rx="2" ry="2" />
<text  x="884.45" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="85.2" y="709" width="0.4" height="15.0" fill="rgb(209,154,16)" rx="2" ry="2" />
<text  x="88.19" y="719.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%)</title><rect x="1074.9" y="405" width="0.4" height="15.0" fill="rgb(251,158,31)" rx="2" ry="2" />
<text  x="1077.88" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="55.7" y="421" width="0.9" height="15.0" fill="rgb(212,126,46)" rx="2" ry="2" />
<text  x="58.74" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="838.2" y="533" width="0.2" height="15.0" fill="rgb(227,138,38)" rx="2" ry="2" />
<text  x="841.16" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="179.3" y="421" width="0.3" height="15.0" fill="rgb(219,97,13)" rx="2" ry="2" />
<text  x="182.34" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (44 samples, 0.83%)</title><rect x="179.8" y="437" width="9.8" height="15.0" fill="rgb(219,122,35)" rx="2" ry="2" />
<text  x="182.78" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (7 samples, 0.13%)</title><rect x="1075.3" y="485" width="1.6" height="15.0" fill="rgb(219,205,2)" rx="2" ry="2" />
<text  x="1078.32" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="555.3" y="405" width="0.2" height="15.0" fill="rgb(243,0,6)" rx="2" ry="2" />
<text  x="558.27" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="558.2" y="565" width="1.1" height="15.0" fill="rgb(207,213,27)" rx="2" ry="2" />
<text  x="561.17" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="570.7" y="581" width="0.2" height="15.0" fill="rgb(214,13,35)" rx="2" ry="2" />
<text  x="573.66" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="644.7" y="645" width="0.5" height="15.0" fill="rgb(227,160,11)" rx="2" ry="2" />
<text  x="647.73" y="655.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.11%)</title><rect x="549.7" y="453" width="1.3" height="15.0" fill="rgb(250,211,40)" rx="2" ry="2" />
<text  x="552.69" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1100.3" y="565" width="0.2" height="15.0" fill="rgb(250,211,43)" rx="2" ry="2" />
<text  x="1103.31" y="575.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (1 samples, 0.02%)</title><rect x="761.9" y="485" width="0.2" height="15.0" fill="rgb(250,167,22)" rx="2" ry="2" />
<text  x="764.86" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="165" width="0.3" height="15.0" fill="rgb(228,108,21)" rx="2" ry="2" />
<text  x="57.84" y="175.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.5" y="405" width="0.3" height="15.0" fill="rgb(219,155,45)" rx="2" ry="2" />
<text  x="881.55" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;sstables::sstables_manager::deactivate (1 samples, 0.02%)</title><rect x="701.8" y="661" width="0.3" height="15.0" fill="rgb(246,33,39)" rx="2" ry="2" />
<text  x="704.85" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="666.6" y="597" width="0.4" height="15.0" fill="rgb(218,125,54)" rx="2" ry="2" />
<text  x="669.60" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (16 samples, 0.30%)</title><rect x="736.4" y="629" width="3.6" height="15.0" fill="rgb(230,227,3)" rx="2" ry="2" />
<text  x="739.43" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.47%)</title><rect x="876.5" y="629" width="5.6" height="15.0" fill="rgb(234,146,47)" rx="2" ry="2" />
<text  x="879.54" y="639.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="108.8" y="437" width="0.3" height="15.0" fill="rgb(239,172,6)" rx="2" ry="2" />
<text  x="111.84" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.09%)</title><rect x="713.2" y="645" width="1.1" height="15.0" fill="rgb(222,56,24)" rx="2" ry="2" />
<text  x="716.23" y="655.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1125.7" y="405" width="0.3" height="15.0" fill="rgb(245,163,42)" rx="2" ry="2" />
<text  x="1128.75" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (3 samples, 0.06%)</title><rect x="264.6" y="325" width="0.6" height="15.0" fill="rgb(232,78,52)" rx="2" ry="2" />
<text  x="267.56" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="61.3" y="453" width="0.7" height="15.0" fill="rgb(242,73,32)" rx="2" ry="2" />
<text  x="64.31" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="54.2" y="341" width="0.9" height="15.0" fill="rgb(254,35,37)" rx="2" ry="2" />
<text  x="57.17" y="351.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="110.2" y="517" width="0.2" height="15.0" fill="rgb(206,222,32)" rx="2" ry="2" />
<text  x="113.17" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="74.3" y="421" width="0.2" height="15.0" fill="rgb(231,19,26)" rx="2" ry="2" />
<text  x="77.25" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="683.8" y="645" width="0.2" height="15.0" fill="rgb(248,33,49)" rx="2" ry="2" />
<text  x="686.78" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="778.6" y="485" width="1.1" height="15.0" fill="rgb(212,208,47)" rx="2" ry="2" />
<text  x="781.60" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="568.4" y="549" width="0.3" height="15.0" fill="rgb(242,183,14)" rx="2" ry="2" />
<text  x="571.43" y="559.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (2 samples, 0.04%)</title><rect x="1130.2" y="293" width="0.5" height="15.0" fill="rgb(207,84,16)" rx="2" ry="2" />
<text  x="1133.21" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="218.8" y="293" width="0.5" height="15.0" fill="rgb(226,63,12)" rx="2" ry="2" />
<text  x="221.83" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="421" width="0.2" height="15.0" fill="rgb(242,80,22)" rx="2" ry="2" />
<text  x="64.09" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%)</title><rect x="612.2" y="565" width="0.4" height="15.0" fill="rgb(207,41,14)" rx="2" ry="2" />
<text  x="615.16" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.02%)</title><rect x="1188.9" y="789" width="0.2" height="15.0" fill="rgb(215,154,19)" rx="2" ry="2" />
<text  x="1191.88" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="45.0" y="405" width="0.5" height="15.0" fill="rgb(238,27,42)" rx="2" ry="2" />
<text  x="48.03" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="329.0" y="469" width="0.3" height="15.0" fill="rgb(237,139,31)" rx="2" ry="2" />
<text  x="332.04" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="59.5" y="437" width="0.3" height="15.0" fill="rgb(235,80,5)" rx="2" ry="2" />
<text  x="62.53" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="799.8" y="453" width="0.2" height="15.0" fill="rgb(241,46,49)" rx="2" ry="2" />
<text  x="802.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="690.0" y="613" width="0.5" height="15.0" fill="rgb(245,150,37)" rx="2" ry="2" />
<text  x="693.02" y="623.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (3 samples, 0.06%)</title><rect x="217.0" y="293" width="0.7" height="15.0" fill="rgb(222,152,8)" rx="2" ry="2" />
<text  x="220.04" y="303.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::seek (1 samples, 0.02%)</title><rect x="35.7" y="373" width="0.2" height="15.0" fill="rgb(205,119,0)" rx="2" ry="2" />
<text  x="38.66" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="49.7" y="437" width="0.2" height="15.0" fill="rgb(232,34,16)" rx="2" ry="2" />
<text  x="52.71" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="256.3" y="293" width="0.5" height="15.0" fill="rgb(228,10,44)" rx="2" ry="2" />
<text  x="259.31" y="303.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (5 samples, 0.09%)</title><rect x="11.6" y="741" width="1.1" height="15.0" fill="rgb(240,195,26)" rx="2" ry="2" />
<text  x="14.56" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (7 samples, 0.13%)</title><rect x="638.3" y="581" width="1.5" height="15.0" fill="rgb(208,226,13)" rx="2" ry="2" />
<text  x="641.26" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="200.5" y="357" width="0.3" height="15.0" fill="rgb(238,158,36)" rx="2" ry="2" />
<text  x="203.53" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1060.8" y="469" width="0.2" height="15.0" fill="rgb(215,217,32)" rx="2" ry="2" />
<text  x="1063.82" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="80.1" y="549" width="0.6" height="15.0" fill="rgb(220,72,47)" rx="2" ry="2" />
<text  x="83.05" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (4 samples, 0.08%)</title><rect x="975.2" y="517" width="0.8" height="15.0" fill="rgb(214,164,38)" rx="2" ry="2" />
<text  x="978.15" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="1149.2" y="581" width="1.3" height="15.0" fill="rgb(228,92,51)" rx="2" ry="2" />
<text  x="1152.17" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (5 samples, 0.09%)</title><rect x="536.5" y="437" width="1.1" height="15.0" fill="rgb(214,224,47)" rx="2" ry="2" />
<text  x="539.53" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1 samples, 0.02%)</title><rect x="728.8" y="453" width="0.3" height="15.0" fill="rgb(244,118,32)" rx="2" ry="2" />
<text  x="731.84" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1048.3" y="485" width="0.3" height="15.0" fill="rgb(239,187,33)" rx="2" ry="2" />
<text  x="1051.33" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%)</title><rect x="877.0" y="485" width="0.2" height="15.0" fill="rgb(245,189,4)" rx="2" ry="2" />
<text  x="879.98" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%)</title><rect x="81.6" y="341" width="0.2" height="15.0" fill="rgb(250,57,33)" rx="2" ry="2" />
<text  x="84.62" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="47.7" y="485" width="0.2" height="15.0" fill="rgb(232,13,29)" rx="2" ry="2" />
<text  x="50.70" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="828.3" y="421" width="0.3" height="15.0" fill="rgb(252,180,22)" rx="2" ry="2" />
<text  x="831.35" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="563.7" y="501" width="0.3" height="15.0" fill="rgb(239,156,47)" rx="2" ry="2" />
<text  x="566.75" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="57.5" y="389" width="0.5" height="15.0" fill="rgb(246,28,54)" rx="2" ry="2" />
<text  x="60.52" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="774.1" y="533" width="0.9" height="15.0" fill="rgb(232,23,4)" rx="2" ry="2" />
<text  x="777.13" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="173.3" y="453" width="0.2" height="15.0" fill="rgb(222,80,8)" rx="2" ry="2" />
<text  x="176.31" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.6" y="357" width="0.3" height="15.0" fill="rgb(225,34,21)" rx="2" ry="2" />
<text  x="63.64" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (68 samples, 1.29%)</title><rect x="808.5" y="421" width="15.2" height="15.0" fill="rgb(225,100,17)" rx="2" ry="2" />
<text  x="811.49" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="56.0" y="389" width="0.2" height="15.0" fill="rgb(225,207,30)" rx="2" ry="2" />
<text  x="58.96" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="428.1" y="357" width="0.2" height="15.0" fill="rgb(229,1,30)" rx="2" ry="2" />
<text  x="431.10" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="63.5" y="485" width="0.5" height="15.0" fill="rgb(207,6,3)" rx="2" ry="2" />
<text  x="66.55" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="56.6" y="325" width="0.3" height="15.0" fill="rgb(253,97,27)" rx="2" ry="2" />
<text  x="59.63" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="449.5" y="485" width="0.9" height="15.0" fill="rgb(233,130,8)" rx="2" ry="2" />
<text  x="452.52" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::use_statement*, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.8" y="485" width="0.2" height="15.0" fill="rgb(247,198,36)" rx="2" ry="2" />
<text  x="70.78" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="81.6" y="245" width="0.2" height="15.0" fill="rgb(232,153,24)" rx="2" ry="2" />
<text  x="84.62" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (12 samples, 0.23%)</title><rect x="651.6" y="645" width="2.7" height="15.0" fill="rgb(213,164,40)" rx="2" ry="2" />
<text  x="654.65" y="655.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2 samples, 0.04%)</title><rect x="847.3" y="565" width="0.5" height="15.0" fill="rgb(219,85,42)" rx="2" ry="2" />
<text  x="850.31" y="575.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="248.7" y="277" width="0.2" height="15.0" fill="rgb(240,190,21)" rx="2" ry="2" />
<text  x="251.72" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="629" width="0.3" height="15.0" fill="rgb(253,161,42)" rx="2" ry="2" />
<text  x="21.03" y="639.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.08%)</title><rect x="1154.5" y="613" width="0.9" height="15.0" fill="rgb(250,204,44)" rx="2" ry="2" />
<text  x="1157.53" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="140.1" y="293" width="0.2" height="15.0" fill="rgb(238,146,47)" rx="2" ry="2" />
<text  x="143.07" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="831.7" y="469" width="0.4" height="15.0" fill="rgb(236,45,44)" rx="2" ry="2" />
<text  x="834.69" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.32%)</title><rect x="984.5" y="485" width="3.8" height="15.0" fill="rgb(206,154,42)" rx="2" ry="2" />
<text  x="987.52" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="61.3" y="325" width="0.2" height="15.0" fill="rgb(252,195,10)" rx="2" ry="2" />
<text  x="64.31" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="869.6" y="581" width="0.2" height="15.0" fill="rgb(206,33,38)" rx="2" ry="2" />
<text  x="872.62" y="591.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="108.6" y="661" width="0.2" height="15.0" fill="rgb(228,62,29)" rx="2" ry="2" />
<text  x="111.61" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.3" y="357" width="0.2" height="15.0" fill="rgb(251,102,32)" rx="2" ry="2" />
<text  x="1037.27" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="689.1" y="597" width="0.5" height="15.0" fill="rgb(253,195,15)" rx="2" ry="2" />
<text  x="692.13" y="607.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="836.4" y="453" width="0.6" height="15.0" fill="rgb(221,179,33)" rx="2" ry="2" />
<text  x="839.38" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%)</title><rect x="269.7" y="389" width="0.7" height="15.0" fill="rgb(250,0,48)" rx="2" ry="2" />
<text  x="272.69" y="399.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::free (1 samples, 0.02%)</title><rect x="22.9" y="517" width="0.3" height="15.0" fill="rgb(235,221,17)" rx="2" ry="2" />
<text  x="25.94" y="527.5" ></text>
</g>
<g >
<title>seastar::fair_queue::dispatch_requests (1 samples, 0.02%)</title><rect x="1163.9" y="629" width="0.2" height="15.0" fill="rgb(232,91,3)" rx="2" ry="2" />
<text  x="1166.90" y="639.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="518.9" y="453" width="0.4" height="15.0" fill="rgb(249,107,45)" rx="2" ry="2" />
<text  x="521.90" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%)</title><rect x="153.5" y="581" width="0.4" height="15.0" fill="rgb(224,130,30)" rx="2" ry="2" />
<text  x="156.46" y="591.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (2 samples, 0.04%)</title><rect x="108.8" y="565" width="0.5" height="15.0" fill="rgb(250,171,34)" rx="2" ry="2" />
<text  x="111.84" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="670.2" y="629" width="0.2" height="15.0" fill="rgb(238,189,43)" rx="2" ry="2" />
<text  x="673.17" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (3 samples, 0.06%)</title><rect x="1046.3" y="421" width="0.7" height="15.0" fill="rgb(217,181,35)" rx="2" ry="2" />
<text  x="1049.32" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (25 samples, 0.47%)</title><rect x="605.5" y="597" width="5.5" height="15.0" fill="rgb(234,172,27)" rx="2" ry="2" />
<text  x="608.47" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="653.4" y="629" width="0.9" height="15.0" fill="rgb(219,97,3)" rx="2" ry="2" />
<text  x="656.43" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="251.8" y="277" width="0.3" height="15.0" fill="rgb(214,86,28)" rx="2" ry="2" />
<text  x="254.85" y="287.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="78.9" y="501" width="0.5" height="15.0" fill="rgb(210,168,3)" rx="2" ry="2" />
<text  x="81.94" y="511.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="58.4" y="405" width="0.2" height="15.0" fill="rgb(222,129,3)" rx="2" ry="2" />
<text  x="61.41" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="481.4" y="421" width="0.7" height="15.0" fill="rgb(254,98,31)" rx="2" ry="2" />
<text  x="484.42" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1124.4" y="453" width="0.2" height="15.0" fill="rgb(213,34,48)" rx="2" ry="2" />
<text  x="1127.41" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="1031.4" y="421" width="0.2" height="15.0" fill="rgb(247,151,18)" rx="2" ry="2" />
<text  x="1034.37" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="834.6" y="501" width="0.2" height="15.0" fill="rgb(244,86,14)" rx="2" ry="2" />
<text  x="837.59" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::kernel_submit_work_pollfn::poll (1 samples, 0.02%)</title><rect x="87.9" y="677" width="0.2" height="15.0" fill="rgb(248,48,51)" rx="2" ry="2" />
<text  x="90.86" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%)</title><rect x="959.3" y="501" width="1.1" height="15.0" fill="rgb(247,39,12)" rx="2" ry="2" />
<text  x="962.31" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="74.9" y="501" width="0.2" height="15.0" fill="rgb(234,184,10)" rx="2" ry="2" />
<text  x="77.92" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (629 samples, 11.89%)</title><rect x="734.4" y="661" width="140.4" height="15.0" fill="rgb(221,195,12)" rx="2" ry="2" />
<text  x="737.42" y="671.5" >seastar::internal..</text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="728.8" y="501" width="0.3" height="15.0" fill="rgb(229,70,53)" rx="2" ry="2" />
<text  x="731.84" y="511.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (7 samples, 0.13%)</title><rect x="1126.0" y="389" width="1.5" height="15.0" fill="rgb(245,28,15)" rx="2" ry="2" />
<text  x="1128.97" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.2" y="533" width="0.2" height="15.0" fill="rgb(244,224,3)" rx="2" ry="2" />
<text  x="69.22" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1130.9" y="309" width="0.2" height="15.0" fill="rgb(235,33,13)" rx="2" ry="2" />
<text  x="1133.88" y="319.5" ></text>
</g>
<g >
<title>make_flat_multi_range_reader (1 samples, 0.02%)</title><rect x="109.3" y="453" width="0.2" height="15.0" fill="rgb(217,144,15)" rx="2" ry="2" />
<text  x="112.28" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%)</title><rect x="310.3" y="469" width="1.6" height="15.0" fill="rgb(206,29,6)" rx="2" ry="2" />
<text  x="313.30" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1141.1" y="629" width="0.3" height="15.0" fill="rgb(237,71,37)" rx="2" ry="2" />
<text  x="1144.14" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="727.7" y="565" width="0.3" height="15.0" fill="rgb(253,201,37)" rx="2" ry="2" />
<text  x="730.73" y="575.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%)</title><rect x="129.1" y="565" width="0.7" height="15.0" fill="rgb(234,47,7)" rx="2" ry="2" />
<text  x="132.14" y="575.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="703.4" y="645" width="1.6" height="15.0" fill="rgb(225,140,35)" rx="2" ry="2" />
<text  x="706.41" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="253.0" y="309" width="0.4" height="15.0" fill="rgb(211,136,28)" rx="2" ry="2" />
<text  x="255.96" y="319.5" ></text>
</g>
<g >
<title>executor&lt;test_read (619 samples, 11.70%)</title><rect x="735.5" y="645" width="138.1" height="15.0" fill="rgb(252,57,2)" rx="2" ry="2" />
<text  x="738.54" y="655.5" >executor&lt;test_read</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="319.9" y="453" width="0.2" height="15.0" fill="rgb(227,24,52)" rx="2" ry="2" />
<text  x="322.89" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="82.5" y="501" width="0.2" height="15.0" fill="rgb(242,192,15)" rx="2" ry="2" />
<text  x="85.51" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="140.1" y="581" width="0.2" height="15.0" fill="rgb(209,35,19)" rx="2" ry="2" />
<text  x="143.07" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (8 samples, 0.15%)</title><rect x="241.6" y="229" width="1.8" height="15.0" fill="rgb(224,39,21)" rx="2" ry="2" />
<text  x="244.58" y="239.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%)</title><rect x="140.1" y="613" width="0.2" height="15.0" fill="rgb(240,21,41)" rx="2" ry="2" />
<text  x="143.07" y="623.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="50.8" y="389" width="0.9" height="15.0" fill="rgb(229,178,47)" rx="2" ry="2" />
<text  x="53.83" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="110.6" y="405" width="0.2" height="15.0" fill="rgb(207,70,6)" rx="2" ry="2" />
<text  x="113.62" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="993.4" y="421" width="0.3" height="15.0" fill="rgb(219,216,2)" rx="2" ry="2" />
<text  x="996.44" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%)</title><rect x="745.4" y="469" width="0.4" height="15.0" fill="rgb(238,170,23)" rx="2" ry="2" />
<text  x="748.35" y="479.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (24 samples, 0.45%)</title><rect x="1063.1" y="405" width="5.3" height="15.0" fill="rgb(211,126,49)" rx="2" ry="2" />
<text  x="1066.05" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.3" y="389" width="0.2" height="15.0" fill="rgb(239,133,50)" rx="2" ry="2" />
<text  x="64.31" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (38 samples, 0.72%)</title><rect x="493.2" y="469" width="8.5" height="15.0" fill="rgb(239,134,39)" rx="2" ry="2" />
<text  x="496.24" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="852.7" y="597" width="0.2" height="15.0" fill="rgb(226,194,15)" rx="2" ry="2" />
<text  x="855.67" y="607.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="912.9" y="533" width="0.2" height="15.0" fill="rgb(221,154,5)" rx="2" ry="2" />
<text  x="915.90" y="543.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%)</title><rect x="110.6" y="533" width="0.2" height="15.0" fill="rgb(230,179,41)" rx="2" ry="2" />
<text  x="113.62" y="543.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (31 samples, 0.59%)</title><rect x="1061.5" y="421" width="6.9" height="15.0" fill="rgb(236,47,52)" rx="2" ry="2" />
<text  x="1064.49" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="65.6" y="485" width="0.2" height="15.0" fill="rgb(231,98,51)" rx="2" ry="2" />
<text  x="68.55" y="495.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (7 samples, 0.13%)</title><rect x="176.9" y="421" width="1.5" height="15.0" fill="rgb(245,184,49)" rx="2" ry="2" />
<text  x="179.88" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::untyped_result_set, false&gt;::make&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="656.6" y="645" width="0.2" height="15.0" fill="rgb(249,19,49)" rx="2" ry="2" />
<text  x="659.56" y="655.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="432.1" y="405" width="0.2" height="15.0" fill="rgb(205,158,30)" rx="2" ry="2" />
<text  x="435.11" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="822.1" y="261" width="0.2" height="15.0" fill="rgb(206,186,51)" rx="2" ry="2" />
<text  x="825.10" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="110.2" y="469" width="0.2" height="15.0" fill="rgb(243,216,41)" rx="2" ry="2" />
<text  x="113.17" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="655.9" y="629" width="0.2" height="15.0" fill="rgb(245,97,19)" rx="2" ry="2" />
<text  x="658.89" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="56.9" y="389" width="0.6" height="15.0" fill="rgb(249,191,29)" rx="2" ry="2" />
<text  x="59.85" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.2" y="341" width="0.4" height="15.0" fill="rgb(228,177,21)" rx="2" ry="2" />
<text  x="59.18" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.4" y="341" width="0.2" height="15.0" fill="rgb(221,129,44)" rx="2" ry="2" />
<text  x="30.40" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1107.5" y="549" width="0.2" height="15.0" fill="rgb(248,26,34)" rx="2" ry="2" />
<text  x="1110.45" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1127.8" y="421" width="4.4" height="15.0" fill="rgb(247,152,46)" rx="2" ry="2" />
<text  x="1130.75" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (33 samples, 0.62%)</title><rect x="1124.9" y="501" width="7.3" height="15.0" fill="rgb(205,80,32)" rx="2" ry="2" />
<text  x="1127.85" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1132.4" y="421" width="0.3" height="15.0" fill="rgb(210,42,11)" rx="2" ry="2" />
<text  x="1135.44" y="431.5" ></text>
</g>
<g >
<title>table::query (2,251 samples, 42.56%)</title><rect x="140.3" y="613" width="502.2" height="15.0" fill="rgb(235,29,50)" rx="2" ry="2" />
<text  x="143.29" y="623.5" >table::query</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="49.9" y="437" width="0.3" height="15.0" fill="rgb(223,80,3)" rx="2" ry="2" />
<text  x="52.94" y="447.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="85.2" y="741" width="0.4" height="15.0" fill="rgb(223,178,50)" rx="2" ry="2" />
<text  x="88.19" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="678.2" y="645" width="0.4" height="15.0" fill="rgb(251,192,7)" rx="2" ry="2" />
<text  x="681.20" y="655.5" ></text>
</g>
<g >
<title>do_parse_schema_tables (1 samples, 0.02%)</title><rect x="81.6" y="405" width="0.2" height="15.0" fill="rgb(246,32,50)" rx="2" ry="2" />
<text  x="84.62" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="61.3" y="293" width="0.2" height="15.0" fill="rgb(245,192,7)" rx="2" ry="2" />
<text  x="64.31" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.4" y="421" width="0.2" height="15.0" fill="rgb(212,66,15)" rx="2" ry="2" />
<text  x="63.42" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="44.4" y="357" width="0.2" height="15.0" fill="rgb(243,166,49)" rx="2" ry="2" />
<text  x="47.36" y="367.5" ></text>
</g>
<g >
<title>validation::validate_column_family (4 samples, 0.08%)</title><rect x="79.8" y="613" width="0.9" height="15.0" fill="rgb(238,26,12)" rx="2" ry="2" />
<text  x="82.83" y="623.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="22.0" y="549" width="0.3" height="15.0" fill="rgb(240,112,54)" rx="2" ry="2" />
<text  x="25.05" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="909.6" y="485" width="0.2" height="15.0" fill="rgb(249,159,44)" rx="2" ry="2" />
<text  x="912.56" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="282.9" y="357" width="0.8" height="15.0" fill="rgb(246,215,35)" rx="2" ry="2" />
<text  x="285.86" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="687.1" y="629" width="0.2" height="15.0" fill="rgb(230,7,16)" rx="2" ry="2" />
<text  x="690.12" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.11%)</title><rect x="1128.4" y="293" width="1.4" height="15.0" fill="rgb(228,111,19)" rx="2" ry="2" />
<text  x="1131.42" y="303.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (37 samples, 0.70%)</title><rect x="814.7" y="373" width="8.3" height="15.0" fill="rgb(248,98,50)" rx="2" ry="2" />
<text  x="817.74" y="383.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%)</title><rect x="42.8" y="517" width="0.2" height="15.0" fill="rgb(211,196,36)" rx="2" ry="2" />
<text  x="45.80" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="681.3" y="645" width="0.2" height="15.0" fill="rgb(214,178,2)" rx="2" ry="2" />
<text  x="684.32" y="655.5" ></text>
</g>
<g >
<title>database::query (93 samples, 1.76%)</title><rect x="1004.2" y="421" width="20.7" height="15.0" fill="rgb(205,16,31)" rx="2" ry="2" />
<text  x="1007.15" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="81.6" y="469" width="0.2" height="15.0" fill="rgb(240,56,27)" rx="2" ry="2" />
<text  x="84.62" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%)</title><rect x="110.6" y="485" width="0.2" height="15.0" fill="rgb(219,227,53)" rx="2" ry="2" />
<text  x="113.62" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (1 samples, 0.02%)</title><rect x="1159.7" y="613" width="0.2" height="15.0" fill="rgb(228,16,50)" rx="2" ry="2" />
<text  x="1162.66" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="348.2" y="325" width="0.2" height="15.0" fill="rgb(231,190,18)" rx="2" ry="2" />
<text  x="351.23" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (14 samples, 0.26%)</title><rect x="82.1" y="773" width="3.1" height="15.0" fill="rgb(225,57,53)" rx="2" ry="2" />
<text  x="85.06" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="1024.0" y="341" width="0.2" height="15.0" fill="rgb(243,187,21)" rx="2" ry="2" />
<text  x="1027.01" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="1140.7" y="645" width="0.4" height="15.0" fill="rgb(233,128,27)" rx="2" ry="2" />
<text  x="1143.69" y="655.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (20 samples, 0.38%)</title><rect x="345.5" y="341" width="4.5" height="15.0" fill="rgb(207,157,29)" rx="2" ry="2" />
<text  x="348.55" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (5 samples, 0.09%)</title><rect x="321.9" y="549" width="1.1" height="15.0" fill="rgb(246,54,31)" rx="2" ry="2" />
<text  x="324.90" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="844.9" y="437" width="0.2" height="15.0" fill="rgb(214,143,30)" rx="2" ry="2" />
<text  x="847.86" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (18 samples, 0.34%)</title><rect x="287.1" y="421" width="4.0" height="15.0" fill="rgb(249,200,18)" rx="2" ry="2" />
<text  x="290.10" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="953.5" y="565" width="0.7" height="15.0" fill="rgb(218,37,18)" rx="2" ry="2" />
<text  x="956.51" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="839.3" y="549" width="0.2" height="15.0" fill="rgb(249,69,22)" rx="2" ry="2" />
<text  x="842.28" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt;::allocator (1 samples, 0.02%)</title><rect x="63.8" y="453" width="0.2" height="15.0" fill="rgb(248,218,32)" rx="2" ry="2" />
<text  x="66.77" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (3 samples, 0.06%)</title><rect x="154.3" y="565" width="0.7" height="15.0" fill="rgb(209,71,50)" rx="2" ry="2" />
<text  x="157.35" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="757.6" y="533" width="0.5" height="15.0" fill="rgb(237,44,16)" rx="2" ry="2" />
<text  x="760.62" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%)</title><rect x="875.6" y="421" width="0.5" height="15.0" fill="rgb(208,93,29)" rx="2" ry="2" />
<text  x="878.65" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (48 samples, 0.91%)</title><rect x="275.9" y="405" width="10.7" height="15.0" fill="rgb(236,9,13)" rx="2" ry="2" />
<text  x="278.94" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="811.4" y="309" width="0.9" height="15.0" fill="rgb(237,129,15)" rx="2" ry="2" />
<text  x="814.39" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="861.6" y="533" width="2.0" height="15.0" fill="rgb(244,146,36)" rx="2" ry="2" />
<text  x="864.59" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%)</title><rect x="330.4" y="421" width="0.9" height="15.0" fill="rgb(213,2,3)" rx="2" ry="2" />
<text  x="333.38" y="431.5" ></text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.4" y="373" width="0.2" height="15.0" fill="rgb(250,138,36)" rx="2" ry="2" />
<text  x="30.40" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="54.4" y="229" width="0.7" height="15.0" fill="rgb(243,52,40)" rx="2" ry="2" />
<text  x="57.40" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="78.9" y="485" width="0.5" height="15.0" fill="rgb(244,47,47)" rx="2" ry="2" />
<text  x="81.94" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="702.7" y="565" width="0.3" height="15.0" fill="rgb(234,105,36)" rx="2" ry="2" />
<text  x="705.74" y="575.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="550.4" y="421" width="0.6" height="15.0" fill="rgb(226,219,36)" rx="2" ry="2" />
<text  x="553.36" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.8" y="613" width="0.2" height="15.0" fill="rgb(247,84,45)" rx="2" ry="2" />
<text  x="20.81" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="772.8" y="501" width="0.2" height="15.0" fill="rgb(237,163,45)" rx="2" ry="2" />
<text  x="775.79" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="823.9" y="405" width="0.2" height="15.0" fill="rgb(208,5,54)" rx="2" ry="2" />
<text  x="826.89" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (17 samples, 0.32%)</title><rect x="984.5" y="469" width="3.8" height="15.0" fill="rgb(254,124,37)" rx="2" ry="2" />
<text  x="987.52" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (21 samples, 0.40%)</title><rect x="939.9" y="565" width="4.7" height="15.0" fill="rgb(221,166,7)" rx="2" ry="2" />
<text  x="942.90" y="575.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (391 samples, 7.39%)</title><rect x="341.1" y="389" width="87.2" height="15.0" fill="rgb(218,120,32)" rx="2" ry="2" />
<text  x="344.09" y="399.5" >compact_mu..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="22.7" y="549" width="0.2" height="15.0" fill="rgb(213,44,4)" rx="2" ry="2" />
<text  x="25.72" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="1008.2" y="389" width="0.2" height="15.0" fill="rgb(205,11,31)" rx="2" ry="2" />
<text  x="1011.17" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1119.5" y="357" width="0.2" height="15.0" fill="rgb(236,58,8)" rx="2" ry="2" />
<text  x="1122.50" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="191.8" y="421" width="0.3" height="15.0" fill="rgb(243,98,34)" rx="2" ry="2" />
<text  x="194.83" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1138.9" y="629" width="0.2" height="15.0" fill="rgb(245,201,7)" rx="2" ry="2" />
<text  x="1141.91" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="666.2" y="549" width="0.2" height="15.0" fill="rgb(248,148,26)" rx="2" ry="2" />
<text  x="669.15" y="559.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1166.4" y="677" width="0.2" height="15.0" fill="rgb(218,189,15)" rx="2" ry="2" />
<text  x="1169.35" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="51.3" y="293" width="0.2" height="15.0" fill="rgb(240,41,1)" rx="2" ry="2" />
<text  x="54.27" y="303.5" ></text>
</g>
<g >
<title>abstract_type::deserialize&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="485" width="0.2" height="15.0" fill="rgb(247,209,48)" rx="2" ry="2" />
<text  x="649.07" y="495.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%)</title><rect x="110.2" y="501" width="0.2" height="15.0" fill="rgb(205,226,50)" rx="2" ry="2" />
<text  x="113.17" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1103.2" y="565" width="0.2" height="15.0" fill="rgb(229,224,29)" rx="2" ry="2" />
<text  x="1106.21" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="255.0" y="293" width="0.2" height="15.0" fill="rgb(245,106,43)" rx="2" ry="2" />
<text  x="257.97" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (2 samples, 0.04%)</title><rect x="1014.4" y="357" width="0.5" height="15.0" fill="rgb(235,32,26)" rx="2" ry="2" />
<text  x="1017.42" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="83.2" y="517" width="0.2" height="15.0" fill="rgb(247,179,18)" rx="2" ry="2" />
<text  x="86.18" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="666.2" y="533" width="0.2" height="15.0" fill="rgb(242,158,26)" rx="2" ry="2" />
<text  x="669.15" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (5 samples, 0.09%)</title><rect x="72.0" y="533" width="1.1" height="15.0" fill="rgb(237,40,47)" rx="2" ry="2" />
<text  x="75.02" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.11%)</title><rect x="56.6" y="421" width="1.4" height="15.0" fill="rgb(240,127,51)" rx="2" ry="2" />
<text  x="59.63" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="668.8" y="629" width="0.9" height="15.0" fill="rgb(244,194,38)" rx="2" ry="2" />
<text  x="671.83" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="105.9" y="645" width="0.3" height="15.0" fill="rgb(244,6,51)" rx="2" ry="2" />
<text  x="108.93" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (2 samples, 0.04%)</title><rect x="28.5" y="421" width="0.5" height="15.0" fill="rgb(254,108,14)" rx="2" ry="2" />
<text  x="31.52" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1058.6" y="485" width="0.4" height="15.0" fill="rgb(218,24,46)" rx="2" ry="2" />
<text  x="1061.59" y="495.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="50.8" y="373" width="0.9" height="15.0" fill="rgb(254,166,31)" rx="2" ry="2" />
<text  x="53.83" y="383.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="546.6" y="485" width="0.2" height="15.0" fill="rgb(207,179,22)" rx="2" ry="2" />
<text  x="549.57" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1094.3" y="549" width="0.2" height="15.0" fill="rgb(226,172,1)" rx="2" ry="2" />
<text  x="1097.29" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.11%)</title><rect x="1041.4" y="453" width="1.4" height="15.0" fill="rgb(246,68,9)" rx="2" ry="2" />
<text  x="1044.41" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="363.8" y="325" width="0.3" height="15.0" fill="rgb(215,98,5)" rx="2" ry="2" />
<text  x="366.84" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="537.6" y="437" width="0.3" height="15.0" fill="rgb(222,60,0)" rx="2" ry="2" />
<text  x="540.64" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="253.6" y="325" width="0.3" height="15.0" fill="rgb(208,134,32)" rx="2" ry="2" />
<text  x="256.63" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (5 samples, 0.09%)</title><rect x="625.3" y="597" width="1.1" height="15.0" fill="rgb(219,173,24)" rx="2" ry="2" />
<text  x="628.32" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="26.7" y="341" width="0.3" height="15.0" fill="rgb(221,8,19)" rx="2" ry="2" />
<text  x="29.73" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="193.6" y="405" width="0.9" height="15.0" fill="rgb(217,179,43)" rx="2" ry="2" />
<text  x="196.62" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="105.7" y="629" width="0.2" height="15.0" fill="rgb(217,43,9)" rx="2" ry="2" />
<text  x="108.71" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="72.5" y="469" width="0.2" height="15.0" fill="rgb(216,220,24)" rx="2" ry="2" />
<text  x="75.47" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (20 samples, 0.38%)</title><rect x="1127.8" y="389" width="4.4" height="15.0" fill="rgb(241,126,6)" rx="2" ry="2" />
<text  x="1130.75" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="17.4" y="629" width="0.4" height="15.0" fill="rgb(225,206,13)" rx="2" ry="2" />
<text  x="20.36" y="639.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="109.7" y="613" width="0.3" height="15.0" fill="rgb(239,211,24)" rx="2" ry="2" />
<text  x="112.73" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="599.4" y="517" width="0.3" height="15.0" fill="rgb(217,141,45)" rx="2" ry="2" />
<text  x="602.44" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.09%)</title><rect x="1084.7" y="565" width="1.1" height="15.0" fill="rgb(242,182,32)" rx="2" ry="2" />
<text  x="1087.69" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (13 samples, 0.25%)</title><rect x="24.7" y="437" width="2.9" height="15.0" fill="rgb(233,45,8)" rx="2" ry="2" />
<text  x="27.72" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="806.3" y="453" width="0.2" height="15.0" fill="rgb(221,69,10)" rx="2" ry="2" />
<text  x="809.26" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="297.6" y="437" width="0.2" height="15.0" fill="rgb(242,211,48)" rx="2" ry="2" />
<text  x="300.58" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (2 samples, 0.04%)</title><rect x="73.4" y="485" width="0.4" height="15.0" fill="rgb(211,196,40)" rx="2" ry="2" />
<text  x="76.36" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="43.5" y="453" width="0.2" height="15.0" fill="rgb(209,139,48)" rx="2" ry="2" />
<text  x="46.47" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="61.5" y="421" width="0.5" height="15.0" fill="rgb(232,130,54)" rx="2" ry="2" />
<text  x="64.54" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="58.9" y="453" width="0.2" height="15.0" fill="rgb(225,54,15)" rx="2" ry="2" />
<text  x="61.86" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="479.0" y="469" width="0.2" height="15.0" fill="rgb(237,197,30)" rx="2" ry="2" />
<text  x="481.97" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (24 samples, 0.45%)</title><rect x="1053.2" y="485" width="5.4" height="15.0" fill="rgb(234,140,2)" rx="2" ry="2" />
<text  x="1056.24" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (3 samples, 0.06%)</title><rect x="62.7" y="469" width="0.6" height="15.0" fill="rgb(241,48,29)" rx="2" ry="2" />
<text  x="65.65" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="691.4" y="645" width="0.2" height="15.0" fill="rgb(226,32,0)" rx="2" ry="2" />
<text  x="694.36" y="655.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;sstables::foreign_sstable_open_info, 131072ul&gt;::chunked_vector (1 samples, 0.02%)</title><rect x="16.5" y="709" width="0.2" height="15.0" fill="rgb(229,112,45)" rx="2" ry="2" />
<text  x="19.47" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="74.3" y="485" width="0.2" height="15.0" fill="rgb(218,209,39)" rx="2" ry="2" />
<text  x="77.25" y="495.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="18.0" y="437" width="0.3" height="15.0" fill="rgb(219,33,4)" rx="2" ry="2" />
<text  x="21.03" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="486.3" y="469" width="0.9" height="15.0" fill="rgb(224,194,23)" rx="2" ry="2" />
<text  x="489.33" y="479.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%)</title><rect x="367.0" y="341" width="0.2" height="15.0" fill="rgb(212,127,33)" rx="2" ry="2" />
<text  x="369.97" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="52.2" y="389" width="0.2" height="15.0" fill="rgb(229,54,15)" rx="2" ry="2" />
<text  x="55.17" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="22.0" y="501" width="0.3" height="15.0" fill="rgb(247,161,30)" rx="2" ry="2" />
<text  x="25.05" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.09%)</title><rect x="551.7" y="453" width="1.1" height="15.0" fill="rgb(209,84,12)" rx="2" ry="2" />
<text  x="554.70" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.0" y="389" width="0.2" height="15.0" fill="rgb(234,41,10)" rx="2" ry="2" />
<text  x="64.98" y="399.5" ></text>
</g>
<g >
<title>freeze (13 samples, 0.25%)</title><rect x="1127.8" y="357" width="2.9" height="15.0" fill="rgb(246,186,45)" rx="2" ry="2" />
<text  x="1130.75" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.7" y="373" width="0.3" height="15.0" fill="rgb(222,9,9)" rx="2" ry="2" />
<text  x="815.73" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.0" y="405" width="0.2" height="15.0" fill="rgb(247,39,4)" rx="2" ry="2" />
<text  x="62.98" y="415.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="82.1" y="565" width="0.2" height="15.0" fill="rgb(219,26,53)" rx="2" ry="2" />
<text  x="85.06" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (2 samples, 0.04%)</title><rect x="78.9" y="517" width="0.5" height="15.0" fill="rgb(223,18,53)" rx="2" ry="2" />
<text  x="81.94" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="1135.3" y="661" width="0.3" height="15.0" fill="rgb(228,97,35)" rx="2" ry="2" />
<text  x="1138.34" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_cachedSize (1 samples, 0.02%)</title><rect x="39.0" y="485" width="0.2" height="15.0" fill="rgb(249,153,31)" rx="2" ry="2" />
<text  x="42.00" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (214 samples, 4.05%)</title><rect x="989.2" y="485" width="47.8" height="15.0" fill="rgb(245,10,46)" rx="2" ry="2" />
<text  x="992.21" y="495.5" >serv..</text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="56.2" y="277" width="0.2" height="15.0" fill="rgb(214,208,54)" rx="2" ry="2" />
<text  x="59.18" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.09%)</title><rect x="801.4" y="437" width="1.1" height="15.0" fill="rgb(225,89,54)" rx="2" ry="2" />
<text  x="804.35" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%)</title><rect x="763.4" y="469" width="0.9" height="15.0" fill="rgb(215,108,8)" rx="2" ry="2" />
<text  x="766.42" y="479.5" ></text>
</g>
<g >
<title>database::~database (1 samples, 0.02%)</title><rect x="702.7" y="485" width="0.3" height="15.0" fill="rgb(248,117,29)" rx="2" ry="2" />
<text  x="705.74" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="484.8" y="437" width="0.2" height="15.0" fill="rgb(227,78,33)" rx="2" ry="2" />
<text  x="487.77" y="447.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="1135.6" y="661" width="0.2" height="15.0" fill="rgb(209,34,1)" rx="2" ry="2" />
<text  x="1138.56" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.0" y="645" width="0.3" height="15.0" fill="rgb(222,41,29)" rx="2" ry="2" />
<text  x="21.03" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::update_shares_for_queues (1 samples, 0.02%)</title><rect x="1164.8" y="565" width="0.2" height="15.0" fill="rgb(231,145,14)" rx="2" ry="2" />
<text  x="1167.79" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (55 samples, 1.04%)</title><rect x="660.6" y="645" width="12.2" height="15.0" fill="rgb(253,111,44)" rx="2" ry="2" />
<text  x="663.57" y="655.5" ></text>
</g>
<g >
<title>seastar::io_queue::poll_io_queue (1 samples, 0.02%)</title><rect x="1163.9" y="645" width="0.2" height="15.0" fill="rgb(250,87,16)" rx="2" ry="2" />
<text  x="1166.90" y="655.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="646.1" y="565" width="0.2" height="15.0" fill="rgb(247,67,23)" rx="2" ry="2" />
<text  x="649.07" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="52.8" y="373" width="0.3" height="15.0" fill="rgb(234,171,43)" rx="2" ry="2" />
<text  x="55.84" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (8 samples, 0.15%)</title><rect x="813.0" y="373" width="1.7" height="15.0" fill="rgb(245,42,33)" rx="2" ry="2" />
<text  x="815.95" y="383.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="108.8" y="405" width="0.3" height="15.0" fill="rgb(232,196,21)" rx="2" ry="2" />
<text  x="111.84" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::arm_highres_timer (1 samples, 0.02%)</title><rect x="1165.9" y="613" width="0.2" height="15.0" fill="rgb(226,42,12)" rx="2" ry="2" />
<text  x="1168.90" y="623.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (4 samples, 0.08%)</title><rect x="110.0" y="597" width="0.8" height="15.0" fill="rgb(219,79,34)" rx="2" ry="2" />
<text  x="112.95" y="607.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.3" y="469" width="0.2" height="15.0" fill="rgb(227,30,53)" rx="2" ry="2" />
<text  x="112.28" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="810.7" y="341" width="1.6" height="15.0" fill="rgb(209,220,29)" rx="2" ry="2" />
<text  x="813.72" y="351.5" ></text>
</g>
<g >
<title>seastar::rename_file (1 samples, 0.02%)</title><rect x="729.7" y="629" width="0.3" height="15.0" fill="rgb(228,194,49)" rx="2" ry="2" />
<text  x="732.74" y="639.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="261.0" y="341" width="0.4" height="15.0" fill="rgb(210,153,49)" rx="2" ry="2" />
<text  x="263.99" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1057.3" y="453" width="0.6" height="15.0" fill="rgb(226,186,5)" rx="2" ry="2" />
<text  x="1060.25" y="463.5" ></text>
</g>
<g >
<title>row::row (136 samples, 2.57%)</title><rect x="216.8" y="309" width="30.4" height="15.0" fill="rgb(239,152,35)" rx="2" ry="2" />
<text  x="219.82" y="319.5" >ro..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="806.9" y="389" width="0.3" height="15.0" fill="rgb(222,106,13)" rx="2" ry="2" />
<text  x="809.93" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="1163.7" y="373" width="0.2" height="15.0" fill="rgb(233,147,6)" rx="2" ry="2" />
<text  x="1166.67" y="383.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (14 samples, 0.26%)</title><rect x="783.1" y="501" width="3.1" height="15.0" fill="rgb(217,98,30)" rx="2" ry="2" />
<text  x="786.06" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1056.6" y="453" width="0.7" height="15.0" fill="rgb(234,179,7)" rx="2" ry="2" />
<text  x="1059.58" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="454.0" y="549" width="0.2" height="15.0" fill="rgb(244,111,5)" rx="2" ry="2" />
<text  x="456.98" y="559.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="937.0" y="533" width="0.7" height="15.0" fill="rgb(227,7,5)" rx="2" ry="2" />
<text  x="940.00" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="739.6" y="597" width="0.2" height="15.0" fill="rgb(215,25,33)" rx="2" ry="2" />
<text  x="742.55" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="437.7" y="341" width="0.4" height="15.0" fill="rgb(234,184,16)" rx="2" ry="2" />
<text  x="440.69" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (2 samples, 0.04%)</title><rect x="109.3" y="661" width="0.4" height="15.0" fill="rgb(236,104,17)" rx="2" ry="2" />
<text  x="112.28" y="671.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.15%)</title><rect x="549.2" y="469" width="1.8" height="15.0" fill="rgb(221,186,28)" rx="2" ry="2" />
<text  x="552.24" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="132.3" y="533" width="0.4" height="15.0" fill="rgb(245,209,3)" rx="2" ry="2" />
<text  x="135.26" y="543.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%)</title><rect x="879.9" y="453" width="0.7" height="15.0" fill="rgb(254,61,37)" rx="2" ry="2" />
<text  x="882.88" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (2 samples, 0.04%)</title><rect x="724.6" y="597" width="0.5" height="15.0" fill="rgb(225,84,9)" rx="2" ry="2" />
<text  x="727.60" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="182.2" y="389" width="0.3" height="15.0" fill="rgb(222,66,2)" rx="2" ry="2" />
<text  x="185.24" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="331.0" y="389" width="0.3" height="15.0" fill="rgb(250,143,47)" rx="2" ry="2" />
<text  x="334.05" y="399.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="948.6" y="565" width="0.2" height="15.0" fill="rgb(214,77,20)" rx="2" ry="2" />
<text  x="951.60" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1131.1" y="357" width="0.2" height="15.0" fill="rgb(253,155,37)" rx="2" ry="2" />
<text  x="1134.10" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="516.2" y="469" width="0.2" height="15.0" fill="rgb(205,96,7)" rx="2" ry="2" />
<text  x="519.22" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="74.9" y="405" width="0.2" height="15.0" fill="rgb(211,59,17)" rx="2" ry="2" />
<text  x="77.92" y="415.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1148.9" y="597" width="1.6" height="15.0" fill="rgb(206,213,24)" rx="2" ry="2" />
<text  x="1151.95" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.26%)</title><rect x="854.0" y="549" width="3.1" height="15.0" fill="rgb(251,28,14)" rx="2" ry="2" />
<text  x="857.00" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (2 samples, 0.04%)</title><rect x="43.5" y="501" width="0.4" height="15.0" fill="rgb(251,55,49)" rx="2" ry="2" />
<text  x="46.47" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="820.1" y="309" width="0.9" height="15.0" fill="rgb(212,117,53)" rx="2" ry="2" />
<text  x="823.09" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="85.4" y="597" width="0.2" height="15.0" fill="rgb(228,9,51)" rx="2" ry="2" />
<text  x="88.41" y="607.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="245.6" y="277" width="0.2" height="15.0" fill="rgb(240,125,0)" rx="2" ry="2" />
<text  x="248.60" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="83.2" y="533" width="0.2" height="15.0" fill="rgb(251,217,5)" rx="2" ry="2" />
<text  x="86.18" y="543.5" ></text>
</g>
<g >
<title>database::parse_system_tables (1 samples, 0.02%)</title><rect x="81.6" y="421" width="0.2" height="15.0" fill="rgb(247,218,45)" rx="2" ry="2" />
<text  x="84.62" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="264.1" y="341" width="0.2" height="15.0" fill="rgb(217,85,7)" rx="2" ry="2" />
<text  x="267.12" y="351.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="109.3" y="517" width="0.2" height="15.0" fill="rgb(250,43,52)" rx="2" ry="2" />
<text  x="112.28" y="527.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="775.9" y="565" width="0.2" height="15.0" fill="rgb(231,78,36)" rx="2" ry="2" />
<text  x="778.92" y="575.5" ></text>
</g>
<g >
<title>seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::for_each_fragment&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::read (1 samples, 0.02%)</title><rect x="108.8" y="357" width="0.3" height="15.0" fill="rgb(206,112,49)" rx="2" ry="2" />
<text  x="111.84" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="500.8" y="437" width="0.3" height="15.0" fill="rgb(231,185,22)" rx="2" ry="2" />
<text  x="503.83" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="56.9" y="293" width="0.2" height="15.0" fill="rgb(216,25,7)" rx="2" ry="2" />
<text  x="59.85" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="82.3" y="581" width="0.2" height="15.0" fill="rgb(223,26,20)" rx="2" ry="2" />
<text  x="85.29" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="551.3" y="469" width="0.2" height="15.0" fill="rgb(207,19,27)" rx="2" ry="2" />
<text  x="554.25" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (10 samples, 0.19%)</title><rect x="1040.5" y="501" width="2.3" height="15.0" fill="rgb(222,85,42)" rx="2" ry="2" />
<text  x="1043.52" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="981.2" y="437" width="1.5" height="15.0" fill="rgb(251,73,34)" rx="2" ry="2" />
<text  x="984.17" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%)</title><rect x="1189.8" y="741" width="0.2" height="15.0" fill="rgb(217,22,21)" rx="2" ry="2" />
<text  x="1192.78" y="751.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="138.3" y="613" width="0.2" height="15.0" fill="rgb(218,45,3)" rx="2" ry="2" />
<text  x="141.29" y="623.5" ></text>
</g>
<g >
<title>logalloc::segment::occupancy (1 samples, 0.02%)</title><rect x="702.1" y="229" width="0.2" height="15.0" fill="rgb(221,223,30)" rx="2" ry="2" />
<text  x="705.07" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (2 samples, 0.04%)</title><rect x="290.2" y="389" width="0.5" height="15.0" fill="rgb(218,174,10)" rx="2" ry="2" />
<text  x="293.22" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1086.5" y="549" width="0.2" height="15.0" fill="rgb(212,227,45)" rx="2" ry="2" />
<text  x="1089.48" y="559.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.5" y="421" width="0.2" height="15.0" fill="rgb(224,13,33)" rx="2" ry="2" />
<text  x="1126.51" y="431.5" ></text>
</g>
<g >
<title>database::apply_in_memory (33 samples, 0.62%)</title><rect x="1115.9" y="453" width="7.4" height="15.0" fill="rgb(205,196,17)" rx="2" ry="2" />
<text  x="1118.93" y="463.5" ></text>
</g>
<g >
<title>schema_builder::build (2 samples, 0.04%)</title><rect x="110.2" y="549" width="0.4" height="15.0" fill="rgb(229,212,54)" rx="2" ry="2" />
<text  x="113.17" y="559.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (11 samples, 0.21%)</title><rect x="266.1" y="389" width="2.5" height="15.0" fill="rgb(226,129,13)" rx="2" ry="2" />
<text  x="269.12" y="399.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="849.3" y="581" width="0.2" height="15.0" fill="rgb(228,126,5)" rx="2" ry="2" />
<text  x="852.32" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="26.7" y="421" width="0.9" height="15.0" fill="rgb(220,140,39)" rx="2" ry="2" />
<text  x="29.73" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="110.2" y="421" width="0.2" height="15.0" fill="rgb(251,174,30)" rx="2" ry="2" />
<text  x="113.17" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="74.9" y="533" width="0.2" height="15.0" fill="rgb(213,195,25)" rx="2" ry="2" />
<text  x="77.92" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="696.5" y="629" width="0.9" height="15.0" fill="rgb(238,221,30)" rx="2" ry="2" />
<text  x="699.49" y="639.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_schema_version_known (1 samples, 0.02%)</title><rect x="1124.0" y="405" width="0.2" height="15.0" fill="rgb(208,47,41)" rx="2" ry="2" />
<text  x="1126.96" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="765.2" y="437" width="1.6" height="15.0" fill="rgb(231,186,49)" rx="2" ry="2" />
<text  x="768.21" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (19 samples, 0.36%)</title><rect x="71.6" y="581" width="4.2" height="15.0" fill="rgb(212,112,7)" rx="2" ry="2" />
<text  x="74.58" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.4" y="373" width="0.2" height="15.0" fill="rgb(235,165,24)" rx="2" ry="2" />
<text  x="47.36" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (69 samples, 1.30%)</title><rect x="521.1" y="437" width="15.4" height="15.0" fill="rgb(238,218,45)" rx="2" ry="2" />
<text  x="524.13" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="591.9" y="501" width="1.1" height="15.0" fill="rgb(241,38,47)" rx="2" ry="2" />
<text  x="594.86" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (1 samples, 0.02%)</title><rect x="26.7" y="405" width="0.3" height="15.0" fill="rgb(236,39,18)" rx="2" ry="2" />
<text  x="29.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="104.2" y="629" width="0.4" height="15.0" fill="rgb(231,37,47)" rx="2" ry="2" />
<text  x="107.15" y="639.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="897.5" y="485" width="0.2" height="15.0" fill="rgb(233,47,32)" rx="2" ry="2" />
<text  x="900.51" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1144.7" y="581" width="0.5" height="15.0" fill="rgb(245,61,26)" rx="2" ry="2" />
<text  x="1147.71" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="39.7" y="453" width="0.4" height="15.0" fill="rgb(220,62,42)" rx="2" ry="2" />
<text  x="42.67" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (7 samples, 0.13%)</title><rect x="1164.6" y="661" width="1.5" height="15.0" fill="rgb(229,54,53)" rx="2" ry="2" />
<text  x="1167.57" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="741.1" y="613" width="0.2" height="15.0" fill="rgb(207,97,18)" rx="2" ry="2" />
<text  x="744.11" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%)</title><rect x="1124.9" y="597" width="8.0" height="15.0" fill="rgb(215,124,11)" rx="2" ry="2" />
<text  x="1127.85" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="730.4" y="661" width="0.2" height="15.0" fill="rgb(237,11,1)" rx="2" ry="2" />
<text  x="733.40" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="45.0" y="357" width="0.5" height="15.0" fill="rgb(240,88,12)" rx="2" ry="2" />
<text  x="48.03" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (4 samples, 0.08%)</title><rect x="50.8" y="405" width="0.9" height="15.0" fill="rgb(215,173,21)" rx="2" ry="2" />
<text  x="53.83" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="822.1" y="245" width="0.2" height="15.0" fill="rgb(251,139,10)" rx="2" ry="2" />
<text  x="825.10" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (5 samples, 0.09%)</title><rect x="532.1" y="357" width="1.1" height="15.0" fill="rgb(223,52,31)" rx="2" ry="2" />
<text  x="535.06" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="665.0" y="533" width="0.3" height="15.0" fill="rgb(212,105,9)" rx="2" ry="2" />
<text  x="668.03" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.8" y="437" width="0.2" height="15.0" fill="rgb(250,89,20)" rx="2" ry="2" />
<text  x="62.75" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="44.1" y="453" width="0.3" height="15.0" fill="rgb(238,200,45)" rx="2" ry="2" />
<text  x="47.13" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (73 samples, 1.38%)</title><rect x="174.2" y="469" width="16.3" height="15.0" fill="rgb(225,172,21)" rx="2" ry="2" />
<text  x="177.20" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%)</title><rect x="79.4" y="533" width="0.2" height="15.0" fill="rgb(233,15,3)" rx="2" ry="2" />
<text  x="82.39" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.3" y="437" width="0.2" height="15.0" fill="rgb(208,16,9)" rx="2" ry="2" />
<text  x="1128.30" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="904.4" y="453" width="0.2" height="15.0" fill="rgb(207,163,41)" rx="2" ry="2" />
<text  x="907.43" y="463.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (6 samples, 0.11%)</title><rect x="71.8" y="549" width="1.3" height="15.0" fill="rgb(245,77,44)" rx="2" ry="2" />
<text  x="74.80" y="559.5" ></text>
</g>
<g >
<title>make_combined_reader (102 samples, 1.93%)</title><rect x="464.5" y="501" width="22.7" height="15.0" fill="rgb(232,29,0)" rx="2" ry="2" />
<text  x="467.46" y="511.5" >m..</text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (22 samples, 0.42%)</title><rect x="762.3" y="533" width="4.9" height="15.0" fill="rgb(228,50,37)" rx="2" ry="2" />
<text  x="765.31" y="543.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="108.4" y="629" width="0.2" height="15.0" fill="rgb(254,38,48)" rx="2" ry="2" />
<text  x="111.39" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="646.3" y="629" width="0.2" height="15.0" fill="rgb(239,173,27)" rx="2" ry="2" />
<text  x="649.29" y="639.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (1 samples, 0.02%)</title><rect x="23.2" y="533" width="0.2" height="15.0" fill="rgb(237,24,20)" rx="2" ry="2" />
<text  x="26.16" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="306.5" y="485" width="0.5" height="15.0" fill="rgb(207,54,35)" rx="2" ry="2" />
<text  x="309.51" y="495.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (6 samples, 0.11%)</title><rect x="100.4" y="565" width="1.3" height="15.0" fill="rgb(228,145,17)" rx="2" ry="2" />
<text  x="103.36" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="83.2" y="501" width="0.2" height="15.0" fill="rgb(220,204,16)" rx="2" ry="2" />
<text  x="86.18" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="51.7" y="325" width="0.2" height="15.0" fill="rgb(214,64,42)" rx="2" ry="2" />
<text  x="54.72" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (67 samples, 1.27%)</title><rect x="224.4" y="277" width="15.0" height="15.0" fill="rgb(241,106,18)" rx="2" ry="2" />
<text  x="227.40" y="287.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="928.5" y="501" width="0.7" height="15.0" fill="rgb(216,72,0)" rx="2" ry="2" />
<text  x="931.52" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (3 samples, 0.06%)</title><rect x="578.7" y="469" width="0.7" height="15.0" fill="rgb(242,38,27)" rx="2" ry="2" />
<text  x="581.69" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%)</title><rect x="324.4" y="549" width="0.6" height="15.0" fill="rgb(235,72,48)" rx="2" ry="2" />
<text  x="327.35" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.6" y="741" width="0.2" height="15.0" fill="rgb(246,209,12)" rx="2" ry="2" />
<text  x="84.62" y="751.5" ></text>
</g>
<g >
<title>database::find_uuid (4 samples, 0.08%)</title><rect x="79.8" y="581" width="0.9" height="15.0" fill="rgb(216,177,0)" rx="2" ry="2" />
<text  x="82.83" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (41 samples, 0.78%)</title><rect x="126.7" y="581" width="9.1" height="15.0" fill="rgb(246,221,42)" rx="2" ry="2" />
<text  x="129.68" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="95.7" y="645" width="0.2" height="15.0" fill="rgb(233,204,41)" rx="2" ry="2" />
<text  x="98.67" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;db::cf_holder&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1116.2" y="437" width="0.2" height="15.0" fill="rgb(233,227,51)" rx="2" ry="2" />
<text  x="1119.15" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="17.1" y="677" width="0.3" height="15.0" fill="rgb(242,13,21)" rx="2" ry="2" />
<text  x="20.14" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%)</title><rect x="968.9" y="485" width="1.1" height="15.0" fill="rgb(247,221,15)" rx="2" ry="2" />
<text  x="971.90" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1018.7" y="325" width="0.4" height="15.0" fill="rgb(228,2,26)" rx="2" ry="2" />
<text  x="1021.66" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (9 samples, 0.17%)</title><rect x="936.8" y="565" width="2.0" height="15.0" fill="rgb(233,163,23)" rx="2" ry="2" />
<text  x="939.78" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (2 samples, 0.04%)</title><rect x="108.8" y="661" width="0.5" height="15.0" fill="rgb(245,219,9)" rx="2" ry="2" />
<text  x="111.84" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="10.9" y="757" width="0.2" height="15.0" fill="rgb(235,5,50)" rx="2" ry="2" />
<text  x="13.89" y="767.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (6 samples, 0.11%)</title><rect x="1128.4" y="309" width="1.4" height="15.0" fill="rgb(216,192,42)" rx="2" ry="2" />
<text  x="1131.42" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="63.1" y="405" width="0.2" height="15.0" fill="rgb(236,90,14)" rx="2" ry="2" />
<text  x="66.10" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (2 samples, 0.04%)</title><rect x="22.9" y="549" width="0.5" height="15.0" fill="rgb(222,61,39)" rx="2" ry="2" />
<text  x="25.94" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="633.1" y="565" width="0.3" height="15.0" fill="rgb(209,193,16)" rx="2" ry="2" />
<text  x="636.13" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="730.2" y="661" width="0.2" height="15.0" fill="rgb(243,224,33)" rx="2" ry="2" />
<text  x="733.18" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (9 samples, 0.17%)</title><rect x="599.7" y="517" width="2.0" height="15.0" fill="rgb(210,21,19)" rx="2" ry="2" />
<text  x="602.67" y="527.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="728.2" y="629" width="0.2" height="15.0" fill="rgb(231,88,24)" rx="2" ry="2" />
<text  x="731.17" y="639.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (163 samples, 3.08%)</title><rect x="797.6" y="501" width="36.3" height="15.0" fill="rgb(218,45,3)" rx="2" ry="2" />
<text  x="800.56" y="511.5" >ser..</text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (31 samples, 0.59%)</title><rect x="863.6" y="613" width="6.9" height="15.0" fill="rgb(232,142,53)" rx="2" ry="2" />
<text  x="866.60" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.0" y="389" width="0.5" height="15.0" fill="rgb(205,114,13)" rx="2" ry="2" />
<text  x="48.03" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="87.4" y="677" width="0.2" height="15.0" fill="rgb(227,27,51)" rx="2" ry="2" />
<text  x="90.42" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="811.2" y="309" width="0.2" height="15.0" fill="rgb(235,33,43)" rx="2" ry="2" />
<text  x="814.17" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (120 samples, 2.27%)</title><rect x="804.3" y="469" width="26.7" height="15.0" fill="rgb(220,191,43)" rx="2" ry="2" />
<text  x="807.25" y="479.5" >a..</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%)</title><rect x="941.9" y="517" width="2.0" height="15.0" fill="rgb(228,176,44)" rx="2" ry="2" />
<text  x="944.91" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(246,76,43)" rx="2" ry="2" />
<text  x="13.67" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="75.8" y="549" width="0.2" height="15.0" fill="rgb(230,52,9)" rx="2" ry="2" />
<text  x="78.82" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="427.9" y="373" width="0.2" height="15.0" fill="rgb(206,22,30)" rx="2" ry="2" />
<text  x="430.87" y="383.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="58.2" y="405" width="0.2" height="15.0" fill="rgb(211,170,8)" rx="2" ry="2" />
<text  x="61.19" y="415.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1132.4" y="405" width="0.3" height="15.0" fill="rgb(220,79,54)" rx="2" ry="2" />
<text  x="1135.44" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (30 samples, 0.57%)</title><rect x="479.2" y="469" width="6.7" height="15.0" fill="rgb(207,115,28)" rx="2" ry="2" />
<text  x="482.19" y="479.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="17.1" y="693" width="0.3" height="15.0" fill="rgb(225,89,9)" rx="2" ry="2" />
<text  x="20.14" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1130.9" y="325" width="0.2" height="15.0" fill="rgb(229,83,30)" rx="2" ry="2" />
<text  x="1133.88" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="102.6" y="613" width="0.7" height="15.0" fill="rgb(207,91,29)" rx="2" ry="2" />
<text  x="105.59" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (6 samples, 0.11%)</title><rect x="597.4" y="517" width="1.4" height="15.0" fill="rgb(210,60,22)" rx="2" ry="2" />
<text  x="600.43" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="853.3" y="597" width="0.3" height="15.0" fill="rgb(205,36,16)" rx="2" ry="2" />
<text  x="856.34" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="1106.8" y="549" width="0.4" height="15.0" fill="rgb(214,40,8)" rx="2" ry="2" />
<text  x="1109.78" y="559.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (2 samples, 0.04%)</title><rect x="1115.0" y="629" width="0.5" height="15.0" fill="rgb(232,62,3)" rx="2" ry="2" />
<text  x="1118.04" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="1189.8" y="757" width="0.2" height="15.0" fill="rgb(211,92,12)" rx="2" ry="2" />
<text  x="1192.78" y="767.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="110.8" y="645" width="0.3" height="15.0" fill="rgb(225,224,42)" rx="2" ry="2" />
<text  x="113.84" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (5 samples, 0.09%)</title><rect x="960.6" y="533" width="1.2" height="15.0" fill="rgb(216,160,54)" rx="2" ry="2" />
<text  x="963.65" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;multishard_combining_reader, dht::sharder const&amp;, seastar::shared_ptr&lt;reader_lifecycle_policy&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, nonwrapping_interval&lt;dht::ring_position&gt; const&amp;, query::partition_slice const&amp;, seastar::io_priority_class const&amp;, tracing::trace_state_ptr, seastar::bool_class&lt;flat_mutation_reader::partition_range_forwarding_tag&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="109.3" y="373" width="0.2" height="15.0" fill="rgb(230,39,17)" rx="2" ry="2" />
<text  x="112.28" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="44.4" y="453" width="0.2" height="15.0" fill="rgb(253,206,1)" rx="2" ry="2" />
<text  x="47.36" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="642.1" y="597" width="0.4" height="15.0" fill="rgb(235,150,50)" rx="2" ry="2" />
<text  x="645.06" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="875.6" y="469" width="0.5" height="15.0" fill="rgb(209,35,14)" rx="2" ry="2" />
<text  x="878.65" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="17.8" y="373" width="0.2" height="15.0" fill="rgb(208,35,26)" rx="2" ry="2" />
<text  x="20.81" y="383.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="21.2" y="565" width="0.2" height="15.0" fill="rgb(209,34,6)" rx="2" ry="2" />
<text  x="24.16" y="575.5" ></text>
</g>
<g >
<title>seastar::io_priority_class::update_shares (1 samples, 0.02%)</title><rect x="1164.8" y="581" width="0.2" height="15.0" fill="rgb(235,21,8)" rx="2" ry="2" />
<text  x="1167.79" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="607.9" y="549" width="0.2" height="15.0" fill="rgb(227,51,51)" rx="2" ry="2" />
<text  x="610.92" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="85.6" y="757" width="0.3" height="15.0" fill="rgb(229,72,37)" rx="2" ry="2" />
<text  x="88.63" y="767.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="22.5" y="501" width="0.2" height="15.0" fill="rgb(233,50,24)" rx="2" ry="2" />
<text  x="25.49" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="285.5" y="341" width="0.5" height="15.0" fill="rgb(247,49,31)" rx="2" ry="2" />
<text  x="288.53" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (291 samples, 5.50%)</title><rect x="16.2" y="757" width="65.0" height="15.0" fill="rgb(251,50,38)" rx="2" ry="2" />
<text  x="19.25" y="767.5" >seastar..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="438.4" y="357" width="0.6" height="15.0" fill="rgb(212,12,19)" rx="2" ry="2" />
<text  x="441.36" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;clustering_row, std::allocator&lt;clustering_row&gt; &gt;::pop_front (1 samples, 0.02%)</title><rect x="140.1" y="341" width="0.2" height="15.0" fill="rgb(248,12,36)" rx="2" ry="2" />
<text  x="143.07" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (75 samples, 1.42%)</title><rect x="896.2" y="533" width="16.7" height="15.0" fill="rgb(212,156,16)" rx="2" ry="2" />
<text  x="899.17" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (55 samples, 1.04%)</title><rect x="308.7" y="501" width="12.3" height="15.0" fill="rgb(238,42,26)" rx="2" ry="2" />
<text  x="311.74" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1163.7" y="261" width="0.2" height="15.0" fill="rgb(207,45,27)" rx="2" ry="2" />
<text  x="1166.67" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="934.5" y="549" width="0.3" height="15.0" fill="rgb(217,145,41)" rx="2" ry="2" />
<text  x="937.55" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (20 samples, 0.38%)</title><rect x="97.5" y="613" width="4.4" height="15.0" fill="rgb(230,207,43)" rx="2" ry="2" />
<text  x="100.46" y="623.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="605.2" y="597" width="0.3" height="15.0" fill="rgb(212,100,5)" rx="2" ry="2" />
<text  x="608.24" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="691.6" y="645" width="0.4" height="15.0" fill="rgb(232,101,36)" rx="2" ry="2" />
<text  x="694.58" y="655.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;int&gt; &gt; (1 samples, 0.02%)</title><rect x="703.0" y="613" width="0.2" height="15.0" fill="rgb(225,219,40)" rx="2" ry="2" />
<text  x="705.96" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.13%)</title><rect x="122.7" y="613" width="1.5" height="15.0" fill="rgb(243,101,43)" rx="2" ry="2" />
<text  x="125.67" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="59.8" y="485" width="0.4" height="15.0" fill="rgb(245,168,19)" rx="2" ry="2" />
<text  x="62.75" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="58.6" y="389" width="0.3" height="15.0" fill="rgb(251,169,12)" rx="2" ry="2" />
<text  x="61.64" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (5 samples, 0.09%)</title><rect x="1164.8" y="613" width="1.1" height="15.0" fill="rgb(243,114,30)" rx="2" ry="2" />
<text  x="1167.79" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%)</title><rect x="261.9" y="357" width="0.2" height="15.0" fill="rgb(214,78,30)" rx="2" ry="2" />
<text  x="264.89" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="254.7" y="309" width="0.5" height="15.0" fill="rgb(227,87,0)" rx="2" ry="2" />
<text  x="257.75" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (6 samples, 0.11%)</title><rect x="560.2" y="581" width="1.3" height="15.0" fill="rgb(248,162,24)" rx="2" ry="2" />
<text  x="563.18" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.13%)</title><rect x="83.6" y="645" width="1.6" height="15.0" fill="rgb(225,114,48)" rx="2" ry="2" />
<text  x="86.62" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="55.3" y="421" width="0.2" height="15.0" fill="rgb(244,66,33)" rx="2" ry="2" />
<text  x="58.29" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="56.6" y="229" width="0.3" height="15.0" fill="rgb(209,155,15)" rx="2" ry="2" />
<text  x="59.63" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="52.8" y="437" width="0.3" height="15.0" fill="rgb(241,68,7)" rx="2" ry="2" />
<text  x="55.84" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (66 samples, 1.25%)</title><rect x="1060.6" y="485" width="14.7" height="15.0" fill="rgb(211,154,5)" rx="2" ry="2" />
<text  x="1063.60" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (75 samples, 1.42%)</title><rect x="410.2" y="341" width="16.8" height="15.0" fill="rgb(241,42,37)" rx="2" ry="2" />
<text  x="413.25" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="437.2" y="325" width="0.5" height="15.0" fill="rgb(233,0,38)" rx="2" ry="2" />
<text  x="440.25" y="335.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (15 samples, 0.28%)</title><rect x="1159.9" y="613" width="3.3" height="15.0" fill="rgb(217,185,22)" rx="2" ry="2" />
<text  x="1162.88" y="623.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.11%)</title><rect x="1055.2" y="453" width="1.4" height="15.0" fill="rgb(212,159,38)" rx="2" ry="2" />
<text  x="1058.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="49.9" y="389" width="0.3" height="15.0" fill="rgb(224,167,43)" rx="2" ry="2" />
<text  x="52.94" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="541.9" y="469" width="1.3" height="15.0" fill="rgb(249,141,16)" rx="2" ry="2" />
<text  x="544.88" y="479.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="17.4" y="693" width="0.4" height="15.0" fill="rgb(233,30,6)" rx="2" ry="2" />
<text  x="20.36" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (6 samples, 0.11%)</title><rect x="801.1" y="453" width="1.4" height="15.0" fill="rgb(221,61,13)" rx="2" ry="2" />
<text  x="804.13" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="976.0" y="517" width="0.3" height="15.0" fill="rgb(236,27,36)" rx="2" ry="2" />
<text  x="979.04" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (4 samples, 0.08%)</title><rect x="123.3" y="597" width="0.9" height="15.0" fill="rgb(229,35,19)" rx="2" ry="2" />
<text  x="126.34" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (26 samples, 0.49%)</title><rect x="390.6" y="325" width="5.8" height="15.0" fill="rgb(211,115,38)" rx="2" ry="2" />
<text  x="393.62" y="335.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (14 samples, 0.26%)</title><rect x="770.8" y="549" width="3.1" height="15.0" fill="rgb(241,158,11)" rx="2" ry="2" />
<text  x="773.79" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1019.5" y="325" width="0.3" height="15.0" fill="rgb(210,103,3)" rx="2" ry="2" />
<text  x="1022.55" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::untyped_constant (1 samples, 0.02%)</title><rect x="54.8" y="85" width="0.3" height="15.0" fill="rgb(246,16,20)" rx="2" ry="2" />
<text  x="57.84" y="95.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1162.1" y="581" width="0.2" height="15.0" fill="rgb(212,105,31)" rx="2" ry="2" />
<text  x="1165.11" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (26 samples, 0.49%)</title><rect x="253.9" y="341" width="5.8" height="15.0" fill="rgb(207,172,6)" rx="2" ry="2" />
<text  x="256.85" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (176 samples, 3.33%)</title><rect x="995.7" y="453" width="39.2" height="15.0" fill="rgb(244,94,0)" rx="2" ry="2" />
<text  x="998.68" y="463.5" >ser..</text>
</g>
<g >
<title>seastar::execution_stage::flush (3 samples, 0.06%)</title><rect x="773.2" y="533" width="0.7" height="15.0" fill="rgb(232,225,7)" rx="2" ry="2" />
<text  x="776.24" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="46.6" y="469" width="0.4" height="15.0" fill="rgb(224,205,2)" rx="2" ry="2" />
<text  x="49.59" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, std::unique_ptr&lt;seastar::io_queue, std::default_delete&lt;seastar::io_queue&gt; &gt; &gt;, false, false&gt;, seastar::reactor::update_shares_for_queues (1 samples, 0.02%)</title><rect x="1164.8" y="549" width="0.2" height="15.0" fill="rgb(254,135,10)" rx="2" ry="2" />
<text  x="1167.79" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="290.7" y="389" width="0.4" height="15.0" fill="rgb(252,168,20)" rx="2" ry="2" />
<text  x="293.67" y="399.5" ></text>
</g>
<g >
<title>mutation_cleaner_impl::clear_some (1 samples, 0.02%)</title><rect x="702.7" y="405" width="0.3" height="15.0" fill="rgb(246,204,43)" rx="2" ry="2" />
<text  x="705.74" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="149" width="0.3" height="15.0" fill="rgb(250,201,29)" rx="2" ry="2" />
<text  x="57.84" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%)</title><rect x="878.1" y="501" width="0.2" height="15.0" fill="rgb(217,185,50)" rx="2" ry="2" />
<text  x="881.10" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="924.1" y="485" width="0.9" height="15.0" fill="rgb(237,32,9)" rx="2" ry="2" />
<text  x="927.06" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (6 samples, 0.11%)</title><rect x="344.2" y="341" width="1.3" height="15.0" fill="rgb(228,50,50)" rx="2" ry="2" />
<text  x="347.21" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="828.1" y="437" width="0.2" height="15.0" fill="rgb(242,70,32)" rx="2" ry="2" />
<text  x="831.12" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (3 samples, 0.06%)</title><rect x="325.5" y="533" width="0.6" height="15.0" fill="rgb(210,138,9)" rx="2" ry="2" />
<text  x="328.47" y="543.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (210 samples, 3.97%)</title><rect x="21.8" y="597" width="46.9" height="15.0" fill="rgb(228,89,16)" rx="2" ry="2" />
<text  x="24.82" y="607.5" >cql3..</text>
</g>
<g >
<title>mutation_reader_merger::add_readers (13 samples, 0.25%)</title><rect x="469.4" y="437" width="2.9" height="15.0" fill="rgb(236,70,25)" rx="2" ry="2" />
<text  x="472.37" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(207,164,23)" rx="2" ry="2" />
<text  x="13.67" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (13 samples, 0.25%)</title><rect x="401.8" y="373" width="2.9" height="15.0" fill="rgb(208,58,24)" rx="2" ry="2" />
<text  x="404.77" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (19 samples, 0.36%)</title><rect x="984.1" y="501" width="4.2" height="15.0" fill="rgb(216,183,20)" rx="2" ry="2" />
<text  x="987.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="57.5" y="357" width="0.5" height="15.0" fill="rgb(209,133,47)" rx="2" ry="2" />
<text  x="60.52" y="367.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="671.5" y="597" width="0.2" height="15.0" fill="rgb(221,29,32)" rx="2" ry="2" />
<text  x="674.51" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (4 samples, 0.08%)</title><rect x="232.4" y="229" width="0.9" height="15.0" fill="rgb(227,135,15)" rx="2" ry="2" />
<text  x="235.44" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (3 samples, 0.06%)</title><rect x="574.9" y="485" width="0.7" height="15.0" fill="rgb(246,20,46)" rx="2" ry="2" />
<text  x="577.90" y="495.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (4 samples, 0.08%)</title><rect x="645.2" y="645" width="0.9" height="15.0" fill="rgb(220,54,20)" rx="2" ry="2" />
<text  x="648.18" y="655.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="23.8" y="549" width="0.3" height="15.0" fill="rgb(207,166,54)" rx="2" ry="2" />
<text  x="26.83" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="875.2" y="661" width="0.4" height="15.0" fill="rgb(215,45,32)" rx="2" ry="2" />
<text  x="878.20" y="671.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (79 samples, 1.49%)</title><rect x="895.5" y="549" width="17.6" height="15.0" fill="rgb(222,123,40)" rx="2" ry="2" />
<text  x="898.50" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="453.5" y="533" width="0.3" height="15.0" fill="rgb(209,92,46)" rx="2" ry="2" />
<text  x="456.53" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%)</title><rect x="115.1" y="629" width="0.2" height="15.0" fill="rgb(213,133,47)" rx="2" ry="2" />
<text  x="118.08" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="64.4" y="501" width="0.3" height="15.0" fill="rgb(233,99,40)" rx="2" ry="2" />
<text  x="67.44" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::operator delete (1 samples, 0.02%)</title><rect x="22.9" y="533" width="0.3" height="15.0" fill="rgb(232,153,6)" rx="2" ry="2" />
<text  x="25.94" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="27.2" y="325" width="0.2" height="15.0" fill="rgb(237,222,48)" rx="2" ry="2" />
<text  x="30.18" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.09%)</title><rect x="310.7" y="453" width="1.2" height="15.0" fill="rgb(244,114,51)" rx="2" ry="2" />
<text  x="313.74" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="728.6" y="645" width="0.2" height="15.0" fill="rgb(251,163,46)" rx="2" ry="2" />
<text  x="731.62" y="655.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (1 samples, 0.02%)</title><rect x="124.2" y="613" width="0.3" height="15.0" fill="rgb(217,178,20)" rx="2" ry="2" />
<text  x="127.23" y="623.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="776.6" y="549" width="0.2" height="15.0" fill="rgb(246,114,12)" rx="2" ry="2" />
<text  x="779.59" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="880.1" y="437" width="0.5" height="15.0" fill="rgb(239,79,38)" rx="2" ry="2" />
<text  x="883.11" y="447.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (2 samples, 0.04%)</title><rect x="1120.6" y="389" width="0.5" height="15.0" fill="rgb(251,112,53)" rx="2" ry="2" />
<text  x="1123.61" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="1163.7" y="389" width="0.2" height="15.0" fill="rgb(234,187,51)" rx="2" ry="2" />
<text  x="1166.67" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="110.2" y="437" width="0.2" height="15.0" fill="rgb(233,201,2)" rx="2" ry="2" />
<text  x="113.17" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="680.7" y="581" width="0.2" height="15.0" fill="rgb(205,33,53)" rx="2" ry="2" />
<text  x="683.65" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="61.5" y="357" width="0.5" height="15.0" fill="rgb(233,23,49)" rx="2" ry="2" />
<text  x="64.54" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (4 samples, 0.08%)</title><rect x="653.4" y="613" width="0.9" height="15.0" fill="rgb(246,48,17)" rx="2" ry="2" />
<text  x="656.43" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="308.5" y="501" width="0.2" height="15.0" fill="rgb(237,123,16)" rx="2" ry="2" />
<text  x="311.51" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="45.9" y="437" width="0.2" height="15.0" fill="rgb(225,71,44)" rx="2" ry="2" />
<text  x="48.92" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (87 samples, 1.64%)</title><rect x="466.5" y="485" width="19.4" height="15.0" fill="rgb(251,119,22)" rx="2" ry="2" />
<text  x="469.47" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="278.8" y="325" width="0.7" height="15.0" fill="rgb(252,0,26)" rx="2" ry="2" />
<text  x="281.84" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (3 samples, 0.06%)</title><rect x="452.9" y="533" width="0.6" height="15.0" fill="rgb(230,23,22)" rx="2" ry="2" />
<text  x="455.86" y="543.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (4 samples, 0.08%)</title><rect x="268.6" y="389" width="0.9" height="15.0" fill="rgb(215,194,32)" rx="2" ry="2" />
<text  x="271.58" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="705.9" y="629" width="0.2" height="15.0" fill="rgb(215,178,25)" rx="2" ry="2" />
<text  x="708.86" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="77.6" y="565" width="0.2" height="15.0" fill="rgb(224,25,30)" rx="2" ry="2" />
<text  x="80.60" y="575.5" ></text>
</g>
<g >
<title>auth::require_record (1 samples, 0.02%)</title><rect x="1163.7" y="421" width="0.2" height="15.0" fill="rgb(233,93,23)" rx="2" ry="2" />
<text  x="1166.67" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (3 samples, 0.06%)</title><rect x="925.8" y="533" width="0.7" height="15.0" fill="rgb(206,224,21)" rx="2" ry="2" />
<text  x="928.84" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="154.3" y="533" width="0.7" height="15.0" fill="rgb(206,100,22)" rx="2" ry="2" />
<text  x="157.35" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="850.2" y="549" width="1.8" height="15.0" fill="rgb(244,216,18)" rx="2" ry="2" />
<text  x="853.21" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="659.0" y="645" width="0.5" height="15.0" fill="rgb(229,162,5)" rx="2" ry="2" />
<text  x="662.01" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="875.9" y="357" width="0.2" height="15.0" fill="rgb(205,36,20)" rx="2" ry="2" />
<text  x="878.87" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (4 samples, 0.08%)</title><rect x="626.4" y="597" width="0.9" height="15.0" fill="rgb(218,100,34)" rx="2" ry="2" />
<text  x="629.44" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="878.1" y="485" width="0.2" height="15.0" fill="rgb(221,15,52)" rx="2" ry="2" />
<text  x="881.10" y="495.5" ></text>
</g>
<g >
<title>auth::service::has_superuser (1 samples, 0.02%)</title><rect x="1163.7" y="485" width="0.2" height="15.0" fill="rgb(220,215,22)" rx="2" ry="2" />
<text  x="1166.67" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="203.9" y="341" width="0.6" height="15.0" fill="rgb(208,141,19)" rx="2" ry="2" />
<text  x="206.88" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="718.4" y="629" width="0.2" height="15.0" fill="rgb(234,35,31)" rx="2" ry="2" />
<text  x="721.36" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="707.4" y="597" width="0.2" height="15.0" fill="rgb(231,31,11)" rx="2" ry="2" />
<text  x="710.42" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (573 samples, 10.83%)</title><rect x="171.1" y="485" width="127.8" height="15.0" fill="rgb(251,176,43)" rx="2" ry="2" />
<text  x="174.08" y="495.5" >mutation_reader_..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="433.0" y="389" width="0.2" height="15.0" fill="rgb(224,85,53)" rx="2" ry="2" />
<text  x="436.01" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (2 samples, 0.04%)</title><rect x="706.1" y="629" width="0.4" height="15.0" fill="rgb(205,88,2)" rx="2" ry="2" />
<text  x="709.09" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="50.2" y="469" width="0.2" height="15.0" fill="rgb(225,193,30)" rx="2" ry="2" />
<text  x="53.16" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="769.0" y="549" width="0.2" height="15.0" fill="rgb(216,200,32)" rx="2" ry="2" />
<text  x="772.00" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (1 samples, 0.02%)</title><rect x="75.1" y="565" width="0.3" height="15.0" fill="rgb(217,129,53)" rx="2" ry="2" />
<text  x="78.15" y="575.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (2 samples, 0.04%)</title><rect x="1116.6" y="405" width="0.4" height="15.0" fill="rgb(234,161,2)" rx="2" ry="2" />
<text  x="1119.60" y="415.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%)</title><rect x="448.4" y="533" width="2.7" height="15.0" fill="rgb(231,23,13)" rx="2" ry="2" />
<text  x="451.40" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (3 samples, 0.06%)</title><rect x="196.1" y="389" width="0.6" height="15.0" fill="rgb(214,209,54)" rx="2" ry="2" />
<text  x="199.07" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1081.6" y="501" width="0.2" height="15.0" fill="rgb(230,140,29)" rx="2" ry="2" />
<text  x="1084.57" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1132.4" y="453" width="0.3" height="15.0" fill="rgb(215,35,18)" rx="2" ry="2" />
<text  x="1135.44" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="63.1" y="325" width="0.2" height="15.0" fill="rgb(245,182,44)" rx="2" ry="2" />
<text  x="66.10" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.11%)</title><rect x="911.3" y="501" width="1.4" height="15.0" fill="rgb(246,88,44)" rx="2" ry="2" />
<text  x="914.34" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="60.6" y="293" width="0.3" height="15.0" fill="rgb(236,226,42)" rx="2" ry="2" />
<text  x="63.64" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.09%)</title><rect x="649.6" y="645" width="1.2" height="15.0" fill="rgb(215,183,38)" rx="2" ry="2" />
<text  x="652.64" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="878.1" y="533" width="0.2" height="15.0" fill="rgb(211,179,15)" rx="2" ry="2" />
<text  x="881.10" y="543.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (4 samples, 0.08%)</title><rect x="864.9" y="549" width="0.9" height="15.0" fill="rgb(252,1,48)" rx="2" ry="2" />
<text  x="867.94" y="559.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="82.7" y="565" width="0.7" height="15.0" fill="rgb(232,205,9)" rx="2" ry="2" />
<text  x="85.73" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="44.6" y="341" width="0.2" height="15.0" fill="rgb(234,178,54)" rx="2" ry="2" />
<text  x="47.58" y="351.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (12 samples, 0.23%)</title><rect x="552.8" y="453" width="2.7" height="15.0" fill="rgb(247,152,29)" rx="2" ry="2" />
<text  x="555.81" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="523.8" y="389" width="0.2" height="15.0" fill="rgb(235,59,48)" rx="2" ry="2" />
<text  x="526.81" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1021.8" y="373" width="0.2" height="15.0" fill="rgb(233,177,20)" rx="2" ry="2" />
<text  x="1024.78" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="60.6" y="261" width="0.3" height="15.0" fill="rgb(244,167,8)" rx="2" ry="2" />
<text  x="63.64" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="65.3" y="501" width="0.3" height="15.0" fill="rgb(217,106,2)" rx="2" ry="2" />
<text  x="68.33" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="76.9" y="549" width="0.3" height="15.0" fill="rgb(224,83,38)" rx="2" ry="2" />
<text  x="79.93" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.66%)</title><rect x="1124.9" y="533" width="7.8" height="15.0" fill="rgb(206,15,17)" rx="2" ry="2" />
<text  x="1127.85" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="700.7" y="645" width="0.3" height="15.0" fill="rgb(227,110,4)" rx="2" ry="2" />
<text  x="703.73" y="655.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (2 samples, 0.04%)</title><rect x="161.7" y="581" width="0.5" height="15.0" fill="rgb(246,8,24)" rx="2" ry="2" />
<text  x="164.71" y="591.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (4 samples, 0.08%)</title><rect x="131.8" y="549" width="0.9" height="15.0" fill="rgb(227,202,28)" rx="2" ry="2" />
<text  x="134.82" y="559.5" ></text>
</g>
<g >
<title>service::client_state::has_access (5 samples, 0.09%)</title><rect x="78.7" y="597" width="1.1" height="15.0" fill="rgb(245,91,7)" rx="2" ry="2" />
<text  x="81.72" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="84.7" y="469" width="0.3" height="15.0" fill="rgb(245,85,25)" rx="2" ry="2" />
<text  x="87.74" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="76.7" y="613" width="0.2" height="15.0" fill="rgb(243,23,52)" rx="2" ry="2" />
<text  x="79.71" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="609.0" y="549" width="0.5" height="15.0" fill="rgb(232,78,13)" rx="2" ry="2" />
<text  x="612.04" y="559.5" ></text>
</g>
<g >
<title>auth::operator== (1 samples, 0.02%)</title><rect x="816.1" y="309" width="0.2" height="15.0" fill="rgb(211,39,47)" rx="2" ry="2" />
<text  x="819.08" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="579.1" y="437" width="0.3" height="15.0" fill="rgb(214,86,12)" rx="2" ry="2" />
<text  x="582.14" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="920.9" y="533" width="0.3" height="15.0" fill="rgb(246,150,31)" rx="2" ry="2" />
<text  x="923.94" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="47.0" y="485" width="0.7" height="15.0" fill="rgb(213,83,39)" rx="2" ry="2" />
<text  x="50.04" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="82.1" y="693" width="3.1" height="15.0" fill="rgb(244,50,41)" rx="2" ry="2" />
<text  x="85.06" y="703.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (3 samples, 0.06%)</title><rect x="617.3" y="565" width="0.7" height="15.0" fill="rgb(207,210,13)" rx="2" ry="2" />
<text  x="620.29" y="575.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (1 samples, 0.02%)</title><rect x="82.1" y="549" width="0.2" height="15.0" fill="rgb(227,94,11)" rx="2" ry="2" />
<text  x="85.06" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.4" y="341" width="0.2" height="15.0" fill="rgb(225,102,22)" rx="2" ry="2" />
<text  x="63.42" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="334.2" y="421" width="0.6" height="15.0" fill="rgb(221,164,41)" rx="2" ry="2" />
<text  x="337.17" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="881.2" y="501" width="0.2" height="15.0" fill="rgb(252,77,13)" rx="2" ry="2" />
<text  x="884.22" y="511.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (3 samples, 0.06%)</title><rect x="1028.0" y="421" width="0.7" height="15.0" fill="rgb(215,14,21)" rx="2" ry="2" />
<text  x="1031.03" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (15 samples, 0.28%)</title><rect x="854.0" y="581" width="3.4" height="15.0" fill="rgb(208,112,49)" rx="2" ry="2" />
<text  x="857.00" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="1110.8" y="565" width="0.4" height="15.0" fill="rgb(210,180,54)" rx="2" ry="2" />
<text  x="1113.80" y="575.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (7 samples, 0.13%)</title><rect x="1098.5" y="565" width="1.6" height="15.0" fill="rgb(226,141,41)" rx="2" ry="2" />
<text  x="1101.53" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="74.3" y="437" width="0.2" height="15.0" fill="rgb(249,80,5)" rx="2" ry="2" />
<text  x="77.25" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="85.4" y="661" width="0.2" height="15.0" fill="rgb(220,205,37)" rx="2" ry="2" />
<text  x="88.41" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.7" y="581" width="0.3" height="15.0" fill="rgb(248,36,9)" rx="2" ry="2" />
<text  x="705.74" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (291 samples, 5.50%)</title><rect x="16.2" y="741" width="65.0" height="15.0" fill="rgb(239,213,1)" rx="2" ry="2" />
<text  x="19.25" y="751.5" >seastar..</text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1049.2" y="501" width="0.2" height="15.0" fill="rgb(208,155,24)" rx="2" ry="2" />
<text  x="1052.22" y="511.5" ></text>
</g>
<g >
<title>partition_entry::read (5 samples, 0.09%)</title><rect x="540.3" y="469" width="1.1" height="15.0" fill="rgb(230,217,31)" rx="2" ry="2" />
<text  x="543.32" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (37 samples, 0.70%)</title><rect x="502.4" y="437" width="8.2" height="15.0" fill="rgb(243,181,32)" rx="2" ry="2" />
<text  x="505.39" y="447.5" ></text>
</g>
<g >
<title>perf_simple_que (5,287 samples, 99.96%)</title><rect x="10.0" y="805" width="1179.6" height="15.0" fill="rgb(229,144,9)" rx="2" ry="2" />
<text  x="13.00" y="815.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;cql3::update_parameters::prefetch_data, false&gt;::uninitialized_set&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="881.7" y="533" width="0.2" height="15.0" fill="rgb(219,193,7)" rx="2" ry="2" />
<text  x="884.67" y="543.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (1 samples, 0.02%)</title><rect x="1127.8" y="293" width="0.2" height="15.0" fill="rgb(235,43,12)" rx="2" ry="2" />
<text  x="1130.75" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="875.6" y="629" width="0.7" height="15.0" fill="rgb(233,221,48)" rx="2" ry="2" />
<text  x="878.65" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (46 samples, 0.87%)</title><rect x="275.9" y="389" width="10.3" height="15.0" fill="rgb(219,174,45)" rx="2" ry="2" />
<text  x="278.94" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (15 samples, 0.28%)</title><rect x="834.1" y="517" width="3.4" height="15.0" fill="rgb(212,46,14)" rx="2" ry="2" />
<text  x="837.15" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="81.8" y="613" width="0.3" height="15.0" fill="rgb(207,14,34)" rx="2" ry="2" />
<text  x="84.84" y="623.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (1 samples, 0.02%)</title><rect x="22.5" y="549" width="0.2" height="15.0" fill="rgb(219,132,34)" rx="2" ry="2" />
<text  x="25.49" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1080.7" y="501" width="0.2" height="15.0" fill="rgb(250,168,9)" rx="2" ry="2" />
<text  x="1083.68" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1024.0" y="357" width="0.2" height="15.0" fill="rgb(252,115,19)" rx="2" ry="2" />
<text  x="1027.01" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="578.7" y="437" width="0.2" height="15.0" fill="rgb(226,182,20)" rx="2" ry="2" />
<text  x="581.69" y="447.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="702.1" y="629" width="0.2" height="15.0" fill="rgb(212,153,37)" rx="2" ry="2" />
<text  x="705.07" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1115.3" y="613" width="0.2" height="15.0" fill="rgb(252,66,24)" rx="2" ry="2" />
<text  x="1118.26" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.17%)</title><rect x="33.9" y="421" width="2.0" height="15.0" fill="rgb(222,176,8)" rx="2" ry="2" />
<text  x="36.87" y="431.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="632.2" y="581" width="1.2" height="15.0" fill="rgb(237,85,47)" rx="2" ry="2" />
<text  x="635.24" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="699.6" y="645" width="0.5" height="15.0" fill="rgb(244,36,54)" rx="2" ry="2" />
<text  x="702.62" y="655.5" ></text>
</g>
<g >
<title>map_type_impl::deserialize&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="501" width="0.2" height="15.0" fill="rgb(226,72,46)" rx="2" ry="2" />
<text  x="649.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (67 samples, 1.27%)</title><rect x="24.3" y="501" width="14.9" height="15.0" fill="rgb(226,224,35)" rx="2" ry="2" />
<text  x="27.28" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="274.8" y="405" width="0.9" height="15.0" fill="rgb(242,183,17)" rx="2" ry="2" />
<text  x="277.83" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%)</title><rect x="545.7" y="501" width="0.6" height="15.0" fill="rgb(254,147,13)" rx="2" ry="2" />
<text  x="548.67" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="530.3" y="357" width="1.5" height="15.0" fill="rgb(233,123,40)" rx="2" ry="2" />
<text  x="533.28" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.6" y="325" width="0.2" height="15.0" fill="rgb(253,143,13)" rx="2" ry="2" />
<text  x="45.57" y="335.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.4" y="437" width="0.2" height="15.0" fill="rgb(249,164,2)" rx="2" ry="2" />
<text  x="1127.41" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (4 samples, 0.08%)</title><rect x="82.7" y="613" width="0.9" height="15.0" fill="rgb(252,77,7)" rx="2" ry="2" />
<text  x="85.73" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="60.4" y="469" width="0.5" height="15.0" fill="rgb(228,172,34)" rx="2" ry="2" />
<text  x="63.42" y="479.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="575.6" y="485" width="2.0" height="15.0" fill="rgb(228,32,0)" rx="2" ry="2" />
<text  x="578.57" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%)</title><rect x="84.1" y="613" width="0.9" height="15.0" fill="rgb(219,108,2)" rx="2" ry="2" />
<text  x="87.07" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1128.9" y="261" width="0.2" height="15.0" fill="rgb(220,96,28)" rx="2" ry="2" />
<text  x="1131.87" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="937.7" y="533" width="0.2" height="15.0" fill="rgb(210,170,42)" rx="2" ry="2" />
<text  x="940.67" y="543.5" ></text>
</g>
<g >
<title>syscall-0 (2 samples, 0.04%)</title><rect x="1189.6" y="805" width="0.4" height="15.0" fill="rgb(242,69,48)" rx="2" ry="2" />
<text  x="1192.55" y="815.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="875.6" y="597" width="0.7" height="15.0" fill="rgb(247,219,50)" rx="2" ry="2" />
<text  x="878.65" y="607.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1121.3" y="357" width="0.4" height="15.0" fill="rgb(251,182,22)" rx="2" ry="2" />
<text  x="1124.28" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%)</title><rect x="84.1" y="581" width="0.9" height="15.0" fill="rgb(211,185,6)" rx="2" ry="2" />
<text  x="87.07" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="824.8" y="389" width="0.2" height="15.0" fill="rgb(224,16,4)" rx="2" ry="2" />
<text  x="827.78" y="399.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="140.1" y="549" width="0.2" height="15.0" fill="rgb(221,0,48)" rx="2" ry="2" />
<text  x="143.07" y="559.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (3 samples, 0.06%)</title><rect x="124.5" y="613" width="0.6" height="15.0" fill="rgb(248,228,54)" rx="2" ry="2" />
<text  x="127.45" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="56.9" y="341" width="0.6" height="15.0" fill="rgb(238,98,6)" rx="2" ry="2" />
<text  x="59.85" y="351.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="511.3" y="469" width="0.2" height="15.0" fill="rgb(230,88,27)" rx="2" ry="2" />
<text  x="514.32" y="479.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="17.4" y="645" width="0.4" height="15.0" fill="rgb(252,59,18)" rx="2" ry="2" />
<text  x="20.36" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="635.4" y="533" width="0.4" height="15.0" fill="rgb(207,150,6)" rx="2" ry="2" />
<text  x="638.36" y="543.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (8 samples, 0.15%)</title><rect x="387.9" y="325" width="1.8" height="15.0" fill="rgb(232,81,46)" rx="2" ry="2" />
<text  x="390.94" y="335.5" ></text>
</g>
<g >
<title>mutation_cleaner_impl::clear_gently (1 samples, 0.02%)</title><rect x="702.7" y="421" width="0.3" height="15.0" fill="rgb(237,187,41)" rx="2" ry="2" />
<text  x="705.74" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="81.8" y="709" width="0.3" height="15.0" fill="rgb(208,212,53)" rx="2" ry="2" />
<text  x="84.84" y="719.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%)</title><rect x="33.0" y="421" width="0.2" height="15.0" fill="rgb(223,184,10)" rx="2" ry="2" />
<text  x="35.98" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="676.6" y="645" width="0.3" height="15.0" fill="rgb(250,181,24)" rx="2" ry="2" />
<text  x="679.64" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="104.8" y="629" width="0.2" height="15.0" fill="rgb(221,194,20)" rx="2" ry="2" />
<text  x="107.82" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="17.6" y="613" width="0.2" height="15.0" fill="rgb(251,190,12)" rx="2" ry="2" />
<text  x="20.59" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="929.2" y="533" width="0.4" height="15.0" fill="rgb(243,153,43)" rx="2" ry="2" />
<text  x="932.19" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="17.1" y="661" width="0.3" height="15.0" fill="rgb(226,37,4)" rx="2" ry="2" />
<text  x="20.14" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::binary_operator::binary_operator (1 samples, 0.02%)</title><rect x="71.8" y="533" width="0.2" height="15.0" fill="rgb(224,98,18)" rx="2" ry="2" />
<text  x="74.80" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (15 samples, 0.28%)</title><rect x="1095.0" y="533" width="3.3" height="15.0" fill="rgb(212,182,33)" rx="2" ry="2" />
<text  x="1097.96" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (19 samples, 0.36%)</title><rect x="97.7" y="597" width="4.2" height="15.0" fill="rgb(233,193,6)" rx="2" ry="2" />
<text  x="100.68" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.1" y="373" width="0.2" height="15.0" fill="rgb(223,151,38)" rx="2" ry="2" />
<text  x="64.09" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="832.4" y="469" width="0.4" height="15.0" fill="rgb(224,148,39)" rx="2" ry="2" />
<text  x="835.36" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="879.9" y="437" width="0.2" height="15.0" fill="rgb(250,4,12)" rx="2" ry="2" />
<text  x="882.88" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="958.0" y="517" width="2.4" height="15.0" fill="rgb(211,194,30)" rx="2" ry="2" />
<text  x="960.97" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="302.5" y="501" width="0.2" height="15.0" fill="rgb(239,29,3)" rx="2" ry="2" />
<text  x="305.49" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="246.7" y="293" width="0.5" height="15.0" fill="rgb(229,148,48)" rx="2" ry="2" />
<text  x="249.71" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.4" y="405" width="0.2" height="15.0" fill="rgb(231,37,5)" rx="2" ry="2" />
<text  x="47.36" y="415.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::deserialize_visitor&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="517" width="0.2" height="15.0" fill="rgb(233,203,21)" rx="2" ry="2" />
<text  x="649.07" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (16 samples, 0.30%)</title><rect x="182.7" y="421" width="3.6" height="15.0" fill="rgb(205,184,10)" rx="2" ry="2" />
<text  x="185.68" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (3 samples, 0.06%)</title><rect x="659.5" y="629" width="0.6" height="15.0" fill="rgb(218,210,10)" rx="2" ry="2" />
<text  x="662.46" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="938.3" y="517" width="0.5" height="15.0" fill="rgb(213,92,3)" rx="2" ry="2" />
<text  x="941.34" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (5 samples, 0.09%)</title><rect x="54.0" y="373" width="1.1" height="15.0" fill="rgb(252,78,37)" rx="2" ry="2" />
<text  x="56.95" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.11%)</title><rect x="134.5" y="565" width="1.3" height="15.0" fill="rgb(230,146,44)" rx="2" ry="2" />
<text  x="137.49" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="105.0" y="469" width="0.3" height="15.0" fill="rgb(231,118,25)" rx="2" ry="2" />
<text  x="108.04" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="239.1" y="261" width="0.3" height="15.0" fill="rgb(226,105,33)" rx="2" ry="2" />
<text  x="242.13" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="702.1" y="293" width="0.2" height="15.0" fill="rgb(234,146,8)" rx="2" ry="2" />
<text  x="705.07" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="926.7" y="549" width="0.3" height="15.0" fill="rgb(206,120,29)" rx="2" ry="2" />
<text  x="929.74" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1159.2" y="613" width="0.2" height="15.0" fill="rgb(241,122,13)" rx="2" ry="2" />
<text  x="1162.21" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="103.9" y="629" width="0.3" height="15.0" fill="rgb(224,164,26)" rx="2" ry="2" />
<text  x="106.93" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="22.0" y="565" width="0.3" height="15.0" fill="rgb(239,32,20)" rx="2" ry="2" />
<text  x="25.05" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1127.8" y="405" width="4.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1130.75" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="526.9" y="389" width="0.3" height="15.0" fill="rgb(240,1,12)" rx="2" ry="2" />
<text  x="529.93" y="399.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="92.3" y="645" width="1.4" height="15.0" fill="rgb(244,78,2)" rx="2" ry="2" />
<text  x="95.33" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="59.5" y="421" width="0.3" height="15.0" fill="rgb(235,106,22)" rx="2" ry="2" />
<text  x="62.53" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (151 samples, 2.85%)</title><rect x="571.6" y="581" width="33.6" height="15.0" fill="rgb(246,209,8)" rx="2" ry="2" />
<text  x="574.55" y="591.5" >st..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="875.6" y="485" width="0.5" height="15.0" fill="rgb(226,10,37)" rx="2" ry="2" />
<text  x="878.65" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="271.9" y="405" width="0.2" height="15.0" fill="rgb(213,151,32)" rx="2" ry="2" />
<text  x="274.92" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1141.1" y="645" width="0.3" height="15.0" fill="rgb(229,62,18)" rx="2" ry="2" />
<text  x="1144.14" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1159.4" y="613" width="0.3" height="15.0" fill="rgb(230,133,19)" rx="2" ry="2" />
<text  x="1162.43" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="650.3" y="629" width="0.2" height="15.0" fill="rgb(224,58,19)" rx="2" ry="2" />
<text  x="653.31" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="49.5" y="469" width="0.2" height="15.0" fill="rgb(223,229,0)" rx="2" ry="2" />
<text  x="52.49" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="687.8" y="597" width="0.2" height="15.0" fill="rgb(229,62,33)" rx="2" ry="2" />
<text  x="690.79" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="57.5" y="373" width="0.5" height="15.0" fill="rgb(250,77,37)" rx="2" ry="2" />
<text  x="60.52" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="22.5" y="453" width="0.2" height="15.0" fill="rgb(209,38,12)" rx="2" ry="2" />
<text  x="25.49" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (37 samples, 0.70%)</title><rect x="197.2" y="405" width="8.2" height="15.0" fill="rgb(221,86,2)" rx="2" ry="2" />
<text  x="200.18" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="77.2" y="597" width="0.2" height="15.0" fill="rgb(206,82,36)" rx="2" ry="2" />
<text  x="80.15" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (8 samples, 0.15%)</title><rect x="24.9" y="405" width="1.8" height="15.0" fill="rgb(250,102,29)" rx="2" ry="2" />
<text  x="27.95" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="688.0" y="597" width="0.5" height="15.0" fill="rgb(242,98,4)" rx="2" ry="2" />
<text  x="691.01" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="463.6" y="501" width="0.2" height="15.0" fill="rgb(237,79,37)" rx="2" ry="2" />
<text  x="466.57" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="41.2" y="453" width="0.7" height="15.0" fill="rgb(220,45,34)" rx="2" ry="2" />
<text  x="44.23" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;, mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="646.3" y="661" width="0.2" height="15.0" fill="rgb(227,13,40)" rx="2" ry="2" />
<text  x="649.29" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="81.6" y="277" width="0.2" height="15.0" fill="rgb(207,220,13)" rx="2" ry="2" />
<text  x="84.62" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="51.9" y="437" width="0.3" height="15.0" fill="rgb(228,214,43)" rx="2" ry="2" />
<text  x="54.94" y="447.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (28 samples, 0.53%)</title><rect x="900.9" y="469" width="6.2" height="15.0" fill="rgb(251,95,18)" rx="2" ry="2" />
<text  x="903.86" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1141.6" y="645" width="0.2" height="15.0" fill="rgb(206,97,37)" rx="2" ry="2" />
<text  x="1144.59" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="646.1" y="645" width="0.2" height="15.0" fill="rgb(249,144,49)" rx="2" ry="2" />
<text  x="649.07" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%)</title><rect x="110.0" y="549" width="0.2" height="15.0" fill="rgb(209,81,32)" rx="2" ry="2" />
<text  x="112.95" y="559.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (3 samples, 0.06%)</title><rect x="772.3" y="517" width="0.7" height="15.0" fill="rgb(243,196,9)" rx="2" ry="2" />
<text  x="775.35" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_insert_node (1 samples, 0.02%)</title><rect x="73.6" y="453" width="0.2" height="15.0" fill="rgb(224,8,43)" rx="2" ry="2" />
<text  x="76.58" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="43.9" y="501" width="0.2" height="15.0" fill="rgb(239,148,34)" rx="2" ry="2" />
<text  x="46.91" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.4" y="389" width="0.2" height="15.0" fill="rgb(236,88,43)" rx="2" ry="2" />
<text  x="1125.40" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (2 samples, 0.04%)</title><rect x="829.2" y="453" width="0.5" height="15.0" fill="rgb(213,72,35)" rx="2" ry="2" />
<text  x="832.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="50.4" y="437" width="1.3" height="15.0" fill="rgb(250,187,1)" rx="2" ry="2" />
<text  x="53.38" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="93.9" y="629" width="0.2" height="15.0" fill="rgb(213,20,8)" rx="2" ry="2" />
<text  x="96.89" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="738.9" y="549" width="0.7" height="15.0" fill="rgb(242,175,16)" rx="2" ry="2" />
<text  x="741.88" y="559.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (5 samples, 0.09%)</title><rect x="367.6" y="341" width="1.2" height="15.0" fill="rgb(227,27,0)" rx="2" ry="2" />
<text  x="370.64" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="64.9" y="453" width="0.2" height="15.0" fill="rgb(223,32,52)" rx="2" ry="2" />
<text  x="67.88" y="463.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="108.8" y="421" width="0.3" height="15.0" fill="rgb(207,153,3)" rx="2" ry="2" />
<text  x="111.84" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="950.6" y="469" width="0.2" height="15.0" fill="rgb(232,206,46)" rx="2" ry="2" />
<text  x="953.61" y="479.5" ></text>
</g>
<g >
<title>memtable::apply (31 samples, 0.59%)</title><rect x="1116.4" y="421" width="6.9" height="15.0" fill="rgb(229,121,21)" rx="2" ry="2" />
<text  x="1119.38" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (1 samples, 0.02%)</title><rect x="728.8" y="565" width="0.3" height="15.0" fill="rgb(227,6,24)" rx="2" ry="2" />
<text  x="731.84" y="575.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (4 samples, 0.08%)</title><rect x="999.0" y="437" width="0.9" height="15.0" fill="rgb(246,53,26)" rx="2" ry="2" />
<text  x="1002.02" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1104.6" y="549" width="1.5" height="15.0" fill="rgb(246,225,21)" rx="2" ry="2" />
<text  x="1107.55" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%)</title><rect x="120.7" y="613" width="0.2" height="15.0" fill="rgb(211,190,42)" rx="2" ry="2" />
<text  x="123.66" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="213.7" y="357" width="0.2" height="15.0" fill="rgb(221,50,36)" rx="2" ry="2" />
<text  x="216.69" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="826.8" y="421" width="0.4" height="15.0" fill="rgb(214,22,19)" rx="2" ry="2" />
<text  x="829.79" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1140.5" y="645" width="0.2" height="15.0" fill="rgb(231,48,11)" rx="2" ry="2" />
<text  x="1143.47" y="655.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (2 samples, 0.04%)</title><rect x="1126.2" y="325" width="0.4" height="15.0" fill="rgb(252,93,34)" rx="2" ry="2" />
<text  x="1129.19" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="1049.0" y="501" width="0.2" height="15.0" fill="rgb(221,89,46)" rx="2" ry="2" />
<text  x="1052.00" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="657.4" y="645" width="0.5" height="15.0" fill="rgb(246,132,47)" rx="2" ry="2" />
<text  x="660.45" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="204.5" y="373" width="0.3" height="15.0" fill="rgb(244,133,1)" rx="2" ry="2" />
<text  x="207.55" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="314.3" y="453" width="0.7" height="15.0" fill="rgb(242,9,2)" rx="2" ry="2" />
<text  x="317.31" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (7 samples, 0.13%)</title><rect x="731.3" y="661" width="1.6" height="15.0" fill="rgb(226,131,40)" rx="2" ry="2" />
<text  x="734.30" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (183 samples, 3.46%)</title><rect x="1037.2" y="517" width="40.8" height="15.0" fill="rgb(243,186,54)" rx="2" ry="2" />
<text  x="1040.17" y="527.5" >ser..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="588.1" y="453" width="0.2" height="15.0" fill="rgb(241,209,53)" rx="2" ry="2" />
<text  x="591.06" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group::set_shares (1 samples, 0.02%)</title><rect x="1165.0" y="597" width="0.2" height="15.0" fill="rgb(208,171,25)" rx="2" ry="2" />
<text  x="1168.01" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="702.1" y="437" width="0.2" height="15.0" fill="rgb(241,8,10)" rx="2" ry="2" />
<text  x="705.07" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="935.4" y="517" width="0.9" height="15.0" fill="rgb(213,104,45)" rx="2" ry="2" />
<text  x="938.44" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1130.4" y="261" width="0.3" height="15.0" fill="rgb(234,169,46)" rx="2" ry="2" />
<text  x="1133.43" y="271.5" ></text>
</g>
<g >
<title>secondary_index::secondary_index_manager::list_indexes (1 samples, 0.02%)</title><rect x="73.1" y="517" width="0.3" height="15.0" fill="rgb(242,36,25)" rx="2" ry="2" />
<text  x="76.14" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="869.0" y="517" width="0.2" height="15.0" fill="rgb(248,82,8)" rx="2" ry="2" />
<text  x="871.95" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="907.8" y="469" width="0.2" height="15.0" fill="rgb(238,34,34)" rx="2" ry="2" />
<text  x="910.77" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="139.6" y="613" width="0.2" height="15.0" fill="rgb(229,91,24)" rx="2" ry="2" />
<text  x="142.62" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="74.3" y="549" width="0.2" height="15.0" fill="rgb(235,31,46)" rx="2" ry="2" />
<text  x="77.25" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="477.9" y="437" width="0.6" height="15.0" fill="rgb(206,156,0)" rx="2" ry="2" />
<text  x="480.85" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="60.6" y="325" width="0.3" height="15.0" fill="rgb(231,173,34)" rx="2" ry="2" />
<text  x="63.64" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="591.4" y="501" width="0.2" height="15.0" fill="rgb(235,0,24)" rx="2" ry="2" />
<text  x="594.41" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.3" y="341" width="0.2" height="15.0" fill="rgb(217,166,11)" rx="2" ry="2" />
<text  x="64.31" y="351.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%)</title><rect x="765.7" y="421" width="0.6" height="15.0" fill="rgb(209,176,28)" rx="2" ry="2" />
<text  x="768.66" y="431.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="875.6" y="437" width="0.5" height="15.0" fill="rgb(234,141,49)" rx="2" ry="2" />
<text  x="878.65" y="447.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="693.1" y="629" width="0.5" height="15.0" fill="rgb(207,208,38)" rx="2" ry="2" />
<text  x="696.15" y="639.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="533.2" y="357" width="0.6" height="15.0" fill="rgb(235,66,25)" rx="2" ry="2" />
<text  x="536.18" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="22.5" y="533" width="0.2" height="15.0" fill="rgb(228,3,15)" rx="2" ry="2" />
<text  x="25.49" y="543.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%)</title><rect x="1076.9" y="501" width="0.7" height="15.0" fill="rgb(227,76,16)" rx="2" ry="2" />
<text  x="1079.89" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1162.6" y="581" width="0.4" height="15.0" fill="rgb(209,28,6)" rx="2" ry="2" />
<text  x="1165.56" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1025.8" y="389" width="0.7" height="15.0" fill="rgb(220,102,19)" rx="2" ry="2" />
<text  x="1028.80" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="74.9" y="485" width="0.2" height="15.0" fill="rgb(249,110,48)" rx="2" ry="2" />
<text  x="77.92" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="919.6" y="517" width="0.2" height="15.0" fill="rgb(223,71,16)" rx="2" ry="2" />
<text  x="922.60" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;database, false&gt;::make&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="549" width="0.3" height="15.0" fill="rgb(232,187,32)" rx="2" ry="2" />
<text  x="21.03" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (119 samples, 2.25%)</title><rect x="39.2" y="533" width="26.6" height="15.0" fill="rgb(244,123,42)" rx="2" ry="2" />
<text  x="42.23" y="543.5" >c..</text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="518.9" y="437" width="0.4" height="15.0" fill="rgb(210,214,43)" rx="2" ry="2" />
<text  x="521.90" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%)</title><rect x="22.5" y="581" width="0.4" height="15.0" fill="rgb(231,212,17)" rx="2" ry="2" />
<text  x="25.49" y="591.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="421.0" y="309" width="2.4" height="15.0" fill="rgb(233,51,54)" rx="2" ry="2" />
<text  x="423.96" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (1 samples, 0.02%)</title><rect x="800.0" y="485" width="0.2" height="15.0" fill="rgb(233,173,48)" rx="2" ry="2" />
<text  x="803.01" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (265 samples, 5.01%)</title><rect x="977.8" y="517" width="59.2" height="15.0" fill="rgb(243,76,48)" rx="2" ry="2" />
<text  x="980.83" y="527.5" >servic..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (3 samples, 0.06%)</title><rect x="68.9" y="565" width="0.7" height="15.0" fill="rgb(236,44,13)" rx="2" ry="2" />
<text  x="71.90" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (2 samples, 0.04%)</title><rect x="876.5" y="549" width="0.5" height="15.0" fill="rgb(205,119,3)" rx="2" ry="2" />
<text  x="879.54" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="854.9" y="517" width="0.2" height="15.0" fill="rgb(214,99,42)" rx="2" ry="2" />
<text  x="857.90" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%)</title><rect x="1102.5" y="581" width="0.9" height="15.0" fill="rgb(236,123,23)" rx="2" ry="2" />
<text  x="1105.54" y="591.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (13 samples, 0.25%)</title><rect x="552.8" y="469" width="2.9" height="15.0" fill="rgb(229,76,30)" rx="2" ry="2" />
<text  x="555.81" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="61.5" y="309" width="0.5" height="15.0" fill="rgb(237,70,37)" rx="2" ry="2" />
<text  x="64.54" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="698.7" y="613" width="0.2" height="15.0" fill="rgb(221,35,28)" rx="2" ry="2" />
<text  x="701.72" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (4 samples, 0.08%)</title><rect x="979.8" y="485" width="0.9" height="15.0" fill="rgb(212,148,43)" rx="2" ry="2" />
<text  x="982.84" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="598.5" y="501" width="0.3" height="15.0" fill="rgb(227,40,1)" rx="2" ry="2" />
<text  x="601.55" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="808.9" y="389" width="0.5" height="15.0" fill="rgb(233,70,4)" rx="2" ry="2" />
<text  x="811.94" y="399.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (45 samples, 0.85%)</title><rect x="915.1" y="549" width="10.1" height="15.0" fill="rgb(223,173,12)" rx="2" ry="2" />
<text  x="918.14" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="47.5" y="357" width="0.2" height="15.0" fill="rgb(234,69,21)" rx="2" ry="2" />
<text  x="50.48" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="907.1" y="469" width="0.7" height="15.0" fill="rgb(246,140,35)" rx="2" ry="2" />
<text  x="910.10" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (18 samples, 0.34%)</title><rect x="474.5" y="469" width="4.0" height="15.0" fill="rgb(248,24,28)" rx="2" ry="2" />
<text  x="477.50" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="59.5" y="453" width="0.3" height="15.0" fill="rgb(252,110,36)" rx="2" ry="2" />
<text  x="62.53" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="838.4" y="533" width="0.9" height="15.0" fill="rgb(216,2,18)" rx="2" ry="2" />
<text  x="841.39" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="85.2" y="757" width="0.4" height="15.0" fill="rgb(219,30,39)" rx="2" ry="2" />
<text  x="88.19" y="767.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.2" y="693" width="0.2" height="15.0" fill="rgb(248,39,19)" rx="2" ry="2" />
<text  x="88.19" y="703.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="56.6" y="245" width="0.3" height="15.0" fill="rgb(251,6,36)" rx="2" ry="2" />
<text  x="59.63" y="255.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="97.0" y="613" width="0.5" height="15.0" fill="rgb(247,113,47)" rx="2" ry="2" />
<text  x="100.01" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1116.4" y="389" width="0.2" height="15.0" fill="rgb(226,135,54)" rx="2" ry="2" />
<text  x="1119.38" y="399.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="622.9" y="565" width="0.6" height="15.0" fill="rgb(247,115,3)" rx="2" ry="2" />
<text  x="625.87" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1018.7" y="309" width="0.4" height="15.0" fill="rgb(234,94,41)" rx="2" ry="2" />
<text  x="1021.66" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1153.6" y="613" width="0.3" height="15.0" fill="rgb(212,206,35)" rx="2" ry="2" />
<text  x="1156.63" y="623.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="17.1" y="709" width="0.3" height="15.0" fill="rgb(212,105,12)" rx="2" ry="2" />
<text  x="20.14" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (30 samples, 0.57%)</title><rect x="292.0" y="469" width="6.7" height="15.0" fill="rgb(243,54,34)" rx="2" ry="2" />
<text  x="295.00" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="393.1" y="309" width="0.4" height="15.0" fill="rgb(228,49,25)" rx="2" ry="2" />
<text  x="396.07" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="607.0" y="581" width="0.3" height="15.0" fill="rgb(207,47,1)" rx="2" ry="2" />
<text  x="610.03" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="649.0" y="645" width="0.4" height="15.0" fill="rgb(241,155,7)" rx="2" ry="2" />
<text  x="651.97" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="567.8" y="437" width="0.2" height="15.0" fill="rgb(229,228,53)" rx="2" ry="2" />
<text  x="570.76" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace::v3::scylla_views_builds_in_progress (1 samples, 0.02%)</title><rect x="17.8" y="437" width="0.2" height="15.0" fill="rgb(252,130,54)" rx="2" ry="2" />
<text  x="20.81" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%)</title><rect x="577.6" y="485" width="0.2" height="15.0" fill="rgb(242,135,15)" rx="2" ry="2" />
<text  x="580.58" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::recreate_current_row (1 samples, 0.02%)</title><rect x="11.1" y="693" width="0.2" height="15.0" fill="rgb(229,136,23)" rx="2" ry="2" />
<text  x="14.12" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="701.0" y="549" width="0.8" height="15.0" fill="rgb(247,44,15)" rx="2" ry="2" />
<text  x="703.95" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.1" y="437" width="0.2" height="15.0" fill="rgb(226,67,22)" rx="2" ry="2" />
<text  x="64.09" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (638 samples, 12.06%)</title><rect x="944.8" y="581" width="142.3" height="15.0" fill="rgb(211,55,28)" rx="2" ry="2" />
<text  x="947.81" y="591.5" >cql3::statements::..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="59.8" y="469" width="0.4" height="15.0" fill="rgb(254,71,3)" rx="2" ry="2" />
<text  x="62.75" y="479.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="597" width="0.3" height="15.0" fill="rgb(240,142,32)" rx="2" ry="2" />
<text  x="21.03" y="607.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="728.8" y="517" width="0.3" height="15.0" fill="rgb(247,225,53)" rx="2" ry="2" />
<text  x="731.84" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="66.7" y="485" width="0.2" height="15.0" fill="rgb(223,129,36)" rx="2" ry="2" />
<text  x="69.67" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.6" y="725" width="0.2" height="15.0" fill="rgb(222,53,11)" rx="2" ry="2" />
<text  x="84.62" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="599.2" y="517" width="0.2" height="15.0" fill="rgb(224,119,52)" rx="2" ry="2" />
<text  x="602.22" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (48 samples, 0.91%)</title><rect x="228.4" y="261" width="10.7" height="15.0" fill="rgb(221,41,5)" rx="2" ry="2" />
<text  x="231.42" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%)</title><rect x="59.1" y="453" width="0.2" height="15.0" fill="rgb(226,228,50)" rx="2" ry="2" />
<text  x="62.08" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="53.7" y="389" width="0.3" height="15.0" fill="rgb(250,126,16)" rx="2" ry="2" />
<text  x="56.73" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (4 samples, 0.08%)</title><rect x="671.5" y="613" width="0.9" height="15.0" fill="rgb(209,47,3)" rx="2" ry="2" />
<text  x="674.51" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (15 samples, 0.28%)</title><rect x="656.8" y="661" width="3.3" height="15.0" fill="rgb(208,203,50)" rx="2" ry="2" />
<text  x="659.78" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="757.4" y="549" width="0.2" height="15.0" fill="rgb(254,94,42)" rx="2" ry="2" />
<text  x="760.40" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="85.6" y="741" width="0.3" height="15.0" fill="rgb(245,72,38)" rx="2" ry="2" />
<text  x="88.63" y="751.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (11 samples, 0.21%)</title><rect x="770.8" y="533" width="2.4" height="15.0" fill="rgb(233,66,32)" rx="2" ry="2" />
<text  x="773.79" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="45.0" y="341" width="0.5" height="15.0" fill="rgb(232,140,19)" rx="2" ry="2" />
<text  x="48.03" y="351.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="109.7" y="517" width="0.3" height="15.0" fill="rgb(205,106,32)" rx="2" ry="2" />
<text  x="112.73" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="925.0" y="501" width="0.2" height="15.0" fill="rgb(205,104,54)" rx="2" ry="2" />
<text  x="927.95" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="696.7" y="613" width="0.7" height="15.0" fill="rgb(240,65,26)" rx="2" ry="2" />
<text  x="699.72" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="80.5" y="533" width="0.2" height="15.0" fill="rgb(224,85,3)" rx="2" ry="2" />
<text  x="83.50" y="543.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1121.7" y="389" width="0.3" height="15.0" fill="rgb(226,25,6)" rx="2" ry="2" />
<text  x="1124.73" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="104.6" y="629" width="0.2" height="15.0" fill="rgb(212,209,12)" rx="2" ry="2" />
<text  x="107.60" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (51 samples, 0.96%)</title><rect x="717.0" y="645" width="11.4" height="15.0" fill="rgb(228,41,21)" rx="2" ry="2" />
<text  x="720.02" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (36 samples, 0.68%)</title><rect x="593.6" y="533" width="8.1" height="15.0" fill="rgb(248,139,30)" rx="2" ry="2" />
<text  x="596.64" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="44.6" y="309" width="0.2" height="15.0" fill="rgb(205,106,0)" rx="2" ry="2" />
<text  x="47.58" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="534.3" y="373" width="0.2" height="15.0" fill="rgb(229,196,44)" rx="2" ry="2" />
<text  x="537.30" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="701.0" y="565" width="0.8" height="15.0" fill="rgb(250,213,27)" rx="2" ry="2" />
<text  x="703.95" y="575.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.09%)</title><rect x="109.7" y="645" width="1.1" height="15.0" fill="rgb(249,201,17)" rx="2" ry="2" />
<text  x="112.73" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1126.9" y="341" width="0.4" height="15.0" fill="rgb(239,37,41)" rx="2" ry="2" />
<text  x="1129.86" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="56.4" y="293" width="0.2" height="15.0" fill="rgb(205,61,37)" rx="2" ry="2" />
<text  x="59.41" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1026.5" y="421" width="0.2" height="15.0" fill="rgb(217,214,46)" rx="2" ry="2" />
<text  x="1029.46" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.1" y="533" width="0.2" height="15.0" fill="rgb(230,114,24)" rx="2" ry="2" />
<text  x="705.07" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (7 samples, 0.13%)</title><rect x="986.5" y="437" width="1.6" height="15.0" fill="rgb(250,171,25)" rx="2" ry="2" />
<text  x="989.53" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="109.7" y="485" width="0.3" height="15.0" fill="rgb(206,184,2)" rx="2" ry="2" />
<text  x="112.73" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (2 samples, 0.04%)</title><rect x="1122.0" y="389" width="0.4" height="15.0" fill="rgb(209,136,34)" rx="2" ry="2" />
<text  x="1124.95" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="101.9" y="613" width="0.7" height="15.0" fill="rgb(235,54,44)" rx="2" ry="2" />
<text  x="104.92" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="607.5" y="565" width="0.2" height="15.0" fill="rgb(243,209,22)" rx="2" ry="2" />
<text  x="610.47" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selectClause (1 samples, 0.02%)</title><rect x="10.7" y="389" width="0.2" height="15.0" fill="rgb(243,186,0)" rx="2" ry="2" />
<text  x="13.67" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.08%)</title><rect x="296.7" y="437" width="0.9" height="15.0" fill="rgb(208,117,12)" rx="2" ry="2" />
<text  x="299.69" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="823.0" y="373" width="0.4" height="15.0" fill="rgb(229,131,8)" rx="2" ry="2" />
<text  x="825.99" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="82.5" y="517" width="0.2" height="15.0" fill="rgb(232,206,1)" rx="2" ry="2" />
<text  x="85.51" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="62.2" y="469" width="0.5" height="15.0" fill="rgb(225,149,51)" rx="2" ry="2" />
<text  x="65.21" y="479.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (1 samples, 0.02%)</title><rect x="22.5" y="517" width="0.2" height="15.0" fill="rgb(231,113,12)" rx="2" ry="2" />
<text  x="25.49" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (193 samples, 3.65%)</title><rect x="993.9" y="469" width="43.1" height="15.0" fill="rgb(226,139,41)" rx="2" ry="2" />
<text  x="996.89" y="479.5" >serv..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1127.8" y="437" width="4.4" height="15.0" fill="rgb(223,0,47)" rx="2" ry="2" />
<text  x="1130.75" y="447.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (31 samples, 0.59%)</title><rect x="1116.4" y="437" width="6.9" height="15.0" fill="rgb(228,210,9)" rx="2" ry="2" />
<text  x="1119.38" y="447.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%)</title><rect x="10.7" y="469" width="0.2" height="15.0" fill="rgb(243,107,27)" rx="2" ry="2" />
<text  x="13.67" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="62.0" y="277" width="0.2" height="15.0" fill="rgb(246,27,9)" rx="2" ry="2" />
<text  x="64.98" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="108.6" y="501" width="0.2" height="15.0" fill="rgb(205,70,47)" rx="2" ry="2" />
<text  x="111.61" y="511.5" ></text>
</g>
<g >
<title>std::forward&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="46.4" y="485" width="0.2" height="15.0" fill="rgb(225,26,24)" rx="2" ry="2" />
<text  x="49.37" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="58.4" y="437" width="0.2" height="15.0" fill="rgb(215,52,33)" rx="2" ry="2" />
<text  x="61.41" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (14 samples, 0.26%)</title><rect x="583.8" y="453" width="3.1" height="15.0" fill="rgb(210,115,10)" rx="2" ry="2" />
<text  x="586.82" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1035.4" y="453" width="0.7" height="15.0" fill="rgb(245,128,12)" rx="2" ry="2" />
<text  x="1038.39" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::get_future (1 samples, 0.02%)</title><rect x="1125.7" y="421" width="0.3" height="15.0" fill="rgb(231,86,6)" rx="2" ry="2" />
<text  x="1128.75" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="54.4" y="261" width="0.7" height="15.0" fill="rgb(228,87,46)" rx="2" ry="2" />
<text  x="57.40" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (5 samples, 0.09%)</title><rect x="1026.9" y="421" width="1.1" height="15.0" fill="rgb(216,172,21)" rx="2" ry="2" />
<text  x="1029.91" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="27.2" y="357" width="0.2" height="15.0" fill="rgb(212,138,22)" rx="2" ry="2" />
<text  x="30.18" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="709" width="0.2" height="15.0" fill="rgb(224,20,35)" rx="2" ry="2" />
<text  x="13.67" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%)</title><rect x="814.1" y="341" width="0.6" height="15.0" fill="rgb(215,70,25)" rx="2" ry="2" />
<text  x="817.07" y="351.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.23%)</title><rect x="737.3" y="613" width="2.7" height="15.0" fill="rgb(241,21,3)" rx="2" ry="2" />
<text  x="740.32" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (2 samples, 0.04%)</title><rect x="948.8" y="565" width="0.5" height="15.0" fill="rgb(207,77,39)" rx="2" ry="2" />
<text  x="951.82" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.30%)</title><rect x="1094.7" y="549" width="3.6" height="15.0" fill="rgb(235,51,31)" rx="2" ry="2" />
<text  x="1097.73" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="56.4" y="277" width="0.2" height="15.0" fill="rgb(240,224,42)" rx="2" ry="2" />
<text  x="59.41" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (10 samples, 0.19%)</title><rect x="635.8" y="597" width="2.2" height="15.0" fill="rgb(221,206,24)" rx="2" ry="2" />
<text  x="638.81" y="607.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="21.2" y="581" width="0.2" height="15.0" fill="rgb(247,92,39)" rx="2" ry="2" />
<text  x="24.16" y="591.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="150.6" y="597" width="2.0" height="15.0" fill="rgb(209,217,42)" rx="2" ry="2" />
<text  x="153.56" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="21.2" y="549" width="0.2" height="15.0" fill="rgb(248,189,18)" rx="2" ry="2" />
<text  x="24.16" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="44.8" y="421" width="0.2" height="15.0" fill="rgb(205,190,5)" rx="2" ry="2" />
<text  x="47.80" y="431.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="1025.1" y="421" width="1.4" height="15.0" fill="rgb(208,159,40)" rx="2" ry="2" />
<text  x="1028.13" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.09%)</title><rect x="429.9" y="389" width="1.1" height="15.0" fill="rgb(209,85,18)" rx="2" ry="2" />
<text  x="432.88" y="399.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.83%)</title><rect x="1179.1" y="789" width="9.8" height="15.0" fill="rgb(205,59,34)" rx="2" ry="2" />
<text  x="1182.07" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="857.6" y="565" width="0.6" height="15.0" fill="rgb(254,147,42)" rx="2" ry="2" />
<text  x="860.57" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (4 samples, 0.08%)</title><rect x="819.2" y="277" width="0.9" height="15.0" fill="rgb(245,35,6)" rx="2" ry="2" />
<text  x="822.20" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.8" y="389" width="0.2" height="15.0" fill="rgb(208,53,50)" rx="2" ry="2" />
<text  x="62.75" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="599.4" y="501" width="0.3" height="15.0" fill="rgb(246,211,40)" rx="2" ry="2" />
<text  x="602.44" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.6" y="389" width="0.3" height="15.0" fill="rgb(206,156,2)" rx="2" ry="2" />
<text  x="63.64" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1018.2" y="277" width="0.5" height="15.0" fill="rgb(224,165,36)" rx="2" ry="2" />
<text  x="1021.21" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="917.8" y="501" width="1.6" height="15.0" fill="rgb(217,216,35)" rx="2" ry="2" />
<text  x="920.81" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.11%)</title><rect x="927.9" y="517" width="1.3" height="15.0" fill="rgb(233,54,41)" rx="2" ry="2" />
<text  x="930.85" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="46.8" y="357" width="0.2" height="15.0" fill="rgb(232,32,8)" rx="2" ry="2" />
<text  x="49.81" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.15%)</title><rect x="442.4" y="421" width="1.8" height="15.0" fill="rgb(241,66,3)" rx="2" ry="2" />
<text  x="445.38" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="81.6" y="709" width="0.2" height="15.0" fill="rgb(215,67,12)" rx="2" ry="2" />
<text  x="84.62" y="719.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="81.8" y="549" width="0.3" height="15.0" fill="rgb(245,155,3)" rx="2" ry="2" />
<text  x="84.84" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (82 samples, 1.55%)</title><rect x="895.3" y="565" width="18.3" height="15.0" fill="rgb(250,94,14)" rx="2" ry="2" />
<text  x="898.28" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="302.3" y="501" width="0.2" height="15.0" fill="rgb(224,108,23)" rx="2" ry="2" />
<text  x="305.27" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_permissions_statement*, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.3" y="485" width="0.3" height="15.0" fill="rgb(217,150,38)" rx="2" ry="2" />
<text  x="70.34" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="17.8" y="661" width="0.2" height="15.0" fill="rgb(242,224,49)" rx="2" ry="2" />
<text  x="20.81" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (1 samples, 0.02%)</title><rect x="81.6" y="261" width="0.2" height="15.0" fill="rgb(211,133,19)" rx="2" ry="2" />
<text  x="84.62" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (455 samples, 8.60%)</title><rect x="190.5" y="469" width="101.5" height="15.0" fill="rgb(212,188,22)" rx="2" ry="2" />
<text  x="193.49" y="479.5" >partition_sn..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="603.2" y="533" width="0.3" height="15.0" fill="rgb(211,62,15)" rx="2" ry="2" />
<text  x="606.24" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (4 samples, 0.08%)</title><rect x="821.4" y="293" width="0.9" height="15.0" fill="rgb(249,223,1)" rx="2" ry="2" />
<text  x="824.43" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="634.5" y="533" width="0.6" height="15.0" fill="rgb(247,125,7)" rx="2" ry="2" />
<text  x="637.47" y="543.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="410.0" y="341" width="0.2" height="15.0" fill="rgb(241,162,7)" rx="2" ry="2" />
<text  x="413.03" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="81.6" y="357" width="0.2" height="15.0" fill="rgb(235,180,26)" rx="2" ry="2" />
<text  x="84.62" y="367.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (1 samples, 0.02%)</title><rect x="908.2" y="485" width="0.2" height="15.0" fill="rgb(210,76,47)" rx="2" ry="2" />
<text  x="911.22" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.15%)</title><rect x="1147.2" y="597" width="1.7" height="15.0" fill="rgb(206,158,39)" rx="2" ry="2" />
<text  x="1150.16" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="875.0" y="661" width="0.2" height="15.0" fill="rgb(220,179,0)" rx="2" ry="2" />
<text  x="877.98" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.09%)</title><rect x="931.0" y="565" width="1.1" height="15.0" fill="rgb(206,47,11)" rx="2" ry="2" />
<text  x="933.98" y="575.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="51.3" y="357" width="0.4" height="15.0" fill="rgb(242,42,20)" rx="2" ry="2" />
<text  x="54.27" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.0" y="421" width="0.2" height="15.0" fill="rgb(221,53,54)" rx="2" ry="2" />
<text  x="62.98" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (2 samples, 0.04%)</title><rect x="1120.2" y="373" width="0.4" height="15.0" fill="rgb(229,4,42)" rx="2" ry="2" />
<text  x="1123.17" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="720.1" y="613" width="0.3" height="15.0" fill="rgb(241,63,1)" rx="2" ry="2" />
<text  x="723.14" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="1022.9" y="389" width="1.3" height="15.0" fill="rgb(210,91,16)" rx="2" ry="2" />
<text  x="1025.89" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="59.1" y="469" width="0.2" height="15.0" fill="rgb(209,161,47)" rx="2" ry="2" />
<text  x="62.08" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="283.7" y="373" width="0.7" height="15.0" fill="rgb(206,201,13)" rx="2" ry="2" />
<text  x="286.75" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="345.3" y="325" width="0.2" height="15.0" fill="rgb(243,110,37)" rx="2" ry="2" />
<text  x="348.33" y="335.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="824.3" y="405" width="0.7" height="15.0" fill="rgb(209,7,50)" rx="2" ry="2" />
<text  x="827.33" y="415.5" ></text>
</g>
<g >
<title>make_multishard_combining_reader (1 samples, 0.02%)</title><rect x="81.6" y="85" width="0.2" height="15.0" fill="rgb(248,120,37)" rx="2" ry="2" />
<text  x="84.62" y="95.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="48.8" y="421" width="0.5" height="15.0" fill="rgb(216,143,14)" rx="2" ry="2" />
<text  x="51.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="504.8" y="341" width="0.7" height="15.0" fill="rgb(224,121,5)" rx="2" ry="2" />
<text  x="507.85" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="76.0" y="565" width="0.3" height="15.0" fill="rgb(229,161,33)" rx="2" ry="2" />
<text  x="79.04" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="202.3" y="357" width="2.2" height="15.0" fill="rgb(225,21,7)" rx="2" ry="2" />
<text  x="205.32" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result_set&gt; &gt;, db::system_keyspace::query (1 samples, 0.02%)</title><rect x="646.1" y="661" width="0.2" height="15.0" fill="rgb(215,187,35)" rx="2" ry="2" />
<text  x="649.07" y="671.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="626.7" y="581" width="0.6" height="15.0" fill="rgb(252,0,2)" rx="2" ry="2" />
<text  x="629.66" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="470.3" y="389" width="1.5" height="15.0" fill="rgb(208,146,2)" rx="2" ry="2" />
<text  x="473.26" y="399.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (12 samples, 0.23%)</title><rect x="241.1" y="261" width="2.7" height="15.0" fill="rgb(225,44,51)" rx="2" ry="2" />
<text  x="244.14" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (218 samples, 4.12%)</title><rect x="988.3" y="501" width="48.7" height="15.0" fill="rgb(216,140,28)" rx="2" ry="2" />
<text  x="991.31" y="511.5" >serv..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="58.0" y="421" width="0.2" height="15.0" fill="rgb(242,21,0)" rx="2" ry="2" />
<text  x="60.97" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.11%)</title><rect x="551.5" y="469" width="1.3" height="15.0" fill="rgb(213,81,34)" rx="2" ry="2" />
<text  x="554.47" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="645" width="0.2" height="15.0" fill="rgb(206,85,50)" rx="2" ry="2" />
<text  x="1166.67" y="655.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="728.8" y="405" width="0.3" height="15.0" fill="rgb(217,180,24)" rx="2" ry="2" />
<text  x="731.84" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="362.3" y="341" width="0.2" height="15.0" fill="rgb(225,126,2)" rx="2" ry="2" />
<text  x="365.28" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::build (7 samples, 0.13%)</title><rect x="611.0" y="597" width="1.6" height="15.0" fill="rgb(227,132,12)" rx="2" ry="2" />
<text  x="614.04" y="607.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="449.5" y="501" width="0.9" height="15.0" fill="rgb(240,223,18)" rx="2" ry="2" />
<text  x="452.52" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="680.0" y="613" width="0.2" height="15.0" fill="rgb(243,139,10)" rx="2" ry="2" />
<text  x="682.98" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="45.0" y="325" width="0.5" height="15.0" fill="rgb(252,36,24)" rx="2" ry="2" />
<text  x="48.03" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="195.6" y="405" width="0.2" height="15.0" fill="rgb(229,158,10)" rx="2" ry="2" />
<text  x="198.62" y="415.5" ></text>
</g>
<g >
<title>partition_entry::apply (4 samples, 0.08%)</title><rect x="1122.0" y="405" width="0.8" height="15.0" fill="rgb(223,173,52)" rx="2" ry="2" />
<text  x="1124.95" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (15 samples, 0.28%)</title><rect x="1108.1" y="581" width="3.4" height="15.0" fill="rgb(229,124,10)" rx="2" ry="2" />
<text  x="1111.12" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="63.1" y="437" width="0.2" height="15.0" fill="rgb(227,158,48)" rx="2" ry="2" />
<text  x="66.10" y="447.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (39 samples, 0.74%)</title><rect x="527.2" y="389" width="8.7" height="15.0" fill="rgb(232,52,18)" rx="2" ry="2" />
<text  x="530.16" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (7 samples, 0.13%)</title><rect x="633.6" y="549" width="1.5" height="15.0" fill="rgb(253,177,8)" rx="2" ry="2" />
<text  x="636.58" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (56 samples, 1.06%)</title><rect x="897.3" y="517" width="12.5" height="15.0" fill="rgb(226,99,3)" rx="2" ry="2" />
<text  x="900.29" y="527.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1128.0" y="309" width="0.2" height="15.0" fill="rgb(235,22,18)" rx="2" ry="2" />
<text  x="1130.98" y="319.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="204.8" y="373" width="0.2" height="15.0" fill="rgb(208,150,40)" rx="2" ry="2" />
<text  x="207.77" y="383.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="858.9" y="565" width="1.6" height="15.0" fill="rgb(245,191,50)" rx="2" ry="2" />
<text  x="861.91" y="575.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="1119.7" y="357" width="0.2" height="15.0" fill="rgb(214,101,15)" rx="2" ry="2" />
<text  x="1122.72" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="44.4" y="293" width="0.2" height="15.0" fill="rgb(247,44,18)" rx="2" ry="2" />
<text  x="47.36" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (9 samples, 0.17%)</title><rect x="764.8" y="453" width="2.0" height="15.0" fill="rgb(248,123,22)" rx="2" ry="2" />
<text  x="767.76" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="55.1" y="389" width="0.2" height="15.0" fill="rgb(237,57,44)" rx="2" ry="2" />
<text  x="58.07" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (7 samples, 0.13%)</title><rect x="1151.0" y="613" width="1.5" height="15.0" fill="rgb(229,83,20)" rx="2" ry="2" />
<text  x="1153.96" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="109.3" y="405" width="0.2" height="15.0" fill="rgb(241,135,33)" rx="2" ry="2" />
<text  x="112.28" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.36%)</title><rect x="762.5" y="501" width="4.3" height="15.0" fill="rgb(214,217,20)" rx="2" ry="2" />
<text  x="765.53" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="484.1" y="437" width="0.2" height="15.0" fill="rgb(234,6,5)" rx="2" ry="2" />
<text  x="487.10" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="847.8" y="565" width="0.2" height="15.0" fill="rgb(253,193,54)" rx="2" ry="2" />
<text  x="850.76" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="57.5" y="293" width="0.5" height="15.0" fill="rgb(225,181,54)" rx="2" ry="2" />
<text  x="60.52" y="303.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="451.5" y="533" width="0.9" height="15.0" fill="rgb(246,93,19)" rx="2" ry="2" />
<text  x="454.52" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="453" width="0.2" height="15.0" fill="rgb(219,45,53)" rx="2" ry="2" />
<text  x="82.16" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="30.1" y="389" width="0.2" height="15.0" fill="rgb(222,16,28)" rx="2" ry="2" />
<text  x="33.08" y="399.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1129.3" y="245" width="0.2" height="15.0" fill="rgb(221,35,4)" rx="2" ry="2" />
<text  x="1132.32" y="255.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="85.4" y="693" width="0.2" height="15.0" fill="rgb(208,228,13)" rx="2" ry="2" />
<text  x="88.41" y="703.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%)</title><rect x="728.8" y="581" width="0.3" height="15.0" fill="rgb(220,2,25)" rx="2" ry="2" />
<text  x="731.84" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (36 samples, 0.68%)</title><rect x="1124.9" y="645" width="8.0" height="15.0" fill="rgb(206,217,47)" rx="2" ry="2" />
<text  x="1127.85" y="655.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%)</title><rect x="748.0" y="453" width="0.7" height="15.0" fill="rgb(254,38,38)" rx="2" ry="2" />
<text  x="751.03" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="84.5" y="485" width="0.2" height="15.0" fill="rgb(229,67,3)" rx="2" ry="2" />
<text  x="87.52" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (2 samples, 0.04%)</title><rect x="713.4" y="629" width="0.5" height="15.0" fill="rgb(252,14,37)" rx="2" ry="2" />
<text  x="716.45" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="102.6" y="597" width="0.2" height="15.0" fill="rgb(211,115,53)" rx="2" ry="2" />
<text  x="105.59" y="607.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%)</title><rect x="22.5" y="485" width="0.2" height="15.0" fill="rgb(220,130,35)" rx="2" ry="2" />
<text  x="25.49" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%)</title><rect x="443.7" y="405" width="0.5" height="15.0" fill="rgb(237,37,42)" rx="2" ry="2" />
<text  x="446.72" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="195.4" y="405" width="0.2" height="15.0" fill="rgb(240,69,9)" rx="2" ry="2" />
<text  x="198.40" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1132.4" y="373" width="0.3" height="15.0" fill="rgb(222,68,9)" rx="2" ry="2" />
<text  x="1135.44" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.6" y="309" width="0.2" height="15.0" fill="rgb(212,153,2)" rx="2" ry="2" />
<text  x="45.57" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="77.4" y="613" width="0.2" height="15.0" fill="rgb(241,212,27)" rx="2" ry="2" />
<text  x="80.38" y="623.5" ></text>
</g>
<g >
<title>timerfd_settime (1 samples, 0.02%)</title><rect x="1165.7" y="597" width="0.2" height="15.0" fill="rgb(225,54,25)" rx="2" ry="2" />
<text  x="1168.68" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="570.2" y="581" width="0.5" height="15.0" fill="rgb(245,34,18)" rx="2" ry="2" />
<text  x="573.22" y="591.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::parse_header (1 samples, 0.02%)</title><rect x="20.7" y="661" width="0.2" height="15.0" fill="rgb(207,196,41)" rx="2" ry="2" />
<text  x="23.71" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (2 samples, 0.04%)</title><rect x="796.0" y="517" width="0.4" height="15.0" fill="rgb(206,227,7)" rx="2" ry="2" />
<text  x="799.00" y="527.5" ></text>
</g>
<g >
<title>ser::column_view::c (3 samples, 0.06%)</title><rect x="1121.1" y="389" width="0.6" height="15.0" fill="rgb(233,162,23)" rx="2" ry="2" />
<text  x="1124.06" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="647.0" y="645" width="0.4" height="15.0" fill="rgb(236,149,28)" rx="2" ry="2" />
<text  x="649.96" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1058.4" y="469" width="0.2" height="15.0" fill="rgb(210,19,20)" rx="2" ry="2" />
<text  x="1061.37" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="570.0" y="581" width="0.2" height="15.0" fill="rgb(243,223,53)" rx="2" ry="2" />
<text  x="572.99" y="591.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="109.3" y="485" width="0.2" height="15.0" fill="rgb(230,187,13)" rx="2" ry="2" />
<text  x="112.28" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="915.6" y="517" width="0.4" height="15.0" fill="rgb(223,92,37)" rx="2" ry="2" />
<text  x="918.58" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="888.4" y="629" width="0.2" height="15.0" fill="rgb(246,180,17)" rx="2" ry="2" />
<text  x="891.36" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="674.2" y="645" width="0.4" height="15.0" fill="rgb(242,7,29)" rx="2" ry="2" />
<text  x="677.18" y="655.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="454.9" y="581" width="0.6" height="15.0" fill="rgb(229,104,54)" rx="2" ry="2" />
<text  x="457.87" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;sstables::key&gt;::operator=&lt;sstables::key&gt; (1 samples, 0.02%)</title><rect x="85.0" y="613" width="0.2" height="15.0" fill="rgb(216,8,51)" rx="2" ry="2" />
<text  x="87.96" y="623.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="994.8" y="453" width="0.2" height="15.0" fill="rgb(248,221,7)" rx="2" ry="2" />
<text  x="997.78" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (5 samples, 0.09%)</title><rect x="307.0" y="517" width="1.1" height="15.0" fill="rgb(231,56,4)" rx="2" ry="2" />
<text  x="309.95" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::unaliasedSelector (1 samples, 0.02%)</title><rect x="10.7" y="357" width="0.2" height="15.0" fill="rgb(238,0,42)" rx="2" ry="2" />
<text  x="13.67" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="437" width="0.2" height="15.0" fill="rgb(236,178,29)" rx="2" ry="2" />
<text  x="143.07" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.26%)</title><rect x="24.5" y="453" width="3.1" height="15.0" fill="rgb(252,156,28)" rx="2" ry="2" />
<text  x="27.50" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="795.8" y="517" width="0.2" height="15.0" fill="rgb(210,184,17)" rx="2" ry="2" />
<text  x="798.77" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::begin (1 samples, 0.02%)</title><rect x="64.0" y="469" width="0.2" height="15.0" fill="rgb(245,161,10)" rx="2" ry="2" />
<text  x="66.99" y="479.5" ></text>
</g>
<g >
<title>multishard_combining_reader::multishard_combining_reader (1 samples, 0.02%)</title><rect x="109.3" y="357" width="0.2" height="15.0" fill="rgb(222,89,5)" rx="2" ry="2" />
<text  x="112.28" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (2 samples, 0.04%)</title><rect x="43.5" y="517" width="0.4" height="15.0" fill="rgb(210,149,3)" rx="2" ry="2" />
<text  x="46.47" y="527.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="427.7" y="357" width="0.2" height="15.0" fill="rgb(233,89,32)" rx="2" ry="2" />
<text  x="430.65" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1107.2" y="533" width="0.3" height="15.0" fill="rgb(250,132,33)" rx="2" ry="2" />
<text  x="1110.23" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="53.1" y="405" width="0.4" height="15.0" fill="rgb(209,216,0)" rx="2" ry="2" />
<text  x="56.06" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="321.5" y="517" width="0.2" height="15.0" fill="rgb(237,86,32)" rx="2" ry="2" />
<text  x="324.45" y="527.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%)</title><rect x="85.9" y="773" width="0.2" height="15.0" fill="rgb(251,97,41)" rx="2" ry="2" />
<text  x="88.86" y="783.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="958.0" y="533" width="2.6" height="15.0" fill="rgb(208,59,11)" rx="2" ry="2" />
<text  x="960.97" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.3" y="517" width="0.3" height="15.0" fill="rgb(223,215,44)" rx="2" ry="2" />
<text  x="70.34" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (66 samples, 1.25%)</title><rect x="24.3" y="485" width="14.7" height="15.0" fill="rgb(239,199,31)" rx="2" ry="2" />
<text  x="27.28" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (2 samples, 0.04%)</title><rect x="680.9" y="597" width="0.4" height="15.0" fill="rgb(238,31,42)" rx="2" ry="2" />
<text  x="683.88" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::fdatasync (1 samples, 0.02%)</title><rect x="1164.6" y="629" width="0.2" height="15.0" fill="rgb(241,124,13)" rx="2" ry="2" />
<text  x="1167.57" y="639.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%)</title><rect x="1189.1" y="757" width="0.2" height="15.0" fill="rgb(211,150,2)" rx="2" ry="2" />
<text  x="1192.11" y="767.5" ></text>
</g>
<g >
<title>auth::resource::resource (13 samples, 0.25%)</title><rect x="790.4" y="549" width="2.9" height="15.0" fill="rgb(238,153,21)" rx="2" ry="2" />
<text  x="793.42" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="45.0" y="309" width="0.5" height="15.0" fill="rgb(228,224,47)" rx="2" ry="2" />
<text  x="48.03" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="62.4" y="405" width="0.3" height="15.0" fill="rgb(221,110,21)" rx="2" ry="2" />
<text  x="65.43" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (3 samples, 0.06%)</title><rect x="110.0" y="565" width="0.6" height="15.0" fill="rgb(225,42,39)" rx="2" ry="2" />
<text  x="112.95" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="685.6" y="613" width="0.2" height="15.0" fill="rgb(212,51,8)" rx="2" ry="2" />
<text  x="688.56" y="623.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (10 samples, 0.19%)</title><rect x="18.7" y="677" width="2.2" height="15.0" fill="rgb(248,23,5)" rx="2" ry="2" />
<text  x="21.70" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="729.5" y="597" width="0.2" height="15.0" fill="rgb(248,109,17)" rx="2" ry="2" />
<text  x="732.51" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="45.5" y="485" width="0.2" height="15.0" fill="rgb(210,128,35)" rx="2" ry="2" />
<text  x="48.47" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="192.1" y="421" width="0.4" height="15.0" fill="rgb(228,51,43)" rx="2" ry="2" />
<text  x="195.05" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (62 samples, 1.17%)</title><rect x="1087.1" y="581" width="13.9" height="15.0" fill="rgb(240,29,24)" rx="2" ry="2" />
<text  x="1090.15" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;ser::qr_clustered_row_view, std::allocator&lt;ser::qr_clustered_row_view&gt; &gt;::emplace_back&lt;ser::qr_clustered_row_view&gt; (1 samples, 0.02%)</title><rect x="656.6" y="501" width="0.2" height="15.0" fill="rgb(235,150,27)" rx="2" ry="2" />
<text  x="659.56" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="22.0" y="533" width="0.3" height="15.0" fill="rgb(213,31,17)" rx="2" ry="2" />
<text  x="25.05" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1084.0" y="549" width="0.2" height="15.0" fill="rgb(212,57,37)" rx="2" ry="2" />
<text  x="1087.03" y="559.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%)</title><rect x="1117.5" y="309" width="0.2" height="15.0" fill="rgb(232,136,13)" rx="2" ry="2" />
<text  x="1120.49" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="51.7" y="405" width="0.2" height="15.0" fill="rgb(222,5,15)" rx="2" ry="2" />
<text  x="54.72" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (112 samples, 2.12%)</title><rect x="1003.7" y="437" width="25.0" height="15.0" fill="rgb(235,20,26)" rx="2" ry="2" />
<text  x="1006.71" y="447.5" >s..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="824.1" y="373" width="0.2" height="15.0" fill="rgb(239,68,37)" rx="2" ry="2" />
<text  x="827.11" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="75.8" y="565" width="0.2" height="15.0" fill="rgb(246,101,34)" rx="2" ry="2" />
<text  x="78.82" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.7" y="533" width="0.2" height="15.0" fill="rgb(205,116,12)" rx="2" ry="2" />
<text  x="69.67" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="56.4" y="309" width="0.2" height="15.0" fill="rgb(240,183,40)" rx="2" ry="2" />
<text  x="59.41" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="827.2" y="437" width="0.3" height="15.0" fill="rgb(254,193,4)" rx="2" ry="2" />
<text  x="830.23" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="55.5" y="405" width="0.2" height="15.0" fill="rgb(206,64,13)" rx="2" ry="2" />
<text  x="58.51" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="934.8" y="565" width="0.2" height="15.0" fill="rgb(211,115,20)" rx="2" ry="2" />
<text  x="937.77" y="575.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="616.8" y="549" width="0.3" height="15.0" fill="rgb(239,117,34)" rx="2" ry="2" />
<text  x="619.84" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.8" y="389" width="0.2" height="15.0" fill="rgb(214,184,33)" rx="2" ry="2" />
<text  x="1119.82" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::constant::view (1 samples, 0.02%)</title><rect x="880.6" y="469" width="0.2" height="15.0" fill="rgb(223,161,40)" rx="2" ry="2" />
<text  x="883.55" y="479.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%)</title><rect x="110.6" y="565" width="0.2" height="15.0" fill="rgb(207,205,33)" rx="2" ry="2" />
<text  x="113.62" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="50.6" y="325" width="0.2" height="15.0" fill="rgb(249,200,5)" rx="2" ry="2" />
<text  x="53.61" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="730.9" y="661" width="0.4" height="15.0" fill="rgb(214,211,10)" rx="2" ry="2" />
<text  x="733.85" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="799.8" y="437" width="0.2" height="15.0" fill="rgb(237,105,23)" rx="2" ry="2" />
<text  x="802.79" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (35 samples, 0.66%)</title><rect x="646.5" y="661" width="7.8" height="15.0" fill="rgb(239,172,31)" rx="2" ry="2" />
<text  x="649.52" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="574.5" y="469" width="0.2" height="15.0" fill="rgb(214,48,33)" rx="2" ry="2" />
<text  x="577.45" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="63.3" y="437" width="0.2" height="15.0" fill="rgb(253,68,37)" rx="2" ry="2" />
<text  x="66.32" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="880.8" y="437" width="0.2" height="15.0" fill="rgb(225,214,8)" rx="2" ry="2" />
<text  x="883.78" y="447.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1163.2" y="661" width="0.3" height="15.0" fill="rgb(245,88,27)" rx="2" ry="2" />
<text  x="1166.23" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.7" y="309" width="0.2" height="15.0" fill="rgb(247,212,33)" rx="2" ry="2" />
<text  x="44.68" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.11%)</title><rect x="352.0" y="341" width="1.4" height="15.0" fill="rgb(224,13,23)" rx="2" ry="2" />
<text  x="355.02" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.6" y="405" width="0.2" height="15.0" fill="rgb(234,111,33)" rx="2" ry="2" />
<text  x="53.61" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="877.9" y="437" width="0.2" height="15.0" fill="rgb(249,15,31)" rx="2" ry="2" />
<text  x="880.88" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1130.7" y="293" width="0.2" height="15.0" fill="rgb(214,59,4)" rx="2" ry="2" />
<text  x="1133.65" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="370.5" y="341" width="0.3" height="15.0" fill="rgb(222,115,28)" rx="2" ry="2" />
<text  x="373.54" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="81.8" y="693" width="0.3" height="15.0" fill="rgb(231,53,37)" rx="2" ry="2" />
<text  x="84.84" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="799.8" y="421" width="0.2" height="15.0" fill="rgb(239,5,5)" rx="2" ry="2" />
<text  x="802.79" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="74.3" y="453" width="0.2" height="15.0" fill="rgb(216,228,11)" rx="2" ry="2" />
<text  x="77.25" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1132.4" y="501" width="0.3" height="15.0" fill="rgb(238,108,1)" rx="2" ry="2" />
<text  x="1135.44" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%)</title><rect x="824.3" y="421" width="2.5" height="15.0" fill="rgb(241,80,0)" rx="2" ry="2" />
<text  x="827.33" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="857.4" y="581" width="0.8" height="15.0" fill="rgb(252,89,36)" rx="2" ry="2" />
<text  x="860.35" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="590.1" y="533" width="0.2" height="15.0" fill="rgb(216,24,6)" rx="2" ry="2" />
<text  x="593.07" y="543.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="966.9" y="517" width="0.2" height="15.0" fill="rgb(244,116,38)" rx="2" ry="2" />
<text  x="969.90" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1144.7" y="597" width="0.5" height="15.0" fill="rgb(232,27,17)" rx="2" ry="2" />
<text  x="1147.71" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="138.5" y="613" width="0.2" height="15.0" fill="rgb(237,65,32)" rx="2" ry="2" />
<text  x="141.51" y="623.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="966.7" y="517" width="0.2" height="15.0" fill="rgb(205,222,2)" rx="2" ry="2" />
<text  x="969.67" y="527.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="981.2" y="453" width="1.5" height="15.0" fill="rgb(248,68,43)" rx="2" ry="2" />
<text  x="984.17" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="692.7" y="629" width="0.4" height="15.0" fill="rgb(254,110,10)" rx="2" ry="2" />
<text  x="695.70" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="447.1" y="405" width="0.4" height="15.0" fill="rgb(223,190,6)" rx="2" ry="2" />
<text  x="450.06" y="415.5" ></text>
</g>
<g >
<title>database::shard_of (2 samples, 0.04%)</title><rect x="1126.2" y="341" width="0.4" height="15.0" fill="rgb(232,72,8)" rx="2" ry="2" />
<text  x="1129.19" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="56.6" y="261" width="0.3" height="15.0" fill="rgb(252,143,10)" rx="2" ry="2" />
<text  x="59.63" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="157.5" y="581" width="0.2" height="15.0" fill="rgb(221,25,41)" rx="2" ry="2" />
<text  x="160.47" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="628.7" y="597" width="0.4" height="15.0" fill="rgb(239,48,45)" rx="2" ry="2" />
<text  x="631.67" y="607.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (1 samples, 0.02%)</title><rect x="510.4" y="421" width="0.2" height="15.0" fill="rgb(222,178,6)" rx="2" ry="2" />
<text  x="513.42" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="608.8" y="565" width="0.2" height="15.0" fill="rgb(208,135,20)" rx="2" ry="2" />
<text  x="611.81" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (102 samples, 1.93%)</title><rect x="806.5" y="453" width="22.7" height="15.0" fill="rgb(254,184,10)" rx="2" ry="2" />
<text  x="809.48" y="463.5" >s..</text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.8" y="597" width="0.2" height="15.0" fill="rgb(228,21,19)" rx="2" ry="2" />
<text  x="20.81" y="607.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (14 samples, 0.26%)</title><rect x="429.0" y="405" width="3.1" height="15.0" fill="rgb(228,179,30)" rx="2" ry="2" />
<text  x="431.99" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="710.8" y="613" width="0.2" height="15.0" fill="rgb(251,27,37)" rx="2" ry="2" />
<text  x="713.77" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="140.1" y="325" width="0.2" height="15.0" fill="rgb(246,67,54)" rx="2" ry="2" />
<text  x="143.07" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="928.5" y="485" width="0.7" height="15.0" fill="rgb(214,94,8)" rx="2" ry="2" />
<text  x="931.52" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (269 samples, 5.09%)</title><rect x="20.9" y="661" width="60.0" height="15.0" fill="rgb(207,130,40)" rx="2" ry="2" />
<text  x="23.93" y="671.5" >cql3::..</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="629" width="9.2" height="15.0" fill="rgb(225,123,27)" rx="2" ry="2" />
<text  x="1118.71" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flush_accounter::operator (1 samples, 0.02%)</title><rect x="82.7" y="501" width="0.3" height="15.0" fill="rgb(239,159,4)" rx="2" ry="2" />
<text  x="85.73" y="511.5" ></text>
</g>
<g >
<title>row::compact_and_expire (2 samples, 0.04%)</title><rect x="701.2" y="453" width="0.4" height="15.0" fill="rgb(222,135,11)" rx="2" ry="2" />
<text  x="704.18" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="697.2" y="597" width="0.2" height="15.0" fill="rgb(205,19,11)" rx="2" ry="2" />
<text  x="700.16" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="291.6" y="421" width="0.2" height="15.0" fill="rgb(250,113,54)" rx="2" ry="2" />
<text  x="294.56" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="665.3" y="533" width="0.2" height="15.0" fill="rgb(253,6,51)" rx="2" ry="2" />
<text  x="668.26" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (12 samples, 0.23%)</title><rect x="817.4" y="293" width="2.7" height="15.0" fill="rgb(247,200,12)" rx="2" ry="2" />
<text  x="820.42" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="630.5" y="581" width="0.2" height="15.0" fill="rgb(217,192,49)" rx="2" ry="2" />
<text  x="633.45" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="826.3" y="373" width="0.5" height="15.0" fill="rgb(212,154,27)" rx="2" ry="2" />
<text  x="829.34" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.0" y="693" width="0.3" height="15.0" fill="rgb(243,159,51)" rx="2" ry="2" />
<text  x="21.03" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="60.4" y="277" width="0.2" height="15.0" fill="rgb(242,103,23)" rx="2" ry="2" />
<text  x="63.42" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="513.3" y="469" width="0.9" height="15.0" fill="rgb(231,9,36)" rx="2" ry="2" />
<text  x="516.32" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.11%)</title><rect x="1157.4" y="645" width="1.4" height="15.0" fill="rgb(214,201,2)" rx="2" ry="2" />
<text  x="1160.43" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="295.4" y="437" width="0.8" height="15.0" fill="rgb(253,91,40)" rx="2" ry="2" />
<text  x="298.35" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="261.4" y="341" width="0.3" height="15.0" fill="rgb(248,116,16)" rx="2" ry="2" />
<text  x="264.44" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="1046.1" y="437" width="0.9" height="15.0" fill="rgb(238,101,20)" rx="2" ry="2" />
<text  x="1049.10" y="447.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,311 samples, 24.79%)</title><rect x="162.2" y="581" width="292.4" height="15.0" fill="rgb(252,118,33)" rx="2" ry="2" />
<text  x="165.16" y="591.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="825.4" y="405" width="0.3" height="15.0" fill="rgb(250,226,5)" rx="2" ry="2" />
<text  x="828.45" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="63.5" y="453" width="0.3" height="15.0" fill="rgb(229,75,12)" rx="2" ry="2" />
<text  x="66.55" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="62.7" y="421" width="0.2" height="15.0" fill="rgb(207,104,14)" rx="2" ry="2" />
<text  x="65.65" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (40 samples, 0.76%)</title><rect x="758.3" y="549" width="8.9" height="15.0" fill="rgb(229,97,39)" rx="2" ry="2" />
<text  x="761.29" y="559.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="856.9" y="517" width="0.2" height="15.0" fill="rgb(236,204,10)" rx="2" ry="2" />
<text  x="859.90" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(211,136,7)" rx="2" ry="2" />
<text  x="13.67" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="33.6" y="421" width="0.3" height="15.0" fill="rgb(215,59,18)" rx="2" ry="2" />
<text  x="36.65" y="431.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="702.1" y="581" width="0.2" height="15.0" fill="rgb(215,44,36)" rx="2" ry="2" />
<text  x="705.07" y="591.5" ></text>
</g>
<g >
<title>[unknown] (20 samples, 0.38%)</title><rect x="11.6" y="757" width="4.4" height="15.0" fill="rgb(235,79,1)" rx="2" ry="2" />
<text  x="14.56" y="767.5" ></text>
</g>
<g >
<title>query_mutation (1 samples, 0.02%)</title><rect x="109.1" y="469" width="0.2" height="15.0" fill="rgb(250,88,18)" rx="2" ry="2" />
<text  x="112.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="58.0" y="373" width="0.2" height="15.0" fill="rgb(216,182,8)" rx="2" ry="2" />
<text  x="60.97" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="833.3" y="453" width="0.2" height="15.0" fill="rgb(212,229,38)" rx="2" ry="2" />
<text  x="836.26" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(223,161,19)" rx="2" ry="2" />
<text  x="13.67" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="185.8" y="389" width="0.5" height="15.0" fill="rgb(250,138,17)" rx="2" ry="2" />
<text  x="188.81" y="399.5" ></text>
</g>
<g >
<title>schema::get_column_definition (2 samples, 0.04%)</title><rect x="75.8" y="581" width="0.5" height="15.0" fill="rgb(241,27,50)" rx="2" ry="2" />
<text  x="78.82" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="822.8" y="357" width="0.2" height="15.0" fill="rgb(253,189,36)" rx="2" ry="2" />
<text  x="825.77" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="741.3" y="613" width="0.5" height="15.0" fill="rgb(228,170,17)" rx="2" ry="2" />
<text  x="744.34" y="623.5" ></text>
</g>
<g >
<title>database::query (15 samples, 0.28%)</title><rect x="105.3" y="661" width="3.3" height="15.0" fill="rgb(208,140,15)" rx="2" ry="2" />
<text  x="108.27" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="1098.8" y="549" width="0.4" height="15.0" fill="rgb(205,28,32)" rx="2" ry="2" />
<text  x="1101.75" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="47.7" y="469" width="0.2" height="15.0" fill="rgb(224,99,53)" rx="2" ry="2" />
<text  x="50.70" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.09%)</title><rect x="844.0" y="453" width="1.1" height="15.0" fill="rgb(245,75,26)" rx="2" ry="2" />
<text  x="846.96" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="55.1" y="405" width="0.2" height="15.0" fill="rgb(207,68,39)" rx="2" ry="2" />
<text  x="58.07" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="63.1" y="341" width="0.2" height="15.0" fill="rgb(246,61,1)" rx="2" ry="2" />
<text  x="66.10" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="543.2" y="485" width="0.5" height="15.0" fill="rgb(235,47,0)" rx="2" ry="2" />
<text  x="546.22" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (16 samples, 0.30%)</title><rect x="480.5" y="437" width="3.6" height="15.0" fill="rgb(207,220,43)" rx="2" ry="2" />
<text  x="483.53" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.15%)</title><rect x="937.0" y="549" width="1.8" height="15.0" fill="rgb(237,115,19)" rx="2" ry="2" />
<text  x="940.00" y="559.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (1 samples, 0.02%)</title><rect x="1024.2" y="405" width="0.3" height="15.0" fill="rgb(213,68,49)" rx="2" ry="2" />
<text  x="1027.23" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (148 samples, 2.80%)</title><rect x="571.6" y="565" width="33.0" height="15.0" fill="rgb(236,224,1)" rx="2" ry="2" />
<text  x="574.55" y="575.5" >fl..</text>
</g>
<g >
<title>appending_hash&lt;mutation&gt;::operator (1 samples, 0.02%)</title><rect x="109.5" y="581" width="0.2" height="15.0" fill="rgb(213,107,31)" rx="2" ry="2" />
<text  x="112.50" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="682.2" y="629" width="0.2" height="15.0" fill="rgb(209,105,33)" rx="2" ry="2" />
<text  x="685.21" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="813.6" y="357" width="0.2" height="15.0" fill="rgb(253,160,7)" rx="2" ry="2" />
<text  x="816.62" y="367.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="878.5" y="437" width="0.3" height="15.0" fill="rgb(254,116,31)" rx="2" ry="2" />
<text  x="881.55" y="447.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%)</title><rect x="87.6" y="677" width="0.3" height="15.0" fill="rgb(236,134,44)" rx="2" ry="2" />
<text  x="90.64" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="57.5" y="245" width="0.5" height="15.0" fill="rgb(253,222,27)" rx="2" ry="2" />
<text  x="60.52" y="255.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (44 samples, 0.83%)</title><rect x="853.8" y="597" width="9.8" height="15.0" fill="rgb(242,15,40)" rx="2" ry="2" />
<text  x="856.78" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="764.5" y="469" width="0.3" height="15.0" fill="rgb(225,211,0)" rx="2" ry="2" />
<text  x="767.54" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="52.2" y="357" width="0.2" height="15.0" fill="rgb(240,222,28)" rx="2" ry="2" />
<text  x="55.17" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, cql3::expr::expression*&gt; (1 samples, 0.02%)</title><rect x="74.9" y="517" width="0.2" height="15.0" fill="rgb(224,47,32)" rx="2" ry="2" />
<text  x="77.92" y="527.5" ></text>
</g>
<g >
<title>db::rp_handle::operator= (1 samples, 0.02%)</title><rect x="1124.2" y="421" width="0.2" height="15.0" fill="rgb(235,5,42)" rx="2" ry="2" />
<text  x="1127.18" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="701.8" y="565" width="0.3" height="15.0" fill="rgb(245,175,29)" rx="2" ry="2" />
<text  x="704.85" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.09%)</title><rect x="838.2" y="549" width="1.1" height="15.0" fill="rgb(242,46,15)" rx="2" ry="2" />
<text  x="841.16" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="590.3" y="533" width="0.4" height="15.0" fill="rgb(233,97,45)" rx="2" ry="2" />
<text  x="593.29" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="57.5" y="309" width="0.5" height="15.0" fill="rgb(215,84,6)" rx="2" ry="2" />
<text  x="60.52" y="319.5" ></text>
</g>
<g >
<title>partition_key::partition_key (1 samples, 0.02%)</title><rect x="1118.4" y="389" width="0.2" height="15.0" fill="rgb(212,128,31)" rx="2" ry="2" />
<text  x="1121.38" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="862.5" y="517" width="0.2" height="15.0" fill="rgb(221,81,28)" rx="2" ry="2" />
<text  x="865.48" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="892.6" y="581" width="0.2" height="15.0" fill="rgb(250,121,4)" rx="2" ry="2" />
<text  x="895.60" y="591.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (3 samples, 0.06%)</title><rect x="1117.3" y="325" width="0.6" height="15.0" fill="rgb(247,154,0)" rx="2" ry="2" />
<text  x="1120.27" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(224,24,4)" rx="2" ry="2" />
<text  x="13.67" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (8 samples, 0.15%)</title><rect x="1106.1" y="565" width="1.8" height="15.0" fill="rgb(212,32,25)" rx="2" ry="2" />
<text  x="1109.11" y="575.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (2 samples, 0.04%)</title><rect x="1019.1" y="325" width="0.4" height="15.0" fill="rgb(239,1,24)" rx="2" ry="2" />
<text  x="1022.10" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.6" y="213" width="0.3" height="15.0" fill="rgb(233,118,19)" rx="2" ry="2" />
<text  x="59.63" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="196.7" y="405" width="0.5" height="15.0" fill="rgb(206,184,3)" rx="2" ry="2" />
<text  x="199.74" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="468.5" y="405" width="0.4" height="15.0" fill="rgb(235,153,17)" rx="2" ry="2" />
<text  x="471.48" y="415.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="110.8" y="629" width="0.3" height="15.0" fill="rgb(231,111,15)" rx="2" ry="2" />
<text  x="113.84" y="639.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="329.7" y="453" width="0.2" height="15.0" fill="rgb(223,97,54)" rx="2" ry="2" />
<text  x="332.71" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="1045.7" y="453" width="1.3" height="15.0" fill="rgb(238,77,10)" rx="2" ry="2" />
<text  x="1048.65" y="463.5" ></text>
</g>
<g >
<title>row_tombstone::apply (3 samples, 0.06%)</title><rect x="427.2" y="373" width="0.7" height="15.0" fill="rgb(212,17,16)" rx="2" ry="2" />
<text  x="430.21" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="41.9" y="405" width="0.9" height="15.0" fill="rgb(237,46,46)" rx="2" ry="2" />
<text  x="44.90" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="831.0" y="469" width="0.7" height="15.0" fill="rgb(208,152,46)" rx="2" ry="2" />
<text  x="834.02" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="950.2" y="485" width="0.6" height="15.0" fill="rgb(229,93,37)" rx="2" ry="2" />
<text  x="953.16" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="450.9" y="517" width="0.2" height="15.0" fill="rgb(211,100,32)" rx="2" ry="2" />
<text  x="453.85" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.1" y="485" width="0.2" height="15.0" fill="rgb(206,68,5)" rx="2" ry="2" />
<text  x="705.07" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (77 samples, 1.46%)</title><rect x="572.9" y="533" width="17.2" height="15.0" fill="rgb(206,98,31)" rx="2" ry="2" />
<text  x="575.89" y="543.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (2 samples, 0.04%)</title><rect x="948.8" y="549" width="0.5" height="15.0" fill="rgb(237,51,52)" rx="2" ry="2" />
<text  x="951.82" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (46 samples, 0.87%)</title><rect x="126.2" y="597" width="10.3" height="15.0" fill="rgb(243,141,14)" rx="2" ry="2" />
<text  x="129.24" y="607.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1014.4" y="341" width="0.5" height="15.0" fill="rgb(216,75,18)" rx="2" ry="2" />
<text  x="1017.42" y="351.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.2" y="725" width="0.3" height="15.0" fill="rgb(211,79,35)" rx="2" ry="2" />
<text  x="19.25" y="735.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (17 samples, 0.32%)</title><rect x="129.8" y="565" width="3.8" height="15.0" fill="rgb(250,171,5)" rx="2" ry="2" />
<text  x="132.81" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="825.0" y="405" width="0.4" height="15.0" fill="rgb(236,92,50)" rx="2" ry="2" />
<text  x="828.00" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="331.3" y="421" width="0.6" height="15.0" fill="rgb(244,147,40)" rx="2" ry="2" />
<text  x="334.27" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="729.5" y="629" width="0.2" height="15.0" fill="rgb(239,215,21)" rx="2" ry="2" />
<text  x="732.51" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (53 samples, 1.00%)</title><rect x="577.8" y="485" width="11.8" height="15.0" fill="rgb(250,92,45)" rx="2" ry="2" />
<text  x="580.80" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="40.1" y="469" width="0.2" height="15.0" fill="rgb(223,110,28)" rx="2" ry="2" />
<text  x="43.12" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="443.7" y="389" width="0.5" height="15.0" fill="rgb(205,182,27)" rx="2" ry="2" />
<text  x="446.72" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="701.0" y="597" width="0.8" height="15.0" fill="rgb(208,88,44)" rx="2" ry="2" />
<text  x="703.95" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (1 samples, 0.02%)</title><rect x="1125.5" y="485" width="0.2" height="15.0" fill="rgb(208,92,7)" rx="2" ry="2" />
<text  x="1128.52" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="17.4" y="565" width="0.2" height="15.0" fill="rgb(250,19,41)" rx="2" ry="2" />
<text  x="20.36" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_aligned (1 samples, 0.02%)</title><rect x="81.8" y="757" width="0.3" height="15.0" fill="rgb(210,80,5)" rx="2" ry="2" />
<text  x="84.84" y="767.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (20 samples, 0.38%)</title><rect x="11.6" y="773" width="4.4" height="15.0" fill="rgb(245,10,8)" rx="2" ry="2" />
<text  x="14.56" y="783.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (9 samples, 0.17%)</title><rect x="949.5" y="549" width="2.0" height="15.0" fill="rgb(233,7,52)" rx="2" ry="2" />
<text  x="952.49" y="559.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%)</title><rect x="1126.0" y="357" width="0.2" height="15.0" fill="rgb(235,46,24)" rx="2" ry="2" />
<text  x="1128.97" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1092.3" y="501" width="0.2" height="15.0" fill="rgb(211,111,47)" rx="2" ry="2" />
<text  x="1095.28" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="570.9" y="581" width="0.4" height="15.0" fill="rgb(217,192,22)" rx="2" ry="2" />
<text  x="573.88" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="10.7" y="341" width="0.2" height="15.0" fill="rgb(230,109,40)" rx="2" ry="2" />
<text  x="13.67" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (6 samples, 0.11%)</title><rect x="1164.8" y="645" width="1.3" height="15.0" fill="rgb(238,108,48)" rx="2" ry="2" />
<text  x="1167.79" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="1166.6" y="629" width="0.2" height="15.0" fill="rgb(241,17,16)" rx="2" ry="2" />
<text  x="1169.57" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="759.4" y="469" width="0.2" height="15.0" fill="rgb(227,198,41)" rx="2" ry="2" />
<text  x="762.41" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="321.7" y="517" width="0.2" height="15.0" fill="rgb(220,176,39)" rx="2" ry="2" />
<text  x="324.68" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%)</title><rect x="762.8" y="485" width="1.5" height="15.0" fill="rgb(244,6,29)" rx="2" ry="2" />
<text  x="765.75" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (20 samples, 0.38%)</title><rect x="1068.9" y="437" width="4.4" height="15.0" fill="rgb(226,40,7)" rx="2" ry="2" />
<text  x="1071.85" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="44.1" y="469" width="0.3" height="15.0" fill="rgb(239,39,39)" rx="2" ry="2" />
<text  x="47.13" y="479.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="995.0" y="453" width="0.7" height="15.0" fill="rgb(246,118,40)" rx="2" ry="2" />
<text  x="998.01" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="451.5" y="517" width="0.9" height="15.0" fill="rgb(248,17,36)" rx="2" ry="2" />
<text  x="454.52" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="93.7" y="645" width="0.4" height="15.0" fill="rgb(243,120,3)" rx="2" ry="2" />
<text  x="96.66" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mD (1 samples, 0.02%)</title><rect x="33.4" y="405" width="0.2" height="15.0" fill="rgb(245,91,4)" rx="2" ry="2" />
<text  x="36.43" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="60.4" y="261" width="0.2" height="15.0" fill="rgb(236,81,45)" rx="2" ry="2" />
<text  x="63.42" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="518.5" y="453" width="0.4" height="15.0" fill="rgb(237,133,34)" rx="2" ry="2" />
<text  x="521.46" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (397 samples, 7.51%)</title><rect x="340.4" y="405" width="88.6" height="15.0" fill="rgb(230,141,0)" rx="2" ry="2" />
<text  x="343.42" y="415.5" >flat_mutat..</text>
</g>
<g >
<title>make_multishard_combining_reader (1 samples, 0.02%)</title><rect x="109.3" y="389" width="0.2" height="15.0" fill="rgb(234,23,48)" rx="2" ry="2" />
<text  x="112.28" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%)</title><rect x="33.2" y="421" width="0.2" height="15.0" fill="rgb(216,79,54)" rx="2" ry="2" />
<text  x="36.20" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="628.4" y="597" width="0.3" height="15.0" fill="rgb(209,45,33)" rx="2" ry="2" />
<text  x="631.45" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="856.2" y="533" width="0.3" height="15.0" fill="rgb(233,76,27)" rx="2" ry="2" />
<text  x="859.24" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1054.1" y="469" width="0.3" height="15.0" fill="rgb(249,136,19)" rx="2" ry="2" />
<text  x="1057.13" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="81.6" y="485" width="0.2" height="15.0" fill="rgb(231,88,36)" rx="2" ry="2" />
<text  x="84.62" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1082.7" y="533" width="0.2" height="15.0" fill="rgb(226,13,41)" rx="2" ry="2" />
<text  x="1085.69" y="543.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="109.3" y="437" width="0.2" height="15.0" fill="rgb(210,147,46)" rx="2" ry="2" />
<text  x="112.28" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="447.5" y="421" width="0.7" height="15.0" fill="rgb(229,221,16)" rx="2" ry="2" />
<text  x="450.51" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="1084.2" y="549" width="0.5" height="15.0" fill="rgb(236,159,20)" rx="2" ry="2" />
<text  x="1087.25" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="702.7" y="629" width="0.3" height="15.0" fill="rgb(240,155,52)" rx="2" ry="2" />
<text  x="705.74" y="639.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (453 samples, 8.56%)</title><rect x="190.9" y="453" width="101.1" height="15.0" fill="rgb(209,2,46)" rx="2" ry="2" />
<text  x="193.94" y="463.5" >seastar::do_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%)</title><rect x="226.0" y="261" width="2.4" height="15.0" fill="rgb(216,174,25)" rx="2" ry="2" />
<text  x="228.97" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (10 samples, 0.19%)</title><rect x="654.3" y="661" width="2.3" height="15.0" fill="rgb(219,46,19)" rx="2" ry="2" />
<text  x="657.33" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="44.6" y="405" width="0.2" height="15.0" fill="rgb(206,214,45)" rx="2" ry="2" />
<text  x="47.58" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (255 samples, 4.82%)</title><rect x="21.4" y="645" width="56.9" height="15.0" fill="rgb(215,102,15)" rx="2" ry="2" />
<text  x="24.38" y="655.5" >cql3::..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1160.1" y="597" width="0.2" height="15.0" fill="rgb(238,165,49)" rx="2" ry="2" />
<text  x="1163.10" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="105.5" y="645" width="0.4" height="15.0" fill="rgb(237,150,34)" rx="2" ry="2" />
<text  x="108.49" y="655.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (42 samples, 0.79%)</title><rect x="1115.5" y="645" width="9.4" height="15.0" fill="rgb(254,83,16)" rx="2" ry="2" />
<text  x="1118.48" y="655.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="926.5" y="533" width="0.2" height="15.0" fill="rgb(247,228,35)" rx="2" ry="2" />
<text  x="929.51" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="139.4" y="613" width="0.2" height="15.0" fill="rgb(249,154,1)" rx="2" ry="2" />
<text  x="142.40" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="648.3" y="645" width="0.7" height="15.0" fill="rgb(207,151,51)" rx="2" ry="2" />
<text  x="651.30" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (2 samples, 0.04%)</title><rect x="878.8" y="421" width="0.4" height="15.0" fill="rgb(229,204,16)" rx="2" ry="2" />
<text  x="881.77" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (2 samples, 0.04%)</title><rect x="574.5" y="485" width="0.4" height="15.0" fill="rgb(237,68,41)" rx="2" ry="2" />
<text  x="577.45" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="628.0" y="597" width="0.2" height="15.0" fill="rgb(235,18,38)" rx="2" ry="2" />
<text  x="631.00" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%)</title><rect x="354.0" y="373" width="0.3" height="15.0" fill="rgb(230,60,49)" rx="2" ry="2" />
<text  x="357.03" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="330.2" y="453" width="2.0" height="15.0" fill="rgb(205,131,30)" rx="2" ry="2" />
<text  x="333.16" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%)</title><rect x="585.2" y="437" width="0.2" height="15.0" fill="rgb(245,65,37)" rx="2" ry="2" />
<text  x="588.16" y="447.5" ></text>
</g>
<g >
<title>deserialize_value&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="453" width="0.2" height="15.0" fill="rgb(246,90,23)" rx="2" ry="2" />
<text  x="649.07" y="463.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="43.7" y="485" width="0.2" height="15.0" fill="rgb(239,210,50)" rx="2" ry="2" />
<text  x="46.69" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="645" width="0.2" height="15.0" fill="rgb(242,66,31)" rx="2" ry="2" />
<text  x="13.67" y="655.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="603.9" y="549" width="0.5" height="15.0" fill="rgb(245,175,42)" rx="2" ry="2" />
<text  x="606.90" y="559.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.7" y="709" width="0.2" height="15.0" fill="rgb(246,76,1)" rx="2" ry="2" />
<text  x="19.69" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%)</title><rect x="873.6" y="645" width="0.5" height="15.0" fill="rgb(209,80,35)" rx="2" ry="2" />
<text  x="876.64" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="839.1" y="501" width="0.2" height="15.0" fill="rgb(215,221,18)" rx="2" ry="2" />
<text  x="842.06" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="517" width="0.2" height="15.0" fill="rgb(210,46,43)" rx="2" ry="2" />
<text  x="1166.67" y="527.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%)</title><rect x="1130.2" y="261" width="0.2" height="15.0" fill="rgb(233,191,32)" rx="2" ry="2" />
<text  x="1133.21" y="271.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="932.1" y="565" width="1.6" height="15.0" fill="rgb(221,114,41)" rx="2" ry="2" />
<text  x="935.09" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (229 samples, 4.33%)</title><rect x="211.2" y="373" width="51.1" height="15.0" fill="rgb(252,168,22)" rx="2" ry="2" />
<text  x="214.24" y="383.5" >logal..</text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="47.9" y="485" width="0.3" height="15.0" fill="rgb(233,197,40)" rx="2" ry="2" />
<text  x="50.93" y="495.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (24 samples, 0.45%)</title><rect x="233.8" y="229" width="5.3" height="15.0" fill="rgb(252,195,9)" rx="2" ry="2" />
<text  x="236.77" y="239.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (9 samples, 0.17%)</title><rect x="394.4" y="309" width="2.0" height="15.0" fill="rgb(229,158,49)" rx="2" ry="2" />
<text  x="397.41" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1102.1" y="565" width="0.2" height="15.0" fill="rgb(235,209,51)" rx="2" ry="2" />
<text  x="1105.10" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (585 samples, 11.06%)</title><rect x="954.2" y="565" width="130.5" height="15.0" fill="rgb(213,22,31)" rx="2" ry="2" />
<text  x="957.18" y="575.5" >service::storage..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="628.0" y="581" width="0.2" height="15.0" fill="rgb(222,188,9)" rx="2" ry="2" />
<text  x="631.00" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="680.7" y="597" width="0.2" height="15.0" fill="rgb(224,63,3)" rx="2" ry="2" />
<text  x="683.65" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1148.5" y="517" width="0.4" height="15.0" fill="rgb(213,41,2)" rx="2" ry="2" />
<text  x="1151.50" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="192.3" y="405" width="0.2" height="15.0" fill="rgb(209,150,21)" rx="2" ry="2" />
<text  x="195.28" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="1157.9" y="613" width="0.4" height="15.0" fill="rgb(206,56,40)" rx="2" ry="2" />
<text  x="1160.87" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="698.3" y="629" width="0.2" height="15.0" fill="rgb(208,25,2)" rx="2" ry="2" />
<text  x="701.28" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="627.3" y="597" width="0.3" height="15.0" fill="rgb(238,17,19)" rx="2" ry="2" />
<text  x="630.33" y="607.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1178.8" y="789" width="0.3" height="15.0" fill="rgb(213,69,49)" rx="2" ry="2" />
<text  x="1181.84" y="799.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1032.0" y="405" width="2.0" height="15.0" fill="rgb(253,58,26)" rx="2" ry="2" />
<text  x="1035.04" y="415.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="72.0" y="517" width="0.2" height="15.0" fill="rgb(222,148,38)" rx="2" ry="2" />
<text  x="75.02" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="869.4" y="565" width="0.2" height="15.0" fill="rgb(244,206,1)" rx="2" ry="2" />
<text  x="872.40" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::has_supporting_index (1 samples, 0.02%)</title><rect x="73.1" y="549" width="0.3" height="15.0" fill="rgb(214,44,0)" rx="2" ry="2" />
<text  x="76.14" y="559.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="656.6" y="581" width="0.2" height="15.0" fill="rgb(234,115,0)" rx="2" ry="2" />
<text  x="659.56" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="98.1" y="581" width="0.2" height="15.0" fill="rgb(222,178,13)" rx="2" ry="2" />
<text  x="101.13" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%)</title><rect x="254.3" y="325" width="0.9" height="15.0" fill="rgb(245,177,45)" rx="2" ry="2" />
<text  x="257.30" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="887.2" y="629" width="0.5" height="15.0" fill="rgb(214,25,26)" rx="2" ry="2" />
<text  x="890.25" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,008 samples, 19.06%)</title><rect x="889.5" y="597" width="224.9" height="15.0" fill="rgb(253,170,21)" rx="2" ry="2" />
<text  x="892.48" y="607.5" >cql3::statements::select_stat..</text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (13 samples, 0.25%)</title><rect x="878.5" y="549" width="2.9" height="15.0" fill="rgb(208,56,21)" rx="2" ry="2" />
<text  x="881.55" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="649.4" y="645" width="0.2" height="15.0" fill="rgb(224,190,33)" rx="2" ry="2" />
<text  x="652.42" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (4 samples, 0.08%)</title><rect x="272.8" y="405" width="0.9" height="15.0" fill="rgb(208,8,3)" rx="2" ry="2" />
<text  x="275.82" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%)</title><rect x="875.6" y="645" width="0.7" height="15.0" fill="rgb(230,72,42)" rx="2" ry="2" />
<text  x="878.65" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl_nrvo&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="301.4" y="469" width="0.2" height="15.0" fill="rgb(250,4,45)" rx="2" ry="2" />
<text  x="304.37" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (8 samples, 0.15%)</title><rect x="30.7" y="405" width="1.8" height="15.0" fill="rgb(219,216,14)" rx="2" ry="2" />
<text  x="33.75" y="415.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="17.8" y="677" width="0.2" height="15.0" fill="rgb(225,19,7)" rx="2" ry="2" />
<text  x="20.81" y="687.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.4" y="645" width="0.2" height="15.0" fill="rgb(248,161,11)" rx="2" ry="2" />
<text  x="88.41" y="655.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (13 samples, 0.25%)</title><rect x="1127.8" y="341" width="2.9" height="15.0" fill="rgb(209,11,30)" rx="2" ry="2" />
<text  x="1130.75" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="62.0" y="437" width="0.2" height="15.0" fill="rgb(254,25,30)" rx="2" ry="2" />
<text  x="64.98" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="728.8" y="421" width="0.3" height="15.0" fill="rgb(222,59,26)" rx="2" ry="2" />
<text  x="731.84" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="323.0" y="549" width="0.2" height="15.0" fill="rgb(210,40,10)" rx="2" ry="2" />
<text  x="326.02" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="453" width="0.2" height="15.0" fill="rgb(245,148,54)" rx="2" ry="2" />
<text  x="13.67" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.6" y="405" width="0.3" height="15.0" fill="rgb(238,203,25)" rx="2" ry="2" />
<text  x="63.64" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="445.1" y="437" width="0.2" height="15.0" fill="rgb(242,177,10)" rx="2" ry="2" />
<text  x="448.05" y="447.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="617.1" y="565" width="0.2" height="15.0" fill="rgb(211,193,9)" rx="2" ry="2" />
<text  x="620.07" y="575.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%)</title><rect x="467.8" y="437" width="0.2" height="15.0" fill="rgb(205,45,11)" rx="2" ry="2" />
<text  x="470.81" y="447.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="110.8" y="661" width="0.3" height="15.0" fill="rgb(222,91,11)" rx="2" ry="2" />
<text  x="113.84" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="1029.6" y="405" width="0.7" height="15.0" fill="rgb(246,55,30)" rx="2" ry="2" />
<text  x="1032.59" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="988.5" y="485" width="0.3" height="15.0" fill="rgb(248,142,16)" rx="2" ry="2" />
<text  x="991.54" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="452.4" y="533" width="0.5" height="15.0" fill="rgb(219,45,4)" rx="2" ry="2" />
<text  x="455.42" y="543.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="875.6" y="581" width="0.7" height="15.0" fill="rgb(206,110,47)" rx="2" ry="2" />
<text  x="878.65" y="591.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="470.3" y="405" width="1.5" height="15.0" fill="rgb(206,130,24)" rx="2" ry="2" />
<text  x="473.26" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="977.6" y="517" width="0.2" height="15.0" fill="rgb(235,80,40)" rx="2" ry="2" />
<text  x="980.60" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="912.7" y="517" width="0.2" height="15.0" fill="rgb(234,61,30)" rx="2" ry="2" />
<text  x="915.68" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1082.9" y="533" width="0.7" height="15.0" fill="rgb(207,23,44)" rx="2" ry="2" />
<text  x="1085.91" y="543.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="711.2" y="597" width="0.5" height="15.0" fill="rgb(206,93,40)" rx="2" ry="2" />
<text  x="714.22" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (91 samples, 1.72%)</title><rect x="406.7" y="357" width="20.3" height="15.0" fill="rgb(205,48,26)" rx="2" ry="2" />
<text  x="409.68" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.11%)</title><rect x="664.1" y="597" width="1.4" height="15.0" fill="rgb(216,3,51)" rx="2" ry="2" />
<text  x="667.14" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="650.5" y="629" width="0.3" height="15.0" fill="rgb(252,92,32)" rx="2" ry="2" />
<text  x="653.53" y="639.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="109.7" y="533" width="0.3" height="15.0" fill="rgb(238,114,36)" rx="2" ry="2" />
<text  x="112.73" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="109.3" y="629" width="0.4" height="15.0" fill="rgb(243,211,22)" rx="2" ry="2" />
<text  x="112.28" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="723.9" y="565" width="0.5" height="15.0" fill="rgb(209,188,9)" rx="2" ry="2" />
<text  x="726.93" y="575.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%)</title><rect x="28.1" y="437" width="0.2" height="15.0" fill="rgb(213,5,41)" rx="2" ry="2" />
<text  x="31.07" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%)</title><rect x="339.5" y="357" width="0.2" height="15.0" fill="rgb(232,179,37)" rx="2" ry="2" />
<text  x="342.53" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="212.8" y="357" width="0.2" height="15.0" fill="rgb(207,168,22)" rx="2" ry="2" />
<text  x="215.80" y="367.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.13%)</title><rect x="845.7" y="517" width="1.6" height="15.0" fill="rgb(221,49,17)" rx="2" ry="2" />
<text  x="848.75" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="45.9" y="469" width="0.5" height="15.0" fill="rgb(222,210,6)" rx="2" ry="2" />
<text  x="48.92" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="387.7" y="309" width="0.2" height="15.0" fill="rgb(212,91,7)" rx="2" ry="2" />
<text  x="390.72" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="833.3" y="437" width="0.2" height="15.0" fill="rgb(249,86,8)" rx="2" ry="2" />
<text  x="836.26" y="447.5" ></text>
</g>
<g >
<title>schema_builder::with_column (1 samples, 0.02%)</title><rect x="17.8" y="421" width="0.2" height="15.0" fill="rgb(237,36,31)" rx="2" ry="2" />
<text  x="20.81" y="431.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.26%)</title><rect x="580.7" y="453" width="3.1" height="15.0" fill="rgb(219,194,51)" rx="2" ry="2" />
<text  x="583.70" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="36.3" y="421" width="0.2" height="15.0" fill="rgb(231,31,11)" rx="2" ry="2" />
<text  x="39.33" y="431.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (1 samples, 0.02%)</title><rect x="449.3" y="501" width="0.2" height="15.0" fill="rgb(209,31,22)" rx="2" ry="2" />
<text  x="452.29" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="627.8" y="597" width="0.2" height="15.0" fill="rgb(218,154,51)" rx="2" ry="2" />
<text  x="630.78" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="1125.7" y="469" width="2.1" height="15.0" fill="rgb(235,3,49)" rx="2" ry="2" />
<text  x="1128.75" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="46.8" y="437" width="0.2" height="15.0" fill="rgb(246,86,47)" rx="2" ry="2" />
<text  x="49.81" y="447.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;int&gt; &gt; (1 samples, 0.02%)</title><rect x="729.7" y="597" width="0.3" height="15.0" fill="rgb(242,8,5)" rx="2" ry="2" />
<text  x="732.74" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="718.6" y="629" width="0.2" height="15.0" fill="rgb(237,228,49)" rx="2" ry="2" />
<text  x="721.58" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="709" width="0.3" height="15.0" fill="rgb(212,145,1)" rx="2" ry="2" />
<text  x="21.03" y="719.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%)</title><rect x="79.8" y="597" width="0.9" height="15.0" fill="rgb(244,113,24)" rx="2" ry="2" />
<text  x="82.83" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%)</title><rect x="484.3" y="437" width="0.5" height="15.0" fill="rgb(250,136,7)" rx="2" ry="2" />
<text  x="487.32" y="447.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="140.1" y="373" width="0.2" height="15.0" fill="rgb(250,29,42)" rx="2" ry="2" />
<text  x="143.07" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="57.1" y="261" width="0.4" height="15.0" fill="rgb(224,48,50)" rx="2" ry="2" />
<text  x="60.08" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (3 samples, 0.06%)</title><rect x="912.0" y="485" width="0.7" height="15.0" fill="rgb(220,46,1)" rx="2" ry="2" />
<text  x="915.01" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1020.2" y="341" width="0.2" height="15.0" fill="rgb(231,167,7)" rx="2" ry="2" />
<text  x="1023.22" y="351.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="57.5" y="261" width="0.5" height="15.0" fill="rgb(217,100,8)" rx="2" ry="2" />
<text  x="60.52" y="271.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="29.2" y="421" width="0.9" height="15.0" fill="rgb(239,4,40)" rx="2" ry="2" />
<text  x="32.19" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::directory_entry_type, seastar::directory_entry_type, std::allocator&lt;seastar::directory_entry_type&gt;, std::__detail::_Identity, std::equal_to&lt;seastar::directory_entry_type&gt;, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="730.0" y="597" width="0.2" height="15.0" fill="rgb(223,180,51)" rx="2" ry="2" />
<text  x="732.96" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="630.5" y="597" width="0.2" height="15.0" fill="rgb(246,5,41)" rx="2" ry="2" />
<text  x="633.45" y="607.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="81.2" y="773" width="0.2" height="15.0" fill="rgb(233,32,53)" rx="2" ry="2" />
<text  x="84.17" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="61.3" y="277" width="0.2" height="15.0" fill="rgb(231,179,20)" rx="2" ry="2" />
<text  x="64.31" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (7 samples, 0.13%)</title><rect x="470.3" y="421" width="1.5" height="15.0" fill="rgb(247,196,37)" rx="2" ry="2" />
<text  x="473.26" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="716.8" y="645" width="0.2" height="15.0" fill="rgb(207,170,30)" rx="2" ry="2" />
<text  x="719.80" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="301.8" y="485" width="0.5" height="15.0" fill="rgb(211,93,49)" rx="2" ry="2" />
<text  x="304.82" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="875.9" y="373" width="0.2" height="15.0" fill="rgb(232,183,8)" rx="2" ry="2" />
<text  x="878.87" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1122.0" y="341" width="0.2" height="15.0" fill="rgb(233,155,47)" rx="2" ry="2" />
<text  x="1124.95" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="82.7" y="581" width="0.7" height="15.0" fill="rgb(208,65,2)" rx="2" ry="2" />
<text  x="85.73" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%)</title><rect x="553.3" y="437" width="2.2" height="15.0" fill="rgb(211,88,50)" rx="2" ry="2" />
<text  x="556.26" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="767.7" y="549" width="0.2" height="15.0" fill="rgb(243,103,54)" rx="2" ry="2" />
<text  x="770.66" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (1 samples, 0.02%)</title><rect x="557.1" y="485" width="0.2" height="15.0" fill="rgb(247,125,5)" rx="2" ry="2" />
<text  x="560.05" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (3 samples, 0.06%)</title><rect x="846.4" y="469" width="0.7" height="15.0" fill="rgb(248,124,43)" rx="2" ry="2" />
<text  x="849.42" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="42.1" y="373" width="0.7" height="15.0" fill="rgb(233,168,23)" rx="2" ry="2" />
<text  x="45.13" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%)</title><rect x="27.4" y="405" width="0.2" height="15.0" fill="rgb(208,146,17)" rx="2" ry="2" />
<text  x="30.40" y="415.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.11%)</title><rect x="1061.7" y="405" width="1.4" height="15.0" fill="rgb(242,183,37)" rx="2" ry="2" />
<text  x="1064.71" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="828.3" y="437" width="0.3" height="15.0" fill="rgb(206,8,24)" rx="2" ry="2" />
<text  x="831.35" y="447.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="788.6" y="533" width="0.9" height="15.0" fill="rgb(215,221,5)" rx="2" ry="2" />
<text  x="791.63" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="109.3" y="597" width="0.2" height="15.0" fill="rgb(220,77,46)" rx="2" ry="2" />
<text  x="112.28" y="607.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%)</title><rect x="1036.5" y="453" width="0.5" height="15.0" fill="rgb(205,34,22)" rx="2" ry="2" />
<text  x="1039.50" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="960.2" y="485" width="0.2" height="15.0" fill="rgb(207,106,38)" rx="2" ry="2" />
<text  x="963.20" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (62 samples, 1.17%)</title><rect x="809.6" y="389" width="13.8" height="15.0" fill="rgb(236,150,35)" rx="2" ry="2" />
<text  x="812.61" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="877.9" y="485" width="0.2" height="15.0" fill="rgb(247,32,23)" rx="2" ry="2" />
<text  x="880.88" y="495.5" ></text>
</g>
<g >
<title>abstract_type::deserialize_impl&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%)</title><rect x="646.1" y="533" width="0.2" height="15.0" fill="rgb(212,224,17)" rx="2" ry="2" />
<text  x="649.07" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_expression (7 samples, 0.13%)</title><rect x="69.8" y="565" width="1.6" height="15.0" fill="rgb(243,42,1)" rx="2" ry="2" />
<text  x="72.79" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%)</title><rect x="317.0" y="437" width="0.7" height="15.0" fill="rgb(253,16,45)" rx="2" ry="2" />
<text  x="319.99" y="447.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.11%)</title><rect x="840.4" y="501" width="1.3" height="15.0" fill="rgb(228,99,23)" rx="2" ry="2" />
<text  x="843.40" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="509.3" y="341" width="0.5" height="15.0" fill="rgb(246,72,13)" rx="2" ry="2" />
<text  x="512.31" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="47.3" y="309" width="0.2" height="15.0" fill="rgb(219,33,19)" rx="2" ry="2" />
<text  x="50.26" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%)</title><rect x="369.4" y="341" width="0.2" height="15.0" fill="rgb(236,76,52)" rx="2" ry="2" />
<text  x="372.42" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (585 samples, 11.06%)</title><rect x="323.7" y="565" width="130.5" height="15.0" fill="rgb(219,202,32)" rx="2" ry="2" />
<text  x="326.69" y="575.5" >seastar::future&lt;..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (52 samples, 0.98%)</title><rect x="524.3" y="405" width="11.6" height="15.0" fill="rgb(209,116,41)" rx="2" ry="2" />
<text  x="527.26" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="60.4" y="405" width="0.2" height="15.0" fill="rgb(248,96,47)" rx="2" ry="2" />
<text  x="63.42" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (35 samples, 0.66%)</title><rect x="466.7" y="469" width="7.8" height="15.0" fill="rgb(230,8,20)" rx="2" ry="2" />
<text  x="469.70" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%)</title><rect x="913.1" y="549" width="0.5" height="15.0" fill="rgb(250,120,44)" rx="2" ry="2" />
<text  x="916.13" y="559.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.5" y="389" width="0.3" height="15.0" fill="rgb(226,86,31)" rx="2" ry="2" />
<text  x="881.55" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="106.2" y="645" width="0.2" height="15.0" fill="rgb(253,146,34)" rx="2" ry="2" />
<text  x="109.16" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="44.4" y="261" width="0.2" height="15.0" fill="rgb(241,19,27)" rx="2" ry="2" />
<text  x="47.36" y="271.5" ></text>
</g>
<g >
<title>service::write_response_handler::waited_for (1 samples, 0.02%)</title><rect x="729.3" y="613" width="0.2" height="15.0" fill="rgb(216,222,5)" rx="2" ry="2" />
<text  x="732.29" y="623.5" ></text>
</g>
<g >
<title>seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="105.0" y="597" width="0.3" height="15.0" fill="rgb(216,18,32)" rx="2" ry="2" />
<text  x="108.04" y="607.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1121.5" y="341" width="0.2" height="15.0" fill="rgb(243,82,49)" rx="2" ry="2" />
<text  x="1124.51" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="53.5" y="421" width="0.2" height="15.0" fill="rgb(238,27,42)" rx="2" ry="2" />
<text  x="56.51" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="482.1" y="421" width="0.7" height="15.0" fill="rgb(232,8,52)" rx="2" ry="2" />
<text  x="485.09" y="431.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%)</title><rect x="108.8" y="517" width="0.5" height="15.0" fill="rgb(250,142,10)" rx="2" ry="2" />
<text  x="111.84" y="527.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="109.3" y="581" width="0.2" height="15.0" fill="rgb(250,168,34)" rx="2" ry="2" />
<text  x="112.28" y="591.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="855.3" y="501" width="0.5" height="15.0" fill="rgb(224,156,17)" rx="2" ry="2" />
<text  x="858.34" y="511.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (3 samples, 0.06%)</title><rect x="595.6" y="517" width="0.7" height="15.0" fill="rgb(216,131,32)" rx="2" ry="2" />
<text  x="598.65" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (41 samples, 0.78%)</title><rect x="1050.1" y="501" width="9.2" height="15.0" fill="rgb(219,125,17)" rx="2" ry="2" />
<text  x="1053.11" y="511.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%)</title><rect x="555.7" y="469" width="0.2" height="15.0" fill="rgb(245,58,6)" rx="2" ry="2" />
<text  x="558.71" y="479.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (4 samples, 0.08%)</title><rect x="872.7" y="629" width="0.9" height="15.0" fill="rgb(224,223,0)" rx="2" ry="2" />
<text  x="875.75" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="54.4" y="277" width="0.7" height="15.0" fill="rgb(243,110,7)" rx="2" ry="2" />
<text  x="57.40" y="287.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (24 samples, 0.45%)</title><rect x="720.6" y="613" width="5.3" height="15.0" fill="rgb(231,134,29)" rx="2" ry="2" />
<text  x="723.59" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="102.4" y="597" width="0.2" height="15.0" fill="rgb(215,45,43)" rx="2" ry="2" />
<text  x="105.37" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%)</title><rect x="829.7" y="453" width="1.3" height="15.0" fill="rgb(209,154,45)" rx="2" ry="2" />
<text  x="832.69" y="463.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (12 samples, 0.23%)</title><rect x="927.0" y="549" width="2.6" height="15.0" fill="rgb(230,51,23)" rx="2" ry="2" />
<text  x="929.96" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.09%)</title><rect x="680.2" y="613" width="1.1" height="15.0" fill="rgb(215,112,11)" rx="2" ry="2" />
<text  x="683.21" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (13 samples, 0.25%)</title><rect x="776.8" y="549" width="2.9" height="15.0" fill="rgb(251,30,51)" rx="2" ry="2" />
<text  x="779.81" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="56.6" y="277" width="0.3" height="15.0" fill="rgb(230,121,24)" rx="2" ry="2" />
<text  x="59.63" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="533.8" y="357" width="0.5" height="15.0" fill="rgb(223,47,30)" rx="2" ry="2" />
<text  x="536.85" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="568.2" y="549" width="0.2" height="15.0" fill="rgb(211,140,27)" rx="2" ry="2" />
<text  x="571.21" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (23 samples, 0.43%)</title><rect x="96.8" y="629" width="5.1" height="15.0" fill="rgb(235,218,49)" rx="2" ry="2" />
<text  x="99.79" y="639.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::qr_clustered_row_view, std::allocator&lt;ser::qr_clustered_row_view&gt; &gt; &gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="656.6" y="533" width="0.2" height="15.0" fill="rgb(241,68,4)" rx="2" ry="2" />
<text  x="659.56" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.32%)</title><rect x="506.0" y="373" width="3.8" height="15.0" fill="rgb(205,207,43)" rx="2" ry="2" />
<text  x="508.96" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%)</title><rect x="734.0" y="661" width="0.2" height="15.0" fill="rgb(233,86,21)" rx="2" ry="2" />
<text  x="736.97" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (15 samples, 0.28%)</title><rect x="990.3" y="469" width="3.4" height="15.0" fill="rgb(233,162,23)" rx="2" ry="2" />
<text  x="993.32" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (8 samples, 0.15%)</title><rect x="363.6" y="341" width="1.8" height="15.0" fill="rgb(227,103,18)" rx="2" ry="2" />
<text  x="366.62" y="351.5" ></text>
</g>
<g >
<title>_itoa_word (1 samples, 0.02%)</title><rect x="81.4" y="773" width="0.2" height="15.0" fill="rgb(237,170,22)" rx="2" ry="2" />
<text  x="84.39" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1166.6" y="677" width="0.2" height="15.0" fill="rgb(227,57,41)" rx="2" ry="2" />
<text  x="1169.57" y="687.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%)</title><rect x="350.0" y="341" width="0.7" height="15.0" fill="rgb(219,112,26)" rx="2" ry="2" />
<text  x="353.01" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="109.7" y="597" width="0.3" height="15.0" fill="rgb(254,142,29)" rx="2" ry="2" />
<text  x="112.73" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, sstables::sstable::seal_sstable (1 samples, 0.02%)</title><rect x="729.7" y="661" width="0.3" height="15.0" fill="rgb(237,216,54)" rx="2" ry="2" />
<text  x="732.74" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="184.7" y="389" width="0.2" height="15.0" fill="rgb(237,217,26)" rx="2" ry="2" />
<text  x="187.69" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="1122.0" y="325" width="0.2" height="15.0" fill="rgb(248,44,15)" rx="2" ry="2" />
<text  x="1124.95" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (198 samples, 3.74%)</title><rect x="793.3" y="549" width="44.2" height="15.0" fill="rgb(245,163,31)" rx="2" ry="2" />
<text  x="796.32" y="559.5" >std:..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="60.4" y="325" width="0.2" height="15.0" fill="rgb(242,127,33)" rx="2" ry="2" />
<text  x="63.42" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="87.0" y="677" width="0.2" height="15.0" fill="rgb(232,185,50)" rx="2" ry="2" />
<text  x="89.97" y="687.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (38 samples, 0.72%)</title><rect x="561.5" y="581" width="8.5" height="15.0" fill="rgb(240,31,3)" rx="2" ry="2" />
<text  x="564.51" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="782.2" y="501" width="0.6" height="15.0" fill="rgb(231,190,8)" rx="2" ry="2" />
<text  x="785.16" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1133.3" y="645" width="0.3" height="15.0" fill="rgb(243,52,4)" rx="2" ry="2" />
<text  x="1136.33" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1021.1" y="341" width="0.2" height="15.0" fill="rgb(250,130,41)" rx="2" ry="2" />
<text  x="1024.11" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (364 samples, 6.88%)</title><rect x="194.5" y="421" width="81.2" height="15.0" fill="rgb(206,134,12)" rx="2" ry="2" />
<text  x="197.51" y="431.5" >partition..</text>
</g>
<g >
<title>mutation_cleaner_impl::clear (1 samples, 0.02%)</title><rect x="702.7" y="437" width="0.3" height="15.0" fill="rgb(235,217,25)" rx="2" ry="2" />
<text  x="705.74" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1008.2" y="373" width="0.2" height="15.0" fill="rgb(209,218,48)" rx="2" ry="2" />
<text  x="1011.17" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="362.7" y="341" width="0.5" height="15.0" fill="rgb(250,203,50)" rx="2" ry="2" />
<text  x="365.73" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="880.8" y="469" width="0.2" height="15.0" fill="rgb(225,171,29)" rx="2" ry="2" />
<text  x="883.78" y="479.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,046 samples, 19.78%)</title><rect x="882.1" y="645" width="233.4" height="15.0" fill="rgb(223,137,46)" rx="2" ry="2" />
<text  x="885.12" y="655.5" >seastar::concrete_execution_st..</text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (14 samples, 0.26%)</title><rect x="687.3" y="629" width="3.2" height="15.0" fill="rgb(244,162,24)" rx="2" ry="2" />
<text  x="690.35" y="639.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1020.2" y="325" width="0.2" height="15.0" fill="rgb(250,68,29)" rx="2" ry="2" />
<text  x="1023.22" y="335.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="110.6" y="549" width="0.2" height="15.0" fill="rgb(238,154,13)" rx="2" ry="2" />
<text  x="113.62" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1052.6" y="469" width="0.6" height="15.0" fill="rgb(226,107,41)" rx="2" ry="2" />
<text  x="1055.57" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1112.6" y="581" width="0.7" height="15.0" fill="rgb(221,218,23)" rx="2" ry="2" />
<text  x="1115.58" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%)</title><rect x="695.6" y="629" width="0.9" height="15.0" fill="rgb(213,168,41)" rx="2" ry="2" />
<text  x="698.60" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1111.9" y="581" width="0.2" height="15.0" fill="rgb(218,210,10)" rx="2" ry="2" />
<text  x="1114.91" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (3 samples, 0.06%)</title><rect x="624.7" y="597" width="0.6" height="15.0" fill="rgb(246,41,42)" rx="2" ry="2" />
<text  x="627.65" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="55.1" y="357" width="0.2" height="15.0" fill="rgb(243,31,31)" rx="2" ry="2" />
<text  x="58.07" y="367.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1023.1" y="373" width="0.7" height="15.0" fill="rgb(249,168,15)" rx="2" ry="2" />
<text  x="1026.12" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="875.6" y="501" width="0.5" height="15.0" fill="rgb(212,97,12)" rx="2" ry="2" />
<text  x="878.65" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="62.0" y="357" width="0.2" height="15.0" fill="rgb(227,83,43)" rx="2" ry="2" />
<text  x="64.98" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.1" y="357" width="0.2" height="15.0" fill="rgb(229,46,13)" rx="2" ry="2" />
<text  x="705.07" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="587.6" y="453" width="0.5" height="15.0" fill="rgb(237,178,19)" rx="2" ry="2" />
<text  x="590.62" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="725" width="0.2" height="15.0" fill="rgb(214,136,25)" rx="2" ry="2" />
<text  x="13.67" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.3" y="357" width="0.2" height="15.0" fill="rgb(219,148,0)" rx="2" ry="2" />
<text  x="64.31" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="549" width="0.2" height="15.0" fill="rgb(214,204,34)" rx="2" ry="2" />
<text  x="1166.67" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="602.1" y="533" width="0.7" height="15.0" fill="rgb(209,184,5)" rx="2" ry="2" />
<text  x="605.12" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2 samples, 0.04%)</title><rect x="74.5" y="517" width="0.4" height="15.0" fill="rgb(238,16,31)" rx="2" ry="2" />
<text  x="77.48" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (211 samples, 3.99%)</title><rect x="21.6" y="629" width="47.1" height="15.0" fill="rgb(210,60,2)" rx="2" ry="2" />
<text  x="24.60" y="639.5" >cql3..</text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (1 samples, 0.02%)</title><rect x="1163.5" y="677" width="0.2" height="15.0" fill="rgb(236,143,30)" rx="2" ry="2" />
<text  x="1166.45" y="687.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::dispose (1 samples, 0.02%)</title><rect x="729.5" y="613" width="0.2" height="15.0" fill="rgb(235,17,17)" rx="2" ry="2" />
<text  x="732.51" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="962.4" y="533" width="0.3" height="15.0" fill="rgb(235,76,19)" rx="2" ry="2" />
<text  x="965.43" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="782.8" y="501" width="0.3" height="15.0" fill="rgb(245,24,50)" rx="2" ry="2" />
<text  x="785.83" y="511.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (4 samples, 0.08%)</title><rect x="1118.6" y="405" width="0.9" height="15.0" fill="rgb(242,22,49)" rx="2" ry="2" />
<text  x="1121.61" y="415.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1127.3" y="357" width="0.2" height="15.0" fill="rgb(249,70,35)" rx="2" ry="2" />
<text  x="1130.31" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.2" y="245" width="0.2" height="15.0" fill="rgb(252,111,35)" rx="2" ry="2" />
<text  x="59.18" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="108.8" y="597" width="0.5" height="15.0" fill="rgb(215,100,29)" rx="2" ry="2" />
<text  x="111.84" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="862.0" y="501" width="0.3" height="15.0" fill="rgb(208,21,53)" rx="2" ry="2" />
<text  x="865.04" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="319.7" y="437" width="0.2" height="15.0" fill="rgb(229,21,51)" rx="2" ry="2" />
<text  x="322.67" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="856.5" y="533" width="0.6" height="15.0" fill="rgb(243,84,18)" rx="2" ry="2" />
<text  x="859.46" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (31 samples, 0.59%)</title><rect x="705.4" y="645" width="6.9" height="15.0" fill="rgb(209,61,21)" rx="2" ry="2" />
<text  x="708.42" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="136.5" y="613" width="0.2" height="15.0" fill="rgb(231,143,4)" rx="2" ry="2" />
<text  x="139.50" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (16 samples, 0.30%)</title><rect x="745.1" y="517" width="3.6" height="15.0" fill="rgb(207,52,50)" rx="2" ry="2" />
<text  x="748.13" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="852.9" y="597" width="0.4" height="15.0" fill="rgb(250,2,4)" rx="2" ry="2" />
<text  x="855.89" y="607.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (2 samples, 0.04%)</title><rect x="367.2" y="341" width="0.4" height="15.0" fill="rgb(220,176,14)" rx="2" ry="2" />
<text  x="370.19" y="351.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="878.5" y="453" width="0.3" height="15.0" fill="rgb(207,128,44)" rx="2" ry="2" />
<text  x="881.55" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="182.5" y="405" width="0.2" height="15.0" fill="rgb(228,144,46)" rx="2" ry="2" />
<text  x="185.46" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (497 samples, 9.40%)</title><rect x="333.3" y="437" width="110.9" height="15.0" fill="rgb(226,184,47)" rx="2" ry="2" />
<text  x="336.28" y="447.5" >flat_mutation..</text>
</g>
<g >
<title>dht::tri_compare (14 samples, 0.26%)</title><rect x="1065.3" y="389" width="3.1" height="15.0" fill="rgb(209,155,31)" rx="2" ry="2" />
<text  x="1068.28" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="106.8" y="645" width="0.3" height="15.0" fill="rgb(247,77,29)" rx="2" ry="2" />
<text  x="109.83" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.08%)</title><rect x="667.7" y="597" width="0.9" height="15.0" fill="rgb(219,138,13)" rx="2" ry="2" />
<text  x="670.71" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="438.1" y="341" width="0.3" height="15.0" fill="rgb(217,70,20)" rx="2" ry="2" />
<text  x="441.14" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="701.6" y="501" width="0.2" height="15.0" fill="rgb(247,221,1)" rx="2" ry="2" />
<text  x="704.62" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1032.0" y="389" width="2.0" height="15.0" fill="rgb(223,4,36)" rx="2" ry="2" />
<text  x="1035.04" y="399.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%)</title><rect x="1130.0" y="309" width="0.2" height="15.0" fill="rgb(236,191,7)" rx="2" ry="2" />
<text  x="1132.98" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (15 samples, 0.28%)</title><rect x="262.8" y="389" width="3.3" height="15.0" fill="rgb(220,32,10)" rx="2" ry="2" />
<text  x="265.78" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="48.8" y="405" width="0.5" height="15.0" fill="rgb(212,55,54)" rx="2" ry="2" />
<text  x="51.82" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="49.9" y="405" width="0.3" height="15.0" fill="rgb(241,182,25)" rx="2" ry="2" />
<text  x="52.94" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (20 samples, 0.38%)</title><rect x="255.2" y="325" width="4.5" height="15.0" fill="rgb(239,62,53)" rx="2" ry="2" />
<text  x="258.19" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%)</title><rect x="512.0" y="485" width="2.2" height="15.0" fill="rgb(232,8,51)" rx="2" ry="2" />
<text  x="514.99" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="76.9" y="613" width="0.5" height="15.0" fill="rgb(235,193,18)" rx="2" ry="2" />
<text  x="79.93" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (2 samples, 0.04%)</title><rect x="1034.0" y="405" width="0.5" height="15.0" fill="rgb(241,76,23)" rx="2" ry="2" />
<text  x="1037.05" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="967.6" y="501" width="2.4" height="15.0" fill="rgb(223,146,4)" rx="2" ry="2" />
<text  x="970.56" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (2 samples, 0.04%)</title><rect x="60.4" y="485" width="0.5" height="15.0" fill="rgb(250,117,15)" rx="2" ry="2" />
<text  x="63.42" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="393.5" y="309" width="0.9" height="15.0" fill="rgb(234,93,53)" rx="2" ry="2" />
<text  x="396.52" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1047.0" y="453" width="0.2" height="15.0" fill="rgb(222,186,11)" rx="2" ry="2" />
<text  x="1049.99" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="448.2" y="501" width="0.2" height="15.0" fill="rgb(211,171,51)" rx="2" ry="2" />
<text  x="451.18" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="830.4" y="437" width="0.6" height="15.0" fill="rgb(246,163,36)" rx="2" ry="2" />
<text  x="833.36" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="448.0" y="405" width="0.2" height="15.0" fill="rgb(223,37,28)" rx="2" ry="2" />
<text  x="450.95" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (78 samples, 1.47%)</title><rect x="1059.5" y="501" width="17.4" height="15.0" fill="rgb(242,74,34)" rx="2" ry="2" />
<text  x="1062.48" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="58.4" y="453" width="0.2" height="15.0" fill="rgb(237,72,21)" rx="2" ry="2" />
<text  x="61.41" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="810.3" y="373" width="2.2" height="15.0" fill="rgb(211,156,49)" rx="2" ry="2" />
<text  x="813.28" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="701.2" y="517" width="0.6" height="15.0" fill="rgb(230,19,22)" rx="2" ry="2" />
<text  x="704.18" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.0" y="421" width="0.2" height="15.0" fill="rgb(253,122,10)" rx="2" ry="2" />
<text  x="64.98" y="431.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (3 samples, 0.06%)</title><rect x="1121.1" y="373" width="0.6" height="15.0" fill="rgb(239,8,8)" rx="2" ry="2" />
<text  x="1124.06" y="383.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%)</title><rect x="1189.3" y="789" width="0.3" height="15.0" fill="rgb(227,32,39)" rx="2" ry="2" />
<text  x="1192.33" y="799.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (3 samples, 0.06%)</title><rect x="1074.7" y="421" width="0.6" height="15.0" fill="rgb(237,103,53)" rx="2" ry="2" />
<text  x="1077.65" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="74.3" y="469" width="0.2" height="15.0" fill="rgb(237,134,0)" rx="2" ry="2" />
<text  x="77.25" y="479.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="11.1" y="757" width="0.2" height="15.0" fill="rgb(208,105,34)" rx="2" ry="2" />
<text  x="14.12" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="61.5" y="341" width="0.5" height="15.0" fill="rgb(231,21,21)" rx="2" ry="2" />
<text  x="64.54" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="61.3" y="309" width="0.2" height="15.0" fill="rgb(246,25,20)" rx="2" ry="2" />
<text  x="64.31" y="319.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="608.1" y="565" width="0.7" height="15.0" fill="rgb(219,90,21)" rx="2" ry="2" />
<text  x="611.14" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="95.4" y="645" width="0.3" height="15.0" fill="rgb(212,119,46)" rx="2" ry="2" />
<text  x="98.45" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.7" y="373" width="0.3" height="15.0" fill="rgb(250,104,54)" rx="2" ry="2" />
<text  x="705.74" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="81.8" y="725" width="0.3" height="15.0" fill="rgb(244,183,34)" rx="2" ry="2" />
<text  x="84.84" y="735.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1107.2" y="549" width="0.3" height="15.0" fill="rgb(222,66,47)" rx="2" ry="2" />
<text  x="1110.23" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="445.1" y="421" width="0.2" height="15.0" fill="rgb(225,57,3)" rx="2" ry="2" />
<text  x="448.05" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (6 samples, 0.11%)</title><rect x="69.8" y="517" width="1.3" height="15.0" fill="rgb(215,195,19)" rx="2" ry="2" />
<text  x="72.79" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="18.3" y="533" width="0.2" height="15.0" fill="rgb(224,74,42)" rx="2" ry="2" />
<text  x="21.25" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="51.7" y="309" width="0.2" height="15.0" fill="rgb(237,216,15)" rx="2" ry="2" />
<text  x="54.72" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="42.1" y="389" width="0.7" height="15.0" fill="rgb(206,163,37)" rx="2" ry="2" />
<text  x="45.13" y="399.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="566.9" y="501" width="1.3" height="15.0" fill="rgb(239,141,12)" rx="2" ry="2" />
<text  x="569.87" y="511.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="693.4" y="613" width="0.2" height="15.0" fill="rgb(207,34,35)" rx="2" ry="2" />
<text  x="696.37" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%)</title><rect x="17.4" y="661" width="0.4" height="15.0" fill="rgb(246,181,6)" rx="2" ry="2" />
<text  x="20.36" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (5 samples, 0.09%)</title><rect x="722.6" y="581" width="1.1" height="15.0" fill="rgb(211,137,35)" rx="2" ry="2" />
<text  x="725.60" y="591.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (34 samples, 0.64%)</title><rect x="494.1" y="453" width="7.6" height="15.0" fill="rgb(225,146,22)" rx="2" ry="2" />
<text  x="497.14" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="204.5" y="357" width="0.3" height="15.0" fill="rgb(231,154,23)" rx="2" ry="2" />
<text  x="207.55" y="367.5" ></text>
</g>
<g >
<title>service::migration_manager::announce (1 samples, 0.02%)</title><rect x="728.8" y="645" width="0.3" height="15.0" fill="rgb(229,151,33)" rx="2" ry="2" />
<text  x="731.84" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="702.1" y="325" width="0.2" height="15.0" fill="rgb(228,32,17)" rx="2" ry="2" />
<text  x="705.07" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="54.4" y="245" width="0.7" height="15.0" fill="rgb(222,195,32)" rx="2" ry="2" />
<text  x="57.40" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (2 samples, 0.04%)</title><rect x="1078.0" y="517" width="0.4" height="15.0" fill="rgb(209,186,47)" rx="2" ry="2" />
<text  x="1081.00" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="1125.7" y="453" width="2.1" height="15.0" fill="rgb(226,20,10)" rx="2" ry="2" />
<text  x="1128.75" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="74.5" y="533" width="0.4" height="15.0" fill="rgb(252,131,45)" rx="2" ry="2" />
<text  x="77.48" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="61.3" y="469" width="0.7" height="15.0" fill="rgb(222,26,1)" rx="2" ry="2" />
<text  x="64.31" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="526.7" y="357" width="0.2" height="15.0" fill="rgb(238,207,9)" rx="2" ry="2" />
<text  x="529.71" y="367.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="646.1" y="597" width="0.2" height="15.0" fill="rgb(233,14,24)" rx="2" ry="2" />
<text  x="649.07" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="655.0" y="645" width="0.4" height="15.0" fill="rgb(225,143,29)" rx="2" ry="2" />
<text  x="658.00" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="877.9" y="469" width="0.2" height="15.0" fill="rgb(248,88,7)" rx="2" ry="2" />
<text  x="880.88" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%)</title><rect x="711.7" y="613" width="0.2" height="15.0" fill="rgb(214,40,27)" rx="2" ry="2" />
<text  x="714.66" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.17%)</title><rect x="949.5" y="533" width="2.0" height="15.0" fill="rgb(218,14,37)" rx="2" ry="2" />
<text  x="952.49" y="543.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.09%)</title><rect x="611.5" y="581" width="1.1" height="15.0" fill="rgb(207,102,34)" rx="2" ry="2" />
<text  x="614.49" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.9" y="245" width="0.2" height="15.0" fill="rgb(231,104,54)" rx="2" ry="2" />
<text  x="59.85" y="255.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (2 samples, 0.04%)</title><rect x="17.4" y="709" width="0.4" height="15.0" fill="rgb(253,57,16)" rx="2" ry="2" />
<text  x="20.36" y="719.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (4 samples, 0.08%)</title><rect x="515.1" y="469" width="0.9" height="15.0" fill="rgb(236,193,3)" rx="2" ry="2" />
<text  x="518.11" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="1047.7" y="421" width="0.4" height="15.0" fill="rgb(207,125,44)" rx="2" ry="2" />
<text  x="1050.66" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(208,27,15)" rx="2" ry="2" />
<text  x="13.67" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (73 samples, 1.38%)</title><rect x="573.8" y="501" width="16.3" height="15.0" fill="rgb(208,137,28)" rx="2" ry="2" />
<text  x="576.79" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="110.6" y="389" width="0.2" height="15.0" fill="rgb(240,54,36)" rx="2" ry="2" />
<text  x="113.62" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="701.2" y="485" width="0.4" height="15.0" fill="rgb(237,125,5)" rx="2" ry="2" />
<text  x="704.18" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.09%)</title><rect x="431.0" y="373" width="1.1" height="15.0" fill="rgb(212,30,44)" rx="2" ry="2" />
<text  x="434.00" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="721.5" y="597" width="0.2" height="15.0" fill="rgb(237,95,39)" rx="2" ry="2" />
<text  x="724.48" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="200.8" y="357" width="0.2" height="15.0" fill="rgb(221,81,42)" rx="2" ry="2" />
<text  x="203.75" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="52.8" y="405" width="0.3" height="15.0" fill="rgb(217,81,51)" rx="2" ry="2" />
<text  x="55.84" y="415.5" ></text>
</g>
<g >
<title>[[vdso]] (28 samples, 0.53%)</title><rect x="1168.4" y="773" width="6.2" height="15.0" fill="rgb(212,13,18)" rx="2" ry="2" />
<text  x="1171.36" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="55.3" y="405" width="0.2" height="15.0" fill="rgb(227,53,42)" rx="2" ry="2" />
<text  x="58.29" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="845.1" y="453" width="0.4" height="15.0" fill="rgb(253,18,31)" rx="2" ry="2" />
<text  x="848.08" y="463.5" ></text>
</g>
<g >
<title>database::do_apply (39 samples, 0.74%)</title><rect x="1115.9" y="501" width="8.7" height="15.0" fill="rgb(249,98,14)" rx="2" ry="2" />
<text  x="1118.93" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.09%)</title><rect x="78.7" y="613" width="1.1" height="15.0" fill="rgb(210,16,47)" rx="2" ry="2" />
<text  x="81.72" y="623.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="64.9" y="501" width="0.2" height="15.0" fill="rgb(210,172,21)" rx="2" ry="2" />
<text  x="67.88" y="511.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (12 samples, 0.23%)</title><rect x="878.5" y="485" width="2.7" height="15.0" fill="rgb(229,210,31)" rx="2" ry="2" />
<text  x="881.55" y="495.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="646.1" y="613" width="0.2" height="15.0" fill="rgb(249,161,17)" rx="2" ry="2" />
<text  x="649.07" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="140.1" y="277" width="0.2" height="15.0" fill="rgb(215,57,27)" rx="2" ry="2" />
<text  x="143.07" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1120.4" y="357" width="0.2" height="15.0" fill="rgb(215,56,6)" rx="2" ry="2" />
<text  x="1123.39" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (21 samples, 0.40%)</title><rect x="59.8" y="501" width="4.6" height="15.0" fill="rgb(242,16,11)" rx="2" ry="2" />
<text  x="62.75" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (2 samples, 0.04%)</title><rect x="878.1" y="549" width="0.4" height="15.0" fill="rgb(248,190,48)" rx="2" ry="2" />
<text  x="881.10" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.2" y="421" width="0.2" height="15.0" fill="rgb(222,159,36)" rx="2" ry="2" />
<text  x="63.20" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (10 samples, 0.19%)</title><rect x="759.6" y="469" width="2.3" height="15.0" fill="rgb(240,5,53)" rx="2" ry="2" />
<text  x="762.63" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="676.2" y="645" width="0.4" height="15.0" fill="rgb(251,23,23)" rx="2" ry="2" />
<text  x="679.19" y="655.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (6 samples, 0.11%)</title><rect x="562.6" y="549" width="1.4" height="15.0" fill="rgb(238,125,19)" rx="2" ry="2" />
<text  x="565.63" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="44.6" y="293" width="0.2" height="15.0" fill="rgb(243,45,47)" rx="2" ry="2" />
<text  x="47.58" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="887.7" y="629" width="0.4" height="15.0" fill="rgb(226,124,44)" rx="2" ry="2" />
<text  x="890.69" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1017.5" y="309" width="0.3" height="15.0" fill="rgb(226,103,0)" rx="2" ry="2" />
<text  x="1020.54" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%)</title><rect x="522.5" y="421" width="1.5" height="15.0" fill="rgb(244,63,31)" rx="2" ry="2" />
<text  x="525.47" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="40.8" y="469" width="0.2" height="15.0" fill="rgb(249,93,54)" rx="2" ry="2" />
<text  x="43.79" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="86.5" y="677" width="0.2" height="15.0" fill="rgb(254,114,1)" rx="2" ry="2" />
<text  x="89.52" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="62.0" y="405" width="0.2" height="15.0" fill="rgb(224,197,2)" rx="2" ry="2" />
<text  x="64.98" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="301.4" y="437" width="0.2" height="15.0" fill="rgb(229,226,33)" rx="2" ry="2" />
<text  x="304.37" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.8" y="581" width="0.2" height="15.0" fill="rgb(224,147,18)" rx="2" ry="2" />
<text  x="20.81" y="591.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="943.5" y="469" width="0.2" height="15.0" fill="rgb(238,58,18)" rx="2" ry="2" />
<text  x="946.47" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.6" y="533" width="0.2" height="15.0" fill="rgb(248,83,48)" rx="2" ry="2" />
<text  x="70.56" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="233.3" y="229" width="0.3" height="15.0" fill="rgb(216,126,1)" rx="2" ry="2" />
<text  x="236.33" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (6 samples, 0.11%)</title><rect x="482.8" y="421" width="1.3" height="15.0" fill="rgb(224,82,46)" rx="2" ry="2" />
<text  x="485.76" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.19%)</title><rect x="902.2" y="453" width="2.2" height="15.0" fill="rgb(249,50,38)" rx="2" ry="2" />
<text  x="905.20" y="463.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (14 samples, 0.26%)</title><rect x="860.5" y="581" width="3.1" height="15.0" fill="rgb(210,143,28)" rx="2" ry="2" />
<text  x="863.47" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (41 samples, 0.78%)</title><rect x="95.9" y="645" width="9.1" height="15.0" fill="rgb(210,134,39)" rx="2" ry="2" />
<text  x="98.90" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (3 samples, 0.06%)</title><rect x="1131.5" y="341" width="0.7" height="15.0" fill="rgb(211,145,45)" rx="2" ry="2" />
<text  x="1134.55" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="936.6" y="565" width="0.2" height="15.0" fill="rgb(213,170,48)" rx="2" ry="2" />
<text  x="939.55" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="934.3" y="565" width="0.5" height="15.0" fill="rgb(207,11,37)" rx="2" ry="2" />
<text  x="937.32" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;multishard_combining_reader, dht::sharder const&amp;, seastar::shared_ptr&lt;reader_lifecycle_policy&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, nonwrapping_interval&lt;dht::ring_position&gt; const&amp;, query::partition_slice const&amp;, seastar::io_priority_class const&amp;, tracing::trace_state_ptr, seastar::bool_class&lt;flat_mutation_reader::partition_range_forwarding_tag&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="81.6" y="69" width="0.2" height="15.0" fill="rgb(241,152,47)" rx="2" ry="2" />
<text  x="84.62" y="79.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (30 samples, 0.57%)</title><rect x="503.7" y="389" width="6.7" height="15.0" fill="rgb(219,34,36)" rx="2" ry="2" />
<text  x="506.73" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="56.2" y="325" width="0.4" height="15.0" fill="rgb(228,94,27)" rx="2" ry="2" />
<text  x="59.18" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%)</title><rect x="999.5" y="421" width="0.4" height="15.0" fill="rgb(227,106,48)" rx="2" ry="2" />
<text  x="1002.47" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="46.6" y="485" width="0.4" height="15.0" fill="rgb(209,162,22)" rx="2" ry="2" />
<text  x="49.59" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="210.6" y="389" width="0.2" height="15.0" fill="rgb(249,191,25)" rx="2" ry="2" />
<text  x="213.57" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="589.8" y="485" width="0.3" height="15.0" fill="rgb(208,146,39)" rx="2" ry="2" />
<text  x="592.85" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="82.7" y="549" width="0.7" height="15.0" fill="rgb(225,26,42)" rx="2" ry="2" />
<text  x="85.73" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="775.0" y="565" width="0.2" height="15.0" fill="rgb(235,130,8)" rx="2" ry="2" />
<text  x="778.03" y="575.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (1 samples, 0.02%)</title><rect x="449.1" y="517" width="0.2" height="15.0" fill="rgb(225,151,25)" rx="2" ry="2" />
<text  x="452.07" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="929.0" y="469" width="0.2" height="15.0" fill="rgb(206,178,54)" rx="2" ry="2" />
<text  x="931.97" y="479.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="702.1" y="613" width="0.2" height="15.0" fill="rgb(245,34,41)" rx="2" ry="2" />
<text  x="705.07" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="591.0" y="517" width="0.6" height="15.0" fill="rgb(251,83,35)" rx="2" ry="2" />
<text  x="593.96" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,396 samples, 45.30%)</title><rect x="111.5" y="661" width="534.6" height="15.0" fill="rgb(249,183,31)" rx="2" ry="2" />
<text  x="114.51" y="671.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (541 samples, 10.23%)</title><rect x="327.5" y="501" width="120.7" height="15.0" fill="rgb(223,153,4)" rx="2" ry="2" />
<text  x="330.48" y="511.5" >seastar::futuri..</text>
</g>
<g >
<title>dht::shard_of (5 samples, 0.09%)</title><rect x="997.9" y="437" width="1.1" height="15.0" fill="rgb(243,38,37)" rx="2" ry="2" />
<text  x="1000.91" y="447.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (8 samples, 0.15%)</title><rect x="504.2" y="373" width="1.8" height="15.0" fill="rgb(243,109,17)" rx="2" ry="2" />
<text  x="507.18" y="383.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%)</title><rect x="1126.6" y="341" width="0.3" height="15.0" fill="rgb(237,159,12)" rx="2" ry="2" />
<text  x="1129.64" y="351.5" ></text>
</g>
<g >
<title>multishard_combining_reader::multishard_combining_reader (1 samples, 0.02%)</title><rect x="81.6" y="53" width="0.2" height="15.0" fill="rgb(216,37,22)" rx="2" ry="2" />
<text  x="84.62" y="63.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="642.5" y="629" width="0.2" height="15.0" fill="rgb(210,88,5)" rx="2" ry="2" />
<text  x="645.50" y="639.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="257.4" y="277" width="0.5" height="15.0" fill="rgb(237,60,6)" rx="2" ry="2" />
<text  x="260.42" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1111.7" y="581" width="0.2" height="15.0" fill="rgb(237,7,3)" rx="2" ry="2" />
<text  x="1114.69" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="454.2" y="565" width="0.2" height="15.0" fill="rgb(244,98,45)" rx="2" ry="2" />
<text  x="457.20" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="659.9" y="565" width="0.2" height="15.0" fill="rgb(234,10,8)" rx="2" ry="2" />
<text  x="662.90" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="799.6" y="469" width="0.4" height="15.0" fill="rgb(232,91,17)" rx="2" ry="2" />
<text  x="802.57" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (40 samples, 0.76%)</title><rect x="1115.9" y="517" width="9.0" height="15.0" fill="rgb(232,158,35)" rx="2" ry="2" />
<text  x="1118.93" y="527.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (3 samples, 0.06%)</title><rect x="368.8" y="341" width="0.6" height="15.0" fill="rgb(231,135,17)" rx="2" ry="2" />
<text  x="371.75" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="651.0" y="645" width="0.2" height="15.0" fill="rgb(237,159,44)" rx="2" ry="2" />
<text  x="653.98" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.8" y="501" width="0.2" height="15.0" fill="rgb(232,165,11)" rx="2" ry="2" />
<text  x="70.78" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="906.9" y="421" width="0.2" height="15.0" fill="rgb(241,93,4)" rx="2" ry="2" />
<text  x="909.88" y="431.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="686.0" y="629" width="1.1" height="15.0" fill="rgb(227,44,15)" rx="2" ry="2" />
<text  x="689.01" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%)</title><rect x="481.0" y="421" width="0.4" height="15.0" fill="rgb(235,112,41)" rx="2" ry="2" />
<text  x="483.97" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1146.7" y="613" width="0.2" height="15.0" fill="rgb(219,79,0)" rx="2" ry="2" />
<text  x="1149.72" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::rename_file (1 samples, 0.02%)</title><rect x="729.7" y="613" width="0.3" height="15.0" fill="rgb(239,52,39)" rx="2" ry="2" />
<text  x="732.74" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="39.9" y="405" width="0.2" height="15.0" fill="rgb(218,30,10)" rx="2" ry="2" />
<text  x="42.90" y="415.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (260 samples, 4.92%)</title><rect x="487.4" y="501" width="58.1" height="15.0" fill="rgb(230,48,4)" rx="2" ry="2" />
<text  x="490.44" y="511.5" >memtab..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (53 samples, 1.00%)</title><rect x="178.7" y="453" width="11.8" height="15.0" fill="rgb(245,126,50)" rx="2" ry="2" />
<text  x="181.67" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (5 samples, 0.09%)</title><rect x="671.3" y="629" width="1.1" height="15.0" fill="rgb(235,74,44)" rx="2" ry="2" />
<text  x="674.28" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="609.7" y="549" width="0.7" height="15.0" fill="rgb(207,219,41)" rx="2" ry="2" />
<text  x="612.71" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="110.8" y="613" width="0.3" height="15.0" fill="rgb(240,97,46)" rx="2" ry="2" />
<text  x="113.84" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (6 samples, 0.11%)</title><rect x="403.1" y="325" width="1.3" height="15.0" fill="rgb(221,132,12)" rx="2" ry="2" />
<text  x="406.11" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1014.2" y="357" width="0.2" height="15.0" fill="rgb(236,94,39)" rx="2" ry="2" />
<text  x="1017.19" y="367.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="427.4" y="341" width="0.3" height="15.0" fill="rgb(235,48,48)" rx="2" ry="2" />
<text  x="430.43" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="262.1" y="357" width="0.2" height="15.0" fill="rgb(232,89,6)" rx="2" ry="2" />
<text  x="265.11" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%)</title><rect x="695.2" y="645" width="0.2" height="15.0" fill="rgb(252,66,10)" rx="2" ry="2" />
<text  x="698.15" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="81.6" y="389" width="0.2" height="15.0" fill="rgb(225,227,13)" rx="2" ry="2" />
<text  x="84.62" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="790.6" y="501" width="0.7" height="15.0" fill="rgb(226,124,1)" rx="2" ry="2" />
<text  x="793.64" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="68.2" y="549" width="0.3" height="15.0" fill="rgb(246,58,14)" rx="2" ry="2" />
<text  x="71.23" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="272.1" y="405" width="0.3" height="15.0" fill="rgb(216,72,43)" rx="2" ry="2" />
<text  x="275.15" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.8" y="517" width="0.2" height="15.0" fill="rgb(228,194,8)" rx="2" ry="2" />
<text  x="20.81" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="986.1" y="421" width="0.4" height="15.0" fill="rgb(232,26,15)" rx="2" ry="2" />
<text  x="989.08" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1157.6" y="629" width="0.7" height="15.0" fill="rgb(252,171,2)" rx="2" ry="2" />
<text  x="1160.65" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="802.7" y="485" width="0.2" height="15.0" fill="rgb(245,125,21)" rx="2" ry="2" />
<text  x="805.69" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="81.6" y="581" width="0.2" height="15.0" fill="rgb(222,160,5)" rx="2" ry="2" />
<text  x="84.62" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.9" y="629" width="0.3" height="15.0" fill="rgb(233,86,40)" rx="2" ry="2" />
<text  x="672.94" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.21%)</title><rect x="783.5" y="485" width="2.5" height="15.0" fill="rgb(251,38,12)" rx="2" ry="2" />
<text  x="786.50" y="495.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="967.6" y="517" width="2.4" height="15.0" fill="rgb(216,93,54)" rx="2" ry="2" />
<text  x="970.56" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (10 samples, 0.19%)</title><rect x="263.4" y="357" width="2.3" height="15.0" fill="rgb(237,8,50)" rx="2" ry="2" />
<text  x="266.45" y="367.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="271.5" y="405" width="0.4" height="15.0" fill="rgb(228,72,30)" rx="2" ry="2" />
<text  x="274.48" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (9 samples, 0.17%)</title><rect x="99.9" y="581" width="2.0" height="15.0" fill="rgb(247,9,2)" rx="2" ry="2" />
<text  x="102.91" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="57.1" y="277" width="0.4" height="15.0" fill="rgb(215,204,53)" rx="2" ry="2" />
<text  x="60.08" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="93.4" y="629" width="0.3" height="15.0" fill="rgb(242,7,39)" rx="2" ry="2" />
<text  x="96.44" y="639.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="105.0" y="581" width="0.3" height="15.0" fill="rgb(220,187,19)" rx="2" ry="2" />
<text  x="108.04" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="974.9" y="517" width="0.3" height="15.0" fill="rgb(221,31,5)" rx="2" ry="2" />
<text  x="977.93" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1090.7" y="517" width="0.2" height="15.0" fill="rgb(207,168,28)" rx="2" ry="2" />
<text  x="1093.72" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%)</title><rect x="10.7" y="437" width="0.2" height="15.0" fill="rgb(207,155,9)" rx="2" ry="2" />
<text  x="13.67" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="53.7" y="405" width="0.3" height="15.0" fill="rgb(248,19,10)" rx="2" ry="2" />
<text  x="56.73" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1130.2" y="245" width="0.2" height="15.0" fill="rgb(251,189,52)" rx="2" ry="2" />
<text  x="1133.21" y="255.5" ></text>
</g>
<g >
<title>CryptoPP::IteratedHashBase&lt;unsigned int, CryptoPP::HashTransformation&gt;::Update (1 samples, 0.02%)</title><rect x="10.2" y="741" width="0.2" height="15.0" fill="rgb(237,61,42)" rx="2" ry="2" />
<text  x="13.22" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="320.8" y="485" width="0.2" height="15.0" fill="rgb(227,79,42)" rx="2" ry="2" />
<text  x="323.78" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%)</title><rect x="728.8" y="629" width="0.3" height="15.0" fill="rgb(252,101,46)" rx="2" ry="2" />
<text  x="731.84" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.09%)</title><rect x="134.7" y="533" width="1.1" height="15.0" fill="rgb(238,104,8)" rx="2" ry="2" />
<text  x="137.72" y="543.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (7 samples, 0.13%)</title><rect x="845.7" y="533" width="1.6" height="15.0" fill="rgb(230,73,8)" rx="2" ry="2" />
<text  x="848.75" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="566.4" y="501" width="0.2" height="15.0" fill="rgb(226,70,49)" rx="2" ry="2" />
<text  x="569.42" y="511.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (457 samples, 8.64%)</title><rect x="456.2" y="565" width="102.0" height="15.0" fill="rgb(213,85,15)" rx="2" ry="2" />
<text  x="459.21" y="575.5" >mutation_sou..</text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="152.6" y="597" width="0.4" height="15.0" fill="rgb(229,205,15)" rx="2" ry="2" />
<text  x="155.56" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="82.1" y="517" width="0.2" height="15.0" fill="rgb(252,150,36)" rx="2" ry="2" />
<text  x="85.06" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.08%)</title><rect x="665.5" y="581" width="0.9" height="15.0" fill="rgb(212,186,9)" rx="2" ry="2" />
<text  x="668.48" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="935.0" y="549" width="0.2" height="15.0" fill="rgb(228,157,24)" rx="2" ry="2" />
<text  x="937.99" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (2 samples, 0.04%)</title><rect x="766.8" y="517" width="0.4" height="15.0" fill="rgb(207,147,18)" rx="2" ry="2" />
<text  x="769.77" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%)</title><rect x="816.3" y="293" width="0.7" height="15.0" fill="rgb(217,162,12)" rx="2" ry="2" />
<text  x="819.30" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="702.1" y="661" width="0.2" height="15.0" fill="rgb(241,113,49)" rx="2" ry="2" />
<text  x="705.07" y="671.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (8 samples, 0.15%)</title><rect x="69.6" y="581" width="1.8" height="15.0" fill="rgb(220,109,30)" rx="2" ry="2" />
<text  x="72.57" y="591.5" ></text>
</g>
<g >
<title>validation::validate_column_family (35 samples, 0.66%)</title><rect x="839.5" y="549" width="7.8" height="15.0" fill="rgb(243,77,10)" rx="2" ry="2" />
<text  x="842.50" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (10 samples, 0.19%)</title><rect x="697.4" y="645" width="2.2" height="15.0" fill="rgb(242,115,30)" rx="2" ry="2" />
<text  x="700.39" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="935.4" y="533" width="0.9" height="15.0" fill="rgb(253,185,44)" rx="2" ry="2" />
<text  x="938.44" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="704.5" y="629" width="0.5" height="15.0" fill="rgb(211,88,30)" rx="2" ry="2" />
<text  x="707.52" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.9" y="533" width="0.2" height="15.0" fill="rgb(225,43,38)" rx="2" ry="2" />
<text  x="69.89" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="44.6" y="357" width="0.2" height="15.0" fill="rgb(226,80,41)" rx="2" ry="2" />
<text  x="47.58" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="702.1" y="421" width="0.2" height="15.0" fill="rgb(222,124,41)" rx="2" ry="2" />
<text  x="705.07" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="18.3" y="597" width="0.2" height="15.0" fill="rgb(238,60,18)" rx="2" ry="2" />
<text  x="21.25" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1163.7" y="453" width="0.2" height="15.0" fill="rgb(207,189,50)" rx="2" ry="2" />
<text  x="1166.67" y="463.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="493.7" y="453" width="0.4" height="15.0" fill="rgb(225,113,46)" rx="2" ry="2" />
<text  x="496.69" y="463.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="1129.3" y="229" width="0.2" height="15.0" fill="rgb(210,24,28)" rx="2" ry="2" />
<text  x="1132.32" y="239.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="40.1" y="501" width="0.2" height="15.0" fill="rgb(205,90,20)" rx="2" ry="2" />
<text  x="43.12" y="511.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (1 samples, 0.02%)</title><rect x="1130.0" y="293" width="0.2" height="15.0" fill="rgb(235,21,11)" rx="2" ry="2" />
<text  x="1132.98" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.2" y="341" width="0.3" height="15.0" fill="rgb(230,176,21)" rx="2" ry="2" />
<text  x="44.23" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="547.7" y="485" width="0.2" height="15.0" fill="rgb(241,72,35)" rx="2" ry="2" />
<text  x="550.68" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1078.4" y="517" width="0.3" height="15.0" fill="rgb(221,193,50)" rx="2" ry="2" />
<text  x="1081.45" y="527.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1076.0" y="469" width="0.2" height="15.0" fill="rgb(207,59,13)" rx="2" ry="2" />
<text  x="1078.99" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (2 samples, 0.04%)</title><rect x="620.9" y="549" width="0.4" height="15.0" fill="rgb(237,221,8)" rx="2" ry="2" />
<text  x="623.86" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="647.4" y="645" width="0.5" height="15.0" fill="rgb(241,215,15)" rx="2" ry="2" />
<text  x="650.41" y="655.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="318.1" y="453" width="1.8" height="15.0" fill="rgb(213,100,40)" rx="2" ry="2" />
<text  x="321.11" y="463.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1130.7" y="357" width="0.4" height="15.0" fill="rgb(220,20,51)" rx="2" ry="2" />
<text  x="1133.65" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="765.4" y="421" width="0.3" height="15.0" fill="rgb(246,100,50)" rx="2" ry="2" />
<text  x="768.43" y="431.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="193.4" y="405" width="0.2" height="15.0" fill="rgb(213,170,20)" rx="2" ry="2" />
<text  x="196.39" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (55 samples, 1.04%)</title><rect x="897.5" y="501" width="12.3" height="15.0" fill="rgb(233,153,16)" rx="2" ry="2" />
<text  x="900.51" y="511.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%)</title><rect x="30.1" y="421" width="0.2" height="15.0" fill="rgb(243,121,45)" rx="2" ry="2" />
<text  x="33.08" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="109.3" y="421" width="0.2" height="15.0" fill="rgb(244,160,13)" rx="2" ry="2" />
<text  x="112.28" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="824.1" y="405" width="0.2" height="15.0" fill="rgb(253,101,10)" rx="2" ry="2" />
<text  x="827.11" y="415.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="108.6" y="517" width="0.2" height="15.0" fill="rgb(217,134,14)" rx="2" ry="2" />
<text  x="111.61" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (573 samples, 10.83%)</title><rect x="956.2" y="549" width="127.8" height="15.0" fill="rgb(241,123,3)" rx="2" ry="2" />
<text  x="959.19" y="559.5" >service::storage..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1097.0" y="485" width="0.6" height="15.0" fill="rgb(239,133,27)" rx="2" ry="2" />
<text  x="1099.97" y="495.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1015.3" y="341" width="4.5" height="15.0" fill="rgb(227,193,45)" rx="2" ry="2" />
<text  x="1018.31" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1014.6" y="325" width="0.3" height="15.0" fill="rgb(250,171,38)" rx="2" ry="2" />
<text  x="1017.64" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="81.6" y="309" width="0.2" height="15.0" fill="rgb(209,202,32)" rx="2" ry="2" />
<text  x="84.62" y="319.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (46 samples, 0.87%)</title><rect x="343.5" y="357" width="10.3" height="15.0" fill="rgb(252,183,45)" rx="2" ry="2" />
<text  x="346.54" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="48.8" y="309" width="0.5" height="15.0" fill="rgb(231,184,1)" rx="2" ry="2" />
<text  x="51.82" y="319.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.1" y="565" width="0.2" height="15.0" fill="rgb(231,89,41)" rx="2" ry="2" />
<text  x="705.07" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="301.4" y="453" width="0.2" height="15.0" fill="rgb(209,60,19)" rx="2" ry="2" />
<text  x="304.37" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="684.9" y="629" width="0.9" height="15.0" fill="rgb(235,127,40)" rx="2" ry="2" />
<text  x="687.89" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="79.6" y="549" width="0.2" height="15.0" fill="rgb(231,39,31)" rx="2" ry="2" />
<text  x="82.61" y="559.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%)</title><rect x="77.6" y="597" width="0.2" height="15.0" fill="rgb(237,83,22)" rx="2" ry="2" />
<text  x="80.60" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%)</title><rect x="937.9" y="533" width="0.9" height="15.0" fill="rgb(252,90,53)" rx="2" ry="2" />
<text  x="940.89" y="543.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="78.9" y="565" width="0.9" height="15.0" fill="rgb(208,156,5)" rx="2" ry="2" />
<text  x="81.94" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="84.3" y="533" width="0.7" height="15.0" fill="rgb(218,115,28)" rx="2" ry="2" />
<text  x="87.29" y="543.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1118.2" y="325" width="0.2" height="15.0" fill="rgb(243,146,42)" rx="2" ry="2" />
<text  x="1121.16" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (13 samples, 0.25%)</title><rect x="608.1" y="581" width="2.9" height="15.0" fill="rgb(242,15,1)" rx="2" ry="2" />
<text  x="611.14" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (5 samples, 0.09%)</title><rect x="273.7" y="405" width="1.1" height="15.0" fill="rgb(222,178,16)" rx="2" ry="2" />
<text  x="276.71" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="81.6" y="773" width="0.2" height="15.0" fill="rgb(245,195,38)" rx="2" ry="2" />
<text  x="84.62" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (12 samples, 0.23%)</title><rect x="878.5" y="517" width="2.7" height="15.0" fill="rgb(248,74,51)" rx="2" ry="2" />
<text  x="881.55" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1141.4" y="645" width="0.2" height="15.0" fill="rgb(250,130,52)" rx="2" ry="2" />
<text  x="1144.36" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.2" y="517" width="0.2" height="15.0" fill="rgb(215,155,0)" rx="2" ry="2" />
<text  x="69.22" y="527.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%)</title><rect x="1034.5" y="437" width="0.4" height="15.0" fill="rgb(224,216,9)" rx="2" ry="2" />
<text  x="1037.50" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="992.8" y="389" width="0.2" height="15.0" fill="rgb(235,32,3)" rx="2" ry="2" />
<text  x="995.78" y="399.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (578 samples, 10.93%)</title><rect x="325.0" y="549" width="129.0" height="15.0" fill="rgb(215,118,19)" rx="2" ry="2" />
<text  x="328.02" y="559.5" >query::consume_p..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="330.8" y="405" width="0.5" height="15.0" fill="rgb(254,202,37)" rx="2" ry="2" />
<text  x="333.82" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%)</title><rect x="573.6" y="501" width="0.2" height="15.0" fill="rgb(254,29,50)" rx="2" ry="2" />
<text  x="576.56" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="76.9" y="533" width="0.3" height="15.0" fill="rgb(248,199,41)" rx="2" ry="2" />
<text  x="79.93" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="702.1" y="645" width="0.2" height="15.0" fill="rgb(217,8,1)" rx="2" ry="2" />
<text  x="705.07" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="56.9" y="309" width="0.6" height="15.0" fill="rgb(210,40,8)" rx="2" ry="2" />
<text  x="59.85" y="319.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%)</title><rect x="1189.8" y="789" width="0.2" height="15.0" fill="rgb(210,198,54)" rx="2" ry="2" />
<text  x="1192.78" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="60.6" y="341" width="0.3" height="15.0" fill="rgb(241,92,37)" rx="2" ry="2" />
<text  x="63.64" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (2 samples, 0.04%)</title><rect x="1134.2" y="645" width="0.5" height="15.0" fill="rgb(228,98,35)" rx="2" ry="2" />
<text  x="1137.22" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="53.1" y="437" width="0.6" height="15.0" fill="rgb(236,72,40)" rx="2" ry="2" />
<text  x="56.06" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (15 samples, 0.28%)</title><rect x="759.0" y="533" width="3.3" height="15.0" fill="rgb(224,198,21)" rx="2" ry="2" />
<text  x="761.96" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="422.1" y="293" width="1.3" height="15.0" fill="rgb(229,206,12)" rx="2" ry="2" />
<text  x="425.07" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="717.7" y="629" width="0.7" height="15.0" fill="rgb(216,157,2)" rx="2" ry="2" />
<text  x="720.69" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="667.0" y="597" width="0.3" height="15.0" fill="rgb(238,171,34)" rx="2" ry="2" />
<text  x="670.04" y="607.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="532.7" y="325" width="0.5" height="15.0" fill="rgb(232,133,10)" rx="2" ry="2" />
<text  x="535.73" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;db::cf_holder&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1124.2" y="405" width="0.2" height="15.0" fill="rgb(252,56,4)" rx="2" ry="2" />
<text  x="1127.18" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="684.0" y="645" width="0.2" height="15.0" fill="rgb(243,178,37)" rx="2" ry="2" />
<text  x="687.00" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="606.6" y="565" width="0.2" height="15.0" fill="rgb(206,106,48)" rx="2" ry="2" />
<text  x="609.58" y="575.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.06%)</title><rect x="620.2" y="533" width="0.7" height="15.0" fill="rgb(221,208,28)" rx="2" ry="2" />
<text  x="623.19" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="179.3" y="437" width="0.3" height="15.0" fill="rgb(238,222,12)" rx="2" ry="2" />
<text  x="182.34" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1114.4" y="597" width="0.2" height="15.0" fill="rgb(239,186,11)" rx="2" ry="2" />
<text  x="1117.37" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="538.3" y="453" width="0.2" height="15.0" fill="rgb(217,102,18)" rx="2" ry="2" />
<text  x="541.31" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1022.4" y="389" width="0.3" height="15.0" fill="rgb(210,54,40)" rx="2" ry="2" />
<text  x="1025.45" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (1 samples, 0.02%)</title><rect x="353.8" y="357" width="0.2" height="15.0" fill="rgb(215,146,0)" rx="2" ry="2" />
<text  x="356.80" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.11%)</title><rect x="50.4" y="469" width="1.3" height="15.0" fill="rgb(221,224,46)" rx="2" ry="2" />
<text  x="53.38" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="676.0" y="645" width="0.2" height="15.0" fill="rgb(229,219,12)" rx="2" ry="2" />
<text  x="678.97" y="655.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="740.9" y="613" width="0.2" height="15.0" fill="rgb(212,162,6)" rx="2" ry="2" />
<text  x="743.89" y="623.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (4 samples, 0.08%)</title><rect x="701.0" y="629" width="0.8" height="15.0" fill="rgb(212,104,23)" rx="2" ry="2" />
<text  x="703.95" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="17.4" y="613" width="0.2" height="15.0" fill="rgb(252,126,14)" rx="2" ry="2" />
<text  x="20.36" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.23%)</title><rect x="834.8" y="501" width="2.7" height="15.0" fill="rgb(248,56,21)" rx="2" ry="2" />
<text  x="837.82" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (11 samples, 0.21%)</title><rect x="746.2" y="469" width="2.5" height="15.0" fill="rgb(240,186,24)" rx="2" ry="2" />
<text  x="749.25" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::close (151 samples, 2.85%)</title><rect x="571.6" y="597" width="33.6" height="15.0" fill="rgb(236,181,49)" rx="2" ry="2" />
<text  x="574.55" y="607.5" >qu..</text>
</g>
<g >
<title>cql3::untyped_result_set::untyped_result_set (1 samples, 0.02%)</title><rect x="656.6" y="613" width="0.2" height="15.0" fill="rgb(219,81,33)" rx="2" ry="2" />
<text  x="659.56" y="623.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="855.8" y="501" width="0.4" height="15.0" fill="rgb(218,44,48)" rx="2" ry="2" />
<text  x="858.79" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (7 samples, 0.13%)</title><rect x="257.0" y="293" width="1.5" height="15.0" fill="rgb(228,32,11)" rx="2" ry="2" />
<text  x="259.98" y="303.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="76.9" y="581" width="0.3" height="15.0" fill="rgb(243,36,24)" rx="2" ry="2" />
<text  x="79.93" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="426.8" y="325" width="0.2" height="15.0" fill="rgb(235,175,23)" rx="2" ry="2" />
<text  x="429.76" y="335.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (15 samples, 0.28%)</title><rect x="970.2" y="501" width="3.4" height="15.0" fill="rgb(225,61,41)" rx="2" ry="2" />
<text  x="973.24" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="879.9" y="421" width="0.2" height="15.0" fill="rgb(239,182,36)" rx="2" ry="2" />
<text  x="882.88" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1028.7" y="437" width="0.2" height="15.0" fill="rgb(253,113,47)" rx="2" ry="2" />
<text  x="1031.70" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="49.9" y="421" width="0.3" height="15.0" fill="rgb(221,43,50)" rx="2" ry="2" />
<text  x="52.94" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="622.4" y="565" width="0.2" height="15.0" fill="rgb(238,148,48)" rx="2" ry="2" />
<text  x="625.42" y="575.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::data_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="81.6" y="197" width="0.2" height="15.0" fill="rgb(205,167,18)" rx="2" ry="2" />
<text  x="84.62" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="1025.1" y="405" width="1.4" height="15.0" fill="rgb(217,228,44)" rx="2" ry="2" />
<text  x="1028.13" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.09%)</title><rect x="491.5" y="469" width="1.1" height="15.0" fill="rgb(227,120,2)" rx="2" ry="2" />
<text  x="494.46" y="479.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1117.9" y="325" width="0.3" height="15.0" fill="rgb(241,151,46)" rx="2" ry="2" />
<text  x="1120.94" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%)</title><rect x="198.3" y="373" width="1.6" height="15.0" fill="rgb(232,176,5)" rx="2" ry="2" />
<text  x="201.30" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (9 samples, 0.17%)</title><rect x="980.7" y="485" width="2.0" height="15.0" fill="rgb(239,42,8)" rx="2" ry="2" />
<text  x="983.73" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="41.2" y="389" width="0.3" height="15.0" fill="rgb(205,215,16)" rx="2" ry="2" />
<text  x="44.23" y="399.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (11 samples, 0.21%)</title><rect x="1142.7" y="629" width="2.5" height="15.0" fill="rgb(224,225,43)" rx="2" ry="2" />
<text  x="1145.70" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_create_nodes (1 samples, 0.02%)</title><rect x="22.0" y="517" width="0.3" height="15.0" fill="rgb(233,226,34)" rx="2" ry="2" />
<text  x="25.05" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="78.3" y="645" width="0.2" height="15.0" fill="rgb(241,229,7)" rx="2" ry="2" />
<text  x="81.27" y="655.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="863.4" y="517" width="0.2" height="15.0" fill="rgb(239,164,54)" rx="2" ry="2" />
<text  x="866.37" y="527.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="18.5" y="677" width="0.2" height="15.0" fill="rgb(226,174,30)" rx="2" ry="2" />
<text  x="21.48" y="687.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (5 samples, 0.09%)</title><rect x="184.7" y="405" width="1.1" height="15.0" fill="rgb(209,81,54)" rx="2" ry="2" />
<text  x="187.69" y="415.5" ></text>
</g>
<g >
<title>cql3::cf_name::~cf_name (2 samples, 0.04%)</title><rect x="43.0" y="517" width="0.5" height="15.0" fill="rgb(248,186,1)" rx="2" ry="2" />
<text  x="46.02" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="51.9" y="453" width="0.3" height="15.0" fill="rgb(220,104,12)" rx="2" ry="2" />
<text  x="54.94" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%)</title><rect x="179.6" y="437" width="0.2" height="15.0" fill="rgb(253,16,47)" rx="2" ry="2" />
<text  x="182.56" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (2 samples, 0.04%)</title><rect x="586.9" y="453" width="0.5" height="15.0" fill="rgb(249,202,32)" rx="2" ry="2" />
<text  x="589.95" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="44.8" y="453" width="0.7" height="15.0" fill="rgb(254,8,41)" rx="2" ry="2" />
<text  x="47.80" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.09%)</title><rect x="640.9" y="565" width="1.2" height="15.0" fill="rgb(221,152,51)" rx="2" ry="2" />
<text  x="643.94" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="109.3" y="549" width="0.2" height="15.0" fill="rgb(227,122,40)" rx="2" ry="2" />
<text  x="112.28" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.0" y="389" width="0.2" height="15.0" fill="rgb(209,66,54)" rx="2" ry="2" />
<text  x="62.98" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="601.9" y="533" width="0.2" height="15.0" fill="rgb(228,164,21)" rx="2" ry="2" />
<text  x="604.90" y="543.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="16.9" y="725" width="0.2" height="15.0" fill="rgb(209,124,41)" rx="2" ry="2" />
<text  x="19.92" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (2 samples, 0.04%)</title><rect x="790.0" y="517" width="0.4" height="15.0" fill="rgb(250,91,48)" rx="2" ry="2" />
<text  x="792.97" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%)</title><rect x="84.1" y="597" width="0.9" height="15.0" fill="rgb(249,197,15)" rx="2" ry="2" />
<text  x="87.07" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="182.0" y="405" width="0.5" height="15.0" fill="rgb(243,190,15)" rx="2" ry="2" />
<text  x="185.01" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%)</title><rect x="1094.5" y="549" width="0.2" height="15.0" fill="rgb(244,137,28)" rx="2" ry="2" />
<text  x="1097.51" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1127.8" y="469" width="4.4" height="15.0" fill="rgb(211,74,32)" rx="2" ry="2" />
<text  x="1130.75" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (5 samples, 0.09%)</title><rect x="638.7" y="565" width="1.1" height="15.0" fill="rgb(210,94,11)" rx="2" ry="2" />
<text  x="641.71" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.4" y="437" width="0.2" height="15.0" fill="rgb(241,39,46)" rx="2" ry="2" />
<text  x="63.42" y="447.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="662.6" y="629" width="0.2" height="15.0" fill="rgb(234,183,3)" rx="2" ry="2" />
<text  x="665.58" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%)</title><rect x="72.7" y="501" width="0.2" height="15.0" fill="rgb(235,126,44)" rx="2" ry="2" />
<text  x="75.69" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="96.6" y="613" width="0.2" height="15.0" fill="rgb(229,206,4)" rx="2" ry="2" />
<text  x="99.56" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="892.8" y="581" width="0.2" height="15.0" fill="rgb(243,165,15)" rx="2" ry="2" />
<text  x="895.82" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="48.8" y="373" width="0.5" height="15.0" fill="rgb(214,112,11)" rx="2" ry="2" />
<text  x="51.82" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (2 samples, 0.04%)</title><rect x="463.1" y="501" width="0.5" height="15.0" fill="rgb(226,97,4)" rx="2" ry="2" />
<text  x="466.13" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="321.0" y="517" width="0.2" height="15.0" fill="rgb(248,156,52)" rx="2" ry="2" />
<text  x="324.01" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="549" width="9.2" height="15.0" fill="rgb(230,201,8)" rx="2" ry="2" />
<text  x="1118.71" y="559.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7 samples, 0.13%)</title><rect x="693.6" y="629" width="1.6" height="15.0" fill="rgb(228,187,18)" rx="2" ry="2" />
<text  x="696.59" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="938.6" y="485" width="0.2" height="15.0" fill="rgb(232,66,3)" rx="2" ry="2" />
<text  x="941.56" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (15 samples, 0.28%)</title><rect x="990.3" y="453" width="3.4" height="15.0" fill="rgb(218,169,36)" rx="2" ry="2" />
<text  x="993.32" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="834.8" y="485" width="0.2" height="15.0" fill="rgb(212,118,28)" rx="2" ry="2" />
<text  x="837.82" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="74.0" y="501" width="0.3" height="15.0" fill="rgb(233,35,48)" rx="2" ry="2" />
<text  x="77.03" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (5 samples, 0.09%)</title><rect x="534.5" y="373" width="1.1" height="15.0" fill="rgb(228,62,5)" rx="2" ry="2" />
<text  x="537.52" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1134.9" y="661" width="0.2" height="15.0" fill="rgb(241,79,26)" rx="2" ry="2" />
<text  x="1137.89" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.34%)</title><rect x="1069.3" y="421" width="4.0" height="15.0" fill="rgb(230,202,16)" rx="2" ry="2" />
<text  x="1072.30" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="1144.0" y="581" width="0.3" height="15.0" fill="rgb(209,157,36)" rx="2" ry="2" />
<text  x="1147.04" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.43%)</title><rect x="877.0" y="565" width="5.1" height="15.0" fill="rgb(249,223,11)" rx="2" ry="2" />
<text  x="879.98" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%)</title><rect x="82.1" y="597" width="0.2" height="15.0" fill="rgb(210,48,9)" rx="2" ry="2" />
<text  x="85.06" y="607.5" ></text>
</g>
<g >
<title>dht::ring_position_range_sharder::next (1 samples, 0.02%)</title><rect x="109.3" y="341" width="0.2" height="15.0" fill="rgb(251,83,46)" rx="2" ry="2" />
<text  x="112.28" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="56.6" y="341" width="0.3" height="15.0" fill="rgb(218,176,8)" rx="2" ry="2" />
<text  x="59.63" y="351.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="22.9" y="501" width="0.3" height="15.0" fill="rgb(208,150,47)" rx="2" ry="2" />
<text  x="25.94" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1147.4" y="565" width="0.2" height="15.0" fill="rgb(213,112,19)" rx="2" ry="2" />
<text  x="1150.39" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (1 samples, 0.02%)</title><rect x="876.1" y="501" width="0.2" height="15.0" fill="rgb(251,195,16)" rx="2" ry="2" />
<text  x="879.09" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="56.9" y="325" width="0.6" height="15.0" fill="rgb(247,96,21)" rx="2" ry="2" />
<text  x="59.85" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="56.6" y="309" width="0.3" height="15.0" fill="rgb(210,5,44)" rx="2" ry="2" />
<text  x="59.63" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.1" y="389" width="0.2" height="15.0" fill="rgb(207,39,52)" rx="2" ry="2" />
<text  x="66.10" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="259.9" y="325" width="0.9" height="15.0" fill="rgb(230,7,10)" rx="2" ry="2" />
<text  x="262.88" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="215.9" y="309" width="0.2" height="15.0" fill="rgb(227,134,8)" rx="2" ry="2" />
<text  x="218.93" y="319.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="139.2" y="613" width="0.2" height="15.0" fill="rgb(243,207,49)" rx="2" ry="2" />
<text  x="142.18" y="623.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="18.3" y="549" width="0.2" height="15.0" fill="rgb(240,71,21)" rx="2" ry="2" />
<text  x="21.25" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="855.3" y="517" width="0.9" height="15.0" fill="rgb(245,72,44)" rx="2" ry="2" />
<text  x="858.34" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="639.8" y="597" width="0.5" height="15.0" fill="rgb(215,44,26)" rx="2" ry="2" />
<text  x="642.82" y="607.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.7" y="693" width="0.2" height="15.0" fill="rgb(211,157,8)" rx="2" ry="2" />
<text  x="19.69" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.08%)</title><rect x="950.2" y="501" width="0.9" height="15.0" fill="rgb(235,103,33)" rx="2" ry="2" />
<text  x="953.16" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="678.0" y="645" width="0.2" height="15.0" fill="rgb(219,93,15)" rx="2" ry="2" />
<text  x="680.98" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (4 samples, 0.08%)</title><rect x="544.6" y="485" width="0.9" height="15.0" fill="rgb(228,105,46)" rx="2" ry="2" />
<text  x="547.56" y="495.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="702.1" y="597" width="0.2" height="15.0" fill="rgb(254,165,15)" rx="2" ry="2" />
<text  x="705.07" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="592.7" y="485" width="0.3" height="15.0" fill="rgb(251,98,11)" rx="2" ry="2" />
<text  x="595.75" y="495.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (36 samples, 0.68%)</title><rect x="547.9" y="485" width="8.0" height="15.0" fill="rgb(248,162,46)" rx="2" ry="2" />
<text  x="550.91" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="1158.3" y="629" width="0.5" height="15.0" fill="rgb(253,86,47)" rx="2" ry="2" />
<text  x="1161.32" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (2 samples, 0.04%)</title><rect x="535.9" y="389" width="0.4" height="15.0" fill="rgb(218,105,24)" rx="2" ry="2" />
<text  x="538.86" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="84.3" y="517" width="0.7" height="15.0" fill="rgb(254,118,41)" rx="2" ry="2" />
<text  x="87.29" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="1120.6" y="357" width="0.5" height="15.0" fill="rgb(215,20,15)" rx="2" ry="2" />
<text  x="1123.61" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (8 samples, 0.15%)</title><rect x="239.4" y="277" width="1.7" height="15.0" fill="rgb(205,196,53)" rx="2" ry="2" />
<text  x="242.35" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="821.7" y="245" width="0.4" height="15.0" fill="rgb(229,20,35)" rx="2" ry="2" />
<text  x="824.65" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (47 samples, 0.89%)</title><rect x="690.5" y="661" width="10.5" height="15.0" fill="rgb(217,129,14)" rx="2" ry="2" />
<text  x="693.47" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="960.2" y="469" width="0.2" height="15.0" fill="rgb(234,98,24)" rx="2" ry="2" />
<text  x="963.20" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="49.7" y="453" width="0.2" height="15.0" fill="rgb(222,23,7)" rx="2" ry="2" />
<text  x="52.71" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="878.1" y="517" width="0.2" height="15.0" fill="rgb(207,63,37)" rx="2" ry="2" />
<text  x="881.10" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (42 samples, 0.79%)</title><rect x="27.8" y="469" width="9.4" height="15.0" fill="rgb(242,136,52)" rx="2" ry="2" />
<text  x="30.85" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="877.2" y="501" width="0.2" height="15.0" fill="rgb(210,11,46)" rx="2" ry="2" />
<text  x="880.21" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (7 samples, 0.13%)</title><rect x="1126.0" y="421" width="1.5" height="15.0" fill="rgb(254,32,10)" rx="2" ry="2" />
<text  x="1128.97" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="83.4" y="581" width="0.2" height="15.0" fill="rgb(224,143,3)" rx="2" ry="2" />
<text  x="86.40" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%)</title><rect x="26.1" y="341" width="0.2" height="15.0" fill="rgb(248,203,53)" rx="2" ry="2" />
<text  x="29.06" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (29 samples, 0.55%)</title><rect x="1125.7" y="485" width="6.5" height="15.0" fill="rgb(222,26,27)" rx="2" ry="2" />
<text  x="1128.75" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="60.2" y="437" width="0.2" height="15.0" fill="rgb(228,137,46)" rx="2" ry="2" />
<text  x="63.20" y="447.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1 samples, 0.02%)</title><rect x="78.5" y="613" width="0.2" height="15.0" fill="rgb(213,171,46)" rx="2" ry="2" />
<text  x="81.49" y="623.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.5" y="341" width="0.2" height="15.0" fill="rgb(238,19,3)" rx="2" ry="2" />
<text  x="54.50" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="25.2" y="389" width="1.5" height="15.0" fill="rgb(250,35,5)" rx="2" ry="2" />
<text  x="28.17" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%)</title><rect x="64.0" y="485" width="0.2" height="15.0" fill="rgb(244,155,53)" rx="2" ry="2" />
<text  x="66.99" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.5" y="373" width="0.2" height="15.0" fill="rgb(244,151,10)" rx="2" ry="2" />
<text  x="815.51" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="858.5" y="581" width="0.2" height="15.0" fill="rgb(212,64,25)" rx="2" ry="2" />
<text  x="861.47" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.09%)</title><rect x="1126.2" y="357" width="1.1" height="15.0" fill="rgb(208,48,34)" rx="2" ry="2" />
<text  x="1129.19" y="367.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="850.7" y="533" width="0.6" height="15.0" fill="rgb(244,164,31)" rx="2" ry="2" />
<text  x="853.66" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="60.0" y="357" width="0.2" height="15.0" fill="rgb(242,184,41)" rx="2" ry="2" />
<text  x="62.98" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%)</title><rect x="865.6" y="533" width="0.2" height="15.0" fill="rgb(249,26,25)" rx="2" ry="2" />
<text  x="868.61" y="543.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%)</title><rect x="108.8" y="549" width="0.5" height="15.0" fill="rgb(240,12,42)" rx="2" ry="2" />
<text  x="111.84" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="638.0" y="581" width="0.3" height="15.0" fill="rgb(221,134,51)" rx="2" ry="2" />
<text  x="641.04" y="591.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1118.2" y="341" width="0.2" height="15.0" fill="rgb(211,105,8)" rx="2" ry="2" />
<text  x="1121.16" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (4 samples, 0.08%)</title><rect x="900.0" y="469" width="0.9" height="15.0" fill="rgb(207,145,37)" rx="2" ry="2" />
<text  x="902.96" y="479.5" ></text>
</g>
<g >
<title>cache_tracker::cache_tracker (1 samples, 0.02%)</title><rect x="18.0" y="501" width="0.3" height="15.0" fill="rgb(219,158,35)" rx="2" ry="2" />
<text  x="21.03" y="511.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="505.5" y="357" width="0.5" height="15.0" fill="rgb(245,3,12)" rx="2" ry="2" />
<text  x="508.52" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="1047.7" y="437" width="0.4" height="15.0" fill="rgb(245,118,7)" rx="2" ry="2" />
<text  x="1050.66" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="18.3" y="661" width="0.2" height="15.0" fill="rgb(208,44,24)" rx="2" ry="2" />
<text  x="21.25" y="671.5" ></text>
</g>
<g >
<title>cql3::update_parameters::prefetch_data::prefetch_data (1 samples, 0.02%)</title><rect x="881.7" y="517" width="0.2" height="15.0" fill="rgb(214,117,16)" rx="2" ry="2" />
<text  x="884.67" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="646.1" y="437" width="0.2" height="15.0" fill="rgb(235,87,50)" rx="2" ry="2" />
<text  x="649.07" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="871.0" y="629" width="0.6" height="15.0" fill="rgb(209,26,9)" rx="2" ry="2" />
<text  x="873.96" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (1 samples, 0.02%)</title><rect x="720.1" y="597" width="0.3" height="15.0" fill="rgb(244,38,32)" rx="2" ry="2" />
<text  x="723.14" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.3" y="405" width="0.2" height="15.0" fill="rgb(227,104,23)" rx="2" ry="2" />
<text  x="64.31" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="355.1" y="357" width="0.5" height="15.0" fill="rgb(207,107,26)" rx="2" ry="2" />
<text  x="358.14" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="22.3" y="549" width="0.2" height="15.0" fill="rgb(246,202,33)" rx="2" ry="2" />
<text  x="25.27" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (4 samples, 0.08%)</title><rect x="289.3" y="373" width="0.9" height="15.0" fill="rgb(241,164,39)" rx="2" ry="2" />
<text  x="292.33" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1083.8" y="533" width="0.2" height="15.0" fill="rgb(216,129,31)" rx="2" ry="2" />
<text  x="1086.80" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%)</title><rect x="252.1" y="293" width="0.2" height="15.0" fill="rgb(242,74,10)" rx="2" ry="2" />
<text  x="255.07" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="861.1" y="533" width="0.5" height="15.0" fill="rgb(251,218,43)" rx="2" ry="2" />
<text  x="864.14" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (5 samples, 0.09%)</title><rect x="623.5" y="597" width="1.2" height="15.0" fill="rgb(248,154,23)" rx="2" ry="2" />
<text  x="626.54" y="607.5" ></text>
</g>
<g >
<title>schema_registry_entry::is_synced (1 samples, 0.02%)</title><rect x="1124.6" y="501" width="0.3" height="15.0" fill="rgb(251,53,22)" rx="2" ry="2" />
<text  x="1127.63" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (10 samples, 0.19%)</title><rect x="949.3" y="565" width="2.2" height="15.0" fill="rgb(210,3,13)" rx="2" ry="2" />
<text  x="952.27" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%)</title><rect x="259.0" y="309" width="0.7" height="15.0" fill="rgb(253,41,32)" rx="2" ry="2" />
<text  x="261.98" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="919.8" y="533" width="0.5" height="15.0" fill="rgb(233,68,47)" rx="2" ry="2" />
<text  x="922.82" y="543.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.4" y="357" width="0.2" height="15.0" fill="rgb(238,62,38)" rx="2" ry="2" />
<text  x="30.40" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (3 samples, 0.06%)</title><rect x="823.7" y="421" width="0.6" height="15.0" fill="rgb(229,46,40)" rx="2" ry="2" />
<text  x="826.66" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%)</title><rect x="173.5" y="469" width="0.5" height="15.0" fill="rgb(243,117,14)" rx="2" ry="2" />
<text  x="176.54" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="48.8" y="341" width="0.5" height="15.0" fill="rgb(221,68,16)" rx="2" ry="2" />
<text  x="51.82" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (11 samples, 0.21%)</title><rect x="338.0" y="389" width="2.4" height="15.0" fill="rgb(207,43,50)" rx="2" ry="2" />
<text  x="340.96" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1021.1" y="357" width="0.2" height="15.0" fill="rgb(227,150,49)" rx="2" ry="2" />
<text  x="1024.11" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="73.4" y="469" width="0.2" height="15.0" fill="rgb(246,154,51)" rx="2" ry="2" />
<text  x="76.36" y="479.5" ></text>
</g>
<g >
<title>database::find_uuid (29 samples, 0.55%)</title><rect x="779.7" y="549" width="6.5" height="15.0" fill="rgb(224,115,17)" rx="2" ry="2" />
<text  x="782.71" y="559.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_expression (2 samples, 0.04%)</title><rect x="72.2" y="517" width="0.5" height="15.0" fill="rgb(230,180,15)" rx="2" ry="2" />
<text  x="75.25" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="822.3" y="309" width="0.2" height="15.0" fill="rgb(215,76,17)" rx="2" ry="2" />
<text  x="825.32" y="319.5" ></text>
</g>
<g >
<title>auth::find_record (1 samples, 0.02%)</title><rect x="1163.7" y="405" width="0.2" height="15.0" fill="rgb(212,206,52)" rx="2" ry="2" />
<text  x="1166.67" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (3 samples, 0.06%)</title><rect x="767.2" y="565" width="0.7" height="15.0" fill="rgb(224,74,11)" rx="2" ry="2" />
<text  x="770.22" y="575.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (19 samples, 0.36%)</title><rect x="744.7" y="549" width="4.2" height="15.0" fill="rgb(240,122,8)" rx="2" ry="2" />
<text  x="747.68" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="79.6" y="517" width="0.2" height="15.0" fill="rgb(247,16,15)" rx="2" ry="2" />
<text  x="82.61" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1103.9" y="581" width="0.2" height="15.0" fill="rgb(249,72,4)" rx="2" ry="2" />
<text  x="1106.88" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="50.6" y="309" width="0.2" height="15.0" fill="rgb(233,168,46)" rx="2" ry="2" />
<text  x="53.61" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="701.6" y="437" width="0.2" height="15.0" fill="rgb(229,90,9)" rx="2" ry="2" />
<text  x="704.62" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="201.2" y="357" width="0.9" height="15.0" fill="rgb(229,169,39)" rx="2" ry="2" />
<text  x="204.20" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="113.1" y="645" width="0.4" height="15.0" fill="rgb(241,104,49)" rx="2" ry="2" />
<text  x="116.07" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="982.7" y="501" width="0.3" height="15.0" fill="rgb(235,21,14)" rx="2" ry="2" />
<text  x="985.74" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="702.7" y="661" width="0.3" height="15.0" fill="rgb(237,108,18)" rx="2" ry="2" />
<text  x="705.74" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="515.3" y="437" width="0.7" height="15.0" fill="rgb(254,183,36)" rx="2" ry="2" />
<text  x="518.33" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="58.9" y="389" width="0.2" height="15.0" fill="rgb(232,160,13)" rx="2" ry="2" />
<text  x="61.86" y="399.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="47.3" y="325" width="0.2" height="15.0" fill="rgb(222,153,45)" rx="2" ry="2" />
<text  x="50.26" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="777.3" y="501" width="2.4" height="15.0" fill="rgb(234,3,12)" rx="2" ry="2" />
<text  x="780.26" y="511.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (6 samples, 0.11%)</title><rect x="1164.8" y="629" width="1.3" height="15.0" fill="rgb(227,53,50)" rx="2" ry="2" />
<text  x="1167.79" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="768.8" y="565" width="0.4" height="15.0" fill="rgb(226,147,24)" rx="2" ry="2" />
<text  x="771.78" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="81.6" y="437" width="0.2" height="15.0" fill="rgb(208,7,13)" rx="2" ry="2" />
<text  x="84.62" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="669.3" y="613" width="0.4" height="15.0" fill="rgb(225,101,25)" rx="2" ry="2" />
<text  x="672.27" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="682.0" y="645" width="0.2" height="15.0" fill="rgb(238,181,15)" rx="2" ry="2" />
<text  x="684.99" y="655.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (4 samples, 0.08%)</title><rect x="1074.4" y="453" width="0.9" height="15.0" fill="rgb(233,70,49)" rx="2" ry="2" />
<text  x="1077.43" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="597.0" y="501" width="0.4" height="15.0" fill="rgb(216,152,2)" rx="2" ry="2" />
<text  x="599.99" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="419.0" y="309" width="2.0" height="15.0" fill="rgb(219,51,9)" rx="2" ry="2" />
<text  x="421.95" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="556.4" y="501" width="0.7" height="15.0" fill="rgb(253,115,31)" rx="2" ry="2" />
<text  x="559.38" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="951.1" y="501" width="0.4" height="15.0" fill="rgb(216,148,9)" rx="2" ry="2" />
<text  x="954.06" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="862.9" y="517" width="0.5" height="15.0" fill="rgb(246,74,21)" rx="2" ry="2" />
<text  x="865.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="33.2" y="405" width="0.2" height="15.0" fill="rgb(229,130,8)" rx="2" ry="2" />
<text  x="36.20" y="415.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (2 samples, 0.04%)</title><rect x="1101.0" y="581" width="0.4" height="15.0" fill="rgb(206,108,4)" rx="2" ry="2" />
<text  x="1103.98" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="878.3" y="533" width="0.2" height="15.0" fill="rgb(252,1,10)" rx="2" ry="2" />
<text  x="881.32" y="543.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="702.1" y="245" width="0.2" height="15.0" fill="rgb(240,9,31)" rx="2" ry="2" />
<text  x="705.07" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="50.4" y="453" width="1.3" height="15.0" fill="rgb(238,68,54)" rx="2" ry="2" />
<text  x="53.38" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="47.3" y="293" width="0.2" height="15.0" fill="rgb(241,131,13)" rx="2" ry="2" />
<text  x="50.26" y="303.5" ></text>
</g>
<g >
<title>database::database (1 samples, 0.02%)</title><rect x="18.0" y="517" width="0.3" height="15.0" fill="rgb(223,224,11)" rx="2" ry="2" />
<text  x="21.03" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1107.9" y="581" width="0.2" height="15.0" fill="rgb(242,104,51)" rx="2" ry="2" />
<text  x="1110.90" y="591.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="881.2" y="485" width="0.2" height="15.0" fill="rgb(208,89,29)" rx="2" ry="2" />
<text  x="884.22" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="862.9" y="501" width="0.5" height="15.0" fill="rgb(253,188,47)" rx="2" ry="2" />
<text  x="865.93" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="26.7" y="389" width="0.3" height="15.0" fill="rgb(223,197,20)" rx="2" ry="2" />
<text  x="29.73" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="589.0" y="469" width="0.4" height="15.0" fill="rgb(222,85,2)" rx="2" ry="2" />
<text  x="591.96" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="591.0" y="533" width="2.0" height="15.0" fill="rgb(212,17,52)" rx="2" ry="2" />
<text  x="593.96" y="543.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1118.4" y="373" width="0.2" height="15.0" fill="rgb(216,211,0)" rx="2" ry="2" />
<text  x="1121.38" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="919.4" y="517" width="0.2" height="15.0" fill="rgb(229,85,12)" rx="2" ry="2" />
<text  x="922.37" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="77.6" y="581" width="0.2" height="15.0" fill="rgb(247,123,30)" rx="2" ry="2" />
<text  x="80.60" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="979.6" y="501" width="0.2" height="15.0" fill="rgb(254,144,45)" rx="2" ry="2" />
<text  x="982.61" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="118.4" y="613" width="0.7" height="15.0" fill="rgb(230,155,46)" rx="2" ry="2" />
<text  x="121.43" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (18 samples, 0.34%)</title><rect x="841.7" y="501" width="4.0" height="15.0" fill="rgb(211,32,54)" rx="2" ry="2" />
<text  x="844.73" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (12 samples, 0.23%)</title><rect x="1078.7" y="517" width="2.6" height="15.0" fill="rgb(250,18,52)" rx="2" ry="2" />
<text  x="1081.67" y="527.5" ></text>
</g>
<g >
<title>main (4,844 samples, 91.59%)</title><rect x="86.1" y="773" width="1080.7" height="15.0" fill="rgb(219,150,43)" rx="2" ry="2" />
<text  x="89.08" y="783.5" >main</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (1 samples, 0.02%)</title><rect x="103.7" y="629" width="0.2" height="15.0" fill="rgb(222,25,34)" rx="2" ry="2" />
<text  x="106.70" y="639.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (9 samples, 0.17%)</title><rect x="618.9" y="549" width="2.0" height="15.0" fill="rgb(223,49,43)" rx="2" ry="2" />
<text  x="621.85" y="559.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="1166.1" y="661" width="0.3" height="15.0" fill="rgb(222,185,33)" rx="2" ry="2" />
<text  x="1169.13" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="47.3" y="405" width="0.4" height="15.0" fill="rgb(253,143,21)" rx="2" ry="2" />
<text  x="50.26" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.11%)</title><rect x="199.9" y="373" width="1.3" height="15.0" fill="rgb(253,57,37)" rx="2" ry="2" />
<text  x="202.86" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="81.6" y="565" width="0.2" height="15.0" fill="rgb(228,223,53)" rx="2" ry="2" />
<text  x="84.62" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1112.1" y="581" width="0.3" height="15.0" fill="rgb(213,214,7)" rx="2" ry="2" />
<text  x="1115.14" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="508.2" y="341" width="0.2" height="15.0" fill="rgb(236,179,35)" rx="2" ry="2" />
<text  x="511.19" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="701.6" y="469" width="0.2" height="15.0" fill="rgb(235,47,0)" rx="2" ry="2" />
<text  x="704.62" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="870.5" y="613" width="0.2" height="15.0" fill="rgb(239,194,40)" rx="2" ry="2" />
<text  x="873.51" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="76.9" y="565" width="0.3" height="15.0" fill="rgb(245,81,9)" rx="2" ry="2" />
<text  x="79.93" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (2 samples, 0.04%)</title><rect x="1023.8" y="373" width="0.4" height="15.0" fill="rgb(217,84,21)" rx="2" ry="2" />
<text  x="1026.79" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="931.6" y="533" width="0.3" height="15.0" fill="rgb(216,8,13)" rx="2" ry="2" />
<text  x="934.64" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="51.7" y="357" width="0.2" height="15.0" fill="rgb(209,205,48)" rx="2" ry="2" />
<text  x="54.72" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="279.5" y="357" width="0.2" height="15.0" fill="rgb(251,32,29)" rx="2" ry="2" />
<text  x="282.51" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (11 samples, 0.21%)</title><rect x="78.5" y="645" width="2.4" height="15.0" fill="rgb(219,180,18)" rx="2" ry="2" />
<text  x="81.49" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1119.1" y="357" width="0.2" height="15.0" fill="rgb(212,52,5)" rx="2" ry="2" />
<text  x="1122.05" y="367.5" ></text>
</g>
<g >
<title>__vfscanf_internal (1 samples, 0.02%)</title><rect x="16.0" y="757" width="0.2" height="15.0" fill="rgb(245,68,40)" rx="2" ry="2" />
<text  x="19.02" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="557.3" y="469" width="0.6" height="15.0" fill="rgb(223,133,51)" rx="2" ry="2" />
<text  x="560.28" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="639.2" y="549" width="0.4" height="15.0" fill="rgb(243,170,27)" rx="2" ry="2" />
<text  x="642.15" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="56.4" y="261" width="0.2" height="15.0" fill="rgb(212,110,47)" rx="2" ry="2" />
<text  x="59.41" y="271.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="701.6" y="421" width="0.2" height="15.0" fill="rgb(217,101,35)" rx="2" ry="2" />
<text  x="704.62" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="280.4" y="341" width="0.7" height="15.0" fill="rgb(240,198,31)" rx="2" ry="2" />
<text  x="283.40" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (4 samples, 0.08%)</title><rect x="132.7" y="549" width="0.9" height="15.0" fill="rgb(233,92,13)" rx="2" ry="2" />
<text  x="135.71" y="559.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1059.9" y="485" width="0.3" height="15.0" fill="rgb(219,193,5)" rx="2" ry="2" />
<text  x="1062.93" y="495.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (5 samples, 0.09%)</title><rect x="976.5" y="517" width="1.1" height="15.0" fill="rgb(242,81,38)" rx="2" ry="2" />
<text  x="979.49" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%)</title><rect x="877.2" y="517" width="0.2" height="15.0" fill="rgb(223,104,24)" rx="2" ry="2" />
<text  x="880.21" y="527.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="550.1" y="437" width="0.9" height="15.0" fill="rgb(243,95,47)" rx="2" ry="2" />
<text  x="553.14" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="261.7" y="341" width="0.2" height="15.0" fill="rgb(252,89,16)" rx="2" ry="2" />
<text  x="264.66" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (35 samples, 0.66%)</title><rect x="231.3" y="245" width="7.8" height="15.0" fill="rgb(226,199,23)" rx="2" ry="2" />
<text  x="234.32" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (13 samples, 0.25%)</title><rect x="745.8" y="485" width="2.9" height="15.0" fill="rgb(235,38,54)" rx="2" ry="2" />
<text  x="748.80" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.11%)</title><rect x="1155.9" y="645" width="1.3" height="15.0" fill="rgb(237,130,45)" rx="2" ry="2" />
<text  x="1158.87" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="108.8" y="613" width="0.5" height="15.0" fill="rgb(220,174,50)" rx="2" ry="2" />
<text  x="111.84" y="623.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="109.7" y="581" width="0.3" height="15.0" fill="rgb(233,20,29)" rx="2" ry="2" />
<text  x="112.73" y="591.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%)</title><rect x="140.1" y="389" width="0.2" height="15.0" fill="rgb(226,9,33)" rx="2" ry="2" />
<text  x="143.07" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (2 samples, 0.04%)</title><rect x="837.5" y="549" width="0.4" height="15.0" fill="rgb(232,80,36)" rx="2" ry="2" />
<text  x="840.49" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="682.4" y="629" width="0.3" height="15.0" fill="rgb(238,171,18)" rx="2" ry="2" />
<text  x="685.44" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="788.6" y="517" width="0.9" height="15.0" fill="rgb(239,20,41)" rx="2" ry="2" />
<text  x="791.63" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="298.7" y="469" width="0.2" height="15.0" fill="rgb(244,88,17)" rx="2" ry="2" />
<text  x="301.70" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="49.9" y="453" width="0.3" height="15.0" fill="rgb(250,86,46)" rx="2" ry="2" />
<text  x="52.94" y="463.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%)</title><rect x="58.6" y="453" width="0.3" height="15.0" fill="rgb(231,170,8)" rx="2" ry="2" />
<text  x="61.64" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="252.7" y="325" width="0.7" height="15.0" fill="rgb(229,140,2)" rx="2" ry="2" />
<text  x="255.74" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="888.1" y="629" width="0.3" height="15.0" fill="rgb(239,59,19)" rx="2" ry="2" />
<text  x="891.14" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="106.4" y="645" width="0.2" height="15.0" fill="rgb(215,71,4)" rx="2" ry="2" />
<text  x="109.38" y="655.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (703 samples, 13.29%)</title><rect x="165.1" y="549" width="156.8" height="15.0" fill="rgb(208,132,1)" rx="2" ry="2" />
<text  x="168.06" y="559.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="1129.5" y="261" width="0.3" height="15.0" fill="rgb(223,53,14)" rx="2" ry="2" />
<text  x="1132.54" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.0" y="293" width="0.3" height="15.0" fill="rgb(231,8,35)" rx="2" ry="2" />
<text  x="52.04" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.36%)</title><rect x="762.5" y="517" width="4.3" height="15.0" fill="rgb(219,189,44)" rx="2" ry="2" />
<text  x="765.53" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (273 samples, 5.16%)</title><rect x="786.4" y="565" width="60.9" height="15.0" fill="rgb(222,225,26)" rx="2" ry="2" />
<text  x="789.40" y="575.5" >servic..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="792.9" y="517" width="0.4" height="15.0" fill="rgb(217,78,28)" rx="2" ry="2" />
<text  x="795.87" y="527.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (8 samples, 0.15%)</title><rect x="1109.0" y="549" width="1.8" height="15.0" fill="rgb(227,39,26)" rx="2" ry="2" />
<text  x="1112.01" y="559.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="26.5" y="341" width="0.2" height="15.0" fill="rgb(222,219,8)" rx="2" ry="2" />
<text  x="29.51" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1136.0" y="661" width="0.2" height="15.0" fill="rgb(250,157,34)" rx="2" ry="2" />
<text  x="1139.01" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (5 samples, 0.09%)</title><rect x="600.6" y="501" width="1.1" height="15.0" fill="rgb(222,47,34)" rx="2" ry="2" />
<text  x="603.56" y="511.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1015.1" y="357" width="0.2" height="15.0" fill="rgb(213,70,15)" rx="2" ry="2" />
<text  x="1018.09" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="763.9" y="437" width="0.2" height="15.0" fill="rgb(231,194,8)" rx="2" ry="2" />
<text  x="766.87" y="447.5" ></text>
</g>
<g >
<title>posix_memalign (20 samples, 0.38%)</title><rect x="234.7" y="213" width="4.4" height="15.0" fill="rgb(252,54,38)" rx="2" ry="2" />
<text  x="237.67" y="223.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="105.0" y="517" width="0.3" height="15.0" fill="rgb(231,161,44)" rx="2" ry="2" />
<text  x="108.04" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%)</title><rect x="73.6" y="469" width="0.2" height="15.0" fill="rgb(211,135,17)" rx="2" ry="2" />
<text  x="76.58" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="478.5" y="469" width="0.5" height="15.0" fill="rgb(241,76,31)" rx="2" ry="2" />
<text  x="481.52" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1026.7" y="421" width="0.2" height="15.0" fill="rgb(211,111,11)" rx="2" ry="2" />
<text  x="1029.69" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="60.2" y="453" width="0.2" height="15.0" fill="rgb(233,66,15)" rx="2" ry="2" />
<text  x="63.20" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="610.6" y="549" width="0.4" height="15.0" fill="rgb(233,60,4)" rx="2" ry="2" />
<text  x="613.60" y="559.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="881.2" y="469" width="0.2" height="15.0" fill="rgb(231,32,53)" rx="2" ry="2" />
<text  x="884.22" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="82.3" y="565" width="0.2" height="15.0" fill="rgb(212,126,35)" rx="2" ry="2" />
<text  x="85.29" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="727.5" y="565" width="0.2" height="15.0" fill="rgb(246,215,25)" rx="2" ry="2" />
<text  x="730.50" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="939.7" y="565" width="0.2" height="15.0" fill="rgb(252,216,34)" rx="2" ry="2" />
<text  x="942.68" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (3 samples, 0.06%)</title><rect x="350.9" y="341" width="0.7" height="15.0" fill="rgb(222,74,36)" rx="2" ry="2" />
<text  x="353.90" y="351.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="262.3" y="373" width="0.5" height="15.0" fill="rgb(212,159,16)" rx="2" ry="2" />
<text  x="265.33" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="444.2" y="437" width="0.2" height="15.0" fill="rgb(229,214,32)" rx="2" ry="2" />
<text  x="447.16" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::unthrottle (1 samples, 0.02%)</title><rect x="702.5" y="613" width="0.2" height="15.0" fill="rgb(205,167,39)" rx="2" ry="2" />
<text  x="705.52" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="738.0" y="565" width="1.6" height="15.0" fill="rgb(217,225,16)" rx="2" ry="2" />
<text  x="740.99" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="606.1" y="581" width="0.7" height="15.0" fill="rgb(218,110,28)" rx="2" ry="2" />
<text  x="609.14" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="971.1" y="485" width="0.5" height="15.0" fill="rgb(244,141,23)" rx="2" ry="2" />
<text  x="974.13" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="134.3" y="565" width="0.2" height="15.0" fill="rgb(210,197,25)" rx="2" ry="2" />
<text  x="137.27" y="575.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (10 samples, 0.19%)</title><rect x="78.5" y="629" width="2.2" height="15.0" fill="rgb(236,136,26)" rx="2" ry="2" />
<text  x="81.49" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="77.8" y="581" width="0.5" height="15.0" fill="rgb(225,154,15)" rx="2" ry="2" />
<text  x="80.82" y="591.5" ></text>
</g>
<g >
<title>auth::resource::parent (11 samples, 0.21%)</title><rect x="800.2" y="485" width="2.5" height="15.0" fill="rgb(234,154,29)" rx="2" ry="2" />
<text  x="803.24" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="827.9" y="437" width="0.2" height="15.0" fill="rgb(217,193,20)" rx="2" ry="2" />
<text  x="830.90" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="869.8" y="565" width="0.7" height="15.0" fill="rgb(239,172,4)" rx="2" ry="2" />
<text  x="872.84" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.6" y="389" width="0.2" height="15.0" fill="rgb(225,117,31)" rx="2" ry="2" />
<text  x="1119.60" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="105.0" y="437" width="0.3" height="15.0" fill="rgb(240,79,3)" rx="2" ry="2" />
<text  x="108.04" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1022.0" y="373" width="0.4" height="15.0" fill="rgb(249,17,40)" rx="2" ry="2" />
<text  x="1025.00" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="58.6" y="373" width="0.3" height="15.0" fill="rgb(208,0,17)" rx="2" ry="2" />
<text  x="61.64" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1127.5" y="437" width="0.3" height="15.0" fill="rgb(227,219,3)" rx="2" ry="2" />
<text  x="1130.53" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="566.4" y="517" width="0.2" height="15.0" fill="rgb(227,130,26)" rx="2" ry="2" />
<text  x="569.42" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.66%)</title><rect x="1124.9" y="517" width="7.8" height="15.0" fill="rgb(249,10,8)" rx="2" ry="2" />
<text  x="1127.85" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="81.8" y="677" width="0.3" height="15.0" fill="rgb(220,107,36)" rx="2" ry="2" />
<text  x="84.84" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%)</title><rect x="905.3" y="437" width="1.8" height="15.0" fill="rgb(233,217,11)" rx="2" ry="2" />
<text  x="908.32" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (4 samples, 0.08%)</title><rect x="871.9" y="613" width="0.8" height="15.0" fill="rgb(231,44,3)" rx="2" ry="2" />
<text  x="874.85" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="41.0" y="469" width="0.9" height="15.0" fill="rgb(238,118,44)" rx="2" ry="2" />
<text  x="44.01" y="479.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (21 samples, 0.40%)</title><rect x="864.5" y="565" width="4.7" height="15.0" fill="rgb(211,33,54)" rx="2" ry="2" />
<text  x="867.49" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="444.4" y="437" width="0.7" height="15.0" fill="rgb(232,26,18)" rx="2" ry="2" />
<text  x="447.38" y="447.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%)</title><rect x="184.9" y="389" width="0.7" height="15.0" fill="rgb(212,74,16)" rx="2" ry="2" />
<text  x="187.91" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1130.7" y="309" width="0.2" height="15.0" fill="rgb(219,68,35)" rx="2" ry="2" />
<text  x="1133.65" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1083.1" y="517" width="0.5" height="15.0" fill="rgb(207,163,37)" rx="2" ry="2" />
<text  x="1086.13" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="81.6" y="693" width="0.2" height="15.0" fill="rgb(236,181,42)" rx="2" ry="2" />
<text  x="84.62" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="45.0" y="373" width="0.5" height="15.0" fill="rgb(248,113,34)" rx="2" ry="2" />
<text  x="48.03" y="383.5" ></text>
</g>
<g >
<title>backlog_controller::update_controller (1 samples, 0.02%)</title><rect x="1164.8" y="597" width="0.2" height="15.0" fill="rgb(240,163,52)" rx="2" ry="2" />
<text  x="1167.79" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="389" width="0.2" height="15.0" fill="rgb(247,168,1)" rx="2" ry="2" />
<text  x="64.09" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1103.7" y="581" width="0.2" height="15.0" fill="rgb(245,77,19)" rx="2" ry="2" />
<text  x="1106.66" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="578.2" y="469" width="0.5" height="15.0" fill="rgb(215,10,14)" rx="2" ry="2" />
<text  x="581.25" y="479.5" ></text>
</g>
<g >
<title>abstract_type::from_string (6 samples, 0.11%)</title><rect x="69.8" y="533" width="1.3" height="15.0" fill="rgb(213,207,8)" rx="2" ry="2" />
<text  x="72.79" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="61.1" y="357" width="0.2" height="15.0" fill="rgb(246,125,42)" rx="2" ry="2" />
<text  x="64.09" y="367.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="941.2" y="501" width="0.3" height="15.0" fill="rgb(246,13,54)" rx="2" ry="2" />
<text  x="944.24" y="511.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.7" y="677" width="0.2" height="15.0" fill="rgb(219,224,22)" rx="2" ry="2" />
<text  x="19.69" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (7 samples, 0.13%)</title><rect x="742.7" y="581" width="1.5" height="15.0" fill="rgb(241,186,25)" rx="2" ry="2" />
<text  x="745.68" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (443 samples, 8.38%)</title><rect x="750.7" y="597" width="98.8" height="15.0" fill="rgb(226,224,3)" rx="2" ry="2" />
<text  x="753.71" y="607.5" >cql3::query..</text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (6 samples, 0.11%)</title><rect x="585.6" y="421" width="1.3" height="15.0" fill="rgb(239,204,13)" rx="2" ry="2" />
<text  x="588.61" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.47%)</title><rect x="876.5" y="613" width="5.6" height="15.0" fill="rgb(220,128,10)" rx="2" ry="2" />
<text  x="879.54" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%)</title><rect x="811.2" y="325" width="1.1" height="15.0" fill="rgb(209,80,0)" rx="2" ry="2" />
<text  x="814.17" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="823.0" y="357" width="0.4" height="15.0" fill="rgb(213,223,12)" rx="2" ry="2" />
<text  x="825.99" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (1 samples, 0.02%)</title><rect x="874.5" y="645" width="0.3" height="15.0" fill="rgb(245,178,43)" rx="2" ry="2" />
<text  x="877.53" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1132.4" y="485" width="0.3" height="15.0" fill="rgb(215,90,20)" rx="2" ry="2" />
<text  x="1135.44" y="495.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="19.6" y="613" width="0.2" height="15.0" fill="rgb(240,140,49)" rx="2" ry="2" />
<text  x="22.59" y="623.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%)</title><rect x="1024.5" y="405" width="0.4" height="15.0" fill="rgb(245,194,43)" rx="2" ry="2" />
<text  x="1027.46" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (43 samples, 0.81%)</title><rect x="1012.9" y="389" width="9.5" height="15.0" fill="rgb(216,146,49)" rx="2" ry="2" />
<text  x="1015.85" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (16 samples, 0.30%)</title><rect x="71.6" y="565" width="3.5" height="15.0" fill="rgb(207,3,36)" rx="2" ry="2" />
<text  x="74.58" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="281.1" y="341" width="0.9" height="15.0" fill="rgb(209,41,31)" rx="2" ry="2" />
<text  x="284.07" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="79.6" y="501" width="0.2" height="15.0" fill="rgb(221,53,54)" rx="2" ry="2" />
<text  x="82.61" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.09%)</title><rect x="742.9" y="549" width="1.1" height="15.0" fill="rgb(226,39,44)" rx="2" ry="2" />
<text  x="745.90" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1107.7" y="549" width="0.2" height="15.0" fill="rgb(252,77,39)" rx="2" ry="2" />
<text  x="1110.67" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="53.1" y="389" width="0.4" height="15.0" fill="rgb(205,43,20)" rx="2" ry="2" />
<text  x="56.06" y="399.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%)</title><rect x="22.0" y="581" width="0.3" height="15.0" fill="rgb(235,39,4)" rx="2" ry="2" />
<text  x="25.05" y="591.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1127.8" y="277" width="0.2" height="15.0" fill="rgb(240,190,20)" rx="2" ry="2" />
<text  x="1130.75" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (1 samples, 0.02%)</title><rect x="627.6" y="597" width="0.2" height="15.0" fill="rgb(228,203,6)" rx="2" ry="2" />
<text  x="630.55" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (37 samples, 0.70%)</title><rect x="1013.3" y="373" width="8.3" height="15.0" fill="rgb(208,166,19)" rx="2" ry="2" />
<text  x="1016.30" y="383.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="512.9" y="469" width="0.4" height="15.0" fill="rgb(217,219,44)" rx="2" ry="2" />
<text  x="515.88" y="479.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="110.6" y="437" width="0.2" height="15.0" fill="rgb(226,192,28)" rx="2" ry="2" />
<text  x="113.62" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="246.5" y="293" width="0.2" height="15.0" fill="rgb(205,67,16)" rx="2" ry="2" />
<text  x="249.49" y="303.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (2 samples, 0.04%)</title><rect x="1092.1" y="517" width="0.4" height="15.0" fill="rgb(208,184,37)" rx="2" ry="2" />
<text  x="1095.06" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="137.6" y="613" width="0.2" height="15.0" fill="rgb(250,7,40)" rx="2" ry="2" />
<text  x="140.62" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="568.0" y="453" width="0.2" height="15.0" fill="rgb(233,175,25)" rx="2" ry="2" />
<text  x="570.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (8 samples, 0.15%)</title><rect x="981.0" y="469" width="1.7" height="15.0" fill="rgb(227,72,8)" rx="2" ry="2" />
<text  x="983.95" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="63.3" y="469" width="0.2" height="15.0" fill="rgb(208,30,14)" rx="2" ry="2" />
<text  x="66.32" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="17.8" y="389" width="0.2" height="15.0" fill="rgb(215,131,13)" rx="2" ry="2" />
<text  x="20.81" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="27.4" y="325" width="0.2" height="15.0" fill="rgb(249,93,29)" rx="2" ry="2" />
<text  x="30.40" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="892.2" y="581" width="0.2" height="15.0" fill="rgb(215,189,4)" rx="2" ry="2" />
<text  x="895.16" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.4" y="357" width="0.2" height="15.0" fill="rgb(214,168,29)" rx="2" ry="2" />
<text  x="63.42" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="802.9" y="485" width="0.2" height="15.0" fill="rgb(247,144,31)" rx="2" ry="2" />
<text  x="805.91" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="607.3" y="581" width="0.8" height="15.0" fill="rgb(236,121,24)" rx="2" ry="2" />
<text  x="610.25" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="1127.8" y="309" width="0.2" height="15.0" fill="rgb(237,84,24)" rx="2" ry="2" />
<text  x="1130.75" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="62.4" y="453" width="0.3" height="15.0" fill="rgb(206,225,9)" rx="2" ry="2" />
<text  x="65.43" y="463.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (38 samples, 0.72%)</title><rect x="1115.9" y="485" width="8.5" height="15.0" fill="rgb(210,185,30)" rx="2" ry="2" />
<text  x="1118.93" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (8 samples, 0.15%)</title><rect x="1125.7" y="437" width="1.8" height="15.0" fill="rgb(213,207,34)" rx="2" ry="2" />
<text  x="1128.75" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="1059.3" y="501" width="0.2" height="15.0" fill="rgb(251,40,33)" rx="2" ry="2" />
<text  x="1062.26" y="511.5" ></text>
</g>
<g >
<title>ser::mutation_partition__static_row&lt;bytes_ostream&gt;::start_columns (1 samples, 0.02%)</title><rect x="1128.2" y="309" width="0.2" height="15.0" fill="rgb(234,192,4)" rx="2" ry="2" />
<text  x="1131.20" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="601.7" y="533" width="0.2" height="15.0" fill="rgb(242,218,7)" rx="2" ry="2" />
<text  x="604.67" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%)</title><rect x="607.7" y="565" width="0.4" height="15.0" fill="rgb(206,201,43)" rx="2" ry="2" />
<text  x="610.70" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="44.4" y="437" width="0.2" height="15.0" fill="rgb(233,180,14)" rx="2" ry="2" />
<text  x="47.36" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::end (1 samples, 0.02%)</title><rect x="64.2" y="485" width="0.2" height="15.0" fill="rgb(217,32,26)" rx="2" ry="2" />
<text  x="67.21" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="509.1" y="357" width="0.7" height="15.0" fill="rgb(240,39,7)" rx="2" ry="2" />
<text  x="512.08" y="367.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="17.8" y="485" width="0.2" height="15.0" fill="rgb(205,26,0)" rx="2" ry="2" />
<text  x="20.81" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="38.8" y="437" width="0.2" height="15.0" fill="rgb(251,151,44)" rx="2" ry="2" />
<text  x="41.78" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="24.5" y="437" width="0.2" height="15.0" fill="rgb(240,127,52)" rx="2" ry="2" />
<text  x="27.50" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="26.7" y="373" width="0.3" height="15.0" fill="rgb(211,15,43)" rx="2" ry="2" />
<text  x="29.73" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="560.4" y="565" width="0.4" height="15.0" fill="rgb(206,36,26)" rx="2" ry="2" />
<text  x="563.40" y="575.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.3" y="357" width="0.2" height="15.0" fill="rgb(226,154,51)" rx="2" ry="2" />
<text  x="815.28" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="790.4" y="517" width="0.9" height="15.0" fill="rgb(253,98,30)" rx="2" ry="2" />
<text  x="793.42" y="527.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,157 samples, 21.88%)</title><rect x="876.5" y="661" width="258.2" height="15.0" fill="rgb(253,112,23)" rx="2" ry="2" />
<text  x="879.54" y="671.5" >seastar::lambda_task&lt;seastar::exec..</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1143.6" y="581" width="0.4" height="15.0" fill="rgb(242,123,7)" rx="2" ry="2" />
<text  x="1146.59" y="591.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="879.0" y="405" width="0.2" height="15.0" fill="rgb(220,193,52)" rx="2" ry="2" />
<text  x="881.99" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (11 samples, 0.21%)</title><rect x="861.1" y="565" width="2.5" height="15.0" fill="rgb(232,9,54)" rx="2" ry="2" />
<text  x="864.14" y="575.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_dcd3199037457158f6e2516231906d04f9637da6] (2 samples, 0.04%)</title><rect x="381.0" y="325" width="0.5" height="15.0" fill="rgb(225,140,23)" rx="2" ry="2" />
<text  x="384.02" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="106.6" y="645" width="0.2" height="15.0" fill="rgb(239,149,39)" rx="2" ry="2" />
<text  x="109.60" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="572.9" y="517" width="0.2" height="15.0" fill="rgb(227,149,4)" rx="2" ry="2" />
<text  x="575.89" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="836.4" y="437" width="0.2" height="15.0" fill="rgb(208,206,9)" rx="2" ry="2" />
<text  x="839.38" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="302.7" y="501" width="0.7" height="15.0" fill="rgb(238,53,6)" rx="2" ry="2" />
<text  x="305.71" y="511.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="763.6" y="437" width="0.3" height="15.0" fill="rgb(215,209,52)" rx="2" ry="2" />
<text  x="766.65" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9 samples, 0.17%)</title><rect x="725.9" y="597" width="2.1" height="15.0" fill="rgb(254,165,39)" rx="2" ry="2" />
<text  x="728.94" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="432.8" y="389" width="0.2" height="15.0" fill="rgb(212,22,49)" rx="2" ry="2" />
<text  x="435.78" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="80.5" y="517" width="0.2" height="15.0" fill="rgb(215,61,12)" rx="2" ry="2" />
<text  x="83.50" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1163.7" y="277" width="0.2" height="15.0" fill="rgb(222,226,4)" rx="2" ry="2" />
<text  x="1166.67" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="701.8" y="613" width="0.3" height="15.0" fill="rgb(238,39,52)" rx="2" ry="2" />
<text  x="704.85" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="54.2" y="325" width="0.9" height="15.0" fill="rgb(208,110,15)" rx="2" ry="2" />
<text  x="57.17" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(247,56,11)" rx="2" ry="2" />
<text  x="13.67" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="877.0" y="469" width="0.2" height="15.0" fill="rgb(231,8,2)" rx="2" ry="2" />
<text  x="879.98" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.1" y="501" width="0.2" height="15.0" fill="rgb(232,220,17)" rx="2" ry="2" />
<text  x="705.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="41.9" y="421" width="0.9" height="15.0" fill="rgb(208,98,17)" rx="2" ry="2" />
<text  x="44.90" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (6 samples, 0.11%)</title><rect x="748.9" y="565" width="1.4" height="15.0" fill="rgb(221,117,19)" rx="2" ry="2" />
<text  x="751.92" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="366.7" y="325" width="0.3" height="15.0" fill="rgb(231,7,27)" rx="2" ry="2" />
<text  x="369.74" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1045.9" y="437" width="0.2" height="15.0" fill="rgb(212,217,49)" rx="2" ry="2" />
<text  x="1048.87" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="99.7" y="565" width="0.2" height="15.0" fill="rgb(221,191,5)" rx="2" ry="2" />
<text  x="102.69" y="575.5" ></text>
</g>
<g >
<title>database::do_apply (1 samples, 0.02%)</title><rect x="1115.7" y="517" width="0.2" height="15.0" fill="rgb(227,206,29)" rx="2" ry="2" />
<text  x="1118.71" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_data_locally (1 samples, 0.02%)</title><rect x="81.6" y="229" width="0.2" height="15.0" fill="rgb(235,132,6)" rx="2" ry="2" />
<text  x="84.62" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="887.5" y="597" width="0.2" height="15.0" fill="rgb(248,135,46)" rx="2" ry="2" />
<text  x="890.47" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="52.2" y="421" width="0.4" height="15.0" fill="rgb(229,143,7)" rx="2" ry="2" />
<text  x="55.17" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.11%)</title><rect x="155.7" y="581" width="1.3" height="15.0" fill="rgb(242,162,2)" rx="2" ry="2" />
<text  x="158.69" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (30 samples, 0.57%)</title><rect x="527.6" y="373" width="6.7" height="15.0" fill="rgb(207,138,10)" rx="2" ry="2" />
<text  x="530.60" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="56.9" y="373" width="0.6" height="15.0" fill="rgb(237,151,17)" rx="2" ry="2" />
<text  x="59.85" y="383.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (4 samples, 0.08%)</title><rect x="1123.5" y="453" width="0.9" height="15.0" fill="rgb(243,12,11)" rx="2" ry="2" />
<text  x="1126.51" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="521.8" y="421" width="0.2" height="15.0" fill="rgb(242,49,20)" rx="2" ry="2" />
<text  x="524.80" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="647.9" y="645" width="0.2" height="15.0" fill="rgb(205,109,6)" rx="2" ry="2" />
<text  x="650.86" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="18.3" y="645" width="0.2" height="15.0" fill="rgb(235,171,45)" rx="2" ry="2" />
<text  x="21.25" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%)</title><rect x="72.7" y="517" width="0.2" height="15.0" fill="rgb(236,35,18)" rx="2" ry="2" />
<text  x="75.69" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="189.6" y="437" width="0.9" height="15.0" fill="rgb(205,206,18)" rx="2" ry="2" />
<text  x="192.60" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (48 samples, 0.91%)</title><rect x="343.3" y="373" width="10.7" height="15.0" fill="rgb(245,64,15)" rx="2" ry="2" />
<text  x="346.32" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (2 samples, 0.04%)</title><rect x="108.8" y="645" width="0.5" height="15.0" fill="rgb(251,179,49)" rx="2" ry="2" />
<text  x="111.84" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="81.6" y="101" width="0.2" height="15.0" fill="rgb(219,37,24)" rx="2" ry="2" />
<text  x="84.62" y="111.5" ></text>
</g>
<g >
<title>cache_tracker::~cache_tracker (1 samples, 0.02%)</title><rect x="702.7" y="469" width="0.3" height="15.0" fill="rgb(230,146,0)" rx="2" ry="2" />
<text  x="705.74" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="477.0" y="453" width="0.2" height="15.0" fill="rgb(218,65,19)" rx="2" ry="2" />
<text  x="479.96" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%)</title><rect x="284.4" y="357" width="1.8" height="15.0" fill="rgb(212,83,28)" rx="2" ry="2" />
<text  x="287.42" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="451.1" y="533" width="0.2" height="15.0" fill="rgb(219,98,53)" rx="2" ry="2" />
<text  x="454.08" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="45.7" y="469" width="0.2" height="15.0" fill="rgb(249,22,17)" rx="2" ry="2" />
<text  x="48.70" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1122.6" y="389" width="0.2" height="15.0" fill="rgb(224,48,4)" rx="2" ry="2" />
<text  x="1125.62" y="399.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1119.5" y="389" width="0.4" height="15.0" fill="rgb(232,134,30)" rx="2" ry="2" />
<text  x="1122.50" y="399.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="622.6" y="565" width="0.3" height="15.0" fill="rgb(205,185,36)" rx="2" ry="2" />
<text  x="625.65" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="816.5" y="277" width="0.5" height="15.0" fill="rgb(229,47,33)" rx="2" ry="2" />
<text  x="819.52" y="287.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (7 samples, 0.13%)</title><rect x="622.0" y="597" width="1.5" height="15.0" fill="rgb(222,191,39)" rx="2" ry="2" />
<text  x="624.98" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1141.8" y="645" width="0.2" height="15.0" fill="rgb(218,55,12)" rx="2" ry="2" />
<text  x="1144.81" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="50.6" y="373" width="0.2" height="15.0" fill="rgb(205,164,28)" rx="2" ry="2" />
<text  x="53.61" y="383.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (2 samples, 0.04%)</title><rect x="1131.8" y="309" width="0.4" height="15.0" fill="rgb(210,178,0)" rx="2" ry="2" />
<text  x="1134.77" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="76.3" y="565" width="0.2" height="15.0" fill="rgb(236,24,51)" rx="2" ry="2" />
<text  x="79.26" y="575.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="641.2" y="549" width="0.6" height="15.0" fill="rgb(251,70,16)" rx="2" ry="2" />
<text  x="644.16" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="881.2" y="517" width="0.2" height="15.0" fill="rgb(232,203,21)" rx="2" ry="2" />
<text  x="884.22" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (59 samples, 1.12%)</title><rect x="46.6" y="501" width="13.2" height="15.0" fill="rgb(231,218,54)" rx="2" ry="2" />
<text  x="49.59" y="511.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (6 samples, 0.11%)</title><rect x="364.1" y="325" width="1.3" height="15.0" fill="rgb(237,217,5)" rx="2" ry="2" />
<text  x="367.07" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="446.4" y="437" width="0.2" height="15.0" fill="rgb(222,89,48)" rx="2" ry="2" />
<text  x="449.39" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (3 samples, 0.06%)</title><rect x="73.4" y="501" width="0.6" height="15.0" fill="rgb(244,137,36)" rx="2" ry="2" />
<text  x="76.36" y="511.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (5 samples, 0.09%)</title><rect x="525.8" y="389" width="1.1" height="15.0" fill="rgb(226,119,4)" rx="2" ry="2" />
<text  x="528.82" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="516.0" y="469" width="0.2" height="15.0" fill="rgb(208,109,36)" rx="2" ry="2" />
<text  x="519.00" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (12 samples, 0.23%)</title><rect x="866.5" y="549" width="2.7" height="15.0" fill="rgb(213,202,35)" rx="2" ry="2" />
<text  x="869.50" y="559.5" ></text>
</g>
<g >
<title>cql3::result_generator::visit&lt;cql3::untyped_result_set::visitor&gt; (1 samples, 0.02%)</title><rect x="656.6" y="597" width="0.2" height="15.0" fill="rgb(222,79,24)" rx="2" ry="2" />
<text  x="659.56" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="608.6" y="549" width="0.2" height="15.0" fill="rgb(208,199,5)" rx="2" ry="2" />
<text  x="611.59" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="333.9" y="421" width="0.3" height="15.0" fill="rgb(213,115,12)" rx="2" ry="2" />
<text  x="336.95" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (96 samples, 1.82%)</title><rect x="660.1" y="661" width="21.4" height="15.0" fill="rgb(238,61,36)" rx="2" ry="2" />
<text  x="663.13" y="671.5" >s..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="852.2" y="597" width="0.5" height="15.0" fill="rgb(234,46,18)" rx="2" ry="2" />
<text  x="855.22" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.09%)</title><rect x="848.0" y="581" width="1.1" height="15.0" fill="rgb(222,78,26)" rx="2" ry="2" />
<text  x="850.98" y="591.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="702.7" y="549" width="0.3" height="15.0" fill="rgb(221,51,44)" rx="2" ry="2" />
<text  x="705.74" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="42.1" y="357" width="0.7" height="15.0" fill="rgb(206,167,50)" rx="2" ry="2" />
<text  x="45.13" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="807.2" y="389" width="0.2" height="15.0" fill="rgb(251,115,37)" rx="2" ry="2" />
<text  x="810.15" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="908.0" y="469" width="0.2" height="15.0" fill="rgb(219,152,44)" rx="2" ry="2" />
<text  x="911.00" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (8 samples, 0.15%)</title><rect x="153.9" y="581" width="1.8" height="15.0" fill="rgb(211,138,45)" rx="2" ry="2" />
<text  x="156.90" y="591.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.25%)</title><rect x="1127.8" y="373" width="2.9" height="15.0" fill="rgb(253,26,33)" rx="2" ry="2" />
<text  x="1130.75" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="456.0" y="565" width="0.2" height="15.0" fill="rgb(225,52,20)" rx="2" ry="2" />
<text  x="458.99" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="786.2" y="565" width="0.2" height="15.0" fill="rgb(229,1,5)" rx="2" ry="2" />
<text  x="789.18" y="575.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (3 samples, 0.06%)</title><rect x="68.9" y="581" width="0.7" height="15.0" fill="rgb(206,185,42)" rx="2" ry="2" />
<text  x="71.90" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="50.2" y="437" width="0.2" height="15.0" fill="rgb(221,169,19)" rx="2" ry="2" />
<text  x="53.16" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="962.2" y="533" width="0.2" height="15.0" fill="rgb(219,168,39)" rx="2" ry="2" />
<text  x="965.21" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="50.2" y="453" width="0.2" height="15.0" fill="rgb(253,179,35)" rx="2" ry="2" />
<text  x="53.16" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="42.4" y="341" width="0.4" height="15.0" fill="rgb(250,212,1)" rx="2" ry="2" />
<text  x="45.35" y="351.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="694.9" y="597" width="0.3" height="15.0" fill="rgb(245,136,44)" rx="2" ry="2" />
<text  x="697.93" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="931.9" y="549" width="0.2" height="15.0" fill="rgb(240,86,27)" rx="2" ry="2" />
<text  x="934.87" y="559.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="509.8" y="373" width="0.4" height="15.0" fill="rgb(251,21,23)" rx="2" ry="2" />
<text  x="512.75" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (13 samples, 0.25%)</title><rect x="279.7" y="357" width="2.9" height="15.0" fill="rgb(247,145,16)" rx="2" ry="2" />
<text  x="282.73" y="367.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="60.2" y="469" width="0.2" height="15.0" fill="rgb(253,176,13)" rx="2" ry="2" />
<text  x="63.20" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="679.8" y="645" width="1.5" height="15.0" fill="rgb(224,107,12)" rx="2" ry="2" />
<text  x="682.76" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%)</title><rect x="557.1" y="501" width="0.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="560.05" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::future_state&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="881.7" y="549" width="0.2" height="15.0" fill="rgb(213,37,16)" rx="2" ry="2" />
<text  x="884.67" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="54.2" y="293" width="0.9" height="15.0" fill="rgb(241,152,5)" rx="2" ry="2" />
<text  x="57.17" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="297.8" y="453" width="0.2" height="15.0" fill="rgb(208,120,23)" rx="2" ry="2" />
<text  x="300.80" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="670.4" y="597" width="0.4" height="15.0" fill="rgb(236,217,30)" rx="2" ry="2" />
<text  x="673.39" y="607.5" ></text>
</g>
<g >
<title>std::allocator&lt;cql3::expr::expression&gt;::allocator (1 samples, 0.02%)</title><rect x="51.9" y="389" width="0.3" height="15.0" fill="rgb(212,21,22)" rx="2" ry="2" />
<text  x="54.94" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="61.5" y="373" width="0.5" height="15.0" fill="rgb(226,219,42)" rx="2" ry="2" />
<text  x="64.54" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="877.9" y="501" width="0.2" height="15.0" fill="rgb(209,201,41)" rx="2" ry="2" />
<text  x="880.88" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1057.9" y="469" width="0.5" height="15.0" fill="rgb(230,63,20)" rx="2" ry="2" />
<text  x="1060.92" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (14 samples, 0.26%)</title><rect x="82.1" y="725" width="3.1" height="15.0" fill="rgb(252,15,31)" rx="2" ry="2" />
<text  x="85.06" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="485" width="0.2" height="15.0" fill="rgb(231,192,53)" rx="2" ry="2" />
<text  x="143.07" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.1" y="357" width="0.2" height="15.0" fill="rgb(245,87,29)" rx="2" ry="2" />
<text  x="66.10" y="367.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (6 samples, 0.11%)</title><rect x="1142.9" y="613" width="1.4" height="15.0" fill="rgb(234,188,35)" rx="2" ry="2" />
<text  x="1145.92" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (10 samples, 0.19%)</title><rect x="299.4" y="485" width="2.2" height="15.0" fill="rgb(254,81,44)" rx="2" ry="2" />
<text  x="302.37" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="557.3" y="485" width="0.6" height="15.0" fill="rgb(238,81,13)" rx="2" ry="2" />
<text  x="560.28" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="721.0" y="597" width="0.5" height="15.0" fill="rgb(244,112,20)" rx="2" ry="2" />
<text  x="724.03" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.7" y="437" width="0.4" height="15.0" fill="rgb(220,209,9)" rx="2" ry="2" />
<text  x="42.67" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (3 samples, 0.06%)</title><rect x="196.1" y="405" width="0.6" height="15.0" fill="rgb(225,0,37)" rx="2" ry="2" />
<text  x="199.07" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::close (5 samples, 0.09%)</title><rect x="119.5" y="613" width="1.2" height="15.0" fill="rgb(217,199,24)" rx="2" ry="2" />
<text  x="122.54" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="701.2" y="501" width="0.4" height="15.0" fill="rgb(236,43,15)" rx="2" ry="2" />
<text  x="704.18" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="61.5" y="405" width="0.5" height="15.0" fill="rgb(217,131,6)" rx="2" ry="2" />
<text  x="64.54" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (76 samples, 1.44%)</title><rect x="573.1" y="517" width="17.0" height="15.0" fill="rgb(236,49,0)" rx="2" ry="2" />
<text  x="576.12" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (5 samples, 0.09%)</title><rect x="871.6" y="629" width="1.1" height="15.0" fill="rgb(219,162,43)" rx="2" ry="2" />
<text  x="874.63" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="181" width="0.3" height="15.0" fill="rgb(247,146,31)" rx="2" ry="2" />
<text  x="57.84" y="191.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1117.5" y="277" width="0.2" height="15.0" fill="rgb(234,208,32)" rx="2" ry="2" />
<text  x="1120.49" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="1127.5" y="421" width="0.3" height="15.0" fill="rgb(229,0,1)" rx="2" ry="2" />
<text  x="1130.53" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator* (1 samples, 0.02%)</title><rect x="48.4" y="469" width="0.2" height="15.0" fill="rgb(206,45,10)" rx="2" ry="2" />
<text  x="51.37" y="479.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%)</title><rect x="10.7" y="485" width="0.2" height="15.0" fill="rgb(212,60,47)" rx="2" ry="2" />
<text  x="13.67" y="495.5" ></text>
</g>
<g >
<title>crc32_eth_init_lut (1 samples, 0.02%)</title><rect x="1178.6" y="789" width="0.2" height="15.0" fill="rgb(244,17,9)" rx="2" ry="2" />
<text  x="1181.62" y="799.5" ></text>
</g>
<g >
<title>cache_tracker::clear (1 samples, 0.02%)</title><rect x="702.7" y="453" width="0.3" height="15.0" fill="rgb(241,139,3)" rx="2" ry="2" />
<text  x="705.74" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%)</title><rect x="892.4" y="581" width="0.2" height="15.0" fill="rgb(231,113,8)" rx="2" ry="2" />
<text  x="895.38" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="813.8" y="357" width="0.9" height="15.0" fill="rgb(214,47,13)" rx="2" ry="2" />
<text  x="816.85" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="58.9" y="421" width="0.2" height="15.0" fill="rgb(214,221,31)" rx="2" ry="2" />
<text  x="61.86" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="95.2" y="645" width="0.2" height="15.0" fill="rgb(254,13,40)" rx="2" ry="2" />
<text  x="98.23" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="81.8" y="773" width="0.3" height="15.0" fill="rgb(239,207,51)" rx="2" ry="2" />
<text  x="84.84" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="55.5" y="421" width="0.2" height="15.0" fill="rgb(250,216,33)" rx="2" ry="2" />
<text  x="58.51" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="215.3" y="341" width="0.2" height="15.0" fill="rgb(212,86,6)" rx="2" ry="2" />
<text  x="218.26" y="351.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="951.5" y="565" width="1.8" height="15.0" fill="rgb(232,198,5)" rx="2" ry="2" />
<text  x="954.50" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (620 samples, 11.72%)</title><rect x="168.6" y="517" width="138.4" height="15.0" fill="rgb(242,192,20)" rx="2" ry="2" />
<text  x="171.63" y="527.5" >mutation_fragment..</text>
</g>
<g >
<title>cql3_parser::CqlParser::term (30 samples, 0.57%)</title><rect x="51.7" y="469" width="6.7" height="15.0" fill="rgb(244,180,30)" rx="2" ry="2" />
<text  x="54.72" y="479.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%)</title><rect x="348.7" y="325" width="0.9" height="15.0" fill="rgb(209,205,5)" rx="2" ry="2" />
<text  x="351.67" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (6 samples, 0.11%)</title><rect x="798.7" y="485" width="1.3" height="15.0" fill="rgb(249,200,43)" rx="2" ry="2" />
<text  x="801.67" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="62.0" y="469" width="0.2" height="15.0" fill="rgb(245,228,33)" rx="2" ry="2" />
<text  x="64.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1083.6" y="533" width="0.2" height="15.0" fill="rgb(246,172,37)" rx="2" ry="2" />
<text  x="1086.58" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (4 samples, 0.08%)</title><rect x="84.1" y="629" width="0.9" height="15.0" fill="rgb(210,226,21)" rx="2" ry="2" />
<text  x="87.07" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="244.3" y="277" width="0.6" height="15.0" fill="rgb(241,118,26)" rx="2" ry="2" />
<text  x="247.26" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="470.0" y="421" width="0.3" height="15.0" fill="rgb(207,128,40)" rx="2" ry="2" />
<text  x="473.04" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (18 samples, 0.34%)</title><rect x="1159.2" y="629" width="4.0" height="15.0" fill="rgb(243,224,18)" rx="2" ry="2" />
<text  x="1162.21" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (34 samples, 0.64%)</title><rect x="68.9" y="597" width="7.6" height="15.0" fill="rgb(239,52,20)" rx="2" ry="2" />
<text  x="71.90" y="607.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4 samples, 0.08%)</title><rect x="701.0" y="581" width="0.8" height="15.0" fill="rgb(235,134,51)" rx="2" ry="2" />
<text  x="703.95" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="253.2" y="293" width="0.2" height="15.0" fill="rgb(207,157,9)" rx="2" ry="2" />
<text  x="256.18" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (11 samples, 0.21%)</title><rect x="835.0" y="485" width="2.5" height="15.0" fill="rgb(228,42,47)" rx="2" ry="2" />
<text  x="838.04" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="110.6" y="373" width="0.2" height="15.0" fill="rgb(228,76,39)" rx="2" ry="2" />
<text  x="113.62" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="558.2" y="549" width="1.1" height="15.0" fill="rgb(219,122,5)" rx="2" ry="2" />
<text  x="561.17" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.02%)</title><rect x="74.7" y="501" width="0.2" height="15.0" fill="rgb(208,3,7)" rx="2" ry="2" />
<text  x="77.70" y="511.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.3" y="325" width="0.2" height="15.0" fill="rgb(252,10,50)" rx="2" ry="2" />
<text  x="54.27" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="538.5" y="453" width="0.3" height="15.0" fill="rgb(244,14,45)" rx="2" ry="2" />
<text  x="541.53" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="845.7" y="501" width="1.6" height="15.0" fill="rgb(251,206,44)" rx="2" ry="2" />
<text  x="848.75" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="44.4" y="421" width="0.2" height="15.0" fill="rgb(239,135,0)" rx="2" ry="2" />
<text  x="47.36" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="817.0" y="309" width="0.2" height="15.0" fill="rgb(250,197,7)" rx="2" ry="2" />
<text  x="819.97" y="319.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (4 samples, 0.08%)</title><rect x="110.0" y="581" width="0.8" height="15.0" fill="rgb(214,99,32)" rx="2" ry="2" />
<text  x="112.95" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="858.2" y="581" width="0.3" height="15.0" fill="rgb(225,196,6)" rx="2" ry="2" />
<text  x="861.24" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%)</title><rect x="270.4" y="389" width="0.4" height="15.0" fill="rgb(209,113,13)" rx="2" ry="2" />
<text  x="273.36" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.2" y="341" width="0.2" height="15.0" fill="rgb(241,151,16)" rx="2" ry="2" />
<text  x="1125.18" y="351.5" ></text>
</g>
<g >
<title>make_flat_multi_range_reader (1 samples, 0.02%)</title><rect x="81.6" y="149" width="0.2" height="15.0" fill="rgb(242,174,14)" rx="2" ry="2" />
<text  x="84.62" y="159.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="195.8" y="405" width="0.3" height="15.0" fill="rgb(216,148,2)" rx="2" ry="2" />
<text  x="198.85" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.66%)</title><rect x="1124.9" y="549" width="7.8" height="15.0" fill="rgb(217,152,34)" rx="2" ry="2" />
<text  x="1127.85" y="559.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="862.3" y="485" width="0.2" height="15.0" fill="rgb(249,16,24)" rx="2" ry="2" />
<text  x="865.26" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="322.6" y="533" width="0.4" height="15.0" fill="rgb(226,28,31)" rx="2" ry="2" />
<text  x="325.57" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="1144.5" y="613" width="0.2" height="15.0" fill="rgb(230,157,54)" rx="2" ry="2" />
<text  x="1147.49" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="17.8" y="645" width="0.2" height="15.0" fill="rgb(209,89,23)" rx="2" ry="2" />
<text  x="20.81" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="51.3" y="341" width="0.2" height="15.0" fill="rgb(232,221,31)" rx="2" ry="2" />
<text  x="54.27" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (67 samples, 1.27%)</title><rect x="24.3" y="533" width="14.9" height="15.0" fill="rgb(244,227,51)" rx="2" ry="2" />
<text  x="27.28" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (42 samples, 0.79%)</title><rect x="27.8" y="453" width="9.4" height="15.0" fill="rgb(219,69,12)" rx="2" ry="2" />
<text  x="30.85" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (8 samples, 0.15%)</title><rect x="402.9" y="341" width="1.8" height="15.0" fill="rgb(215,62,38)" rx="2" ry="2" />
<text  x="405.89" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="473.8" y="437" width="0.7" height="15.0" fill="rgb(208,74,2)" rx="2" ry="2" />
<text  x="476.83" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.0" y="277" width="0.3" height="15.0" fill="rgb(240,221,51)" rx="2" ry="2" />
<text  x="52.04" y="287.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="60.0" y="325" width="0.2" height="15.0" fill="rgb(245,110,30)" rx="2" ry="2" />
<text  x="62.98" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (6 samples, 0.11%)</title><rect x="53.7" y="421" width="1.4" height="15.0" fill="rgb(235,144,48)" rx="2" ry="2" />
<text  x="56.73" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1034.0" y="389" width="0.3" height="15.0" fill="rgb(231,158,24)" rx="2" ry="2" />
<text  x="1037.05" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="69.3" y="533" width="0.3" height="15.0" fill="rgb(252,83,35)" rx="2" ry="2" />
<text  x="72.35" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%)</title><rect x="454.4" y="565" width="0.2" height="15.0" fill="rgb(230,222,21)" rx="2" ry="2" />
<text  x="457.42" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="62.0" y="373" width="0.2" height="15.0" fill="rgb(218,183,28)" rx="2" ry="2" />
<text  x="64.98" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (2 samples, 0.04%)</title><rect x="125.8" y="597" width="0.4" height="15.0" fill="rgb(218,121,42)" rx="2" ry="2" />
<text  x="128.79" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="808.3" y="421" width="0.2" height="15.0" fill="rgb(225,198,53)" rx="2" ry="2" />
<text  x="811.27" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (7 samples, 0.13%)</title><rect x="585.4" y="437" width="1.5" height="15.0" fill="rgb(225,100,8)" rx="2" ry="2" />
<text  x="588.39" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (27 samples, 0.51%)</title><rect x="769.2" y="581" width="6.0" height="15.0" fill="rgb(226,134,50)" rx="2" ry="2" />
<text  x="772.22" y="591.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="329.3" y="469" width="0.2" height="15.0" fill="rgb(253,71,20)" rx="2" ry="2" />
<text  x="332.26" y="479.5" ></text>
</g>
<g >
<title>multishard_combining_reader::on_partition_range_change (1 samples, 0.02%)</title><rect x="81.6" y="37" width="0.2" height="15.0" fill="rgb(232,93,17)" rx="2" ry="2" />
<text  x="84.62" y="47.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="757.6" y="549" width="0.5" height="15.0" fill="rgb(253,55,5)" rx="2" ry="2" />
<text  x="760.62" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1158.8" y="645" width="0.2" height="15.0" fill="rgb(245,11,29)" rx="2" ry="2" />
<text  x="1161.77" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="810.3" y="357" width="2.0" height="15.0" fill="rgb(220,210,32)" rx="2" ry="2" />
<text  x="813.28" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="904.6" y="453" width="0.3" height="15.0" fill="rgb(215,223,47)" rx="2" ry="2" />
<text  x="907.65" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (23 samples, 0.43%)</title><rect x="630.7" y="597" width="5.1" height="15.0" fill="rgb(247,91,31)" rx="2" ry="2" />
<text  x="633.68" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="62.4" y="437" width="0.3" height="15.0" fill="rgb(239,23,13)" rx="2" ry="2" />
<text  x="65.43" y="447.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%)</title><rect x="1120.2" y="389" width="0.4" height="15.0" fill="rgb(237,200,42)" rx="2" ry="2" />
<text  x="1123.17" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="46.8" y="389" width="0.2" height="15.0" fill="rgb(247,47,43)" rx="2" ry="2" />
<text  x="49.81" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="41.5" y="373" width="0.4" height="15.0" fill="rgb(220,192,6)" rx="2" ry="2" />
<text  x="44.46" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (20 samples, 0.38%)</title><rect x="686.0" y="645" width="4.5" height="15.0" fill="rgb(237,167,13)" rx="2" ry="2" />
<text  x="689.01" y="655.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="1139.8" y="629" width="0.2" height="15.0" fill="rgb(224,0,11)" rx="2" ry="2" />
<text  x="1142.80" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="426.1" y="309" width="0.7" height="15.0" fill="rgb(225,221,37)" rx="2" ry="2" />
<text  x="429.09" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (4 samples, 0.08%)</title><rect x="77.4" y="629" width="0.9" height="15.0" fill="rgb(232,63,29)" rx="2" ry="2" />
<text  x="80.38" y="639.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%)</title><rect x="745.8" y="501" width="2.9" height="15.0" fill="rgb(226,31,23)" rx="2" ry="2" />
<text  x="748.80" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="46.8" y="373" width="0.2" height="15.0" fill="rgb(210,40,26)" rx="2" ry="2" />
<text  x="49.81" y="383.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="535.6" y="373" width="0.3" height="15.0" fill="rgb(216,25,21)" rx="2" ry="2" />
<text  x="538.63" y="383.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1166.6" y="709" width="0.2" height="15.0" fill="rgb(245,38,4)" rx="2" ry="2" />
<text  x="1169.57" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.2" y="565" width="0.2" height="15.0" fill="rgb(213,120,44)" rx="2" ry="2" />
<text  x="80.15" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="54.2" y="357" width="0.9" height="15.0" fill="rgb(217,21,12)" rx="2" ry="2" />
<text  x="57.17" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="41.2" y="421" width="0.7" height="15.0" fill="rgb(254,3,10)" rx="2" ry="2" />
<text  x="44.23" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="326.1" y="533" width="0.9" height="15.0" fill="rgb(223,144,29)" rx="2" ry="2" />
<text  x="329.14" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="798.7" y="453" width="0.9" height="15.0" fill="rgb(212,39,23)" rx="2" ry="2" />
<text  x="801.67" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (1 samples, 0.02%)</title><rect x="866.7" y="517" width="0.2" height="15.0" fill="rgb(225,142,0)" rx="2" ry="2" />
<text  x="869.72" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (6 samples, 0.11%)</title><rect x="439.5" y="373" width="1.3" height="15.0" fill="rgb(211,39,40)" rx="2" ry="2" />
<text  x="442.48" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="511.5" y="485" width="0.3" height="15.0" fill="rgb(248,6,53)" rx="2" ry="2" />
<text  x="514.54" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="856.5" y="517" width="0.4" height="15.0" fill="rgb(223,95,37)" rx="2" ry="2" />
<text  x="859.46" y="527.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="823.4" y="389" width="0.3" height="15.0" fill="rgb(221,222,41)" rx="2" ry="2" />
<text  x="826.44" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="33.6" y="405" width="0.3" height="15.0" fill="rgb(209,30,53)" rx="2" ry="2" />
<text  x="36.65" y="415.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="869.8" y="597" width="0.7" height="15.0" fill="rgb(238,164,10)" rx="2" ry="2" />
<text  x="872.84" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="733.8" y="661" width="0.2" height="15.0" fill="rgb(232,164,35)" rx="2" ry="2" />
<text  x="736.75" y="671.5" ></text>
</g>
<g >
<title>row::external_memory_usage (21 samples, 0.40%)</title><rect x="247.6" y="309" width="4.7" height="15.0" fill="rgb(219,16,42)" rx="2" ry="2" />
<text  x="250.61" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="52.2" y="405" width="0.4" height="15.0" fill="rgb(246,204,48)" rx="2" ry="2" />
<text  x="55.17" y="415.5" ></text>
</g>
<g >
<title>clustering_row::minimal_external_memory_usage (1 samples, 0.02%)</title><rect x="82.7" y="485" width="0.3" height="15.0" fill="rgb(253,39,16)" rx="2" ry="2" />
<text  x="85.73" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="61.5" y="293" width="0.5" height="15.0" fill="rgb(207,54,44)" rx="2" ry="2" />
<text  x="64.54" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (2 samples, 0.04%)</title><rect x="682.9" y="645" width="0.4" height="15.0" fill="rgb(217,158,23)" rx="2" ry="2" />
<text  x="685.88" y="655.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1029.1" y="437" width="0.3" height="15.0" fill="rgb(248,62,46)" rx="2" ry="2" />
<text  x="1032.14" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::~sstable (1 samples, 0.02%)</title><rect x="701.8" y="629" width="0.3" height="15.0" fill="rgb(236,76,49)" rx="2" ry="2" />
<text  x="704.85" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="62.7" y="453" width="0.2" height="15.0" fill="rgb(209,179,29)" rx="2" ry="2" />
<text  x="65.65" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="57.5" y="341" width="0.5" height="15.0" fill="rgb(243,129,22)" rx="2" ry="2" />
<text  x="60.52" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="109.3" y="533" width="0.2" height="15.0" fill="rgb(220,125,53)" rx="2" ry="2" />
<text  x="112.28" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="82.7" y="533" width="0.5" height="15.0" fill="rgb(223,17,25)" rx="2" ry="2" />
<text  x="85.73" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="60.6" y="437" width="0.3" height="15.0" fill="rgb(249,206,16)" rx="2" ry="2" />
<text  x="63.64" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="491.0" y="485" width="0.2" height="15.0" fill="rgb(253,98,37)" rx="2" ry="2" />
<text  x="494.01" y="495.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="110.6" y="469" width="0.2" height="15.0" fill="rgb(238,157,29)" rx="2" ry="2" />
<text  x="113.62" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1076.7" y="453" width="0.2" height="15.0" fill="rgb(250,184,24)" rx="2" ry="2" />
<text  x="1079.66" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (2 samples, 0.04%)</title><rect x="108.8" y="629" width="0.5" height="15.0" fill="rgb(222,184,36)" rx="2" ry="2" />
<text  x="111.84" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="178.4" y="453" width="0.3" height="15.0" fill="rgb(216,151,30)" rx="2" ry="2" />
<text  x="181.44" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.09%)</title><rect x="667.7" y="629" width="1.1" height="15.0" fill="rgb(220,54,19)" rx="2" ry="2" />
<text  x="670.71" y="639.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%)</title><rect x="502.4" y="421" width="0.9" height="15.0" fill="rgb(215,57,44)" rx="2" ry="2" />
<text  x="505.39" y="431.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="110.0" y="517" width="0.2" height="15.0" fill="rgb(220,47,46)" rx="2" ry="2" />
<text  x="112.95" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="880.8" y="421" width="0.2" height="15.0" fill="rgb(224,91,0)" rx="2" ry="2" />
<text  x="883.78" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (539 samples, 10.19%)</title><rect x="327.9" y="485" width="120.3" height="15.0" fill="rgb(210,131,23)" rx="2" ry="2" />
<text  x="330.92" y="495.5" >seastar::inter..</text>
</g>
<g >
<title>database::find_schema (45 samples, 0.85%)</title><rect x="776.1" y="565" width="10.1" height="15.0" fill="rgb(249,199,5)" rx="2" ry="2" />
<text  x="779.14" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (11 samples, 0.21%)</title><rect x="317.7" y="469" width="2.4" height="15.0" fill="rgb(219,52,47)" rx="2" ry="2" />
<text  x="320.66" y="479.5" ></text>
</g>
<g >
<title>deletable_row::deletable_row (1 samples, 0.02%)</title><rect x="879.0" y="389" width="0.2" height="15.0" fill="rgb(210,187,15)" rx="2" ry="2" />
<text  x="881.99" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1034.9" y="453" width="0.3" height="15.0" fill="rgb(218,227,7)" rx="2" ry="2" />
<text  x="1037.94" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.13%)</title><rect x="893.7" y="565" width="1.6" height="15.0" fill="rgb(216,70,30)" rx="2" ry="2" />
<text  x="896.72" y="575.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_large_cells (1 samples, 0.02%)</title><rect x="84.7" y="485" width="0.3" height="15.0" fill="rgb(252,186,34)" rx="2" ry="2" />
<text  x="87.74" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1142.0" y="645" width="0.5" height="15.0" fill="rgb(222,1,34)" rx="2" ry="2" />
<text  x="1145.03" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="108.6" y="597" width="0.2" height="15.0" fill="rgb(230,143,19)" rx="2" ry="2" />
<text  x="111.61" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="27.4" y="309" width="0.2" height="15.0" fill="rgb(247,212,34)" rx="2" ry="2" />
<text  x="30.40" y="319.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="646.1" y="581" width="0.2" height="15.0" fill="rgb(218,129,38)" rx="2" ry="2" />
<text  x="649.07" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="404.4" y="325" width="0.3" height="15.0" fill="rgb(249,202,17)" rx="2" ry="2" />
<text  x="407.45" y="335.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="30.1" y="405" width="0.2" height="15.0" fill="rgb(243,194,9)" rx="2" ry="2" />
<text  x="33.08" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (5 samples, 0.09%)</title><rect x="60.9" y="485" width="1.1" height="15.0" fill="rgb(226,132,28)" rx="2" ry="2" />
<text  x="63.87" y="495.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="622.0" y="581" width="0.2" height="15.0" fill="rgb(244,113,48)" rx="2" ry="2" />
<text  x="624.98" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="138.7" y="613" width="0.5" height="15.0" fill="rgb(210,85,30)" rx="2" ry="2" />
<text  x="141.73" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="874.3" y="645" width="0.2" height="15.0" fill="rgb(225,106,29)" rx="2" ry="2" />
<text  x="877.31" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (455 samples, 8.60%)</title><rect x="456.7" y="533" width="101.5" height="15.0" fill="rgb(212,156,44)" rx="2" ry="2" />
<text  x="459.66" y="543.5" >std::_Functi..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.09%)</title><rect x="1117.3" y="357" width="1.1" height="15.0" fill="rgb(208,194,1)" rx="2" ry="2" />
<text  x="1120.27" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1019.8" y="341" width="0.2" height="15.0" fill="rgb(212,72,2)" rx="2" ry="2" />
<text  x="1022.77" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (12 samples, 0.23%)</title><rect x="398.0" y="325" width="2.7" height="15.0" fill="rgb(243,204,54)" rx="2" ry="2" />
<text  x="400.98" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="543.9" y="485" width="0.2" height="15.0" fill="rgb(216,95,54)" rx="2" ry="2" />
<text  x="546.89" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (8 samples, 0.15%)</title><rect x="101.9" y="629" width="1.8" height="15.0" fill="rgb(209,189,39)" rx="2" ry="2" />
<text  x="104.92" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (15 samples, 0.28%)</title><rect x="759.0" y="517" width="3.3" height="15.0" fill="rgb(247,82,50)" rx="2" ry="2" />
<text  x="761.96" y="527.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="428.3" y="389" width="0.2" height="15.0" fill="rgb(209,41,22)" rx="2" ry="2" />
<text  x="431.32" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (2 samples, 0.04%)</title><rect x="109.3" y="645" width="0.4" height="15.0" fill="rgb(241,92,50)" rx="2" ry="2" />
<text  x="112.28" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="455.1" y="565" width="0.4" height="15.0" fill="rgb(212,30,19)" rx="2" ry="2" />
<text  x="458.09" y="575.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%)</title><rect x="1119.9" y="389" width="0.3" height="15.0" fill="rgb(234,154,16)" rx="2" ry="2" />
<text  x="1122.95" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="110.4" y="469" width="0.2" height="15.0" fill="rgb(217,41,7)" rx="2" ry="2" />
<text  x="113.40" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="824.1" y="389" width="0.2" height="15.0" fill="rgb(230,32,12)" rx="2" ry="2" />
<text  x="827.11" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="709.2" y="597" width="0.5" height="15.0" fill="rgb(230,17,44)" rx="2" ry="2" />
<text  x="712.21" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="603.5" y="549" width="0.4" height="15.0" fill="rgb(239,51,30)" rx="2" ry="2" />
<text  x="606.46" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="62.0" y="309" width="0.2" height="15.0" fill="rgb(250,47,14)" rx="2" ry="2" />
<text  x="64.98" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (1 samples, 0.02%)</title><rect x="1164.1" y="661" width="0.2" height="15.0" fill="rgb(221,65,34)" rx="2" ry="2" />
<text  x="1167.12" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.8" y="629" width="0.2" height="15.0" fill="rgb(213,220,33)" rx="2" ry="2" />
<text  x="20.81" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="533" width="0.2" height="15.0" fill="rgb(251,216,46)" rx="2" ry="2" />
<text  x="1166.67" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="544.1" y="485" width="0.5" height="15.0" fill="rgb(237,118,20)" rx="2" ry="2" />
<text  x="547.11" y="495.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%)</title><rect x="640.5" y="581" width="1.6" height="15.0" fill="rgb(211,138,7)" rx="2" ry="2" />
<text  x="643.49" y="591.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (4 samples, 0.08%)</title><rect x="806.9" y="421" width="0.9" height="15.0" fill="rgb(221,60,27)" rx="2" ry="2" />
<text  x="809.93" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="51.9" y="405" width="0.3" height="15.0" fill="rgb(244,215,0)" rx="2" ry="2" />
<text  x="54.94" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="80.7" y="629" width="0.2" height="15.0" fill="rgb(248,177,11)" rx="2" ry="2" />
<text  x="83.72" y="639.5" ></text>
</g>
<g >
<title>sstables::sstables_manager::remove (1 samples, 0.02%)</title><rect x="701.8" y="645" width="0.3" height="15.0" fill="rgb(214,151,37)" rx="2" ry="2" />
<text  x="704.85" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="105.0" y="453" width="0.3" height="15.0" fill="rgb(236,141,22)" rx="2" ry="2" />
<text  x="108.04" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1017.3" y="309" width="0.2" height="15.0" fill="rgb(225,119,28)" rx="2" ry="2" />
<text  x="1020.32" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="809.4" y="389" width="0.2" height="15.0" fill="rgb(249,131,32)" rx="2" ry="2" />
<text  x="812.38" y="399.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (7 samples, 0.13%)</title><rect x="539.9" y="485" width="1.5" height="15.0" fill="rgb(245,96,12)" rx="2" ry="2" />
<text  x="542.87" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="701.8" y="597" width="0.3" height="15.0" fill="rgb(217,73,12)" rx="2" ry="2" />
<text  x="704.85" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="74.9" y="437" width="0.2" height="15.0" fill="rgb(226,28,44)" rx="2" ry="2" />
<text  x="77.92" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (8 samples, 0.15%)</title><rect x="256.8" y="309" width="1.7" height="15.0" fill="rgb(241,172,21)" rx="2" ry="2" />
<text  x="259.75" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="683.3" y="645" width="0.5" height="15.0" fill="rgb(225,162,8)" rx="2" ry="2" />
<text  x="686.33" y="655.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="109.7" y="501" width="0.3" height="15.0" fill="rgb(241,129,22)" rx="2" ry="2" />
<text  x="112.73" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="48.6" y="453" width="0.9" height="15.0" fill="rgb(215,97,41)" rx="2" ry="2" />
<text  x="51.60" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="110.4" y="501" width="0.2" height="15.0" fill="rgb(242,121,8)" rx="2" ry="2" />
<text  x="113.40" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (58 samples, 1.10%)</title><rect x="92.1" y="661" width="12.9" height="15.0" fill="rgb(241,110,45)" rx="2" ry="2" />
<text  x="95.10" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="58.0" y="405" width="0.2" height="15.0" fill="rgb(224,93,23)" rx="2" ry="2" />
<text  x="60.97" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="604.4" y="549" width="0.2" height="15.0" fill="rgb(247,93,22)" rx="2" ry="2" />
<text  x="607.35" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (12 samples, 0.23%)</title><rect x="175.8" y="437" width="2.6" height="15.0" fill="rgb(206,132,20)" rx="2" ry="2" />
<text  x="178.77" y="447.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (35 samples, 0.66%)</title><rect x="1124.9" y="565" width="7.8" height="15.0" fill="rgb(217,20,29)" rx="2" ry="2" />
<text  x="1127.85" y="575.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (2 samples, 0.04%)</title><rect x="339.7" y="373" width="0.5" height="15.0" fill="rgb(220,92,42)" rx="2" ry="2" />
<text  x="342.75" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="875.6" y="549" width="0.5" height="15.0" fill="rgb(229,113,13)" rx="2" ry="2" />
<text  x="878.65" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="60.6" y="421" width="0.3" height="15.0" fill="rgb(224,159,12)" rx="2" ry="2" />
<text  x="63.64" y="431.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="97.7" y="581" width="0.4" height="15.0" fill="rgb(226,204,52)" rx="2" ry="2" />
<text  x="100.68" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="639.2" y="533" width="0.4" height="15.0" fill="rgb(229,194,19)" rx="2" ry="2" />
<text  x="642.15" y="543.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%)</title><rect x="258.1" y="261" width="0.4" height="15.0" fill="rgb(242,206,48)" rx="2" ry="2" />
<text  x="261.09" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="659.9" y="549" width="0.2" height="15.0" fill="rgb(213,1,15)" rx="2" ry="2" />
<text  x="662.90" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="543.7" y="485" width="0.2" height="15.0" fill="rgb(218,13,8)" rx="2" ry="2" />
<text  x="546.67" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="52.2" y="373" width="0.2" height="15.0" fill="rgb(230,117,7)" rx="2" ry="2" />
<text  x="55.17" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (11 samples, 0.21%)</title><rect x="759.4" y="485" width="2.5" height="15.0" fill="rgb(243,46,54)" rx="2" ry="2" />
<text  x="762.41" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="668.6" y="597" width="0.2" height="15.0" fill="rgb(215,201,1)" rx="2" ry="2" />
<text  x="671.60" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_for_keyspaces (1 samples, 0.02%)</title><rect x="728.8" y="549" width="0.3" height="15.0" fill="rgb(216,58,31)" rx="2" ry="2" />
<text  x="731.84" y="559.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (1 samples, 0.02%)</title><rect x="711.9" y="629" width="0.2" height="15.0" fill="rgb(213,74,22)" rx="2" ry="2" />
<text  x="714.89" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (201 samples, 3.80%)</title><rect x="23.8" y="581" width="44.9" height="15.0" fill="rgb(224,46,25)" rx="2" ry="2" />
<text  x="26.83" y="591.5" >seas..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="27.6" y="453" width="0.2" height="15.0" fill="rgb(216,36,24)" rx="2" ry="2" />
<text  x="30.63" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="1146.9" y="613" width="0.3" height="15.0" fill="rgb(224,207,52)" rx="2" ry="2" />
<text  x="1149.94" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (4 samples, 0.08%)</title><rect x="401.8" y="357" width="0.9" height="15.0" fill="rgb(222,158,12)" rx="2" ry="2" />
<text  x="404.77" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="257.9" y="277" width="0.6" height="15.0" fill="rgb(235,133,43)" rx="2" ry="2" />
<text  x="260.87" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;secondary_index::index, std::allocator&lt;secondary_index::index&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, secondary_index::index, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt;, false, true&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="73.1" y="501" width="0.3" height="15.0" fill="rgb(254,78,35)" rx="2" ry="2" />
<text  x="76.14" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="872.3" y="581" width="0.4" height="15.0" fill="rgb(223,131,51)" rx="2" ry="2" />
<text  x="875.30" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="984.3" y="469" width="0.2" height="15.0" fill="rgb(213,133,14)" rx="2" ry="2" />
<text  x="987.30" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="340.2" y="373" width="0.2" height="15.0" fill="rgb(242,62,44)" rx="2" ry="2" />
<text  x="343.19" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="728.4" y="645" width="0.2" height="15.0" fill="rgb(247,3,10)" rx="2" ry="2" />
<text  x="731.40" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="485.0" y="453" width="0.9" height="15.0" fill="rgb(222,62,42)" rx="2" ry="2" />
<text  x="487.99" y="463.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="85.4" y="677" width="0.2" height="15.0" fill="rgb(247,26,8)" rx="2" ry="2" />
<text  x="88.41" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1129.3" y="213" width="0.2" height="15.0" fill="rgb(229,175,51)" rx="2" ry="2" />
<text  x="1132.32" y="223.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (93 samples, 1.76%)</title><rect x="806.5" y="437" width="20.7" height="15.0" fill="rgb(252,13,0)" rx="2" ry="2" />
<text  x="809.48" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="60.0" y="293" width="0.2" height="15.0" fill="rgb(232,212,19)" rx="2" ry="2" />
<text  x="62.98" y="303.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="682.7" y="629" width="0.2" height="15.0" fill="rgb(244,58,16)" rx="2" ry="2" />
<text  x="685.66" y="639.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="154.3" y="549" width="0.7" height="15.0" fill="rgb(228,12,36)" rx="2" ry="2" />
<text  x="157.35" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="1166.6" y="645" width="0.2" height="15.0" fill="rgb(244,203,14)" rx="2" ry="2" />
<text  x="1169.57" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="846.0" y="485" width="1.1" height="15.0" fill="rgb(244,109,4)" rx="2" ry="2" />
<text  x="848.97" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="61.5" y="261" width="0.5" height="15.0" fill="rgb(227,57,9)" rx="2" ry="2" />
<text  x="64.54" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%)</title><rect x="701.2" y="437" width="0.4" height="15.0" fill="rgb(220,92,46)" rx="2" ry="2" />
<text  x="704.18" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="193.2" y="405" width="0.2" height="15.0" fill="rgb(231,186,16)" rx="2" ry="2" />
<text  x="196.17" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.09%)</title><rect x="832.4" y="485" width="1.1" height="15.0" fill="rgb(216,214,40)" rx="2" ry="2" />
<text  x="835.36" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="807.4" y="389" width="0.4" height="15.0" fill="rgb(252,64,25)" rx="2" ry="2" />
<text  x="810.38" y="399.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="56.9" y="261" width="0.2" height="15.0" fill="rgb(251,151,28)" rx="2" ry="2" />
<text  x="59.85" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (8 samples, 0.15%)</title><rect x="949.7" y="517" width="1.8" height="15.0" fill="rgb(227,190,50)" rx="2" ry="2" />
<text  x="952.72" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="101.7" y="565" width="0.2" height="15.0" fill="rgb(224,14,18)" rx="2" ry="2" />
<text  x="104.70" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (11 samples, 0.21%)</title><rect x="820.1" y="325" width="2.4" height="15.0" fill="rgb(247,110,38)" rx="2" ry="2" />
<text  x="823.09" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="133" width="0.3" height="15.0" fill="rgb(224,21,44)" rx="2" ry="2" />
<text  x="57.84" y="143.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (2 samples, 0.04%)</title><rect x="22.9" y="565" width="0.5" height="15.0" fill="rgb(242,55,43)" rx="2" ry="2" />
<text  x="25.94" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="26.3" y="341" width="0.2" height="15.0" fill="rgb(249,125,26)" rx="2" ry="2" />
<text  x="29.29" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1020.4" y="341" width="0.3" height="15.0" fill="rgb(251,194,14)" rx="2" ry="2" />
<text  x="1023.44" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::component_type, std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::component_type&gt;, seastar::enum_hash&lt;sstables::component_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="81.8" y="533" width="0.3" height="15.0" fill="rgb(230,106,37)" rx="2" ry="2" />
<text  x="84.84" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="664.6" y="565" width="0.9" height="15.0" fill="rgb(206,3,7)" rx="2" ry="2" />
<text  x="667.59" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="296.2" y="437" width="0.5" height="15.0" fill="rgb(219,12,4)" rx="2" ry="2" />
<text  x="299.24" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="837.0" y="421" width="0.5" height="15.0" fill="rgb(247,209,13)" rx="2" ry="2" />
<text  x="840.05" y="431.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (2 samples, 0.04%)</title><rect x="271.0" y="405" width="0.5" height="15.0" fill="rgb(225,160,11)" rx="2" ry="2" />
<text  x="274.03" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (12 samples, 0.23%)</title><rect x="175.8" y="453" width="2.6" height="15.0" fill="rgb(214,97,29)" rx="2" ry="2" />
<text  x="178.77" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (29 samples, 0.55%)</title><rect x="779.7" y="533" width="6.5" height="15.0" fill="rgb(253,170,15)" rx="2" ry="2" />
<text  x="782.71" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (12 samples, 0.23%)</title><rect x="241.1" y="277" width="2.7" height="15.0" fill="rgb(240,198,49)" rx="2" ry="2" />
<text  x="244.14" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="44.1" y="485" width="0.3" height="15.0" fill="rgb(210,35,4)" rx="2" ry="2" />
<text  x="47.13" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.6" y="197" width="0.3" height="15.0" fill="rgb(232,31,39)" rx="2" ry="2" />
<text  x="59.63" y="207.5" ></text>
</g>
<g >
<title>__isoc99_fscanf (1 samples, 0.02%)</title><rect x="16.0" y="773" width="0.2" height="15.0" fill="rgb(233,146,25)" rx="2" ry="2" />
<text  x="19.02" y="783.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="1119.5" y="341" width="0.2" height="15.0" fill="rgb(215,219,42)" rx="2" ry="2" />
<text  x="1122.50" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="701.6" y="405" width="0.2" height="15.0" fill="rgb(230,66,52)" rx="2" ry="2" />
<text  x="704.62" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (31 samples, 0.59%)</title><rect x="467.6" y="453" width="6.9" height="15.0" fill="rgb(241,197,18)" rx="2" ry="2" />
<text  x="470.59" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.11%)</title><rect x="130.5" y="549" width="1.3" height="15.0" fill="rgb(230,166,22)" rx="2" ry="2" />
<text  x="133.48" y="559.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="1127.1" y="293" width="0.2" height="15.0" fill="rgb(233,170,40)" rx="2" ry="2" />
<text  x="1130.08" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.8" y="389" width="0.3" height="15.0" fill="rgb(226,101,8)" rx="2" ry="2" />
<text  x="55.84" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (4 samples, 0.08%)</title><rect x="84.1" y="565" width="0.9" height="15.0" fill="rgb(236,166,30)" rx="2" ry="2" />
<text  x="87.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="351.8" y="341" width="0.2" height="15.0" fill="rgb(240,203,11)" rx="2" ry="2" />
<text  x="354.80" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="943.9" y="549" width="0.5" height="15.0" fill="rgb(232,48,44)" rx="2" ry="2" />
<text  x="946.92" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="252.3" y="309" width="0.4" height="15.0" fill="rgb(242,18,14)" rx="2" ry="2" />
<text  x="255.29" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="62.9" y="453" width="0.2" height="15.0" fill="rgb(208,203,50)" rx="2" ry="2" />
<text  x="65.88" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="651.2" y="645" width="0.4" height="15.0" fill="rgb(243,197,45)" rx="2" ry="2" />
<text  x="654.20" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="43.5" y="437" width="0.2" height="15.0" fill="rgb(233,54,32)" rx="2" ry="2" />
<text  x="46.47" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="23.4" y="581" width="0.2" height="15.0" fill="rgb(247,145,24)" rx="2" ry="2" />
<text  x="26.39" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (544 samples, 10.29%)</title><rect x="327.0" y="517" width="121.4" height="15.0" fill="rgb(205,7,53)" rx="2" ry="2" />
<text  x="330.03" y="527.5" >flat_mutation_r..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="256.1" y="293" width="0.2" height="15.0" fill="rgb(217,178,41)" rx="2" ry="2" />
<text  x="259.08" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="48.8" y="325" width="0.5" height="15.0" fill="rgb(216,119,10)" rx="2" ry="2" />
<text  x="51.82" y="335.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.6" y="757" width="0.2" height="15.0" fill="rgb(243,111,36)" rx="2" ry="2" />
<text  x="84.62" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="941.0" y="485" width="0.2" height="15.0" fill="rgb(228,120,18)" rx="2" ry="2" />
<text  x="944.02" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (3 samples, 0.06%)</title><rect x="64.9" y="517" width="0.7" height="15.0" fill="rgb(247,199,42)" rx="2" ry="2" />
<text  x="67.88" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%)</title><rect x="745.1" y="501" width="0.7" height="15.0" fill="rgb(225,90,3)" rx="2" ry="2" />
<text  x="748.13" y="511.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (4 samples, 0.08%)</title><rect x="1123.5" y="437" width="0.9" height="15.0" fill="rgb(251,227,44)" rx="2" ry="2" />
<text  x="1126.51" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="972.5" y="469" width="1.1" height="15.0" fill="rgb(211,113,37)" rx="2" ry="2" />
<text  x="975.47" y="479.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="994.3" y="453" width="0.3" height="15.0" fill="rgb(215,1,29)" rx="2" ry="2" />
<text  x="997.34" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="586.9" y="437" width="0.5" height="15.0" fill="rgb(254,49,31)" rx="2" ry="2" />
<text  x="589.95" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (13 samples, 0.25%)</title><rect x="979.8" y="501" width="2.9" height="15.0" fill="rgb(224,4,39)" rx="2" ry="2" />
<text  x="982.84" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::use_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.8" y="533" width="0.2" height="15.0" fill="rgb(233,130,53)" rx="2" ry="2" />
<text  x="70.78" y="543.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="82.1" y="645" width="1.5" height="15.0" fill="rgb(212,210,19)" rx="2" ry="2" />
<text  x="85.06" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.19%)</title><rect x="40.6" y="501" width="2.2" height="15.0" fill="rgb(244,130,21)" rx="2" ry="2" />
<text  x="43.57" y="511.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="1137.8" y="645" width="1.3" height="15.0" fill="rgb(238,21,51)" rx="2" ry="2" />
<text  x="1140.79" y="655.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (5 samples, 0.09%)</title><rect x="1117.3" y="389" width="1.1" height="15.0" fill="rgb(245,99,3)" rx="2" ry="2" />
<text  x="1120.27" y="399.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="539.7" y="485" width="0.2" height="15.0" fill="rgb(245,62,40)" rx="2" ry="2" />
<text  x="542.65" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="174.0" y="469" width="0.2" height="15.0" fill="rgb(211,7,1)" rx="2" ry="2" />
<text  x="176.98" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="86.7" y="677" width="0.3" height="15.0" fill="rgb(214,134,31)" rx="2" ry="2" />
<text  x="89.75" y="687.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (7 samples, 0.13%)</title><rect x="330.4" y="437" width="1.5" height="15.0" fill="rgb(252,103,30)" rx="2" ry="2" />
<text  x="333.38" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_0ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_1ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_2ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_3ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (1 samples, 0.02%)</title><rect x="72.5" y="485" width="0.2" height="15.0" fill="rgb(220,226,32)" rx="2" ry="2" />
<text  x="75.47" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="451.3" y="533" width="0.2" height="15.0" fill="rgb(226,17,32)" rx="2" ry="2" />
<text  x="454.30" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="665.7" y="565" width="0.7" height="15.0" fill="rgb(224,42,30)" rx="2" ry="2" />
<text  x="668.70" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="650.8" y="645" width="0.2" height="15.0" fill="rgb(211,122,21)" rx="2" ry="2" />
<text  x="653.76" y="655.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="764.1" y="453" width="0.2" height="15.0" fill="rgb(216,78,49)" rx="2" ry="2" />
<text  x="767.09" y="463.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (13 samples, 0.25%)</title><rect x="13.1" y="741" width="2.9" height="15.0" fill="rgb(243,121,39)" rx="2" ry="2" />
<text  x="16.12" y="751.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1102.3" y="581" width="0.2" height="15.0" fill="rgb(237,0,24)" rx="2" ry="2" />
<text  x="1105.32" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%)</title><rect x="702.3" y="661" width="0.4" height="15.0" fill="rgb(228,205,39)" rx="2" ry="2" />
<text  x="705.29" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="63.1" y="309" width="0.2" height="15.0" fill="rgb(208,101,21)" rx="2" ry="2" />
<text  x="66.10" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="1147.8" y="533" width="1.1" height="15.0" fill="rgb(212,29,1)" rx="2" ry="2" />
<text  x="1150.83" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="728.0" y="613" width="0.2" height="15.0" fill="rgb(209,159,24)" rx="2" ry="2" />
<text  x="730.95" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.09%)</title><rect x="1152.5" y="613" width="1.1" height="15.0" fill="rgb(214,8,23)" rx="2" ry="2" />
<text  x="1155.52" y="623.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.7" y="597" width="0.3" height="15.0" fill="rgb(224,198,25)" rx="2" ry="2" />
<text  x="705.74" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="45.0" y="293" width="0.5" height="15.0" fill="rgb(248,130,16)" rx="2" ry="2" />
<text  x="48.03" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.7" y="629" width="0.2" height="15.0" fill="rgb(238,121,6)" rx="2" ry="2" />
<text  x="672.72" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (5 samples, 0.09%)</title><rect x="877.0" y="533" width="1.1" height="15.0" fill="rgb(213,168,5)" rx="2" ry="2" />
<text  x="879.98" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (5 samples, 0.09%)</title><rect x="181.6" y="421" width="1.1" height="15.0" fill="rgb(213,222,26)" rx="2" ry="2" />
<text  x="184.57" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="1049.4" y="501" width="0.5" height="15.0" fill="rgb(216,96,12)" rx="2" ry="2" />
<text  x="1052.44" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="245.8" y="277" width="0.7" height="15.0" fill="rgb(215,180,42)" rx="2" ry="2" />
<text  x="248.82" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(242,54,45)" rx="2" ry="2" />
<text  x="13.67" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (467 samples, 8.83%)</title><rect x="455.5" y="581" width="104.2" height="15.0" fill="rgb(248,199,21)" rx="2" ry="2" />
<text  x="458.54" y="591.5" >query::queri..</text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1132.7" y="565" width="0.2" height="15.0" fill="rgb(221,194,21)" rx="2" ry="2" />
<text  x="1135.66" y="575.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="81.6" y="133" width="0.2" height="15.0" fill="rgb(241,85,22)" rx="2" ry="2" />
<text  x="84.62" y="143.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1104.6" y="565" width="1.5" height="15.0" fill="rgb(250,102,17)" rx="2" ry="2" />
<text  x="1107.55" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (13 samples, 0.25%)</title><rect x="1031.6" y="421" width="2.9" height="15.0" fill="rgb(214,201,22)" rx="2" ry="2" />
<text  x="1034.60" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="587.4" y="453" width="0.2" height="15.0" fill="rgb(238,33,53)" rx="2" ry="2" />
<text  x="590.39" y="463.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1163.7" y="469" width="0.2" height="15.0" fill="rgb(212,7,35)" rx="2" ry="2" />
<text  x="1166.67" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (12 samples, 0.23%)</title><rect x="878.5" y="501" width="2.7" height="15.0" fill="rgb(237,183,42)" rx="2" ry="2" />
<text  x="881.55" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.08%)</title><rect x="41.9" y="469" width="0.9" height="15.0" fill="rgb(237,30,32)" rx="2" ry="2" />
<text  x="44.90" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="695.4" y="645" width="0.2" height="15.0" fill="rgb(242,90,14)" rx="2" ry="2" />
<text  x="698.38" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (2 samples, 0.04%)</title><rect x="584.7" y="437" width="0.5" height="15.0" fill="rgb(234,1,46)" rx="2" ry="2" />
<text  x="587.72" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.0" y="421" width="0.7" height="15.0" fill="rgb(205,35,1)" rx="2" ry="2" />
<text  x="50.04" y="431.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="1117.9" y="293" width="0.3" height="15.0" fill="rgb(238,141,40)" rx="2" ry="2" />
<text  x="1120.94" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (78 samples, 1.47%)</title><rect x="913.6" y="565" width="17.4" height="15.0" fill="rgb(228,229,35)" rx="2" ry="2" />
<text  x="916.57" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="117" width="0.3" height="15.0" fill="rgb(206,167,31)" rx="2" ry="2" />
<text  x="57.84" y="127.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (11 samples, 0.21%)</title><rect x="287.8" y="389" width="2.4" height="15.0" fill="rgb(215,192,35)" rx="2" ry="2" />
<text  x="290.77" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="27.2" y="373" width="0.2" height="15.0" fill="rgb(212,204,43)" rx="2" ry="2" />
<text  x="30.18" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1131.3" y="341" width="0.2" height="15.0" fill="rgb(228,166,33)" rx="2" ry="2" />
<text  x="1134.32" y="351.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (1 samples, 0.02%)</title><rect x="26.3" y="309" width="0.2" height="15.0" fill="rgb(244,60,1)" rx="2" ry="2" />
<text  x="29.29" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="282.6" y="357" width="0.3" height="15.0" fill="rgb(241,98,5)" rx="2" ry="2" />
<text  x="285.63" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="880.8" y="453" width="0.2" height="15.0" fill="rgb(254,113,4)" rx="2" ry="2" />
<text  x="883.78" y="463.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="1163.7" y="293" width="0.2" height="15.0" fill="rgb(250,79,51)" rx="2" ry="2" />
<text  x="1166.67" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="233.6" y="229" width="0.2" height="15.0" fill="rgb(211,168,16)" rx="2" ry="2" />
<text  x="236.55" y="239.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="18.3" y="693" width="0.2" height="15.0" fill="rgb(205,83,48)" rx="2" ry="2" />
<text  x="21.25" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="17.4" y="581" width="0.2" height="15.0" fill="rgb(230,6,36)" rx="2" ry="2" />
<text  x="20.36" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (42 samples, 0.79%)</title><rect x="432.6" y="405" width="9.3" height="15.0" fill="rgb(235,47,4)" rx="2" ry="2" />
<text  x="435.56" y="415.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (2 samples, 0.04%)</title><rect x="702.3" y="645" width="0.4" height="15.0" fill="rgb(205,208,9)" rx="2" ry="2" />
<text  x="705.29" y="655.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.11%)</title><rect x="134.5" y="549" width="1.3" height="15.0" fill="rgb(239,84,54)" rx="2" ry="2" />
<text  x="137.49" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="265.2" y="325" width="0.3" height="15.0" fill="rgb(217,216,2)" rx="2" ry="2" />
<text  x="268.23" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (3 samples, 0.06%)</title><rect x="508.4" y="341" width="0.7" height="15.0" fill="rgb(221,181,19)" rx="2" ry="2" />
<text  x="511.42" y="351.5" ></text>
</g>
<g >
<title>v3_columns::v3_columns (1 samples, 0.02%)</title><rect x="110.2" y="485" width="0.2" height="15.0" fill="rgb(232,1,2)" rx="2" ry="2" />
<text  x="113.17" y="495.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%)</title><rect x="64.9" y="485" width="0.2" height="15.0" fill="rgb(250,163,24)" rx="2" ry="2" />
<text  x="67.88" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (2 samples, 0.04%)</title><rect x="1081.8" y="517" width="0.4" height="15.0" fill="rgb(206,183,23)" rx="2" ry="2" />
<text  x="1084.79" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="702.1" y="261" width="0.2" height="15.0" fill="rgb(218,78,33)" rx="2" ry="2" />
<text  x="705.07" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="782.6" y="469" width="0.2" height="15.0" fill="rgb(241,145,24)" rx="2" ry="2" />
<text  x="785.61" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="26.7" y="357" width="0.3" height="15.0" fill="rgb(210,138,0)" rx="2" ry="2" />
<text  x="29.73" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="307.4" y="501" width="0.7" height="15.0" fill="rgb(212,58,34)" rx="2" ry="2" />
<text  x="310.40" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (2 samples, 0.04%)</title><rect x="750.3" y="565" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="753.26" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="362.5" y="341" width="0.2" height="15.0" fill="rgb(219,69,19)" rx="2" ry="2" />
<text  x="365.51" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="60.0" y="277" width="0.2" height="15.0" fill="rgb(242,219,27)" rx="2" ry="2" />
<text  x="62.98" y="287.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.7" y="405" width="0.3" height="15.0" fill="rgb(253,220,20)" rx="2" ry="2" />
<text  x="1126.74" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (4 samples, 0.08%)</title><rect x="645.2" y="629" width="0.9" height="15.0" fill="rgb(239,159,35)" rx="2" ry="2" />
<text  x="648.18" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (19 samples, 0.36%)</title><rect x="198.1" y="389" width="4.2" height="15.0" fill="rgb(249,208,8)" rx="2" ry="2" />
<text  x="201.08" y="399.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="63.3" y="485" width="0.2" height="15.0" fill="rgb(207,145,42)" rx="2" ry="2" />
<text  x="66.32" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (5 samples, 0.09%)</title><rect x="264.3" y="341" width="1.2" height="15.0" fill="rgb(211,102,36)" rx="2" ry="2" />
<text  x="267.34" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="77.6" y="549" width="0.2" height="15.0" fill="rgb(243,114,34)" rx="2" ry="2" />
<text  x="80.60" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="46.8" y="421" width="0.2" height="15.0" fill="rgb(225,157,45)" rx="2" ry="2" />
<text  x="49.81" y="431.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::createStringStream (1 samples, 0.02%)</title><rect x="21.8" y="581" width="0.2" height="15.0" fill="rgb(216,13,8)" rx="2" ry="2" />
<text  x="24.82" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.6" y="389" width="0.2" height="15.0" fill="rgb(226,182,27)" rx="2" ry="2" />
<text  x="47.58" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="297.4" y="421" width="0.2" height="15.0" fill="rgb(248,93,23)" rx="2" ry="2" />
<text  x="300.36" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (544 samples, 10.29%)</title><rect x="327.0" y="533" width="121.4" height="15.0" fill="rgb(210,83,33)" rx="2" ry="2" />
<text  x="330.03" y="543.5" >flat_mutation_r..</text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="17.8" y="469" width="0.2" height="15.0" fill="rgb(210,210,20)" rx="2" ry="2" />
<text  x="20.81" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1052.3" y="485" width="0.3" height="15.0" fill="rgb(229,1,18)" rx="2" ry="2" />
<text  x="1055.34" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (536 samples, 10.13%)</title><rect x="962.7" y="533" width="119.5" height="15.0" fill="rgb(245,31,16)" rx="2" ry="2" />
<text  x="965.66" y="543.5" >service::stora..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1119.7" y="341" width="0.2" height="15.0" fill="rgb(217,189,41)" rx="2" ry="2" />
<text  x="1122.72" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (3 samples, 0.06%)</title><rect x="476.3" y="453" width="0.7" height="15.0" fill="rgb(214,125,12)" rx="2" ry="2" />
<text  x="479.29" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%)</title><rect x="445.5" y="469" width="2.7" height="15.0" fill="rgb(210,143,39)" rx="2" ry="2" />
<text  x="448.50" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (10 samples, 0.19%)</title><rect x="800.2" y="469" width="2.3" height="15.0" fill="rgb(208,148,39)" rx="2" ry="2" />
<text  x="803.24" y="479.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::qr_clustered_row_view&gt;::doit&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;, std::vector&lt;ser::qr_clustered_row_view, std::allocator&lt;ser::qr_clustered_row_view&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="656.6" y="517" width="0.2" height="15.0" fill="rgb(243,212,13)" rx="2" ry="2" />
<text  x="659.56" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1144.3" y="613" width="0.2" height="15.0" fill="rgb(216,102,53)" rx="2" ry="2" />
<text  x="1147.26" y="623.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (3 samples, 0.06%)</title><rect x="45.7" y="485" width="0.7" height="15.0" fill="rgb(218,88,52)" rx="2" ry="2" />
<text  x="48.70" y="495.5" ></text>
</g>
<g >
<title>distributed_loader::reshard (1 samples, 0.02%)</title><rect x="16.5" y="725" width="0.2" height="15.0" fill="rgb(216,24,0)" rx="2" ry="2" />
<text  x="19.47" y="735.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%)</title><rect x="30.3" y="421" width="0.2" height="15.0" fill="rgb(219,31,7)" rx="2" ry="2" />
<text  x="33.30" y="431.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="737.8" y="581" width="1.8" height="15.0" fill="rgb(241,198,11)" rx="2" ry="2" />
<text  x="740.77" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="1117.5" y="261" width="0.2" height="15.0" fill="rgb(238,103,0)" rx="2" ry="2" />
<text  x="1120.49" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.09%)</title><rect x="44.4" y="485" width="1.1" height="15.0" fill="rgb(239,128,8)" rx="2" ry="2" />
<text  x="47.36" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="559.5" y="565" width="0.2" height="15.0" fill="rgb(241,190,0)" rx="2" ry="2" />
<text  x="562.51" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.28%)</title><rect x="999.9" y="421" width="3.4" height="15.0" fill="rgb(244,74,9)" rx="2" ry="2" />
<text  x="1002.91" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="56.6" y="373" width="0.3" height="15.0" fill="rgb(219,148,27)" rx="2" ry="2" />
<text  x="59.63" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="733.5" y="661" width="0.3" height="15.0" fill="rgb(220,218,6)" rx="2" ry="2" />
<text  x="736.53" y="671.5" ></text>
</g>
<g >
<title>query_state::query_state (2 samples, 0.04%)</title><rect x="121.1" y="613" width="0.5" height="15.0" fill="rgb(207,9,7)" rx="2" ry="2" />
<text  x="124.11" y="623.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (7 samples, 0.13%)</title><rect x="267.0" y="373" width="1.6" height="15.0" fill="rgb(221,97,30)" rx="2" ry="2" />
<text  x="270.02" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="110.6" y="357" width="0.2" height="15.0" fill="rgb(246,9,24)" rx="2" ry="2" />
<text  x="113.62" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="54.2" y="309" width="0.9" height="15.0" fill="rgb(225,6,37)" rx="2" ry="2" />
<text  x="57.17" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="827.5" y="437" width="0.4" height="15.0" fill="rgb(251,101,18)" rx="2" ry="2" />
<text  x="830.46" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%)</title><rect x="63.1" y="453" width="0.2" height="15.0" fill="rgb(239,175,0)" rx="2" ry="2" />
<text  x="66.10" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_base (2 samples, 0.04%)</title><rect x="63.5" y="469" width="0.5" height="15.0" fill="rgb(251,65,48)" rx="2" ry="2" />
<text  x="66.55" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="49.7" y="421" width="0.2" height="15.0" fill="rgb(240,26,36)" rx="2" ry="2" />
<text  x="52.71" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1100.5" y="565" width="0.5" height="15.0" fill="rgb(240,163,28)" rx="2" ry="2" />
<text  x="1103.54" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (67 samples, 1.27%)</title><rect x="24.3" y="517" width="14.9" height="15.0" fill="rgb(250,84,48)" rx="2" ry="2" />
<text  x="27.28" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%)</title><rect x="74.9" y="469" width="0.2" height="15.0" fill="rgb(243,26,25)" rx="2" ry="2" />
<text  x="77.92" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="530.5" y="341" width="1.3" height="15.0" fill="rgb(247,194,7)" rx="2" ry="2" />
<text  x="533.50" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="993.2" y="405" width="0.2" height="15.0" fill="rgb(208,111,38)" rx="2" ry="2" />
<text  x="996.22" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%)</title><rect x="916.7" y="517" width="2.7" height="15.0" fill="rgb(247,133,34)" rx="2" ry="2" />
<text  x="919.70" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="559.3" y="549" width="0.2" height="15.0" fill="rgb(252,23,6)" rx="2" ry="2" />
<text  x="562.28" y="559.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="717.5" y="629" width="0.2" height="15.0" fill="rgb(205,85,41)" rx="2" ry="2" />
<text  x="720.46" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1140.0" y="629" width="0.2" height="15.0" fill="rgb(253,175,18)" rx="2" ry="2" />
<text  x="1143.02" y="639.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="194.3" y="389" width="0.2" height="15.0" fill="rgb(221,105,5)" rx="2" ry="2" />
<text  x="197.28" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (5 samples, 0.09%)</title><rect x="107.1" y="645" width="1.1" height="15.0" fill="rgb(220,102,10)" rx="2" ry="2" />
<text  x="110.05" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1146.5" y="613" width="0.2" height="15.0" fill="rgb(232,196,33)" rx="2" ry="2" />
<text  x="1149.49" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="1140.0" y="645" width="0.2" height="15.0" fill="rgb(240,202,8)" rx="2" ry="2" />
<text  x="1143.02" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="301.6" y="485" width="0.2" height="15.0" fill="rgb(241,142,24)" rx="2" ry="2" />
<text  x="304.60" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1021.3" y="357" width="0.3" height="15.0" fill="rgb(234,42,47)" rx="2" ry="2" />
<text  x="1024.33" y="367.5" ></text>
</g>
<g >
<title>schema_registry::get (17 samples, 0.32%)</title><rect x="970.0" y="517" width="3.8" height="15.0" fill="rgb(237,81,52)" rx="2" ry="2" />
<text  x="973.02" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.17%)</title><rect x="424.8" y="325" width="2.0" height="15.0" fill="rgb(248,98,33)" rx="2" ry="2" />
<text  x="427.75" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(217,117,3)" rx="2" ry="2" />
<text  x="13.67" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="50.6" y="357" width="0.2" height="15.0" fill="rgb(253,120,19)" rx="2" ry="2" />
<text  x="53.61" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.09%)</title><rect x="94.1" y="645" width="1.1" height="15.0" fill="rgb(217,40,7)" rx="2" ry="2" />
<text  x="97.11" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.8" y="565" width="0.2" height="15.0" fill="rgb(233,90,42)" rx="2" ry="2" />
<text  x="20.81" y="575.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="764.8" y="437" width="0.4" height="15.0" fill="rgb(219,5,31)" rx="2" ry="2" />
<text  x="767.76" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="520.7" y="437" width="0.4" height="15.0" fill="rgb(213,62,9)" rx="2" ry="2" />
<text  x="523.69" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="806.9" y="405" width="0.3" height="15.0" fill="rgb(217,93,50)" rx="2" ry="2" />
<text  x="809.93" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="983.0" y="501" width="0.4" height="15.0" fill="rgb(206,174,0)" rx="2" ry="2" />
<text  x="985.96" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="58.6" y="421" width="0.3" height="15.0" fill="rgb(254,139,2)" rx="2" ry="2" />
<text  x="61.64" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="686.9" y="613" width="0.2" height="15.0" fill="rgb(250,223,53)" rx="2" ry="2" />
<text  x="689.90" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="58.4" y="389" width="0.2" height="15.0" fill="rgb(251,163,28)" rx="2" ry="2" />
<text  x="61.41" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="353.4" y="341" width="0.4" height="15.0" fill="rgb(252,106,4)" rx="2" ry="2" />
<text  x="356.36" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (52 samples, 0.98%)</title><rect x="48.2" y="485" width="11.6" height="15.0" fill="rgb(235,83,7)" rx="2" ry="2" />
<text  x="51.15" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="665.9" y="549" width="0.3" height="15.0" fill="rgb(246,85,39)" rx="2" ry="2" />
<text  x="668.93" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="77.6" y="613" width="0.2" height="15.0" fill="rgb(210,72,5)" rx="2" ry="2" />
<text  x="80.60" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%)</title><rect x="979.4" y="501" width="0.2" height="15.0" fill="rgb(206,94,1)" rx="2" ry="2" />
<text  x="982.39" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.8" y="101" width="0.3" height="15.0" fill="rgb(226,5,22)" rx="2" ry="2" />
<text  x="57.84" y="111.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="52.2" y="453" width="0.4" height="15.0" fill="rgb(251,28,52)" rx="2" ry="2" />
<text  x="55.17" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="876.3" y="661" width="0.2" height="15.0" fill="rgb(232,183,8)" rx="2" ry="2" />
<text  x="879.31" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="712.3" y="645" width="0.9" height="15.0" fill="rgb(219,151,11)" rx="2" ry="2" />
<text  x="715.33" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (43 samples, 0.81%)</title><rect x="579.4" y="469" width="9.6" height="15.0" fill="rgb(210,137,45)" rx="2" ry="2" />
<text  x="582.36" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (437 samples, 8.26%)</title><rect x="334.8" y="421" width="97.5" height="15.0" fill="rgb(209,65,17)" rx="2" ry="2" />
<text  x="337.84" y="431.5" >mutation_fr..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::get_value (1 samples, 0.02%)</title><rect x="733.3" y="661" width="0.2" height="15.0" fill="rgb(228,186,12)" rx="2" ry="2" />
<text  x="736.30" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="702.7" y="517" width="0.3" height="15.0" fill="rgb(218,118,33)" rx="2" ry="2" />
<text  x="705.74" y="527.5" ></text>
</g>
<g >
<title>db::system_keyspace::get_saved_tokens (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(240,129,19)" rx="2" ry="2" />
<text  x="13.67" y="591.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (81 samples, 1.53%)</title><rect x="492.6" y="485" width="18.0" height="15.0" fill="rgb(206,74,24)" rx="2" ry="2" />
<text  x="495.58" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.8" y="533" width="0.2" height="15.0" fill="rgb(253,69,46)" rx="2" ry="2" />
<text  x="68.78" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="56.6" y="357" width="0.3" height="15.0" fill="rgb(217,82,1)" rx="2" ry="2" />
<text  x="59.63" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="659.5" y="597" width="0.2" height="15.0" fill="rgb(214,197,41)" rx="2" ry="2" />
<text  x="662.46" y="607.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.0" y="517" width="0.3" height="15.0" fill="rgb(234,126,4)" rx="2" ry="2" />
<text  x="919.03" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.11%)</title><rect x="591.6" y="517" width="1.4" height="15.0" fill="rgb(242,84,24)" rx="2" ry="2" />
<text  x="594.63" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%)</title><rect x="569.8" y="565" width="0.2" height="15.0" fill="rgb(228,29,47)" rx="2" ry="2" />
<text  x="572.77" y="575.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (2 samples, 0.04%)</title><rect x="1060.2" y="485" width="0.4" height="15.0" fill="rgb(209,17,31)" rx="2" ry="2" />
<text  x="1063.15" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::list_permissions_statement*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="67.3" y="469" width="0.3" height="15.0" fill="rgb(244,217,40)" rx="2" ry="2" />
<text  x="70.34" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (5 samples, 0.09%)</title><rect x="908.4" y="485" width="1.2" height="15.0" fill="rgb(227,48,25)" rx="2" ry="2" />
<text  x="911.44" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="755.8" y="581" width="0.5" height="15.0" fill="rgb(231,46,26)" rx="2" ry="2" />
<text  x="758.84" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="672.2" y="597" width="0.2" height="15.0" fill="rgb(212,138,42)" rx="2" ry="2" />
<text  x="675.17" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::begin (1 samples, 0.02%)</title><rect x="23.2" y="501" width="0.2" height="15.0" fill="rgb(215,158,16)" rx="2" ry="2" />
<text  x="26.16" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="74.5" y="549" width="0.4" height="15.0" fill="rgb(206,13,46)" rx="2" ry="2" />
<text  x="77.48" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureISt5tupleIJEEE9then_implIZNS3_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="1124.9" y="485" width="0.2" height="15.0" fill="rgb(231,123,4)" rx="2" ry="2" />
<text  x="1127.85" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="16.7" y="725" width="0.2" height="15.0" fill="rgb(242,123,45)" rx="2" ry="2" />
<text  x="19.69" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1157.2" y="645" width="0.2" height="15.0" fill="rgb(221,203,33)" rx="2" ry="2" />
<text  x="1160.20" y="655.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="82.1" y="629" width="1.5" height="15.0" fill="rgb(215,85,32)" rx="2" ry="2" />
<text  x="85.06" y="639.5" ></text>
</g>
<g >
<title>cache_tracker::setup_metrics (1 samples, 0.02%)</title><rect x="18.0" y="485" width="0.3" height="15.0" fill="rgb(242,226,33)" rx="2" ry="2" />
<text  x="21.03" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="666.4" y="581" width="0.2" height="15.0" fill="rgb(242,60,37)" rx="2" ry="2" />
<text  x="669.37" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.11%)</title><rect x="935.0" y="565" width="1.3" height="15.0" fill="rgb(249,182,15)" rx="2" ry="2" />
<text  x="937.99" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (8 samples, 0.15%)</title><rect x="858.7" y="581" width="1.8" height="15.0" fill="rgb(254,91,6)" rx="2" ry="2" />
<text  x="861.69" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (14 samples, 0.26%)</title><rect x="842.4" y="485" width="3.1" height="15.0" fill="rgb(250,168,20)" rx="2" ry="2" />
<text  x="845.40" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="244.0" y="277" width="0.3" height="15.0" fill="rgb(210,186,7)" rx="2" ry="2" />
<text  x="247.04" y="287.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (14 samples, 0.26%)</title><rect x="497.7" y="437" width="3.1" height="15.0" fill="rgb(208,21,43)" rx="2" ry="2" />
<text  x="500.71" y="447.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="105.0" y="501" width="0.3" height="15.0" fill="rgb(245,16,54)" rx="2" ry="2" />
<text  x="108.04" y="511.5" ></text>
</g>
<g >
<title>cql3::attributes::attributes (1 samples, 0.02%)</title><rect x="68.7" y="581" width="0.2" height="15.0" fill="rgb(226,104,26)" rx="2" ry="2" />
<text  x="71.68" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="36.8" y="437" width="0.2" height="15.0" fill="rgb(254,0,40)" rx="2" ry="2" />
<text  x="39.77" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="708.5" y="613" width="1.2" height="15.0" fill="rgb(251,110,26)" rx="2" ry="2" />
<text  x="711.54" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="47.5" y="309" width="0.2" height="15.0" fill="rgb(227,67,26)" rx="2" ry="2" />
<text  x="50.48" y="319.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="119.1" y="613" width="0.4" height="15.0" fill="rgb(219,14,36)" rx="2" ry="2" />
<text  x="122.10" y="623.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,853 samples, 35.03%)</title><rect x="158.1" y="597" width="413.5" height="15.0" fill="rgb(251,127,27)" rx="2" ry="2" />
<text  x="161.14" y="607.5" >query::querier&lt;</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="85.4" y="581" width="0.2" height="15.0" fill="rgb(213,206,2)" rx="2" ry="2" />
<text  x="88.41" y="591.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%)</title><rect x="920.3" y="533" width="0.6" height="15.0" fill="rgb(215,189,42)" rx="2" ry="2" />
<text  x="923.27" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%)</title><rect x="1124.9" y="581" width="8.0" height="15.0" fill="rgb(235,174,11)" rx="2" ry="2" />
<text  x="1127.85" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="41.9" y="437" width="0.9" height="15.0" fill="rgb(212,70,18)" rx="2" ry="2" />
<text  x="44.90" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%)</title><rect x="19.4" y="645" width="0.2" height="15.0" fill="rgb(232,150,27)" rx="2" ry="2" />
<text  x="22.37" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="72.9" y="517" width="0.2" height="15.0" fill="rgb(227,137,50)" rx="2" ry="2" />
<text  x="75.92" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (15 samples, 0.28%)</title><rect x="287.8" y="405" width="3.3" height="15.0" fill="rgb(206,220,18)" rx="2" ry="2" />
<text  x="290.77" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="55.1" y="341" width="0.2" height="15.0" fill="rgb(238,11,1)" rx="2" ry="2" />
<text  x="58.07" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="950.8" y="485" width="0.3" height="15.0" fill="rgb(247,30,48)" rx="2" ry="2" />
<text  x="953.83" y="495.5" ></text>
</g>
<g >
<title>row_cache::make_reader (45 samples, 0.85%)</title><rect x="546.3" y="501" width="10.1" height="15.0" fill="rgb(218,3,16)" rx="2" ry="2" />
<text  x="549.34" y="511.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (4 samples, 0.08%)</title><rect x="1118.6" y="389" width="0.9" height="15.0" fill="rgb(243,172,8)" rx="2" ry="2" />
<text  x="1121.61" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="60.4" y="309" width="0.2" height="15.0" fill="rgb(250,54,39)" rx="2" ry="2" />
<text  x="63.42" y="319.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (1 samples, 0.02%)</title><rect x="269.2" y="373" width="0.3" height="15.0" fill="rgb(208,9,2)" rx="2" ry="2" />
<text  x="272.25" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.11%)</title><rect x="1085.8" y="565" width="1.3" height="15.0" fill="rgb(242,60,16)" rx="2" ry="2" />
<text  x="1088.81" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="792.4" y="533" width="0.9" height="15.0" fill="rgb(240,88,20)" rx="2" ry="2" />
<text  x="795.43" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="349.8" y="325" width="0.2" height="15.0" fill="rgb(248,187,52)" rx="2" ry="2" />
<text  x="352.79" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1133.6" y="645" width="0.2" height="15.0" fill="rgb(217,161,2)" rx="2" ry="2" />
<text  x="1136.55" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="1134.0" y="645" width="0.2" height="15.0" fill="rgb(205,222,54)" rx="2" ry="2" />
<text  x="1137.00" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (449 samples, 8.49%)</title><rect x="191.6" y="437" width="100.2" height="15.0" fill="rgb(221,165,14)" rx="2" ry="2" />
<text  x="194.61" y="447.5" >logalloc::al..</text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="109.3" y="613" width="0.4" height="15.0" fill="rgb(234,49,26)" rx="2" ry="2" />
<text  x="112.28" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.2" y="373" width="0.4" height="15.0" fill="rgb(213,66,49)" rx="2" ry="2" />
<text  x="59.18" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="62.0" y="325" width="0.2" height="15.0" fill="rgb(208,122,29)" rx="2" ry="2" />
<text  x="64.98" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (16 samples, 0.30%)</title><rect x="434.8" y="357" width="3.6" height="15.0" fill="rgb(235,98,29)" rx="2" ry="2" />
<text  x="437.79" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%)</title><rect x="594.8" y="517" width="0.8" height="15.0" fill="rgb(224,225,1)" rx="2" ry="2" />
<text  x="597.76" y="527.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1159.0" y="629" width="0.2" height="15.0" fill="rgb(250,218,52)" rx="2" ry="2" />
<text  x="1161.99" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1017.3" y="293" width="0.2" height="15.0" fill="rgb(239,86,26)" rx="2" ry="2" />
<text  x="1020.32" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (4 samples, 0.08%)</title><rect x="701.0" y="661" width="0.8" height="15.0" fill="rgb(218,136,47)" rx="2" ry="2" />
<text  x="703.95" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%)</title><rect x="1097.6" y="517" width="0.7" height="15.0" fill="rgb(243,184,1)" rx="2" ry="2" />
<text  x="1100.63" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="937.0" y="517" width="0.7" height="15.0" fill="rgb(229,91,17)" rx="2" ry="2" />
<text  x="940.00" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="728.8" y="597" width="0.3" height="15.0" fill="rgb(227,76,30)" rx="2" ry="2" />
<text  x="731.84" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="62.0" y="293" width="0.2" height="15.0" fill="rgb(253,30,48)" rx="2" ry="2" />
<text  x="64.98" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="844.9" y="421" width="0.2" height="15.0" fill="rgb(225,215,6)" rx="2" ry="2" />
<text  x="847.86" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1112.4" y="581" width="0.2" height="15.0" fill="rgb(233,41,43)" rx="2" ry="2" />
<text  x="1115.36" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="41.2" y="437" width="0.7" height="15.0" fill="rgb(234,32,11)" rx="2" ry="2" />
<text  x="44.23" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.13%)</title><rect x="446.6" y="453" width="1.6" height="15.0" fill="rgb(247,168,0)" rx="2" ry="2" />
<text  x="449.62" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;column_definition, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="17.8" y="357" width="0.2" height="15.0" fill="rgb(250,145,51)" rx="2" ry="2" />
<text  x="20.81" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="836.6" y="437" width="0.4" height="15.0" fill="rgb(246,114,46)" rx="2" ry="2" />
<text  x="839.60" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="83.4" y="597" width="0.2" height="15.0" fill="rgb(246,165,42)" rx="2" ry="2" />
<text  x="86.40" y="607.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (14 samples, 0.26%)</title><rect x="497.7" y="421" width="3.1" height="15.0" fill="rgb(253,84,37)" rx="2" ry="2" />
<text  x="500.71" y="431.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="1103.4" y="581" width="0.3" height="15.0" fill="rgb(219,176,26)" rx="2" ry="2" />
<text  x="1106.44" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="554.8" y="405" width="0.5" height="15.0" fill="rgb(235,208,17)" rx="2" ry="2" />
<text  x="557.82" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="16.2" y="677" width="0.3" height="15.0" fill="rgb(229,75,0)" rx="2" ry="2" />
<text  x="19.25" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%)</title><rect x="78.7" y="565" width="0.2" height="15.0" fill="rgb(213,15,11)" rx="2" ry="2" />
<text  x="81.72" y="575.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="105.0" y="645" width="0.3" height="15.0" fill="rgb(212,42,15)" rx="2" ry="2" />
<text  x="108.04" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1033.6" y="373" width="0.4" height="15.0" fill="rgb(218,90,28)" rx="2" ry="2" />
<text  x="1036.60" y="383.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update_timestamp (1 samples, 0.02%)</title><rect x="1119.1" y="341" width="0.2" height="15.0" fill="rgb(253,4,8)" rx="2" ry="2" />
<text  x="1122.05" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="60.0" y="309" width="0.2" height="15.0" fill="rgb(233,51,5)" rx="2" ry="2" />
<text  x="62.98" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.8" y="405" width="0.2" height="15.0" fill="rgb(210,41,7)" rx="2" ry="2" />
<text  x="62.75" y="415.5" ></text>
</g>
<g >
<title>partition_version::partition_version (2 samples, 0.04%)</title><rect x="1122.0" y="373" width="0.4" height="15.0" fill="rgb(240,196,48)" rx="2" ry="2" />
<text  x="1124.95" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (30 samples, 0.57%)</title><rect x="562.0" y="565" width="6.7" height="15.0" fill="rgb(222,40,13)" rx="2" ry="2" />
<text  x="564.96" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="730.6" y="661" width="0.3" height="15.0" fill="rgb(234,58,35)" rx="2" ry="2" />
<text  x="733.63" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="118.9" y="597" width="0.2" height="15.0" fill="rgb(240,42,48)" rx="2" ry="2" />
<text  x="121.88" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="538.8" y="453" width="0.6" height="15.0" fill="rgb(229,1,28)" rx="2" ry="2" />
<text  x="541.76" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="515.3" y="453" width="0.7" height="15.0" fill="rgb(206,67,13)" rx="2" ry="2" />
<text  x="518.33" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (2 samples, 0.04%)</title><rect x="337.5" y="389" width="0.5" height="15.0" fill="rgb(216,226,36)" rx="2" ry="2" />
<text  x="340.52" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%)</title><rect x="729.3" y="645" width="0.4" height="15.0" fill="rgb(229,48,1)" rx="2" ry="2" />
<text  x="732.29" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="878.8" y="405" width="0.2" height="15.0" fill="rgb(249,68,48)" rx="2" ry="2" />
<text  x="881.77" y="415.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (5 samples, 0.09%)</title><rect x="973.8" y="517" width="1.1" height="15.0" fill="rgb(244,205,15)" rx="2" ry="2" />
<text  x="976.81" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.11%)</title><rect x="56.6" y="405" width="1.4" height="15.0" fill="rgb(205,4,54)" rx="2" ry="2" />
<text  x="59.63" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (37 samples, 0.70%)</title><rect x="28.3" y="437" width="8.2" height="15.0" fill="rgb(209,184,16)" rx="2" ry="2" />
<text  x="31.29" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="820.3" y="277" width="0.7" height="15.0" fill="rgb(219,155,28)" rx="2" ry="2" />
<text  x="823.32" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="837.9" y="549" width="0.3" height="15.0" fill="rgb(248,164,54)" rx="2" ry="2" />
<text  x="840.94" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="645.4" y="613" width="0.4" height="15.0" fill="rgb(212,76,42)" rx="2" ry="2" />
<text  x="648.40" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (7 samples, 0.13%)</title><rect x="684.2" y="645" width="1.6" height="15.0" fill="rgb(239,223,5)" rx="2" ry="2" />
<text  x="687.22" y="655.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (18 samples, 0.34%)</title><rect x="921.2" y="533" width="4.0" height="15.0" fill="rgb(234,74,34)" rx="2" ry="2" />
<text  x="924.16" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="41.2" y="405" width="0.7" height="15.0" fill="rgb(249,110,27)" rx="2" ry="2" />
<text  x="44.23" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="453.8" y="533" width="0.2" height="15.0" fill="rgb(215,206,26)" rx="2" ry="2" />
<text  x="456.75" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (39 samples, 0.74%)</title><rect x="433.2" y="389" width="8.7" height="15.0" fill="rgb(208,135,33)" rx="2" ry="2" />
<text  x="436.23" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1020.2" y="309" width="0.2" height="15.0" fill="rgb(212,98,28)" rx="2" ry="2" />
<text  x="1023.22" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1143.8" y="565" width="0.2" height="15.0" fill="rgb(223,123,29)" rx="2" ry="2" />
<text  x="1146.82" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="47.3" y="357" width="0.2" height="15.0" fill="rgb(221,15,5)" rx="2" ry="2" />
<text  x="50.26" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (5 samples, 0.09%)</title><rect x="554.2" y="421" width="1.1" height="15.0" fill="rgb(240,227,26)" rx="2" ry="2" />
<text  x="557.15" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="57.5" y="325" width="0.5" height="15.0" fill="rgb(237,115,0)" rx="2" ry="2" />
<text  x="60.52" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.3" y="533" width="0.3" height="15.0" fill="rgb(240,179,6)" rx="2" ry="2" />
<text  x="70.34" y="543.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (2 samples, 0.04%)</title><rect x="1165.2" y="597" width="0.5" height="15.0" fill="rgb(246,193,18)" rx="2" ry="2" />
<text  x="1168.24" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="741" width="0.2" height="15.0" fill="rgb(217,12,28)" rx="2" ry="2" />
<text  x="13.67" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="708.1" y="597" width="0.2" height="15.0" fill="rgb(242,133,12)" rx="2" ry="2" />
<text  x="711.09" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="912.2" y="469" width="0.5" height="15.0" fill="rgb(251,127,26)" rx="2" ry="2" />
<text  x="915.23" y="479.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="17.6" y="581" width="0.2" height="15.0" fill="rgb(254,11,28)" rx="2" ry="2" />
<text  x="20.59" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="165.1" y="533" width="0.6" height="15.0" fill="rgb(242,58,36)" rx="2" ry="2" />
<text  x="168.06" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (2 samples, 0.04%)</title><rect x="1125.1" y="469" width="0.4" height="15.0" fill="rgb(217,224,53)" rx="2" ry="2" />
<text  x="1128.08" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.13%)</title><rect x="198.3" y="357" width="1.6" height="15.0" fill="rgb(223,146,42)" rx="2" ry="2" />
<text  x="201.30" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="779.7" y="517" width="0.2" height="15.0" fill="rgb(244,48,33)" rx="2" ry="2" />
<text  x="782.71" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1134.7" y="661" width="0.2" height="15.0" fill="rgb(233,101,19)" rx="2" ry="2" />
<text  x="1137.67" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="826.1" y="389" width="0.7" height="15.0" fill="rgb(253,155,18)" rx="2" ry="2" />
<text  x="829.12" y="399.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1166.8" y="789" width="0.9" height="15.0" fill="rgb(228,70,3)" rx="2" ry="2" />
<text  x="1169.80" y="799.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="63.1" y="277" width="0.2" height="15.0" fill="rgb(243,137,11)" rx="2" ry="2" />
<text  x="66.10" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (5 samples, 0.09%)</title><rect x="791.3" y="517" width="1.1" height="15.0" fill="rgb(215,30,44)" rx="2" ry="2" />
<text  x="794.31" y="527.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::data_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="81.6" y="181" width="0.2" height="15.0" fill="rgb(206,66,50)" rx="2" ry="2" />
<text  x="84.62" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="1029.4" y="437" width="0.9" height="15.0" fill="rgb(227,28,0)" rx="2" ry="2" />
<text  x="1032.36" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="705.6" y="629" width="0.3" height="15.0" fill="rgb(206,215,23)" rx="2" ry="2" />
<text  x="708.64" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="111.1" y="661" width="0.4" height="15.0" fill="rgb(230,157,12)" rx="2" ry="2" />
<text  x="114.07" y="671.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (269 samples, 5.09%)</title><rect x="20.9" y="677" width="60.0" height="15.0" fill="rgb(240,76,19)" rx="2" ry="2" />
<text  x="23.93" y="687.5" >single..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="63.1" y="421" width="0.2" height="15.0" fill="rgb(210,112,53)" rx="2" ry="2" />
<text  x="66.10" y="431.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1119.5" y="373" width="0.4" height="15.0" fill="rgb(227,38,23)" rx="2" ry="2" />
<text  x="1122.50" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::create_local_service&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%)</title><rect x="18.0" y="565" width="0.3" height="15.0" fill="rgb(229,133,5)" rx="2" ry="2" />
<text  x="21.03" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (1 samples, 0.02%)</title><rect x="685.8" y="645" width="0.2" height="15.0" fill="rgb(233,32,1)" rx="2" ry="2" />
<text  x="688.78" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1159.9" y="597" width="0.2" height="15.0" fill="rgb(223,194,19)" rx="2" ry="2" />
<text  x="1162.88" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.09%)</title><rect x="479.4" y="437" width="1.1" height="15.0" fill="rgb(229,98,4)" rx="2" ry="2" />
<text  x="482.41" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="936.3" y="549" width="0.3" height="15.0" fill="rgb(243,13,39)" rx="2" ry="2" />
<text  x="939.33" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (294 samples, 5.56%)</title><rect x="205.4" y="405" width="65.6" height="15.0" fill="rgb(218,191,32)" rx="2" ry="2" />
<text  x="208.44" y="415.5" >partiti..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="59.8" y="453" width="0.4" height="15.0" fill="rgb(215,162,3)" rx="2" ry="2" />
<text  x="62.75" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="659.9" y="581" width="0.2" height="15.0" fill="rgb(238,74,44)" rx="2" ry="2" />
<text  x="662.90" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="681.5" y="629" width="0.3" height="15.0" fill="rgb(234,164,45)" rx="2" ry="2" />
<text  x="684.54" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="851.3" y="533" width="0.7" height="15.0" fill="rgb(246,42,49)" rx="2" ry="2" />
<text  x="854.33" y="543.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="75.8" y="517" width="0.2" height="15.0" fill="rgb(250,100,24)" rx="2" ry="2" />
<text  x="78.82" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (4 samples, 0.08%)</title><rect x="1043.2" y="469" width="0.9" height="15.0" fill="rgb(248,54,12)" rx="2" ry="2" />
<text  x="1046.20" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,820 samples, 91.13%)</title><rect x="88.1" y="677" width="1075.4" height="15.0" fill="rgb(211,5,37)" rx="2" ry="2" />
<text  x="91.09" y="687.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (2 samples, 0.04%)</title><rect x="1130.2" y="277" width="0.5" height="15.0" fill="rgb(240,30,10)" rx="2" ry="2" />
<text  x="1133.21" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="82.1" y="581" width="0.2" height="15.0" fill="rgb(249,31,12)" rx="2" ry="2" />
<text  x="85.06" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="46.8" y="453" width="0.2" height="15.0" fill="rgb(231,157,7)" rx="2" ry="2" />
<text  x="49.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="881.0" y="469" width="0.2" height="15.0" fill="rgb(249,213,6)" rx="2" ry="2" />
<text  x="884.00" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="837.0" y="437" width="0.5" height="15.0" fill="rgb(243,29,15)" rx="2" ry="2" />
<text  x="840.05" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="861.1" y="549" width="2.5" height="15.0" fill="rgb(250,137,40)" rx="2" ry="2" />
<text  x="864.14" y="559.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="628.2" y="581" width="0.2" height="15.0" fill="rgb(254,23,43)" rx="2" ry="2" />
<text  x="631.22" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="56.6" y="389" width="0.3" height="15.0" fill="rgb(237,6,44)" rx="2" ry="2" />
<text  x="59.63" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="269.0" y="373" width="0.2" height="15.0" fill="rgb(243,161,30)" rx="2" ry="2" />
<text  x="272.02" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,843 samples, 91.57%)</title><rect x="86.1" y="709" width="1080.5" height="15.0" fill="rgb(233,102,13)" rx="2" ry="2" />
<text  x="89.08" y="719.5" >seastar::reactor::run</text>
</g>
<g >
<title>db::query_context::execute_cql&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(234,157,46)" rx="2" ry="2" />
<text  x="13.67" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="47.0" y="437" width="0.7" height="15.0" fill="rgb(229,205,24)" rx="2" ry="2" />
<text  x="50.04" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="105.0" y="565" width="0.3" height="15.0" fill="rgb(251,199,18)" rx="2" ry="2" />
<text  x="108.04" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="791.5" y="501" width="0.9" height="15.0" fill="rgb(254,110,31)" rx="2" ry="2" />
<text  x="794.54" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.08%)</title><rect x="128.2" y="565" width="0.9" height="15.0" fill="rgb(225,70,3)" rx="2" ry="2" />
<text  x="131.25" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (3 samples, 0.06%)</title><rect x="910.4" y="517" width="0.7" height="15.0" fill="rgb(252,181,30)" rx="2" ry="2" />
<text  x="913.45" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="108.6" y="565" width="0.2" height="15.0" fill="rgb(217,6,24)" rx="2" ry="2" />
<text  x="111.61" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="951.5" y="549" width="1.8" height="15.0" fill="rgb(228,211,15)" rx="2" ry="2" />
<text  x="954.50" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="265.5" y="341" width="0.2" height="15.0" fill="rgb(245,108,44)" rx="2" ry="2" />
<text  x="268.45" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="205.0" y="373" width="0.2" height="15.0" fill="rgb(243,145,32)" rx="2" ry="2" />
<text  x="207.99" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="58.4" y="421" width="0.2" height="15.0" fill="rgb(211,197,24)" rx="2" ry="2" />
<text  x="61.41" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="702.7" y="501" width="0.3" height="15.0" fill="rgb(218,93,31)" rx="2" ry="2" />
<text  x="705.74" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="44.4" y="325" width="0.2" height="15.0" fill="rgb(225,216,19)" rx="2" ry="2" />
<text  x="47.36" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="51.7" y="421" width="0.2" height="15.0" fill="rgb(215,71,41)" rx="2" ry="2" />
<text  x="54.72" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%)</title><rect x="110.6" y="501" width="0.2" height="15.0" fill="rgb(238,122,27)" rx="2" ry="2" />
<text  x="113.62" y="511.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="714.8" y="645" width="2.0" height="15.0" fill="rgb(226,182,16)" rx="2" ry="2" />
<text  x="717.79" y="655.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1052.6" y="485" width="0.6" height="15.0" fill="rgb(212,118,38)" rx="2" ry="2" />
<text  x="1055.57" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="334.6" y="405" width="0.2" height="15.0" fill="rgb(227,193,52)" rx="2" ry="2" />
<text  x="337.62" y="415.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%)</title><rect x="875.6" y="453" width="0.5" height="15.0" fill="rgb(211,225,43)" rx="2" ry="2" />
<text  x="878.65" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (13 samples, 0.25%)</title><rect x="817.2" y="309" width="2.9" height="15.0" fill="rgb(248,185,24)" rx="2" ry="2" />
<text  x="820.19" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="57.5" y="229" width="0.5" height="15.0" fill="rgb(250,214,4)" rx="2" ry="2" />
<text  x="60.52" y="239.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="61.3" y="421" width="0.2" height="15.0" fill="rgb(238,129,53)" rx="2" ry="2" />
<text  x="64.31" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (6 samples, 0.11%)</title><rect x="925.4" y="549" width="1.3" height="15.0" fill="rgb(219,166,0)" rx="2" ry="2" />
<text  x="928.40" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.11%)</title><rect x="680.0" y="629" width="1.3" height="15.0" fill="rgb(253,124,7)" rx="2" ry="2" />
<text  x="682.98" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1135.8" y="661" width="0.2" height="15.0" fill="rgb(219,170,34)" rx="2" ry="2" />
<text  x="1138.79" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="960.4" y="517" width="0.2" height="15.0" fill="rgb(237,217,45)" rx="2" ry="2" />
<text  x="963.43" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.09%)</title><rect x="667.7" y="613" width="1.1" height="15.0" fill="rgb(217,221,9)" rx="2" ry="2" />
<text  x="670.71" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.11%)</title><rect x="278.2" y="341" width="1.3" height="15.0" fill="rgb(225,103,37)" rx="2" ry="2" />
<text  x="281.17" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="108.8" y="501" width="0.5" height="15.0" fill="rgb(214,38,50)" rx="2" ry="2" />
<text  x="111.84" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="38.6" y="453" width="0.4" height="15.0" fill="rgb(240,20,35)" rx="2" ry="2" />
<text  x="41.56" y="463.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::close (1 samples, 0.02%)</title><rect x="703.0" y="629" width="0.2" height="15.0" fill="rgb(229,161,23)" rx="2" ry="2" />
<text  x="705.96" y="639.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.2" y="709" width="0.3" height="15.0" fill="rgb(233,19,9)" rx="2" ry="2" />
<text  x="19.25" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="269.5" y="389" width="0.2" height="15.0" fill="rgb(215,85,20)" rx="2" ry="2" />
<text  x="272.47" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1150.1" y="565" width="0.4" height="15.0" fill="rgb(208,47,19)" rx="2" ry="2" />
<text  x="1153.06" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="298.9" y="485" width="0.5" height="15.0" fill="rgb(225,200,19)" rx="2" ry="2" />
<text  x="301.92" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.09%)</title><rect x="664.4" y="581" width="1.1" height="15.0" fill="rgb(241,30,7)" rx="2" ry="2" />
<text  x="667.37" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="45.0" y="277" width="0.5" height="15.0" fill="rgb(222,63,50)" rx="2" ry="2" />
<text  x="48.03" y="287.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.1" y="453" width="0.2" height="15.0" fill="rgb(230,24,19)" rx="2" ry="2" />
<text  x="1128.08" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="74.3" y="405" width="0.2" height="15.0" fill="rgb(229,138,31)" rx="2" ry="2" />
<text  x="77.25" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (18 samples, 0.34%)</title><rect x="744.9" y="533" width="4.0" height="15.0" fill="rgb(224,201,12)" rx="2" ry="2" />
<text  x="747.91" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="256.1" y="309" width="0.7" height="15.0" fill="rgb(240,164,33)" rx="2" ry="2" />
<text  x="259.08" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="670.8" y="613" width="0.3" height="15.0" fill="rgb(219,32,17)" rx="2" ry="2" />
<text  x="673.84" y="623.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (4 samples, 0.08%)</title><rect x="389.7" y="325" width="0.9" height="15.0" fill="rgb(253,139,5)" rx="2" ry="2" />
<text  x="392.72" y="335.5" ></text>
</g>
<g >
<title>__start_context (14 samples, 0.26%)</title><rect x="82.1" y="757" width="3.1" height="15.0" fill="rgb(228,118,21)" rx="2" ry="2" />
<text  x="85.06" y="767.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="82.7" y="469" width="0.3" height="15.0" fill="rgb(226,55,21)" rx="2" ry="2" />
<text  x="85.73" y="479.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="944.4" y="549" width="0.2" height="15.0" fill="rgb(250,170,1)" rx="2" ry="2" />
<text  x="947.36" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="110.4" y="485" width="0.2" height="15.0" fill="rgb(233,71,46)" rx="2" ry="2" />
<text  x="113.40" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="256.5" y="277" width="0.3" height="15.0" fill="rgb(212,27,47)" rx="2" ry="2" />
<text  x="259.53" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="1040.5" y="469" width="2.3" height="15.0" fill="rgb(237,107,52)" rx="2" ry="2" />
<text  x="1043.52" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="930.3" y="549" width="0.7" height="15.0" fill="rgb(231,12,16)" rx="2" ry="2" />
<text  x="933.31" y="559.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%)</title><rect x="20.5" y="629" width="0.2" height="15.0" fill="rgb(249,11,0)" rx="2" ry="2" />
<text  x="23.49" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="667.9" y="565" width="0.5" height="15.0" fill="rgb(206,207,43)" rx="2" ry="2" />
<text  x="670.94" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%)</title><rect x="876.1" y="549" width="0.2" height="15.0" fill="rgb(242,198,2)" rx="2" ry="2" />
<text  x="879.09" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (2 samples, 0.04%)</title><rect x="485.9" y="485" width="0.4" height="15.0" fill="rgb(222,22,14)" rx="2" ry="2" />
<text  x="488.88" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1020.0" y="341" width="0.2" height="15.0" fill="rgb(233,162,21)" rx="2" ry="2" />
<text  x="1022.99" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="85.9" y="741" width="0.2" height="15.0" fill="rgb(213,168,34)" rx="2" ry="2" />
<text  x="88.86" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="667.9" y="581" width="0.7" height="15.0" fill="rgb(235,37,54)" rx="2" ry="2" />
<text  x="670.94" y="591.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="447.1" y="421" width="0.4" height="15.0" fill="rgb(231,23,53)" rx="2" ry="2" />
<text  x="450.06" y="431.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%)</title><rect x="744.2" y="581" width="0.3" height="15.0" fill="rgb(232,93,9)" rx="2" ry="2" />
<text  x="747.24" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1023.6" y="341" width="0.2" height="15.0" fill="rgb(234,134,22)" rx="2" ry="2" />
<text  x="1026.56" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%)</title><rect x="50.6" y="389" width="0.2" height="15.0" fill="rgb(232,195,42)" rx="2" ry="2" />
<text  x="53.61" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="866.9" y="501" width="2.1" height="15.0" fill="rgb(227,115,14)" rx="2" ry="2" />
<text  x="869.94" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="446.8" y="437" width="0.3" height="15.0" fill="rgb(246,217,9)" rx="2" ry="2" />
<text  x="449.84" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="87.2" y="677" width="0.2" height="15.0" fill="rgb(244,220,50)" rx="2" ry="2" />
<text  x="90.19" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1105.2" y="533" width="0.9" height="15.0" fill="rgb(227,122,21)" rx="2" ry="2" />
<text  x="1108.22" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (26 samples, 0.49%)</title><rect x="864.0" y="597" width="5.8" height="15.0" fill="rgb(251,116,6)" rx="2" ry="2" />
<text  x="867.04" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (4 samples, 0.08%)</title><rect x="789.5" y="533" width="0.9" height="15.0" fill="rgb(221,117,48)" rx="2" ry="2" />
<text  x="792.53" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%)</title><rect x="405.1" y="373" width="0.5" height="15.0" fill="rgb(254,140,16)" rx="2" ry="2" />
<text  x="408.12" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%)</title><rect x="428.1" y="373" width="0.2" height="15.0" fill="rgb(209,25,37)" rx="2" ry="2" />
<text  x="431.10" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%)</title><rect x="72.7" y="485" width="0.2" height="15.0" fill="rgb(209,4,53)" rx="2" ry="2" />
<text  x="75.69" y="495.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (2 samples, 0.04%)</title><rect x="702.3" y="629" width="0.4" height="15.0" fill="rgb(207,100,24)" rx="2" ry="2" />
<text  x="705.29" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (4 samples, 0.08%)</title><rect x="369.6" y="341" width="0.9" height="15.0" fill="rgb(233,38,15)" rx="2" ry="2" />
<text  x="372.64" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="940.6" y="501" width="0.2" height="15.0" fill="rgb(205,160,12)" rx="2" ry="2" />
<text  x="943.57" y="511.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%)</title><rect x="1123.7" y="421" width="0.5" height="15.0" fill="rgb(223,202,11)" rx="2" ry="2" />
<text  x="1126.74" y="431.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="263.7" y="341" width="0.4" height="15.0" fill="rgb(243,37,48)" rx="2" ry="2" />
<text  x="266.67" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="81.6" y="325" width="0.2" height="15.0" fill="rgb(237,198,48)" rx="2" ry="2" />
<text  x="84.62" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="606.8" y="581" width="0.2" height="15.0" fill="rgb(216,87,27)" rx="2" ry="2" />
<text  x="609.80" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (11 samples, 0.21%)</title><rect x="777.3" y="517" width="2.4" height="15.0" fill="rgb(215,186,19)" rx="2" ry="2" />
<text  x="780.26" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%)</title><rect x="708.3" y="613" width="0.2" height="15.0" fill="rgb(206,32,54)" rx="2" ry="2" />
<text  x="711.32" y="623.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 6.43%)</title><rect x="10.2" y="789" width="75.9" height="15.0" fill="rgb(246,218,14)" rx="2" ry="2" />
<text  x="13.22" y="799.5" >[unknown]</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="633.4" y="549" width="0.2" height="15.0" fill="rgb(253,16,2)" rx="2" ry="2" />
<text  x="636.35" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="676.0" y="613" width="0.2" height="15.0" fill="rgb(209,123,20)" rx="2" ry="2" />
<text  x="678.97" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="962.0" y="533" width="0.2" height="15.0" fill="rgb(254,28,25)" rx="2" ry="2" />
<text  x="964.99" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="331.9" y="437" width="0.3" height="15.0" fill="rgb(212,179,54)" rx="2" ry="2" />
<text  x="334.94" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%)</title><rect x="941.9" y="533" width="2.0" height="15.0" fill="rgb(254,34,12)" rx="2" ry="2" />
<text  x="944.91" y="543.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (32 samples, 0.61%)</title><rect x="503.3" y="421" width="7.1" height="15.0" fill="rgb(224,42,11)" rx="2" ry="2" />
<text  x="506.28" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (11 samples, 0.21%)</title><rect x="44.1" y="501" width="2.5" height="15.0" fill="rgb(224,39,48)" rx="2" ry="2" />
<text  x="47.13" y="511.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="904.9" y="453" width="2.2" height="15.0" fill="rgb(206,52,54)" rx="2" ry="2" />
<text  x="907.87" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1117.7" y="293" width="0.2" height="15.0" fill="rgb(242,222,31)" rx="2" ry="2" />
<text  x="1120.71" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="81.6" y="117" width="0.2" height="15.0" fill="rgb(247,146,22)" rx="2" ry="2" />
<text  x="84.62" y="127.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_dcd3199037457158f6e2516231906d04f9637da6] (1 samples, 0.02%)</title><rect x="691.1" y="645" width="0.3" height="15.0" fill="rgb(215,75,15)" rx="2" ry="2" />
<text  x="694.14" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (11 samples, 0.21%)</title><rect x="633.4" y="565" width="2.4" height="15.0" fill="rgb(224,50,38)" rx="2" ry="2" />
<text  x="636.35" y="575.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="81.8" y="565" width="0.3" height="15.0" fill="rgb(213,81,49)" rx="2" ry="2" />
<text  x="84.84" y="575.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (1 samples, 0.02%)</title><rect x="140.1" y="357" width="0.2" height="15.0" fill="rgb(215,90,22)" rx="2" ry="2" />
<text  x="143.07" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1099.6" y="549" width="0.5" height="15.0" fill="rgb(250,52,25)" rx="2" ry="2" />
<text  x="1102.64" y="559.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (2 samples, 0.04%)</title><rect x="1131.8" y="325" width="0.4" height="15.0" fill="rgb(234,5,46)" rx="2" ry="2" />
<text  x="1134.77" y="335.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%)</title><rect x="729.3" y="629" width="0.2" height="15.0" fill="rgb(236,196,54)" rx="2" ry="2" />
<text  x="732.29" y="639.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="545.5" y="501" width="0.2" height="15.0" fill="rgb(248,134,29)" rx="2" ry="2" />
<text  x="548.45" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="554.2" y="405" width="0.6" height="15.0" fill="rgb(252,161,17)" rx="2" ry="2" />
<text  x="557.15" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="852.0" y="581" width="0.2" height="15.0" fill="rgb(251,152,51)" rx="2" ry="2" />
<text  x="855.00" y="591.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="722.4" y="581" width="0.2" height="15.0" fill="rgb(244,8,33)" rx="2" ry="2" />
<text  x="725.37" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="571.3" y="581" width="0.3" height="15.0" fill="rgb(232,58,22)" rx="2" ry="2" />
<text  x="574.33" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="522.0" y="421" width="0.5" height="15.0" fill="rgb(212,27,30)" rx="2" ry="2" />
<text  x="525.02" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="1117.7" y="277" width="0.2" height="15.0" fill="rgb(228,74,40)" rx="2" ry="2" />
<text  x="1120.71" y="287.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (1 samples, 0.02%)</title><rect x="85.0" y="629" width="0.2" height="15.0" fill="rgb(232,41,53)" rx="2" ry="2" />
<text  x="87.96" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="105.0" y="485" width="0.3" height="15.0" fill="rgb(208,210,39)" rx="2" ry="2" />
<text  x="108.04" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="504.6" y="357" width="0.9" height="15.0" fill="rgb(237,92,29)" rx="2" ry="2" />
<text  x="507.62" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="559.7" y="581" width="0.3" height="15.0" fill="rgb(222,58,46)" rx="2" ry="2" />
<text  x="562.73" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="866.3" y="549" width="0.2" height="15.0" fill="rgb(243,127,24)" rx="2" ry="2" />
<text  x="869.28" y="559.5" ></text>
</g>
<g >
<title>__libc_start_main (4,844 samples, 91.59%)</title><rect x="86.1" y="789" width="1080.7" height="15.0" fill="rgb(233,118,31)" rx="2" ry="2" />
<text  x="89.08" y="799.5" >__libc_start_main</text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%)</title><rect x="457.8" y="517" width="0.2" height="15.0" fill="rgb(230,139,29)" rx="2" ry="2" />
<text  x="460.77" y="527.5" ></text>
</g>
<g >
<title>__strlen_avx2 (7 samples, 0.13%)</title><rect x="1006.6" y="405" width="1.6" height="15.0" fill="rgb(220,110,3)" rx="2" ry="2" />
<text  x="1009.61" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (47 samples, 0.89%)</title><rect x="309.6" y="485" width="10.5" height="15.0" fill="rgb(254,146,32)" rx="2" ry="2" />
<text  x="312.63" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (2 samples, 0.04%)</title><rect x="78.9" y="533" width="0.5" height="15.0" fill="rgb(242,221,47)" rx="2" ry="2" />
<text  x="81.94" y="543.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="702.1" y="453" width="0.2" height="15.0" fill="rgb(227,136,33)" rx="2" ry="2" />
<text  x="705.07" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="51.7" y="453" width="0.2" height="15.0" fill="rgb(236,15,18)" rx="2" ry="2" />
<text  x="54.72" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (40 samples, 0.76%)</title><rect x="1089.4" y="565" width="8.9" height="15.0" fill="rgb(233,174,47)" rx="2" ry="2" />
<text  x="1092.38" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="289.1" y="373" width="0.2" height="15.0" fill="rgb(206,142,30)" rx="2" ry="2" />
<text  x="292.10" y="383.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Lexer (1 samples, 0.02%)</title><rect x="22.3" y="581" width="0.2" height="15.0" fill="rgb(236,14,0)" rx="2" ry="2" />
<text  x="25.27" y="591.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (14 samples, 0.26%)</title><rect x="922.1" y="517" width="3.1" height="15.0" fill="rgb(213,149,28)" rx="2" ry="2" />
<text  x="925.05" y="527.5" ></text>
</g>
<g >
<title>seastar::io_queue::find_or_create_class (1 samples, 0.02%)</title><rect x="1164.8" y="533" width="0.2" height="15.0" fill="rgb(227,136,8)" rx="2" ry="2" />
<text  x="1167.79" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="329.9" y="453" width="0.3" height="15.0" fill="rgb(214,59,13)" rx="2" ry="2" />
<text  x="332.93" y="463.5" ></text>
</g>
<g >
<title>sstables::sstable::seal_sstable (1 samples, 0.02%)</title><rect x="729.7" y="645" width="0.3" height="15.0" fill="rgb(226,156,33)" rx="2" ry="2" />
<text  x="732.74" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (5 samples, 0.09%)</title><rect x="935.2" y="549" width="1.1" height="15.0" fill="rgb(244,117,22)" rx="2" ry="2" />
<text  x="938.21" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.09%)</title><rect x="940.3" y="517" width="1.2" height="15.0" fill="rgb(212,172,49)" rx="2" ry="2" />
<text  x="943.35" y="527.5" ></text>
</g>
<g >
<title>distributed_loader::init_non_system_keyspaces (1 samples, 0.02%)</title><rect x="81.6" y="645" width="0.2" height="15.0" fill="rgb(218,1,3)" rx="2" ry="2" />
<text  x="84.62" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (25 samples, 0.47%)</title><rect x="876.5" y="597" width="5.6" height="15.0" fill="rgb(250,158,32)" rx="2" ry="2" />
<text  x="879.54" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (2 samples, 0.04%)</title><rect x="535.9" y="405" width="0.4" height="15.0" fill="rgb(247,217,13)" rx="2" ry="2" />
<text  x="538.86" y="415.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="18.3" y="613" width="0.2" height="15.0" fill="rgb(229,88,7)" rx="2" ry="2" />
<text  x="21.25" y="623.5" ></text>
</g>
<g >
<title>database::find_uuid (18 samples, 0.34%)</title><rect x="841.7" y="517" width="4.0" height="15.0" fill="rgb(246,63,34)" rx="2" ry="2" />
<text  x="844.73" y="527.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (6 samples, 0.11%)</title><rect x="37.7" y="469" width="1.3" height="15.0" fill="rgb(235,172,49)" rx="2" ry="2" />
<text  x="40.66" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.62%)</title><rect x="815.2" y="341" width="7.3" height="15.0" fill="rgb(229,195,13)" rx="2" ry="2" />
<text  x="818.18" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="440.6" y="357" width="0.2" height="15.0" fill="rgb(205,127,11)" rx="2" ry="2" />
<text  x="443.59" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1029.6" y="421" width="0.7" height="15.0" fill="rgb(236,127,16)" rx="2" ry="2" />
<text  x="1032.59" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.1" y="341" width="0.2" height="15.0" fill="rgb(220,201,6)" rx="2" ry="2" />
<text  x="705.07" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="286.0" y="341" width="0.2" height="15.0" fill="rgb(230,66,3)" rx="2" ry="2" />
<text  x="288.98" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.3" y="341" width="0.2" height="15.0" fill="rgb(222,197,34)" rx="2" ry="2" />
<text  x="1037.27" y="351.5" ></text>
</g>
<g >
<title>posix_memalign (9 samples, 0.17%)</title><rect x="241.4" y="245" width="2.0" height="15.0" fill="rgb(232,117,42)" rx="2" ry="2" />
<text  x="244.36" y="255.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="680.9" y="581" width="0.4" height="15.0" fill="rgb(226,7,5)" rx="2" ry="2" />
<text  x="683.88" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="533.4" y="341" width="0.4" height="15.0" fill="rgb(242,115,46)" rx="2" ry="2" />
<text  x="536.40" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (8 samples, 0.15%)</title><rect x="277.7" y="357" width="1.8" height="15.0" fill="rgb(254,76,4)" rx="2" ry="2" />
<text  x="280.73" y="367.5" ></text>
</g>
<g >
<title>all (5,289 samples, 100%)</title><rect x="10.0" y="821" width="1180.0" height="15.0" fill="rgb(209,225,47)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="47.5" y="341" width="0.2" height="15.0" fill="rgb(216,222,43)" rx="2" ry="2" />
<text  x="50.48" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (2 samples, 0.04%)</title><rect x="875.6" y="405" width="0.5" height="15.0" fill="rgb(210,33,29)" rx="2" ry="2" />
<text  x="878.65" y="415.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (6 samples, 0.11%)</title><rect x="1117.3" y="405" width="1.3" height="15.0" fill="rgb(253,124,29)" rx="2" ry="2" />
<text  x="1120.27" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.28%)</title><rect x="1031.1" y="437" width="3.4" height="15.0" fill="rgb(206,56,13)" rx="2" ry="2" />
<text  x="1034.15" y="447.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="646.1" y="629" width="0.2" height="15.0" fill="rgb(248,160,34)" rx="2" ry="2" />
<text  x="649.07" y="639.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::_Bind&lt;bool  (1 samples, 0.02%)</title><rect x="1131.1" y="341" width="0.2" height="15.0" fill="rgb(227,4,43)" rx="2" ry="2" />
<text  x="1134.10" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="133.8" y="565" width="0.5" height="15.0" fill="rgb(223,88,52)" rx="2" ry="2" />
<text  x="136.82" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%)</title><rect x="26.1" y="325" width="0.2" height="15.0" fill="rgb(235,9,48)" rx="2" ry="2" />
<text  x="29.06" y="335.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%)</title><rect x="877.4" y="517" width="0.3" height="15.0" fill="rgb(206,196,26)" rx="2" ry="2" />
<text  x="880.43" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (3 samples, 0.06%)</title><rect x="1016.6" y="309" width="0.7" height="15.0" fill="rgb(242,224,45)" rx="2" ry="2" />
<text  x="1019.65" y="319.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (211 samples, 3.99%)</title><rect x="21.6" y="613" width="47.1" height="15.0" fill="rgb(232,94,53)" rx="2" ry="2" />
<text  x="24.60" y="623.5" >cql3..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1127.1" y="309" width="0.2" height="15.0" fill="rgb(252,84,1)" rx="2" ry="2" />
<text  x="1130.08" y="319.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="925.2" y="549" width="0.2" height="15.0" fill="rgb(238,150,37)" rx="2" ry="2" />
<text  x="928.17" y="559.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (4 samples, 0.08%)</title><rect x="872.7" y="613" width="0.9" height="15.0" fill="rgb(240,140,12)" rx="2" ry="2" />
<text  x="875.75" y="623.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="26.3" y="325" width="0.2" height="15.0" fill="rgb(205,46,30)" rx="2" ry="2" />
<text  x="29.29" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1142.7" y="613" width="0.2" height="15.0" fill="rgb(250,86,52)" rx="2" ry="2" />
<text  x="1145.70" y="623.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="692.9" y="613" width="0.2" height="15.0" fill="rgb(215,6,17)" rx="2" ry="2" />
<text  x="695.92" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="862.0" y="517" width="0.5" height="15.0" fill="rgb(222,145,48)" rx="2" ry="2" />
<text  x="865.04" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="584.0" y="437" width="0.7" height="15.0" fill="rgb(250,29,8)" rx="2" ry="2" />
<text  x="587.05" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.1" y="533" width="0.2" height="15.0" fill="rgb(220,160,48)" rx="2" ry="2" />
<text  x="70.11" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="44.6" y="325" width="0.2" height="15.0" fill="rgb(247,208,15)" rx="2" ry="2" />
<text  x="47.58" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (7 samples, 0.13%)</title><rect x="688.5" y="613" width="1.5" height="15.0" fill="rgb(250,99,20)" rx="2" ry="2" />
<text  x="691.46" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="59.8" y="373" width="0.2" height="15.0" fill="rgb(254,168,17)" rx="2" ry="2" />
<text  x="62.75" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="846.2" y="453" width="0.2" height="15.0" fill="rgb(216,132,14)" rx="2" ry="2" />
<text  x="849.20" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::has_supporting_index (1 samples, 0.02%)</title><rect x="73.1" y="533" width="0.3" height="15.0" fill="rgb(231,81,49)" rx="2" ry="2" />
<text  x="76.14" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="61.5" y="389" width="0.5" height="15.0" fill="rgb(246,139,16)" rx="2" ry="2" />
<text  x="64.54" y="399.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="899.3" y="453" width="0.4" height="15.0" fill="rgb(236,60,12)" rx="2" ry="2" />
<text  x="902.29" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="952.2" y="533" width="0.2" height="15.0" fill="rgb(254,1,47)" rx="2" ry="2" />
<text  x="955.17" y="543.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="16.9" y="709" width="0.2" height="15.0" fill="rgb(241,1,26)" rx="2" ry="2" />
<text  x="19.92" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="830.8" y="421" width="0.2" height="15.0" fill="rgb(225,227,40)" rx="2" ry="2" />
<text  x="833.80" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="668.4" y="565" width="0.2" height="15.0" fill="rgb(209,169,25)" rx="2" ry="2" />
<text  x="671.38" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.2" y="261" width="0.2" height="15.0" fill="rgb(245,150,14)" rx="2" ry="2" />
<text  x="59.18" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (7 samples, 0.13%)</title><rect x="1130.7" y="373" width="1.5" height="15.0" fill="rgb(214,94,9)" rx="2" ry="2" />
<text  x="1133.65" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="57.5" y="213" width="0.5" height="15.0" fill="rgb(218,172,10)" rx="2" ry="2" />
<text  x="60.52" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;mutation const*, mutation*&gt; (1 samples, 0.02%)</title><rect x="105.0" y="533" width="0.3" height="15.0" fill="rgb(245,150,22)" rx="2" ry="2" />
<text  x="108.04" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="560.0" y="581" width="0.2" height="15.0" fill="rgb(211,141,36)" rx="2" ry="2" />
<text  x="562.95" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (1 samples, 0.02%)</title><rect x="454.0" y="533" width="0.2" height="15.0" fill="rgb(220,76,29)" rx="2" ry="2" />
<text  x="456.98" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="363.2" y="341" width="0.4" height="15.0" fill="rgb(238,133,25)" rx="2" ry="2" />
<text  x="366.17" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (10 samples, 0.19%)</title><rect x="1016.4" y="325" width="2.3" height="15.0" fill="rgb(248,224,54)" rx="2" ry="2" />
<text  x="1019.42" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="291.1" y="421" width="0.2" height="15.0" fill="rgb(228,114,17)" rx="2" ry="2" />
<text  x="294.11" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="526.3" y="341" width="0.4" height="15.0" fill="rgb(242,59,52)" rx="2" ry="2" />
<text  x="529.26" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::shared_ptr_count_for&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="656.6" y="629" width="0.2" height="15.0" fill="rgb(241,227,15)" rx="2" ry="2" />
<text  x="659.56" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="96.3" y="629" width="0.5" height="15.0" fill="rgb(215,201,46)" rx="2" ry="2" />
<text  x="99.34" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (83 samples, 1.57%)</title><rect x="519.3" y="453" width="18.6" height="15.0" fill="rgb(252,206,43)" rx="2" ry="2" />
<text  x="522.35" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%)</title><rect x="10.7" y="421" width="0.2" height="15.0" fill="rgb(244,67,1)" rx="2" ry="2" />
<text  x="13.67" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (12 samples, 0.23%)</title><rect x="315.0" y="453" width="2.7" height="15.0" fill="rgb(252,16,41)" rx="2" ry="2" />
<text  x="317.98" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (3 samples, 0.06%)</title><rect x="711.0" y="613" width="0.7" height="15.0" fill="rgb(229,171,25)" rx="2" ry="2" />
<text  x="713.99" y="623.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="493.7" y="437" width="0.4" height="15.0" fill="rgb(219,90,45)" rx="2" ry="2" />
<text  x="496.69" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.09%)</title><rect x="893.9" y="549" width="1.2" height="15.0" fill="rgb(254,151,20)" rx="2" ry="2" />
<text  x="896.94" y="559.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (38 samples, 0.72%)</title><rect x="742.2" y="597" width="8.5" height="15.0" fill="rgb(241,72,27)" rx="2" ry="2" />
<text  x="745.23" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="643.2" y="629" width="0.6" height="15.0" fill="rgb(225,40,47)" rx="2" ry="2" />
<text  x="646.17" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="791.1" y="485" width="0.2" height="15.0" fill="rgb(234,115,25)" rx="2" ry="2" />
<text  x="794.09" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="829.7" y="437" width="0.4" height="15.0" fill="rgb(246,71,25)" rx="2" ry="2" />
<text  x="832.69" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="21.2" y="629" width="0.2" height="15.0" fill="rgb(232,221,20)" rx="2" ry="2" />
<text  x="24.16" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="843.7" y="469" width="1.4" height="15.0" fill="rgb(235,215,47)" rx="2" ry="2" />
<text  x="846.74" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="768.1" y="549" width="0.7" height="15.0" fill="rgb(239,117,54)" rx="2" ry="2" />
<text  x="771.11" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="872.1" y="597" width="0.2" height="15.0" fill="rgb(235,38,14)" rx="2" ry="2" />
<text  x="875.08" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="17.8" y="693" width="0.2" height="15.0" fill="rgb(241,111,7)" rx="2" ry="2" />
<text  x="20.81" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="1122.8" y="405" width="0.5" height="15.0" fill="rgb(214,8,52)" rx="2" ry="2" />
<text  x="1125.85" y="415.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="893.5" y="565" width="0.2" height="15.0" fill="rgb(227,12,1)" rx="2" ry="2" />
<text  x="896.49" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="38.1" y="453" width="0.2" height="15.0" fill="rgb(243,56,15)" rx="2" ry="2" />
<text  x="41.11" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="81.6" y="629" width="0.2" height="15.0" fill="rgb(228,69,9)" rx="2" ry="2" />
<text  x="84.62" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.4" y="373" width="0.2" height="15.0" fill="rgb(231,140,17)" rx="2" ry="2" />
<text  x="63.42" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="580.5" y="453" width="0.2" height="15.0" fill="rgb(214,131,34)" rx="2" ry="2" />
<text  x="583.48" y="463.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1126.4" y="309" width="0.2" height="15.0" fill="rgb(208,225,21)" rx="2" ry="2" />
<text  x="1129.42" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.7" y="501" width="0.2" height="15.0" fill="rgb(236,208,3)" rx="2" ry="2" />
<text  x="69.67" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (1 samples, 0.02%)</title><rect x="35.7" y="389" width="0.2" height="15.0" fill="rgb(230,229,37)" rx="2" ry="2" />
<text  x="38.66" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="458.0" y="517" width="0.2" height="15.0" fill="rgb(250,102,9)" rx="2" ry="2" />
<text  x="460.99" y="527.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.2" y="677" width="0.2" height="15.0" fill="rgb(254,220,37)" rx="2" ry="2" />
<text  x="88.19" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="1140.2" y="645" width="0.3" height="15.0" fill="rgb(247,214,40)" rx="2" ry="2" />
<text  x="1143.25" y="655.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.09%)</title><rect x="157.0" y="597" width="1.1" height="15.0" fill="rgb(228,124,17)" rx="2" ry="2" />
<text  x="160.03" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="22.3" y="565" width="0.2" height="15.0" fill="rgb(245,117,49)" rx="2" ry="2" />
<text  x="25.27" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="971.6" y="485" width="2.0" height="15.0" fill="rgb(223,114,46)" rx="2" ry="2" />
<text  x="974.58" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="44.6" y="453" width="0.2" height="15.0" fill="rgb(250,90,33)" rx="2" ry="2" />
<text  x="47.58" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="833.7" y="485" width="0.2" height="15.0" fill="rgb(230,190,12)" rx="2" ry="2" />
<text  x="836.70" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.11%)</title><rect x="854.9" y="533" width="1.3" height="15.0" fill="rgb(208,82,35)" rx="2" ry="2" />
<text  x="857.90" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="39.7" y="517" width="0.4" height="15.0" fill="rgb(243,25,20)" rx="2" ry="2" />
<text  x="42.67" y="527.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (11 samples, 0.21%)</title><rect x="1108.3" y="565" width="2.5" height="15.0" fill="rgb(218,33,31)" rx="2" ry="2" />
<text  x="1111.34" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.8" y="501" width="0.2" height="15.0" fill="rgb(243,35,35)" rx="2" ry="2" />
<text  x="20.81" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.09%)</title><rect x="840.6" y="469" width="1.1" height="15.0" fill="rgb(208,163,10)" rx="2" ry="2" />
<text  x="843.62" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1157.4" y="629" width="0.2" height="15.0" fill="rgb(218,68,31)" rx="2" ry="2" />
<text  x="1160.43" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (26 samples, 0.49%)</title><rect x="479.2" y="453" width="5.8" height="15.0" fill="rgb(217,164,28)" rx="2" ry="2" />
<text  x="482.19" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="46.1" y="453" width="0.3" height="15.0" fill="rgb(233,184,43)" rx="2" ry="2" />
<text  x="49.14" y="463.5" ></text>
</g>
<g >
<title>seastar::file::close (1 samples, 0.02%)</title><rect x="703.0" y="645" width="0.2" height="15.0" fill="rgb(208,153,29)" rx="2" ry="2" />
<text  x="705.96" y="655.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (35 samples, 0.66%)</title><rect x="415.6" y="325" width="7.8" height="15.0" fill="rgb(222,175,9)" rx="2" ry="2" />
<text  x="418.60" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="74.9" y="389" width="0.2" height="15.0" fill="rgb(216,38,37)" rx="2" ry="2" />
<text  x="77.92" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="27.0" y="405" width="0.4" height="15.0" fill="rgb(214,117,3)" rx="2" ry="2" />
<text  x="29.96" y="415.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.7" y="389" width="0.3" height="15.0" fill="rgb(219,211,34)" rx="2" ry="2" />
<text  x="1126.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="1148.9" y="613" width="2.1" height="15.0" fill="rgb(212,172,2)" rx="2" ry="2" />
<text  x="1151.95" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="567.8" y="469" width="0.4" height="15.0" fill="rgb(230,83,3)" rx="2" ry="2" />
<text  x="570.76" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="833.0" y="453" width="0.3" height="15.0" fill="rgb(249,33,31)" rx="2" ry="2" />
<text  x="836.03" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="21.2" y="645" width="0.2" height="15.0" fill="rgb(229,177,45)" rx="2" ry="2" />
<text  x="24.16" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="202.1" y="357" width="0.2" height="15.0" fill="rgb(253,6,0)" rx="2" ry="2" />
<text  x="205.09" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="713.9" y="629" width="0.4" height="15.0" fill="rgb(207,128,48)" rx="2" ry="2" />
<text  x="716.89" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (5 samples, 0.09%)</title><rect x="338.6" y="373" width="1.1" height="15.0" fill="rgb(227,196,2)" rx="2" ry="2" />
<text  x="341.63" y="383.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="730.0" y="629" width="0.2" height="15.0" fill="rgb(227,63,51)" rx="2" ry="2" />
<text  x="732.96" y="639.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="862.7" y="517" width="0.2" height="15.0" fill="rgb(228,159,36)" rx="2" ry="2" />
<text  x="865.71" y="527.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="713.7" y="613" width="0.2" height="15.0" fill="rgb(244,69,36)" rx="2" ry="2" />
<text  x="716.67" y="623.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (6 samples, 0.11%)</title><rect x="491.2" y="485" width="1.4" height="15.0" fill="rgb(229,49,11)" rx="2" ry="2" />
<text  x="494.24" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="44.8" y="437" width="0.7" height="15.0" fill="rgb(254,88,11)" rx="2" ry="2" />
<text  x="47.80" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="231.1" y="245" width="0.2" height="15.0" fill="rgb(229,28,1)" rx="2" ry="2" />
<text  x="234.10" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="555.9" y="485" width="0.3" height="15.0" fill="rgb(247,11,2)" rx="2" ry="2" />
<text  x="558.94" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (60 samples, 1.13%)</title><rect x="1142.5" y="645" width="13.4" height="15.0" fill="rgb(221,141,23)" rx="2" ry="2" />
<text  x="1145.48" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.13%)</title><rect x="98.3" y="581" width="1.6" height="15.0" fill="rgb(229,14,45)" rx="2" ry="2" />
<text  x="101.35" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1118.4" y="341" width="0.2" height="15.0" fill="rgb(228,148,31)" rx="2" ry="2" />
<text  x="1121.38" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="279.5" y="373" width="0.2" height="15.0" fill="rgb(205,32,19)" rx="2" ry="2" />
<text  x="282.51" y="383.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="595.6" y="501" width="0.3" height="15.0" fill="rgb(234,96,16)" rx="2" ry="2" />
<text  x="598.65" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="437" width="0.2" height="15.0" fill="rgb(208,110,8)" rx="2" ry="2" />
<text  x="82.16" y="447.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="110.6" y="453" width="0.2" height="15.0" fill="rgb(240,48,9)" rx="2" ry="2" />
<text  x="113.62" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (28 samples, 0.53%)</title><rect x="744.5" y="581" width="6.2" height="15.0" fill="rgb(213,101,18)" rx="2" ry="2" />
<text  x="747.46" y="591.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="855.1" y="517" width="0.2" height="15.0" fill="rgb(247,97,24)" rx="2" ry="2" />
<text  x="858.12" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1130.2" y="229" width="0.2" height="15.0" fill="rgb(240,221,49)" rx="2" ry="2" />
<text  x="1133.21" y="239.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="955.5" y="549" width="0.2" height="15.0" fill="rgb(225,106,36)" rx="2" ry="2" />
<text  x="958.52" y="559.5" ></text>
</g>
<g >
<title>seastar::smp::poll_queues (1 samples, 0.02%)</title><rect x="1164.1" y="645" width="0.2" height="15.0" fill="rgb(219,180,21)" rx="2" ry="2" />
<text  x="1167.12" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1163.9" y="661" width="0.2" height="15.0" fill="rgb(206,30,6)" rx="2" ry="2" />
<text  x="1166.90" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="17.4" y="597" width="0.2" height="15.0" fill="rgb(221,76,32)" rx="2" ry="2" />
<text  x="20.36" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1021.6" y="373" width="0.2" height="15.0" fill="rgb(252,199,26)" rx="2" ry="2" />
<text  x="1024.56" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%)</title><rect x="36.5" y="437" width="0.3" height="15.0" fill="rgb(247,134,48)" rx="2" ry="2" />
<text  x="39.55" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="286.6" y="405" width="0.5" height="15.0" fill="rgb(251,212,22)" rx="2" ry="2" />
<text  x="289.65" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="537.9" y="453" width="0.4" height="15.0" fill="rgb(245,72,46)" rx="2" ry="2" />
<text  x="540.87" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="701.0" y="533" width="0.8" height="15.0" fill="rgb(225,3,40)" rx="2" ry="2" />
<text  x="703.95" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="687.3" y="613" width="0.5" height="15.0" fill="rgb(213,88,8)" rx="2" ry="2" />
<text  x="690.35" y="623.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="344.7" y="325" width="0.6" height="15.0" fill="rgb(227,92,40)" rx="2" ry="2" />
<text  x="347.66" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="48.8" y="389" width="0.5" height="15.0" fill="rgb(238,75,12)" rx="2" ry="2" />
<text  x="51.82" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="664.8" y="549" width="0.2" height="15.0" fill="rgb(220,154,7)" rx="2" ry="2" />
<text  x="667.81" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="874.8" y="661" width="0.2" height="15.0" fill="rgb(206,182,41)" rx="2" ry="2" />
<text  x="877.75" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%)</title><rect x="825.7" y="405" width="1.1" height="15.0" fill="rgb(248,227,8)" rx="2" ry="2" />
<text  x="828.67" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1130.7" y="341" width="0.4" height="15.0" fill="rgb(208,173,8)" rx="2" ry="2" />
<text  x="1133.65" y="351.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="702.1" y="389" width="0.2" height="15.0" fill="rgb(220,71,39)" rx="2" ry="2" />
<text  x="705.07" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="286.4" y="389" width="0.2" height="15.0" fill="rgb(211,60,38)" rx="2" ry="2" />
<text  x="289.43" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="707.9" y="613" width="0.4" height="15.0" fill="rgb(210,65,54)" rx="2" ry="2" />
<text  x="710.87" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="65.6" y="517" width="0.2" height="15.0" fill="rgb(211,58,31)" rx="2" ry="2" />
<text  x="68.55" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%)</title><rect x="875.6" y="613" width="0.7" height="15.0" fill="rgb(243,29,40)" rx="2" ry="2" />
<text  x="878.65" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="49.7" y="469" width="0.2" height="15.0" fill="rgb(230,177,25)" rx="2" ry="2" />
<text  x="52.71" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="984.3" y="485" width="0.2" height="15.0" fill="rgb(238,220,1)" rx="2" ry="2" />
<text  x="987.30" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="55.1" y="373" width="0.2" height="15.0" fill="rgb(225,23,18)" rx="2" ry="2" />
<text  x="58.07" y="383.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (15 samples, 0.28%)</title><rect x="916.5" y="533" width="3.3" height="15.0" fill="rgb(253,107,54)" rx="2" ry="2" />
<text  x="919.47" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1117.3" y="309" width="0.2" height="15.0" fill="rgb(221,103,51)" rx="2" ry="2" />
<text  x="1120.27" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="191.8" y="405" width="0.3" height="15.0" fill="rgb(249,48,2)" rx="2" ry="2" />
<text  x="194.83" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;mutation_partition::accept (1 samples, 0.02%)</title><rect x="109.5" y="533" width="0.2" height="15.0" fill="rgb(218,21,24)" rx="2" ry="2" />
<text  x="112.50" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="454.6" y="565" width="0.3" height="15.0" fill="rgb(240,81,47)" rx="2" ry="2" />
<text  x="457.65" y="575.5" ></text>
</g>
<g >
<title>from_hex (6 samples, 0.11%)</title><rect x="69.8" y="501" width="1.3" height="15.0" fill="rgb(216,112,45)" rx="2" ry="2" />
<text  x="72.79" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::use_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.5" y="549" width="0.2" height="15.0" fill="rgb(237,62,31)" rx="2" ry="2" />
<text  x="71.45" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (19 samples, 0.36%)</title><rect x="744.7" y="565" width="4.2" height="15.0" fill="rgb(235,200,11)" rx="2" ry="2" />
<text  x="747.68" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="875.6" y="533" width="0.5" height="15.0" fill="rgb(211,92,41)" rx="2" ry="2" />
<text  x="878.65" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="657.9" y="645" width="0.2" height="15.0" fill="rgb(230,113,15)" rx="2" ry="2" />
<text  x="660.90" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="259.4" y="293" width="0.3" height="15.0" fill="rgb(232,188,33)" rx="2" ry="2" />
<text  x="262.43" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="328.6" y="453" width="0.4" height="15.0" fill="rgb(225,38,7)" rx="2" ry="2" />
<text  x="331.59" y="463.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (18 samples, 0.34%)</title><rect x="1174.6" y="773" width="4.0" height="15.0" fill="rgb(245,13,40)" rx="2" ry="2" />
<text  x="1177.61" y="783.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (4 samples, 0.08%)</title><rect x="79.8" y="565" width="0.9" height="15.0" fill="rgb(235,95,5)" rx="2" ry="2" />
<text  x="82.83" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="252.3" y="325" width="0.4" height="15.0" fill="rgb(208,202,49)" rx="2" ry="2" />
<text  x="255.29" y="335.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.09%)</title><rect x="10.4" y="773" width="1.2" height="15.0" fill="rgb(219,213,17)" rx="2" ry="2" />
<text  x="13.45" y="783.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%)</title><rect x="17.1" y="725" width="0.3" height="15.0" fill="rgb(248,75,19)" rx="2" ry="2" />
<text  x="20.14" y="735.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%)</title><rect x="84.3" y="501" width="0.7" height="15.0" fill="rgb(230,70,49)" rx="2" ry="2" />
<text  x="87.29" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="887.5" y="613" width="0.2" height="15.0" fill="rgb(212,227,2)" rx="2" ry="2" />
<text  x="890.47" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.23%)</title><rect x="849.5" y="597" width="2.7" height="15.0" fill="rgb(242,101,28)" rx="2" ry="2" />
<text  x="852.54" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.3" y="341" width="0.2" height="15.0" fill="rgb(226,212,45)" rx="2" ry="2" />
<text  x="50.26" y="351.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="82.1" y="533" width="0.2" height="15.0" fill="rgb(253,8,31)" rx="2" ry="2" />
<text  x="85.06" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_impl_data::_Deque_impl_data (1 samples, 0.02%)</title><rect x="22.5" y="437" width="0.2" height="15.0" fill="rgb(228,124,3)" rx="2" ry="2" />
<text  x="25.49" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="103.3" y="613" width="0.4" height="15.0" fill="rgb(213,10,11)" rx="2" ry="2" />
<text  x="106.26" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="60.0" y="341" width="0.2" height="15.0" fill="rgb(231,66,52)" rx="2" ry="2" />
<text  x="62.98" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="58.2" y="421" width="0.2" height="15.0" fill="rgb(245,34,31)" rx="2" ry="2" />
<text  x="61.19" y="431.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%)</title><rect x="72.7" y="469" width="0.2" height="15.0" fill="rgb(214,0,43)" rx="2" ry="2" />
<text  x="75.69" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.09%)</title><rect x="665.5" y="597" width="1.1" height="15.0" fill="rgb(241,62,32)" rx="2" ry="2" />
<text  x="668.48" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.4" y="533" width="0.3" height="15.0" fill="rgb(233,60,38)" rx="2" ry="2" />
<text  x="69.45" y="543.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (12 samples, 0.23%)</title><rect x="721.9" y="597" width="2.7" height="15.0" fill="rgb(245,198,43)" rx="2" ry="2" />
<text  x="724.93" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%)</title><rect x="1117.0" y="405" width="0.3" height="15.0" fill="rgb(224,215,48)" rx="2" ry="2" />
<text  x="1120.04" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume (201 samples, 3.80%)</title><rect x="355.8" y="357" width="44.9" height="15.0" fill="rgb(215,1,27)" rx="2" ry="2" />
<text  x="358.81" y="367.5" >muta..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.15%)</title><rect x="1147.2" y="613" width="1.7" height="15.0" fill="rgb(240,84,11)" rx="2" ry="2" />
<text  x="1150.16" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="82.7" y="597" width="0.7" height="15.0" fill="rgb(231,1,13)" rx="2" ry="2" />
<text  x="85.73" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="702.1" y="549" width="0.2" height="15.0" fill="rgb(222,207,19)" rx="2" ry="2" />
<text  x="705.07" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="351.6" y="341" width="0.2" height="15.0" fill="rgb(235,141,53)" rx="2" ry="2" />
<text  x="354.57" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.0" y="789" width="0.2" height="15.0" fill="rgb(251,131,12)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="517" width="0.2" height="15.0" fill="rgb(251,150,18)" rx="2" ry="2" />
<text  x="143.07" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (3 samples, 0.06%)</title><rect x="298.0" y="453" width="0.7" height="15.0" fill="rgb(207,64,23)" rx="2" ry="2" />
<text  x="301.03" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.26%)</title><rect x="82.1" y="709" width="3.1" height="15.0" fill="rgb(253,158,33)" rx="2" ry="2" />
<text  x="85.06" y="719.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1126.2" y="277" width="0.2" height="15.0" fill="rgb(246,218,28)" rx="2" ry="2" />
<text  x="1129.19" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="62.0" y="453" width="0.2" height="15.0" fill="rgb(241,43,28)" rx="2" ry="2" />
<text  x="64.98" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="1098.3" y="565" width="0.2" height="15.0" fill="rgb(234,46,16)" rx="2" ry="2" />
<text  x="1101.30" y="575.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%)</title><rect x="64.9" y="469" width="0.2" height="15.0" fill="rgb(235,176,54)" rx="2" ry="2" />
<text  x="67.88" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="674.0" y="629" width="0.2" height="15.0" fill="rgb(233,219,4)" rx="2" ry="2" />
<text  x="676.96" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,362 samples, 44.66%)</title><rect x="115.5" y="629" width="527.0" height="15.0" fill="rgb(222,39,28)" rx="2" ry="2" />
<text  x="118.53" y="639.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="36.1" y="421" width="0.2" height="15.0" fill="rgb(254,203,10)" rx="2" ry="2" />
<text  x="39.10" y="431.5" ></text>
</g>
<g >
<title>__GI___stat64 (1 samples, 0.02%)</title><rect x="1189.8" y="709" width="0.2" height="15.0" fill="rgb(244,54,46)" rx="2" ry="2" />
<text  x="1192.78" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.6" y="421" width="0.2" height="15.0" fill="rgb(206,59,37)" rx="2" ry="2" />
<text  x="47.58" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="201.0" y="357" width="0.2" height="15.0" fill="rgb(249,87,43)" rx="2" ry="2" />
<text  x="203.98" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.11%)</title><rect x="915.1" y="533" width="1.4" height="15.0" fill="rgb(206,65,42)" rx="2" ry="2" />
<text  x="918.14" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="701.2" y="469" width="0.4" height="15.0" fill="rgb(250,54,54)" rx="2" ry="2" />
<text  x="704.18" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1104.1" y="581" width="0.2" height="15.0" fill="rgb(236,139,27)" rx="2" ry="2" />
<text  x="1107.10" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="925.4" y="533" width="0.4" height="15.0" fill="rgb(228,113,50)" rx="2" ry="2" />
<text  x="928.40" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%)</title><rect x="526.0" y="373" width="0.9" height="15.0" fill="rgb(252,177,20)" rx="2" ry="2" />
<text  x="529.04" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::accept (1 samples, 0.02%)</title><rect x="109.5" y="565" width="0.2" height="15.0" fill="rgb(252,209,37)" rx="2" ry="2" />
<text  x="112.50" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="983.4" y="501" width="0.7" height="15.0" fill="rgb(245,98,6)" rx="2" ry="2" />
<text  x="986.41" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (2 samples, 0.04%)</title><rect x="1125.1" y="485" width="0.4" height="15.0" fill="rgb(239,18,27)" rx="2" ry="2" />
<text  x="1128.08" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (2 samples, 0.04%)</title><rect x="1030.7" y="437" width="0.4" height="15.0" fill="rgb(232,175,8)" rx="2" ry="2" />
<text  x="1033.70" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="539.4" y="469" width="0.3" height="15.0" fill="rgb(233,229,37)" rx="2" ry="2" />
<text  x="542.43" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="874.1" y="645" width="0.2" height="15.0" fill="rgb(246,41,21)" rx="2" ry="2" />
<text  x="877.08" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1136.2" y="661" width="0.3" height="15.0" fill="rgb(249,138,26)" rx="2" ry="2" />
<text  x="1139.23" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="578.9" y="437" width="0.2" height="15.0" fill="rgb(234,31,29)" rx="2" ry="2" />
<text  x="581.92" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="688.9" y="597" width="0.2" height="15.0" fill="rgb(228,118,35)" rx="2" ry="2" />
<text  x="691.91" y="607.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="249.6" y="261" width="2.2" height="15.0" fill="rgb(210,195,31)" rx="2" ry="2" />
<text  x="252.61" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="695.8" y="613" width="0.7" height="15.0" fill="rgb(207,199,45)" rx="2" ry="2" />
<text  x="698.82" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="48.8" y="293" width="0.2" height="15.0" fill="rgb(224,44,3)" rx="2" ry="2" />
<text  x="51.82" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="57.3" y="245" width="0.2" height="15.0" fill="rgb(223,160,54)" rx="2" ry="2" />
<text  x="60.30" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="628.2" y="597" width="0.2" height="15.0" fill="rgb(223,160,31)" rx="2" ry="2" />
<text  x="631.22" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="676.9" y="645" width="0.6" height="15.0" fill="rgb(253,220,41)" rx="2" ry="2" />
<text  x="679.86" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="662.8" y="629" width="0.2" height="15.0" fill="rgb(239,20,24)" rx="2" ry="2" />
<text  x="665.80" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="523.1" y="405" width="0.9" height="15.0" fill="rgb(224,109,8)" rx="2" ry="2" />
<text  x="526.14" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="63.1" y="293" width="0.2" height="15.0" fill="rgb(235,191,49)" rx="2" ry="2" />
<text  x="66.10" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (5 samples, 0.09%)</title><rect x="186.7" y="421" width="1.1" height="15.0" fill="rgb(236,7,5)" rx="2" ry="2" />
<text  x="189.70" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="60.6" y="309" width="0.3" height="15.0" fill="rgb(207,123,14)" rx="2" ry="2" />
<text  x="63.64" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (21 samples, 0.40%)</title><rect x="663.0" y="629" width="4.7" height="15.0" fill="rgb(245,136,12)" rx="2" ry="2" />
<text  x="666.03" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (15 samples, 0.28%)</title><rect x="618.0" y="565" width="3.3" height="15.0" fill="rgb(205,144,53)" rx="2" ry="2" />
<text  x="620.96" y="575.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="916.3" y="517" width="0.2" height="15.0" fill="rgb(239,130,40)" rx="2" ry="2" />
<text  x="919.25" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1077.6" y="501" width="0.4" height="15.0" fill="rgb(241,173,0)" rx="2" ry="2" />
<text  x="1080.56" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="658.1" y="645" width="0.7" height="15.0" fill="rgb(229,158,42)" rx="2" ry="2" />
<text  x="661.12" y="655.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="1047.2" y="453" width="0.5" height="15.0" fill="rgb(227,146,19)" rx="2" ry="2" />
<text  x="1050.21" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="1117.0" y="389" width="0.3" height="15.0" fill="rgb(236,149,44)" rx="2" ry="2" />
<text  x="1120.04" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (1 samples, 0.02%)</title><rect x="728.8" y="437" width="0.3" height="15.0" fill="rgb(253,148,22)" rx="2" ry="2" />
<text  x="731.84" y="447.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%)</title><rect x="123.8" y="565" width="0.4" height="15.0" fill="rgb(229,18,53)" rx="2" ry="2" />
<text  x="126.78" y="575.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="767.9" y="565" width="0.9" height="15.0" fill="rgb(227,226,53)" rx="2" ry="2" />
<text  x="770.89" y="575.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="894.8" y="533" width="0.3" height="15.0" fill="rgb(237,77,17)" rx="2" ry="2" />
<text  x="897.83" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%)</title><rect x="244.9" y="277" width="0.7" height="15.0" fill="rgb(251,49,38)" rx="2" ry="2" />
<text  x="247.93" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="59.3" y="469" width="0.5" height="15.0" fill="rgb(208,23,33)" rx="2" ry="2" />
<text  x="62.31" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="879.2" y="421" width="0.7" height="15.0" fill="rgb(242,155,17)" rx="2" ry="2" />
<text  x="882.22" y="431.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (40 samples, 0.76%)</title><rect x="501.7" y="469" width="8.9" height="15.0" fill="rgb(221,96,29)" rx="2" ry="2" />
<text  x="504.72" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="255.9" y="309" width="0.2" height="15.0" fill="rgb(238,14,16)" rx="2" ry="2" />
<text  x="258.86" y="319.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="568.7" y="565" width="1.1" height="15.0" fill="rgb(238,144,11)" rx="2" ry="2" />
<text  x="571.65" y="575.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="19.6" y="645" width="0.2" height="15.0" fill="rgb(218,203,30)" rx="2" ry="2" />
<text  x="22.59" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1113.3" y="581" width="0.4" height="15.0" fill="rgb(226,77,4)" rx="2" ry="2" />
<text  x="1116.25" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.1" y="773" width="0.2" height="15.0" fill="rgb(208,151,46)" rx="2" ry="2" />
<text  x="1192.11" y="783.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="82.5" y="565" width="0.2" height="15.0" fill="rgb(254,144,37)" rx="2" ry="2" />
<text  x="85.51" y="575.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1124.4" y="469" width="0.2" height="15.0" fill="rgb(248,10,5)" rx="2" ry="2" />
<text  x="1127.41" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="82.1" y="677" width="3.1" height="15.0" fill="rgb(230,122,48)" rx="2" ry="2" />
<text  x="85.06" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%)</title><rect x="82.7" y="517" width="0.3" height="15.0" fill="rgb(252,73,10)" rx="2" ry="2" />
<text  x="85.73" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="62.4" y="421" width="0.3" height="15.0" fill="rgb(221,131,43)" rx="2" ry="2" />
<text  x="65.43" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="477.2" y="453" width="0.7" height="15.0" fill="rgb(210,107,8)" rx="2" ry="2" />
<text  x="480.18" y="463.5" ></text>
</g>
<g >
<title>row::compact_and_expire (96 samples, 1.82%)</title><rect x="405.6" y="373" width="21.4" height="15.0" fill="rgb(216,57,53)" rx="2" ry="2" />
<text  x="408.56" y="383.5" >r..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1082.2" y="533" width="0.5" height="15.0" fill="rgb(242,42,47)" rx="2" ry="2" />
<text  x="1085.24" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (130 samples, 2.46%)</title><rect x="803.1" y="485" width="29.0" height="15.0" fill="rgb(216,169,36)" rx="2" ry="2" />
<text  x="806.14" y="495.5" >st..</text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.9" y="405" width="0.2" height="15.0" fill="rgb(228,192,36)" rx="2" ry="2" />
<text  x="38.88" y="415.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="108.6" y="629" width="0.2" height="15.0" fill="rgb(206,228,9)" rx="2" ry="2" />
<text  x="111.61" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (57 samples, 1.08%)</title><rect x="590.7" y="549" width="12.8" height="15.0" fill="rgb(224,164,54)" rx="2" ry="2" />
<text  x="593.74" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (71 samples, 1.34%)</title><rect x="43.9" y="517" width="15.9" height="15.0" fill="rgb(212,214,34)" rx="2" ry="2" />
<text  x="46.91" y="527.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (8 samples, 0.15%)</title><rect x="804.5" y="453" width="1.8" height="15.0" fill="rgb(241,39,21)" rx="2" ry="2" />
<text  x="807.48" y="463.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%)</title><rect x="1135.1" y="661" width="0.2" height="15.0" fill="rgb(210,34,5)" rx="2" ry="2" />
<text  x="1138.12" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="909.8" y="517" width="0.2" height="15.0" fill="rgb(232,134,17)" rx="2" ry="2" />
<text  x="912.78" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="40.1" y="485" width="0.2" height="15.0" fill="rgb(237,39,15)" rx="2" ry="2" />
<text  x="43.12" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (4 samples, 0.08%)</title><rect x="73.4" y="549" width="0.9" height="15.0" fill="rgb(213,96,1)" rx="2" ry="2" />
<text  x="76.36" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (3 samples, 0.06%)</title><rect x="1018.0" y="309" width="0.7" height="15.0" fill="rgb(251,43,43)" rx="2" ry="2" />
<text  x="1020.99" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="702.1" y="277" width="0.2" height="15.0" fill="rgb(214,123,54)" rx="2" ry="2" />
<text  x="705.07" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (26 samples, 0.49%)</title><rect x="52.6" y="453" width="5.8" height="15.0" fill="rgb(250,180,17)" rx="2" ry="2" />
<text  x="55.61" y="463.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="441.9" y="421" width="0.5" height="15.0" fill="rgb(210,89,23)" rx="2" ry="2" />
<text  x="444.93" y="431.5" ></text>
</g>
<g >
<title>database::find_keyspace (26 samples, 0.49%)</title><rect x="1042.8" y="501" width="5.8" height="15.0" fill="rgb(211,149,47)" rx="2" ry="2" />
<text  x="1045.75" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="804.7" y="437" width="1.6" height="15.0" fill="rgb(241,133,40)" rx="2" ry="2" />
<text  x="807.70" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::use_statement*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="67.8" y="469" width="0.2" height="15.0" fill="rgb(213,166,51)" rx="2" ry="2" />
<text  x="70.78" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (4 samples, 0.08%)</title><rect x="1131.3" y="357" width="0.9" height="15.0" fill="rgb(207,136,30)" rx="2" ry="2" />
<text  x="1134.32" y="367.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="12.7" y="741" width="0.2" height="15.0" fill="rgb(246,152,11)" rx="2" ry="2" />
<text  x="15.68" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="804.7" y="421" width="1.6" height="15.0" fill="rgb(221,73,22)" rx="2" ry="2" />
<text  x="807.70" y="431.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="521.6" y="421" width="0.2" height="15.0" fill="rgb(228,7,42)" rx="2" ry="2" />
<text  x="524.58" y="431.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="881.0" y="453" width="0.2" height="15.0" fill="rgb(214,190,9)" rx="2" ry="2" />
<text  x="884.00" y="463.5" ></text>
</g>
<g >
<title>schema_builder::with_column (1 samples, 0.02%)</title><rect x="17.8" y="405" width="0.2" height="15.0" fill="rgb(209,131,30)" rx="2" ry="2" />
<text  x="20.81" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="766.3" y="421" width="0.5" height="15.0" fill="rgb(238,151,13)" rx="2" ry="2" />
<text  x="769.32" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="62.7" y="437" width="0.2" height="15.0" fill="rgb(248,229,3)" rx="2" ry="2" />
<text  x="65.65" y="447.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (2 samples, 0.04%)</title><rect x="328.6" y="469" width="0.4" height="15.0" fill="rgb(237,181,54)" rx="2" ry="2" />
<text  x="331.59" y="479.5" ></text>
</g>
<g >
<title>query_state::query_state (40 samples, 0.76%)</title><rect x="612.6" y="597" width="8.9" height="15.0" fill="rgb(247,169,30)" rx="2" ry="2" />
<text  x="615.61" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%)</title><rect x="21.2" y="613" width="0.2" height="15.0" fill="rgb(227,161,44)" rx="2" ry="2" />
<text  x="24.16" y="623.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%)</title><rect x="1125.3" y="453" width="0.2" height="15.0" fill="rgb(243,117,30)" rx="2" ry="2" />
<text  x="1128.30" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (39 samples, 0.74%)</title><rect x="681.8" y="661" width="8.7" height="15.0" fill="rgb(211,120,14)" rx="2" ry="2" />
<text  x="684.77" y="671.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="899.7" y="469" width="0.3" height="15.0" fill="rgb(214,66,8)" rx="2" ry="2" />
<text  x="902.74" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="105.0" y="421" width="0.3" height="15.0" fill="rgb(232,171,21)" rx="2" ry="2" />
<text  x="108.04" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="48.6" y="437" width="0.7" height="15.0" fill="rgb(246,210,15)" rx="2" ry="2" />
<text  x="51.60" y="447.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="615.7" y="565" width="0.3" height="15.0" fill="rgb(214,111,20)" rx="2" ry="2" />
<text  x="618.73" y="575.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.8" y="533" width="0.2" height="15.0" fill="rgb(208,208,32)" rx="2" ry="2" />
<text  x="20.81" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="49.3" y="437" width="0.2" height="15.0" fill="rgb(249,4,50)" rx="2" ry="2" />
<text  x="52.27" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.8" y="517" width="0.2" height="15.0" fill="rgb(210,96,42)" rx="2" ry="2" />
<text  x="70.78" y="527.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%)</title><rect x="929.6" y="549" width="0.7" height="15.0" fill="rgb(234,44,3)" rx="2" ry="2" />
<text  x="932.64" y="559.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (3 samples, 0.06%)</title><rect x="604.6" y="565" width="0.6" height="15.0" fill="rgb(253,44,46)" rx="2" ry="2" />
<text  x="607.57" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="853.6" y="597" width="0.2" height="15.0" fill="rgb(205,160,0)" rx="2" ry="2" />
<text  x="856.56" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="702.7" y="613" width="0.3" height="15.0" fill="rgb(206,151,42)" rx="2" ry="2" />
<text  x="705.74" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%)</title><rect x="210.8" y="389" width="0.4" height="15.0" fill="rgb(234,196,26)" rx="2" ry="2" />
<text  x="213.79" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="875.6" y="661" width="0.7" height="15.0" fill="rgb(226,183,36)" rx="2" ry="2" />
<text  x="878.65" y="671.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="772.1" y="517" width="0.2" height="15.0" fill="rgb(242,140,2)" rx="2" ry="2" />
<text  x="775.13" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%)</title><rect x="540.8" y="453" width="0.6" height="15.0" fill="rgb(206,168,13)" rx="2" ry="2" />
<text  x="543.77" y="463.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%)</title><rect x="1124.9" y="629" width="8.0" height="15.0" fill="rgb(243,128,1)" rx="2" ry="2" />
<text  x="1127.85" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="41.5" y="357" width="0.4" height="15.0" fill="rgb(208,0,53)" rx="2" ry="2" />
<text  x="44.46" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="510.2" y="373" width="0.2" height="15.0" fill="rgb(222,107,52)" rx="2" ry="2" />
<text  x="513.20" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="185.6" y="389" width="0.2" height="15.0" fill="rgb(214,52,2)" rx="2" ry="2" />
<text  x="188.58" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%)</title><rect x="184.0" y="405" width="0.2" height="15.0" fill="rgb(253,10,30)" rx="2" ry="2" />
<text  x="187.02" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.26%)</title><rect x="854.0" y="565" width="3.1" height="15.0" fill="rgb(242,14,49)" rx="2" ry="2" />
<text  x="857.00" y="575.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="18.0" y="453" width="0.3" height="15.0" fill="rgb(220,99,41)" rx="2" ry="2" />
<text  x="21.03" y="463.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,844 samples, 91.59%)</title><rect x="86.1" y="725" width="1080.7" height="15.0" fill="rgb(206,20,32)" rx="2" ry="2" />
<text  x="89.08" y="735.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::constant const&amp;&gt; (1 samples, 0.02%)</title><rect x="74.9" y="421" width="0.2" height="15.0" fill="rgb(220,138,24)" rx="2" ry="2" />
<text  x="77.92" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="49.9" y="469" width="0.3" height="15.0" fill="rgb(216,12,53)" rx="2" ry="2" />
<text  x="52.94" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="566.9" y="485" width="1.3" height="15.0" fill="rgb(205,124,1)" rx="2" ry="2" />
<text  x="569.87" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="936.3" y="565" width="0.3" height="15.0" fill="rgb(233,62,37)" rx="2" ry="2" />
<text  x="939.33" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::sync_directory (1 samples, 0.02%)</title><rect x="703.0" y="661" width="0.2" height="15.0" fill="rgb(210,170,32)" rx="2" ry="2" />
<text  x="705.96" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="503.5" y="389" width="0.2" height="15.0" fill="rgb(225,98,9)" rx="2" ry="2" />
<text  x="506.51" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (457 samples, 8.64%)</title><rect x="456.2" y="549" width="102.0" height="15.0" fill="rgb(231,60,23)" rx="2" ry="2" />
<text  x="459.21" y="559.5" >std::functio..</text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="1117.7" y="309" width="0.2" height="15.0" fill="rgb(239,227,3)" rx="2" ry="2" />
<text  x="1120.71" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (281 samples, 5.31%)</title><rect x="18.5" y="725" width="62.7" height="15.0" fill="rgb(225,226,26)" rx="2" ry="2" />
<text  x="21.48" y="735.5" >std::_..</text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="532.5" y="341" width="0.7" height="15.0" fill="rgb(250,38,14)" rx="2" ry="2" />
<text  x="535.51" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (24 samples, 0.45%)</title><rect x="864.3" y="581" width="5.3" height="15.0" fill="rgb(252,26,22)" rx="2" ry="2" />
<text  x="867.27" y="591.5" ></text>
</g>
<g >
<title>query::digester::digester (5 samples, 0.09%)</title><rect x="616.0" y="565" width="1.1" height="15.0" fill="rgb(213,45,52)" rx="2" ry="2" />
<text  x="618.95" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="404.7" y="373" width="0.4" height="15.0" fill="rgb(230,130,18)" rx="2" ry="2" />
<text  x="407.67" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="73.8" y="485" width="0.2" height="15.0" fill="rgb(248,23,15)" rx="2" ry="2" />
<text  x="76.81" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_expression (1 samples, 0.02%)</title><rect x="72.5" y="501" width="0.2" height="15.0" fill="rgb(232,83,30)" rx="2" ry="2" />
<text  x="75.47" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="74.9" y="453" width="0.2" height="15.0" fill="rgb(210,130,37)" rx="2" ry="2" />
<text  x="77.92" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%)</title><rect x="428.5" y="389" width="0.3" height="15.0" fill="rgb(212,143,21)" rx="2" ry="2" />
<text  x="431.54" y="399.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (1 samples, 0.02%)</title><rect x="46.1" y="437" width="0.3" height="15.0" fill="rgb(225,81,18)" rx="2" ry="2" />
<text  x="49.14" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="813.6" y="341" width="0.2" height="15.0" fill="rgb(251,6,6)" rx="2" ry="2" />
<text  x="816.62" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="988.8" y="485" width="0.4" height="15.0" fill="rgb(254,150,10)" rx="2" ry="2" />
<text  x="991.76" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="1034.3" y="389" width="0.2" height="15.0" fill="rgb(225,103,3)" rx="2" ry="2" />
<text  x="1037.27" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="105.0" y="629" width="0.3" height="15.0" fill="rgb(225,147,25)" rx="2" ry="2" />
<text  x="108.04" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="727.7" y="581" width="0.3" height="15.0" fill="rgb(221,26,28)" rx="2" ry="2" />
<text  x="730.73" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="40.1" y="517" width="0.2" height="15.0" fill="rgb(236,93,51)" rx="2" ry="2" />
<text  x="43.12" y="527.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.09%)</title><rect x="109.7" y="661" width="1.1" height="15.0" fill="rgb(231,55,18)" rx="2" ry="2" />
<text  x="112.73" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="687.8" y="613" width="0.7" height="15.0" fill="rgb(239,33,24)" rx="2" ry="2" />
<text  x="690.79" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (16 samples, 0.30%)</title><rect x="1054.4" y="469" width="3.5" height="15.0" fill="rgb(231,94,31)" rx="2" ry="2" />
<text  x="1057.35" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (81 samples, 1.53%)</title><rect x="572.7" y="549" width="18.0" height="15.0" fill="rgb(254,104,7)" rx="2" ry="2" />
<text  x="575.67" y="559.5" ></text>
</g>
<g >
<title>table::set_hit_rate (9 samples, 0.17%)</title><rect x="725.9" y="613" width="2.1" height="15.0" fill="rgb(254,116,7)" rx="2" ry="2" />
<text  x="728.94" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="200.3" y="357" width="0.2" height="15.0" fill="rgb(253,140,3)" rx="2" ry="2" />
<text  x="203.31" y="367.5" ></text>
</g>
<g >
<title>auth::resource::resource (9 samples, 0.17%)</title><rect x="790.4" y="533" width="2.0" height="15.0" fill="rgb(216,140,11)" rx="2" ry="2" />
<text  x="793.42" y="543.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="462.9" y="501" width="0.2" height="15.0" fill="rgb(236,188,33)" rx="2" ry="2" />
<text  x="465.90" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="77.8" y="613" width="0.5" height="15.0" fill="rgb(244,180,51)" rx="2" ry="2" />
<text  x="80.82" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="872.3" y="597" width="0.4" height="15.0" fill="rgb(233,82,15)" rx="2" ry="2" />
<text  x="875.30" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;reconcilable_result&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="469" width="0.2" height="15.0" fill="rgb(241,96,6)" rx="2" ry="2" />
<text  x="143.07" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="108.6" y="549" width="0.2" height="15.0" fill="rgb(237,212,17)" rx="2" ry="2" />
<text  x="111.61" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.0" y="677" width="0.3" height="15.0" fill="rgb(240,16,31)" rx="2" ry="2" />
<text  x="21.03" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.9" y="517" width="0.2" height="15.0" fill="rgb(245,94,47)" rx="2" ry="2" />
<text  x="69.89" y="527.5" ></text>
</g>
<g >
<title>row::append_cell (2 samples, 0.04%)</title><rect x="1120.6" y="373" width="0.5" height="15.0" fill="rgb(250,199,46)" rx="2" ry="2" />
<text  x="1123.61" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.4" y="629" width="0.2" height="15.0" fill="rgb(248,221,46)" rx="2" ry="2" />
<text  x="88.41" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%)</title><rect x="876.1" y="533" width="0.2" height="15.0" fill="rgb(205,217,46)" rx="2" ry="2" />
<text  x="879.09" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="655.7" y="645" width="0.4" height="15.0" fill="rgb(229,150,19)" rx="2" ry="2" />
<text  x="658.66" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="27.2" y="389" width="0.2" height="15.0" fill="rgb(241,72,2)" rx="2" ry="2" />
<text  x="30.18" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (10 samples, 0.19%)</title><rect x="1040.5" y="485" width="2.3" height="15.0" fill="rgb(243,51,18)" rx="2" ry="2" />
<text  x="1043.52" y="495.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (7 samples, 0.13%)</title><rect x="396.4" y="325" width="1.6" height="15.0" fill="rgb(251,32,47)" rx="2" ry="2" />
<text  x="399.42" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="702.7" y="389" width="0.3" height="15.0" fill="rgb(217,22,42)" rx="2" ry="2" />
<text  x="705.74" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.02%)</title><rect x="1189.1" y="789" width="0.2" height="15.0" fill="rgb(247,140,45)" rx="2" ry="2" />
<text  x="1192.11" y="799.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="81.6" y="661" width="0.2" height="15.0" fill="rgb(234,194,53)" rx="2" ry="2" />
<text  x="84.62" y="671.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (2 samples, 0.04%)</title><rect x="845.1" y="469" width="0.4" height="15.0" fill="rgb(251,97,20)" rx="2" ry="2" />
<text  x="848.08" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="723.7" y="581" width="0.2" height="15.0" fill="rgb(210,129,6)" rx="2" ry="2" />
<text  x="726.71" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="82.5" y="549" width="0.2" height="15.0" fill="rgb(254,104,34)" rx="2" ry="2" />
<text  x="85.51" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (120 samples, 2.27%)</title><rect x="1136.5" y="661" width="26.7" height="15.0" fill="rgb(218,180,24)" rx="2" ry="2" />
<text  x="1139.45" y="671.5" >s..</text>
</g>
<g >
<title>locator::local_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="728.8" y="389" width="0.3" height="15.0" fill="rgb(215,50,39)" rx="2" ry="2" />
<text  x="731.84" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="679.1" y="645" width="0.7" height="15.0" fill="rgb(229,69,18)" rx="2" ry="2" />
<text  x="682.09" y="655.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (4 samples, 0.08%)</title><rect x="110.0" y="613" width="0.8" height="15.0" fill="rgb(211,58,10)" rx="2" ry="2" />
<text  x="112.95" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="531.8" y="357" width="0.3" height="15.0" fill="rgb(230,193,10)" rx="2" ry="2" />
<text  x="534.84" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="851.3" y="517" width="0.7" height="15.0" fill="rgb(209,118,19)" rx="2" ry="2" />
<text  x="854.33" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (16 samples, 0.30%)</title><rect x="303.4" y="501" width="3.6" height="15.0" fill="rgb(246,75,2)" rx="2" ry="2" />
<text  x="306.38" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="75.8" y="533" width="0.2" height="15.0" fill="rgb(254,174,8)" rx="2" ry="2" />
<text  x="78.82" y="543.5" ></text>
</g>
<g >
<title>__start_context (291 samples, 5.50%)</title><rect x="16.2" y="773" width="65.0" height="15.0" fill="rgb(232,70,22)" rx="2" ry="2" />
<text  x="19.25" y="783.5" >__start..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="847.1" y="485" width="0.2" height="15.0" fill="rgb(242,137,40)" rx="2" ry="2" />
<text  x="850.09" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="490.8" y="485" width="0.2" height="15.0" fill="rgb(225,191,5)" rx="2" ry="2" />
<text  x="493.79" y="495.5" ></text>
</g>
<g >
<title>std::addressof&lt;char&gt; (1 samples, 0.02%)</title><rect x="27.2" y="309" width="0.2" height="15.0" fill="rgb(221,0,40)" rx="2" ry="2" />
<text  x="30.18" y="319.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="108.8" y="469" width="0.3" height="15.0" fill="rgb(220,179,26)" rx="2" ry="2" />
<text  x="111.84" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::take (1 samples, 0.02%)</title><rect x="80.9" y="693" width="0.3" height="15.0" fill="rgb(228,84,36)" rx="2" ry="2" />
<text  x="83.95" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="51.7" y="293" width="0.2" height="15.0" fill="rgb(219,110,18)" rx="2" ry="2" />
<text  x="54.72" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="1008.2" y="405" width="0.2" height="15.0" fill="rgb(205,52,1)" rx="2" ry="2" />
<text  x="1011.17" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::builder (30 samples, 0.57%)</title><rect x="614.8" y="581" width="6.7" height="15.0" fill="rgb(235,11,6)" rx="2" ry="2" />
<text  x="617.84" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="81.8" y="741" width="0.3" height="15.0" fill="rgb(249,40,23)" rx="2" ry="2" />
<text  x="84.84" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (1 samples, 0.02%)</title><rect x="86.3" y="677" width="0.2" height="15.0" fill="rgb(240,47,47)" rx="2" ry="2" />
<text  x="89.30" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6 samples, 0.11%)</title><rect x="1142.9" y="597" width="1.4" height="15.0" fill="rgb(206,100,24)" rx="2" ry="2" />
<text  x="1145.92" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="285.8" y="325" width="0.2" height="15.0" fill="rgb(220,198,23)" rx="2" ry="2" />
<text  x="288.76" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="700.1" y="645" width="0.6" height="15.0" fill="rgb(210,114,3)" rx="2" ry="2" />
<text  x="703.06" y="655.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="427.4" y="357" width="0.3" height="15.0" fill="rgb(215,204,14)" rx="2" ry="2" />
<text  x="430.43" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (3 samples, 0.06%)</title><rect x="463.8" y="501" width="0.7" height="15.0" fill="rgb(241,34,39)" rx="2" ry="2" />
<text  x="466.79" y="511.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (5 samples, 0.09%)</title><rect x="878.8" y="453" width="1.1" height="15.0" fill="rgb(247,19,26)" rx="2" ry="2" />
<text  x="881.77" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (5 samples, 0.09%)</title><rect x="709.7" y="613" width="1.1" height="15.0" fill="rgb(245,99,26)" rx="2" ry="2" />
<text  x="712.66" y="623.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="441.7" y="373" width="0.2" height="15.0" fill="rgb(241,198,32)" rx="2" ry="2" />
<text  x="444.71" y="383.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::data_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="81.6" y="165" width="0.2" height="15.0" fill="rgb(214,80,50)" rx="2" ry="2" />
<text  x="84.62" y="175.5" ></text>
</g>
<g >
<title>sstables::sstable::write_digest (1 samples, 0.02%)</title><rect x="81.8" y="581" width="0.3" height="15.0" fill="rgb(223,184,45)" rx="2" ry="2" />
<text  x="84.84" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="739.8" y="597" width="0.2" height="15.0" fill="rgb(235,143,9)" rx="2" ry="2" />
<text  x="742.78" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="44.6" y="373" width="0.2" height="15.0" fill="rgb(210,158,49)" rx="2" ry="2" />
<text  x="47.58" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="58.6" y="405" width="0.3" height="15.0" fill="rgb(214,144,48)" rx="2" ry="2" />
<text  x="61.64" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (1 samples, 0.02%)</title><rect x="462.7" y="501" width="0.2" height="15.0" fill="rgb(223,35,46)" rx="2" ry="2" />
<text  x="465.68" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (2 samples, 0.04%)</title><rect x="876.5" y="565" width="0.5" height="15.0" fill="rgb(210,176,29)" rx="2" ry="2" />
<text  x="879.54" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="931.0" y="549" width="0.9" height="15.0" fill="rgb(253,181,13)" rx="2" ry="2" />
<text  x="933.98" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="773.9" y="565" width="1.1" height="15.0" fill="rgb(253,211,4)" rx="2" ry="2" />
<text  x="776.91" y="575.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="84.3" y="549" width="0.7" height="15.0" fill="rgb(234,109,49)" rx="2" ry="2" />
<text  x="87.29" y="559.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="19.6" y="629" width="0.2" height="15.0" fill="rgb(221,84,25)" rx="2" ry="2" />
<text  x="22.59" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%)</title><rect x="927.0" y="533" width="2.2" height="15.0" fill="rgb(212,172,0)" rx="2" ry="2" />
<text  x="929.96" y="543.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="434.6" y="357" width="0.2" height="15.0" fill="rgb(235,207,25)" rx="2" ry="2" />
<text  x="437.57" y="367.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (51 samples, 0.96%)</title><rect x="125.1" y="613" width="11.4" height="15.0" fill="rgb(238,118,17)" rx="2" ry="2" />
<text  x="128.12" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="102.8" y="597" width="0.5" height="15.0" fill="rgb(254,59,43)" rx="2" ry="2" />
<text  x="105.81" y="607.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="19.8" y="645" width="0.9" height="15.0" fill="rgb(205,205,50)" rx="2" ry="2" />
<text  x="22.82" y="655.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="702.1" y="373" width="0.2" height="15.0" fill="rgb(221,127,4)" rx="2" ry="2" />
<text  x="705.07" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="730.0" y="581" width="0.2" height="15.0" fill="rgb(249,59,15)" rx="2" ry="2" />
<text  x="732.96" y="591.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (18 samples, 0.34%)</title><rect x="383.9" y="325" width="4.0" height="15.0" fill="rgb(211,65,31)" rx="2" ry="2" />
<text  x="386.92" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="682.2" y="645" width="0.7" height="15.0" fill="rgb(207,215,53)" rx="2" ry="2" />
<text  x="685.21" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (3 samples, 0.06%)</title><rect x="68.9" y="549" width="0.7" height="15.0" fill="rgb(205,17,19)" rx="2" ry="2" />
<text  x="71.90" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%)</title><rect x="243.4" y="245" width="0.4" height="15.0" fill="rgb(229,147,30)" rx="2" ry="2" />
<text  x="246.37" y="255.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="16.7" y="661" width="0.2" height="15.0" fill="rgb(207,221,7)" rx="2" ry="2" />
<text  x="19.69" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="849.1" y="581" width="0.2" height="15.0" fill="rgb(221,139,24)" rx="2" ry="2" />
<text  x="852.10" y="591.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1126.2" y="293" width="0.2" height="15.0" fill="rgb(239,39,10)" rx="2" ry="2" />
<text  x="1129.19" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="74.3" y="501" width="0.2" height="15.0" fill="rgb(224,157,45)" rx="2" ry="2" />
<text  x="77.25" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="41.5" y="389" width="0.4" height="15.0" fill="rgb(209,165,25)" rx="2" ry="2" />
<text  x="44.46" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="911.6" y="485" width="0.4" height="15.0" fill="rgb(254,218,0)" rx="2" ry="2" />
<text  x="914.57" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="597" width="0.2" height="15.0" fill="rgb(250,97,28)" rx="2" ry="2" />
<text  x="1166.67" y="607.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (2 samples, 0.04%)</title><rect x="1068.4" y="421" width="0.5" height="15.0" fill="rgb(235,47,5)" rx="2" ry="2" />
<text  x="1071.41" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="935.2" y="533" width="0.2" height="15.0" fill="rgb(254,44,35)" rx="2" ry="2" />
<text  x="938.21" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (24 samples, 0.45%)</title><rect x="706.5" y="629" width="5.4" height="15.0" fill="rgb(242,35,43)" rx="2" ry="2" />
<text  x="709.53" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1023.1" y="357" width="0.7" height="15.0" fill="rgb(224,170,19)" rx="2" ry="2" />
<text  x="1026.12" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (546 samples, 10.32%)</title><rect x="741.8" y="613" width="121.8" height="15.0" fill="rgb(236,159,12)" rx="2" ry="2" />
<text  x="744.78" y="623.5" >single_node_cql..</text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="78.9" y="453" width="0.3" height="15.0" fill="rgb(209,59,42)" rx="2" ry="2" />
<text  x="81.94" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="960.2" y="453" width="0.2" height="15.0" fill="rgb(221,104,27)" rx="2" ry="2" />
<text  x="963.20" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.8" y="549" width="0.2" height="15.0" fill="rgb(247,161,25)" rx="2" ry="2" />
<text  x="20.81" y="559.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.09%)</title><rect x="1123.3" y="469" width="1.1" height="15.0" fill="rgb(228,211,29)" rx="2" ry="2" />
<text  x="1126.29" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::kernel_submit_work (1 samples, 0.02%)</title><rect x="1164.3" y="661" width="0.3" height="15.0" fill="rgb(249,149,44)" rx="2" ry="2" />
<text  x="1167.34" y="671.5" ></text>
</g>
<g >
<title>free (5 samples, 0.09%)</title><rect x="439.5" y="357" width="1.1" height="15.0" fill="rgb(247,5,43)" rx="2" ry="2" />
<text  x="442.48" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (2 samples, 0.04%)</title><rect x="471.8" y="421" width="0.5" height="15.0" fill="rgb(233,68,25)" rx="2" ry="2" />
<text  x="474.83" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1099.2" y="549" width="0.4" height="15.0" fill="rgb(231,210,40)" rx="2" ry="2" />
<text  x="1102.20" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="689.6" y="597" width="0.4" height="15.0" fill="rgb(233,227,42)" rx="2" ry="2" />
<text  x="692.58" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (13 samples, 0.25%)</title><rect x="55.5" y="437" width="2.9" height="15.0" fill="rgb(217,152,16)" rx="2" ry="2" />
<text  x="58.51" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selector (1 samples, 0.02%)</title><rect x="10.7" y="373" width="0.2" height="15.0" fill="rgb(205,71,50)" rx="2" ry="2" />
<text  x="13.67" y="383.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.09%)</title><rect x="742.9" y="565" width="1.1" height="15.0" fill="rgb(217,226,28)" rx="2" ry="2" />
<text  x="745.90" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="578.9" y="453" width="0.5" height="15.0" fill="rgb(207,24,52)" rx="2" ry="2" />
<text  x="581.92" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1163.0" y="581" width="0.2" height="15.0" fill="rgb(220,117,21)" rx="2" ry="2" />
<text  x="1166.00" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="557.9" y="501" width="0.3" height="15.0" fill="rgb(223,152,26)" rx="2" ry="2" />
<text  x="560.94" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%)</title><rect x="1127.8" y="325" width="0.2" height="15.0" fill="rgb(246,173,12)" rx="2" ry="2" />
<text  x="1130.75" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="1048.1" y="469" width="0.2" height="15.0" fill="rgb(205,141,42)" rx="2" ry="2" />
<text  x="1051.11" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="33.4" y="421" width="0.2" height="15.0" fill="rgb(219,193,24)" rx="2" ry="2" />
<text  x="36.43" y="431.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (2 samples, 0.04%)</title><rect x="77.8" y="597" width="0.5" height="15.0" fill="rgb(223,68,12)" rx="2" ry="2" />
<text  x="80.82" y="607.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (11 samples, 0.21%)</title><rect x="764.3" y="485" width="2.5" height="15.0" fill="rgb(222,186,24)" rx="2" ry="2" />
<text  x="767.32" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%)</title><rect x="1011.3" y="373" width="1.3" height="15.0" fill="rgb(246,40,22)" rx="2" ry="2" />
<text  x="1014.29" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1114.6" y="597" width="0.4" height="15.0" fill="rgb(205,92,29)" rx="2" ry="2" />
<text  x="1117.59" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="37.0" y="437" width="0.2" height="15.0" fill="rgb(236,103,47)" rx="2" ry="2" />
<text  x="40.00" y="447.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (2 samples, 0.04%)</title><rect x="188.0" y="421" width="0.5" height="15.0" fill="rgb(226,180,11)" rx="2" ry="2" />
<text  x="191.04" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (4 samples, 0.08%)</title><rect x="670.4" y="629" width="0.9" height="15.0" fill="rgb(239,43,16)" rx="2" ry="2" />
<text  x="673.39" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (519 samples, 9.81%)</title><rect x="329.5" y="469" width="115.8" height="15.0" fill="rgb(235,191,26)" rx="2" ry="2" />
<text  x="332.49" y="479.5" >std::__invoke_..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (3 samples, 0.06%)</title><rect x="560.8" y="565" width="0.7" height="15.0" fill="rgb(218,158,15)" rx="2" ry="2" />
<text  x="563.85" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.3" y="501" width="0.3" height="15.0" fill="rgb(208,131,30)" rx="2" ry="2" />
<text  x="70.34" y="511.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (5 samples, 0.09%)</title><rect x="54.0" y="389" width="1.1" height="15.0" fill="rgb(249,215,9)" rx="2" ry="2" />
<text  x="56.95" y="399.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.28%)</title><rect x="999.9" y="437" width="3.4" height="15.0" fill="rgb(212,88,12)" rx="2" ry="2" />
<text  x="1002.91" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1124.0" y="389" width="0.2" height="15.0" fill="rgb(238,194,37)" rx="2" ry="2" />
<text  x="1126.96" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="841.5" y="453" width="0.2" height="15.0" fill="rgb(215,39,3)" rx="2" ry="2" />
<text  x="844.51" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="845.5" y="485" width="0.2" height="15.0" fill="rgb(231,145,14)" rx="2" ry="2" />
<text  x="848.53" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1040.3" y="501" width="0.2" height="15.0" fill="rgb(216,17,38)" rx="2" ry="2" />
<text  x="1043.30" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (15 samples, 0.28%)</title><rect x="24.5" y="469" width="3.3" height="15.0" fill="rgb(234,134,45)" rx="2" ry="2" />
<text  x="27.50" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%)</title><rect x="22.5" y="469" width="0.2" height="15.0" fill="rgb(214,133,44)" rx="2" ry="2" />
<text  x="25.49" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (3 samples, 0.06%)</title><rect x="78.9" y="549" width="0.7" height="15.0" fill="rgb(228,122,39)" rx="2" ry="2" />
<text  x="81.94" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1095.2" y="501" width="2.4" height="15.0" fill="rgb(220,43,32)" rx="2" ry="2" />
<text  x="1098.18" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition_view::rows (1 samples, 0.02%)</title><rect x="656.6" y="549" width="0.2" height="15.0" fill="rgb(205,207,36)" rx="2" ry="2" />
<text  x="659.56" y="559.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1123.5" y="405" width="0.2" height="15.0" fill="rgb(234,27,23)" rx="2" ry="2" />
<text  x="1126.51" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (6 samples, 0.11%)</title><rect x="622.2" y="581" width="1.3" height="15.0" fill="rgb(241,74,34)" rx="2" ry="2" />
<text  x="625.20" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="596.3" y="517" width="1.1" height="15.0" fill="rgb(222,127,38)" rx="2" ry="2" />
<text  x="599.32" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="659.7" y="597" width="0.2" height="15.0" fill="rgb(250,210,17)" rx="2" ry="2" />
<text  x="662.68" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (12 samples, 0.23%)</title><rect x="1163.7" y="677" width="2.7" height="15.0" fill="rgb(246,61,46)" rx="2" ry="2" />
<text  x="1166.67" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="48.6" y="469" width="0.9" height="15.0" fill="rgb(210,114,16)" rx="2" ry="2" />
<text  x="51.60" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (5 samples, 0.09%)</title><rect x="259.7" y="341" width="1.1" height="15.0" fill="rgb(221,48,20)" rx="2" ry="2" />
<text  x="262.65" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="85.2" y="725" width="0.4" height="15.0" fill="rgb(206,20,42)" rx="2" ry="2" />
<text  x="88.19" y="735.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="76.9" y="597" width="0.3" height="15.0" fill="rgb(242,54,3)" rx="2" ry="2" />
<text  x="79.93" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="258.8" y="309" width="0.2" height="15.0" fill="rgb(220,187,6)" rx="2" ry="2" />
<text  x="261.76" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.7" y="517" width="0.2" height="15.0" fill="rgb(239,126,44)" rx="2" ry="2" />
<text  x="67.66" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mLETTER (1 samples, 0.02%)</title><rect x="33.0" y="405" width="0.2" height="15.0" fill="rgb(229,165,29)" rx="2" ry="2" />
<text  x="35.98" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="659.9" y="597" width="0.2" height="15.0" fill="rgb(236,125,28)" rx="2" ry="2" />
<text  x="662.90" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="541.4" y="485" width="0.5" height="15.0" fill="rgb(223,65,41)" rx="2" ry="2" />
<text  x="544.44" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.8" y="357" width="0.3" height="15.0" fill="rgb(220,187,36)" rx="2" ry="2" />
<text  x="55.84" y="367.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="108.6" y="645" width="0.2" height="15.0" fill="rgb(251,197,2)" rx="2" ry="2" />
<text  x="111.61" y="655.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::submit_work (1 samples, 0.02%)</title><rect x="1164.3" y="645" width="0.3" height="15.0" fill="rgb(209,191,47)" rx="2" ry="2" />
<text  x="1167.34" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (2 samples, 0.04%)</title><rect x="462.0" y="501" width="0.5" height="15.0" fill="rgb(209,96,36)" rx="2" ry="2" />
<text  x="465.01" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="82.1" y="661" width="3.1" height="15.0" fill="rgb(218,64,2)" rx="2" ry="2" />
<text  x="85.06" y="671.5" ></text>
</g>
<g >
<title>query::result_atomic_cell_view::value (1 samples, 0.02%)</title><rect x="108.8" y="389" width="0.3" height="15.0" fill="rgb(234,28,17)" rx="2" ry="2" />
<text  x="111.84" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="282.0" y="341" width="0.6" height="15.0" fill="rgb(239,181,16)" rx="2" ry="2" />
<text  x="284.96" y="351.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="991.2" y="421" width="1.8" height="15.0" fill="rgb(208,149,13)" rx="2" ry="2" />
<text  x="994.21" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (19 samples, 0.36%)</title><rect x="564.0" y="549" width="4.2" height="15.0" fill="rgb(243,139,6)" rx="2" ry="2" />
<text  x="566.97" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.6" y="373" width="0.3" height="15.0" fill="rgb(240,228,11)" rx="2" ry="2" />
<text  x="63.64" y="383.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (41 samples, 0.78%)</title><rect x="1115.7" y="565" width="9.2" height="15.0" fill="rgb(224,118,29)" rx="2" ry="2" />
<text  x="1118.71" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.0" y="373" width="0.2" height="15.0" fill="rgb(212,109,8)" rx="2" ry="2" />
<text  x="62.98" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="11.1" y="741" width="0.2" height="15.0" fill="rgb(213,48,1)" rx="2" ry="2" />
<text  x="14.12" y="751.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="78.9" y="469" width="0.5" height="15.0" fill="rgb(247,17,10)" rx="2" ry="2" />
<text  x="81.94" y="479.5" ></text>
</g>
<g >
<title>ser::qr_cell_view::value (1 samples, 0.02%)</title><rect x="108.8" y="373" width="0.3" height="15.0" fill="rgb(238,111,46)" rx="2" ry="2" />
<text  x="111.84" y="383.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (59 samples, 1.12%)</title><rect x="1061.0" y="469" width="13.2" height="15.0" fill="rgb(235,152,26)" rx="2" ry="2" />
<text  x="1064.05" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="818.5" y="277" width="0.7" height="15.0" fill="rgb(247,139,42)" rx="2" ry="2" />
<text  x="821.53" y="287.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1130.7" y="325" width="0.2" height="15.0" fill="rgb(218,114,33)" rx="2" ry="2" />
<text  x="1133.65" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="47.7" y="453" width="0.2" height="15.0" fill="rgb(246,105,20)" rx="2" ry="2" />
<text  x="50.70" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,015 samples, 19.19%)</title><rect x="888.6" y="629" width="226.4" height="15.0" fill="rgb(254,79,18)" rx="2" ry="2" />
<text  x="891.59" y="639.5" >seastar::noncopyable_function..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="38.3" y="453" width="0.3" height="15.0" fill="rgb(207,3,34)" rx="2" ry="2" />
<text  x="41.33" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1132.4" y="389" width="0.3" height="15.0" fill="rgb(251,71,12)" rx="2" ry="2" />
<text  x="1135.44" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="567.8" y="453" width="0.2" height="15.0" fill="rgb(252,140,10)" rx="2" ry="2" />
<text  x="570.76" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::~pair (1 samples, 0.02%)</title><rect x="51.3" y="309" width="0.2" height="15.0" fill="rgb(212,163,24)" rx="2" ry="2" />
<text  x="54.27" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="17.8" y="725" width="0.7" height="15.0" fill="rgb(213,85,36)" rx="2" ry="2" />
<text  x="20.81" y="735.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (13 samples, 0.25%)</title><rect x="202.3" y="389" width="2.9" height="15.0" fill="rgb(216,149,8)" rx="2" ry="2" />
<text  x="205.32" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.8" y="613" width="0.3" height="15.0" fill="rgb(233,160,20)" rx="2" ry="2" />
<text  x="142.85" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::close_data_writer (1 samples, 0.02%)</title><rect x="81.8" y="597" width="0.3" height="15.0" fill="rgb(212,148,42)" rx="2" ry="2" />
<text  x="84.84" y="607.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (134 samples, 2.53%)</title><rect x="370.8" y="341" width="29.9" height="15.0" fill="rgb(241,50,37)" rx="2" ry="2" />
<text  x="373.76" y="351.5" >wr..</text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="81.8" y="661" width="0.3" height="15.0" fill="rgb(205,141,54)" rx="2" ry="2" />
<text  x="84.84" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="976.3" y="517" width="0.2" height="15.0" fill="rgb(232,81,46)" rx="2" ry="2" />
<text  x="979.27" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_0ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_1ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_2ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_3ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (7 samples, 0.13%)</title><rect x="69.8" y="549" width="1.6" height="15.0" fill="rgb(238,91,19)" rx="2" ry="2" />
<text  x="72.79" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%)</title><rect x="849.8" y="565" width="2.2" height="15.0" fill="rgb(221,24,53)" rx="2" ry="2" />
<text  x="852.77" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (14 samples, 0.26%)</title><rect x="770.8" y="565" width="3.1" height="15.0" fill="rgb(227,195,21)" rx="2" ry="2" />
<text  x="773.79" y="575.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (23 samples, 0.43%)</title><rect x="247.2" y="325" width="5.1" height="15.0" fill="rgb(250,91,10)" rx="2" ry="2" />
<text  x="250.16" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="71.1" y="533" width="0.3" height="15.0" fill="rgb(209,197,31)" rx="2" ry="2" />
<text  x="74.13" y="543.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="862.3" y="501" width="0.2" height="15.0" fill="rgb(248,0,21)" rx="2" ry="2" />
<text  x="865.26" y="511.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.1" y="517" width="0.2" height="15.0" fill="rgb(210,218,40)" rx="2" ry="2" />
<text  x="705.07" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (10 samples, 0.19%)</title><rect x="737.3" y="597" width="2.3" height="15.0" fill="rgb(246,115,14)" rx="2" ry="2" />
<text  x="740.32" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%)</title><rect x="836.2" y="469" width="1.3" height="15.0" fill="rgb(211,92,14)" rx="2" ry="2" />
<text  x="839.16" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,843 samples, 91.57%)</title><rect x="86.1" y="693" width="1080.5" height="15.0" fill="rgb(225,7,18)" rx="2" ry="2" />
<text  x="89.08" y="703.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>cql3_parser::CqlParser::query (201 samples, 3.80%)</title><rect x="23.8" y="565" width="44.9" height="15.0" fill="rgb(217,154,27)" rx="2" ry="2" />
<text  x="26.83" y="575.5" >cql3..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="76.5" y="597" width="0.2" height="15.0" fill="rgb(212,197,28)" rx="2" ry="2" />
<text  x="79.49" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="47.9" y="469" width="0.3" height="15.0" fill="rgb(207,102,21)" rx="2" ry="2" />
<text  x="50.93" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (49 samples, 0.93%)</title><rect x="1167.7" y="789" width="10.9" height="15.0" fill="rgb(246,140,25)" rx="2" ry="2" />
<text  x="1170.69" y="799.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="47.0" y="469" width="0.7" height="15.0" fill="rgb(216,121,18)" rx="2" ry="2" />
<text  x="50.04" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="340.0" y="357" width="0.2" height="15.0" fill="rgb(238,17,49)" rx="2" ry="2" />
<text  x="342.97" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (2 samples, 0.04%)</title><rect x="876.5" y="533" width="0.5" height="15.0" fill="rgb(254,35,53)" rx="2" ry="2" />
<text  x="879.54" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1127.8" y="453" width="4.4" height="15.0" fill="rgb(210,110,6)" rx="2" ry="2" />
<text  x="1130.75" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1016.4" y="309" width="0.2" height="15.0" fill="rgb(213,90,12)" rx="2" ry="2" />
<text  x="1019.42" y="319.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1117.9" y="309" width="0.3" height="15.0" fill="rgb(234,56,49)" rx="2" ry="2" />
<text  x="1120.94" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="877.7" y="517" width="0.4" height="15.0" fill="rgb(229,135,7)" rx="2" ry="2" />
<text  x="880.65" y="527.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,844 samples, 91.59%)</title><rect x="86.1" y="757" width="1080.7" height="15.0" fill="rgb(232,155,48)" rx="2" ry="2" />
<text  x="89.08" y="767.5" >seastar::app_template::run</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="842.0" y="485" width="0.2" height="15.0" fill="rgb(214,70,30)" rx="2" ry="2" />
<text  x="844.96" y="495.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result_extra&lt;stat&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="725" width="0.2" height="15.0" fill="rgb(245,22,10)" rx="2" ry="2" />
<text  x="1192.78" y="735.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (4 samples, 0.08%)</title><rect x="465.6" y="485" width="0.9" height="15.0" fill="rgb(236,198,27)" rx="2" ry="2" />
<text  x="468.58" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.8" y="421" width="0.2" height="15.0" fill="rgb(246,137,24)" rx="2" ry="2" />
<text  x="62.75" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (5 samples, 0.09%)</title><rect x="878.8" y="437" width="1.1" height="15.0" fill="rgb(229,38,37)" rx="2" ry="2" />
<text  x="881.77" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="440.8" y="373" width="0.2" height="15.0" fill="rgb(224,110,37)" rx="2" ry="2" />
<text  x="443.81" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="504.0" y="373" width="0.2" height="15.0" fill="rgb(215,33,50)" rx="2" ry="2" />
<text  x="506.95" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="18.3" y="677" width="0.2" height="15.0" fill="rgb(228,220,5)" rx="2" ry="2" />
<text  x="21.25" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.08%)</title><rect x="41.9" y="485" width="0.9" height="15.0" fill="rgb(214,201,48)" rx="2" ry="2" />
<text  x="44.90" y="495.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%)</title><rect x="967.1" y="517" width="0.5" height="15.0" fill="rgb(253,102,0)" rx="2" ry="2" />
<text  x="970.12" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (16 samples, 0.30%)</title><rect x="564.6" y="533" width="3.6" height="15.0" fill="rgb(205,174,39)" rx="2" ry="2" />
<text  x="567.64" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="675.7" y="629" width="0.3" height="15.0" fill="rgb(230,208,21)" rx="2" ry="2" />
<text  x="678.74" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="468.9" y="421" width="0.5" height="15.0" fill="rgb(215,134,34)" rx="2" ry="2" />
<text  x="471.93" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%)</title><rect x="773.0" y="517" width="0.2" height="15.0" fill="rgb(249,167,8)" rx="2" ry="2" />
<text  x="776.02" y="527.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="702.1" y="405" width="0.2" height="15.0" fill="rgb(217,190,54)" rx="2" ry="2" />
<text  x="705.07" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="648.1" y="645" width="0.2" height="15.0" fill="rgb(235,175,3)" rx="2" ry="2" />
<text  x="651.08" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="323.2" y="565" width="0.5" height="15.0" fill="rgb(253,224,40)" rx="2" ry="2" />
<text  x="326.24" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="68.0" y="549" width="0.2" height="15.0" fill="rgb(246,151,33)" rx="2" ry="2" />
<text  x="71.01" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="44.6" y="437" width="0.2" height="15.0" fill="rgb(218,87,6)" rx="2" ry="2" />
<text  x="47.58" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="961.8" y="533" width="0.2" height="15.0" fill="rgb(247,143,47)" rx="2" ry="2" />
<text  x="964.76" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="53.1" y="421" width="0.4" height="15.0" fill="rgb(246,93,46)" rx="2" ry="2" />
<text  x="56.06" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (8 samples, 0.15%)</title><rect x="638.0" y="597" width="1.8" height="15.0" fill="rgb(245,1,0)" rx="2" ry="2" />
<text  x="641.04" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="701.6" y="453" width="0.2" height="15.0" fill="rgb(243,116,18)" rx="2" ry="2" />
<text  x="704.62" y="463.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.02%)</title><rect x="11.3" y="757" width="0.3" height="15.0" fill="rgb(228,9,2)" rx="2" ry="2" />
<text  x="14.34" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="556.2" y="485" width="0.2" height="15.0" fill="rgb(235,96,41)" rx="2" ry="2" />
<text  x="559.16" y="495.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (6 samples, 0.11%)</title><rect x="468.0" y="437" width="1.4" height="15.0" fill="rgb(247,79,4)" rx="2" ry="2" />
<text  x="471.03" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="74.3" y="517" width="0.2" height="15.0" fill="rgb(240,119,4)" rx="2" ry="2" />
<text  x="77.25" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="1094.1" y="549" width="0.2" height="15.0" fill="rgb(207,33,20)" rx="2" ry="2" />
<text  x="1097.07" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="81.6" y="533" width="0.2" height="15.0" fill="rgb(215,151,22)" rx="2" ry="2" />
<text  x="84.62" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (19 samples, 0.36%)</title><rect x="1159.0" y="645" width="4.2" height="15.0" fill="rgb(224,26,42)" rx="2" ry="2" />
<text  x="1161.99" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="993.7" y="469" width="0.2" height="15.0" fill="rgb(240,92,22)" rx="2" ry="2" />
<text  x="996.67" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="50.6" y="341" width="0.2" height="15.0" fill="rgb(254,196,2)" rx="2" ry="2" />
<text  x="53.61" y="351.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%)</title><rect x="1036.1" y="453" width="0.4" height="15.0" fill="rgb(221,69,45)" rx="2" ry="2" />
<text  x="1039.06" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="1101.4" y="581" width="0.9" height="15.0" fill="rgb(231,96,44)" rx="2" ry="2" />
<text  x="1104.43" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="875.9" y="341" width="0.2" height="15.0" fill="rgb(243,221,0)" rx="2" ry="2" />
<text  x="878.87" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="52.2" y="437" width="0.4" height="15.0" fill="rgb(240,208,39)" rx="2" ry="2" />
<text  x="55.17" y="447.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%)</title><rect x="18.3" y="709" width="0.2" height="15.0" fill="rgb(249,44,16)" rx="2" ry="2" />
<text  x="21.25" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (2 samples, 0.04%)</title><rect x="1073.3" y="437" width="0.5" height="15.0" fill="rgb(213,203,26)" rx="2" ry="2" />
<text  x="1076.32" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%)</title><rect x="121.6" y="613" width="0.2" height="15.0" fill="rgb(205,59,26)" rx="2" ry="2" />
<text  x="124.55" y="623.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (11 samples, 0.21%)</title><rect x="1119.5" y="405" width="2.5" height="15.0" fill="rgb(229,210,29)" rx="2" ry="2" />
<text  x="1122.50" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (14 samples, 0.26%)</title><rect x="990.5" y="437" width="3.2" height="15.0" fill="rgb(221,206,53)" rx="2" ry="2" />
<text  x="993.54" y="447.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.62%)</title><rect x="1115.9" y="469" width="7.4" height="15.0" fill="rgb(242,200,8)" rx="2" ry="2" />
<text  x="1118.93" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="81.6" y="597" width="0.2" height="15.0" fill="rgb(233,63,6)" rx="2" ry="2" />
<text  x="84.62" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="85.4" y="549" width="0.2" height="15.0" fill="rgb(236,159,42)" rx="2" ry="2" />
<text  x="88.41" y="559.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (6 samples, 0.11%)</title><rect x="489.5" y="485" width="1.3" height="15.0" fill="rgb(229,88,46)" rx="2" ry="2" />
<text  x="492.45" y="495.5" ></text>
</g>
<g >
<title>cql3::cf_name::get_column_family (1 samples, 0.02%)</title><rect x="21.4" y="629" width="0.2" height="15.0" fill="rgb(215,34,35)" rx="2" ry="2" />
<text  x="24.38" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1132.4" y="437" width="0.3" height="15.0" fill="rgb(212,220,45)" rx="2" ry="2" />
<text  x="1135.44" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.4" y="389" width="0.2" height="15.0" fill="rgb(223,200,27)" rx="2" ry="2" />
<text  x="63.42" y="399.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="878.5" y="469" width="2.1" height="15.0" fill="rgb(236,157,10)" rx="2" ry="2" />
<text  x="881.55" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%)</title><rect x="698.9" y="629" width="0.7" height="15.0" fill="rgb(254,28,15)" rx="2" ry="2" />
<text  x="701.95" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="140.1" y="533" width="0.2" height="15.0" fill="rgb(211,198,18)" rx="2" ry="2" />
<text  x="143.07" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%)</title><rect x="27.4" y="389" width="0.2" height="15.0" fill="rgb(220,58,5)" rx="2" ry="2" />
<text  x="30.40" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1049.9" y="501" width="0.2" height="15.0" fill="rgb(249,51,30)" rx="2" ry="2" />
<text  x="1052.89" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (13 samples, 0.25%)</title><rect x="692.3" y="645" width="2.9" height="15.0" fill="rgb(211,52,38)" rx="2" ry="2" />
<text  x="695.25" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="353.4" y="325" width="0.4" height="15.0" fill="rgb(205,150,24)" rx="2" ry="2" />
<text  x="356.36" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (2 samples, 0.04%)</title><rect x="22.9" y="581" width="0.5" height="15.0" fill="rgb(210,225,27)" rx="2" ry="2" />
<text  x="25.94" y="591.5" ></text>
</g>
<g >
<title>free (9 samples, 0.17%)</title><rect x="435.7" y="341" width="2.0" height="15.0" fill="rgb(252,92,23)" rx="2" ry="2" />
<text  x="438.68" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="763.9" y="453" width="0.2" height="15.0" fill="rgb(211,6,35)" rx="2" ry="2" />
<text  x="766.87" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="938.6" y="501" width="0.2" height="15.0" fill="rgb(252,18,18)" rx="2" ry="2" />
<text  x="941.56" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1084.5" y="533" width="0.2" height="15.0" fill="rgb(210,45,54)" rx="2" ry="2" />
<text  x="1087.47" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="681.5" y="661" width="0.3" height="15.0" fill="rgb(246,162,53)" rx="2" ry="2" />
<text  x="684.54" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.09%)</title><rect x="188.5" y="421" width="1.1" height="15.0" fill="rgb(250,194,17)" rx="2" ry="2" />
<text  x="191.48" y="431.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.36%)</title><rect x="1008.6" y="405" width="4.3" height="15.0" fill="rgb(232,101,2)" rx="2" ry="2" />
<text  x="1011.62" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="133.6" y="565" width="0.2" height="15.0" fill="rgb(219,51,47)" rx="2" ry="2" />
<text  x="136.60" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.34%)</title><rect x="1044.1" y="469" width="4.0" height="15.0" fill="rgb(222,225,35)" rx="2" ry="2" />
<text  x="1047.09" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="639.6" y="549" width="0.2" height="15.0" fill="rgb(241,161,52)" rx="2" ry="2" />
<text  x="642.60" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="568.9" y="549" width="0.9" height="15.0" fill="rgb(244,151,41)" rx="2" ry="2" />
<text  x="571.88" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql3::untyped_result_set&gt; &gt;, cql3::query_processor::execute_paged_internal (1 samples, 0.02%)</title><rect x="656.6" y="661" width="0.2" height="15.0" fill="rgb(226,56,16)" rx="2" ry="2" />
<text  x="659.56" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="355.6" y="357" width="0.2" height="15.0" fill="rgb(222,1,26)" rx="2" ry="2" />
<text  x="358.59" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1035.2" y="453" width="0.2" height="15.0" fill="rgb(246,138,48)" rx="2" ry="2" />
<text  x="1038.17" y="463.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (5 samples, 0.09%)</title><rect x="54.0" y="405" width="1.1" height="15.0" fill="rgb(252,130,6)" rx="2" ry="2" />
<text  x="56.95" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="83.0" y="517" width="0.2" height="15.0" fill="rgb(250,210,3)" rx="2" ry="2" />
<text  x="85.96" y="527.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="315.4" y="437" width="1.6" height="15.0" fill="rgb(206,152,41)" rx="2" ry="2" />
<text  x="318.43" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="640.5" y="565" width="0.4" height="15.0" fill="rgb(220,27,31)" rx="2" ry="2" />
<text  x="643.49" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (1 samples, 0.02%)</title><rect x="81.6" y="293" width="0.2" height="15.0" fill="rgb(250,137,45)" rx="2" ry="2" />
<text  x="84.62" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%)</title><rect x="849.8" y="581" width="2.2" height="15.0" fill="rgb(220,3,17)" rx="2" ry="2" />
<text  x="852.77" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (16 samples, 0.30%)</title><rect x="663.9" y="613" width="3.6" height="15.0" fill="rgb(213,77,25)" rx="2" ry="2" />
<text  x="666.92" y="623.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (18 samples, 0.34%)</title><rect x="279.7" y="373" width="4.0" height="15.0" fill="rgb(250,157,19)" rx="2" ry="2" />
<text  x="282.73" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (13 samples, 0.25%)</title><rect x="1160.3" y="597" width="2.9" height="15.0" fill="rgb(228,143,43)" rx="2" ry="2" />
<text  x="1163.33" y="607.5" ></text>
</g>
<g >
<title>schema::position (2 samples, 0.04%)</title><rect x="933.9" y="565" width="0.4" height="15.0" fill="rgb(225,120,39)" rx="2" ry="2" />
<text  x="936.88" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="764.8" y="469" width="2.0" height="15.0" fill="rgb(208,99,21)" rx="2" ry="2" />
<text  x="767.76" y="479.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (2 samples, 0.04%)</title><rect x="1130.2" y="309" width="0.5" height="15.0" fill="rgb(216,30,5)" rx="2" ry="2" />
<text  x="1133.21" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1162.3" y="581" width="0.3" height="15.0" fill="rgb(215,137,39)" rx="2" ry="2" />
<text  x="1165.34" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.09%)</title><rect x="267.5" y="357" width="1.1" height="15.0" fill="rgb(247,213,18)" rx="2" ry="2" />
<text  x="270.46" y="367.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="462.5" y="501" width="0.2" height="15.0" fill="rgb(211,10,9)" rx="2" ry="2" />
<text  x="465.46" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="85.4" y="613" width="0.2" height="15.0" fill="rgb(248,145,34)" rx="2" ry="2" />
<text  x="88.41" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="41.9" y="453" width="0.9" height="15.0" fill="rgb(248,119,0)" rx="2" ry="2" />
<text  x="44.90" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (4 samples, 0.08%)</title><rect x="524.9" y="389" width="0.9" height="15.0" fill="rgb(235,125,34)" rx="2" ry="2" />
<text  x="527.93" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="17.1" y="629" width="0.3" height="15.0" fill="rgb(241,72,7)" rx="2" ry="2" />
<text  x="20.14" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="1118.6" y="373" width="0.7" height="15.0" fill="rgb(219,227,41)" rx="2" ry="2" />
<text  x="1121.61" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="720.4" y="613" width="0.2" height="15.0" fill="rgb(212,139,20)" rx="2" ry="2" />
<text  x="723.36" y="623.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (34 samples, 0.64%)</title><rect x="1061.3" y="437" width="7.6" height="15.0" fill="rgb(229,29,10)" rx="2" ry="2" />
<text  x="1064.27" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (169 samples, 3.20%)</title><rect x="796.4" y="517" width="37.7" height="15.0" fill="rgb(235,186,2)" rx="2" ry="2" />
<text  x="799.44" y="527.5" >ser..</text>
</g>
<g >
<title>query_data_on_all_shards (1 samples, 0.02%)</title><rect x="81.6" y="213" width="0.2" height="15.0" fill="rgb(238,23,45)" rx="2" ry="2" />
<text  x="84.62" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="47.0" y="453" width="0.7" height="15.0" fill="rgb(219,209,6)" rx="2" ry="2" />
<text  x="50.04" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="109.3" y="565" width="0.2" height="15.0" fill="rgb(252,50,7)" rx="2" ry="2" />
<text  x="112.28" y="575.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="85.4" y="533" width="0.2" height="15.0" fill="rgb(245,200,46)" rx="2" ry="2" />
<text  x="88.41" y="543.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%)</title><rect x="213.0" y="357" width="0.7" height="15.0" fill="rgb(253,221,44)" rx="2" ry="2" />
<text  x="216.03" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="81.6" y="677" width="0.2" height="15.0" fill="rgb(228,35,29)" rx="2" ry="2" />
<text  x="84.62" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%)</title><rect x="728.8" y="469" width="0.3" height="15.0" fill="rgb(214,183,34)" rx="2" ry="2" />
<text  x="731.84" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="81.8" y="645" width="0.3" height="15.0" fill="rgb(244,85,35)" rx="2" ry="2" />
<text  x="84.84" y="655.5" ></text>
</g>
<g >
<title>write_tombstones&lt;ser::mutation_partition__range_tombstones&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="1129.8" y="309" width="0.2" height="15.0" fill="rgb(222,83,19)" rx="2" ry="2" />
<text  x="1132.76" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="56.2" y="389" width="0.4" height="15.0" fill="rgb(238,143,5)" rx="2" ry="2" />
<text  x="59.18" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="445.3" y="469" width="0.2" height="15.0" fill="rgb(238,16,45)" rx="2" ry="2" />
<text  x="448.28" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="486.3" y="485" width="0.9" height="15.0" fill="rgb(240,123,50)" rx="2" ry="2" />
<text  x="489.33" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="52.8" y="341" width="0.3" height="15.0" fill="rgb(239,160,17)" rx="2" ry="2" />
<text  x="55.84" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="719.7" y="613" width="0.2" height="15.0" fill="rgb(242,56,4)" rx="2" ry="2" />
<text  x="722.70" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="506.6" y="357" width="2.5" height="15.0" fill="rgb(238,192,1)" rx="2" ry="2" />
<text  x="509.63" y="367.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="110.2" y="533" width="0.2" height="15.0" fill="rgb(242,127,27)" rx="2" ry="2" />
<text  x="113.17" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (25 samples, 0.47%)</title><rect x="876.5" y="645" width="5.6" height="15.0" fill="rgb(242,60,30)" rx="2" ry="2" />
<text  x="879.54" y="655.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.09%)</title><rect x="201.2" y="373" width="1.1" height="15.0" fill="rgb(225,197,26)" rx="2" ry="2" />
<text  x="204.20" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%)</title><rect x="1132.4" y="469" width="0.3" height="15.0" fill="rgb(241,123,20)" rx="2" ry="2" />
<text  x="1135.44" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="44.4" y="389" width="0.2" height="15.0" fill="rgb(248,43,54)" rx="2" ry="2" />
<text  x="47.36" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1014.9" y="357" width="0.2" height="15.0" fill="rgb(224,21,37)" rx="2" ry="2" />
<text  x="1017.86" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="828.8" y="437" width="0.2" height="15.0" fill="rgb(234,33,45)" rx="2" ry="2" />
<text  x="831.79" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="428.8" y="389" width="0.2" height="15.0" fill="rgb(219,133,53)" rx="2" ry="2" />
<text  x="431.77" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="52.8" y="421" width="0.3" height="15.0" fill="rgb(220,157,26)" rx="2" ry="2" />
<text  x="55.84" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1086.7" y="549" width="0.4" height="15.0" fill="rgb(246,129,46)" rx="2" ry="2" />
<text  x="1089.70" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="84.7" y="453" width="0.3" height="15.0" fill="rgb(226,75,28)" rx="2" ry="2" />
<text  x="87.74" y="463.5" ></text>
</g>
<g >
<title>db::filter_for_query (1 samples, 0.02%)</title><rect x="1048.8" y="501" width="0.2" height="15.0" fill="rgb(242,39,43)" rx="2" ry="2" />
<text  x="1051.77" y="511.5" ></text>
</g>
<g >
<title>__open64 (1 samples, 0.02%)</title><rect x="1189.6" y="773" width="0.2" height="15.0" fill="rgb(227,141,23)" rx="2" ry="2" />
<text  x="1192.55" y="783.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (31 samples, 0.59%)</title><rect x="503.5" y="405" width="6.9" height="15.0" fill="rgb(229,83,47)" rx="2" ry="2" />
<text  x="506.51" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="602.8" y="533" width="0.4" height="15.0" fill="rgb(223,186,31)" rx="2" ry="2" />
<text  x="605.79" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="678.6" y="645" width="0.5" height="15.0" fill="rgb(230,192,28)" rx="2" ry="2" />
<text  x="681.64" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="705.0" y="645" width="0.4" height="15.0" fill="rgb(250,222,33)" rx="2" ry="2" />
<text  x="707.97" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="46.8" y="405" width="0.2" height="15.0" fill="rgb(232,123,40)" rx="2" ry="2" />
<text  x="49.81" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (122 samples, 2.31%)</title><rect x="219.3" y="293" width="27.2" height="15.0" fill="rgb(215,9,34)" rx="2" ry="2" />
<text  x="222.27" y="303.5" >c..</text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="895.1" y="549" width="0.2" height="15.0" fill="rgb(232,112,44)" rx="2" ry="2" />
<text  x="898.06" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%)</title><rect x="877.0" y="501" width="0.2" height="15.0" fill="rgb(252,44,48)" rx="2" ry="2" />
<text  x="879.98" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="47.5" y="325" width="0.2" height="15.0" fill="rgb(219,151,9)" rx="2" ry="2" />
<text  x="50.48" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::_M_range_initialize&lt;mutation const*&gt; (1 samples, 0.02%)</title><rect x="105.0" y="549" width="0.3" height="15.0" fill="rgb(247,183,39)" rx="2" ry="2" />
<text  x="108.04" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="670.4" y="613" width="0.4" height="15.0" fill="rgb(236,143,16)" rx="2" ry="2" />
<text  x="673.39" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="205.2" y="389" width="0.2" height="15.0" fill="rgb(230,135,54)" rx="2" ry="2" />
<text  x="208.22" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="44.4" y="341" width="0.2" height="15.0" fill="rgb(222,102,4)" rx="2" ry="2" />
<text  x="47.36" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="943.2" y="501" width="0.7" height="15.0" fill="rgb(235,94,24)" rx="2" ry="2" />
<text  x="946.25" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (586 samples, 11.08%)</title><rect x="740.0" y="629" width="130.7" height="15.0" fill="rgb(251,211,29)" rx="2" ry="2" />
<text  x="743.00" y="639.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="702.7" y="533" width="0.3" height="15.0" fill="rgb(244,61,22)" rx="2" ry="2" />
<text  x="705.74" y="543.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (2 samples, 0.04%)</title><rect x="68.9" y="533" width="0.4" height="15.0" fill="rgb(254,41,21)" rx="2" ry="2" />
<text  x="71.90" y="543.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="344.4" y="325" width="0.3" height="15.0" fill="rgb(240,72,50)" rx="2" ry="2" />
<text  x="347.43" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1113.7" y="581" width="0.2" height="15.0" fill="rgb(234,152,17)" rx="2" ry="2" />
<text  x="1116.70" y="591.5" ></text>
</g>
<g >
<title>do_cql_test (281 samples, 5.31%)</title><rect x="18.5" y="709" width="62.7" height="15.0" fill="rgb(222,131,37)" rx="2" ry="2" />
<text  x="21.48" y="719.5" >do_cql..</text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.5" y="373" width="0.3" height="15.0" fill="rgb(207,31,22)" rx="2" ry="2" />
<text  x="881.55" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (18 samples, 0.34%)</title><rect x="153.0" y="597" width="4.0" height="15.0" fill="rgb(239,61,7)" rx="2" ry="2" />
<text  x="156.01" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%)</title><rect x="876.3" y="645" width="0.2" height="15.0" fill="rgb(250,221,32)" rx="2" ry="2" />
<text  x="879.31" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="43.5" y="421" width="0.2" height="15.0" fill="rgb(212,97,3)" rx="2" ry="2" />
<text  x="46.47" y="431.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="472.3" y="437" width="1.3" height="15.0" fill="rgb(234,58,40)" rx="2" ry="2" />
<text  x="475.27" y="447.5" ></text>
</g>
<g >
<title>auth::collect_roles (1 samples, 0.02%)</title><rect x="1163.7" y="437" width="0.2" height="15.0" fill="rgb(220,137,46)" rx="2" ry="2" />
<text  x="1166.67" y="447.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="672.8" y="645" width="1.4" height="15.0" fill="rgb(211,214,54)" rx="2" ry="2" />
<text  x="675.84" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="82.7" y="453" width="0.3" height="15.0" fill="rgb(207,184,30)" rx="2" ry="2" />
<text  x="85.73" y="463.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (141 samples, 2.67%)</title><rect x="215.7" y="325" width="31.5" height="15.0" fill="rgb(211,117,16)" rx="2" ry="2" />
<text  x="218.70" y="335.5" >cl..</text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="1129.1" y="261" width="0.4" height="15.0" fill="rgb(242,165,5)" rx="2" ry="2" />
<text  x="1132.09" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="47.3" y="373" width="0.4" height="15.0" fill="rgb(254,127,12)" rx="2" ry="2" />
<text  x="50.26" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (3 samples, 0.06%)</title><rect x="659.5" y="645" width="0.6" height="15.0" fill="rgb(227,192,2)" rx="2" ry="2" />
<text  x="662.46" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="105.0" y="405" width="0.3" height="15.0" fill="rgb(216,207,27)" rx="2" ry="2" />
<text  x="108.04" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="880.6" y="453" width="0.2" height="15.0" fill="rgb(207,23,34)" rx="2" ry="2" />
<text  x="883.55" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="830.1" y="437" width="0.3" height="15.0" fill="rgb(214,146,29)" rx="2" ry="2" />
<text  x="833.13" y="447.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%)</title><rect x="18.3" y="629" width="0.2" height="15.0" fill="rgb(227,161,24)" rx="2" ry="2" />
<text  x="21.25" y="639.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="656.6" y="565" width="0.2" height="15.0" fill="rgb(213,199,43)" rx="2" ry="2" />
<text  x="659.56" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (4 samples, 0.08%)</title><rect x="73.4" y="517" width="0.9" height="15.0" fill="rgb(208,66,42)" rx="2" ry="2" />
<text  x="76.36" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.1" y="293" width="0.2" height="15.0" fill="rgb(211,8,27)" rx="2" ry="2" />
<text  x="815.06" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="275.7" y="405" width="0.2" height="15.0" fill="rgb(210,131,40)" rx="2" ry="2" />
<text  x="278.72" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="185.8" y="405" width="0.5" height="15.0" fill="rgb(234,184,37)" rx="2" ry="2" />
<text  x="188.81" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="869.8" y="581" width="0.7" height="15.0" fill="rgb(216,197,49)" rx="2" ry="2" />
<text  x="872.84" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (13 samples, 0.25%)</title><rect x="878.5" y="533" width="2.9" height="15.0" fill="rgb(211,30,21)" rx="2" ry="2" />
<text  x="881.55" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.13%)</title><rect x="911.1" y="517" width="1.6" height="15.0" fill="rgb(224,59,9)" rx="2" ry="2" />
<text  x="914.12" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="663.7" y="613" width="0.2" height="15.0" fill="rgb(225,94,15)" rx="2" ry="2" />
<text  x="666.70" y="623.5" ></text>
</g>
<g >
<title>query::result_set::result_set (2 samples, 0.04%)</title><rect x="108.8" y="485" width="0.5" height="15.0" fill="rgb(230,96,5)" rx="2" ry="2" />
<text  x="111.84" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.11%)</title><rect x="940.1" y="549" width="1.4" height="15.0" fill="rgb(236,122,12)" rx="2" ry="2" />
<text  x="943.12" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="526.3" y="357" width="0.4" height="15.0" fill="rgb(210,158,24)" rx="2" ry="2" />
<text  x="529.26" y="367.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="18.3" y="581" width="0.2" height="15.0" fill="rgb(206,56,46)" rx="2" ry="2" />
<text  x="21.25" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="655.4" y="645" width="0.3" height="15.0" fill="rgb(213,43,38)" rx="2" ry="2" />
<text  x="658.44" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="707.6" y="613" width="0.3" height="15.0" fill="rgb(206,175,31)" rx="2" ry="2" />
<text  x="710.65" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="598.8" y="517" width="0.4" height="15.0" fill="rgb(241,86,32)" rx="2" ry="2" />
<text  x="601.77" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="120.9" y="613" width="0.2" height="15.0" fill="rgb(235,219,9)" rx="2" ry="2" />
<text  x="123.88" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (4 samples, 0.08%)</title><rect x="73.4" y="533" width="0.9" height="15.0" fill="rgb(208,95,35)" rx="2" ry="2" />
<text  x="76.36" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (3 samples, 0.06%)</title><rect x="1074.7" y="437" width="0.6" height="15.0" fill="rgb(232,21,6)" rx="2" ry="2" />
<text  x="1077.65" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="994.6" y="453" width="0.2" height="15.0" fill="rgb(227,116,32)" rx="2" ry="2" />
<text  x="997.56" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1028.9" y="437" width="0.2" height="15.0" fill="rgb(253,161,16)" rx="2" ry="2" />
<text  x="1031.92" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="702.7" y="645" width="0.3" height="15.0" fill="rgb(207,61,25)" rx="2" ry="2" />
<text  x="705.74" y="655.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1 samples, 0.02%)</title><rect x="833.9" y="501" width="0.2" height="15.0" fill="rgb(243,212,7)" rx="2" ry="2" />
<text  x="836.93" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="65.6" y="501" width="0.2" height="15.0" fill="rgb(223,99,23)" rx="2" ry="2" />
<text  x="68.55" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.6" y="373" width="0.2" height="15.0" fill="rgb(220,21,34)" rx="2" ry="2" />
<text  x="1125.62" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.11%)</title><rect x="1092.7" y="533" width="1.4" height="15.0" fill="rgb(214,218,28)" rx="2" ry="2" />
<text  x="1095.73" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.2" y="549" width="0.2" height="15.0" fill="rgb(231,82,17)" rx="2" ry="2" />
<text  x="80.15" y="559.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="17.8" y="709" width="0.2" height="15.0" fill="rgb(246,96,1)" rx="2" ry="2" />
<text  x="20.81" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="61.5" y="277" width="0.5" height="15.0" fill="rgb(208,12,34)" rx="2" ry="2" />
<text  x="64.54" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="745.4" y="485" width="0.4" height="15.0" fill="rgb(208,39,16)" rx="2" ry="2" />
<text  x="748.35" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="423.4" y="325" width="0.7" height="15.0" fill="rgb(236,39,5)" rx="2" ry="2" />
<text  x="426.41" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (2 samples, 0.04%)</title><rect x="439.0" y="357" width="0.5" height="15.0" fill="rgb(214,51,2)" rx="2" ry="2" />
<text  x="442.03" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (47 samples, 0.89%)</title><rect x="897.7" y="485" width="10.5" height="15.0" fill="rgb(253,76,10)" rx="2" ry="2" />
<text  x="900.73" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="667.3" y="597" width="0.2" height="15.0" fill="rgb(222,182,0)" rx="2" ry="2" />
<text  x="670.27" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (18 samples, 0.34%)</title><rect x="1090.0" y="549" width="4.1" height="15.0" fill="rgb(213,98,3)" rx="2" ry="2" />
<text  x="1093.05" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1163.7" y="565" width="0.2" height="15.0" fill="rgb(208,18,17)" rx="2" ry="2" />
<text  x="1166.67" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (3 samples, 0.06%)</title><rect x="468.3" y="421" width="0.6" height="15.0" fill="rgb(217,52,45)" rx="2" ry="2" />
<text  x="471.26" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="827.0" y="405" width="0.2" height="15.0" fill="rgb(219,220,14)" rx="2" ry="2" />
<text  x="830.01" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="60.0" y="437" width="0.2" height="15.0" fill="rgb(231,188,17)" rx="2" ry="2" />
<text  x="62.98" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.78%)</title><rect x="1115.7" y="613" width="9.2" height="15.0" fill="rgb(224,93,20)" rx="2" ry="2" />
<text  x="1118.71" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (8 samples, 0.15%)</title><rect x="24.9" y="421" width="1.8" height="15.0" fill="rgb(213,149,17)" rx="2" ry="2" />
<text  x="27.95" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="270.8" y="389" width="0.2" height="15.0" fill="rgb(216,186,11)" rx="2" ry="2" />
<text  x="273.81" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="485.0" y="437" width="0.9" height="15.0" fill="rgb(210,40,8)" rx="2" ry="2" />
<text  x="487.99" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="201.4" y="341" width="0.7" height="15.0" fill="rgb(217,148,8)" rx="2" ry="2" />
<text  x="204.42" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="291.8" y="437" width="0.2" height="15.0" fill="rgb(240,35,28)" rx="2" ry="2" />
<text  x="294.78" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%)</title><rect x="109.5" y="597" width="0.2" height="15.0" fill="rgb(215,192,31)" rx="2" ry="2" />
<text  x="112.50" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="911.6" y="469" width="0.4" height="15.0" fill="rgb(253,34,9)" rx="2" ry="2" />
<text  x="914.57" y="479.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="1163.7" y="309" width="0.2" height="15.0" fill="rgb(211,143,44)" rx="2" ry="2" />
<text  x="1166.67" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%)</title><rect x="510.6" y="485" width="0.3" height="15.0" fill="rgb(239,222,44)" rx="2" ry="2" />
<text  x="513.65" y="495.5" ></text>
</g>
</g>
</svg>
