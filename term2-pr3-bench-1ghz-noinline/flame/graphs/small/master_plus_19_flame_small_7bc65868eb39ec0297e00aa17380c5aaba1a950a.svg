<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (25 samples, 0.48%)</title><rect x="268.5" y="181" width="5.7" height="15.0" fill="rgb(213,150,27)" rx="2" ry="2" />
<text  x="271.49" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (16 samples, 0.31%)</title><rect x="993.0" y="277" width="3.6" height="15.0" fill="rgb(223,77,5)" rx="2" ry="2" />
<text  x="995.96" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="44.9" y="293" width="0.5" height="15.0" fill="rgb(212,184,4)" rx="2" ry="2" />
<text  x="47.92" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (1 samples, 0.02%)</title><rect x="462.6" y="341" width="0.2" height="15.0" fill="rgb(245,118,4)" rx="2" ry="2" />
<text  x="465.59" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::statement_restrictions, false&gt;::make&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="10.7" y="309" width="0.2" height="15.0" fill="rgb(229,159,51)" rx="2" ry="2" />
<text  x="13.68" y="319.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="108.4" y="485" width="0.2" height="15.0" fill="rgb(213,36,11)" rx="2" ry="2" />
<text  x="111.41" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="988.0" y="293" width="0.2" height="15.0" fill="rgb(229,96,17)" rx="2" ry="2" />
<text  x="990.97" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1026.1" y="117" width="0.2" height="15.0" fill="rgb(254,12,53)" rx="2" ry="2" />
<text  x="1029.06" y="127.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,769 samples, 91.64%)</title><rect x="88.5" y="581" width="1081.3" height="15.0" fill="rgb(250,203,5)" rx="2" ry="2" />
<text  x="91.46" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1042.2" y="213" width="0.2" height="15.0" fill="rgb(222,107,53)" rx="2" ry="2" />
<text  x="1045.16" y="223.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="907.0" y="309" width="0.2" height="15.0" fill="rgb(247,23,42)" rx="2" ry="2" />
<text  x="910.02" y="319.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (59 samples, 1.13%)</title><rect x="793.6" y="245" width="13.4" height="15.0" fill="rgb(239,154,12)" rx="2" ry="2" />
<text  x="796.64" y="255.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (206 samples, 3.96%)</title><rect x="26.1" y="453" width="46.7" height="15.0" fill="rgb(213,46,43)" rx="2" ry="2" />
<text  x="29.10" y="463.5" >cql3..</text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="698.6" y="277" width="0.3" height="15.0" fill="rgb(225,140,15)" rx="2" ry="2" />
<text  x="701.64" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (4 samples, 0.08%)</title><rect x="1093.4" y="389" width="0.9" height="15.0" fill="rgb(211,76,40)" rx="2" ry="2" />
<text  x="1096.41" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (9 samples, 0.17%)</title><rect x="868.7" y="341" width="2.0" height="15.0" fill="rgb(208,95,36)" rx="2" ry="2" />
<text  x="871.70" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="52.9" y="149" width="0.4" height="15.0" fill="rgb(238,31,37)" rx="2" ry="2" />
<text  x="55.86" y="159.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (2 samples, 0.04%)</title><rect x="659.2" y="437" width="0.4" height="15.0" fill="rgb(208,150,15)" rx="2" ry="2" />
<text  x="662.18" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="627.2" y="437" width="0.2" height="15.0" fill="rgb(253,69,45)" rx="2" ry="2" />
<text  x="630.21" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="621.5" y="357" width="0.5" height="15.0" fill="rgb(209,188,11)" rx="2" ry="2" />
<text  x="624.54" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="114.3" y="325" width="0.2" height="15.0" fill="rgb(209,15,54)" rx="2" ry="2" />
<text  x="117.30" y="335.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="116.8" y="277" width="0.2" height="15.0" fill="rgb(213,47,6)" rx="2" ry="2" />
<text  x="119.80" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="47.6" y="277" width="0.7" height="15.0" fill="rgb(209,129,34)" rx="2" ry="2" />
<text  x="50.64" y="287.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="13.4" y="309" width="0.2" height="15.0" fill="rgb(247,13,18)" rx="2" ry="2" />
<text  x="16.40" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (279 samples, 5.36%)</title><rect x="24.1" y="565" width="63.2" height="15.0" fill="rgb(211,35,51)" rx="2" ry="2" />
<text  x="27.06" y="575.5" >std::_..</text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%)</title><rect x="768.2" y="341" width="1.4" height="15.0" fill="rgb(252,4,42)" rx="2" ry="2" />
<text  x="771.25" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="894.1" y="389" width="0.4" height="15.0" fill="rgb(235,54,47)" rx="2" ry="2" />
<text  x="897.09" y="399.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1129.0" y="197" width="0.5" height="15.0" fill="rgb(207,171,40)" rx="2" ry="2" />
<text  x="1132.00" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (184 samples, 3.54%)</title><rect x="30.2" y="389" width="41.7" height="15.0" fill="rgb(226,110,42)" rx="2" ry="2" />
<text  x="33.18" y="399.5" >cql..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="965.3" y="309" width="0.2" height="15.0" fill="rgb(238,133,47)" rx="2" ry="2" />
<text  x="968.29" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="509.3" y="197" width="0.7" height="15.0" fill="rgb(223,75,51)" rx="2" ry="2" />
<text  x="512.30" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (9 samples, 0.17%)</title><rect x="856.5" y="389" width="2.0" height="15.0" fill="rgb(216,209,16)" rx="2" ry="2" />
<text  x="859.45" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (8 samples, 0.15%)</title><rect x="55.3" y="309" width="1.9" height="15.0" fill="rgb(211,68,48)" rx="2" ry="2" />
<text  x="58.35" y="319.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="898.2" y="309" width="0.4" height="15.0" fill="rgb(231,24,29)" rx="2" ry="2" />
<text  x="901.17" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="864.4" y="453" width="0.2" height="15.0" fill="rgb(207,101,17)" rx="2" ry="2" />
<text  x="867.39" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="50.4" y="293" width="0.2" height="15.0" fill="rgb(235,215,3)" rx="2" ry="2" />
<text  x="53.36" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (1 samples, 0.02%)</title><rect x="114.1" y="325" width="0.2" height="15.0" fill="rgb(211,30,3)" rx="2" ry="2" />
<text  x="117.08" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%)</title><rect x="294.8" y="213" width="1.8" height="15.0" fill="rgb(217,91,4)" rx="2" ry="2" />
<text  x="297.80" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="67.4" y="117" width="0.2" height="15.0" fill="rgb(208,44,5)" rx="2" ry="2" />
<text  x="70.37" y="127.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="833.1" y="389" width="0.2" height="15.0" fill="rgb(238,61,34)" rx="2" ry="2" />
<text  x="836.10" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="721.8" y="485" width="0.2" height="15.0" fill="rgb(205,91,50)" rx="2" ry="2" />
<text  x="724.76" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="570.3" y="357" width="0.2" height="15.0" fill="rgb(239,11,8)" rx="2" ry="2" />
<text  x="573.30" y="367.5" ></text>
</g>
<g >
<title>auth::resource::resource (11 samples, 0.21%)</title><rect x="773.5" y="389" width="2.5" height="15.0" fill="rgb(249,201,23)" rx="2" ry="2" />
<text  x="776.46" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="297.3" y="229" width="0.4" height="15.0" fill="rgb(235,81,23)" rx="2" ry="2" />
<text  x="300.29" y="239.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="11.6" y="357" width="0.2" height="15.0" fill="rgb(235,200,31)" rx="2" ry="2" />
<text  x="14.59" y="367.5" ></text>
</g>
<g >
<title>schema_registry::get (15 samples, 0.29%)</title><rect x="973.5" y="357" width="3.4" height="15.0" fill="rgb(238,220,50)" rx="2" ry="2" />
<text  x="976.46" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (223 samples, 4.29%)</title><rect x="890.7" y="421" width="50.6" height="15.0" fill="rgb(223,157,2)" rx="2" ry="2" />
<text  x="893.69" y="431.5" >cql3:..</text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%)</title><rect x="283.5" y="229" width="0.6" height="15.0" fill="rgb(208,145,32)" rx="2" ry="2" />
<text  x="286.46" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (3 samples, 0.06%)</title><rect x="78.5" y="357" width="0.7" height="15.0" fill="rgb(251,177,30)" rx="2" ry="2" />
<text  x="81.48" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="537.2" y="213" width="0.2" height="15.0" fill="rgb(206,178,17)" rx="2" ry="2" />
<text  x="540.19" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,301 samples, 44.22%)</title><rect x="120.9" y="485" width="521.7" height="15.0" fill="rgb(230,204,13)" rx="2" ry="2" />
<text  x="123.88" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="52.2" y="261" width="0.2" height="15.0" fill="rgb(240,172,32)" rx="2" ry="2" />
<text  x="55.18" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="454.9" y="357" width="0.2" height="15.0" fill="rgb(242,45,9)" rx="2" ry="2" />
<text  x="457.88" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1126.3" y="229" width="0.4" height="15.0" fill="rgb(247,191,3)" rx="2" ry="2" />
<text  x="1129.28" y="239.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="25.0" y="485" width="0.9" height="15.0" fill="rgb(210,9,8)" rx="2" ry="2" />
<text  x="27.97" y="495.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="82.6" y="357" width="0.2" height="15.0" fill="rgb(248,202,19)" rx="2" ry="2" />
<text  x="85.56" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%)</title><rect x="69.0" y="309" width="0.2" height="15.0" fill="rgb(250,12,52)" rx="2" ry="2" />
<text  x="71.95" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="89.1" y="517" width="0.3" height="15.0" fill="rgb(236,219,4)" rx="2" ry="2" />
<text  x="92.14" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="51.7" y="261" width="0.5" height="15.0" fill="rgb(208,155,9)" rx="2" ry="2" />
<text  x="54.72" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="715.9" y="421" width="0.4" height="15.0" fill="rgb(208,10,48)" rx="2" ry="2" />
<text  x="718.87" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (35 samples, 0.67%)</title><rect x="700.2" y="501" width="8.0" height="15.0" fill="rgb(232,10,6)" rx="2" ry="2" />
<text  x="703.22" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="774.1" y="341" width="1.2" height="15.0" fill="rgb(222,49,5)" rx="2" ry="2" />
<text  x="777.14" y="351.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="755.3" y="277" width="0.2" height="15.0" fill="rgb(234,176,29)" rx="2" ry="2" />
<text  x="758.32" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1053.5" y="341" width="0.5" height="15.0" fill="rgb(237,184,25)" rx="2" ry="2" />
<text  x="1056.50" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="674.8" y="485" width="0.3" height="15.0" fill="rgb(206,63,24)" rx="2" ry="2" />
<text  x="677.83" y="495.5" ></text>
</g>
<g >
<title>database::add_column_family_and_make_directory (1 samples, 0.02%)</title><rect x="114.1" y="277" width="0.2" height="15.0" fill="rgb(241,125,7)" rx="2" ry="2" />
<text  x="117.08" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;seastar::shared_ptr&lt;cql3::relation&gt;*, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="68.7" y="293" width="0.3" height="15.0" fill="rgb(245,189,49)" rx="2" ry="2" />
<text  x="71.73" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="671.7" y="437" width="0.2" height="15.0" fill="rgb(209,84,33)" rx="2" ry="2" />
<text  x="674.65" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (257 samples, 4.94%)</title><rect x="26.1" y="485" width="58.3" height="15.0" fill="rgb(250,189,9)" rx="2" ry="2" />
<text  x="29.10" y="495.5" >cql3::..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="633.3" y="405" width="0.7" height="15.0" fill="rgb(244,91,8)" rx="2" ry="2" />
<text  x="636.33" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="79.4" y="389" width="0.2" height="15.0" fill="rgb(226,169,2)" rx="2" ry="2" />
<text  x="82.39" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.10%)</title><rect x="48.3" y="277" width="1.2" height="15.0" fill="rgb(236,118,31)" rx="2" ry="2" />
<text  x="51.32" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="455.6" y="373" width="0.2" height="15.0" fill="rgb(250,156,18)" rx="2" ry="2" />
<text  x="458.56" y="383.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 6.65%)</title><rect x="10.0" y="629" width="78.5" height="15.0" fill="rgb(220,103,26)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >[unknown]</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (3 samples, 0.06%)</title><rect x="98.9" y="485" width="0.7" height="15.0" fill="rgb(218,90,24)" rx="2" ry="2" />
<text  x="101.89" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="306.1" y="277" width="0.3" height="15.0" fill="rgb(233,102,32)" rx="2" ry="2" />
<text  x="309.13" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="719.5" y="405" width="0.2" height="15.0" fill="rgb(206,115,39)" rx="2" ry="2" />
<text  x="722.50" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%)</title><rect x="253.5" y="69" width="0.9" height="15.0" fill="rgb(205,151,32)" rx="2" ry="2" />
<text  x="256.53" y="79.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="646.7" y="485" width="0.5" height="15.0" fill="rgb(240,86,5)" rx="2" ry="2" />
<text  x="649.71" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (2 samples, 0.04%)</title><rect x="698.4" y="501" width="0.5" height="15.0" fill="rgb(235,5,43)" rx="2" ry="2" />
<text  x="701.41" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1144.7" y="485" width="0.4" height="15.0" fill="rgb(215,213,44)" rx="2" ry="2" />
<text  x="1147.65" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1087.7" y="357" width="0.3" height="15.0" fill="rgb(224,24,21)" rx="2" ry="2" />
<text  x="1090.74" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="864.8" y="469" width="0.3" height="15.0" fill="rgb(251,98,20)" rx="2" ry="2" />
<text  x="867.84" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="750.8" y="357" width="0.9" height="15.0" fill="rgb(231,200,33)" rx="2" ry="2" />
<text  x="753.79" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1026.1" y="133" width="0.2" height="15.0" fill="rgb(254,84,9)" rx="2" ry="2" />
<text  x="1029.06" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="476.4" y="277" width="0.2" height="15.0" fill="rgb(235,203,44)" rx="2" ry="2" />
<text  x="479.42" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="651.7" y="469" width="0.2" height="15.0" fill="rgb(218,140,14)" rx="2" ry="2" />
<text  x="654.70" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="58.1" y="229" width="0.4" height="15.0" fill="rgb(222,90,38)" rx="2" ry="2" />
<text  x="61.07" y="239.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="864.4" y="277" width="0.2" height="15.0" fill="rgb(230,201,7)" rx="2" ry="2" />
<text  x="867.39" y="287.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (1 samples, 0.02%)</title><rect x="27.9" y="357" width="0.2" height="15.0" fill="rgb(213,193,47)" rx="2" ry="2" />
<text  x="30.91" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="690.5" y="469" width="0.7" height="15.0" fill="rgb(214,87,42)" rx="2" ry="2" />
<text  x="693.47" y="479.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="14.3" y="501" width="0.2" height="15.0" fill="rgb(235,104,17)" rx="2" ry="2" />
<text  x="17.31" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (10 samples, 0.19%)</title><rect x="634.0" y="421" width="2.3" height="15.0" fill="rgb(236,110,14)" rx="2" ry="2" />
<text  x="637.01" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="459.9" y="357" width="0.2" height="15.0" fill="rgb(207,49,5)" rx="2" ry="2" />
<text  x="462.87" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (350 samples, 6.73%)</title><rect x="206.1" y="261" width="79.4" height="15.0" fill="rgb(214,225,46)" rx="2" ry="2" />
<text  x="209.14" y="271.5" >partition..</text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%)</title><rect x="12.9" y="325" width="0.7" height="15.0" fill="rgb(246,112,28)" rx="2" ry="2" />
<text  x="15.95" y="335.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="952.4" y="389" width="0.2" height="15.0" fill="rgb(221,174,46)" rx="2" ry="2" />
<text  x="955.37" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (36 samples, 0.69%)</title><rect x="468.5" y="293" width="8.1" height="15.0" fill="rgb(222,28,23)" rx="2" ry="2" />
<text  x="471.49" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="837.0" y="405" width="1.8" height="15.0" fill="rgb(228,82,49)" rx="2" ry="2" />
<text  x="839.95" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="79.4" y="277" width="0.2" height="15.0" fill="rgb(233,103,1)" rx="2" ry="2" />
<text  x="82.39" y="287.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="86.4" y="421" width="0.2" height="15.0" fill="rgb(244,229,53)" rx="2" ry="2" />
<text  x="89.41" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="673.9" y="485" width="0.2" height="15.0" fill="rgb(230,70,8)" rx="2" ry="2" />
<text  x="676.92" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (702 samples, 13.49%)</title><rect x="174.8" y="405" width="159.2" height="15.0" fill="rgb(233,73,36)" rx="2" ry="2" />
<text  x="177.85" y="415.5" >flat_mutation_reader..</text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="938.1" y="373" width="0.4" height="15.0" fill="rgb(216,23,41)" rx="2" ry="2" />
<text  x="941.08" y="383.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (16 samples, 0.31%)</title><rect x="498.2" y="261" width="3.6" height="15.0" fill="rgb(251,118,6)" rx="2" ry="2" />
<text  x="501.19" y="271.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="698.9" y="437" width="0.2" height="15.0" fill="rgb(230,20,1)" rx="2" ry="2" />
<text  x="701.86" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="50.4" y="133" width="0.2" height="15.0" fill="rgb(241,183,0)" rx="2" ry="2" />
<text  x="53.36" y="143.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="103.2" y="421" width="0.2" height="15.0" fill="rgb(231,180,1)" rx="2" ry="2" />
<text  x="106.19" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="451.0" y="325" width="0.3" height="15.0" fill="rgb(247,105,14)" rx="2" ry="2" />
<text  x="454.03" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.21%)</title><rect x="1068.7" y="229" width="2.5" height="15.0" fill="rgb(215,215,47)" rx="2" ry="2" />
<text  x="1071.69" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="597.5" y="373" width="0.2" height="15.0" fill="rgb(242,35,29)" rx="2" ry="2" />
<text  x="600.51" y="383.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (2 samples, 0.04%)</title><rect x="819.3" y="389" width="0.4" height="15.0" fill="rgb(220,94,44)" rx="2" ry="2" />
<text  x="822.27" y="399.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token_present (1 samples, 0.02%)</title><rect x="33.6" y="277" width="0.2" height="15.0" fill="rgb(232,12,19)" rx="2" ry="2" />
<text  x="36.58" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="271.0" y="149" width="0.2" height="15.0" fill="rgb(227,83,41)" rx="2" ry="2" />
<text  x="273.99" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="641.0" y="389" width="0.5" height="15.0" fill="rgb(236,76,26)" rx="2" ry="2" />
<text  x="644.04" y="399.5" ></text>
</g>
<g >
<title>schema::position (2 samples, 0.04%)</title><rect x="1107.2" y="421" width="0.5" height="15.0" fill="rgb(217,176,20)" rx="2" ry="2" />
<text  x="1110.24" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="409.8" y="181" width="0.4" height="15.0" fill="rgb(224,157,36)" rx="2" ry="2" />
<text  x="412.76" y="191.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1115.2" y="421" width="0.2" height="15.0" fill="rgb(237,27,13)" rx="2" ry="2" />
<text  x="1118.17" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="117.0" y="277" width="0.3" height="15.0" fill="rgb(223,196,54)" rx="2" ry="2" />
<text  x="120.03" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (3 samples, 0.06%)</title><rect x="78.5" y="373" width="0.7" height="15.0" fill="rgb(217,81,4)" rx="2" ry="2" />
<text  x="81.48" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="53.8" y="213" width="0.2" height="15.0" fill="rgb(233,162,3)" rx="2" ry="2" />
<text  x="56.76" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="673.7" y="485" width="0.2" height="15.0" fill="rgb(246,95,8)" rx="2" ry="2" />
<text  x="676.69" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="163.7" y="389" width="0.3" height="15.0" fill="rgb(218,63,22)" rx="2" ry="2" />
<text  x="166.74" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="864.4" y="501" width="0.4" height="15.0" fill="rgb(210,157,53)" rx="2" ry="2" />
<text  x="867.39" y="511.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="569.4" y="373" width="1.1" height="15.0" fill="rgb(253,69,20)" rx="2" ry="2" />
<text  x="572.39" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="485" width="0.2" height="15.0" fill="rgb(225,55,19)" rx="2" ry="2" />
<text  x="13.68" y="495.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="797.0" y="165" width="0.5" height="15.0" fill="rgb(243,71,7)" rx="2" ry="2" />
<text  x="800.04" y="175.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="55.3" y="133" width="0.5" height="15.0" fill="rgb(224,62,44)" rx="2" ry="2" />
<text  x="58.35" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="83.0" y="389" width="0.2" height="15.0" fill="rgb(231,118,3)" rx="2" ry="2" />
<text  x="86.01" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="67.4" y="165" width="0.2" height="15.0" fill="rgb(244,147,52)" rx="2" ry="2" />
<text  x="70.37" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="52.2" y="181" width="0.2" height="15.0" fill="rgb(231,93,51)" rx="2" ry="2" />
<text  x="55.18" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="32.2" y="197" width="0.2" height="15.0" fill="rgb(221,161,14)" rx="2" ry="2" />
<text  x="35.22" y="207.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="63.3" y="229" width="0.2" height="15.0" fill="rgb(241,203,47)" rx="2" ry="2" />
<text  x="66.29" y="239.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="115.4" y="453" width="0.3" height="15.0" fill="rgb(232,105,27)" rx="2" ry="2" />
<text  x="118.44" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (479 samples, 9.20%)</title><rect x="339.7" y="309" width="108.6" height="15.0" fill="rgb(242,145,24)" rx="2" ry="2" />
<text  x="342.69" y="319.5" >std::__invoke..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="978.4" y="357" width="0.3" height="15.0" fill="rgb(220,102,30)" rx="2" ry="2" />
<text  x="981.44" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="329.9" y="325" width="0.7" height="15.0" fill="rgb(252,212,29)" rx="2" ry="2" />
<text  x="332.94" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1120.6" y="421" width="0.2" height="15.0" fill="rgb(235,164,35)" rx="2" ry="2" />
<text  x="1123.61" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="746.9" y="389" width="0.7" height="15.0" fill="rgb(229,36,32)" rx="2" ry="2" />
<text  x="749.93" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (15 samples, 0.29%)</title><rect x="10.9" y="549" width="3.4" height="15.0" fill="rgb(231,65,16)" rx="2" ry="2" />
<text  x="13.91" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="998.4" y="293" width="0.2" height="15.0" fill="rgb(205,116,32)" rx="2" ry="2" />
<text  x="1001.40" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%)</title><rect x="81.4" y="373" width="0.3" height="15.0" fill="rgb(209,218,24)" rx="2" ry="2" />
<text  x="84.43" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (3 samples, 0.06%)</title><rect x="46.3" y="165" width="0.7" height="15.0" fill="rgb(237,42,33)" rx="2" ry="2" />
<text  x="49.28" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (35 samples, 0.67%)</title><rect x="865.3" y="469" width="7.9" height="15.0" fill="rgb(244,167,42)" rx="2" ry="2" />
<text  x="868.30" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="70.8" y="357" width="0.2" height="15.0" fill="rgb(244,78,44)" rx="2" ry="2" />
<text  x="73.77" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%)</title><rect x="352.6" y="213" width="0.9" height="15.0" fill="rgb(233,221,48)" rx="2" ry="2" />
<text  x="355.62" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="949.0" y="389" width="0.2" height="15.0" fill="rgb(253,126,48)" rx="2" ry="2" />
<text  x="951.97" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="853.1" y="357" width="0.2" height="15.0" fill="rgb(233,195,34)" rx="2" ry="2" />
<text  x="856.05" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="54.0" y="309" width="0.9" height="15.0" fill="rgb(249,222,47)" rx="2" ry="2" />
<text  x="56.99" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="339.5" y="309" width="0.2" height="15.0" fill="rgb(214,150,43)" rx="2" ry="2" />
<text  x="342.47" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%)</title><rect x="1104.3" y="421" width="0.4" height="15.0" fill="rgb(239,180,13)" rx="2" ry="2" />
<text  x="1107.29" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="815.0" y="293" width="0.2" height="15.0" fill="rgb(230,80,54)" rx="2" ry="2" />
<text  x="817.96" y="303.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="584.8" y="325" width="0.5" height="15.0" fill="rgb(225,45,41)" rx="2" ry="2" />
<text  x="587.81" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (530 samples, 10.18%)</title><rect x="965.5" y="373" width="120.2" height="15.0" fill="rgb(247,0,21)" rx="2" ry="2" />
<text  x="968.52" y="383.5" >service::stora..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (26 samples, 0.50%)</title><rect x="1132.6" y="325" width="5.9" height="15.0" fill="rgb(208,155,20)" rx="2" ry="2" />
<text  x="1135.63" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (6 samples, 0.12%)</title><rect x="755.1" y="293" width="1.4" height="15.0" fill="rgb(239,215,1)" rx="2" ry="2" />
<text  x="758.10" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="1059.6" y="293" width="0.5" height="15.0" fill="rgb(227,23,52)" rx="2" ry="2" />
<text  x="1062.62" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%)</title><rect x="376.0" y="181" width="0.2" height="15.0" fill="rgb(241,151,12)" rx="2" ry="2" />
<text  x="378.97" y="191.5" ></text>
</g>
<g >
<title>hwloc__add_info_nodup.isra.0 (1 samples, 0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(207,169,4)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1084.6" y="357" width="0.4" height="15.0" fill="rgb(231,49,48)" rx="2" ry="2" />
<text  x="1087.56" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="696.6" y="437" width="0.2" height="15.0" fill="rgb(205,175,42)" rx="2" ry="2" />
<text  x="699.59" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="665.5" y="389" width="0.5" height="15.0" fill="rgb(232,53,52)" rx="2" ry="2" />
<text  x="668.53" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="311.1" y="341" width="0.5" height="15.0" fill="rgb(209,126,49)" rx="2" ry="2" />
<text  x="314.12" y="351.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (1 samples, 0.02%)</title><rect x="1061.9" y="325" width="0.2" height="15.0" fill="rgb(249,97,8)" rx="2" ry="2" />
<text  x="1064.89" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.2" y="309" width="0.4" height="15.0" fill="rgb(240,131,46)" rx="2" ry="2" />
<text  x="50.19" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="698.9" y="293" width="0.2" height="15.0" fill="rgb(214,129,43)" rx="2" ry="2" />
<text  x="701.86" y="303.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1169.6" y="549" width="0.2" height="15.0" fill="rgb(234,197,29)" rx="2" ry="2" />
<text  x="1172.59" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="87.3" y="517" width="0.2" height="15.0" fill="rgb(223,157,17)" rx="2" ry="2" />
<text  x="90.32" y="527.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="440.8" y="197" width="0.5" height="15.0" fill="rgb(232,81,24)" rx="2" ry="2" />
<text  x="443.82" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="279.4" y="117" width="0.2" height="15.0" fill="rgb(205,132,41)" rx="2" ry="2" />
<text  x="282.38" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="441.0" y="181" width="0.3" height="15.0" fill="rgb(227,149,45)" rx="2" ry="2" />
<text  x="444.05" y="191.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (20 samples, 0.38%)</title><rect x="1126.1" y="277" width="4.5" height="15.0" fill="rgb(229,92,16)" rx="2" ry="2" />
<text  x="1129.06" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="639.5" y="389" width="0.2" height="15.0" fill="rgb(243,20,38)" rx="2" ry="2" />
<text  x="642.45" y="399.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (7 samples, 0.13%)</title><rect x="558.3" y="261" width="1.6" height="15.0" fill="rgb(247,226,24)" rx="2" ry="2" />
<text  x="561.28" y="271.5" ></text>
</g>
<g >
<title>table::set_hit_rate (1 samples, 0.02%)</title><rect x="720.4" y="469" width="0.2" height="15.0" fill="rgb(216,66,40)" rx="2" ry="2" />
<text  x="723.40" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (4 samples, 0.08%)</title><rect x="48.5" y="197" width="1.0" height="15.0" fill="rgb(235,142,39)" rx="2" ry="2" />
<text  x="51.55" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="296.6" y="229" width="0.7" height="15.0" fill="rgb(232,145,9)" rx="2" ry="2" />
<text  x="299.61" y="239.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (12 samples, 0.23%)</title><rect x="18.6" y="581" width="2.7" height="15.0" fill="rgb(236,66,41)" rx="2" ry="2" />
<text  x="21.62" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.7" y="149" width="0.2" height="15.0" fill="rgb(228,100,29)" rx="2" ry="2" />
<text  x="798.68" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1135.1" y="277" width="0.3" height="15.0" fill="rgb(227,107,52)" rx="2" ry="2" />
<text  x="1138.13" y="287.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="40.2" y="229" width="0.2" height="15.0" fill="rgb(252,96,0)" rx="2" ry="2" />
<text  x="43.16" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.12%)</title><rect x="666.9" y="437" width="1.4" height="15.0" fill="rgb(233,119,36)" rx="2" ry="2" />
<text  x="669.89" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="64.4" y="293" width="0.5" height="15.0" fill="rgb(216,110,51)" rx="2" ry="2" />
<text  x="67.42" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="448.5" y="277" width="0.3" height="15.0" fill="rgb(216,220,27)" rx="2" ry="2" />
<text  x="451.53" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="612.0" y="389" width="0.2" height="15.0" fill="rgb(240,161,2)" rx="2" ry="2" />
<text  x="615.02" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="871.0" y="261" width="0.2" height="15.0" fill="rgb(209,159,13)" rx="2" ry="2" />
<text  x="873.96" y="271.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (33 samples, 0.63%)</title><rect x="508.4" y="245" width="7.5" height="15.0" fill="rgb(230,113,50)" rx="2" ry="2" />
<text  x="511.39" y="255.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::do_put (1 samples, 0.02%)</title><rect x="87.3" y="341" width="0.2" height="15.0" fill="rgb(236,189,18)" rx="2" ry="2" />
<text  x="90.32" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%)</title><rect x="1086.6" y="373" width="1.4" height="15.0" fill="rgb(209,130,52)" rx="2" ry="2" />
<text  x="1089.60" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="89.8" y="517" width="0.2" height="15.0" fill="rgb(243,170,39)" rx="2" ry="2" />
<text  x="92.82" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%)</title><rect x="748.3" y="373" width="0.2" height="15.0" fill="rgb(205,36,7)" rx="2" ry="2" />
<text  x="751.29" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_table_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="70.8" y="373" width="0.2" height="15.0" fill="rgb(235,119,24)" rx="2" ry="2" />
<text  x="73.77" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="561.2" y="341" width="0.3" height="15.0" fill="rgb(248,5,24)" rx="2" ry="2" />
<text  x="564.23" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="631.5" y="437" width="0.2" height="15.0" fill="rgb(240,64,7)" rx="2" ry="2" />
<text  x="634.52" y="447.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.85%)</title><rect x="1179.6" y="629" width="9.9" height="15.0" fill="rgb(215,208,26)" rx="2" ry="2" />
<text  x="1182.57" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="288.7" y="213" width="0.9" height="15.0" fill="rgb(220,99,9)" rx="2" ry="2" />
<text  x="291.67" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.31%)</title><rect x="571.0" y="325" width="3.6" height="15.0" fill="rgb(219,75,52)" rx="2" ry="2" />
<text  x="573.98" y="335.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%)</title><rect x="699.8" y="485" width="0.2" height="15.0" fill="rgb(239,222,48)" rx="2" ry="2" />
<text  x="702.77" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="84.1" y="469" width="0.3" height="15.0" fill="rgb(217,176,36)" rx="2" ry="2" />
<text  x="87.15" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.08%)</title><rect x="343.3" y="293" width="0.9" height="15.0" fill="rgb(209,187,22)" rx="2" ry="2" />
<text  x="346.32" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="453" width="0.5" height="15.0" fill="rgb(217,146,9)" rx="2" ry="2" />
<text  x="701.41" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="213.4" y="197" width="0.7" height="15.0" fill="rgb(252,210,26)" rx="2" ry="2" />
<text  x="216.39" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="870.5" y="213" width="0.2" height="15.0" fill="rgb(208,168,43)" rx="2" ry="2" />
<text  x="873.51" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="598.6" y="341" width="0.3" height="15.0" fill="rgb(222,189,31)" rx="2" ry="2" />
<text  x="601.64" y="351.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (3 samples, 0.06%)</title><rect x="114.8" y="357" width="0.6" height="15.0" fill="rgb(207,205,29)" rx="2" ry="2" />
<text  x="117.76" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="651.5" y="469" width="0.2" height="15.0" fill="rgb(242,17,35)" rx="2" ry="2" />
<text  x="654.47" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::init_scheduling_group (1 samples, 0.02%)</title><rect x="117.0" y="437" width="0.3" height="15.0" fill="rgb(211,23,26)" rx="2" ry="2" />
<text  x="120.03" y="447.5" ></text>
</g>
<g >
<title>perf_simple_que (5,204 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(206,215,4)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%)</title><rect x="1078.0" y="277" width="0.2" height="15.0" fill="rgb(234,15,39)" rx="2" ry="2" />
<text  x="1080.99" y="287.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.2" y="213" width="0.2" height="15.0" fill="rgb(244,128,41)" rx="2" ry="2" />
<text  x="35.22" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="605.4" y="357" width="0.3" height="15.0" fill="rgb(228,99,8)" rx="2" ry="2" />
<text  x="608.44" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (9 samples, 0.17%)</title><rect x="1024.2" y="165" width="2.1" height="15.0" fill="rgb(248,148,44)" rx="2" ry="2" />
<text  x="1027.25" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (42 samples, 0.81%)</title><rect x="586.8" y="309" width="9.6" height="15.0" fill="rgb(232,99,3)" rx="2" ry="2" />
<text  x="589.85" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%)</title><rect x="1037.9" y="277" width="0.9" height="15.0" fill="rgb(252,229,17)" rx="2" ry="2" />
<text  x="1040.85" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (188 samples, 3.61%)</title><rect x="225.9" y="181" width="42.6" height="15.0" fill="rgb(242,116,54)" rx="2" ry="2" />
<text  x="228.86" y="191.5" >muta..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="665.3" y="421" width="0.7" height="15.0" fill="rgb(246,55,10)" rx="2" ry="2" />
<text  x="668.30" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="305.0" y="261" width="0.2" height="15.0" fill="rgb(238,5,36)" rx="2" ry="2" />
<text  x="308.00" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (164 samples, 3.15%)</title><rect x="1044.4" y="357" width="37.2" height="15.0" fill="rgb(217,106,7)" rx="2" ry="2" />
<text  x="1047.43" y="367.5" >ser..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="639.7" y="389" width="0.2" height="15.0" fill="rgb(227,48,33)" rx="2" ry="2" />
<text  x="642.68" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (1 samples, 0.02%)</title><rect x="958.5" y="389" width="0.2" height="15.0" fill="rgb(236,42,34)" rx="2" ry="2" />
<text  x="961.49" y="399.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (3 samples, 0.06%)</title><rect x="77.6" y="373" width="0.7" height="15.0" fill="rgb(212,115,27)" rx="2" ry="2" />
<text  x="80.57" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="734.5" y="405" width="0.2" height="15.0" fill="rgb(235,24,18)" rx="2" ry="2" />
<text  x="737.46" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="115.0" y="229" width="0.2" height="15.0" fill="rgb(246,64,24)" rx="2" ry="2" />
<text  x="117.98" y="239.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="361.7" y="181" width="0.2" height="15.0" fill="rgb(207,122,18)" rx="2" ry="2" />
<text  x="364.69" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.21%)</title><rect x="1160.5" y="485" width="2.5" height="15.0" fill="rgb(250,94,40)" rx="2" ry="2" />
<text  x="1163.52" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.10%)</title><rect x="56.0" y="149" width="1.2" height="15.0" fill="rgb(211,146,29)" rx="2" ry="2" />
<text  x="59.03" y="159.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="82.6" y="325" width="0.2" height="15.0" fill="rgb(230,17,24)" rx="2" ry="2" />
<text  x="85.56" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="729.7" y="453" width="0.2" height="15.0" fill="rgb(212,33,54)" rx="2" ry="2" />
<text  x="732.70" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="70.1" y="357" width="0.2" height="15.0" fill="rgb(232,187,26)" rx="2" ry="2" />
<text  x="73.09" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%)</title><rect x="27.9" y="293" width="0.2" height="15.0" fill="rgb(222,106,20)" rx="2" ry="2" />
<text  x="30.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="54.9" y="261" width="0.2" height="15.0" fill="rgb(212,80,28)" rx="2" ry="2" />
<text  x="57.90" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (1 samples, 0.02%)</title><rect x="1189.5" y="629" width="0.3" height="15.0" fill="rgb(225,200,44)" rx="2" ry="2" />
<text  x="1192.55" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (59 samples, 1.13%)</title><rect x="708.2" y="501" width="13.3" height="15.0" fill="rgb(225,90,13)" rx="2" ry="2" />
<text  x="711.16" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="1106.3" y="421" width="0.7" height="15.0" fill="rgb(226,36,4)" rx="2" ry="2" />
<text  x="1109.33" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="88.0" y="549" width="0.2" height="15.0" fill="rgb(216,174,4)" rx="2" ry="2" />
<text  x="91.00" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="87.8" y="133" width="0.2" height="15.0" fill="rgb(214,199,22)" rx="2" ry="2" />
<text  x="90.77" y="143.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%)</title><rect x="700.0" y="261" width="0.2" height="15.0" fill="rgb(252,56,23)" rx="2" ry="2" />
<text  x="703.00" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="664.2" y="421" width="0.9" height="15.0" fill="rgb(235,139,32)" rx="2" ry="2" />
<text  x="667.17" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="748.5" y="373" width="1.4" height="15.0" fill="rgb(220,140,25)" rx="2" ry="2" />
<text  x="751.52" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="47.6" y="325" width="0.7" height="15.0" fill="rgb(232,156,2)" rx="2" ry="2" />
<text  x="50.64" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="68.0" y="69" width="0.3" height="15.0" fill="rgb(221,222,7)" rx="2" ry="2" />
<text  x="71.05" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="810.2" y="245" width="0.2" height="15.0" fill="rgb(237,196,29)" rx="2" ry="2" />
<text  x="813.20" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (458 samples, 8.80%)</title><rect x="458.7" y="373" width="103.9" height="15.0" fill="rgb(238,28,34)" rx="2" ry="2" />
<text  x="461.74" y="383.5" >std::_Functi..</text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (14 samples, 0.27%)</title><rect x="868.5" y="389" width="3.1" height="15.0" fill="rgb(209,208,26)" rx="2" ry="2" />
<text  x="871.47" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (2 samples, 0.04%)</title><rect x="789.8" y="293" width="0.4" height="15.0" fill="rgb(246,23,52)" rx="2" ry="2" />
<text  x="792.79" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="612.5" y="405" width="0.9" height="15.0" fill="rgb(218,67,7)" rx="2" ry="2" />
<text  x="615.47" y="415.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="45.6" y="325" width="0.2" height="15.0" fill="rgb(205,143,31)" rx="2" ry="2" />
<text  x="48.60" y="335.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="113.6" y="341" width="0.3" height="15.0" fill="rgb(233,224,33)" rx="2" ry="2" />
<text  x="116.62" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="27.9" y="325" width="0.2" height="15.0" fill="rgb(254,63,44)" rx="2" ry="2" />
<text  x="30.91" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="27.9" y="309" width="0.2" height="15.0" fill="rgb(247,196,28)" rx="2" ry="2" />
<text  x="30.91" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="52.4" y="197" width="0.2" height="15.0" fill="rgb(227,3,30)" rx="2" ry="2" />
<text  x="55.40" y="207.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="23.6" y="533" width="0.2" height="15.0" fill="rgb(206,102,17)" rx="2" ry="2" />
<text  x="26.60" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="428.4" y="165" width="0.2" height="15.0" fill="rgb(248,96,29)" rx="2" ry="2" />
<text  x="431.35" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="583.9" y="309" width="0.5" height="15.0" fill="rgb(220,184,6)" rx="2" ry="2" />
<text  x="586.90" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.12%)</title><rect x="287.3" y="181" width="1.4" height="15.0" fill="rgb(251,156,19)" rx="2" ry="2" />
<text  x="290.31" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (12 samples, 0.23%)</title><rect x="938.5" y="373" width="2.8" height="15.0" fill="rgb(213,216,54)" rx="2" ry="2" />
<text  x="941.54" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4 samples, 0.08%)</title><rect x="1156.0" y="453" width="0.9" height="15.0" fill="rgb(222,223,23)" rx="2" ry="2" />
<text  x="1158.99" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (8 samples, 0.15%)</title><rect x="592.3" y="277" width="1.8" height="15.0" fill="rgb(206,185,16)" rx="2" ry="2" />
<text  x="595.29" y="287.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (8 samples, 0.15%)</title><rect x="1135.6" y="181" width="1.8" height="15.0" fill="rgb(230,32,28)" rx="2" ry="2" />
<text  x="1138.58" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3 samples, 0.06%)</title><rect x="79.8" y="357" width="0.7" height="15.0" fill="rgb(209,118,21)" rx="2" ry="2" />
<text  x="82.84" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (8 samples, 0.15%)</title><rect x="55.3" y="213" width="1.9" height="15.0" fill="rgb(234,167,38)" rx="2" ry="2" />
<text  x="58.35" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (2 samples, 0.04%)</title><rect x="698.4" y="485" width="0.5" height="15.0" fill="rgb(240,47,30)" rx="2" ry="2" />
<text  x="701.41" y="495.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1032.4" y="245" width="0.2" height="15.0" fill="rgb(241,101,23)" rx="2" ry="2" />
<text  x="1035.41" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="339.9" y="293" width="0.2" height="15.0" fill="rgb(251,143,17)" rx="2" ry="2" />
<text  x="342.92" y="303.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.6" y="261" width="0.2" height="15.0" fill="rgb(210,52,1)" rx="2" ry="2" />
<text  x="38.62" y="271.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="833.8" y="421" width="0.2" height="15.0" fill="rgb(243,96,8)" rx="2" ry="2" />
<text  x="836.78" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="373.0" y="165" width="0.3" height="15.0" fill="rgb(228,128,8)" rx="2" ry="2" />
<text  x="376.02" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="699.8" y="469" width="0.2" height="15.0" fill="rgb(235,28,14)" rx="2" ry="2" />
<text  x="702.77" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="640.8" y="437" width="0.2" height="15.0" fill="rgb(238,177,17)" rx="2" ry="2" />
<text  x="643.81" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (10 samples, 0.19%)</title><rect x="923.1" y="389" width="2.3" height="15.0" fill="rgb(245,67,38)" rx="2" ry="2" />
<text  x="926.12" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%)</title><rect x="599.3" y="373" width="0.9" height="15.0" fill="rgb(234,138,54)" rx="2" ry="2" />
<text  x="602.32" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (14 samples, 0.27%)</title><rect x="842.8" y="421" width="3.2" height="15.0" fill="rgb(217,180,50)" rx="2" ry="2" />
<text  x="845.85" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="52.2" y="277" width="0.2" height="15.0" fill="rgb(245,99,51)" rx="2" ry="2" />
<text  x="55.18" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="281.9" y="181" width="0.4" height="15.0" fill="rgb(225,173,28)" rx="2" ry="2" />
<text  x="284.87" y="191.5" ></text>
</g>
<g >
<title>distributed_loader::init_non_system_keyspaces (1 samples, 0.02%)</title><rect x="87.8" y="485" width="0.2" height="15.0" fill="rgb(247,12,5)" rx="2" ry="2" />
<text  x="90.77" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.10%)</title><rect x="22.2" y="565" width="1.2" height="15.0" fill="rgb(225,159,52)" rx="2" ry="2" />
<text  x="25.24" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="43.8" y="261" width="0.2" height="15.0" fill="rgb(223,203,2)" rx="2" ry="2" />
<text  x="46.79" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="835.4" y="405" width="0.6" height="15.0" fill="rgb(208,4,17)" rx="2" ry="2" />
<text  x="838.37" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (72 samples, 1.38%)</title><rect x="1062.1" y="325" width="16.3" height="15.0" fill="rgb(252,51,26)" rx="2" ry="2" />
<text  x="1065.11" y="335.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1169.8" y="629" width="0.9" height="15.0" fill="rgb(205,48,45)" rx="2" ry="2" />
<text  x="1172.82" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="51.7" y="213" width="0.5" height="15.0" fill="rgb(221,81,21)" rx="2" ry="2" />
<text  x="54.72" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (29 samples, 0.56%)</title><rect x="800.0" y="181" width="6.6" height="15.0" fill="rgb(245,147,37)" rx="2" ry="2" />
<text  x="802.99" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="54.4" y="181" width="0.5" height="15.0" fill="rgb(230,158,16)" rx="2" ry="2" />
<text  x="57.44" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="12.3" y="341" width="0.4" height="15.0" fill="rgb(247,214,17)" rx="2" ry="2" />
<text  x="15.27" y="351.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%)</title><rect x="1136.0" y="149" width="0.9" height="15.0" fill="rgb(234,44,2)" rx="2" ry="2" />
<text  x="1139.03" y="159.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.17%)</title><rect x="866.0" y="389" width="2.0" height="15.0" fill="rgb(226,145,31)" rx="2" ry="2" />
<text  x="868.98" y="399.5" ></text>
</g>
<g >
<title>query::result::builder::builder (14 samples, 0.27%)</title><rect x="619.0" y="421" width="3.2" height="15.0" fill="rgb(239,115,12)" rx="2" ry="2" />
<text  x="622.05" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1086.6" y="357" width="0.2" height="15.0" fill="rgb(218,140,39)" rx="2" ry="2" />
<text  x="1089.60" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (2 samples, 0.04%)</title><rect x="868.0" y="389" width="0.5" height="15.0" fill="rgb(205,109,46)" rx="2" ry="2" />
<text  x="871.02" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1043.5" y="277" width="0.2" height="15.0" fill="rgb(215,100,40)" rx="2" ry="2" />
<text  x="1046.52" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%)</title><rect x="691.6" y="453" width="0.9" height="15.0" fill="rgb(252,58,49)" rx="2" ry="2" />
<text  x="694.61" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="62.2" y="117" width="0.6" height="15.0" fill="rgb(225,74,11)" rx="2" ry="2" />
<text  x="65.15" y="127.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%)</title><rect x="725.6" y="485" width="0.5" height="15.0" fill="rgb(220,90,25)" rx="2" ry="2" />
<text  x="728.62" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="197" width="0.2" height="15.0" fill="rgb(215,31,54)" rx="2" ry="2" />
<text  x="64.02" y="207.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="217.2" y="229" width="0.5" height="15.0" fill="rgb(244,200,29)" rx="2" ry="2" />
<text  x="220.25" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="51.5" y="309" width="0.7" height="15.0" fill="rgb(249,74,23)" rx="2" ry="2" />
<text  x="54.50" y="319.5" ></text>
</g>
<g >
<title>hwloc_bitmap_first (1 samples, 0.02%)</title><rect x="1179.3" y="629" width="0.3" height="15.0" fill="rgb(206,83,6)" rx="2" ry="2" />
<text  x="1182.34" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (18 samples, 0.35%)</title><rect x="992.7" y="309" width="4.1" height="15.0" fill="rgb(221,159,48)" rx="2" ry="2" />
<text  x="995.73" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1152.1" y="453" width="0.3" height="15.0" fill="rgb(222,102,30)" rx="2" ry="2" />
<text  x="1155.13" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%)</title><rect x="754.2" y="293" width="0.7" height="15.0" fill="rgb(210,185,45)" rx="2" ry="2" />
<text  x="757.19" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1138.1" y="197" width="0.2" height="15.0" fill="rgb(243,205,24)" rx="2" ry="2" />
<text  x="1141.07" y="207.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="23.8" y="517" width="0.3" height="15.0" fill="rgb(248,39,48)" rx="2" ry="2" />
<text  x="26.83" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%)</title><rect x="188.9" y="277" width="0.7" height="15.0" fill="rgb(225,111,22)" rx="2" ry="2" />
<text  x="191.90" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1150.3" y="437" width="0.2" height="15.0" fill="rgb(207,93,18)" rx="2" ry="2" />
<text  x="1153.32" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="604.3" y="325" width="0.7" height="15.0" fill="rgb(241,52,52)" rx="2" ry="2" />
<text  x="607.31" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%)</title><rect x="284.4" y="245" width="0.6" height="15.0" fill="rgb(242,28,18)" rx="2" ry="2" />
<text  x="287.37" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="120.7" y="485" width="0.2" height="15.0" fill="rgb(241,221,8)" rx="2" ry="2" />
<text  x="123.65" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="867.6" y="341" width="0.4" height="15.0" fill="rgb(227,201,37)" rx="2" ry="2" />
<text  x="870.56" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="964.4" y="373" width="0.2" height="15.0" fill="rgb(221,225,14)" rx="2" ry="2" />
<text  x="967.39" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="1143.5" y="485" width="0.5" height="15.0" fill="rgb(219,0,9)" rx="2" ry="2" />
<text  x="1146.52" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (16 samples, 0.31%)</title><rect x="1175.5" y="613" width="3.6" height="15.0" fill="rgb(209,17,35)" rx="2" ry="2" />
<text  x="1178.49" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="108.0" y="469" width="0.2" height="15.0" fill="rgb(207,134,32)" rx="2" ry="2" />
<text  x="110.96" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="490.7" y="293" width="0.5" height="15.0" fill="rgb(229,122,39)" rx="2" ry="2" />
<text  x="493.71" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="453.5" y="341" width="0.5" height="15.0" fill="rgb(237,221,24)" rx="2" ry="2" />
<text  x="456.52" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::with_merge_lock (1 samples, 0.02%)</title><rect x="23.6" y="437" width="0.2" height="15.0" fill="rgb(244,151,35)" rx="2" ry="2" />
<text  x="26.60" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="121.8" y="469" width="0.2" height="15.0" fill="rgb(239,142,22)" rx="2" ry="2" />
<text  x="124.79" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="853.5" y="325" width="0.5" height="15.0" fill="rgb(241,54,22)" rx="2" ry="2" />
<text  x="856.50" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="405" width="0.5" height="15.0" fill="rgb(217,26,8)" rx="2" ry="2" />
<text  x="701.41" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (3 samples, 0.06%)</title><rect x="623.8" y="437" width="0.7" height="15.0" fill="rgb(222,68,0)" rx="2" ry="2" />
<text  x="626.81" y="447.5" ></text>
</g>
<g >
<title>database::apply (2 samples, 0.04%)</title><rect x="1134.0" y="165" width="0.4" height="15.0" fill="rgb(233,140,36)" rx="2" ry="2" />
<text  x="1136.99" y="175.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="212.3" y="181" width="1.1" height="15.0" fill="rgb(253,46,42)" rx="2" ry="2" />
<text  x="215.26" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (4 samples, 0.08%)</title><rect x="278.9" y="165" width="0.9" height="15.0" fill="rgb(240,171,7)" rx="2" ry="2" />
<text  x="281.92" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="863.0" y="453" width="0.3" height="15.0" fill="rgb(236,67,42)" rx="2" ry="2" />
<text  x="866.03" y="463.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="698.4" y="261" width="0.2" height="15.0" fill="rgb(218,70,32)" rx="2" ry="2" />
<text  x="701.41" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%)</title><rect x="81.2" y="405" width="0.2" height="15.0" fill="rgb(251,172,9)" rx="2" ry="2" />
<text  x="84.20" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.7" y="277" width="0.2" height="15.0" fill="rgb(241,122,20)" rx="2" ry="2" />
<text  x="62.66" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="113.9" y="437" width="0.2" height="15.0" fill="rgb(247,150,12)" rx="2" ry="2" />
<text  x="116.85" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (288 samples, 5.53%)</title><rect x="22.0" y="597" width="65.3" height="15.0" fill="rgb(225,0,27)" rx="2" ry="2" />
<text  x="25.02" y="607.5" >seastar..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1026.5" y="181" width="0.2" height="15.0" fill="rgb(208,14,38)" rx="2" ry="2" />
<text  x="1029.51" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="69.9" y="325" width="0.2" height="15.0" fill="rgb(252,83,54)" rx="2" ry="2" />
<text  x="72.86" y="335.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="24.1" y="517" width="0.2" height="15.0" fill="rgb(211,50,20)" rx="2" ry="2" />
<text  x="27.06" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="49.0" y="165" width="0.2" height="15.0" fill="rgb(241,75,24)" rx="2" ry="2" />
<text  x="52.00" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="1138.8" y="485" width="0.2" height="15.0" fill="rgb(240,135,31)" rx="2" ry="2" />
<text  x="1141.75" y="495.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (6 samples, 0.12%)</title><rect x="489.8" y="325" width="1.4" height="15.0" fill="rgb(237,221,25)" rx="2" ry="2" />
<text  x="492.80" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1150.5" y="437" width="0.7" height="15.0" fill="rgb(240,6,13)" rx="2" ry="2" />
<text  x="1153.55" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (1 samples, 0.02%)</title><rect x="619.3" y="389" width="0.2" height="15.0" fill="rgb(236,6,37)" rx="2" ry="2" />
<text  x="622.27" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="718.1" y="437" width="0.3" height="15.0" fill="rgb(246,81,11)" rx="2" ry="2" />
<text  x="721.14" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1086.4" y="373" width="0.2" height="15.0" fill="rgb(229,116,54)" rx="2" ry="2" />
<text  x="1089.38" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (5 samples, 0.10%)</title><rect x="188.5" y="293" width="1.1" height="15.0" fill="rgb(253,175,47)" rx="2" ry="2" />
<text  x="191.45" y="303.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="113.9" y="309" width="0.2" height="15.0" fill="rgb(251,206,11)" rx="2" ry="2" />
<text  x="116.85" y="319.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="113.6" y="373" width="0.3" height="15.0" fill="rgb(212,187,20)" rx="2" ry="2" />
<text  x="116.62" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="46.1" y="357" width="0.9" height="15.0" fill="rgb(206,205,17)" rx="2" ry="2" />
<text  x="49.05" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="928.8" y="325" width="0.9" height="15.0" fill="rgb(242,186,34)" rx="2" ry="2" />
<text  x="931.79" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="69.6" y="373" width="0.3" height="15.0" fill="rgb(239,214,29)" rx="2" ry="2" />
<text  x="72.63" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (1 samples, 0.02%)</title><rect x="49.9" y="357" width="0.2" height="15.0" fill="rgb(217,152,4)" rx="2" ry="2" />
<text  x="52.91" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (14 samples, 0.27%)</title><rect x="1112.0" y="405" width="3.2" height="15.0" fill="rgb(228,122,13)" rx="2" ry="2" />
<text  x="1115.00" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="223.4" y="197" width="0.4" height="15.0" fill="rgb(221,180,16)" rx="2" ry="2" />
<text  x="226.37" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="655.3" y="485" width="0.7" height="15.0" fill="rgb(240,207,29)" rx="2" ry="2" />
<text  x="658.33" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="42.4" y="229" width="0.3" height="15.0" fill="rgb(211,174,4)" rx="2" ry="2" />
<text  x="45.43" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="12.3" y="309" width="0.4" height="15.0" fill="rgb(211,159,18)" rx="2" ry="2" />
<text  x="15.27" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="859.6" y="469" width="0.3" height="15.0" fill="rgb(237,121,0)" rx="2" ry="2" />
<text  x="862.63" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="689.3" y="485" width="0.5" height="15.0" fill="rgb(221,193,27)" rx="2" ry="2" />
<text  x="692.34" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1138.5" y="197" width="0.3" height="15.0" fill="rgb(244,51,39)" rx="2" ry="2" />
<text  x="1141.53" y="207.5" ></text>
</g>
<g >
<title>sstables::write_cell_value&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="13.2" y="309" width="0.2" height="15.0" fill="rgb(210,64,50)" rx="2" ry="2" />
<text  x="16.17" y="319.5" ></text>
</g>
<g >
<title>std::move&lt;cql3::expr::untyped_constant&amp;&gt; (1 samples, 0.02%)</title><rect x="64.0" y="293" width="0.2" height="15.0" fill="rgb(237,32,1)" rx="2" ry="2" />
<text  x="66.97" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (10 samples, 0.19%)</title><rect x="1098.8" y="405" width="2.3" height="15.0" fill="rgb(234,143,5)" rx="2" ry="2" />
<text  x="1101.85" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="607.9" y="389" width="0.3" height="15.0" fill="rgb(232,68,43)" rx="2" ry="2" />
<text  x="610.94" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="732.4" y="453" width="0.2" height="15.0" fill="rgb(240,16,6)" rx="2" ry="2" />
<text  x="735.42" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (9 samples, 0.17%)</title><rect x="30.6" y="293" width="2.1" height="15.0" fill="rgb(210,157,1)" rx="2" ry="2" />
<text  x="33.63" y="303.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="698.4" y="245" width="0.2" height="15.0" fill="rgb(226,172,52)" rx="2" ry="2" />
<text  x="701.41" y="255.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="750.1" y="373" width="0.2" height="15.0" fill="rgb(250,107,33)" rx="2" ry="2" />
<text  x="753.11" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.5" y="213" width="0.2" height="15.0" fill="rgb(227,97,50)" rx="2" ry="2" />
<text  x="88.51" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="114.1" y="469" width="0.2" height="15.0" fill="rgb(240,141,37)" rx="2" ry="2" />
<text  x="117.08" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="192.8" y="261" width="0.2" height="15.0" fill="rgb(233,138,19)" rx="2" ry="2" />
<text  x="195.76" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints (1 samples, 0.02%)</title><rect x="1132.9" y="261" width="0.2" height="15.0" fill="rgb(242,227,39)" rx="2" ry="2" />
<text  x="1135.86" y="271.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="33.1" y="277" width="0.3" height="15.0" fill="rgb(216,103,34)" rx="2" ry="2" />
<text  x="36.13" y="287.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%)</title><rect x="1079.1" y="325" width="0.2" height="15.0" fill="rgb(216,108,4)" rx="2" ry="2" />
<text  x="1082.12" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1027.0" y="197" width="0.2" height="15.0" fill="rgb(219,11,3)" rx="2" ry="2" />
<text  x="1029.97" y="207.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (18 samples, 0.35%)</title><rect x="987.7" y="309" width="4.1" height="15.0" fill="rgb(234,205,48)" rx="2" ry="2" />
<text  x="990.74" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="46.1" y="309" width="0.9" height="15.0" fill="rgb(206,152,47)" rx="2" ry="2" />
<text  x="49.05" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="307.5" y="293" width="0.2" height="15.0" fill="rgb(210,217,46)" rx="2" ry="2" />
<text  x="310.49" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="160.8" y="421" width="1.1" height="15.0" fill="rgb(250,219,39)" rx="2" ry="2" />
<text  x="163.79" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="1043.5" y="293" width="0.2" height="15.0" fill="rgb(210,66,49)" rx="2" ry="2" />
<text  x="1046.52" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1090.7" y="389" width="0.4" height="15.0" fill="rgb(221,26,29)" rx="2" ry="2" />
<text  x="1093.68" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="671.9" y="485" width="0.7" height="15.0" fill="rgb(228,160,28)" rx="2" ry="2" />
<text  x="674.88" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (12 samples, 0.23%)</title><rect x="613.4" y="405" width="2.7" height="15.0" fill="rgb(227,158,1)" rx="2" ry="2" />
<text  x="616.38" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="54.2" y="277" width="0.7" height="15.0" fill="rgb(247,111,35)" rx="2" ry="2" />
<text  x="57.22" y="287.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1136.0" y="85" width="0.3" height="15.0" fill="rgb(230,65,11)" rx="2" ry="2" />
<text  x="1139.03" y="95.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1099.5" y="373" width="0.5" height="15.0" fill="rgb(241,77,10)" rx="2" ry="2" />
<text  x="1102.53" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonTokenStream (1 samples, 0.02%)</title><rect x="26.1" y="437" width="0.2" height="15.0" fill="rgb(210,187,40)" rx="2" ry="2" />
<text  x="29.10" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="114.1" y="421" width="0.2" height="15.0" fill="rgb(211,124,30)" rx="2" ry="2" />
<text  x="117.08" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="659.4" y="309" width="0.2" height="15.0" fill="rgb(225,134,11)" rx="2" ry="2" />
<text  x="662.41" y="319.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="100.9" y="469" width="0.9" height="15.0" fill="rgb(231,38,30)" rx="2" ry="2" />
<text  x="103.93" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (10 samples, 0.19%)</title><rect x="824.3" y="341" width="2.2" height="15.0" fill="rgb(253,208,38)" rx="2" ry="2" />
<text  x="827.25" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="52.9" y="261" width="0.4" height="15.0" fill="rgb(220,150,44)" rx="2" ry="2" />
<text  x="55.86" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="62.4" y="37" width="0.2" height="15.0" fill="rgb(218,134,34)" rx="2" ry="2" />
<text  x="65.38" y="47.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="87.3" y="597" width="0.2" height="15.0" fill="rgb(253,227,8)" rx="2" ry="2" />
<text  x="90.32" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (3 samples, 0.06%)</title><rect x="132.7" y="437" width="0.7" height="15.0" fill="rgb(244,45,18)" rx="2" ry="2" />
<text  x="135.67" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (1 samples, 0.02%)</title><rect x="198.9" y="245" width="0.2" height="15.0" fill="rgb(238,97,3)" rx="2" ry="2" />
<text  x="201.88" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%)</title><rect x="535.4" y="213" width="0.4" height="15.0" fill="rgb(215,3,10)" rx="2" ry="2" />
<text  x="538.38" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="796.4" y="133" width="0.6" height="15.0" fill="rgb(224,100,43)" rx="2" ry="2" />
<text  x="799.36" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="975.5" y="309" width="1.1" height="15.0" fill="rgb(241,140,33)" rx="2" ry="2" />
<text  x="978.50" y="319.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%)</title><rect x="1127.0" y="181" width="0.6" height="15.0" fill="rgb(232,63,23)" rx="2" ry="2" />
<text  x="1129.96" y="191.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="164.0" y="389" width="0.6" height="15.0" fill="rgb(247,222,33)" rx="2" ry="2" />
<text  x="166.96" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="47.6" y="229" width="0.7" height="15.0" fill="rgb(241,159,3)" rx="2" ry="2" />
<text  x="50.64" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.4" y="181" width="0.2" height="15.0" fill="rgb(250,128,1)" rx="2" ry="2" />
<text  x="53.36" y="191.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="116.1" y="389" width="0.2" height="15.0" fill="rgb(219,59,27)" rx="2" ry="2" />
<text  x="119.12" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="48.1" y="149" width="0.2" height="15.0" fill="rgb(213,53,48)" rx="2" ry="2" />
<text  x="51.09" y="159.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="819.0" y="325" width="0.3" height="15.0" fill="rgb(230,126,8)" rx="2" ry="2" />
<text  x="822.04" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (3 samples, 0.06%)</title><rect x="430.8" y="229" width="0.7" height="15.0" fill="rgb(234,52,37)" rx="2" ry="2" />
<text  x="433.85" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="859.4" y="469" width="0.2" height="15.0" fill="rgb(214,131,33)" rx="2" ry="2" />
<text  x="862.40" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="648.8" y="469" width="0.2" height="15.0" fill="rgb(235,166,24)" rx="2" ry="2" />
<text  x="651.75" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (10 samples, 0.19%)</title><rect x="359.4" y="181" width="2.3" height="15.0" fill="rgb(250,164,9)" rx="2" ry="2" />
<text  x="362.42" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1114.7" y="373" width="0.2" height="15.0" fill="rgb(235,191,27)" rx="2" ry="2" />
<text  x="1117.72" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="869.6" y="245" width="0.5" height="15.0" fill="rgb(222,27,13)" rx="2" ry="2" />
<text  x="872.60" y="255.5" ></text>
</g>
<g >
<title>seastar::file_impl::write_dma (1 samples, 0.02%)</title><rect x="87.3" y="309" width="0.2" height="15.0" fill="rgb(245,138,28)" rx="2" ry="2" />
<text  x="90.32" y="319.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.10%)</title><rect x="413.4" y="181" width="1.1" height="15.0" fill="rgb(229,39,35)" rx="2" ry="2" />
<text  x="416.39" y="191.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="53.3" y="325" width="0.2" height="15.0" fill="rgb(233,129,53)" rx="2" ry="2" />
<text  x="56.31" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="615.2" y="373" width="0.2" height="15.0" fill="rgb(254,127,2)" rx="2" ry="2" />
<text  x="618.19" y="383.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="27.2" y="389" width="0.3" height="15.0" fill="rgb(218,15,33)" rx="2" ry="2" />
<text  x="30.23" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="698.9" y="325" width="0.2" height="15.0" fill="rgb(249,159,48)" rx="2" ry="2" />
<text  x="701.86" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="659.2" y="389" width="0.4" height="15.0" fill="rgb(249,54,54)" rx="2" ry="2" />
<text  x="662.18" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (4 samples, 0.08%)</title><rect x="58.5" y="309" width="0.9" height="15.0" fill="rgb(208,183,32)" rx="2" ry="2" />
<text  x="61.52" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (505 samples, 9.70%)</title><rect x="336.5" y="325" width="114.5" height="15.0" fill="rgb(225,198,51)" rx="2" ry="2" />
<text  x="339.52" y="335.5" >seastar::inter..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="864.4" y="437" width="0.2" height="15.0" fill="rgb(235,1,38)" rx="2" ry="2" />
<text  x="867.39" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="980.5" y="277" width="1.8" height="15.0" fill="rgb(228,128,41)" rx="2" ry="2" />
<text  x="983.48" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="605.2" y="357" width="0.2" height="15.0" fill="rgb(241,96,1)" rx="2" ry="2" />
<text  x="608.22" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="853.3" y="341" width="0.7" height="15.0" fill="rgb(239,54,7)" rx="2" ry="2" />
<text  x="856.28" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.2" y="213" width="0.2" height="15.0" fill="rgb(220,62,25)" rx="2" ry="2" />
<text  x="55.18" y="223.5" ></text>
</g>
<g >
<title>service::client_state::has_access (186 samples, 3.57%)</title><rect x="777.1" y="373" width="42.2" height="15.0" fill="rgb(216,87,15)" rx="2" ry="2" />
<text  x="780.09" y="383.5" >ser..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="76.2" y="341" width="0.2" height="15.0" fill="rgb(241,161,45)" rx="2" ry="2" />
<text  x="79.21" y="351.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="17.9" y="581" width="0.5" height="15.0" fill="rgb(223,208,37)" rx="2" ry="2" />
<text  x="20.94" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (10 samples, 0.19%)</title><rect x="84.4" y="485" width="2.2" height="15.0" fill="rgb(239,47,22)" rx="2" ry="2" />
<text  x="87.37" y="495.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="116.3" y="357" width="0.3" height="15.0" fill="rgb(248,98,52)" rx="2" ry="2" />
<text  x="119.35" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="448.8" y="293" width="2.0" height="15.0" fill="rgb(235,184,9)" rx="2" ry="2" />
<text  x="451.76" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="431.5" y="229" width="0.3" height="15.0" fill="rgb(244,96,28)" rx="2" ry="2" />
<text  x="434.53" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="707.3" y="469" width="0.4" height="15.0" fill="rgb(249,159,8)" rx="2" ry="2" />
<text  x="710.25" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="588.0" y="293" width="0.2" height="15.0" fill="rgb(248,92,29)" rx="2" ry="2" />
<text  x="590.98" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (19 samples, 0.37%)</title><rect x="510.2" y="213" width="4.3" height="15.0" fill="rgb(217,62,46)" rx="2" ry="2" />
<text  x="513.21" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (50 samples, 0.96%)</title><rect x="72.8" y="469" width="11.3" height="15.0" fill="rgb(238,105,18)" rx="2" ry="2" />
<text  x="75.81" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1148.5" y="453" width="0.2" height="15.0" fill="rgb(236,208,46)" rx="2" ry="2" />
<text  x="1151.50" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (34 samples, 0.65%)</title><rect x="823.8" y="373" width="7.7" height="15.0" fill="rgb(247,133,47)" rx="2" ry="2" />
<text  x="826.80" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::untyped_constant (1 samples, 0.02%)</title><rect x="67.6" y="293" width="0.2" height="15.0" fill="rgb(234,135,50)" rx="2" ry="2" />
<text  x="70.59" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.10%)</title><rect x="212.3" y="197" width="1.1" height="15.0" fill="rgb(219,111,0)" rx="2" ry="2" />
<text  x="215.26" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="253.3" y="101" width="0.2" height="15.0" fill="rgb(227,126,18)" rx="2" ry="2" />
<text  x="256.30" y="111.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (11 samples, 0.21%)</title><rect x="727.2" y="437" width="2.5" height="15.0" fill="rgb(237,184,10)" rx="2" ry="2" />
<text  x="730.21" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="839.0" y="421" width="0.4" height="15.0" fill="rgb(254,211,26)" rx="2" ry="2" />
<text  x="841.99" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1027.4" y="213" width="0.5" height="15.0" fill="rgb(230,199,1)" rx="2" ry="2" />
<text  x="1030.42" y="223.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="87.8" y="581" width="0.2" height="15.0" fill="rgb(215,150,42)" rx="2" ry="2" />
<text  x="90.77" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="66.9" y="293" width="0.2" height="15.0" fill="rgb(242,229,20)" rx="2" ry="2" />
<text  x="69.91" y="303.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (10 samples, 0.19%)</title><rect x="1127.6" y="245" width="2.3" height="15.0" fill="rgb(243,64,32)" rx="2" ry="2" />
<text  x="1130.64" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (3 samples, 0.06%)</title><rect x="595.0" y="293" width="0.7" height="15.0" fill="rgb(235,186,15)" rx="2" ry="2" />
<text  x="598.01" y="303.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="754.9" y="309" width="0.2" height="15.0" fill="rgb(238,55,23)" rx="2" ry="2" />
<text  x="757.87" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.4" y="277" width="0.2" height="15.0" fill="rgb(212,122,36)" rx="2" ry="2" />
<text  x="48.37" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (2 samples, 0.04%)</title><rect x="475.7" y="277" width="0.5" height="15.0" fill="rgb(233,130,44)" rx="2" ry="2" />
<text  x="478.74" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1022.2" y="165" width="0.5" height="15.0" fill="rgb(207,48,26)" rx="2" ry="2" />
<text  x="1025.21" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.13%)</title><rect x="1123.1" y="421" width="1.6" height="15.0" fill="rgb(245,12,50)" rx="2" ry="2" />
<text  x="1126.11" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="87.3" y="501" width="0.2" height="15.0" fill="rgb(226,83,48)" rx="2" ry="2" />
<text  x="90.32" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="63.1" y="229" width="0.2" height="15.0" fill="rgb(235,0,5)" rx="2" ry="2" />
<text  x="66.06" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="1120.8" y="421" width="0.9" height="15.0" fill="rgb(218,178,38)" rx="2" ry="2" />
<text  x="1123.84" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="755.5" y="277" width="1.0" height="15.0" fill="rgb(229,151,11)" rx="2" ry="2" />
<text  x="758.55" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="687.1" y="453" width="0.2" height="15.0" fill="rgb(233,108,15)" rx="2" ry="2" />
<text  x="690.07" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (3 samples, 0.06%)</title><rect x="977.3" y="357" width="0.7" height="15.0" fill="rgb(223,137,37)" rx="2" ry="2" />
<text  x="980.31" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="202.5" y="261" width="0.5" height="15.0" fill="rgb(253,84,29)" rx="2" ry="2" />
<text  x="205.51" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%)</title><rect x="583.0" y="309" width="0.9" height="15.0" fill="rgb(241,86,41)" rx="2" ry="2" />
<text  x="585.99" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="456.0" y="389" width="0.2" height="15.0" fill="rgb(254,65,38)" rx="2" ry="2" />
<text  x="459.01" y="399.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="10.9" y="357" width="0.2" height="15.0" fill="rgb(234,198,7)" rx="2" ry="2" />
<text  x="13.91" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="659.6" y="437" width="0.9" height="15.0" fill="rgb(230,11,17)" rx="2" ry="2" />
<text  x="662.63" y="447.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (46 samples, 0.88%)</title><rect x="132.4" y="453" width="10.5" height="15.0" fill="rgb(240,198,22)" rx="2" ry="2" />
<text  x="135.44" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%)</title><rect x="115.7" y="405" width="0.4" height="15.0" fill="rgb(240,15,47)" rx="2" ry="2" />
<text  x="118.66" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="863.5" y="501" width="0.7" height="15.0" fill="rgb(212,136,29)" rx="2" ry="2" />
<text  x="866.48" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="117.0" y="293" width="0.3" height="15.0" fill="rgb(205,227,50)" rx="2" ry="2" />
<text  x="120.03" y="303.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.12%)</title><rect x="1135.6" y="165" width="1.3" height="15.0" fill="rgb(236,89,35)" rx="2" ry="2" />
<text  x="1138.58" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%)</title><rect x="1145.1" y="485" width="0.9" height="15.0" fill="rgb(217,37,6)" rx="2" ry="2" />
<text  x="1148.10" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="864.8" y="485" width="0.3" height="15.0" fill="rgb(211,31,51)" rx="2" ry="2" />
<text  x="867.84" y="495.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (3 samples, 0.06%)</title><rect x="868.7" y="293" width="0.7" height="15.0" fill="rgb(246,75,48)" rx="2" ry="2" />
<text  x="871.70" y="303.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="87.8" y="229" width="0.2" height="15.0" fill="rgb(245,121,53)" rx="2" ry="2" />
<text  x="90.77" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="68.3" y="181" width="0.2" height="15.0" fill="rgb(250,34,8)" rx="2" ry="2" />
<text  x="71.27" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (79 samples, 1.52%)</title><rect x="579.6" y="373" width="17.9" height="15.0" fill="rgb(227,96,9)" rx="2" ry="2" />
<text  x="582.59" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="59.0" y="181" width="0.4" height="15.0" fill="rgb(225,206,14)" rx="2" ry="2" />
<text  x="61.98" y="191.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (4 samples, 0.08%)</title><rect x="629.7" y="437" width="0.9" height="15.0" fill="rgb(242,28,52)" rx="2" ry="2" />
<text  x="632.70" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="51.5" y="325" width="0.7" height="15.0" fill="rgb(241,214,45)" rx="2" ry="2" />
<text  x="54.50" y="335.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (59 samples, 1.13%)</title><rect x="1063.7" y="293" width="13.4" height="15.0" fill="rgb(247,138,9)" rx="2" ry="2" />
<text  x="1066.70" y="303.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="86.4" y="453" width="0.2" height="15.0" fill="rgb(207,166,23)" rx="2" ry="2" />
<text  x="89.41" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (8 samples, 0.15%)</title><rect x="1057.8" y="309" width="1.8" height="15.0" fill="rgb(232,225,25)" rx="2" ry="2" />
<text  x="1060.81" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::set_callback (1 samples, 0.02%)</title><rect x="340.4" y="293" width="0.2" height="15.0" fill="rgb(236,53,52)" rx="2" ry="2" />
<text  x="343.37" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="263.3" y="101" width="1.1" height="15.0" fill="rgb(211,35,23)" rx="2" ry="2" />
<text  x="266.28" y="111.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (2 samples, 0.04%)</title><rect x="27.0" y="421" width="0.5" height="15.0" fill="rgb(230,198,20)" rx="2" ry="2" />
<text  x="30.01" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="850.1" y="405" width="0.2" height="15.0" fill="rgb(232,143,46)" rx="2" ry="2" />
<text  x="853.10" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (10 samples, 0.19%)</title><rect x="828.6" y="309" width="2.2" height="15.0" fill="rgb(235,1,30)" rx="2" ry="2" />
<text  x="831.56" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%)</title><rect x="755.1" y="309" width="1.4" height="15.0" fill="rgb(254,147,29)" rx="2" ry="2" />
<text  x="758.10" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="281.9" y="197" width="0.4" height="15.0" fill="rgb(248,223,16)" rx="2" ry="2" />
<text  x="284.87" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (448 samples, 8.61%)</title><rect x="345.6" y="277" width="101.6" height="15.0" fill="rgb(251,145,19)" rx="2" ry="2" />
<text  x="348.59" y="287.5" >flat_mutatio..</text>
</g>
<g >
<title>emptyable&lt;bool&gt;::verify (1 samples, 0.02%)</title><rect x="78.0" y="277" width="0.3" height="15.0" fill="rgb(231,138,36)" rx="2" ry="2" />
<text  x="81.02" y="287.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="557.1" y="277" width="0.3" height="15.0" fill="rgb(206,20,25)" rx="2" ry="2" />
<text  x="560.14" y="287.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (2 samples, 0.04%)</title><rect x="732.0" y="453" width="0.4" height="15.0" fill="rgb(221,104,10)" rx="2" ry="2" />
<text  x="734.97" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="699.1" y="469" width="0.2" height="15.0" fill="rgb(212,39,2)" rx="2" ry="2" />
<text  x="702.09" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (563 samples, 10.82%)</title><rect x="183.0" y="341" width="127.7" height="15.0" fill="rgb(237,221,11)" rx="2" ry="2" />
<text  x="186.01" y="351.5" >mutation_fragmen..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="62.2" y="133" width="0.6" height="15.0" fill="rgb(211,15,15)" rx="2" ry="2" />
<text  x="65.15" y="143.5" ></text>
</g>
<g >
<title>schema_registry::learn (6 samples, 0.12%)</title><rect x="115.7" y="469" width="1.3" height="15.0" fill="rgb(207,50,36)" rx="2" ry="2" />
<text  x="118.66" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="832.0" y="309" width="0.2" height="15.0" fill="rgb(215,165,34)" rx="2" ry="2" />
<text  x="834.96" y="319.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (3 samples, 0.06%)</title><rect x="36.8" y="261" width="0.6" height="15.0" fill="rgb(249,95,16)" rx="2" ry="2" />
<text  x="39.76" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="1084.6" y="341" width="0.4" height="15.0" fill="rgb(215,63,52)" rx="2" ry="2" />
<text  x="1087.56" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.02%)</title><rect x="14.5" y="597" width="0.3" height="15.0" fill="rgb(248,115,15)" rx="2" ry="2" />
<text  x="17.53" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1134.4" y="181" width="0.3" height="15.0" fill="rgb(230,174,17)" rx="2" ry="2" />
<text  x="1137.45" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1166.2" y="421" width="0.2" height="15.0" fill="rgb(212,58,12)" rx="2" ry="2" />
<text  x="1169.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="76.7" y="341" width="0.2" height="15.0" fill="rgb(214,47,16)" rx="2" ry="2" />
<text  x="79.66" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;__gnu_cxx::__normal_iterator&lt;std::unique_ptr&lt;(anonymous namespace)::shard_reader, std::default_delete&lt;(anonymous namespace)::shard_reader&gt; &gt;*, std::vector&lt;std::unique_ptr&lt;(anonymous namespace)::shard_reader, std::default_delete&lt;(anonymous namespace)::shard_reader&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;(anonymous namespace)::shard_reader, std::default_delete&lt;(anonymous namespace)::shard_reader&gt; &gt; &gt; &gt; &gt;, multishard_combining_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="165" width="0.2" height="15.0" fill="rgb(212,59,42)" rx="2" ry="2" />
<text  x="26.60" y="175.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="588.2" y="293" width="2.0" height="15.0" fill="rgb(217,4,46)" rx="2" ry="2" />
<text  x="591.21" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.2" y="565" width="0.3" height="15.0" fill="rgb(243,171,23)" rx="2" ry="2" />
<text  x="13.23" y="575.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (4 samples, 0.08%)</title><rect x="452.6" y="341" width="0.9" height="15.0" fill="rgb(254,83,4)" rx="2" ry="2" />
<text  x="455.61" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="51.7" y="165" width="0.5" height="15.0" fill="rgb(214,79,26)" rx="2" ry="2" />
<text  x="54.72" y="175.5" ></text>
</g>
<g >
<title>cql3::constants::value::value (1 samples, 0.02%)</title><rect x="77.1" y="357" width="0.2" height="15.0" fill="rgb(230,218,6)" rx="2" ry="2" />
<text  x="80.12" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="44.9" y="277" width="0.2" height="15.0" fill="rgb(229,75,38)" rx="2" ry="2" />
<text  x="47.92" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(241,166,24)" rx="2" ry="2" />
<text  x="13.68" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (103 samples, 1.98%)</title><rect x="45.8" y="373" width="23.4" height="15.0" fill="rgb(216,223,19)" rx="2" ry="2" />
<text  x="48.83" y="383.5" >c..</text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (3 samples, 0.06%)</title><rect x="866.4" y="357" width="0.7" height="15.0" fill="rgb(217,74,35)" rx="2" ry="2" />
<text  x="869.43" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="688.4" y="485" width="0.9" height="15.0" fill="rgb(239,25,44)" rx="2" ry="2" />
<text  x="691.43" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="641.0" y="405" width="0.5" height="15.0" fill="rgb(237,29,24)" rx="2" ry="2" />
<text  x="644.04" y="415.5" ></text>
</g>
<g >
<title>table::as_mutation_source (5 samples, 0.10%)</title><rect x="641.0" y="437" width="1.2" height="15.0" fill="rgb(236,54,29)" rx="2" ry="2" />
<text  x="644.04" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="329.0" y="309" width="0.3" height="15.0" fill="rgb(221,119,50)" rx="2" ry="2" />
<text  x="332.04" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (34 samples, 0.65%)</title><rect x="434.7" y="261" width="7.7" height="15.0" fill="rgb(219,175,33)" rx="2" ry="2" />
<text  x="437.70" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1145.6" y="453" width="0.4" height="15.0" fill="rgb(218,136,30)" rx="2" ry="2" />
<text  x="1148.56" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="978.2" y="357" width="0.2" height="15.0" fill="rgb(205,6,47)" rx="2" ry="2" />
<text  x="981.22" y="367.5" ></text>
</g>
<g >
<title>sstables::sstable::write_simple&lt; (1 samples, 0.02%)</title><rect x="88.0" y="421" width="0.2" height="15.0" fill="rgb(248,35,53)" rx="2" ry="2" />
<text  x="91.00" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="364.0" y="197" width="0.2" height="15.0" fill="rgb(246,98,48)" rx="2" ry="2" />
<text  x="366.95" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%)</title><rect x="833.6" y="421" width="0.2" height="15.0" fill="rgb(208,165,17)" rx="2" ry="2" />
<text  x="836.55" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="783.0" y="277" width="0.4" height="15.0" fill="rgb(222,19,16)" rx="2" ry="2" />
<text  x="785.99" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="696.6" y="453" width="0.7" height="15.0" fill="rgb(232,106,36)" rx="2" ry="2" />
<text  x="699.59" y="463.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="993.4" y="261" width="2.0" height="15.0" fill="rgb(236,210,10)" rx="2" ry="2" />
<text  x="996.41" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (17 samples, 0.33%)</title><rect x="937.4" y="405" width="3.9" height="15.0" fill="rgb(249,220,42)" rx="2" ry="2" />
<text  x="940.40" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="372.3" y="165" width="0.3" height="15.0" fill="rgb(210,200,45)" rx="2" ry="2" />
<text  x="375.34" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%)</title><rect x="1132.4" y="389" width="6.4" height="15.0" fill="rgb(212,67,52)" rx="2" ry="2" />
<text  x="1135.41" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%)</title><rect x="1125.1" y="469" width="0.3" height="15.0" fill="rgb(233,148,50)" rx="2" ry="2" />
<text  x="1128.15" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="807.7" y="245" width="0.5" height="15.0" fill="rgb(205,211,32)" rx="2" ry="2" />
<text  x="810.70" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (4 samples, 0.08%)</title><rect x="625.8" y="437" width="1.0" height="15.0" fill="rgb(208,9,47)" rx="2" ry="2" />
<text  x="628.85" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="954.6" y="373" width="0.3" height="15.0" fill="rgb(207,63,11)" rx="2" ry="2" />
<text  x="957.63" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%)</title><rect x="29.3" y="389" width="0.4" height="15.0" fill="rgb(243,113,12)" rx="2" ry="2" />
<text  x="32.27" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (27 samples, 0.52%)</title><rect x="600.2" y="373" width="6.1" height="15.0" fill="rgb(218,24,15)" rx="2" ry="2" />
<text  x="603.23" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (7 samples, 0.13%)</title><rect x="990.2" y="277" width="1.6" height="15.0" fill="rgb(251,136,34)" rx="2" ry="2" />
<text  x="993.23" y="287.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="87.8" y="597" width="0.2" height="15.0" fill="rgb(213,48,19)" rx="2" ry="2" />
<text  x="90.77" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1121.5" y="405" width="0.2" height="15.0" fill="rgb(250,65,48)" rx="2" ry="2" />
<text  x="1124.52" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="863.0" y="501" width="0.3" height="15.0" fill="rgb(232,139,42)" rx="2" ry="2" />
<text  x="866.03" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="864.4" y="421" width="0.2" height="15.0" fill="rgb(239,124,40)" rx="2" ry="2" />
<text  x="867.39" y="431.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (6 samples, 0.12%)</title><rect x="1158.5" y="469" width="1.3" height="15.0" fill="rgb(245,120,7)" rx="2" ry="2" />
<text  x="1161.48" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="83.0" y="373" width="0.2" height="15.0" fill="rgb(212,228,17)" rx="2" ry="2" />
<text  x="86.01" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (7 samples, 0.13%)</title><rect x="801.6" y="149" width="1.6" height="15.0" fill="rgb(216,120,0)" rx="2" ry="2" />
<text  x="804.58" y="159.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="554.7" y="277" width="0.2" height="15.0" fill="rgb(231,88,36)" rx="2" ry="2" />
<text  x="557.65" y="287.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="116.8" y="293" width="0.2" height="15.0" fill="rgb(229,146,24)" rx="2" ry="2" />
<text  x="119.80" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (12 samples, 0.23%)</title><rect x="261.7" y="117" width="2.7" height="15.0" fill="rgb(234,67,49)" rx="2" ry="2" />
<text  x="264.69" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="654.0" y="485" width="0.2" height="15.0" fill="rgb(215,84,54)" rx="2" ry="2" />
<text  x="656.97" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1149.9" y="421" width="0.4" height="15.0" fill="rgb(217,180,22)" rx="2" ry="2" />
<text  x="1152.87" y="431.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (150 samples, 2.88%)</title><rect x="225.9" y="165" width="34.0" height="15.0" fill="rgb(245,208,9)" rx="2" ry="2" />
<text  x="228.86" y="175.5" >cl..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%)</title><rect x="385.7" y="165" width="2.5" height="15.0" fill="rgb(244,138,17)" rx="2" ry="2" />
<text  x="388.72" y="175.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (57 samples, 1.10%)</title><rect x="794.1" y="229" width="12.9" height="15.0" fill="rgb(230,184,5)" rx="2" ry="2" />
<text  x="797.10" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%)</title><rect x="31.5" y="197" width="0.5" height="15.0" fill="rgb(231,25,31)" rx="2" ry="2" />
<text  x="34.54" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="31.3" y="197" width="0.2" height="15.0" fill="rgb(236,207,20)" rx="2" ry="2" />
<text  x="34.31" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="117.0" y="453" width="0.3" height="15.0" fill="rgb(230,51,33)" rx="2" ry="2" />
<text  x="120.03" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="642.4" y="437" width="0.2" height="15.0" fill="rgb(218,137,28)" rx="2" ry="2" />
<text  x="645.40" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1088.2" y="373" width="0.2" height="15.0" fill="rgb(242,1,15)" rx="2" ry="2" />
<text  x="1091.19" y="383.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="1136.0" y="69" width="0.3" height="15.0" fill="rgb(226,18,12)" rx="2" ry="2" />
<text  x="1139.03" y="79.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="1133.1" y="229" width="0.2" height="15.0" fill="rgb(228,70,17)" rx="2" ry="2" />
<text  x="1136.09" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="54.0" y="277" width="0.2" height="15.0" fill="rgb(237,114,54)" rx="2" ry="2" />
<text  x="56.99" y="287.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="268.0" y="165" width="0.3" height="15.0" fill="rgb(210,184,15)" rx="2" ry="2" />
<text  x="271.04" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="922.7" y="373" width="0.2" height="15.0" fill="rgb(215,180,32)" rx="2" ry="2" />
<text  x="925.66" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (3 samples, 0.06%)</title><rect x="1107.7" y="421" width="0.7" height="15.0" fill="rgb(250,98,46)" rx="2" ry="2" />
<text  x="1110.69" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="619.7" y="405" width="0.7" height="15.0" fill="rgb(220,136,54)" rx="2" ry="2" />
<text  x="622.73" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (14 samples, 0.27%)</title><rect x="246.0" y="69" width="3.2" height="15.0" fill="rgb(250,115,23)" rx="2" ry="2" />
<text  x="249.05" y="79.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="663.9" y="453" width="0.3" height="15.0" fill="rgb(210,161,54)" rx="2" ry="2" />
<text  x="666.94" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (7 samples, 0.13%)</title><rect x="923.6" y="373" width="1.6" height="15.0" fill="rgb(208,85,15)" rx="2" ry="2" />
<text  x="926.57" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (8 samples, 0.15%)</title><rect x="1133.1" y="261" width="1.8" height="15.0" fill="rgb(212,54,9)" rx="2" ry="2" />
<text  x="1136.09" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="750.6" y="357" width="0.2" height="15.0" fill="rgb(228,174,29)" rx="2" ry="2" />
<text  x="753.56" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="40.2" y="261" width="0.2" height="15.0" fill="rgb(234,214,17)" rx="2" ry="2" />
<text  x="43.16" y="271.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="142.4" y="421" width="0.2" height="15.0" fill="rgb(234,128,0)" rx="2" ry="2" />
<text  x="145.42" y="431.5" ></text>
</g>
<g >
<title>schema_registry::get (1 samples, 0.02%)</title><rect x="964.2" y="373" width="0.2" height="15.0" fill="rgb(232,199,7)" rx="2" ry="2" />
<text  x="967.16" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="755.5" y="261" width="0.5" height="15.0" fill="rgb(240,193,5)" rx="2" ry="2" />
<text  x="758.55" y="271.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (21 samples, 0.40%)</title><rect x="751.7" y="373" width="4.8" height="15.0" fill="rgb(240,32,30)" rx="2" ry="2" />
<text  x="754.69" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%)</title><rect x="699.1" y="501" width="0.2" height="15.0" fill="rgb(232,44,40)" rx="2" ry="2" />
<text  x="702.09" y="511.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="1005.0" y="277" width="2.9" height="15.0" fill="rgb(252,7,46)" rx="2" ry="2" />
<text  x="1007.97" y="287.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (4 samples, 0.08%)</title><rect x="25.0" y="469" width="0.9" height="15.0" fill="rgb(247,146,19)" rx="2" ry="2" />
<text  x="27.97" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="48.3" y="261" width="1.2" height="15.0" fill="rgb(229,221,10)" rx="2" ry="2" />
<text  x="51.32" y="271.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="597.3" y="325" width="0.2" height="15.0" fill="rgb(224,188,9)" rx="2" ry="2" />
<text  x="600.28" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="698.4" y="309" width="0.2" height="15.0" fill="rgb(237,152,51)" rx="2" ry="2" />
<text  x="701.41" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="865.1" y="453" width="0.2" height="15.0" fill="rgb(214,114,52)" rx="2" ry="2" />
<text  x="868.07" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (90 samples, 1.73%)</title><rect x="790.2" y="293" width="20.4" height="15.0" fill="rgb(212,70,49)" rx="2" ry="2" />
<text  x="793.24" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="480.5" y="261" width="0.2" height="15.0" fill="rgb(254,116,46)" rx="2" ry="2" />
<text  x="483.50" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (20 samples, 0.38%)</title><rect x="827.0" y="341" width="4.5" height="15.0" fill="rgb(221,140,35)" rx="2" ry="2" />
<text  x="829.98" y="351.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="23.8" y="437" width="0.3" height="15.0" fill="rgb(225,184,15)" rx="2" ry="2" />
<text  x="26.83" y="447.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="15.4" y="597" width="0.3" height="15.0" fill="rgb(223,139,0)" rx="2" ry="2" />
<text  x="18.44" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="838.5" y="357" width="0.3" height="15.0" fill="rgb(221,175,4)" rx="2" ry="2" />
<text  x="841.54" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="223.8" y="197" width="0.3" height="15.0" fill="rgb(249,182,42)" rx="2" ry="2" />
<text  x="226.82" y="207.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1154.9" y="437" width="1.1" height="15.0" fill="rgb(239,200,0)" rx="2" ry="2" />
<text  x="1157.85" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="204.6" y="261" width="0.2" height="15.0" fill="rgb(243,31,8)" rx="2" ry="2" />
<text  x="207.55" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="641.9" y="389" width="0.3" height="15.0" fill="rgb(218,130,7)" rx="2" ry="2" />
<text  x="644.95" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (2 samples, 0.04%)</title><rect x="42.9" y="261" width="0.4" height="15.0" fill="rgb(206,103,45)" rx="2" ry="2" />
<text  x="45.88" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%)</title><rect x="26.3" y="421" width="0.3" height="15.0" fill="rgb(242,35,10)" rx="2" ry="2" />
<text  x="29.33" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="786.6" y="293" width="0.2" height="15.0" fill="rgb(239,54,42)" rx="2" ry="2" />
<text  x="789.61" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="700.0" y="197" width="0.2" height="15.0" fill="rgb(244,62,47)" rx="2" ry="2" />
<text  x="703.00" y="207.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="33.4" y="277" width="0.2" height="15.0" fill="rgb(222,227,14)" rx="2" ry="2" />
<text  x="36.36" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="521.1" y="309" width="0.2" height="15.0" fill="rgb(217,129,47)" rx="2" ry="2" />
<text  x="524.09" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="12.0" y="261" width="0.3" height="15.0" fill="rgb(249,41,30)" rx="2" ry="2" />
<text  x="15.04" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;query::result_set_row, std::allocator&lt;query::result_set_row&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="116.6" y="389" width="0.2" height="15.0" fill="rgb(215,156,39)" rx="2" ry="2" />
<text  x="119.57" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%)</title><rect x="50.8" y="341" width="0.5" height="15.0" fill="rgb(232,129,46)" rx="2" ry="2" />
<text  x="53.81" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="114.8" y="389" width="0.6" height="15.0" fill="rgb(253,166,10)" rx="2" ry="2" />
<text  x="117.76" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="14.3" y="517" width="0.2" height="15.0" fill="rgb(216,79,31)" rx="2" ry="2" />
<text  x="17.31" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="100.0" y="485" width="0.5" height="15.0" fill="rgb(232,85,46)" rx="2" ry="2" />
<text  x="103.02" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%)</title><rect x="245.6" y="69" width="0.4" height="15.0" fill="rgb(218,150,48)" rx="2" ry="2" />
<text  x="248.59" y="79.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="156.5" y="437" width="0.2" height="15.0" fill="rgb(221,173,44)" rx="2" ry="2" />
<text  x="159.48" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="893.0" y="405" width="0.2" height="15.0" fill="rgb(230,148,8)" rx="2" ry="2" />
<text  x="895.96" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="267.6" y="165" width="0.4" height="15.0" fill="rgb(232,122,36)" rx="2" ry="2" />
<text  x="270.59" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (71 samples, 1.36%)</title><rect x="525.9" y="293" width="16.1" height="15.0" fill="rgb(215,124,38)" rx="2" ry="2" />
<text  x="528.85" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="115.4" y="501" width="0.3" height="15.0" fill="rgb(235,105,18)" rx="2" ry="2" />
<text  x="118.44" y="511.5" ></text>
</g>
<g >
<title>make_combined_reader (89 samples, 1.71%)</title><rect x="464.4" y="341" width="20.2" height="15.0" fill="rgb(241,100,23)" rx="2" ry="2" />
<text  x="467.40" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="314.8" y="325" width="0.2" height="15.0" fill="rgb(244,35,15)" rx="2" ry="2" />
<text  x="317.75" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="631.1" y="437" width="0.2" height="15.0" fill="rgb(231,84,1)" rx="2" ry="2" />
<text  x="634.06" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="65.8" y="341" width="0.2" height="15.0" fill="rgb(225,142,50)" rx="2" ry="2" />
<text  x="68.78" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%)</title><rect x="641.5" y="405" width="0.7" height="15.0" fill="rgb(252,53,23)" rx="2" ry="2" />
<text  x="644.50" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="807.7" y="229" width="0.5" height="15.0" fill="rgb(207,88,39)" rx="2" ry="2" />
<text  x="810.70" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="996.4" y="261" width="0.2" height="15.0" fill="rgb(214,216,10)" rx="2" ry="2" />
<text  x="999.36" y="271.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.12%)</title><rect x="734.7" y="405" width="1.3" height="15.0" fill="rgb(229,206,53)" rx="2" ry="2" />
<text  x="737.69" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%)</title><rect x="81.4" y="389" width="0.3" height="15.0" fill="rgb(212,217,47)" rx="2" ry="2" />
<text  x="84.43" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="159.0" y="421" width="0.7" height="15.0" fill="rgb(232,137,27)" rx="2" ry="2" />
<text  x="161.97" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (27 samples, 0.52%)</title><rect x="866.0" y="405" width="6.1" height="15.0" fill="rgb(207,153,24)" rx="2" ry="2" />
<text  x="868.98" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="451.3" y="357" width="0.2" height="15.0" fill="rgb(223,194,22)" rx="2" ry="2" />
<text  x="454.25" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="719.7" y="421" width="0.3" height="15.0" fill="rgb(229,202,30)" rx="2" ry="2" />
<text  x="722.72" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="478.5" y="309" width="0.2" height="15.0" fill="rgb(210,229,39)" rx="2" ry="2" />
<text  x="481.46" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (15 samples, 0.29%)</title><rect x="937.9" y="389" width="3.4" height="15.0" fill="rgb(222,17,24)" rx="2" ry="2" />
<text  x="940.86" y="399.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%)</title><rect x="357.4" y="165" width="0.9" height="15.0" fill="rgb(253,162,46)" rx="2" ry="2" />
<text  x="360.38" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="685.7" y="437" width="0.2" height="15.0" fill="rgb(216,143,38)" rx="2" ry="2" />
<text  x="688.71" y="447.5" ></text>
</g>
<g >
<title>auth::resource::resource (8 samples, 0.15%)</title><rect x="773.9" y="373" width="1.8" height="15.0" fill="rgb(228,134,39)" rx="2" ry="2" />
<text  x="776.92" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (9 samples, 0.17%)</title><rect x="666.7" y="453" width="2.0" height="15.0" fill="rgb(222,97,5)" rx="2" ry="2" />
<text  x="669.66" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="972.1" y="325" width="1.4" height="15.0" fill="rgb(207,127,27)" rx="2" ry="2" />
<text  x="975.09" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1024.5" y="149" width="0.2" height="15.0" fill="rgb(229,113,6)" rx="2" ry="2" />
<text  x="1027.47" y="159.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (2 samples, 0.04%)</title><rect x="114.3" y="453" width="0.5" height="15.0" fill="rgb(251,79,44)" rx="2" ry="2" />
<text  x="117.30" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="1093.4" y="373" width="0.5" height="15.0" fill="rgb(247,88,32)" rx="2" ry="2" />
<text  x="1096.41" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="32.2" y="261" width="0.5" height="15.0" fill="rgb(253,131,25)" rx="2" ry="2" />
<text  x="35.22" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::maybe_advance_to (1 samples, 0.02%)</title><rect x="22.9" y="533" width="0.3" height="15.0" fill="rgb(218,221,28)" rx="2" ry="2" />
<text  x="25.92" y="543.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="902.7" y="293" width="0.2" height="15.0" fill="rgb(213,123,29)" rx="2" ry="2" />
<text  x="905.71" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="939.2" y="357" width="0.2" height="15.0" fill="rgb(207,202,41)" rx="2" ry="2" />
<text  x="942.22" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="687.3" y="437" width="0.2" height="15.0" fill="rgb(237,99,54)" rx="2" ry="2" />
<text  x="690.30" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="59.2" y="133" width="0.2" height="15.0" fill="rgb(244,82,40)" rx="2" ry="2" />
<text  x="62.20" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="79.4" y="325" width="0.2" height="15.0" fill="rgb(205,145,52)" rx="2" ry="2" />
<text  x="82.39" y="335.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="801.1" y="117" width="0.5" height="15.0" fill="rgb(237,192,32)" rx="2" ry="2" />
<text  x="804.13" y="127.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="335.4" y="373" width="0.4" height="15.0" fill="rgb(239,78,48)" rx="2" ry="2" />
<text  x="338.38" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="87.8" y="437" width="0.2" height="15.0" fill="rgb(223,217,39)" rx="2" ry="2" />
<text  x="90.77" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1135.4" y="293" width="3.1" height="15.0" fill="rgb(248,49,36)" rx="2" ry="2" />
<text  x="1138.35" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="253.1" y="85" width="0.2" height="15.0" fill="rgb(205,137,50)" rx="2" ry="2" />
<text  x="256.07" y="95.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="68.0" y="277" width="0.5" height="15.0" fill="rgb(236,15,13)" rx="2" ry="2" />
<text  x="71.05" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="201.1" y="245" width="0.3" height="15.0" fill="rgb(230,228,40)" rx="2" ry="2" />
<text  x="204.15" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="447.2" y="277" width="0.2" height="15.0" fill="rgb(253,46,37)" rx="2" ry="2" />
<text  x="450.17" y="287.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="493.4" y="293" width="0.3" height="15.0" fill="rgb(226,107,54)" rx="2" ry="2" />
<text  x="496.43" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1060.3" y="325" width="0.2" height="15.0" fill="rgb(221,23,6)" rx="2" ry="2" />
<text  x="1063.30" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="657.1" y="485" width="0.3" height="15.0" fill="rgb(230,123,42)" rx="2" ry="2" />
<text  x="660.14" y="495.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::~metric_groups (1 samples, 0.02%)</title><rect x="700.0" y="309" width="0.2" height="15.0" fill="rgb(252,37,32)" rx="2" ry="2" />
<text  x="703.00" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%)</title><rect x="1046.2" y="325" width="1.6" height="15.0" fill="rgb(245,147,6)" rx="2" ry="2" />
<text  x="1049.24" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation_partition&lt;bytes_ostream&gt;::writer_of_mutation_partition (1 samples, 0.02%)</title><rect x="1137.2" y="165" width="0.2" height="15.0" fill="rgb(208,67,3)" rx="2" ry="2" />
<text  x="1140.17" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="606.6" y="373" width="0.2" height="15.0" fill="rgb(244,134,23)" rx="2" ry="2" />
<text  x="609.58" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="80.1" y="277" width="0.2" height="15.0" fill="rgb(238,205,45)" rx="2" ry="2" />
<text  x="83.07" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="871.2" y="245" width="0.2" height="15.0" fill="rgb(210,176,9)" rx="2" ry="2" />
<text  x="874.19" y="255.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="83.0" y="405" width="0.2" height="15.0" fill="rgb(222,88,52)" rx="2" ry="2" />
<text  x="86.01" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (5 samples, 0.10%)</title><rect x="621.1" y="405" width="1.1" height="15.0" fill="rgb(249,208,38)" rx="2" ry="2" />
<text  x="624.09" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="559.9" y="245" width="0.6" height="15.0" fill="rgb(233,0,39)" rx="2" ry="2" />
<text  x="562.87" y="255.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="68.3" y="117" width="0.2" height="15.0" fill="rgb(226,27,23)" rx="2" ry="2" />
<text  x="71.27" y="127.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="699.1" y="485" width="0.2" height="15.0" fill="rgb(229,179,34)" rx="2" ry="2" />
<text  x="702.09" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (22 samples, 0.42%)</title><rect x="737.0" y="405" width="4.9" height="15.0" fill="rgb(232,61,37)" rx="2" ry="2" />
<text  x="739.96" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="665.3" y="405" width="0.7" height="15.0" fill="rgb(236,37,32)" rx="2" ry="2" />
<text  x="668.30" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="935.1" y="389" width="0.3" height="15.0" fill="rgb(221,182,5)" rx="2" ry="2" />
<text  x="938.13" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="948.1" y="325" width="0.2" height="15.0" fill="rgb(209,157,20)" rx="2" ry="2" />
<text  x="951.06" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="629.3" y="421" width="0.2" height="15.0" fill="rgb(238,110,30)" rx="2" ry="2" />
<text  x="632.25" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (5 samples, 0.10%)</title><rect x="621.1" y="389" width="1.1" height="15.0" fill="rgb(227,102,5)" rx="2" ry="2" />
<text  x="624.09" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (62 samples, 1.19%)</title><rect x="414.5" y="181" width="14.1" height="15.0" fill="rgb(254,150,51)" rx="2" ry="2" />
<text  x="417.52" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="1166.6" y="421" width="0.7" height="15.0" fill="rgb(211,216,13)" rx="2" ry="2" />
<text  x="1169.64" y="431.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (1 samples, 0.02%)</title><rect x="547.6" y="341" width="0.2" height="15.0" fill="rgb(211,180,54)" rx="2" ry="2" />
<text  x="550.62" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="859.2" y="453" width="0.2" height="15.0" fill="rgb(228,22,3)" rx="2" ry="2" />
<text  x="862.17" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="587.1" y="293" width="0.4" height="15.0" fill="rgb(228,3,26)" rx="2" ry="2" />
<text  x="590.08" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1028.3" y="229" width="0.5" height="15.0" fill="rgb(249,54,29)" rx="2" ry="2" />
<text  x="1031.33" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="818.8" y="293" width="0.2" height="15.0" fill="rgb(209,108,30)" rx="2" ry="2" />
<text  x="821.81" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (3 samples, 0.06%)</title><rect x="620.4" y="405" width="0.7" height="15.0" fill="rgb(242,77,30)" rx="2" ry="2" />
<text  x="623.41" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%)</title><rect x="78.0" y="357" width="0.3" height="15.0" fill="rgb(247,108,47)" rx="2" ry="2" />
<text  x="81.02" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="78.5" y="309" width="0.2" height="15.0" fill="rgb(214,229,22)" rx="2" ry="2" />
<text  x="81.48" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="12.0" y="277" width="0.3" height="15.0" fill="rgb(233,25,18)" rx="2" ry="2" />
<text  x="15.04" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (4 samples, 0.08%)</title><rect x="362.4" y="165" width="0.9" height="15.0" fill="rgb(232,171,34)" rx="2" ry="2" />
<text  x="365.37" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (8 samples, 0.15%)</title><rect x="1112.9" y="389" width="1.8" height="15.0" fill="rgb(227,62,27)" rx="2" ry="2" />
<text  x="1115.91" y="399.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="925.2" y="373" width="0.2" height="15.0" fill="rgb(253,20,18)" rx="2" ry="2" />
<text  x="928.16" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (8 samples, 0.15%)</title><rect x="40.8" y="261" width="1.9" height="15.0" fill="rgb(213,119,14)" rx="2" ry="2" />
<text  x="43.84" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%)</title><rect x="598.4" y="357" width="0.9" height="15.0" fill="rgb(209,53,21)" rx="2" ry="2" />
<text  x="601.41" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="476.6" y="293" width="0.3" height="15.0" fill="rgb(219,201,9)" rx="2" ry="2" />
<text  x="479.65" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%)</title><rect x="481.9" y="293" width="0.2" height="15.0" fill="rgb(220,9,45)" rx="2" ry="2" />
<text  x="484.86" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="992.3" y="325" width="0.2" height="15.0" fill="rgb(206,209,25)" rx="2" ry="2" />
<text  x="995.28" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="822.0" y="357" width="0.4" height="15.0" fill="rgb(234,162,41)" rx="2" ry="2" />
<text  x="824.99" y="367.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (3 samples, 0.06%)</title><rect x="861.2" y="469" width="0.7" height="15.0" fill="rgb(238,219,54)" rx="2" ry="2" />
<text  x="864.21" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="698.4" y="421" width="0.5" height="15.0" fill="rgb(247,117,4)" rx="2" ry="2" />
<text  x="701.41" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="803.4" y="149" width="0.9" height="15.0" fill="rgb(226,125,11)" rx="2" ry="2" />
<text  x="806.39" y="159.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="575.5" y="405" width="1.1" height="15.0" fill="rgb(247,91,8)" rx="2" ry="2" />
<text  x="578.51" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (2 samples, 0.04%)</title><rect x="114.3" y="405" width="0.5" height="15.0" fill="rgb(246,71,20)" rx="2" ry="2" />
<text  x="117.30" y="415.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="87.3" y="357" width="0.2" height="15.0" fill="rgb(248,174,25)" rx="2" ry="2" />
<text  x="90.32" y="367.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="489.3" y="325" width="0.5" height="15.0" fill="rgb(216,118,39)" rx="2" ry="2" />
<text  x="492.35" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="145.6" y="453" width="0.2" height="15.0" fill="rgb(231,225,36)" rx="2" ry="2" />
<text  x="148.60" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="706.8" y="469" width="0.2" height="15.0" fill="rgb(221,93,39)" rx="2" ry="2" />
<text  x="709.80" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (6 samples, 0.12%)</title><rect x="553.1" y="261" width="1.3" height="15.0" fill="rgb(211,15,14)" rx="2" ry="2" />
<text  x="556.06" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="46.1" y="325" width="0.9" height="15.0" fill="rgb(210,220,34)" rx="2" ry="2" />
<text  x="49.05" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="67.4" y="277" width="0.2" height="15.0" fill="rgb(212,183,39)" rx="2" ry="2" />
<text  x="70.37" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="58.5" y="293" width="0.3" height="15.0" fill="rgb(235,167,5)" rx="2" ry="2" />
<text  x="61.52" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="993.4" y="245" width="2.0" height="15.0" fill="rgb(214,196,49)" rx="2" ry="2" />
<text  x="996.41" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="446.5" y="229" width="0.7" height="15.0" fill="rgb(205,125,33)" rx="2" ry="2" />
<text  x="449.49" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="700.0" y="405" width="0.2" height="15.0" fill="rgb(227,60,12)" rx="2" ry="2" />
<text  x="703.00" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="268.3" y="165" width="0.2" height="15.0" fill="rgb(226,103,0)" rx="2" ry="2" />
<text  x="271.27" y="175.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="82.6" y="341" width="0.2" height="15.0" fill="rgb(215,180,46)" rx="2" ry="2" />
<text  x="85.56" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="77.6" y="325" width="0.2" height="15.0" fill="rgb(226,150,44)" rx="2" ry="2" />
<text  x="80.57" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="294.6" y="213" width="0.2" height="15.0" fill="rgb(253,164,34)" rx="2" ry="2" />
<text  x="297.57" y="223.5" ></text>
</g>
<g >
<title>compound_type&lt; (16 samples, 0.31%)</title><rect x="926.1" y="357" width="3.6" height="15.0" fill="rgb(226,213,25)" rx="2" ry="2" />
<text  x="929.06" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="13.6" y="421" width="0.3" height="15.0" fill="rgb(226,29,7)" rx="2" ry="2" />
<text  x="16.63" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="656.7" y="469" width="0.2" height="15.0" fill="rgb(225,209,49)" rx="2" ry="2" />
<text  x="659.69" y="479.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="454.2" y="373" width="0.7" height="15.0" fill="rgb(254,124,46)" rx="2" ry="2" />
<text  x="457.20" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (9 samples, 0.17%)</title><rect x="603.2" y="357" width="2.0" height="15.0" fill="rgb(250,111,3)" rx="2" ry="2" />
<text  x="606.17" y="367.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.10%)</title><rect x="85.3" y="421" width="1.1" height="15.0" fill="rgb(250,107,49)" rx="2" ry="2" />
<text  x="88.28" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%)</title><rect x="893.2" y="405" width="2.0" height="15.0" fill="rgb(221,45,9)" rx="2" ry="2" />
<text  x="896.19" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.13%)</title><rect x="211.8" y="213" width="1.6" height="15.0" fill="rgb(239,48,5)" rx="2" ry="2" />
<text  x="214.81" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="748.5" y="357" width="1.4" height="15.0" fill="rgb(246,89,39)" rx="2" ry="2" />
<text  x="751.52" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (28 samples, 0.54%)</title><rect x="1064.8" y="245" width="6.4" height="15.0" fill="rgb(216,157,20)" rx="2" ry="2" />
<text  x="1067.83" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="810.2" y="261" width="0.2" height="15.0" fill="rgb(248,77,49)" rx="2" ry="2" />
<text  x="813.20" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="520.6" y="309" width="0.5" height="15.0" fill="rgb(252,173,31)" rx="2" ry="2" />
<text  x="523.64" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="84.6" y="421" width="0.2" height="15.0" fill="rgb(228,221,6)" rx="2" ry="2" />
<text  x="87.60" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="87.8" y="213" width="0.2" height="15.0" fill="rgb(254,86,35)" rx="2" ry="2" />
<text  x="90.77" y="223.5" ></text>
</g>
<g >
<title>__strlen_avx2 (17 samples, 0.33%)</title><rect x="1010.9" y="245" width="3.8" height="15.0" fill="rgb(244,224,3)" rx="2" ry="2" />
<text  x="1013.87" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="922.0" y="341" width="0.2" height="15.0" fill="rgb(231,32,50)" rx="2" ry="2" />
<text  x="924.98" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (6 samples, 0.12%)</title><rect x="939.9" y="341" width="1.4" height="15.0" fill="rgb(227,139,4)" rx="2" ry="2" />
<text  x="942.90" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (29 samples, 0.56%)</title><rect x="1125.6" y="357" width="6.6" height="15.0" fill="rgb(249,212,25)" rx="2" ry="2" />
<text  x="1128.60" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="456.2" y="405" width="0.3" height="15.0" fill="rgb(210,28,2)" rx="2" ry="2" />
<text  x="459.24" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="45.4" y="245" width="0.2" height="15.0" fill="rgb(219,172,52)" rx="2" ry="2" />
<text  x="48.37" y="255.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="854.6" y="453" width="0.3" height="15.0" fill="rgb(254,184,1)" rx="2" ry="2" />
<text  x="857.64" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="998.6" y="293" width="0.3" height="15.0" fill="rgb(223,66,27)" rx="2" ry="2" />
<text  x="1001.62" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="113.6" y="293" width="0.3" height="15.0" fill="rgb(232,190,23)" rx="2" ry="2" />
<text  x="116.62" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.27%)</title><rect x="249.4" y="117" width="3.2" height="15.0" fill="rgb(242,196,15)" rx="2" ry="2" />
<text  x="252.45" y="127.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="66.7" y="181" width="0.2" height="15.0" fill="rgb(207,33,30)" rx="2" ry="2" />
<text  x="69.69" y="191.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="708.4" y="485" width="0.4" height="15.0" fill="rgb(232,155,3)" rx="2" ry="2" />
<text  x="711.39" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="815.4" y="293" width="0.2" height="15.0" fill="rgb(244,34,17)" rx="2" ry="2" />
<text  x="818.41" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="698.6" y="293" width="0.3" height="15.0" fill="rgb(233,50,37)" rx="2" ry="2" />
<text  x="701.64" y="303.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="613.4" y="389" width="1.3" height="15.0" fill="rgb(217,75,14)" rx="2" ry="2" />
<text  x="616.38" y="399.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="517.2" y="309" width="0.3" height="15.0" fill="rgb(230,117,36)" rx="2" ry="2" />
<text  x="520.24" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="578.2" y="421" width="0.3" height="15.0" fill="rgb(235,6,14)" rx="2" ry="2" />
<text  x="581.23" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="455.8" y="373" width="0.2" height="15.0" fill="rgb(253,196,28)" rx="2" ry="2" />
<text  x="458.79" y="383.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="282.6" y="197" width="0.2" height="15.0" fill="rgb(205,128,41)" rx="2" ry="2" />
<text  x="285.55" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (9 samples, 0.17%)</title><rect x="847.8" y="421" width="2.1" height="15.0" fill="rgb(211,44,49)" rx="2" ry="2" />
<text  x="850.84" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="986.6" y="293" width="0.9" height="15.0" fill="rgb(229,167,1)" rx="2" ry="2" />
<text  x="989.61" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1053.3" y="341" width="0.2" height="15.0" fill="rgb(252,100,19)" rx="2" ry="2" />
<text  x="1056.27" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="87.8" y="357" width="0.2" height="15.0" fill="rgb(250,102,44)" rx="2" ry="2" />
<text  x="90.77" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="120.4" y="485" width="0.3" height="15.0" fill="rgb(253,21,22)" rx="2" ry="2" />
<text  x="123.43" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,769 samples, 91.64%)</title><rect x="88.5" y="597" width="1081.3" height="15.0" fill="rgb(211,64,47)" rx="2" ry="2" />
<text  x="91.46" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="810.0" y="197" width="0.2" height="15.0" fill="rgb(236,183,1)" rx="2" ry="2" />
<text  x="812.97" y="207.5" ></text>
</g>
<g >
<title>row::compact_and_expire (80 samples, 1.54%)</title><rect x="410.7" y="213" width="18.1" height="15.0" fill="rgb(250,18,21)" rx="2" ry="2" />
<text  x="413.66" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="326.3" y="277" width="0.2" height="15.0" fill="rgb(216,110,44)" rx="2" ry="2" />
<text  x="329.31" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="980.3" y="325" width="2.7" height="15.0" fill="rgb(236,18,6)" rx="2" ry="2" />
<text  x="983.26" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1060.1" y="309" width="0.2" height="15.0" fill="rgb(232,218,10)" rx="2" ry="2" />
<text  x="1063.07" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="546.7" y="325" width="0.2" height="15.0" fill="rgb(233,38,11)" rx="2" ry="2" />
<text  x="549.71" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1028.8" y="229" width="0.2" height="15.0" fill="rgb(229,107,9)" rx="2" ry="2" />
<text  x="1031.78" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (8 samples, 0.15%)</title><rect x="1115.9" y="421" width="1.8" height="15.0" fill="rgb(248,125,36)" rx="2" ry="2" />
<text  x="1118.85" y="431.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="14.1" y="533" width="0.2" height="15.0" fill="rgb(224,13,47)" rx="2" ry="2" />
<text  x="17.08" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="114.1" y="357" width="0.2" height="15.0" fill="rgb(244,46,40)" rx="2" ry="2" />
<text  x="117.08" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="298.0" y="229" width="0.4" height="15.0" fill="rgb(239,60,3)" rx="2" ry="2" />
<text  x="300.97" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (3 samples, 0.06%)</title><rect x="196.6" y="261" width="0.7" height="15.0" fill="rgb(231,154,2)" rx="2" ry="2" />
<text  x="199.61" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%)</title><rect x="97.3" y="485" width="0.2" height="15.0" fill="rgb(240,4,17)" rx="2" ry="2" />
<text  x="100.30" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="62.2" y="149" width="0.6" height="15.0" fill="rgb(212,52,17)" rx="2" ry="2" />
<text  x="65.15" y="159.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1063.0" y="309" width="0.5" height="15.0" fill="rgb(218,133,6)" rx="2" ry="2" />
<text  x="1066.02" y="319.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (61 samples, 1.17%)</title><rect x="1063.5" y="309" width="13.8" height="15.0" fill="rgb(229,51,52)" rx="2" ry="2" />
<text  x="1066.47" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="908.4" y="357" width="1.3" height="15.0" fill="rgb(240,195,30)" rx="2" ry="2" />
<text  x="911.38" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (73 samples, 1.40%)</title><rect x="187.1" y="309" width="16.5" height="15.0" fill="rgb(207,124,10)" rx="2" ry="2" />
<text  x="190.09" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="935.8" y="389" width="0.2" height="15.0" fill="rgb(243,132,17)" rx="2" ry="2" />
<text  x="938.81" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_nodes (1 samples, 0.02%)</title><rect x="27.7" y="325" width="0.2" height="15.0" fill="rgb(241,220,17)" rx="2" ry="2" />
<text  x="30.69" y="335.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (277 samples, 5.32%)</title><rect x="770.5" y="405" width="62.8" height="15.0" fill="rgb(217,143,23)" rx="2" ry="2" />
<text  x="773.51" y="415.5" >servic..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%)</title><rect x="1026.3" y="181" width="0.2" height="15.0" fill="rgb(206,81,42)" rx="2" ry="2" />
<text  x="1029.29" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (6 samples, 0.12%)</title><rect x="12.7" y="453" width="1.4" height="15.0" fill="rgb(214,128,14)" rx="2" ry="2" />
<text  x="15.72" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (4 samples, 0.08%)</title><rect x="888.2" y="421" width="0.9" height="15.0" fill="rgb(248,119,37)" rx="2" ry="2" />
<text  x="891.20" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (2 samples, 0.04%)</title><rect x="716.3" y="421" width="0.5" height="15.0" fill="rgb(219,100,52)" rx="2" ry="2" />
<text  x="719.32" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,070 samples, 20.56%)</title><rect x="882.1" y="437" width="242.6" height="15.0" fill="rgb(250,7,33)" rx="2" ry="2" />
<text  x="885.08" y="447.5" >cql3::statements::select_stateme..</text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="208.2" y="245" width="0.2" height="15.0" fill="rgb(236,26,51)" rx="2" ry="2" />
<text  x="211.18" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="483.5" y="309" width="0.6" height="15.0" fill="rgb(224,67,53)" rx="2" ry="2" />
<text  x="486.45" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1136.0" y="53" width="0.3" height="15.0" fill="rgb(227,85,35)" rx="2" ry="2" />
<text  x="1139.03" y="63.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="679.8" y="485" width="0.5" height="15.0" fill="rgb(214,183,14)" rx="2" ry="2" />
<text  x="682.82" y="495.5" ></text>
</g>
<g >
<title>cql3::attributes::fill_prepare_context (1 samples, 0.02%)</title><rect x="72.8" y="453" width="0.2" height="15.0" fill="rgb(220,62,23)" rx="2" ry="2" />
<text  x="75.81" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="180.7" y="357" width="0.3" height="15.0" fill="rgb(239,46,16)" rx="2" ry="2" />
<text  x="183.74" y="367.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (51 samples, 0.98%)</title><rect x="491.8" y="309" width="11.6" height="15.0" fill="rgb(239,109,49)" rx="2" ry="2" />
<text  x="494.84" y="319.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (3 samples, 0.06%)</title><rect x="1071.6" y="277" width="0.7" height="15.0" fill="rgb(216,46,33)" rx="2" ry="2" />
<text  x="1074.64" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.02%)</title><rect x="1189.8" y="629" width="0.2" height="15.0" fill="rgb(245,70,11)" rx="2" ry="2" />
<text  x="1192.77" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%)</title><rect x="680.3" y="485" width="1.3" height="15.0" fill="rgb(253,10,14)" rx="2" ry="2" />
<text  x="683.27" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="88.0" y="453" width="0.2" height="15.0" fill="rgb(213,21,39)" rx="2" ry="2" />
<text  x="91.00" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="146.3" y="453" width="0.2" height="15.0" fill="rgb(237,8,36)" rx="2" ry="2" />
<text  x="149.28" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (3 samples, 0.06%)</title><rect x="272.8" y="149" width="0.7" height="15.0" fill="rgb(218,12,17)" rx="2" ry="2" />
<text  x="275.80" y="159.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="63.1" y="197" width="0.2" height="15.0" fill="rgb(234,84,23)" rx="2" ry="2" />
<text  x="66.06" y="207.5" ></text>
</g>
<g >
<title>seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::for_each_fragment&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::read (1 samples, 0.02%)</title><rect x="116.3" y="245" width="0.3" height="15.0" fill="rgb(217,145,30)" rx="2" ry="2" />
<text  x="119.35" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="698.9" y="453" width="0.2" height="15.0" fill="rgb(211,81,23)" rx="2" ry="2" />
<text  x="701.86" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="106.4" y="453" width="0.2" height="15.0" fill="rgb(222,90,30)" rx="2" ry="2" />
<text  x="109.37" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (9 samples, 0.17%)</title><rect x="298.7" y="229" width="2.0" height="15.0" fill="rgb(248,51,5)" rx="2" ry="2" />
<text  x="301.65" y="239.5" ></text>
</g>
<g >
<title>abstract_type::from_string (10 samples, 0.19%)</title><rect x="74.2" y="373" width="2.2" height="15.0" fill="rgb(212,71,16)" rx="2" ry="2" />
<text  x="77.17" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%)</title><rect x="561.7" y="341" width="0.9" height="15.0" fill="rgb(228,4,42)" rx="2" ry="2" />
<text  x="564.68" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1090.5" y="389" width="0.2" height="15.0" fill="rgb(217,119,8)" rx="2" ry="2" />
<text  x="1093.46" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="272.1" y="117" width="0.2" height="15.0" fill="rgb(234,39,25)" rx="2" ry="2" />
<text  x="275.12" y="127.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="375.5" y="181" width="0.5" height="15.0" fill="rgb(220,219,24)" rx="2" ry="2" />
<text  x="378.52" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%)</title><rect x="864.4" y="469" width="0.4" height="15.0" fill="rgb(233,148,22)" rx="2" ry="2" />
<text  x="867.39" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%)</title><rect x="749.9" y="373" width="0.2" height="15.0" fill="rgb(229,211,15)" rx="2" ry="2" />
<text  x="752.88" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="747.2" y="373" width="0.4" height="15.0" fill="rgb(251,227,30)" rx="2" ry="2" />
<text  x="750.16" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="952.8" y="357" width="0.2" height="15.0" fill="rgb(213,190,7)" rx="2" ry="2" />
<text  x="955.82" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%)</title><rect x="373.3" y="181" width="0.6" height="15.0" fill="rgb(246,3,24)" rx="2" ry="2" />
<text  x="376.25" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="52.4" y="213" width="0.5" height="15.0" fill="rgb(212,96,49)" rx="2" ry="2" />
<text  x="55.40" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="85.5" y="293" width="0.5" height="15.0" fill="rgb(214,141,3)" rx="2" ry="2" />
<text  x="88.51" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="223.1" y="197" width="0.3" height="15.0" fill="rgb(239,47,48)" rx="2" ry="2" />
<text  x="226.14" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="867.8" y="293" width="0.2" height="15.0" fill="rgb(246,124,25)" rx="2" ry="2" />
<text  x="870.79" y="303.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="1127.2" y="149" width="0.4" height="15.0" fill="rgb(207,85,51)" rx="2" ry="2" />
<text  x="1130.19" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="680.5" y="469" width="0.2" height="15.0" fill="rgb(217,166,25)" rx="2" ry="2" />
<text  x="683.50" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%)</title><rect x="78.0" y="341" width="0.3" height="15.0" fill="rgb(251,175,14)" rx="2" ry="2" />
<text  x="81.02" y="351.5" ></text>
</g>
<g >
<title>db::system_keyspace::get_saved_tokens (1 samples, 0.02%)</title><rect x="10.7" y="437" width="0.2" height="15.0" fill="rgb(225,27,11)" rx="2" ry="2" />
<text  x="13.68" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="58.8" y="277" width="0.6" height="15.0" fill="rgb(219,82,15)" rx="2" ry="2" />
<text  x="61.75" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.6" y="469" width="0.2" height="15.0" fill="rgb(218,2,35)" rx="2" ry="2" />
<text  x="672.61" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (1 samples, 0.02%)</title><rect x="708.8" y="469" width="0.3" height="15.0" fill="rgb(206,83,54)" rx="2" ry="2" />
<text  x="711.84" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="201.8" y="261" width="0.5" height="15.0" fill="rgb(240,174,44)" rx="2" ry="2" />
<text  x="204.83" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%)</title><rect x="307.7" y="293" width="0.2" height="15.0" fill="rgb(237,36,8)" rx="2" ry="2" />
<text  x="310.72" y="303.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%)</title><rect x="1002.7" y="277" width="0.2" height="15.0" fill="rgb(207,69,27)" rx="2" ry="2" />
<text  x="1005.71" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="30.9" y="261" width="0.2" height="15.0" fill="rgb(247,34,43)" rx="2" ry="2" />
<text  x="33.86" y="271.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="616.6" y="405" width="0.2" height="15.0" fill="rgb(220,128,25)" rx="2" ry="2" />
<text  x="619.55" y="415.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="64.4" y="245" width="0.5" height="15.0" fill="rgb(246,102,48)" rx="2" ry="2" />
<text  x="67.42" y="255.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="51.7" y="181" width="0.5" height="15.0" fill="rgb(253,162,52)" rx="2" ry="2" />
<text  x="54.72" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (21 samples, 0.40%)</title><rect x="700.9" y="485" width="4.8" height="15.0" fill="rgb(223,212,38)" rx="2" ry="2" />
<text  x="703.90" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="762.4" y="373" width="0.4" height="15.0" fill="rgb(205,159,12)" rx="2" ry="2" />
<text  x="765.35" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="936.3" y="405" width="0.2" height="15.0" fill="rgb(212,135,40)" rx="2" ry="2" />
<text  x="939.27" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (66 samples, 1.27%)</title><rect x="30.4" y="325" width="15.0" height="15.0" fill="rgb(219,101,10)" rx="2" ry="2" />
<text  x="33.41" y="335.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="448.3" y="293" width="0.5" height="15.0" fill="rgb(247,214,36)" rx="2" ry="2" />
<text  x="451.31" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_closeable&lt;flat_mutation_reader, (anonymous namespace)::shard_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="133" width="0.2" height="15.0" fill="rgb(248,63,20)" rx="2" ry="2" />
<text  x="26.60" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="649.0" y="485" width="0.2" height="15.0" fill="rgb(206,204,49)" rx="2" ry="2" />
<text  x="651.98" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (39 samples, 0.75%)</title><rect x="133.4" y="421" width="8.8" height="15.0" fill="rgb(216,16,53)" rx="2" ry="2" />
<text  x="136.35" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (2 samples, 0.04%)</title><rect x="1078.4" y="325" width="0.5" height="15.0" fill="rgb(254,86,52)" rx="2" ry="2" />
<text  x="1081.44" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1131.5" y="245" width="0.2" height="15.0" fill="rgb(215,99,46)" rx="2" ry="2" />
<text  x="1134.50" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="349.2" y="245" width="0.7" height="15.0" fill="rgb(253,36,41)" rx="2" ry="2" />
<text  x="352.22" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%)</title><rect x="311.6" y="341" width="0.4" height="15.0" fill="rgb(235,212,21)" rx="2" ry="2" />
<text  x="314.58" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="847.6" y="421" width="0.2" height="15.0" fill="rgb(223,169,28)" rx="2" ry="2" />
<text  x="850.61" y="431.5" ></text>
</g>
<g >
<title>db::get_cdc_streams_descriptions_v2_mutation (1 samples, 0.02%)</title><rect x="108.4" y="469" width="0.2" height="15.0" fill="rgb(223,226,46)" rx="2" ry="2" />
<text  x="111.41" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="538.1" y="229" width="0.2" height="15.0" fill="rgb(243,33,21)" rx="2" ry="2" />
<text  x="541.10" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="12.3" y="197" width="0.2" height="15.0" fill="rgb(239,168,14)" rx="2" ry="2" />
<text  x="15.27" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="68.3" y="229" width="0.2" height="15.0" fill="rgb(212,68,8)" rx="2" ry="2" />
<text  x="71.27" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (86 samples, 1.65%)</title><rect x="522.9" y="309" width="19.5" height="15.0" fill="rgb(216,182,7)" rx="2" ry="2" />
<text  x="525.91" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="23.6" y="309" width="0.2" height="15.0" fill="rgb(253,13,13)" rx="2" ry="2" />
<text  x="26.60" y="319.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="474.6" y="277" width="0.7" height="15.0" fill="rgb(235,157,17)" rx="2" ry="2" />
<text  x="477.61" y="287.5" ></text>
</g>
<g >
<title>cql3::prepare_context::set_bound_variables (1 samples, 0.02%)</title><rect x="30.0" y="389" width="0.2" height="15.0" fill="rgb(218,18,6)" rx="2" ry="2" />
<text  x="32.95" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="104.3" y="453" width="0.3" height="15.0" fill="rgb(223,120,11)" rx="2" ry="2" />
<text  x="107.33" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="331.5" y="357" width="0.9" height="15.0" fill="rgb(238,48,41)" rx="2" ry="2" />
<text  x="334.53" y="367.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (5 samples, 0.10%)</title><rect x="641.0" y="421" width="1.2" height="15.0" fill="rgb(254,84,35)" rx="2" ry="2" />
<text  x="644.04" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="310.7" y="341" width="0.4" height="15.0" fill="rgb(233,206,40)" rx="2" ry="2" />
<text  x="313.67" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_role_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="69.9" y="373" width="0.2" height="15.0" fill="rgb(215,66,51)" rx="2" ry="2" />
<text  x="72.86" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (38 samples, 0.73%)</title><rect x="598.2" y="389" width="8.6" height="15.0" fill="rgb(246,174,17)" rx="2" ry="2" />
<text  x="601.19" y="399.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%)</title><rect x="116.1" y="293" width="0.2" height="15.0" fill="rgb(237,129,30)" rx="2" ry="2" />
<text  x="119.12" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="807.0" y="261" width="0.2" height="15.0" fill="rgb(205,24,54)" rx="2" ry="2" />
<text  x="810.02" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="545.6" y="309" width="0.2" height="15.0" fill="rgb(246,112,9)" rx="2" ry="2" />
<text  x="548.58" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="1133.8" y="181" width="0.2" height="15.0" fill="rgb(211,121,35)" rx="2" ry="2" />
<text  x="1136.77" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="64.2" y="309" width="0.2" height="15.0" fill="rgb(245,54,40)" rx="2" ry="2" />
<text  x="67.19" y="319.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="23.4" y="517" width="0.2" height="15.0" fill="rgb(214,161,47)" rx="2" ry="2" />
<text  x="26.38" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="259.7" y="133" width="0.2" height="15.0" fill="rgb(220,180,9)" rx="2" ry="2" />
<text  x="262.65" y="143.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="700.0" y="389" width="0.2" height="15.0" fill="rgb(216,53,22)" rx="2" ry="2" />
<text  x="703.00" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::tombstone_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1129.7" y="229" width="0.2" height="15.0" fill="rgb(219,147,54)" rx="2" ry="2" />
<text  x="1132.68" y="239.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="935.4" y="405" width="0.2" height="15.0" fill="rgb(245,157,53)" rx="2" ry="2" />
<text  x="938.36" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%)</title><rect x="517.5" y="309" width="0.6" height="15.0" fill="rgb(217,62,26)" rx="2" ry="2" />
<text  x="520.46" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="809.5" y="229" width="0.7" height="15.0" fill="rgb(252,27,46)" rx="2" ry="2" />
<text  x="812.52" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (21 samples, 0.40%)</title><rect x="59.4" y="309" width="4.8" height="15.0" fill="rgb(226,9,7)" rx="2" ry="2" />
<text  x="62.43" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="62.2" y="181" width="0.6" height="15.0" fill="rgb(212,6,14)" rx="2" ry="2" />
<text  x="65.15" y="191.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="113.9" y="421" width="0.2" height="15.0" fill="rgb(215,107,15)" rx="2" ry="2" />
<text  x="116.85" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="815.6" y="277" width="0.3" height="15.0" fill="rgb(218,110,43)" rx="2" ry="2" />
<text  x="818.64" y="287.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="114.1" y="229" width="0.2" height="15.0" fill="rgb(208,218,7)" rx="2" ry="2" />
<text  x="117.08" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="64.9" y="293" width="0.4" height="15.0" fill="rgb(211,228,53)" rx="2" ry="2" />
<text  x="67.87" y="303.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (22 samples, 0.42%)</title><rect x="737.0" y="389" width="4.9" height="15.0" fill="rgb(254,33,8)" rx="2" ry="2" />
<text  x="739.96" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="754.9" y="293" width="0.2" height="15.0" fill="rgb(219,135,52)" rx="2" ry="2" />
<text  x="757.87" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="67.4" y="293" width="0.2" height="15.0" fill="rgb(220,76,46)" rx="2" ry="2" />
<text  x="70.37" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="877.8" y="437" width="0.2" height="15.0" fill="rgb(243,128,5)" rx="2" ry="2" />
<text  x="880.77" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.08%)</title><rect x="1158.9" y="453" width="0.9" height="15.0" fill="rgb(253,19,13)" rx="2" ry="2" />
<text  x="1161.94" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="50.1" y="341" width="0.3" height="15.0" fill="rgb(226,25,49)" rx="2" ry="2" />
<text  x="53.13" y="351.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (8 samples, 0.15%)</title><rect x="74.6" y="357" width="1.8" height="15.0" fill="rgb(239,45,17)" rx="2" ry="2" />
<text  x="77.62" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="29.5" y="341" width="0.2" height="15.0" fill="rgb(208,19,23)" rx="2" ry="2" />
<text  x="32.50" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.2" y="213" width="0.2" height="15.0" fill="rgb(219,168,24)" rx="2" ry="2" />
<text  x="874.19" y="223.5" ></text>
</g>
<g >
<title>database::find_keyspace (11 samples, 0.21%)</title><rect x="1047.8" y="341" width="2.5" height="15.0" fill="rgb(229,7,1)" rx="2" ry="2" />
<text  x="1050.83" y="351.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (3 samples, 0.06%)</title><rect x="395.5" y="165" width="0.7" height="15.0" fill="rgb(246,22,32)" rx="2" ry="2" />
<text  x="398.47" y="175.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="61.5" y="213" width="0.2" height="15.0" fill="rgb(249,205,11)" rx="2" ry="2" />
<text  x="64.47" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (26 samples, 0.50%)</title><rect x="302.1" y="309" width="5.8" height="15.0" fill="rgb(237,148,54)" rx="2" ry="2" />
<text  x="305.05" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (231 samples, 4.44%)</title><rect x="992.0" y="341" width="52.4" height="15.0" fill="rgb(228,160,48)" rx="2" ry="2" />
<text  x="995.05" y="351.5" >servi..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="61.9" y="245" width="0.3" height="15.0" fill="rgb(250,44,35)" rx="2" ry="2" />
<text  x="64.93" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (46 samples, 0.88%)</title><rect x="55.1" y="325" width="10.5" height="15.0" fill="rgb(231,196,17)" rx="2" ry="2" />
<text  x="58.12" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (11 samples, 0.21%)</title><rect x="432.2" y="245" width="2.5" height="15.0" fill="rgb(220,229,27)" rx="2" ry="2" />
<text  x="435.21" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="854.0" y="405" width="0.4" height="15.0" fill="rgb(244,22,15)" rx="2" ry="2" />
<text  x="856.96" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="361.9" y="181" width="0.2" height="15.0" fill="rgb(212,192,23)" rx="2" ry="2" />
<text  x="364.91" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="574.4" y="261" width="0.2" height="15.0" fill="rgb(254,73,51)" rx="2" ry="2" />
<text  x="577.38" y="271.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::flush (1 samples, 0.02%)</title><rect x="87.3" y="437" width="0.2" height="15.0" fill="rgb(216,127,20)" rx="2" ry="2" />
<text  x="90.32" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="66.9" y="165" width="0.2" height="15.0" fill="rgb(209,48,42)" rx="2" ry="2" />
<text  x="69.91" y="175.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="23.4" y="213" width="0.2" height="15.0" fill="rgb(243,54,48)" rx="2" ry="2" />
<text  x="26.38" y="223.5" ></text>
</g>
<g >
<title>service::storage_service::prepare_to_join (1 samples, 0.02%)</title><rect x="23.6" y="469" width="0.2" height="15.0" fill="rgb(249,223,5)" rx="2" ry="2" />
<text  x="26.60" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="949.6" y="405" width="0.5" height="15.0" fill="rgb(228,20,10)" rx="2" ry="2" />
<text  x="952.65" y="415.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%)</title><rect x="113.9" y="405" width="0.2" height="15.0" fill="rgb(251,208,32)" rx="2" ry="2" />
<text  x="116.85" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (2 samples, 0.04%)</title><rect x="308.4" y="325" width="0.5" height="15.0" fill="rgb(233,137,30)" rx="2" ry="2" />
<text  x="311.40" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="115.7" y="309" width="0.4" height="15.0" fill="rgb(232,72,25)" rx="2" ry="2" />
<text  x="118.66" y="319.5" ></text>
</g>
<g >
<title>row::row (3 samples, 0.06%)</title><rect x="299.6" y="197" width="0.6" height="15.0" fill="rgb(225,211,53)" rx="2" ry="2" />
<text  x="302.56" y="207.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="408.2" y="197" width="0.2" height="15.0" fill="rgb(239,193,13)" rx="2" ry="2" />
<text  x="411.17" y="207.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1040.6" y="245" width="1.8" height="15.0" fill="rgb(207,188,2)" rx="2" ry="2" />
<text  x="1043.57" y="255.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="969.6" y="357" width="0.5" height="15.0" fill="rgb(221,214,36)" rx="2" ry="2" />
<text  x="972.60" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="821.5" y="373" width="1.6" height="15.0" fill="rgb(236,162,42)" rx="2" ry="2" />
<text  x="824.53" y="383.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (1 samples, 0.02%)</title><rect x="810.6" y="293" width="0.3" height="15.0" fill="rgb(253,31,7)" rx="2" ry="2" />
<text  x="813.65" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="59.9" y="229" width="0.2" height="15.0" fill="rgb(214,43,24)" rx="2" ry="2" />
<text  x="62.88" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="11.1" y="421" width="0.3" height="15.0" fill="rgb(231,77,45)" rx="2" ry="2" />
<text  x="14.13" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1128.6" y="181" width="0.2" height="15.0" fill="rgb(237,206,29)" rx="2" ry="2" />
<text  x="1131.55" y="191.5" ></text>
</g>
<g >
<title>sstables::sstable::write_compression (1 samples, 0.02%)</title><rect x="88.0" y="437" width="0.2" height="15.0" fill="rgb(220,58,51)" rx="2" ry="2" />
<text  x="91.00" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="1048.5" y="309" width="1.1" height="15.0" fill="rgb(210,134,49)" rx="2" ry="2" />
<text  x="1051.51" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="67.1" y="309" width="0.3" height="15.0" fill="rgb(242,44,21)" rx="2" ry="2" />
<text  x="70.14" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (11 samples, 0.21%)</title><rect x="298.4" y="261" width="2.5" height="15.0" fill="rgb(211,40,11)" rx="2" ry="2" />
<text  x="301.42" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.2" y="245" width="0.2" height="15.0" fill="rgb(220,22,24)" rx="2" ry="2" />
<text  x="35.22" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="296.2" y="165" width="0.4" height="15.0" fill="rgb(254,192,12)" rx="2" ry="2" />
<text  x="299.16" y="175.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="1168.2" y="437" width="0.3" height="15.0" fill="rgb(210,93,50)" rx="2" ry="2" />
<text  x="1171.23" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="333.6" y="373" width="0.2" height="15.0" fill="rgb(236,30,46)" rx="2" ry="2" />
<text  x="336.57" y="383.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (23 samples, 0.44%)</title><rect x="323.6" y="309" width="5.2" height="15.0" fill="rgb(222,149,12)" rx="2" ry="2" />
<text  x="326.59" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="47.6" y="309" width="0.7" height="15.0" fill="rgb(214,56,41)" rx="2" ry="2" />
<text  x="50.64" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (11 samples, 0.21%)</title><rect x="37.4" y="261" width="2.5" height="15.0" fill="rgb(245,135,52)" rx="2" ry="2" />
<text  x="40.44" y="271.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%)</title><rect x="116.8" y="373" width="0.2" height="15.0" fill="rgb(216,36,1)" rx="2" ry="2" />
<text  x="119.80" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%)</title><rect x="800.0" y="165" width="3.2" height="15.0" fill="rgb(243,84,54)" rx="2" ry="2" />
<text  x="802.99" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="666.2" y="453" width="0.2" height="15.0" fill="rgb(229,61,35)" rx="2" ry="2" />
<text  x="669.21" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="673.5" y="453" width="0.2" height="15.0" fill="rgb(249,179,52)" rx="2" ry="2" />
<text  x="676.47" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="273.3" y="133" width="0.2" height="15.0" fill="rgb(208,223,4)" rx="2" ry="2" />
<text  x="276.26" y="143.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;(anonymous namespace)::shard_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="149" width="0.2" height="15.0" fill="rgb(223,180,36)" rx="2" ry="2" />
<text  x="26.60" y="159.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.4" y="197" width="0.2" height="15.0" fill="rgb(206,7,32)" rx="2" ry="2" />
<text  x="48.37" y="207.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%)</title><rect x="373.0" y="181" width="0.3" height="15.0" fill="rgb(222,193,42)" rx="2" ry="2" />
<text  x="376.02" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1138.5" y="277" width="0.3" height="15.0" fill="rgb(234,3,20)" rx="2" ry="2" />
<text  x="1141.53" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.4" y="229" width="0.2" height="15.0" fill="rgb(219,95,13)" rx="2" ry="2" />
<text  x="53.36" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_keyspace (2 samples, 0.04%)</title><rect x="114.3" y="469" width="0.5" height="15.0" fill="rgb(231,30,32)" rx="2" ry="2" />
<text  x="117.30" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="912.7" y="389" width="0.2" height="15.0" fill="rgb(210,113,24)" rx="2" ry="2" />
<text  x="915.69" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (5 samples, 0.10%)</title><rect x="891.6" y="405" width="1.1" height="15.0" fill="rgb(227,175,26)" rx="2" ry="2" />
<text  x="894.60" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (38 samples, 0.73%)</title><rect x="679.6" y="501" width="8.6" height="15.0" fill="rgb(252,172,24)" rx="2" ry="2" />
<text  x="682.59" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="265.5" y="165" width="0.5" height="15.0" fill="rgb(246,164,0)" rx="2" ry="2" />
<text  x="268.55" y="175.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.19%)</title><rect x="405.4" y="165" width="2.3" height="15.0" fill="rgb(246,191,36)" rx="2" ry="2" />
<text  x="408.45" y="175.5" ></text>
</g>
<g >
<title>sstables::file_writer::close (1 samples, 0.02%)</title><rect x="87.3" y="469" width="0.2" height="15.0" fill="rgb(254,219,26)" rx="2" ry="2" />
<text  x="90.32" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1084.1" y="341" width="0.5" height="15.0" fill="rgb(246,105,3)" rx="2" ry="2" />
<text  x="1087.11" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (18 samples, 0.35%)</title><rect x="59.7" y="293" width="4.0" height="15.0" fill="rgb(218,96,9)" rx="2" ry="2" />
<text  x="62.66" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="577.8" y="421" width="0.2" height="15.0" fill="rgb(252,51,19)" rx="2" ry="2" />
<text  x="580.78" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%)</title><rect x="236.3" y="101" width="2.5" height="15.0" fill="rgb(228,128,50)" rx="2" ry="2" />
<text  x="239.30" y="111.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="931.7" y="405" width="0.3" height="15.0" fill="rgb(253,29,37)" rx="2" ry="2" />
<text  x="934.73" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="201.4" y="261" width="0.4" height="15.0" fill="rgb(254,7,54)" rx="2" ry="2" />
<text  x="204.38" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="515.2" y="213" width="0.4" height="15.0" fill="rgb(253,126,37)" rx="2" ry="2" />
<text  x="518.20" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="54.4" y="245" width="0.5" height="15.0" fill="rgb(249,122,33)" rx="2" ry="2" />
<text  x="57.44" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%)</title><rect x="866.2" y="309" width="0.2" height="15.0" fill="rgb(216,194,32)" rx="2" ry="2" />
<text  x="869.20" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="10.7" y="373" width="0.2" height="15.0" fill="rgb(235,62,0)" rx="2" ry="2" />
<text  x="13.68" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (4 samples, 0.08%)</title><rect x="1122.2" y="421" width="0.9" height="15.0" fill="rgb(221,229,37)" rx="2" ry="2" />
<text  x="1125.20" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="863.0" y="485" width="0.3" height="15.0" fill="rgb(221,137,7)" rx="2" ry="2" />
<text  x="866.03" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="902.0" y="293" width="0.7" height="15.0" fill="rgb(251,35,11)" rx="2" ry="2" />
<text  x="905.03" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="204.8" y="261" width="0.4" height="15.0" fill="rgb(223,229,18)" rx="2" ry="2" />
<text  x="207.78" y="271.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="951.9" y="405" width="0.2" height="15.0" fill="rgb(244,62,38)" rx="2" ry="2" />
<text  x="954.91" y="415.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%)</title><rect x="468.9" y="261" width="0.3" height="15.0" fill="rgb(221,185,23)" rx="2" ry="2" />
<text  x="471.94" y="271.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="950.1" y="405" width="0.2" height="15.0" fill="rgb(226,68,21)" rx="2" ry="2" />
<text  x="953.10" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="818.8" y="277" width="0.2" height="15.0" fill="rgb(241,83,23)" rx="2" ry="2" />
<text  x="821.81" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (3 samples, 0.06%)</title><rect x="1128.1" y="197" width="0.7" height="15.0" fill="rgb(240,128,31)" rx="2" ry="2" />
<text  x="1131.10" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="81.0" y="405" width="0.2" height="15.0" fill="rgb(249,121,49)" rx="2" ry="2" />
<text  x="83.97" y="415.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1131.3" y="245" width="0.2" height="15.0" fill="rgb(237,80,36)" rx="2" ry="2" />
<text  x="1134.27" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="867.8" y="309" width="0.2" height="15.0" fill="rgb(214,228,36)" rx="2" ry="2" />
<text  x="870.79" y="319.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.12%)</title><rect x="1133.3" y="229" width="1.4" height="15.0" fill="rgb(229,99,48)" rx="2" ry="2" />
<text  x="1136.31" y="239.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="88.2" y="501" width="0.3" height="15.0" fill="rgb(220,37,28)" rx="2" ry="2" />
<text  x="91.23" y="511.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="992.0" y="325" width="0.3" height="15.0" fill="rgb(219,148,3)" rx="2" ry="2" />
<text  x="995.05" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1134.2" y="133" width="0.2" height="15.0" fill="rgb(235,175,27)" rx="2" ry="2" />
<text  x="1137.22" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1056.0" y="293" width="0.4" height="15.0" fill="rgb(217,37,19)" rx="2" ry="2" />
<text  x="1058.99" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="1098.6" y="405" width="0.2" height="15.0" fill="rgb(218,143,51)" rx="2" ry="2" />
<text  x="1101.62" y="415.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="60.8" y="245" width="0.4" height="15.0" fill="rgb(232,93,8)" rx="2" ry="2" />
<text  x="63.79" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::prepare_heap (1 samples, 0.02%)</title><rect x="22.9" y="517" width="0.3" height="15.0" fill="rgb(241,79,49)" rx="2" ry="2" />
<text  x="25.92" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="113.9" y="341" width="0.2" height="15.0" fill="rgb(217,213,44)" rx="2" ry="2" />
<text  x="116.85" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="763.5" y="405" width="0.2" height="15.0" fill="rgb(246,22,8)" rx="2" ry="2" />
<text  x="766.49" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="983.2" y="341" width="0.7" height="15.0" fill="rgb(217,170,35)" rx="2" ry="2" />
<text  x="986.21" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="84.6" y="437" width="0.2" height="15.0" fill="rgb(240,157,35)" rx="2" ry="2" />
<text  x="87.60" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%)</title><rect x="1021.8" y="181" width="0.9" height="15.0" fill="rgb(231,72,20)" rx="2" ry="2" />
<text  x="1024.75" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (2 samples, 0.04%)</title><rect x="1085.2" y="357" width="0.5" height="15.0" fill="rgb(243,101,16)" rx="2" ry="2" />
<text  x="1088.24" y="367.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="55.3" y="165" width="0.5" height="15.0" fill="rgb(224,25,16)" rx="2" ry="2" />
<text  x="58.35" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="698.6" y="341" width="0.3" height="15.0" fill="rgb(227,83,35)" rx="2" ry="2" />
<text  x="701.64" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="1110.6" y="373" width="1.2" height="15.0" fill="rgb(246,49,20)" rx="2" ry="2" />
<text  x="1113.64" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.9" y="213" width="0.3" height="15.0" fill="rgb(248,72,3)" rx="2" ry="2" />
<text  x="64.93" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="773.2" y="325" width="0.3" height="15.0" fill="rgb(211,198,5)" rx="2" ry="2" />
<text  x="776.24" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="451.9" y="357" width="2.1" height="15.0" fill="rgb(251,98,19)" rx="2" ry="2" />
<text  x="454.93" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="26.3" y="405" width="0.3" height="15.0" fill="rgb(207,181,35)" rx="2" ry="2" />
<text  x="29.33" y="415.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (3 samples, 0.06%)</title><rect x="869.4" y="293" width="0.7" height="15.0" fill="rgb(212,224,23)" rx="2" ry="2" />
<text  x="872.38" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="53.5" y="309" width="0.5" height="15.0" fill="rgb(229,109,49)" rx="2" ry="2" />
<text  x="56.54" y="319.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (7 samples, 0.13%)</title><rect x="643.8" y="485" width="1.5" height="15.0" fill="rgb(215,119,21)" rx="2" ry="2" />
<text  x="646.76" y="495.5" ></text>
</g>
<g >
<title>db::rp_set::put (1 samples, 0.02%)</title><rect x="1126.1" y="245" width="0.2" height="15.0" fill="rgb(245,137,52)" rx="2" ry="2" />
<text  x="1129.06" y="255.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1132.6" y="277" width="0.3" height="15.0" fill="rgb(252,62,45)" rx="2" ry="2" />
<text  x="1135.63" y="287.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="115.4" y="469" width="0.3" height="15.0" fill="rgb(252,34,48)" rx="2" ry="2" />
<text  x="118.44" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="14.3" y="549" width="0.2" height="15.0" fill="rgb(245,36,6)" rx="2" ry="2" />
<text  x="17.31" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1135.4" y="261" width="3.1" height="15.0" fill="rgb(219,145,48)" rx="2" ry="2" />
<text  x="1138.35" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="112.5" y="485" width="0.4" height="15.0" fill="rgb(249,12,47)" rx="2" ry="2" />
<text  x="115.49" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="47.6" y="197" width="0.7" height="15.0" fill="rgb(221,153,3)" rx="2" ry="2" />
<text  x="50.64" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1135.4" y="245" width="3.1" height="15.0" fill="rgb(225,191,37)" rx="2" ry="2" />
<text  x="1138.35" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="688.9" y="469" width="0.4" height="15.0" fill="rgb(245,71,1)" rx="2" ry="2" />
<text  x="691.89" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (2 samples, 0.04%)</title><rect x="113.6" y="469" width="0.5" height="15.0" fill="rgb(249,189,5)" rx="2" ry="2" />
<text  x="116.62" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="203.6" y="293" width="0.3" height="15.0" fill="rgb(235,92,24)" rx="2" ry="2" />
<text  x="206.64" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (40 samples, 0.77%)</title><rect x="941.3" y="421" width="9.0" height="15.0" fill="rgb(253,225,10)" rx="2" ry="2" />
<text  x="944.26" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.63%)</title><rect x="799.1" y="213" width="7.5" height="15.0" fill="rgb(243,72,18)" rx="2" ry="2" />
<text  x="802.09" y="223.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="280.7" y="197" width="0.3" height="15.0" fill="rgb(244,194,25)" rx="2" ry="2" />
<text  x="283.74" y="207.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (2 samples, 0.04%)</title><rect x="816.1" y="341" width="0.4" height="15.0" fill="rgb(247,151,34)" rx="2" ry="2" />
<text  x="819.09" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::get_deleter (1 samples, 0.02%)</title><rect x="71.2" y="373" width="0.2" height="15.0" fill="rgb(217,199,24)" rx="2" ry="2" />
<text  x="74.22" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="806.6" y="213" width="0.4" height="15.0" fill="rgb(234,168,31)" rx="2" ry="2" />
<text  x="809.57" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="585.3" y="309" width="0.2" height="15.0" fill="rgb(231,169,11)" rx="2" ry="2" />
<text  x="588.26" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1031.0" y="181" width="1.0" height="15.0" fill="rgb(247,214,12)" rx="2" ry="2" />
<text  x="1034.05" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="265.1" y="133" width="0.2" height="15.0" fill="rgb(228,23,0)" rx="2" ry="2" />
<text  x="268.09" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="758.0" y="405" width="0.7" height="15.0" fill="rgb(218,87,52)" rx="2" ry="2" />
<text  x="761.04" y="415.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (3 samples, 0.06%)</title><rect x="226.8" y="133" width="0.7" height="15.0" fill="rgb(207,55,13)" rx="2" ry="2" />
<text  x="229.77" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="329.3" y="277" width="0.2" height="15.0" fill="rgb(224,71,18)" rx="2" ry="2" />
<text  x="332.26" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="29.3" y="341" width="0.2" height="15.0" fill="rgb(240,87,51)" rx="2" ry="2" />
<text  x="32.27" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="207.5" y="245" width="0.7" height="15.0" fill="rgb(231,11,51)" rx="2" ry="2" />
<text  x="210.50" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="12.0" y="405" width="0.7" height="15.0" fill="rgb(215,202,54)" rx="2" ry="2" />
<text  x="15.04" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="28.8" y="421" width="0.2" height="15.0" fill="rgb(246,55,50)" rx="2" ry="2" />
<text  x="31.82" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="793.4" y="261" width="0.2" height="15.0" fill="rgb(238,135,18)" rx="2" ry="2" />
<text  x="796.42" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%)</title><rect x="200.5" y="229" width="0.6" height="15.0" fill="rgb(207,211,24)" rx="2" ry="2" />
<text  x="203.47" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="941.0" y="309" width="0.3" height="15.0" fill="rgb(232,159,18)" rx="2" ry="2" />
<text  x="944.03" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="678.2" y="437" width="0.5" height="15.0" fill="rgb(234,5,43)" rx="2" ry="2" />
<text  x="681.23" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1163.0" y="469" width="0.5" height="15.0" fill="rgb(222,178,47)" rx="2" ry="2" />
<text  x="1166.02" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="469" width="0.2" height="15.0" fill="rgb(230,6,20)" rx="2" ry="2" />
<text  x="13.68" y="479.5" ></text>
</g>
<g >
<title>row::row (149 samples, 2.86%)</title><rect x="226.1" y="149" width="33.8" height="15.0" fill="rgb(243,104,47)" rx="2" ry="2" />
<text  x="229.09" y="159.5" >ro..</text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.13%)</title><rect x="84.8" y="453" width="1.6" height="15.0" fill="rgb(218,183,20)" rx="2" ry="2" />
<text  x="87.83" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (12 samples, 0.23%)</title><rect x="350.8" y="245" width="2.7" height="15.0" fill="rgb(212,106,1)" rx="2" ry="2" />
<text  x="353.80" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="687.3" y="453" width="0.2" height="15.0" fill="rgb(237,49,52)" rx="2" ry="2" />
<text  x="690.30" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (65 samples, 1.25%)</title><rect x="896.1" y="389" width="14.8" height="15.0" fill="rgb(248,71,40)" rx="2" ry="2" />
<text  x="899.13" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.12%)</title><rect x="866.0" y="373" width="1.3" height="15.0" fill="rgb(238,9,39)" rx="2" ry="2" />
<text  x="868.98" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="14.3" y="389" width="0.2" height="15.0" fill="rgb(245,5,11)" rx="2" ry="2" />
<text  x="17.31" y="399.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="866.4" y="325" width="0.3" height="15.0" fill="rgb(223,54,38)" rx="2" ry="2" />
<text  x="869.43" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (1 samples, 0.02%)</title><rect x="1049.0" y="261" width="0.2" height="15.0" fill="rgb(206,15,0)" rx="2" ry="2" />
<text  x="1051.96" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (128 samples, 2.46%)</title><rect x="579.1" y="421" width="29.1" height="15.0" fill="rgb(222,95,2)" rx="2" ry="2" />
<text  x="582.14" y="431.5" >st..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="737.4" y="293" width="0.5" height="15.0" fill="rgb(243,150,11)" rx="2" ry="2" />
<text  x="740.41" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (2 samples, 0.04%)</title><rect x="115.7" y="357" width="0.4" height="15.0" fill="rgb(214,119,43)" rx="2" ry="2" />
<text  x="118.66" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="77.3" y="357" width="0.3" height="15.0" fill="rgb(239,41,21)" rx="2" ry="2" />
<text  x="80.34" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="528.6" y="261" width="1.1" height="15.0" fill="rgb(229,57,11)" rx="2" ry="2" />
<text  x="531.57" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%)</title><rect x="1078.2" y="293" width="0.2" height="15.0" fill="rgb(236,2,47)" rx="2" ry="2" />
<text  x="1081.21" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="948.7" y="389" width="0.3" height="15.0" fill="rgb(228,32,23)" rx="2" ry="2" />
<text  x="951.74" y="399.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="462.8" y="341" width="0.2" height="15.0" fill="rgb(230,101,22)" rx="2" ry="2" />
<text  x="465.82" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="77.1" y="341" width="0.2" height="15.0" fill="rgb(230,117,8)" rx="2" ry="2" />
<text  x="80.12" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="47.6" y="213" width="0.7" height="15.0" fill="rgb(235,87,32)" rx="2" ry="2" />
<text  x="50.64" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (10 samples, 0.19%)</title><rect x="943.8" y="389" width="2.2" height="15.0" fill="rgb(247,128,48)" rx="2" ry="2" />
<text  x="946.75" y="399.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (8 samples, 0.15%)</title><rect x="137.0" y="405" width="1.8" height="15.0" fill="rgb(238,174,21)" rx="2" ry="2" />
<text  x="139.98" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="728.6" y="389" width="0.9" height="15.0" fill="rgb(236,66,27)" rx="2" ry="2" />
<text  x="731.57" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="68.3" y="245" width="0.2" height="15.0" fill="rgb(224,95,35)" rx="2" ry="2" />
<text  x="71.27" y="255.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%)</title><rect x="36.1" y="261" width="0.2" height="15.0" fill="rgb(234,170,31)" rx="2" ry="2" />
<text  x="39.08" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::~deque (2 samples, 0.04%)</title><rect x="28.4" y="357" width="0.4" height="15.0" fill="rgb(206,110,6)" rx="2" ry="2" />
<text  x="31.37" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1132.9" y="245" width="0.2" height="15.0" fill="rgb(222,190,8)" rx="2" ry="2" />
<text  x="1135.86" y="255.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.17%)</title><rect x="84.6" y="469" width="2.0" height="15.0" fill="rgb(252,55,15)" rx="2" ry="2" />
<text  x="87.60" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="59.4" y="261" width="0.3" height="15.0" fill="rgb(219,185,32)" rx="2" ry="2" />
<text  x="62.43" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="1144.4" y="485" width="0.3" height="15.0" fill="rgb(232,133,5)" rx="2" ry="2" />
<text  x="1147.42" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="595.0" y="277" width="0.7" height="15.0" fill="rgb(235,188,29)" rx="2" ry="2" />
<text  x="598.01" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="668.9" y="469" width="0.7" height="15.0" fill="rgb(218,160,28)" rx="2" ry="2" />
<text  x="671.93" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="68.0" y="229" width="0.3" height="15.0" fill="rgb(238,74,54)" rx="2" ry="2" />
<text  x="71.05" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (5 samples, 0.10%)</title><rect x="299.1" y="213" width="1.1" height="15.0" fill="rgb(251,180,34)" rx="2" ry="2" />
<text  x="302.10" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (5 samples, 0.10%)</title><rect x="113.6" y="501" width="1.2" height="15.0" fill="rgb(224,66,35)" rx="2" ry="2" />
<text  x="116.62" y="511.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (1 samples, 0.02%)</title><rect x="1037.2" y="261" width="0.2" height="15.0" fill="rgb(243,94,17)" rx="2" ry="2" />
<text  x="1040.17" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (3 samples, 0.06%)</title><rect x="114.8" y="261" width="0.6" height="15.0" fill="rgb(225,176,42)" rx="2" ry="2" />
<text  x="117.76" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="68.3" y="213" width="0.2" height="15.0" fill="rgb(212,201,9)" rx="2" ry="2" />
<text  x="71.27" y="223.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="87.8" y="565" width="0.2" height="15.0" fill="rgb(250,213,41)" rx="2" ry="2" />
<text  x="90.77" y="575.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.40%)</title><rect x="1125.8" y="293" width="4.8" height="15.0" fill="rgb(252,168,26)" rx="2" ry="2" />
<text  x="1128.83" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="113.6" y="421" width="0.3" height="15.0" fill="rgb(231,193,41)" rx="2" ry="2" />
<text  x="116.62" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="52.6" y="149" width="0.3" height="15.0" fill="rgb(224,20,15)" rx="2" ry="2" />
<text  x="55.63" y="159.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1138.5" y="293" width="0.3" height="15.0" fill="rgb(211,17,28)" rx="2" ry="2" />
<text  x="1141.53" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.4" y="277" width="0.2" height="15.0" fill="rgb(241,199,23)" rx="2" ry="2" />
<text  x="50.41" y="287.5" ></text>
</g>
<g >
<title>from_hex (2 samples, 0.04%)</title><rect x="74.2" y="357" width="0.4" height="15.0" fill="rgb(235,157,47)" rx="2" ry="2" />
<text  x="77.17" y="367.5" ></text>
</g>
<g >
<title>distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%)</title><rect x="698.9" y="389" width="0.2" height="15.0" fill="rgb(233,164,30)" rx="2" ry="2" />
<text  x="701.86" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1080.9" y="341" width="0.7" height="15.0" fill="rgb(221,210,42)" rx="2" ry="2" />
<text  x="1083.93" y="351.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="761.4" y="405" width="1.4" height="15.0" fill="rgb(216,5,0)" rx="2" ry="2" />
<text  x="764.45" y="415.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%)</title><rect x="116.3" y="437" width="0.7" height="15.0" fill="rgb(211,183,25)" rx="2" ry="2" />
<text  x="119.35" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;data_value, std::allocator&lt;data_value&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="113.6" y="245" width="0.3" height="15.0" fill="rgb(214,219,33)" rx="2" ry="2" />
<text  x="116.62" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="980.3" y="341" width="2.7" height="15.0" fill="rgb(236,49,39)" rx="2" ry="2" />
<text  x="983.26" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="856.9" y="341" width="1.1" height="15.0" fill="rgb(253,149,33)" rx="2" ry="2" />
<text  x="859.91" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="14.3" y="597" width="0.2" height="15.0" fill="rgb(246,3,47)" rx="2" ry="2" />
<text  x="17.31" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="865.3" y="405" width="0.2" height="15.0" fill="rgb(207,181,33)" rx="2" ry="2" />
<text  x="868.30" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="36.8" y="245" width="0.6" height="15.0" fill="rgb(226,217,18)" rx="2" ry="2" />
<text  x="39.76" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (3 samples, 0.06%)</title><rect x="78.5" y="325" width="0.7" height="15.0" fill="rgb(225,109,8)" rx="2" ry="2" />
<text  x="81.48" y="335.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="45.1" y="277" width="0.3" height="15.0" fill="rgb(238,110,32)" rx="2" ry="2" />
<text  x="48.15" y="287.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="10.2" y="501" width="0.3" height="15.0" fill="rgb(207,179,14)" rx="2" ry="2" />
<text  x="13.23" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::reset&lt;cql3_parser::CqlParser&gt; (1 samples, 0.02%)</title><rect x="27.7" y="357" width="0.2" height="15.0" fill="rgb(212,185,23)" rx="2" ry="2" />
<text  x="30.69" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="663.0" y="469" width="0.3" height="15.0" fill="rgb(223,151,51)" rx="2" ry="2" />
<text  x="666.04" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%)</title><rect x="262.8" y="101" width="0.5" height="15.0" fill="rgb(226,181,43)" rx="2" ry="2" />
<text  x="265.82" y="111.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="114.8" y="437" width="0.6" height="15.0" fill="rgb(227,142,52)" rx="2" ry="2" />
<text  x="117.76" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (15 samples, 0.29%)</title><rect x="478.9" y="309" width="3.4" height="15.0" fill="rgb(240,128,9)" rx="2" ry="2" />
<text  x="481.92" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (68 samples, 1.31%)</title><rect x="30.4" y="341" width="15.4" height="15.0" fill="rgb(246,195,6)" rx="2" ry="2" />
<text  x="33.41" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.4" y="245" width="0.2" height="15.0" fill="rgb(247,38,2)" rx="2" ry="2" />
<text  x="50.41" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.27%)</title><rect x="836.3" y="437" width="3.1" height="15.0" fill="rgb(229,119,22)" rx="2" ry="2" />
<text  x="839.27" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="115.0" y="245" width="0.2" height="15.0" fill="rgb(252,39,42)" rx="2" ry="2" />
<text  x="117.98" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="53.3" y="277" width="0.2" height="15.0" fill="rgb(219,105,51)" rx="2" ry="2" />
<text  x="56.31" y="287.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (2 samples, 0.04%)</title><rect x="871.0" y="293" width="0.4" height="15.0" fill="rgb(225,151,38)" rx="2" ry="2" />
<text  x="873.96" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%)</title><rect x="838.3" y="373" width="0.5" height="15.0" fill="rgb(240,197,6)" rx="2" ry="2" />
<text  x="841.31" y="383.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="868.9" y="261" width="0.5" height="15.0" fill="rgb(221,108,1)" rx="2" ry="2" />
<text  x="871.92" y="271.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.12%)</title><rect x="1003.4" y="277" width="1.3" height="15.0" fill="rgb(211,21,52)" rx="2" ry="2" />
<text  x="1006.39" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (18 samples, 0.35%)</title><rect x="855.1" y="453" width="4.1" height="15.0" fill="rgb(254,159,26)" rx="2" ry="2" />
<text  x="858.09" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="101" width="0.2" height="15.0" fill="rgb(254,177,53)" rx="2" ry="2" />
<text  x="64.02" y="111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="82.8" y="453" width="0.2" height="15.0" fill="rgb(238,66,11)" rx="2" ry="2" />
<text  x="85.79" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1114.7" y="389" width="0.2" height="15.0" fill="rgb(236,12,43)" rx="2" ry="2" />
<text  x="1117.72" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="116.8" y="245" width="0.2" height="15.0" fill="rgb(209,210,28)" rx="2" ry="2" />
<text  x="119.80" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="561.9" y="309" width="0.7" height="15.0" fill="rgb(211,95,12)" rx="2" ry="2" />
<text  x="564.91" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (23 samples, 0.44%)</title><rect x="275.7" y="229" width="5.3" height="15.0" fill="rgb(244,173,44)" rx="2" ry="2" />
<text  x="278.75" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="712.2" y="437" width="0.3" height="15.0" fill="rgb(209,200,13)" rx="2" ry="2" />
<text  x="715.24" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="449.4" y="261" width="0.7" height="15.0" fill="rgb(209,63,22)" rx="2" ry="2" />
<text  x="452.44" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="647.8" y="485" width="1.2" height="15.0" fill="rgb(239,111,39)" rx="2" ry="2" />
<text  x="650.84" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="306.6" y="261" width="0.2" height="15.0" fill="rgb(218,74,6)" rx="2" ry="2" />
<text  x="309.59" y="271.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="542.4" y="325" width="0.2" height="15.0" fill="rgb(226,115,19)" rx="2" ry="2" />
<text  x="545.41" y="335.5" ></text>
</g>
<g >
<title>seastar::data_sink::put (1 samples, 0.02%)</title><rect x="87.3" y="405" width="0.2" height="15.0" fill="rgb(237,9,20)" rx="2" ry="2" />
<text  x="90.32" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="525.4" y="293" width="0.5" height="15.0" fill="rgb(229,117,3)" rx="2" ry="2" />
<text  x="528.40" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%)</title><rect x="595.7" y="293" width="0.2" height="15.0" fill="rgb(226,20,17)" rx="2" ry="2" />
<text  x="598.69" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="116.6" y="341" width="0.2" height="15.0" fill="rgb(209,130,2)" rx="2" ry="2" />
<text  x="119.57" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="866.0" y="309" width="0.2" height="15.0" fill="rgb(251,188,14)" rx="2" ry="2" />
<text  x="868.98" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="529.3" y="245" width="0.2" height="15.0" fill="rgb(243,78,28)" rx="2" ry="2" />
<text  x="532.25" y="255.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="928.3" y="341" width="1.4" height="15.0" fill="rgb(229,52,47)" rx="2" ry="2" />
<text  x="931.33" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%)</title><rect x="1133.3" y="213" width="1.4" height="15.0" fill="rgb(240,120,20)" rx="2" ry="2" />
<text  x="1136.31" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="102.5" y="437" width="0.2" height="15.0" fill="rgb(212,132,39)" rx="2" ry="2" />
<text  x="105.51" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (14 samples, 0.27%)</title><rect x="1135.4" y="229" width="3.1" height="15.0" fill="rgb(220,46,4)" rx="2" ry="2" />
<text  x="1138.35" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="441.3" y="213" width="0.4" height="15.0" fill="rgb(244,166,39)" rx="2" ry="2" />
<text  x="444.28" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="47.4" y="293" width="0.2" height="15.0" fill="rgb(249,7,52)" rx="2" ry="2" />
<text  x="50.41" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="81.4" y="405" width="0.3" height="15.0" fill="rgb(214,55,9)" rx="2" ry="2" />
<text  x="84.43" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="767.1" y="325" width="0.5" height="15.0" fill="rgb(223,214,25)" rx="2" ry="2" />
<text  x="770.11" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="508.8" y="213" width="0.5" height="15.0" fill="rgb(230,14,22)" rx="2" ry="2" />
<text  x="511.85" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="64.4" y="229" width="0.5" height="15.0" fill="rgb(223,76,34)" rx="2" ry="2" />
<text  x="67.42" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="208.4" y="245" width="0.2" height="15.0" fill="rgb(217,23,25)" rx="2" ry="2" />
<text  x="211.41" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (7 samples, 0.13%)</title><rect x="759.9" y="405" width="1.5" height="15.0" fill="rgb(246,203,0)" rx="2" ry="2" />
<text  x="762.86" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1125.4" y="389" width="6.8" height="15.0" fill="rgb(245,118,40)" rx="2" ry="2" />
<text  x="1128.38" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="800.0" y="149" width="1.6" height="15.0" fill="rgb(218,94,21)" rx="2" ry="2" />
<text  x="802.99" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="59.4" y="277" width="0.3" height="15.0" fill="rgb(210,71,2)" rx="2" ry="2" />
<text  x="62.43" y="287.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (7 samples, 0.13%)</title><rect x="831.5" y="373" width="1.6" height="15.0" fill="rgb(215,2,22)" rx="2" ry="2" />
<text  x="834.51" y="383.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%)</title><rect x="50.6" y="309" width="0.2" height="15.0" fill="rgb(225,1,24)" rx="2" ry="2" />
<text  x="53.59" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1128.3" y="165" width="0.3" height="15.0" fill="rgb(207,3,2)" rx="2" ry="2" />
<text  x="1131.32" y="175.5" ></text>
</g>
<g >
<title>database::find_uuid (20 samples, 0.38%)</title><rect x="827.0" y="357" width="4.5" height="15.0" fill="rgb(230,224,40)" rx="2" ry="2" />
<text  x="829.98" y="367.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (9 samples, 0.17%)</title><rect x="542.6" y="325" width="2.1" height="15.0" fill="rgb(242,204,12)" rx="2" ry="2" />
<text  x="545.63" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="138.8" y="405" width="0.2" height="15.0" fill="rgb(244,107,19)" rx="2" ry="2" />
<text  x="141.79" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%)</title><rect x="24.3" y="517" width="0.2" height="15.0" fill="rgb(224,46,47)" rx="2" ry="2" />
<text  x="27.29" y="527.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (3 samples, 0.06%)</title><rect x="910.9" y="389" width="0.7" height="15.0" fill="rgb(228,122,51)" rx="2" ry="2" />
<text  x="913.87" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1164.4" y="453" width="0.2" height="15.0" fill="rgb(205,147,33)" rx="2" ry="2" />
<text  x="1167.38" y="463.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="115.7" y="373" width="0.4" height="15.0" fill="rgb(252,211,43)" rx="2" ry="2" />
<text  x="118.66" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="27.5" y="389" width="0.2" height="15.0" fill="rgb(229,167,34)" rx="2" ry="2" />
<text  x="30.46" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="837.9" y="357" width="0.4" height="15.0" fill="rgb(237,38,25)" rx="2" ry="2" />
<text  x="840.86" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (15 samples, 0.29%)</title><rect x="10.9" y="597" width="3.4" height="15.0" fill="rgb(229,218,49)" rx="2" ry="2" />
<text  x="13.91" y="607.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%)</title><rect x="600.9" y="357" width="1.1" height="15.0" fill="rgb(216,53,40)" rx="2" ry="2" />
<text  x="603.91" y="367.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="59.0" y="197" width="0.4" height="15.0" fill="rgb(209,148,3)" rx="2" ry="2" />
<text  x="61.98" y="207.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (5 samples, 0.10%)</title><rect x="85.3" y="357" width="1.1" height="15.0" fill="rgb(205,43,23)" rx="2" ry="2" />
<text  x="88.28" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="52.2" y="293" width="0.2" height="15.0" fill="rgb(211,152,50)" rx="2" ry="2" />
<text  x="55.18" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="88.0" y="501" width="0.2" height="15.0" fill="rgb(236,200,30)" rx="2" ry="2" />
<text  x="91.00" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flush_reader::fill_buffer (2 samples, 0.04%)</title><rect x="11.4" y="437" width="0.4" height="15.0" fill="rgb(238,33,26)" rx="2" ry="2" />
<text  x="14.36" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="786.8" y="325" width="0.3" height="15.0" fill="rgb(212,24,36)" rx="2" ry="2" />
<text  x="789.84" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (227 samples, 4.36%)</title><rect x="224.1" y="197" width="51.4" height="15.0" fill="rgb(233,60,15)" rx="2" ry="2" />
<text  x="227.05" y="207.5" >parti..</text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%)</title><rect x="850.8" y="373" width="0.7" height="15.0" fill="rgb(248,61,29)" rx="2" ry="2" />
<text  x="853.78" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="889.3" y="421" width="0.3" height="15.0" fill="rgb(224,109,51)" rx="2" ry="2" />
<text  x="892.33" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.12%)</title><rect x="675.3" y="485" width="1.3" height="15.0" fill="rgb(205,97,29)" rx="2" ry="2" />
<text  x="678.28" y="495.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (21 samples, 0.40%)</title><rect x="1125.8" y="309" width="4.8" height="15.0" fill="rgb(235,196,17)" rx="2" ry="2" />
<text  x="1128.83" y="319.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="556.2" y="293" width="0.7" height="15.0" fill="rgb(253,224,2)" rx="2" ry="2" />
<text  x="559.24" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (14 samples, 0.27%)</title><rect x="1164.2" y="469" width="3.1" height="15.0" fill="rgb(217,104,45)" rx="2" ry="2" />
<text  x="1167.15" y="479.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="767.8" y="309" width="0.2" height="15.0" fill="rgb(211,186,40)" rx="2" ry="2" />
<text  x="770.79" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="215.2" y="197" width="1.8" height="15.0" fill="rgb(248,206,9)" rx="2" ry="2" />
<text  x="218.21" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="654.9" y="485" width="0.4" height="15.0" fill="rgb(251,120,26)" rx="2" ry="2" />
<text  x="657.87" y="495.5" ></text>
</g>
<g >
<title>database::parse_system_tables (1 samples, 0.02%)</title><rect x="87.8" y="261" width="0.2" height="15.0" fill="rgb(226,175,53)" rx="2" ry="2" />
<text  x="90.77" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (31 samples, 0.60%)</title><rect x="799.5" y="197" width="7.1" height="15.0" fill="rgb(231,125,24)" rx="2" ry="2" />
<text  x="802.54" y="207.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (191 samples, 3.67%)</title><rect x="776.0" y="389" width="43.3" height="15.0" fill="rgb(244,59,20)" rx="2" ry="2" />
<text  x="778.96" y="399.5" >std:..</text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.10%)</title><rect x="844.4" y="373" width="1.2" height="15.0" fill="rgb(242,184,43)" rx="2" ry="2" />
<text  x="847.44" y="383.5" ></text>
</g>
<g >
<title>canonical_mutation::canonical_mutation (1 samples, 0.02%)</title><rect x="116.1" y="373" width="0.2" height="15.0" fill="rgb(208,52,14)" rx="2" ry="2" />
<text  x="119.12" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.10%)</title><rect x="801.8" y="133" width="1.1" height="15.0" fill="rgb(248,195,26)" rx="2" ry="2" />
<text  x="804.81" y="143.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (6 samples, 0.12%)</title><rect x="408.9" y="213" width="1.3" height="15.0" fill="rgb(209,182,42)" rx="2" ry="2" />
<text  x="411.85" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="23.4" y="341" width="0.2" height="15.0" fill="rgb(207,199,29)" rx="2" ry="2" />
<text  x="26.38" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="12.0" y="325" width="0.3" height="15.0" fill="rgb(215,129,8)" rx="2" ry="2" />
<text  x="15.04" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="68.0" y="181" width="0.3" height="15.0" fill="rgb(205,31,19)" rx="2" ry="2" />
<text  x="71.05" y="191.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (4 samples, 0.08%)</title><rect x="1130.8" y="277" width="0.9" height="15.0" fill="rgb(208,103,17)" rx="2" ry="2" />
<text  x="1133.82" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="105.2" y="437" width="0.5" height="15.0" fill="rgb(254,147,33)" rx="2" ry="2" />
<text  x="108.23" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (7 samples, 0.13%)</title><rect x="817.7" y="341" width="1.6" height="15.0" fill="rgb(229,64,31)" rx="2" ry="2" />
<text  x="820.68" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="181" width="0.2" height="15.0" fill="rgb(238,164,8)" rx="2" ry="2" />
<text  x="64.02" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="32.0" y="213" width="0.2" height="15.0" fill="rgb(250,1,47)" rx="2" ry="2" />
<text  x="34.99" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="46.3" y="213" width="0.7" height="15.0" fill="rgb(235,11,1)" rx="2" ry="2" />
<text  x="49.28" y="223.5" ></text>
</g>
<g >
<title>checked_file_impl::write_dma (1 samples, 0.02%)</title><rect x="87.3" y="293" width="0.2" height="15.0" fill="rgb(217,166,43)" rx="2" ry="2" />
<text  x="90.32" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1166.4" y="421" width="0.2" height="15.0" fill="rgb(231,126,49)" rx="2" ry="2" />
<text  x="1169.42" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="741.5" y="293" width="0.4" height="15.0" fill="rgb(244,25,38)" rx="2" ry="2" />
<text  x="744.49" y="303.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (14 samples, 0.27%)</title><rect x="557.4" y="309" width="3.1" height="15.0" fill="rgb(227,226,33)" rx="2" ry="2" />
<text  x="560.37" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="72.4" y="437" width="0.2" height="15.0" fill="rgb(219,177,19)" rx="2" ry="2" />
<text  x="75.36" y="447.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="590.9" y="277" width="1.4" height="15.0" fill="rgb(207,41,26)" rx="2" ry="2" />
<text  x="593.93" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="870.5" y="245" width="0.2" height="15.0" fill="rgb(224,195,12)" rx="2" ry="2" />
<text  x="873.51" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.4" y="309" width="0.2" height="15.0" fill="rgb(231,85,41)" rx="2" ry="2" />
<text  x="48.37" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="337.9" y="293" width="0.7" height="15.0" fill="rgb(237,4,40)" rx="2" ry="2" />
<text  x="340.88" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="407.9" y="197" width="0.3" height="15.0" fill="rgb(223,108,7)" rx="2" ry="2" />
<text  x="410.94" y="207.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.12%)</title><rect x="534.0" y="213" width="1.4" height="15.0" fill="rgb(210,15,13)" rx="2" ry="2" />
<text  x="537.02" y="223.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="10.7" y="405" width="0.2" height="15.0" fill="rgb(230,209,10)" rx="2" ry="2" />
<text  x="13.68" y="415.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1129.5" y="197" width="0.2" height="15.0" fill="rgb(241,69,0)" rx="2" ry="2" />
<text  x="1132.46" y="207.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%)</title><rect x="13.4" y="293" width="0.2" height="15.0" fill="rgb(248,193,7)" rx="2" ry="2" />
<text  x="16.40" y="303.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="690.9" y="453" width="0.3" height="15.0" fill="rgb(233,62,11)" rx="2" ry="2" />
<text  x="693.93" y="463.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="326.5" y="277" width="1.9" height="15.0" fill="rgb(242,219,36)" rx="2" ry="2" />
<text  x="329.54" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="47.4" y="213" width="0.2" height="15.0" fill="rgb(214,109,50)" rx="2" ry="2" />
<text  x="50.41" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="1049.2" y="293" width="0.2" height="15.0" fill="rgb(219,208,47)" rx="2" ry="2" />
<text  x="1052.19" y="303.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (2 samples, 0.04%)</title><rect x="867.6" y="373" width="0.4" height="15.0" fill="rgb(222,189,48)" rx="2" ry="2" />
<text  x="870.56" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="32.7" y="309" width="0.4" height="15.0" fill="rgb(211,41,4)" rx="2" ry="2" />
<text  x="35.67" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="711.8" y="453" width="0.7" height="15.0" fill="rgb(217,229,24)" rx="2" ry="2" />
<text  x="714.79" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1039.7" y="277" width="0.2" height="15.0" fill="rgb(220,205,39)" rx="2" ry="2" />
<text  x="1042.67" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="680.7" y="469" width="0.7" height="15.0" fill="rgb(209,101,18)" rx="2" ry="2" />
<text  x="683.72" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="915.2" y="341" width="1.6" height="15.0" fill="rgb(253,52,0)" rx="2" ry="2" />
<text  x="918.18" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="509.8" y="181" width="0.2" height="15.0" fill="rgb(206,101,13)" rx="2" ry="2" />
<text  x="512.75" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (14 samples, 0.27%)</title><rect x="868.5" y="373" width="3.1" height="15.0" fill="rgb(250,185,26)" rx="2" ry="2" />
<text  x="871.47" y="383.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (4 samples, 0.08%)</title><rect x="622.9" y="421" width="0.9" height="15.0" fill="rgb(217,4,7)" rx="2" ry="2" />
<text  x="625.90" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="700.0" y="357" width="0.2" height="15.0" fill="rgb(237,106,37)" rx="2" ry="2" />
<text  x="703.00" y="367.5" ></text>
</g>
<g >
<title>auth::get_permissions (110 samples, 2.11%)</title><rect x="788.0" y="309" width="24.9" height="15.0" fill="rgb(220,216,34)" rx="2" ry="2" />
<text  x="790.97" y="319.5" >a..</text>
</g>
<g >
<title>mutation_querier::consume (192 samples, 3.69%)</title><rect x="364.2" y="197" width="43.5" height="15.0" fill="rgb(253,82,39)" rx="2" ry="2" />
<text  x="367.18" y="207.5" >muta..</text>
</g>
<g >
<title>seastar::reactor::task_queue::register_stats (1 samples, 0.02%)</title><rect x="117.0" y="389" width="0.3" height="15.0" fill="rgb(219,116,31)" rx="2" ry="2" />
<text  x="120.03" y="399.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (4 samples, 0.08%)</title><rect x="929.9" y="389" width="0.9" height="15.0" fill="rgb(249,8,45)" rx="2" ry="2" />
<text  x="932.92" y="399.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="602.0" y="357" width="1.2" height="15.0" fill="rgb(222,139,28)" rx="2" ry="2" />
<text  x="605.04" y="367.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (1 samples, 0.02%)</title><rect x="548.8" y="341" width="0.2" height="15.0" fill="rgb(211,169,27)" rx="2" ry="2" />
<text  x="551.75" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="87.8" y="293" width="0.2" height="15.0" fill="rgb(240,100,46)" rx="2" ry="2" />
<text  x="90.77" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="805.9" y="101" width="0.7" height="15.0" fill="rgb(235,100,40)" rx="2" ry="2" />
<text  x="808.89" y="111.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::metric_id (1 samples, 0.02%)</title><rect x="117.0" y="325" width="0.3" height="15.0" fill="rgb(231,108,10)" rx="2" ry="2" />
<text  x="120.03" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="54.9" y="277" width="0.2" height="15.0" fill="rgb(246,114,29)" rx="2" ry="2" />
<text  x="57.90" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1052.4" y="325" width="0.6" height="15.0" fill="rgb(220,140,26)" rx="2" ry="2" />
<text  x="1055.36" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="783.0" y="293" width="0.4" height="15.0" fill="rgb(242,168,37)" rx="2" ry="2" />
<text  x="785.99" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="644.2" y="469" width="0.5" height="15.0" fill="rgb(208,184,38)" rx="2" ry="2" />
<text  x="647.22" y="479.5" ></text>
</g>
<g >
<title>position_in_partition::tri_compare::compare&lt;position_in_partition_view, position_in_partition_view&gt; (1 samples, 0.02%)</title><rect x="869.8" y="229" width="0.3" height="15.0" fill="rgb(232,168,2)" rx="2" ry="2" />
<text  x="872.83" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="81.0" y="373" width="0.2" height="15.0" fill="rgb(237,14,21)" rx="2" ry="2" />
<text  x="83.97" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (14 samples, 0.27%)</title><rect x="819.9" y="389" width="3.2" height="15.0" fill="rgb(251,41,22)" rx="2" ry="2" />
<text  x="822.95" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="454.7" y="357" width="0.2" height="15.0" fill="rgb(212,54,36)" rx="2" ry="2" />
<text  x="457.65" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="325.2" y="293" width="0.2" height="15.0" fill="rgb(242,45,43)" rx="2" ry="2" />
<text  x="328.18" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;seastar::metrics::impl::registered_metric&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="700.0" y="229" width="0.2" height="15.0" fill="rgb(227,160,24)" rx="2" ry="2" />
<text  x="703.00" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="116.3" y="405" width="0.5" height="15.0" fill="rgb(210,135,13)" rx="2" ry="2" />
<text  x="119.35" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="53.5" y="165" width="0.3" height="15.0" fill="rgb(226,1,3)" rx="2" ry="2" />
<text  x="56.54" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="597.1" y="309" width="0.2" height="15.0" fill="rgb(251,63,28)" rx="2" ry="2" />
<text  x="600.05" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1150.5" y="421" width="0.7" height="15.0" fill="rgb(205,88,49)" rx="2" ry="2" />
<text  x="1153.55" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="67.4" y="261" width="0.2" height="15.0" fill="rgb(251,209,10)" rx="2" ry="2" />
<text  x="70.37" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.37%)</title><rect x="752.1" y="341" width="4.4" height="15.0" fill="rgb(231,221,1)" rx="2" ry="2" />
<text  x="755.15" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1028.1" y="229" width="0.2" height="15.0" fill="rgb(221,24,54)" rx="2" ry="2" />
<text  x="1031.10" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (3 samples, 0.06%)</title><rect x="129.7" y="437" width="0.7" height="15.0" fill="rgb(252,16,16)" rx="2" ry="2" />
<text  x="132.72" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="982.5" y="277" width="0.3" height="15.0" fill="rgb(243,218,52)" rx="2" ry="2" />
<text  x="985.52" y="287.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="116.3" y="373" width="0.3" height="15.0" fill="rgb(232,118,11)" rx="2" ry="2" />
<text  x="119.35" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="431.8" y="245" width="0.4" height="15.0" fill="rgb(208,161,4)" rx="2" ry="2" />
<text  x="434.75" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="949.2" y="389" width="0.4" height="15.0" fill="rgb(233,65,54)" rx="2" ry="2" />
<text  x="952.19" y="399.5" ></text>
</g>
<g >
<title>sstables::write&lt;unsigned char, bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="12.9" y="309" width="0.3" height="15.0" fill="rgb(247,223,47)" rx="2" ry="2" />
<text  x="15.95" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="342.2" y="245" width="0.7" height="15.0" fill="rgb(228,40,4)" rx="2" ry="2" />
<text  x="345.19" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (16 samples, 0.31%)</title><rect x="571.0" y="373" width="3.6" height="15.0" fill="rgb(231,27,33)" rx="2" ry="2" />
<text  x="573.98" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="116.1" y="261" width="0.2" height="15.0" fill="rgb(214,186,44)" rx="2" ry="2" />
<text  x="119.12" y="271.5" ></text>
</g>
<g >
<title>seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="117.0" y="485" width="0.3" height="15.0" fill="rgb(252,197,33)" rx="2" ry="2" />
<text  x="120.03" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="68.3" y="197" width="0.2" height="15.0" fill="rgb(246,180,51)" rx="2" ry="2" />
<text  x="71.27" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="640.1" y="437" width="0.3" height="15.0" fill="rgb(212,215,41)" rx="2" ry="2" />
<text  x="643.13" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="1042.6" y="229" width="0.5" height="15.0" fill="rgb(230,48,13)" rx="2" ry="2" />
<text  x="1045.61" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::resize (1 samples, 0.02%)</title><rect x="86.9" y="469" width="0.2" height="15.0" fill="rgb(211,163,22)" rx="2" ry="2" />
<text  x="89.87" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1143.3" y="469" width="0.2" height="15.0" fill="rgb(219,21,51)" rx="2" ry="2" />
<text  x="1146.29" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="808.8" y="229" width="0.3" height="15.0" fill="rgb(220,122,1)" rx="2" ry="2" />
<text  x="811.84" y="239.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%)</title><rect x="699.1" y="421" width="0.2" height="15.0" fill="rgb(224,172,2)" rx="2" ry="2" />
<text  x="702.09" y="431.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%)</title><rect x="69.0" y="325" width="0.2" height="15.0" fill="rgb(242,227,12)" rx="2" ry="2" />
<text  x="71.95" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (7 samples, 0.13%)</title><rect x="771.9" y="373" width="1.6" height="15.0" fill="rgb(247,227,41)" rx="2" ry="2" />
<text  x="774.88" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="673.2" y="469" width="0.3" height="15.0" fill="rgb(234,100,50)" rx="2" ry="2" />
<text  x="676.24" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.52%)</title><rect x="1132.6" y="373" width="6.2" height="15.0" fill="rgb(228,161,42)" rx="2" ry="2" />
<text  x="1135.63" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="831.7" y="309" width="0.3" height="15.0" fill="rgb(228,229,21)" rx="2" ry="2" />
<text  x="834.74" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="868.9" y="229" width="0.5" height="15.0" fill="rgb(244,65,38)" rx="2" ry="2" />
<text  x="871.92" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (7 samples, 0.13%)</title><rect x="814.3" y="325" width="1.6" height="15.0" fill="rgb(249,147,21)" rx="2" ry="2" />
<text  x="817.28" y="335.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="23.8" y="421" width="0.3" height="15.0" fill="rgb(247,88,18)" rx="2" ry="2" />
<text  x="26.83" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (6 samples, 0.12%)</title><rect x="12.7" y="469" width="1.4" height="15.0" fill="rgb(235,64,47)" rx="2" ry="2" />
<text  x="15.72" y="479.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (3 samples, 0.06%)</title><rect x="103.6" y="405" width="0.7" height="15.0" fill="rgb(210,163,54)" rx="2" ry="2" />
<text  x="106.65" y="415.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1129.9" y="229" width="0.2" height="15.0" fill="rgb(222,124,52)" rx="2" ry="2" />
<text  x="1132.91" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="114.1" y="453" width="0.2" height="15.0" fill="rgb(220,61,23)" rx="2" ry="2" />
<text  x="117.08" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (5 samples, 0.10%)</title><rect x="1024.7" y="149" width="1.1" height="15.0" fill="rgb(208,16,34)" rx="2" ry="2" />
<text  x="1027.70" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_aligned (1 samples, 0.02%)</title><rect x="88.0" y="597" width="0.2" height="15.0" fill="rgb(230,92,14)" rx="2" ry="2" />
<text  x="91.00" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="87.8" y="197" width="0.2" height="15.0" fill="rgb(246,217,22)" rx="2" ry="2" />
<text  x="90.77" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (9 samples, 0.17%)</title><rect x="664.2" y="453" width="2.0" height="15.0" fill="rgb(232,69,41)" rx="2" ry="2" />
<text  x="667.17" y="463.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (3 samples, 0.06%)</title><rect x="83.5" y="437" width="0.6" height="15.0" fill="rgb(227,8,0)" rx="2" ry="2" />
<text  x="86.47" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (7 samples, 0.13%)</title><rect x="782.1" y="325" width="1.6" height="15.0" fill="rgb(225,159,15)" rx="2" ry="2" />
<text  x="785.08" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="85.3" y="389" width="1.1" height="15.0" fill="rgb(226,9,22)" rx="2" ry="2" />
<text  x="88.28" y="399.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="113.6" y="389" width="0.3" height="15.0" fill="rgb(234,89,41)" rx="2" ry="2" />
<text  x="116.62" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_eofToken (1 samples, 0.02%)</title><rect x="29.0" y="357" width="0.3" height="15.0" fill="rgb(227,147,47)" rx="2" ry="2" />
<text  x="32.05" y="367.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%)</title><rect x="73.3" y="453" width="0.2" height="15.0" fill="rgb(244,162,36)" rx="2" ry="2" />
<text  x="76.26" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (15 samples, 0.29%)</title><rect x="1095.2" y="373" width="3.4" height="15.0" fill="rgb(239,79,21)" rx="2" ry="2" />
<text  x="1098.22" y="383.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="115.7" y="389" width="0.4" height="15.0" fill="rgb(245,115,9)" rx="2" ry="2" />
<text  x="118.66" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1089.6" y="405" width="0.4" height="15.0" fill="rgb(215,205,50)" rx="2" ry="2" />
<text  x="1092.55" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="52.2" y="165" width="0.2" height="15.0" fill="rgb(225,223,5)" rx="2" ry="2" />
<text  x="55.18" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="99.8" y="485" width="0.2" height="15.0" fill="rgb(245,195,26)" rx="2" ry="2" />
<text  x="102.79" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1036.5" y="261" width="0.2" height="15.0" fill="rgb(214,177,14)" rx="2" ry="2" />
<text  x="1039.49" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="12.0" y="293" width="0.3" height="15.0" fill="rgb(247,68,27)" rx="2" ry="2" />
<text  x="15.04" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="848.5" y="389" width="1.2" height="15.0" fill="rgb(242,190,35)" rx="2" ry="2" />
<text  x="851.52" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="877.3" y="453" width="0.2" height="15.0" fill="rgb(208,164,10)" rx="2" ry="2" />
<text  x="880.31" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%)</title><rect x="142.9" y="453" width="0.4" height="15.0" fill="rgb(242,192,40)" rx="2" ry="2" />
<text  x="145.87" y="463.5" ></text>
</g>
<g >
<title>sstables::sstable::make_component_file_writer (1 samples, 0.02%)</title><rect x="88.0" y="389" width="0.2" height="15.0" fill="rgb(218,142,12)" rx="2" ry="2" />
<text  x="91.00" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1126.7" y="149" width="0.3" height="15.0" fill="rgb(228,5,5)" rx="2" ry="2" />
<text  x="1129.74" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="927.4" y="341" width="0.3" height="15.0" fill="rgb(234,225,24)" rx="2" ry="2" />
<text  x="930.43" y="351.5" ></text>
</g>
<g >
<title>auth::resource::parent (14 samples, 0.27%)</title><rect x="783.7" y="325" width="3.1" height="15.0" fill="rgb(206,39,10)" rx="2" ry="2" />
<text  x="786.67" y="335.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="866.9" y="309" width="0.2" height="15.0" fill="rgb(245,192,48)" rx="2" ry="2" />
<text  x="869.88" y="319.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (3 samples, 0.06%)</title><rect x="841.7" y="437" width="0.7" height="15.0" fill="rgb(223,90,31)" rx="2" ry="2" />
<text  x="844.71" y="447.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1130.8" y="261" width="0.5" height="15.0" fill="rgb(226,49,48)" rx="2" ry="2" />
<text  x="1133.82" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="873.0" y="421" width="0.2" height="15.0" fill="rgb(251,19,0)" rx="2" ry="2" />
<text  x="876.01" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="264.4" y="117" width="0.5" height="15.0" fill="rgb(213,149,18)" rx="2" ry="2" />
<text  x="267.41" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="1046.5" y="309" width="1.3" height="15.0" fill="rgb(222,5,7)" rx="2" ry="2" />
<text  x="1049.47" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="478.2" y="293" width="0.3" height="15.0" fill="rgb(226,147,44)" rx="2" ry="2" />
<text  x="481.24" y="303.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%)</title><rect x="645.3" y="501" width="0.3" height="15.0" fill="rgb(225,218,34)" rx="2" ry="2" />
<text  x="648.35" y="511.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%)</title><rect x="716.8" y="421" width="0.2" height="15.0" fill="rgb(230,43,53)" rx="2" ry="2" />
<text  x="719.78" y="431.5" ></text>
</g>
<g >
<title>table::query (4 samples, 0.08%)</title><rect x="1167.8" y="501" width="0.9" height="15.0" fill="rgb(231,202,37)" rx="2" ry="2" />
<text  x="1170.78" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (572 samples, 10.99%)</title><rect x="958.9" y="389" width="129.7" height="15.0" fill="rgb(221,73,51)" rx="2" ry="2" />
<text  x="961.94" y="399.5" >service::storage..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="585.7" y="277" width="0.5" height="15.0" fill="rgb(249,58,43)" rx="2" ry="2" />
<text  x="588.71" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="791.6" y="245" width="1.6" height="15.0" fill="rgb(247,204,38)" rx="2" ry="2" />
<text  x="794.60" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (14 samples, 0.27%)</title><rect x="77.6" y="421" width="3.1" height="15.0" fill="rgb(206,106,16)" rx="2" ry="2" />
<text  x="80.57" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (28 samples, 0.54%)</title><rect x="242.9" y="85" width="6.3" height="15.0" fill="rgb(232,103,16)" rx="2" ry="2" />
<text  x="245.87" y="95.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="69.9" y="357" width="0.2" height="15.0" fill="rgb(252,40,44)" rx="2" ry="2" />
<text  x="72.86" y="367.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.13%)</title><rect x="552.8" y="277" width="1.6" height="15.0" fill="rgb(231,142,10)" rx="2" ry="2" />
<text  x="555.84" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="117.0" y="309" width="0.3" height="15.0" fill="rgb(230,69,36)" rx="2" ry="2" />
<text  x="120.03" y="319.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="23.8" y="389" width="0.3" height="15.0" fill="rgb(219,43,3)" rx="2" ry="2" />
<text  x="26.83" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%)</title><rect x="115.7" y="437" width="0.4" height="15.0" fill="rgb(220,130,0)" rx="2" ry="2" />
<text  x="118.66" y="447.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="23.4" y="549" width="0.2" height="15.0" fill="rgb(219,106,12)" rx="2" ry="2" />
<text  x="26.38" y="559.5" ></text>
</g>
<g >
<title>free (8 samples, 0.15%)</title><rect x="438.3" y="181" width="1.8" height="15.0" fill="rgb(239,180,0)" rx="2" ry="2" />
<text  x="441.33" y="191.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="12.9" y="373" width="0.7" height="15.0" fill="rgb(205,227,43)" rx="2" ry="2" />
<text  x="15.95" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="66.7" y="213" width="0.2" height="15.0" fill="rgb(225,41,45)" rx="2" ry="2" />
<text  x="69.69" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="798.9" y="197" width="0.2" height="15.0" fill="rgb(253,225,35)" rx="2" ry="2" />
<text  x="801.86" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (196 samples, 3.77%)</title><rect x="999.1" y="293" width="44.4" height="15.0" fill="rgb(214,189,31)" rx="2" ry="2" />
<text  x="1002.08" y="303.5" >serv..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="805.7" y="85" width="0.2" height="15.0" fill="rgb(222,119,48)" rx="2" ry="2" />
<text  x="808.66" y="95.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (28 samples, 0.54%)</title><rect x="1020.8" y="213" width="6.4" height="15.0" fill="rgb(244,25,0)" rx="2" ry="2" />
<text  x="1023.85" y="223.5" ></text>
</g>
<g >
<title>locator::simple_snitch::get_datacenter (1 samples, 0.02%)</title><rect x="1133.1" y="245" width="0.2" height="15.0" fill="rgb(251,1,50)" rx="2" ry="2" />
<text  x="1136.09" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="87.8" y="165" width="0.2" height="15.0" fill="rgb(205,202,44)" rx="2" ry="2" />
<text  x="90.77" y="175.5" ></text>
</g>
<g >
<title>query_state::query_state (21 samples, 0.40%)</title><rect x="617.5" y="437" width="4.7" height="15.0" fill="rgb(212,172,53)" rx="2" ry="2" />
<text  x="620.46" y="447.5" ></text>
</g>
<g >
<title>table::set_hit_rate (7 samples, 0.13%)</title><rect x="718.4" y="453" width="1.6" height="15.0" fill="rgb(222,197,0)" rx="2" ry="2" />
<text  x="721.36" y="463.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%)</title><rect x="1117.4" y="405" width="0.3" height="15.0" fill="rgb(248,0,27)" rx="2" ry="2" />
<text  x="1120.44" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="442.0" y="213" width="0.2" height="15.0" fill="rgb(253,138,49)" rx="2" ry="2" />
<text  x="444.96" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="894.5" y="373" width="0.7" height="15.0" fill="rgb(207,3,25)" rx="2" ry="2" />
<text  x="897.55" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%)</title><rect x="861.9" y="485" width="0.4" height="15.0" fill="rgb(226,83,39)" rx="2" ry="2" />
<text  x="864.89" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%)</title><rect x="55.3" y="261" width="1.9" height="15.0" fill="rgb(206,55,28)" rx="2" ry="2" />
<text  x="58.35" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="850.6" y="389" width="3.4" height="15.0" fill="rgb(236,118,21)" rx="2" ry="2" />
<text  x="853.56" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="66.5" y="293" width="0.2" height="15.0" fill="rgb(234,117,0)" rx="2" ry="2" />
<text  x="69.46" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.12%)</title><rect x="62.2" y="245" width="1.3" height="15.0" fill="rgb(236,71,30)" rx="2" ry="2" />
<text  x="65.15" y="255.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (17 samples, 0.33%)</title><rect x="713.8" y="437" width="3.9" height="15.0" fill="rgb(225,227,3)" rx="2" ry="2" />
<text  x="716.83" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (595 samples, 11.43%)</title><rect x="181.0" y="357" width="134.9" height="15.0" fill="rgb(215,173,15)" rx="2" ry="2" />
<text  x="183.97" y="367.5" >mutation_fragment..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (16 samples, 0.31%)</title><rect x="571.0" y="357" width="3.6" height="15.0" fill="rgb(205,21,5)" rx="2" ry="2" />
<text  x="573.98" y="367.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="27.9" y="341" width="0.2" height="15.0" fill="rgb(249,192,13)" rx="2" ry="2" />
<text  x="30.91" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="85.3" y="309" width="0.7" height="15.0" fill="rgb(229,208,47)" rx="2" ry="2" />
<text  x="88.28" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (2 samples, 0.04%)</title><rect x="626.8" y="437" width="0.4" height="15.0" fill="rgb(222,213,1)" rx="2" ry="2" />
<text  x="629.76" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="47.9" y="181" width="0.4" height="15.0" fill="rgb(216,151,17)" rx="2" ry="2" />
<text  x="50.87" y="191.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="510.0" y="197" width="0.2" height="15.0" fill="rgb(225,61,28)" rx="2" ry="2" />
<text  x="512.98" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="47.6" y="181" width="0.3" height="15.0" fill="rgb(249,117,30)" rx="2" ry="2" />
<text  x="50.64" y="191.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="83.2" y="421" width="0.3" height="15.0" fill="rgb(249,63,11)" rx="2" ry="2" />
<text  x="86.24" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="834.9" y="421" width="0.5" height="15.0" fill="rgb(205,8,34)" rx="2" ry="2" />
<text  x="837.91" y="431.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.29%)</title><rect x="562.6" y="405" width="3.4" height="15.0" fill="rgb(241,159,43)" rx="2" ry="2" />
<text  x="565.59" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="113.6" y="453" width="0.3" height="15.0" fill="rgb(244,59,23)" rx="2" ry="2" />
<text  x="116.62" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="646.9" y="469" width="0.3" height="15.0" fill="rgb(234,13,35)" rx="2" ry="2" />
<text  x="649.94" y="479.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (8 samples, 0.15%)</title><rect x="10.9" y="469" width="1.8" height="15.0" fill="rgb(237,152,7)" rx="2" ry="2" />
<text  x="13.91" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="566.0" y="405" width="0.2" height="15.0" fill="rgb(217,144,49)" rx="2" ry="2" />
<text  x="568.99" y="415.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (6 samples, 0.12%)</title><rect x="788.4" y="293" width="1.4" height="15.0" fill="rgb(230,104,49)" rx="2" ry="2" />
<text  x="791.43" y="303.5" ></text>
</g>
<g >
<title>mutation::data::data (2 samples, 0.04%)</title><rect x="871.0" y="309" width="0.4" height="15.0" fill="rgb(252,92,41)" rx="2" ry="2" />
<text  x="873.96" y="319.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="116.3" y="341" width="0.3" height="15.0" fill="rgb(237,196,4)" rx="2" ry="2" />
<text  x="119.35" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1125.4" y="437" width="6.8" height="15.0" fill="rgb(229,154,37)" rx="2" ry="2" />
<text  x="1128.38" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (571 samples, 10.97%)</title><rect x="729.9" y="469" width="129.5" height="15.0" fill="rgb(250,223,6)" rx="2" ry="2" />
<text  x="732.93" y="479.5" >single_node_cql_..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="914.0" y="341" width="0.3" height="15.0" fill="rgb(210,194,16)" rx="2" ry="2" />
<text  x="917.05" y="351.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="87.1" y="533" width="0.2" height="15.0" fill="rgb(233,4,5)" rx="2" ry="2" />
<text  x="90.09" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (16 samples, 0.31%)</title><rect x="277.1" y="197" width="3.6" height="15.0" fill="rgb(236,132,29)" rx="2" ry="2" />
<text  x="280.11" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="858.5" y="421" width="0.7" height="15.0" fill="rgb(233,2,32)" rx="2" ry="2" />
<text  x="861.49" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="786.2" y="277" width="0.4" height="15.0" fill="rgb(251,166,38)" rx="2" ry="2" />
<text  x="789.16" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="516.6" y="325" width="0.2" height="15.0" fill="rgb(227,149,17)" rx="2" ry="2" />
<text  x="519.56" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (374 samples, 7.19%)</title><rect x="349.9" y="261" width="84.8" height="15.0" fill="rgb(221,167,29)" rx="2" ry="2" />
<text  x="352.90" y="271.5" >mutation_..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="851.5" y="373" width="2.5" height="15.0" fill="rgb(238,135,29)" rx="2" ry="2" />
<text  x="854.46" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="114.1" y="389" width="0.2" height="15.0" fill="rgb(212,79,43)" rx="2" ry="2" />
<text  x="117.08" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.17%)</title><rect x="952.6" y="373" width="2.0" height="15.0" fill="rgb(210,104,27)" rx="2" ry="2" />
<text  x="955.59" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="742.2" y="405" width="0.2" height="15.0" fill="rgb(211,21,31)" rx="2" ry="2" />
<text  x="745.17" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="76.4" y="373" width="0.3" height="15.0" fill="rgb(213,71,2)" rx="2" ry="2" />
<text  x="79.44" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%)</title><rect x="1042.4" y="245" width="0.7" height="15.0" fill="rgb(237,221,53)" rx="2" ry="2" />
<text  x="1045.39" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="821.3" y="357" width="0.2" height="15.0" fill="rgb(254,176,14)" rx="2" ry="2" />
<text  x="824.31" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (2 samples, 0.04%)</title><rect x="22.7" y="549" width="0.5" height="15.0" fill="rgb(215,171,45)" rx="2" ry="2" />
<text  x="25.70" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%)</title><rect x="644.9" y="469" width="0.4" height="15.0" fill="rgb(235,97,34)" rx="2" ry="2" />
<text  x="647.90" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.10%)</title><rect x="295.5" y="197" width="1.1" height="15.0" fill="rgb(253,46,48)" rx="2" ry="2" />
<text  x="298.48" y="207.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (55 samples, 1.06%)</title><rect x="503.4" y="309" width="12.5" height="15.0" fill="rgb(241,214,33)" rx="2" ry="2" />
<text  x="506.41" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%)</title><rect x="12.7" y="421" width="0.9" height="15.0" fill="rgb(247,68,4)" rx="2" ry="2" />
<text  x="15.72" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (4 samples, 0.08%)</title><rect x="753.3" y="293" width="0.9" height="15.0" fill="rgb(232,155,7)" rx="2" ry="2" />
<text  x="756.28" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (1 samples, 0.02%)</title><rect x="1098.4" y="357" width="0.2" height="15.0" fill="rgb(223,36,1)" rx="2" ry="2" />
<text  x="1101.39" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="227.5" y="133" width="0.2" height="15.0" fill="rgb(220,89,53)" rx="2" ry="2" />
<text  x="230.45" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="636.3" y="421" width="0.2" height="15.0" fill="rgb(225,16,21)" rx="2" ry="2" />
<text  x="639.28" y="431.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="50.6" y="325" width="0.2" height="15.0" fill="rgb(235,104,49)" rx="2" ry="2" />
<text  x="53.59" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="659.4" y="341" width="0.2" height="15.0" fill="rgb(245,72,34)" rx="2" ry="2" />
<text  x="662.41" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (2 samples, 0.04%)</title><rect x="858.0" y="357" width="0.5" height="15.0" fill="rgb(233,21,41)" rx="2" ry="2" />
<text  x="861.04" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="631.3" y="437" width="0.2" height="15.0" fill="rgb(236,196,29)" rx="2" ry="2" />
<text  x="634.29" y="447.5" ></text>
</g>
<g >
<title>scanning_and_populating_reader::close (1 samples, 0.02%)</title><rect x="114.8" y="181" width="0.2" height="15.0" fill="rgb(254,199,10)" rx="2" ry="2" />
<text  x="117.76" y="191.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (337 samples, 6.48%)</title><rect x="354.4" y="229" width="76.4" height="15.0" fill="rgb(207,83,31)" rx="2" ry="2" />
<text  x="357.43" y="239.5" >compact_..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%)</title><rect x="737.2" y="357" width="4.7" height="15.0" fill="rgb(205,78,42)" rx="2" ry="2" />
<text  x="740.18" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (1 samples, 0.02%)</title><rect x="77.3" y="405" width="0.3" height="15.0" fill="rgb(234,24,4)" rx="2" ry="2" />
<text  x="80.34" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="445.1" y="229" width="0.5" height="15.0" fill="rgb(238,106,45)" rx="2" ry="2" />
<text  x="448.13" y="239.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%)</title><rect x="639.2" y="405" width="0.7" height="15.0" fill="rgb(252,75,40)" rx="2" ry="2" />
<text  x="642.23" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="696.8" y="437" width="0.5" height="15.0" fill="rgb(208,75,27)" rx="2" ry="2" />
<text  x="699.82" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%)</title><rect x="836.0" y="437" width="0.3" height="15.0" fill="rgb(223,143,37)" rx="2" ry="2" />
<text  x="839.05" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="670.3" y="437" width="0.4" height="15.0" fill="rgb(223,40,49)" rx="2" ry="2" />
<text  x="673.29" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="98.7" y="485" width="0.2" height="15.0" fill="rgb(219,215,1)" rx="2" ry="2" />
<text  x="101.66" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="23.6" y="517" width="0.2" height="15.0" fill="rgb(212,222,38)" rx="2" ry="2" />
<text  x="26.60" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.15%)</title><rect x="1018.4" y="213" width="1.8" height="15.0" fill="rgb(214,7,42)" rx="2" ry="2" />
<text  x="1021.35" y="223.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (14 samples, 0.27%)</title><rect x="914.3" y="373" width="3.1" height="15.0" fill="rgb(205,170,15)" rx="2" ry="2" />
<text  x="917.27" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1126.7" y="165" width="0.3" height="15.0" fill="rgb(224,146,29)" rx="2" ry="2" />
<text  x="1129.74" y="175.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="59.0" y="165" width="0.4" height="15.0" fill="rgb(212,95,12)" rx="2" ry="2" />
<text  x="61.98" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.12%)</title><rect x="677.5" y="453" width="1.4" height="15.0" fill="rgb(252,32,29)" rx="2" ry="2" />
<text  x="680.55" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="410.2" y="197" width="0.5" height="15.0" fill="rgb(215,144,6)" rx="2" ry="2" />
<text  x="413.21" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (8 samples, 0.15%)</title><rect x="55.3" y="245" width="1.9" height="15.0" fill="rgb(220,161,31)" rx="2" ry="2" />
<text  x="58.35" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="203.2" y="277" width="0.2" height="15.0" fill="rgb(221,160,52)" rx="2" ry="2" />
<text  x="206.19" y="287.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,813 samples, 34.84%)</title><rect x="167.4" y="437" width="411.1" height="15.0" fill="rgb(233,140,31)" rx="2" ry="2" />
<text  x="170.36" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>service::abstract_read_executor::execute (290 samples, 5.57%)</title><rect x="978.7" y="357" width="65.7" height="15.0" fill="rgb(254,105,13)" rx="2" ry="2" />
<text  x="981.67" y="367.5" >service..</text>
</g>
<g >
<title>db::rp_handle::~rp_handle (1 samples, 0.02%)</title><rect x="1125.8" y="277" width="0.3" height="15.0" fill="rgb(248,117,33)" rx="2" ry="2" />
<text  x="1128.83" y="287.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (36 samples, 0.69%)</title><rect x="865.1" y="485" width="8.1" height="15.0" fill="rgb(231,184,36)" rx="2" ry="2" />
<text  x="868.07" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="285.0" y="245" width="0.5" height="15.0" fill="rgb(226,170,6)" rx="2" ry="2" />
<text  x="288.05" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (4 samples, 0.08%)</title><rect x="594.1" y="277" width="0.9" height="15.0" fill="rgb(240,115,21)" rx="2" ry="2" />
<text  x="597.10" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="316.3" y="341" width="0.7" height="15.0" fill="rgb(206,26,16)" rx="2" ry="2" />
<text  x="319.34" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="392.5" y="165" width="0.3" height="15.0" fill="rgb(228,173,46)" rx="2" ry="2" />
<text  x="395.52" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (57 samples, 1.10%)</title><rect x="1091.1" y="421" width="13.0" height="15.0" fill="rgb(206,61,6)" rx="2" ry="2" />
<text  x="1094.14" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="700.0" y="373" width="0.2" height="15.0" fill="rgb(223,2,11)" rx="2" ry="2" />
<text  x="703.00" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="68.0" y="117" width="0.3" height="15.0" fill="rgb(207,205,7)" rx="2" ry="2" />
<text  x="71.05" y="127.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (35 samples, 0.67%)</title><rect x="1063.7" y="277" width="7.9" height="15.0" fill="rgb(251,46,5)" rx="2" ry="2" />
<text  x="1066.70" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (3 samples, 0.06%)</title><rect x="868.7" y="277" width="0.7" height="15.0" fill="rgb(206,11,18)" rx="2" ry="2" />
<text  x="871.70" y="287.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (6 samples, 0.12%)</title><rect x="1130.6" y="293" width="1.4" height="15.0" fill="rgb(205,167,7)" rx="2" ry="2" />
<text  x="1133.59" y="303.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="866.4" y="341" width="0.3" height="15.0" fill="rgb(247,194,43)" rx="2" ry="2" />
<text  x="869.43" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="90.0" y="517" width="0.3" height="15.0" fill="rgb(209,204,40)" rx="2" ry="2" />
<text  x="93.04" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="54.9" y="309" width="0.2" height="15.0" fill="rgb(247,8,3)" rx="2" ry="2" />
<text  x="57.90" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="578.0" y="421" width="0.2" height="15.0" fill="rgb(217,170,18)" rx="2" ry="2" />
<text  x="581.01" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="66.7" y="309" width="0.2" height="15.0" fill="rgb(250,38,11)" rx="2" ry="2" />
<text  x="69.69" y="319.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="814.3" y="309" width="0.9" height="15.0" fill="rgb(205,215,36)" rx="2" ry="2" />
<text  x="817.28" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.10%)</title><rect x="322.2" y="293" width="1.2" height="15.0" fill="rgb(241,57,1)" rx="2" ry="2" />
<text  x="325.23" y="303.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%)</title><rect x="698.9" y="469" width="0.2" height="15.0" fill="rgb(205,221,15)" rx="2" ry="2" />
<text  x="701.86" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (28 samples, 0.54%)</title><rect x="1132.4" y="405" width="6.4" height="15.0" fill="rgb(212,198,26)" rx="2" ry="2" />
<text  x="1135.41" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="956.7" y="405" width="0.2" height="15.0" fill="rgb(213,105,39)" rx="2" ry="2" />
<text  x="959.68" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="511.8" y="197" width="2.3" height="15.0" fill="rgb(234,153,45)" rx="2" ry="2" />
<text  x="514.79" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="22.2" y="437" width="0.3" height="15.0" fill="rgb(224,171,27)" rx="2" ry="2" />
<text  x="25.24" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1039.4" y="245" width="0.3" height="15.0" fill="rgb(251,42,11)" rx="2" ry="2" />
<text  x="1042.44" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (53 samples, 1.02%)</title><rect x="53.5" y="341" width="12.1" height="15.0" fill="rgb(248,149,50)" rx="2" ry="2" />
<text  x="56.54" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="784.3" y="309" width="0.3" height="15.0" fill="rgb(220,195,40)" rx="2" ry="2" />
<text  x="787.35" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (7 samples, 0.13%)</title><rect x="61.9" y="277" width="1.6" height="15.0" fill="rgb(232,165,11)" rx="2" ry="2" />
<text  x="64.93" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%)</title><rect x="977.1" y="357" width="0.2" height="15.0" fill="rgb(225,85,6)" rx="2" ry="2" />
<text  x="980.08" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (44 samples, 0.85%)</title><rect x="661.9" y="485" width="10.0" height="15.0" fill="rgb(220,101,50)" rx="2" ry="2" />
<text  x="664.90" y="495.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (5 samples, 0.10%)</title><rect x="374.4" y="181" width="1.1" height="15.0" fill="rgb(249,185,49)" rx="2" ry="2" />
<text  x="377.39" y="191.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.02%)</title><rect x="87.5" y="613" width="0.3" height="15.0" fill="rgb(248,174,28)" rx="2" ry="2" />
<text  x="90.55" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (4 samples, 0.08%)</title><rect x="521.3" y="309" width="0.9" height="15.0" fill="rgb(236,135,13)" rx="2" ry="2" />
<text  x="524.32" y="319.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="698.9" y="341" width="0.2" height="15.0" fill="rgb(253,136,43)" rx="2" ry="2" />
<text  x="701.86" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (190 samples, 3.65%)</title><rect x="29.0" y="421" width="43.1" height="15.0" fill="rgb(254,192,38)" rx="2" ry="2" />
<text  x="32.05" y="431.5" >seas..</text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1077.5" y="293" width="0.7" height="15.0" fill="rgb(232,55,39)" rx="2" ry="2" />
<text  x="1080.53" y="303.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="86.9" y="453" width="0.2" height="15.0" fill="rgb(248,127,8)" rx="2" ry="2" />
<text  x="89.87" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (3 samples, 0.06%)</title><rect x="717.0" y="421" width="0.7" height="15.0" fill="rgb(221,0,21)" rx="2" ry="2" />
<text  x="720.00" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="85.7" y="213" width="0.3" height="15.0" fill="rgb(223,145,35)" rx="2" ry="2" />
<text  x="88.73" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (3 samples, 0.06%)</title><rect x="860.1" y="453" width="0.7" height="15.0" fill="rgb(230,157,23)" rx="2" ry="2" />
<text  x="863.08" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="713.4" y="437" width="0.2" height="15.0" fill="rgb(227,41,31)" rx="2" ry="2" />
<text  x="716.37" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="958.7" y="389" width="0.2" height="15.0" fill="rgb(227,135,37)" rx="2" ry="2" />
<text  x="961.72" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="113.6" y="309" width="0.3" height="15.0" fill="rgb(251,172,22)" rx="2" ry="2" />
<text  x="116.62" y="319.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%)</title><rect x="1121.7" y="421" width="0.5" height="15.0" fill="rgb(252,157,32)" rx="2" ry="2" />
<text  x="1124.75" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1138.5" y="261" width="0.3" height="15.0" fill="rgb(223,69,21)" rx="2" ry="2" />
<text  x="1141.53" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (14 samples, 0.27%)</title><rect x="214.1" y="229" width="3.1" height="15.0" fill="rgb(210,37,38)" rx="2" ry="2" />
<text  x="217.07" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="362.1" y="181" width="0.3" height="15.0" fill="rgb(210,26,27)" rx="2" ry="2" />
<text  x="365.14" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%)</title><rect x="448.3" y="309" width="2.7" height="15.0" fill="rgb(220,155,35)" rx="2" ry="2" />
<text  x="451.31" y="319.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (66 samples, 1.27%)</title><rect x="234.5" y="117" width="14.9" height="15.0" fill="rgb(205,224,50)" rx="2" ry="2" />
<text  x="237.48" y="127.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%)</title><rect x="10.9" y="421" width="0.2" height="15.0" fill="rgb(254,183,50)" rx="2" ry="2" />
<text  x="13.91" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="804.1" y="117" width="0.2" height="15.0" fill="rgb(230,219,4)" rx="2" ry="2" />
<text  x="807.07" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="1147.4" y="469" width="0.2" height="15.0" fill="rgb(242,144,9)" rx="2" ry="2" />
<text  x="1150.37" y="479.5" ></text>
</g>
<g >
<title>dht::shard_of (2 samples, 0.04%)</title><rect x="1002.9" y="277" width="0.5" height="15.0" fill="rgb(236,138,52)" rx="2" ry="2" />
<text  x="1005.93" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="822.9" y="341" width="0.2" height="15.0" fill="rgb(211,210,20)" rx="2" ry="2" />
<text  x="825.89" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="23.4" y="453" width="0.2" height="15.0" fill="rgb(207,16,33)" rx="2" ry="2" />
<text  x="26.38" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="189.6" y="293" width="0.4" height="15.0" fill="rgb(206,119,50)" rx="2" ry="2" />
<text  x="192.58" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="942.4" y="405" width="0.4" height="15.0" fill="rgb(216,32,22)" rx="2" ry="2" />
<text  x="945.39" y="415.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="698.9" y="485" width="0.2" height="15.0" fill="rgb(253,75,49)" rx="2" ry="2" />
<text  x="701.86" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="576.6" y="421" width="0.3" height="15.0" fill="rgb(210,84,22)" rx="2" ry="2" />
<text  x="579.64" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="860.1" y="421" width="0.2" height="15.0" fill="rgb(214,214,15)" rx="2" ry="2" />
<text  x="863.08" y="431.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="764.2" y="405" width="0.2" height="15.0" fill="rgb(206,96,45)" rx="2" ry="2" />
<text  x="767.17" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="484.1" y="325" width="0.5" height="15.0" fill="rgb(228,160,19)" rx="2" ry="2" />
<text  x="487.13" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="315.4" y="341" width="0.3" height="15.0" fill="rgb(253,109,44)" rx="2" ry="2" />
<text  x="318.43" y="351.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (12 samples, 0.23%)</title><rect x="1148.5" y="469" width="2.7" height="15.0" fill="rgb(242,157,9)" rx="2" ry="2" />
<text  x="1151.50" y="479.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="961.9" y="373" width="0.2" height="15.0" fill="rgb(220,192,50)" rx="2" ry="2" />
<text  x="964.89" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="771.6" y="373" width="0.3" height="15.0" fill="rgb(234,55,33)" rx="2" ry="2" />
<text  x="774.65" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (22 samples, 0.42%)</title><rect x="400.5" y="165" width="4.9" height="15.0" fill="rgb(228,33,11)" rx="2" ry="2" />
<text  x="403.46" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (3 samples, 0.06%)</title><rect x="870.1" y="277" width="0.6" height="15.0" fill="rgb(225,177,27)" rx="2" ry="2" />
<text  x="873.06" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="23.6" y="357" width="0.2" height="15.0" fill="rgb(214,101,1)" rx="2" ry="2" />
<text  x="26.60" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="728.3" y="405" width="1.2" height="15.0" fill="rgb(210,153,36)" rx="2" ry="2" />
<text  x="731.34" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (15 samples, 0.29%)</title><rect x="312.0" y="341" width="3.4" height="15.0" fill="rgb(220,180,27)" rx="2" ry="2" />
<text  x="315.03" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="83.5" y="389" width="0.2" height="15.0" fill="rgb(221,47,4)" rx="2" ry="2" />
<text  x="86.47" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="566.7" y="421" width="0.4" height="15.0" fill="rgb(234,119,34)" rx="2" ry="2" />
<text  x="569.67" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="665.3" y="389" width="0.2" height="15.0" fill="rgb(242,24,51)" rx="2" ry="2" />
<text  x="668.30" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="830.1" y="293" width="0.7" height="15.0" fill="rgb(236,48,39)" rx="2" ry="2" />
<text  x="833.15" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="79.4" y="341" width="0.2" height="15.0" fill="rgb(232,158,26)" rx="2" ry="2" />
<text  x="82.39" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (20 samples, 0.38%)</title><rect x="276.4" y="213" width="4.6" height="15.0" fill="rgb(241,6,0)" rx="2" ry="2" />
<text  x="279.43" y="223.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="476.9" y="293" width="0.2" height="15.0" fill="rgb(220,87,26)" rx="2" ry="2" />
<text  x="479.88" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (294 samples, 5.65%)</title><rect x="217.7" y="245" width="66.7" height="15.0" fill="rgb(226,207,34)" rx="2" ry="2" />
<text  x="220.70" y="255.5" >partiti..</text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="215.0" y="213" width="2.0" height="15.0" fill="rgb(250,133,44)" rx="2" ry="2" />
<text  x="217.98" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (14 samples, 0.27%)</title><rect x="77.6" y="405" width="3.1" height="15.0" fill="rgb(212,229,4)" rx="2" ry="2" />
<text  x="80.57" y="415.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="113.4" y="485" width="0.2" height="15.0" fill="rgb(244,129,15)" rx="2" ry="2" />
<text  x="116.40" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%)</title><rect x="12.7" y="437" width="0.9" height="15.0" fill="rgb(215,38,7)" rx="2" ry="2" />
<text  x="15.72" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (68 samples, 1.31%)</title><rect x="30.4" y="373" width="15.4" height="15.0" fill="rgb(251,127,11)" rx="2" ry="2" />
<text  x="33.41" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="642.9" y="485" width="0.4" height="15.0" fill="rgb(235,43,8)" rx="2" ry="2" />
<text  x="645.86" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="88.0" y="469" width="0.2" height="15.0" fill="rgb(217,182,25)" rx="2" ry="2" />
<text  x="91.00" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%)</title><rect x="866.7" y="341" width="0.4" height="15.0" fill="rgb(212,12,26)" rx="2" ry="2" />
<text  x="869.66" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="680.5" y="453" width="0.2" height="15.0" fill="rgb(220,169,7)" rx="2" ry="2" />
<text  x="683.50" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="22.2" y="501" width="0.3" height="15.0" fill="rgb(246,3,16)" rx="2" ry="2" />
<text  x="25.24" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%)</title><rect x="1132.4" y="437" width="6.4" height="15.0" fill="rgb(232,124,44)" rx="2" ry="2" />
<text  x="1135.41" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="469.8" y="261" width="0.7" height="15.0" fill="rgb(247,5,14)" rx="2" ry="2" />
<text  x="472.85" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="272.3" y="149" width="0.5" height="15.0" fill="rgb(214,141,39)" rx="2" ry="2" />
<text  x="275.35" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (4 samples, 0.08%)</title><rect x="144.7" y="453" width="0.9" height="15.0" fill="rgb(241,107,11)" rx="2" ry="2" />
<text  x="147.69" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (10 samples, 0.19%)</title><rect x="804.3" y="149" width="2.3" height="15.0" fill="rgb(250,78,37)" rx="2" ry="2" />
<text  x="807.30" y="159.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="547.8" y="341" width="0.5" height="15.0" fill="rgb(215,46,45)" rx="2" ry="2" />
<text  x="550.85" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (4 samples, 0.08%)</title><rect x="659.6" y="421" width="0.9" height="15.0" fill="rgb(222,91,40)" rx="2" ry="2" />
<text  x="662.63" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="271.9" y="133" width="0.4" height="15.0" fill="rgb(242,176,12)" rx="2" ry="2" />
<text  x="274.89" y="143.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (1 samples, 0.02%)</title><rect x="114.3" y="373" width="0.2" height="15.0" fill="rgb(248,196,10)" rx="2" ry="2" />
<text  x="117.30" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="40.4" y="261" width="0.2" height="15.0" fill="rgb(235,50,28)" rx="2" ry="2" />
<text  x="43.38" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::revoke_statement*, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="71.7" y="325" width="0.2" height="15.0" fill="rgb(254,214,10)" rx="2" ry="2" />
<text  x="74.68" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="1082.3" y="357" width="2.3" height="15.0" fill="rgb(242,191,46)" rx="2" ry="2" />
<text  x="1085.29" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (210 samples, 4.04%)</title><rect x="996.8" y="309" width="47.6" height="15.0" fill="rgb(246,173,35)" rx="2" ry="2" />
<text  x="999.81" y="319.5" >serv..</text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (538 samples, 10.34%)</title><rect x="732.6" y="453" width="122.0" height="15.0" fill="rgb(247,144,31)" rx="2" ry="2" />
<text  x="735.65" y="463.5" >single_node_cql..</text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="87.8" y="341" width="0.2" height="15.0" fill="rgb(246,37,34)" rx="2" ry="2" />
<text  x="90.77" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (10 samples, 0.19%)</title><rect x="692.5" y="485" width="2.3" height="15.0" fill="rgb(243,63,45)" rx="2" ry="2" />
<text  x="695.51" y="495.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="69.0" y="341" width="0.2" height="15.0" fill="rgb(241,149,24)" rx="2" ry="2" />
<text  x="71.95" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (13 samples, 0.25%)</title><rect x="346.9" y="261" width="3.0" height="15.0" fill="rgb(240,175,8)" rx="2" ry="2" />
<text  x="349.95" y="271.5" ></text>
</g>
<g >
<title>exp@@GLIBC_2.29 (1 samples, 0.02%)</title><rect x="114.1" y="165" width="0.2" height="15.0" fill="rgb(245,7,32)" rx="2" ry="2" />
<text  x="117.08" y="175.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (15 samples, 0.29%)</title><rect x="10.9" y="565" width="3.4" height="15.0" fill="rgb(213,179,11)" rx="2" ry="2" />
<text  x="13.91" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="137.2" y="389" width="0.7" height="15.0" fill="rgb(224,219,18)" rx="2" ry="2" />
<text  x="140.21" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%)</title><rect x="1132.4" y="453" width="6.4" height="15.0" fill="rgb(208,49,45)" rx="2" ry="2" />
<text  x="1135.41" y="463.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (2 samples, 0.04%)</title><rect x="115.7" y="277" width="0.4" height="15.0" fill="rgb(253,31,12)" rx="2" ry="2" />
<text  x="118.66" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1168.2" y="453" width="0.3" height="15.0" fill="rgb(224,1,51)" rx="2" ry="2" />
<text  x="1171.23" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="808.2" y="261" width="2.0" height="15.0" fill="rgb(230,29,39)" rx="2" ry="2" />
<text  x="811.16" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="106.6" y="453" width="0.2" height="15.0" fill="rgb(247,178,8)" rx="2" ry="2" />
<text  x="109.59" y="463.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%)</title><rect x="1129.9" y="245" width="0.2" height="15.0" fill="rgb(210,205,26)" rx="2" ry="2" />
<text  x="1132.91" y="255.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.31%)</title><rect x="571.0" y="341" width="3.6" height="15.0" fill="rgb(217,14,33)" rx="2" ry="2" />
<text  x="573.98" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="587.5" y="293" width="0.5" height="15.0" fill="rgb(233,189,34)" rx="2" ry="2" />
<text  x="590.53" y="303.5" ></text>
</g>
<g >
<title>ser::mutation_partition__static_row&lt;bytes_ostream&gt;::mutation_partition__static_row (1 samples, 0.02%)</title><rect x="1135.8" y="149" width="0.2" height="15.0" fill="rgb(214,89,44)" rx="2" ry="2" />
<text  x="1138.81" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="338.6" y="293" width="0.2" height="15.0" fill="rgb(219,21,22)" rx="2" ry="2" />
<text  x="341.56" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="67.4" y="229" width="0.2" height="15.0" fill="rgb(230,144,46)" rx="2" ry="2" />
<text  x="70.37" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="1039.0" y="277" width="0.4" height="15.0" fill="rgb(214,48,21)" rx="2" ry="2" />
<text  x="1041.99" y="287.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (2 samples, 0.04%)</title><rect x="645.6" y="501" width="0.4" height="15.0" fill="rgb(236,118,17)" rx="2" ry="2" />
<text  x="648.58" y="511.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (4 samples, 0.08%)</title><rect x="1126.7" y="245" width="0.9" height="15.0" fill="rgb(240,35,7)" rx="2" ry="2" />
<text  x="1129.74" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="69.0" y="357" width="0.2" height="15.0" fill="rgb(246,66,54)" rx="2" ry="2" />
<text  x="71.95" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="703.6" y="453" width="0.3" height="15.0" fill="rgb(219,12,32)" rx="2" ry="2" />
<text  x="706.62" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="103.4" y="421" width="0.2" height="15.0" fill="rgb(236,198,53)" rx="2" ry="2" />
<text  x="106.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="984.8" y="309" width="2.7" height="15.0" fill="rgb(211,202,21)" rx="2" ry="2" />
<text  x="987.79" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="84.8" y="437" width="0.3" height="15.0" fill="rgb(234,44,13)" rx="2" ry="2" />
<text  x="87.83" y="447.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%)</title><rect x="502.3" y="277" width="1.1" height="15.0" fill="rgb(211,141,10)" rx="2" ry="2" />
<text  x="505.27" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (4 samples, 0.08%)</title><rect x="465.8" y="325" width="0.9" height="15.0" fill="rgb(237,205,3)" rx="2" ry="2" />
<text  x="468.76" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::reset (1 samples, 0.02%)</title><rect x="27.7" y="373" width="0.2" height="15.0" fill="rgb(251,188,37)" rx="2" ry="2" />
<text  x="30.69" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (3 samples, 0.06%)</title><rect x="1060.8" y="325" width="0.6" height="15.0" fill="rgb(218,18,3)" rx="2" ry="2" />
<text  x="1063.75" y="335.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1135.6" y="149" width="0.2" height="15.0" fill="rgb(251,117,18)" rx="2" ry="2" />
<text  x="1138.58" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="53.8" y="197" width="0.2" height="15.0" fill="rgb(221,94,16)" rx="2" ry="2" />
<text  x="56.76" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%)</title><rect x="79.8" y="341" width="0.5" height="15.0" fill="rgb(230,17,38)" rx="2" ry="2" />
<text  x="82.84" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.6" y="389" width="0.2" height="15.0" fill="rgb(251,114,35)" rx="2" ry="2" />
<text  x="85.56" y="399.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="472.1" y="245" width="2.1" height="15.0" fill="rgb(216,137,15)" rx="2" ry="2" />
<text  x="475.11" y="255.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (11 samples, 0.21%)</title><rect x="290.5" y="197" width="2.5" height="15.0" fill="rgb(249,159,34)" rx="2" ry="2" />
<text  x="293.49" y="207.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (5 samples, 0.10%)</title><rect x="844.4" y="357" width="1.2" height="15.0" fill="rgb(232,178,21)" rx="2" ry="2" />
<text  x="847.44" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="265.5" y="149" width="0.5" height="15.0" fill="rgb(216,0,12)" rx="2" ry="2" />
<text  x="268.55" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (190 samples, 3.65%)</title><rect x="29.0" y="405" width="43.1" height="15.0" fill="rgb(235,113,22)" rx="2" ry="2" />
<text  x="32.05" y="415.5" >cql3..</text>
</g>
<g >
<title>cql3::query_options::query_options (11 samples, 0.21%)</title><rect x="856.0" y="421" width="2.5" height="15.0" fill="rgb(237,88,19)" rx="2" ry="2" />
<text  x="859.00" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="482.1" y="293" width="0.2" height="15.0" fill="rgb(232,198,44)" rx="2" ry="2" />
<text  x="485.09" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="66.9" y="133" width="0.2" height="15.0" fill="rgb(230,154,19)" rx="2" ry="2" />
<text  x="69.91" y="143.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (12 samples, 0.23%)</title><rect x="326.1" y="293" width="2.7" height="15.0" fill="rgb(222,49,4)" rx="2" ry="2" />
<text  x="329.09" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (3 samples, 0.06%)</title><rect x="769.6" y="357" width="0.7" height="15.0" fill="rgb(247,5,17)" rx="2" ry="2" />
<text  x="772.61" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="70.3" y="357" width="0.2" height="15.0" fill="rgb(225,214,4)" rx="2" ry="2" />
<text  x="73.32" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="638.8" y="421" width="0.2" height="15.0" fill="rgb(216,216,19)" rx="2" ry="2" />
<text  x="641.77" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.15%)</title><rect x="1152.6" y="437" width="1.8" height="15.0" fill="rgb(218,67,15)" rx="2" ry="2" />
<text  x="1155.59" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="672.3" y="469" width="0.3" height="15.0" fill="rgb(246,49,47)" rx="2" ry="2" />
<text  x="675.33" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="440.1" y="197" width="0.3" height="15.0" fill="rgb(212,123,15)" rx="2" ry="2" />
<text  x="443.14" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.08%)</title><rect x="947.2" y="341" width="0.9" height="15.0" fill="rgb(247,96,51)" rx="2" ry="2" />
<text  x="950.15" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="867.8" y="277" width="0.2" height="15.0" fill="rgb(225,93,1)" rx="2" ry="2" />
<text  x="870.79" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="656.9" y="485" width="0.2" height="15.0" fill="rgb(231,67,53)" rx="2" ry="2" />
<text  x="659.91" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%)</title><rect x="67.1" y="325" width="1.4" height="15.0" fill="rgb(235,33,21)" rx="2" ry="2" />
<text  x="70.14" y="335.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="556.9" y="293" width="0.2" height="15.0" fill="rgb(225,28,2)" rx="2" ry="2" />
<text  x="559.92" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="813.1" y="309" width="0.3" height="15.0" fill="rgb(212,11,33)" rx="2" ry="2" />
<text  x="816.14" y="319.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (36 samples, 0.69%)</title><rect x="507.7" y="261" width="8.2" height="15.0" fill="rgb(251,36,29)" rx="2" ry="2" />
<text  x="510.71" y="271.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="289.6" y="213" width="0.2" height="15.0" fill="rgb(223,56,19)" rx="2" ry="2" />
<text  x="292.58" y="223.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (9 samples, 0.17%)</title><rect x="199.1" y="245" width="2.0" height="15.0" fill="rgb(231,160,5)" rx="2" ry="2" />
<text  x="202.11" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="721.3" y="485" width="0.2" height="15.0" fill="rgb(237,96,32)" rx="2" ry="2" />
<text  x="724.31" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="709.7" y="469" width="0.3" height="15.0" fill="rgb(217,149,10)" rx="2" ry="2" />
<text  x="712.75" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%)</title><rect x="27.7" y="405" width="0.4" height="15.0" fill="rgb(211,140,43)" rx="2" ry="2" />
<text  x="30.69" y="415.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (20 samples, 0.38%)</title><rect x="925.4" y="389" width="4.5" height="15.0" fill="rgb(230,70,23)" rx="2" ry="2" />
<text  x="928.38" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="962.1" y="373" width="0.2" height="15.0" fill="rgb(229,147,14)" rx="2" ry="2" />
<text  x="965.12" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (34 samples, 0.65%)</title><rect x="608.4" y="437" width="7.7" height="15.0" fill="rgb(227,83,31)" rx="2" ry="2" />
<text  x="611.39" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1125.4" y="453" width="6.8" height="15.0" fill="rgb(240,37,41)" rx="2" ry="2" />
<text  x="1128.38" y="463.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="113.9" y="325" width="0.2" height="15.0" fill="rgb(238,178,4)" rx="2" ry="2" />
<text  x="116.85" y="335.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="68.0" y="101" width="0.3" height="15.0" fill="rgb(223,87,35)" rx="2" ry="2" />
<text  x="71.05" y="111.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="659.6" y="357" width="0.3" height="15.0" fill="rgb(228,12,12)" rx="2" ry="2" />
<text  x="662.63" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="456.7" y="421" width="0.7" height="15.0" fill="rgb(226,8,52)" rx="2" ry="2" />
<text  x="459.69" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="60.6" y="197" width="0.2" height="15.0" fill="rgb(227,19,39)" rx="2" ry="2" />
<text  x="63.56" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="78.9" y="309" width="0.3" height="15.0" fill="rgb(235,146,27)" rx="2" ry="2" />
<text  x="81.93" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (345 samples, 6.63%)</title><rect x="353.5" y="245" width="78.3" height="15.0" fill="rgb(251,212,16)" rx="2" ry="2" />
<text  x="356.52" y="255.5" >flat_muta..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="22.7" y="517" width="0.2" height="15.0" fill="rgb(240,154,25)" rx="2" ry="2" />
<text  x="25.70" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (2 samples, 0.04%)</title><rect x="887.7" y="421" width="0.5" height="15.0" fill="rgb(254,229,33)" rx="2" ry="2" />
<text  x="890.74" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="865.1" y="469" width="0.2" height="15.0" fill="rgb(237,114,30)" rx="2" ry="2" />
<text  x="868.07" y="479.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%)</title><rect x="698.9" y="357" width="0.2" height="15.0" fill="rgb(235,64,38)" rx="2" ry="2" />
<text  x="701.86" y="367.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="692.3" y="437" width="0.2" height="15.0" fill="rgb(226,166,12)" rx="2" ry="2" />
<text  x="695.29" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (25 samples, 0.48%)</title><rect x="736.7" y="421" width="5.7" height="15.0" fill="rgb(236,158,50)" rx="2" ry="2" />
<text  x="739.73" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="622.2" y="437" width="0.2" height="15.0" fill="rgb(215,142,41)" rx="2" ry="2" />
<text  x="625.22" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="87.3" y="549" width="0.2" height="15.0" fill="rgb(232,178,28)" rx="2" ry="2" />
<text  x="90.32" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="47.0" y="341" width="0.2" height="15.0" fill="rgb(208,219,8)" rx="2" ry="2" />
<text  x="49.96" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="922.7" y="389" width="0.2" height="15.0" fill="rgb(241,158,0)" rx="2" ry="2" />
<text  x="925.66" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="52.9" y="245" width="0.4" height="15.0" fill="rgb(232,134,23)" rx="2" ry="2" />
<text  x="55.86" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="52.9" y="277" width="0.4" height="15.0" fill="rgb(221,170,9)" rx="2" ry="2" />
<text  x="55.86" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="659.6" y="373" width="0.9" height="15.0" fill="rgb(209,45,0)" rx="2" ry="2" />
<text  x="662.63" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="70.5" y="373" width="0.3" height="15.0" fill="rgb(235,187,11)" rx="2" ry="2" />
<text  x="73.54" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="88.2" y="597" width="0.3" height="15.0" fill="rgb(252,94,45)" rx="2" ry="2" />
<text  x="91.23" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="50.4" y="309" width="0.2" height="15.0" fill="rgb(205,75,49)" rx="2" ry="2" />
<text  x="53.36" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (3 samples, 0.06%)</title><rect x="57.8" y="277" width="0.7" height="15.0" fill="rgb(236,205,6)" rx="2" ry="2" />
<text  x="60.84" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.2" y="325" width="0.4" height="15.0" fill="rgb(238,204,18)" rx="2" ry="2" />
<text  x="50.19" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="27.9" y="373" width="0.2" height="15.0" fill="rgb(246,194,32)" rx="2" ry="2" />
<text  x="30.91" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="434.5" y="213" width="0.2" height="15.0" fill="rgb(236,149,24)" rx="2" ry="2" />
<text  x="437.47" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="544.4" y="309" width="0.3" height="15.0" fill="rgb(245,82,51)" rx="2" ry="2" />
<text  x="547.45" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="68.0" y="261" width="0.5" height="15.0" fill="rgb(239,118,37)" rx="2" ry="2" />
<text  x="71.05" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="65.8" y="309" width="0.2" height="15.0" fill="rgb(234,127,11)" rx="2" ry="2" />
<text  x="68.78" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="79.4" y="373" width="0.2" height="15.0" fill="rgb(244,83,32)" rx="2" ry="2" />
<text  x="82.39" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="705.9" y="485" width="0.9" height="15.0" fill="rgb(219,67,31)" rx="2" ry="2" />
<text  x="708.89" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (25 samples, 0.48%)</title><rect x="631.7" y="437" width="5.7" height="15.0" fill="rgb(210,163,38)" rx="2" ry="2" />
<text  x="634.74" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (507 samples, 9.74%)</title><rect x="336.3" y="341" width="115.0" height="15.0" fill="rgb(220,171,27)" rx="2" ry="2" />
<text  x="339.29" y="351.5" >seastar::futur..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="647.2" y="485" width="0.2" height="15.0" fill="rgb(221,5,13)" rx="2" ry="2" />
<text  x="650.16" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="65.8" y="277" width="0.2" height="15.0" fill="rgb(232,158,51)" rx="2" ry="2" />
<text  x="68.78" y="287.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (4 samples, 0.08%)</title><rect x="760.5" y="373" width="0.9" height="15.0" fill="rgb(222,59,44)" rx="2" ry="2" />
<text  x="763.54" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.5" y="261" width="0.2" height="15.0" fill="rgb(205,55,34)" rx="2" ry="2" />
<text  x="88.51" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="841.3" y="421" width="0.4" height="15.0" fill="rgb(248,32,43)" rx="2" ry="2" />
<text  x="844.26" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="864.4" y="309" width="0.2" height="15.0" fill="rgb(217,224,11)" rx="2" ry="2" />
<text  x="867.39" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.3" y="309" width="0.3" height="15.0" fill="rgb(221,59,39)" rx="2" ry="2" />
<text  x="68.33" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="785.5" y="293" width="0.4" height="15.0" fill="rgb(228,169,41)" rx="2" ry="2" />
<text  x="788.48" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%)</title><rect x="11.4" y="421" width="0.4" height="15.0" fill="rgb(211,36,23)" rx="2" ry="2" />
<text  x="14.36" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="654.4" y="485" width="0.2" height="15.0" fill="rgb(226,107,28)" rx="2" ry="2" />
<text  x="657.42" y="495.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (2 samples, 0.04%)</title><rect x="356.5" y="197" width="0.4" height="15.0" fill="rgb(242,142,13)" rx="2" ry="2" />
<text  x="359.47" y="207.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,112 samples, 21.37%)</title><rect x="873.2" y="485" width="252.2" height="15.0" fill="rgb(226,134,7)" rx="2" ry="2" />
<text  x="876.23" y="495.5" >seastar::concrete_execution_stage..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="67.4" y="245" width="0.2" height="15.0" fill="rgb(250,205,13)" rx="2" ry="2" />
<text  x="70.37" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (6 samples, 0.12%)</title><rect x="445.8" y="245" width="1.4" height="15.0" fill="rgb(245,176,30)" rx="2" ry="2" />
<text  x="448.81" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%)</title><rect x="58.8" y="261" width="0.6" height="15.0" fill="rgb(216,43,39)" rx="2" ry="2" />
<text  x="61.75" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (7 samples, 0.13%)</title><rect x="266.0" y="165" width="1.6" height="15.0" fill="rgb(239,54,11)" rx="2" ry="2" />
<text  x="269.00" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="643.3" y="485" width="0.2" height="15.0" fill="rgb(219,125,1)" rx="2" ry="2" />
<text  x="646.31" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="607.7" y="389" width="0.2" height="15.0" fill="rgb(244,198,40)" rx="2" ry="2" />
<text  x="610.71" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (3 samples, 0.06%)</title><rect x="554.9" y="309" width="0.7" height="15.0" fill="rgb(254,64,6)" rx="2" ry="2" />
<text  x="557.88" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%)</title><rect x="50.1" y="357" width="0.7" height="15.0" fill="rgb(222,119,24)" rx="2" ry="2" />
<text  x="53.13" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="133" width="0.2" height="15.0" fill="rgb(227,120,2)" rx="2" ry="2" />
<text  x="64.02" y="143.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%)</title><rect x="832.2" y="309" width="0.9" height="15.0" fill="rgb(240,219,21)" rx="2" ry="2" />
<text  x="835.19" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="164.0" y="373" width="0.6" height="15.0" fill="rgb(240,205,37)" rx="2" ry="2" />
<text  x="166.96" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="637.9" y="437" width="0.6" height="15.0" fill="rgb(248,199,0)" rx="2" ry="2" />
<text  x="640.87" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (4 samples, 0.08%)</title><rect x="48.5" y="213" width="1.0" height="15.0" fill="rgb(237,193,6)" rx="2" ry="2" />
<text  x="51.55" y="223.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="535.8" y="197" width="0.9" height="15.0" fill="rgb(210,81,52)" rx="2" ry="2" />
<text  x="538.83" y="207.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="922.2" y="389" width="0.5" height="15.0" fill="rgb(237,223,48)" rx="2" ry="2" />
<text  x="925.21" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="764.4" y="389" width="0.7" height="15.0" fill="rgb(215,3,9)" rx="2" ry="2" />
<text  x="767.39" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.10%)</title><rect x="693.0" y="469" width="1.1" height="15.0" fill="rgb(205,34,20)" rx="2" ry="2" />
<text  x="695.97" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (24 samples, 0.46%)</title><rect x="302.1" y="293" width="5.4" height="15.0" fill="rgb(236,142,9)" rx="2" ry="2" />
<text  x="305.05" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%)</title><rect x="282.8" y="229" width="0.7" height="15.0" fill="rgb(242,121,18)" rx="2" ry="2" />
<text  x="285.78" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="745.6" y="405" width="0.2" height="15.0" fill="rgb(249,37,43)" rx="2" ry="2" />
<text  x="748.57" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="23.4" y="389" width="0.2" height="15.0" fill="rgb(224,49,7)" rx="2" ry="2" />
<text  x="26.38" y="399.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (3 samples, 0.06%)</title><rect x="1050.3" y="341" width="0.7" height="15.0" fill="rgb(231,206,27)" rx="2" ry="2" />
<text  x="1053.32" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%)</title><rect x="115.7" y="421" width="0.4" height="15.0" fill="rgb(243,119,13)" rx="2" ry="2" />
<text  x="118.66" y="431.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="116.1" y="341" width="0.2" height="15.0" fill="rgb(247,98,7)" rx="2" ry="2" />
<text  x="119.12" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="11.4" y="373" width="0.4" height="15.0" fill="rgb(227,42,14)" rx="2" ry="2" />
<text  x="14.36" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="197.1" y="229" width="0.2" height="15.0" fill="rgb(207,200,26)" rx="2" ry="2" />
<text  x="200.07" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (3 samples, 0.06%)</title><rect x="36.8" y="229" width="0.6" height="15.0" fill="rgb(223,218,4)" rx="2" ry="2" />
<text  x="39.76" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="307.9" y="309" width="0.3" height="15.0" fill="rgb(235,107,21)" rx="2" ry="2" />
<text  x="310.95" y="319.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="868.7" y="261" width="0.2" height="15.0" fill="rgb(225,115,2)" rx="2" ry="2" />
<text  x="871.70" y="271.5" ></text>
</g>
<g >
<title>cql3::cf_name::get_column_family (1 samples, 0.02%)</title><rect x="73.0" y="453" width="0.3" height="15.0" fill="rgb(213,31,0)" rx="2" ry="2" />
<text  x="76.04" y="463.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::operator== (1 samples, 0.02%)</title><rect x="57.2" y="309" width="0.2" height="15.0" fill="rgb(227,178,43)" rx="2" ry="2" />
<text  x="60.16" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="213" width="0.2" height="15.0" fill="rgb(253,191,34)" rx="2" ry="2" />
<text  x="64.02" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%)</title><rect x="737.4" y="341" width="0.7" height="15.0" fill="rgb(235,186,43)" rx="2" ry="2" />
<text  x="740.41" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="26.8" y="373" width="0.2" height="15.0" fill="rgb(239,0,26)" rx="2" ry="2" />
<text  x="29.78" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="784.1" y="309" width="0.2" height="15.0" fill="rgb(228,147,5)" rx="2" ry="2" />
<text  x="787.12" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="12.3" y="293" width="0.4" height="15.0" fill="rgb(218,100,23)" rx="2" ry="2" />
<text  x="15.27" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="293" width="0.7" height="15.0" fill="rgb(224,189,21)" rx="2" ry="2" />
<text  x="50.64" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="158.3" y="421" width="0.7" height="15.0" fill="rgb(208,44,37)" rx="2" ry="2" />
<text  x="161.29" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="868.2" y="341" width="0.3" height="15.0" fill="rgb(209,185,48)" rx="2" ry="2" />
<text  x="871.24" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (4 samples, 0.08%)</title><rect x="44.5" y="309" width="0.9" height="15.0" fill="rgb(221,12,8)" rx="2" ry="2" />
<text  x="47.47" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="1157.8" y="453" width="0.7" height="15.0" fill="rgb(222,85,16)" rx="2" ry="2" />
<text  x="1160.80" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="557.1" y="293" width="0.3" height="15.0" fill="rgb(209,134,45)" rx="2" ry="2" />
<text  x="560.14" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="791.8" y="229" width="0.5" height="15.0" fill="rgb(225,145,38)" rx="2" ry="2" />
<text  x="794.83" y="239.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (10 samples, 0.19%)</title><rect x="790.9" y="261" width="2.3" height="15.0" fill="rgb(213,198,43)" rx="2" ry="2" />
<text  x="793.92" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (1 samples, 0.02%)</title><rect x="114.5" y="373" width="0.3" height="15.0" fill="rgb(218,160,38)" rx="2" ry="2" />
<text  x="117.53" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="23.4" y="485" width="0.2" height="15.0" fill="rgb(226,95,9)" rx="2" ry="2" />
<text  x="26.38" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="864.4" y="341" width="0.2" height="15.0" fill="rgb(216,55,45)" rx="2" ry="2" />
<text  x="867.39" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%)</title><rect x="306.8" y="277" width="0.5" height="15.0" fill="rgb(224,188,34)" rx="2" ry="2" />
<text  x="309.81" y="287.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="132.2" y="453" width="0.2" height="15.0" fill="rgb(225,142,2)" rx="2" ry="2" />
<text  x="135.22" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="64.4" y="277" width="0.5" height="15.0" fill="rgb(249,103,24)" rx="2" ry="2" />
<text  x="67.42" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%)</title><rect x="144.2" y="453" width="0.5" height="15.0" fill="rgb(212,85,3)" rx="2" ry="2" />
<text  x="147.24" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="637.4" y="437" width="0.2" height="15.0" fill="rgb(226,207,21)" rx="2" ry="2" />
<text  x="640.41" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="573.5" y="309" width="1.1" height="15.0" fill="rgb(230,109,37)" rx="2" ry="2" />
<text  x="576.47" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="714.7" y="421" width="0.7" height="15.0" fill="rgb(216,13,24)" rx="2" ry="2" />
<text  x="717.73" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="278.2" y="181" width="0.3" height="15.0" fill="rgb(238,42,45)" rx="2" ry="2" />
<text  x="281.24" y="191.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="87.8" y="309" width="0.2" height="15.0" fill="rgb(235,221,36)" rx="2" ry="2" />
<text  x="90.77" y="319.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (3 samples, 0.06%)</title><rect x="736.0" y="405" width="0.7" height="15.0" fill="rgb(229,224,46)" rx="2" ry="2" />
<text  x="739.05" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="815.6" y="293" width="0.3" height="15.0" fill="rgb(211,199,20)" rx="2" ry="2" />
<text  x="818.64" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="810.4" y="277" width="0.2" height="15.0" fill="rgb(221,62,25)" rx="2" ry="2" />
<text  x="813.42" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_startIndex (1 samples, 0.02%)</title><rect x="35.4" y="261" width="0.2" height="15.0" fill="rgb(207,167,28)" rx="2" ry="2" />
<text  x="38.40" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="761.4" y="389" width="1.4" height="15.0" fill="rgb(252,172,23)" rx="2" ry="2" />
<text  x="764.45" y="399.5" ></text>
</g>
<g >
<title>database::shard_of (2 samples, 0.04%)</title><rect x="1133.3" y="181" width="0.5" height="15.0" fill="rgb(244,206,21)" rx="2" ry="2" />
<text  x="1136.31" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="421.5" y="149" width="1.4" height="15.0" fill="rgb(224,146,33)" rx="2" ry="2" />
<text  x="424.55" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::max_size (1 samples, 0.02%)</title><rect x="32.4" y="245" width="0.3" height="15.0" fill="rgb(234,17,18)" rx="2" ry="2" />
<text  x="35.45" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (4 samples, 0.08%)</title><rect x="48.5" y="181" width="1.0" height="15.0" fill="rgb(230,179,17)" rx="2" ry="2" />
<text  x="51.55" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="700.0" y="501" width="0.2" height="15.0" fill="rgb(225,63,23)" rx="2" ry="2" />
<text  x="703.00" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (30 samples, 0.58%)</title><rect x="942.8" y="405" width="6.8" height="15.0" fill="rgb(248,149,41)" rx="2" ry="2" />
<text  x="945.84" y="415.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (4 samples, 0.08%)</title><rect x="778.0" y="357" width="0.9" height="15.0" fill="rgb(235,186,54)" rx="2" ry="2" />
<text  x="781.00" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="52.2" y="229" width="0.2" height="15.0" fill="rgb(243,112,49)" rx="2" ry="2" />
<text  x="55.18" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="982.3" y="293" width="0.5" height="15.0" fill="rgb(238,99,22)" rx="2" ry="2" />
<text  x="985.30" y="303.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="113.6" y="357" width="0.3" height="15.0" fill="rgb(248,162,46)" rx="2" ry="2" />
<text  x="116.62" y="367.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="127.0" y="453" width="1.1" height="15.0" fill="rgb(225,34,26)" rx="2" ry="2" />
<text  x="130.00" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="954.0" y="309" width="0.2" height="15.0" fill="rgb(222,46,33)" rx="2" ry="2" />
<text  x="956.95" y="319.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%)</title><rect x="700.0" y="245" width="0.2" height="15.0" fill="rgb(244,121,20)" rx="2" ry="2" />
<text  x="703.00" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="315.0" y="325" width="0.4" height="15.0" fill="rgb(254,92,43)" rx="2" ry="2" />
<text  x="317.98" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="878.0" y="469" width="0.2" height="15.0" fill="rgb(225,103,5)" rx="2" ry="2" />
<text  x="880.99" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="427.9" y="149" width="0.5" height="15.0" fill="rgb(254,10,37)" rx="2" ry="2" />
<text  x="430.90" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (17 samples, 0.33%)</title><rect x="612.2" y="421" width="3.9" height="15.0" fill="rgb(225,168,32)" rx="2" ry="2" />
<text  x="615.24" y="431.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="35.8" y="261" width="0.3" height="15.0" fill="rgb(218,105,1)" rx="2" ry="2" />
<text  x="38.85" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="12.5" y="213" width="0.2" height="15.0" fill="rgb(205,212,5)" rx="2" ry="2" />
<text  x="15.49" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="795.2" y="181" width="2.3" height="15.0" fill="rgb(225,145,2)" rx="2" ry="2" />
<text  x="798.23" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="79.4" y="261" width="0.2" height="15.0" fill="rgb(249,171,18)" rx="2" ry="2" />
<text  x="82.39" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="32.2" y="181" width="0.2" height="15.0" fill="rgb(240,159,49)" rx="2" ry="2" />
<text  x="35.22" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="536.1" y="181" width="0.6" height="15.0" fill="rgb(227,60,37)" rx="2" ry="2" />
<text  x="539.06" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (2 samples, 0.04%)</title><rect x="866.0" y="341" width="0.4" height="15.0" fill="rgb(213,160,46)" rx="2" ry="2" />
<text  x="868.98" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (2 samples, 0.04%)</title><rect x="779.8" y="341" width="0.5" height="15.0" fill="rgb(248,144,13)" rx="2" ry="2" />
<text  x="782.81" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (4 samples, 0.08%)</title><rect x="266.7" y="133" width="0.9" height="15.0" fill="rgb(212,113,53)" rx="2" ry="2" />
<text  x="269.68" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="858.9" y="405" width="0.3" height="15.0" fill="rgb(214,112,19)" rx="2" ry="2" />
<text  x="861.95" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="831.5" y="293" width="0.2" height="15.0" fill="rgb(230,141,2)" rx="2" ry="2" />
<text  x="834.51" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1164.2" y="453" width="0.2" height="15.0" fill="rgb(234,164,48)" rx="2" ry="2" />
<text  x="1167.15" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="300.7" y="229" width="0.2" height="15.0" fill="rgb(244,141,21)" rx="2" ry="2" />
<text  x="303.69" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="557.6" y="277" width="0.2" height="15.0" fill="rgb(244,74,12)" rx="2" ry="2" />
<text  x="560.60" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="57.6" y="277" width="0.2" height="15.0" fill="rgb(247,31,44)" rx="2" ry="2" />
<text  x="60.62" y="287.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (47 samples, 0.90%)</title><rect x="745.8" y="405" width="10.7" height="15.0" fill="rgb(226,164,43)" rx="2" ry="2" />
<text  x="748.80" y="415.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="329.7" y="325" width="0.2" height="15.0" fill="rgb(249,186,30)" rx="2" ry="2" />
<text  x="332.72" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="628.8" y="421" width="0.2" height="15.0" fill="rgb(252,117,32)" rx="2" ry="2" />
<text  x="631.80" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="264.0" y="85" width="0.4" height="15.0" fill="rgb(219,0,7)" rx="2" ry="2" />
<text  x="266.96" y="95.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="580.7" y="357" width="0.3" height="15.0" fill="rgb(219,55,23)" rx="2" ry="2" />
<text  x="583.73" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="1014.7" y="229" width="0.7" height="15.0" fill="rgb(223,111,23)" rx="2" ry="2" />
<text  x="1017.72" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="12.9" y="341" width="0.7" height="15.0" fill="rgb(209,92,14)" rx="2" ry="2" />
<text  x="15.95" y="351.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="102.3" y="453" width="0.4" height="15.0" fill="rgb(227,82,3)" rx="2" ry="2" />
<text  x="105.29" y="463.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="85.3" y="405" width="1.1" height="15.0" fill="rgb(233,76,34)" rx="2" ry="2" />
<text  x="88.28" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="26.6" y="405" width="0.4" height="15.0" fill="rgb(233,177,3)" rx="2" ry="2" />
<text  x="29.55" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="615.4" y="389" width="0.5" height="15.0" fill="rgb(244,17,1)" rx="2" ry="2" />
<text  x="618.42" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="115.7" y="341" width="0.4" height="15.0" fill="rgb(244,108,8)" rx="2" ry="2" />
<text  x="118.66" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.4" y="213" width="0.2" height="15.0" fill="rgb(247,127,29)" rx="2" ry="2" />
<text  x="48.37" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="108.4" y="453" width="0.2" height="15.0" fill="rgb(232,34,4)" rx="2" ry="2" />
<text  x="111.41" y="463.5" ></text>
</g>
<g >
<title>database::has_keyspace (16 samples, 0.31%)</title><rect x="850.3" y="405" width="3.7" height="15.0" fill="rgb(226,122,25)" rx="2" ry="2" />
<text  x="853.33" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="646.5" y="485" width="0.2" height="15.0" fill="rgb(228,127,8)" rx="2" ry="2" />
<text  x="649.48" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="764.6" y="373" width="0.5" height="15.0" fill="rgb(232,159,14)" rx="2" ry="2" />
<text  x="767.62" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="23.8" y="373" width="0.3" height="15.0" fill="rgb(212,73,35)" rx="2" ry="2" />
<text  x="26.83" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="60.3" y="245" width="0.3" height="15.0" fill="rgb(229,123,50)" rx="2" ry="2" />
<text  x="63.34" y="255.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (3 samples, 0.06%)</title><rect x="1128.1" y="229" width="0.7" height="15.0" fill="rgb(215,204,53)" rx="2" ry="2" />
<text  x="1131.10" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (14 samples, 0.27%)</title><rect x="65.8" y="357" width="3.2" height="15.0" fill="rgb(251,195,42)" rx="2" ry="2" />
<text  x="68.78" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (49 samples, 0.94%)</title><rect x="33.1" y="293" width="11.1" height="15.0" fill="rgb(207,74,46)" rx="2" ry="2" />
<text  x="36.13" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (15 samples, 0.29%)</title><rect x="738.5" y="325" width="3.4" height="15.0" fill="rgb(240,106,6)" rx="2" ry="2" />
<text  x="741.54" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (6 samples, 0.12%)</title><rect x="750.3" y="373" width="1.4" height="15.0" fill="rgb(223,20,43)" rx="2" ry="2" />
<text  x="753.33" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%)</title><rect x="748.7" y="309" width="1.2" height="15.0" fill="rgb(244,70,18)" rx="2" ry="2" />
<text  x="751.75" y="319.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (5 samples, 0.10%)</title><rect x="56.0" y="117" width="1.2" height="15.0" fill="rgb(250,187,28)" rx="2" ry="2" />
<text  x="59.03" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="22.5" y="517" width="0.2" height="15.0" fill="rgb(225,21,13)" rx="2" ry="2" />
<text  x="25.47" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="51.5" y="277" width="0.2" height="15.0" fill="rgb(225,158,27)" rx="2" ry="2" />
<text  x="54.50" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="798.4" y="181" width="0.5" height="15.0" fill="rgb(208,182,4)" rx="2" ry="2" />
<text  x="801.41" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="810.9" y="293" width="2.0" height="15.0" fill="rgb(220,134,1)" rx="2" ry="2" />
<text  x="813.88" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (3 samples, 0.06%)</title><rect x="12.0" y="357" width="0.7" height="15.0" fill="rgb(218,20,14)" rx="2" ry="2" />
<text  x="15.04" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (2 samples, 0.04%)</title><rect x="1071.2" y="261" width="0.4" height="15.0" fill="rgb(205,64,19)" rx="2" ry="2" />
<text  x="1074.18" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="67.1" y="293" width="0.3" height="15.0" fill="rgb(210,180,46)" rx="2" ry="2" />
<text  x="70.14" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.10%)</title><rect x="254.4" y="117" width="1.2" height="15.0" fill="rgb(240,42,23)" rx="2" ry="2" />
<text  x="257.44" y="127.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="1049.4" y="261" width="0.2" height="15.0" fill="rgb(231,225,49)" rx="2" ry="2" />
<text  x="1052.42" y="271.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="338.8" y="309" width="0.7" height="15.0" fill="rgb(214,69,48)" rx="2" ry="2" />
<text  x="341.79" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (116 samples, 2.23%)</title><rect x="787.1" y="325" width="26.3" height="15.0" fill="rgb(217,220,40)" rx="2" ry="2" />
<text  x="790.07" y="335.5" >s..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="66.9" y="309" width="0.2" height="15.0" fill="rgb(208,63,42)" rx="2" ry="2" />
<text  x="69.91" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="673.2" y="485" width="0.5" height="15.0" fill="rgb(226,222,14)" rx="2" ry="2" />
<text  x="676.24" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="116.1" y="309" width="0.2" height="15.0" fill="rgb(214,113,34)" rx="2" ry="2" />
<text  x="119.12" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (89 samples, 1.71%)</title><rect x="911.6" y="405" width="20.1" height="15.0" fill="rgb(213,136,53)" rx="2" ry="2" />
<text  x="914.55" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1048.1" y="309" width="0.2" height="15.0" fill="rgb(229,18,2)" rx="2" ry="2" />
<text  x="1051.06" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(233,19,30)" rx="2" ry="2" />
<text  x="13.68" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="1014.7" y="213" width="0.7" height="15.0" fill="rgb(213,192,18)" rx="2" ry="2" />
<text  x="1017.72" y="223.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="954.4" y="325" width="0.2" height="15.0" fill="rgb(207,36,6)" rx="2" ry="2" />
<text  x="957.41" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (1 samples, 0.02%)</title><rect x="236.1" y="101" width="0.2" height="15.0" fill="rgb(239,20,43)" rx="2" ry="2" />
<text  x="239.07" y="111.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="69.9" y="341" width="0.2" height="15.0" fill="rgb(235,45,30)" rx="2" ry="2" />
<text  x="72.86" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="748.5" y="341" width="1.4" height="15.0" fill="rgb(223,65,44)" rx="2" ry="2" />
<text  x="751.52" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1166.0" y="421" width="0.2" height="15.0" fill="rgb(230,56,42)" rx="2" ry="2" />
<text  x="1168.96" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="767.6" y="325" width="0.2" height="15.0" fill="rgb(237,52,9)" rx="2" ry="2" />
<text  x="770.57" y="335.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="458.5" y="389" width="0.2" height="15.0" fill="rgb(228,162,18)" rx="2" ry="2" />
<text  x="461.51" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="389" width="0.5" height="15.0" fill="rgb(226,85,17)" rx="2" ry="2" />
<text  x="701.41" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (4 samples, 0.08%)</title><rect x="11.8" y="421" width="0.9" height="15.0" fill="rgb(223,208,52)" rx="2" ry="2" />
<text  x="14.81" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1125.1" y="453" width="0.3" height="15.0" fill="rgb(245,155,30)" rx="2" ry="2" />
<text  x="1128.15" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="73.3" y="421" width="0.2" height="15.0" fill="rgb(254,159,2)" rx="2" ry="2" />
<text  x="76.26" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="849.7" y="405" width="0.2" height="15.0" fill="rgb(217,105,38)" rx="2" ry="2" />
<text  x="852.65" y="415.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="36.3" y="261" width="0.2" height="15.0" fill="rgb(238,24,7)" rx="2" ry="2" />
<text  x="39.30" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (30 samples, 0.58%)</title><rect x="1125.4" y="485" width="6.8" height="15.0" fill="rgb(212,210,34)" rx="2" ry="2" />
<text  x="1128.38" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (1 samples, 0.02%)</title><rect x="803.8" y="117" width="0.3" height="15.0" fill="rgb(232,176,40)" rx="2" ry="2" />
<text  x="806.85" y="127.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="541.5" y="277" width="0.2" height="15.0" fill="rgb(215,229,52)" rx="2" ry="2" />
<text  x="544.50" y="287.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="23.4" y="421" width="0.2" height="15.0" fill="rgb(209,119,22)" rx="2" ry="2" />
<text  x="26.38" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="432.9" y="229" width="0.4" height="15.0" fill="rgb(251,10,7)" rx="2" ry="2" />
<text  x="435.89" y="239.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="623.1" y="405" width="0.7" height="15.0" fill="rgb(205,172,41)" rx="2" ry="2" />
<text  x="626.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_range&lt;std::__detail::_Node_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, false, true&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="113.6" y="325" width="0.3" height="15.0" fill="rgb(215,141,51)" rx="2" ry="2" />
<text  x="116.62" y="335.5" ></text>
</g>
<g >
<title>database::do_apply (29 samples, 0.56%)</title><rect x="1125.6" y="341" width="6.6" height="15.0" fill="rgb(205,36,18)" rx="2" ry="2" />
<text  x="1128.60" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (6 samples, 0.12%)</title><rect x="1154.6" y="453" width="1.4" height="15.0" fill="rgb(216,227,25)" rx="2" ry="2" />
<text  x="1157.63" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (5 samples, 0.10%)</title><rect x="817.9" y="325" width="1.1" height="15.0" fill="rgb(253,79,15)" rx="2" ry="2" />
<text  x="820.91" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="52.4" y="149" width="0.2" height="15.0" fill="rgb(217,41,19)" rx="2" ry="2" />
<text  x="55.40" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (3 samples, 0.06%)</title><rect x="469.2" y="261" width="0.6" height="15.0" fill="rgb(216,165,39)" rx="2" ry="2" />
<text  x="472.17" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (9 samples, 0.17%)</title><rect x="30.6" y="277" width="2.1" height="15.0" fill="rgb(237,26,27)" rx="2" ry="2" />
<text  x="33.63" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (621 samples, 11.93%)</title><rect x="950.3" y="421" width="140.8" height="15.0" fill="rgb(227,38,11)" rx="2" ry="2" />
<text  x="953.33" y="431.5" >cql3::statements:..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="872.1" y="405" width="0.2" height="15.0" fill="rgb(205,62,13)" rx="2" ry="2" />
<text  x="875.10" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (65 samples, 1.25%)</title><rect x="582.8" y="341" width="14.7" height="15.0" fill="rgb(242,216,13)" rx="2" ry="2" />
<text  x="585.77" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (3 samples, 0.06%)</title><rect x="1025.2" y="133" width="0.6" height="15.0" fill="rgb(248,143,4)" rx="2" ry="2" />
<text  x="1028.15" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="66.2" y="293" width="0.3" height="15.0" fill="rgb(253,185,54)" rx="2" ry="2" />
<text  x="69.23" y="303.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (2 samples, 0.04%)</title><rect x="756.0" y="261" width="0.5" height="15.0" fill="rgb(243,94,16)" rx="2" ry="2" />
<text  x="759.00" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="12.0" y="341" width="0.3" height="15.0" fill="rgb(222,25,5)" rx="2" ry="2" />
<text  x="15.04" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="62.2" y="197" width="0.6" height="15.0" fill="rgb(253,12,13)" rx="2" ry="2" />
<text  x="65.15" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="98.4" y="485" width="0.3" height="15.0" fill="rgb(210,199,54)" rx="2" ry="2" />
<text  x="101.43" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="948.3" y="341" width="0.2" height="15.0" fill="rgb(216,202,40)" rx="2" ry="2" />
<text  x="951.29" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (4 samples, 0.08%)</title><rect x="574.6" y="389" width="0.9" height="15.0" fill="rgb(209,46,8)" rx="2" ry="2" />
<text  x="577.60" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="52.4" y="277" width="0.5" height="15.0" fill="rgb(229,50,0)" rx="2" ry="2" />
<text  x="55.40" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (13 samples, 0.25%)</title><rect x="1040.1" y="277" width="3.0" height="15.0" fill="rgb(219,197,43)" rx="2" ry="2" />
<text  x="1043.12" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="989.6" y="261" width="0.2" height="15.0" fill="rgb(205,186,47)" rx="2" ry="2" />
<text  x="992.55" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="864.4" y="405" width="0.2" height="15.0" fill="rgb(215,106,34)" rx="2" ry="2" />
<text  x="867.39" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.10%)</title><rect x="52.2" y="309" width="1.1" height="15.0" fill="rgb(246,131,18)" rx="2" ry="2" />
<text  x="55.18" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="542.2" y="293" width="0.2" height="15.0" fill="rgb(218,191,36)" rx="2" ry="2" />
<text  x="545.18" y="303.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (46 samples, 0.88%)</title><rect x="550.1" y="325" width="10.4" height="15.0" fill="rgb(211,223,48)" rx="2" ry="2" />
<text  x="553.12" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="924.9" y="341" width="0.3" height="15.0" fill="rgb(226,186,23)" rx="2" ry="2" />
<text  x="927.93" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="50.4" y="277" width="0.2" height="15.0" fill="rgb(237,187,0)" rx="2" ry="2" />
<text  x="53.36" y="287.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;long&gt; &gt;::skip&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="116.3" y="261" width="0.3" height="15.0" fill="rgb(220,31,12)" rx="2" ry="2" />
<text  x="119.35" y="271.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%)</title><rect x="468.3" y="293" width="0.2" height="15.0" fill="rgb(242,50,12)" rx="2" ry="2" />
<text  x="471.26" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="737.4" y="325" width="0.5" height="15.0" fill="rgb(252,90,41)" rx="2" ry="2" />
<text  x="740.41" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.13%)</title><rect x="1146.0" y="485" width="1.6" height="15.0" fill="rgb(223,147,47)" rx="2" ry="2" />
<text  x="1149.01" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1079.3" y="325" width="0.3" height="15.0" fill="rgb(254,172,0)" rx="2" ry="2" />
<text  x="1082.35" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="373" width="0.5" height="15.0" fill="rgb(254,46,23)" rx="2" ry="2" />
<text  x="701.41" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="843.3" y="405" width="2.5" height="15.0" fill="rgb(217,39,10)" rx="2" ry="2" />
<text  x="846.30" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="677.3" y="453" width="0.2" height="15.0" fill="rgb(246,89,26)" rx="2" ry="2" />
<text  x="680.32" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (609 samples, 11.70%)</title><rect x="724.9" y="501" width="138.1" height="15.0" fill="rgb(227,134,12)" rx="2" ry="2" />
<text  x="727.94" y="511.5" >seastar::internal..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.08%)</title><rect x="305.2" y="277" width="0.9" height="15.0" fill="rgb(244,140,40)" rx="2" ry="2" />
<text  x="308.23" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (9 samples, 0.17%)</title><rect x="30.6" y="309" width="2.1" height="15.0" fill="rgb(221,186,11)" rx="2" ry="2" />
<text  x="33.63" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="83.2" y="405" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="86.24" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (2 samples, 0.04%)</title><rect x="11.4" y="389" width="0.4" height="15.0" fill="rgb(253,37,40)" rx="2" ry="2" />
<text  x="14.36" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="817.0" y="357" width="2.3" height="15.0" fill="rgb(222,162,11)" rx="2" ry="2" />
<text  x="820.00" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="68.0" y="133" width="0.3" height="15.0" fill="rgb(216,79,44)" rx="2" ry="2" />
<text  x="71.05" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1106.6" y="405" width="0.2" height="15.0" fill="rgb(206,62,43)" rx="2" ry="2" />
<text  x="1109.56" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="164.6" y="405" width="0.9" height="15.0" fill="rgb(228,176,17)" rx="2" ry="2" />
<text  x="167.64" y="415.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="754.0" y="277" width="0.2" height="15.0" fill="rgb(225,167,42)" rx="2" ry="2" />
<text  x="756.96" y="287.5" ></text>
</g>
<g >
<title>ser::start_frame&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1131.3" y="229" width="0.2" height="15.0" fill="rgb(234,73,41)" rx="2" ry="2" />
<text  x="1134.27" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="719.7" y="405" width="0.3" height="15.0" fill="rgb(236,26,31)" rx="2" ry="2" />
<text  x="722.72" y="415.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.7" y="277" width="0.3" height="15.0" fill="rgb(241,51,46)" rx="2" ry="2" />
<text  x="88.73" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="66.9" y="197" width="0.2" height="15.0" fill="rgb(231,202,34)" rx="2" ry="2" />
<text  x="69.91" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="55.3" y="197" width="0.5" height="15.0" fill="rgb(246,24,30)" rx="2" ry="2" />
<text  x="58.35" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="938.1" y="357" width="0.4" height="15.0" fill="rgb(218,5,42)" rx="2" ry="2" />
<text  x="941.08" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="55.3" y="149" width="0.5" height="15.0" fill="rgb(219,189,32)" rx="2" ry="2" />
<text  x="58.35" y="159.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (459 samples, 8.82%)</title><rect x="344.2" y="293" width="104.1" height="15.0" fill="rgb(252,162,1)" rx="2" ry="2" />
<text  x="347.23" y="303.5" >seastar::rep..</text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="66.7" y="117" width="0.2" height="15.0" fill="rgb(221,175,28)" rx="2" ry="2" />
<text  x="69.69" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1139.0" y="485" width="0.2" height="15.0" fill="rgb(242,59,49)" rx="2" ry="2" />
<text  x="1141.98" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="53.5" y="181" width="0.3" height="15.0" fill="rgb(239,72,21)" rx="2" ry="2" />
<text  x="56.54" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.7" y="245" width="0.3" height="15.0" fill="rgb(210,205,19)" rx="2" ry="2" />
<text  x="88.73" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="667.6" y="373" width="0.2" height="15.0" fill="rgb(225,70,32)" rx="2" ry="2" />
<text  x="670.57" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="797.5" y="197" width="0.2" height="15.0" fill="rgb(223,174,10)" rx="2" ry="2" />
<text  x="800.50" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.10%)</title><rect x="48.3" y="309" width="1.2" height="15.0" fill="rgb(245,31,52)" rx="2" ry="2" />
<text  x="51.32" y="319.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="23.6" y="213" width="0.2" height="15.0" fill="rgb(215,2,33)" rx="2" ry="2" />
<text  x="26.60" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (52 samples, 1.00%)</title><rect x="708.8" y="485" width="11.8" height="15.0" fill="rgb(234,13,41)" rx="2" ry="2" />
<text  x="711.84" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1089.3" y="389" width="0.3" height="15.0" fill="rgb(221,95,21)" rx="2" ry="2" />
<text  x="1092.32" y="399.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1179.1" y="629" width="0.2" height="15.0" fill="rgb(209,157,25)" rx="2" ry="2" />
<text  x="1182.12" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="514.5" y="213" width="0.7" height="15.0" fill="rgb(232,93,3)" rx="2" ry="2" />
<text  x="517.52" y="223.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="869.2" y="213" width="0.2" height="15.0" fill="rgb(254,19,48)" rx="2" ry="2" />
<text  x="872.15" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="724.3" y="501" width="0.2" height="15.0" fill="rgb(231,222,33)" rx="2" ry="2" />
<text  x="727.26" y="511.5" ></text>
</g>
<g >
<title>service::storage_service::prepare_to_join (1 samples, 0.02%)</title><rect x="10.7" y="453" width="0.2" height="15.0" fill="rgb(210,24,2)" rx="2" ry="2" />
<text  x="13.68" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (3 samples, 0.06%)</title><rect x="57.8" y="309" width="0.7" height="15.0" fill="rgb(220,36,31)" rx="2" ry="2" />
<text  x="60.84" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="660.8" y="453" width="0.2" height="15.0" fill="rgb(229,163,4)" rx="2" ry="2" />
<text  x="663.77" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="614.7" y="373" width="0.5" height="15.0" fill="rgb(235,186,35)" rx="2" ry="2" />
<text  x="617.74" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="87.8" y="421" width="0.2" height="15.0" fill="rgb(213,33,10)" rx="2" ry="2" />
<text  x="90.77" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="540.8" y="245" width="0.2" height="15.0" fill="rgb(215,117,31)" rx="2" ry="2" />
<text  x="543.82" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (15 samples, 0.29%)</title><rect x="649.2" y="485" width="3.4" height="15.0" fill="rgb(215,190,25)" rx="2" ry="2" />
<text  x="652.20" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="546.9" y="325" width="0.3" height="15.0" fill="rgb(229,132,24)" rx="2" ry="2" />
<text  x="549.94" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%)</title><rect x="78.7" y="309" width="0.2" height="15.0" fill="rgb(208,115,25)" rx="2" ry="2" />
<text  x="81.70" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="954.9" y="389" width="1.8" height="15.0" fill="rgb(237,187,15)" rx="2" ry="2" />
<text  x="957.86" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (18 samples, 0.35%)</title><rect x="470.5" y="277" width="4.1" height="15.0" fill="rgb(247,112,54)" rx="2" ry="2" />
<text  x="473.53" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="907.7" y="357" width="0.2" height="15.0" fill="rgb(215,225,0)" rx="2" ry="2" />
<text  x="910.70" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="659.2" y="421" width="0.4" height="15.0" fill="rgb(226,106,52)" rx="2" ry="2" />
<text  x="662.18" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="870.5" y="261" width="0.2" height="15.0" fill="rgb(205,138,44)" rx="2" ry="2" />
<text  x="873.51" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.10%)</title><rect x="52.2" y="325" width="1.1" height="15.0" fill="rgb(216,20,29)" rx="2" ry="2" />
<text  x="55.18" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (128 samples, 2.46%)</title><rect x="1008.4" y="277" width="29.0" height="15.0" fill="rgb(244,205,28)" rx="2" ry="2" />
<text  x="1011.37" y="287.5" >se..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (40 samples, 0.77%)</title><rect x="208.6" y="245" width="9.1" height="15.0" fill="rgb(215,189,42)" rx="2" ry="2" />
<text  x="211.63" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1159.8" y="469" width="0.7" height="15.0" fill="rgb(222,96,47)" rx="2" ry="2" />
<text  x="1162.84" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="654.6" y="485" width="0.3" height="15.0" fill="rgb(245,51,42)" rx="2" ry="2" />
<text  x="657.65" y="495.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%)</title><rect x="1078.9" y="325" width="0.2" height="15.0" fill="rgb(210,7,22)" rx="2" ry="2" />
<text  x="1081.89" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (6 samples, 0.12%)</title><rect x="1102.2" y="405" width="1.4" height="15.0" fill="rgb(246,152,8)" rx="2" ry="2" />
<text  x="1105.25" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="698.9" y="405" width="0.2" height="15.0" fill="rgb(213,191,54)" rx="2" ry="2" />
<text  x="701.86" y="415.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="611.3" y="405" width="0.9" height="15.0" fill="rgb(220,66,5)" rx="2" ry="2" />
<text  x="614.34" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="52.2" y="133" width="0.2" height="15.0" fill="rgb(222,162,9)" rx="2" ry="2" />
<text  x="55.18" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="216.8" y="181" width="0.2" height="15.0" fill="rgb(216,213,46)" rx="2" ry="2" />
<text  x="219.79" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="116.8" y="229" width="0.2" height="15.0" fill="rgb(246,0,9)" rx="2" ry="2" />
<text  x="119.80" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="437" width="0.5" height="15.0" fill="rgb(249,219,47)" rx="2" ry="2" />
<text  x="701.41" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="694.6" y="453" width="0.2" height="15.0" fill="rgb(211,199,27)" rx="2" ry="2" />
<text  x="697.55" y="463.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="10.7" y="421" width="0.2" height="15.0" fill="rgb(223,161,31)" rx="2" ry="2" />
<text  x="13.68" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="983.0" y="341" width="0.2" height="15.0" fill="rgb(224,209,29)" rx="2" ry="2" />
<text  x="985.98" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (4 samples, 0.08%)</title><rect x="11.8" y="437" width="0.9" height="15.0" fill="rgb(251,117,15)" rx="2" ry="2" />
<text  x="14.81" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="659.4" y="293" width="0.2" height="15.0" fill="rgb(245,161,25)" rx="2" ry="2" />
<text  x="662.41" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="321.3" y="309" width="0.3" height="15.0" fill="rgb(244,182,51)" rx="2" ry="2" />
<text  x="324.33" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="59.9" y="245" width="0.2" height="15.0" fill="rgb(234,206,53)" rx="2" ry="2" />
<text  x="62.88" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="831.5" y="325" width="1.6" height="15.0" fill="rgb(247,56,20)" rx="2" ry="2" />
<text  x="834.51" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (538 samples, 10.34%)</title><rect x="334.3" y="405" width="121.9" height="15.0" fill="rgb(237,206,17)" rx="2" ry="2" />
<text  x="337.25" y="415.5" >seastar::future..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="300.9" y="261" width="0.2" height="15.0" fill="rgb(214,57,46)" rx="2" ry="2" />
<text  x="303.92" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="14.3" y="405" width="0.2" height="15.0" fill="rgb(251,88,19)" rx="2" ry="2" />
<text  x="17.31" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="805.4" y="85" width="0.3" height="15.0" fill="rgb(217,101,19)" rx="2" ry="2" />
<text  x="808.43" y="95.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="31.1" y="229" width="1.1" height="15.0" fill="rgb(215,203,18)" rx="2" ry="2" />
<text  x="34.09" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="871.9" y="389" width="0.2" height="15.0" fill="rgb(227,174,45)" rx="2" ry="2" />
<text  x="874.87" y="399.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="555.1" y="293" width="0.5" height="15.0" fill="rgb(246,5,53)" rx="2" ry="2" />
<text  x="558.10" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (4 samples, 0.08%)</title><rect x="798.2" y="213" width="0.9" height="15.0" fill="rgb(210,28,1)" rx="2" ry="2" />
<text  x="801.18" y="223.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (33 samples, 0.63%)</title><rect x="508.4" y="229" width="7.5" height="15.0" fill="rgb(221,155,38)" rx="2" ry="2" />
<text  x="511.39" y="239.5" ></text>
</g>
<g >
<title>__start_context (15 samples, 0.29%)</title><rect x="10.9" y="581" width="3.4" height="15.0" fill="rgb(236,66,11)" rx="2" ry="2" />
<text  x="13.91" y="591.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.12%)</title><rect x="140.8" y="389" width="1.4" height="15.0" fill="rgb(246,45,29)" rx="2" ry="2" />
<text  x="143.83" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="79.4" y="309" width="0.2" height="15.0" fill="rgb(246,45,6)" rx="2" ry="2" />
<text  x="82.39" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (21 samples, 0.40%)</title><rect x="656.2" y="501" width="4.8" height="15.0" fill="rgb(209,134,32)" rx="2" ry="2" />
<text  x="659.23" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="809.7" y="213" width="0.5" height="15.0" fill="rgb(211,218,12)" rx="2" ry="2" />
<text  x="812.74" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (14 samples, 0.27%)</title><rect x="903.4" y="277" width="3.2" height="15.0" fill="rgb(222,184,49)" rx="2" ry="2" />
<text  x="906.39" y="287.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (8 samples, 0.15%)</title><rect x="1135.6" y="213" width="1.8" height="15.0" fill="rgb(241,145,45)" rx="2" ry="2" />
<text  x="1138.58" y="223.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="509.3" y="213" width="0.9" height="15.0" fill="rgb(240,5,7)" rx="2" ry="2" />
<text  x="512.30" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.10%)</title><rect x="48.3" y="245" width="1.2" height="15.0" fill="rgb(243,42,10)" rx="2" ry="2" />
<text  x="51.32" y="255.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (2 samples, 0.04%)</title><rect x="714.3" y="421" width="0.4" height="15.0" fill="rgb(249,223,4)" rx="2" ry="2" />
<text  x="717.28" y="431.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1127.6" y="229" width="0.5" height="15.0" fill="rgb(236,195,40)" rx="2" ry="2" />
<text  x="1130.64" y="239.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="10.9" y="389" width="0.2" height="15.0" fill="rgb(254,220,1)" rx="2" ry="2" />
<text  x="13.91" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="52.6" y="181" width="0.3" height="15.0" fill="rgb(213,175,36)" rx="2" ry="2" />
<text  x="55.63" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_max_size (1 samples, 0.02%)</title><rect x="32.4" y="229" width="0.3" height="15.0" fill="rgb(218,55,23)" rx="2" ry="2" />
<text  x="35.45" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (56 samples, 1.08%)</title><rect x="285.7" y="261" width="12.7" height="15.0" fill="rgb(252,1,36)" rx="2" ry="2" />
<text  x="288.73" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="67.4" y="213" width="0.2" height="15.0" fill="rgb(234,19,53)" rx="2" ry="2" />
<text  x="70.37" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (308 samples, 5.92%)</title><rect x="763.7" y="421" width="69.9" height="15.0" fill="rgb(228,110,52)" rx="2" ry="2" />
<text  x="766.71" y="431.5" >cql3::s..</text>
</g>
<g >
<title>db::system_keyspace_make (6 samples, 0.12%)</title><rect x="115.7" y="501" width="1.3" height="15.0" fill="rgb(253,141,1)" rx="2" ry="2" />
<text  x="118.66" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="698.4" y="357" width="0.5" height="15.0" fill="rgb(225,17,2)" rx="2" ry="2" />
<text  x="701.41" y="367.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(243,204,0)" rx="2" ry="2" />
<text  x="13.68" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%)</title><rect x="739.2" y="293" width="0.7" height="15.0" fill="rgb(238,62,17)" rx="2" ry="2" />
<text  x="742.22" y="303.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="976.6" y="341" width="0.3" height="15.0" fill="rgb(218,143,36)" rx="2" ry="2" />
<text  x="979.63" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="23.4" y="501" width="0.2" height="15.0" fill="rgb(230,38,35)" rx="2" ry="2" />
<text  x="26.38" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="67.4" y="149" width="0.2" height="15.0" fill="rgb(232,213,39)" rx="2" ry="2" />
<text  x="70.37" y="159.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%)</title><rect x="804.3" y="133" width="2.3" height="15.0" fill="rgb(210,89,6)" rx="2" ry="2" />
<text  x="807.30" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="1085.7" y="373" width="0.7" height="15.0" fill="rgb(241,11,4)" rx="2" ry="2" />
<text  x="1088.70" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="329.3" y="293" width="0.2" height="15.0" fill="rgb(231,194,31)" rx="2" ry="2" />
<text  x="332.26" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="68.3" y="165" width="0.2" height="15.0" fill="rgb(208,73,52)" rx="2" ry="2" />
<text  x="71.27" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%)</title><rect x="456.5" y="405" width="0.2" height="15.0" fill="rgb(215,67,0)" rx="2" ry="2" />
<text  x="459.47" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="138.1" y="389" width="0.7" height="15.0" fill="rgb(238,220,27)" rx="2" ry="2" />
<text  x="141.11" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1089.1" y="357" width="0.2" height="15.0" fill="rgb(230,75,7)" rx="2" ry="2" />
<text  x="1092.10" y="367.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="87.8" y="453" width="0.2" height="15.0" fill="rgb(221,220,24)" rx="2" ry="2" />
<text  x="90.77" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%)</title><rect x="68.7" y="325" width="0.3" height="15.0" fill="rgb(212,48,32)" rx="2" ry="2" />
<text  x="71.73" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="52.9" y="293" width="0.4" height="15.0" fill="rgb(220,64,17)" rx="2" ry="2" />
<text  x="55.86" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (19 samples, 0.37%)</title><rect x="1022.7" y="197" width="4.3" height="15.0" fill="rgb(236,179,23)" rx="2" ry="2" />
<text  x="1025.66" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="165.3" y="389" width="0.2" height="15.0" fill="rgb(243,21,32)" rx="2" ry="2" />
<text  x="168.32" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="538.3" y="245" width="0.3" height="15.0" fill="rgb(236,133,7)" rx="2" ry="2" />
<text  x="541.32" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="718.6" y="421" width="1.1" height="15.0" fill="rgb(224,197,41)" rx="2" ry="2" />
<text  x="721.59" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (3 samples, 0.06%)</title><rect x="1116.8" y="389" width="0.6" height="15.0" fill="rgb(221,115,49)" rx="2" ry="2" />
<text  x="1119.76" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="123.1" y="469" width="0.3" height="15.0" fill="rgb(239,139,29)" rx="2" ry="2" />
<text  x="126.15" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (2 samples, 0.04%)</title><rect x="868.0" y="373" width="0.5" height="15.0" fill="rgb(233,74,40)" rx="2" ry="2" />
<text  x="871.02" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="332.4" y="357" width="0.5" height="15.0" fill="rgb(225,177,15)" rx="2" ry="2" />
<text  x="335.44" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%)</title><rect x="768.5" y="325" width="1.1" height="15.0" fill="rgb(230,103,10)" rx="2" ry="2" />
<text  x="771.47" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.10%)</title><rect x="141.1" y="373" width="1.1" height="15.0" fill="rgb(235,79,49)" rx="2" ry="2" />
<text  x="144.06" y="383.5" ></text>
</g>
<g >
<title>std::__stable_partition_adaptive&lt;__gnu_cxx::__normal_iterator&lt;column_definition*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt;, column_definition*, __gnu_cxx::__ops::_Iter_pred&lt;schema::schema (1 samples, 0.02%)</title><rect x="23.4" y="197" width="0.2" height="15.0" fill="rgb(242,26,7)" rx="2" ry="2" />
<text  x="26.38" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="870.3" y="261" width="0.2" height="15.0" fill="rgb(220,130,54)" rx="2" ry="2" />
<text  x="873.28" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="63.3" y="149" width="0.2" height="15.0" fill="rgb(248,215,44)" rx="2" ry="2" />
<text  x="66.29" y="159.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="53.5" y="293" width="0.5" height="15.0" fill="rgb(223,85,48)" rx="2" ry="2" />
<text  x="56.54" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%)</title><rect x="667.1" y="421" width="1.2" height="15.0" fill="rgb(239,56,25)" rx="2" ry="2" />
<text  x="670.12" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (5 samples, 0.10%)</title><rect x="315.9" y="357" width="1.1" height="15.0" fill="rgb(219,209,50)" rx="2" ry="2" />
<text  x="318.88" y="367.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%)</title><rect x="642.2" y="437" width="0.2" height="15.0" fill="rgb(232,194,5)" rx="2" ry="2" />
<text  x="645.18" y="447.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="142.6" y="421" width="0.3" height="15.0" fill="rgb(222,120,1)" rx="2" ry="2" />
<text  x="145.65" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="275.5" y="197" width="0.2" height="15.0" fill="rgb(215,203,53)" rx="2" ry="2" />
<text  x="278.52" y="207.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="48.3" y="165" width="0.2" height="15.0" fill="rgb(236,201,17)" rx="2" ry="2" />
<text  x="51.32" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="627.4" y="437" width="0.3" height="15.0" fill="rgb(213,155,39)" rx="2" ry="2" />
<text  x="630.44" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="22.2" y="453" width="0.3" height="15.0" fill="rgb(251,81,0)" rx="2" ry="2" />
<text  x="25.24" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="81.7" y="421" width="0.4" height="15.0" fill="rgb(211,118,39)" rx="2" ry="2" />
<text  x="84.65" y="431.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%)</title><rect x="83.0" y="437" width="0.5" height="15.0" fill="rgb(211,117,25)" rx="2" ry="2" />
<text  x="86.01" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.21%)</title><rect x="727.2" y="453" width="2.5" height="15.0" fill="rgb(240,10,30)" rx="2" ry="2" />
<text  x="730.21" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="307.3" y="277" width="0.2" height="15.0" fill="rgb(218,13,18)" rx="2" ry="2" />
<text  x="310.27" y="287.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="954.9" y="405" width="1.8" height="15.0" fill="rgb(209,180,11)" rx="2" ry="2" />
<text  x="957.86" y="415.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="704.8" y="437" width="0.2" height="15.0" fill="rgb(247,33,39)" rx="2" ry="2" />
<text  x="707.76" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.7" y="277" width="0.2" height="15.0" fill="rgb(206,212,46)" rx="2" ry="2" />
<text  x="815.69" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="568.0" y="421" width="0.3" height="15.0" fill="rgb(219,7,38)" rx="2" ry="2" />
<text  x="571.03" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="116.1" y="325" width="0.2" height="15.0" fill="rgb(243,148,51)" rx="2" ry="2" />
<text  x="119.12" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.15%)</title><rect x="1152.6" y="421" width="1.8" height="15.0" fill="rgb(224,152,20)" rx="2" ry="2" />
<text  x="1155.59" y="431.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (18 samples, 0.35%)</title><rect x="918.1" y="373" width="4.1" height="15.0" fill="rgb(231,74,6)" rx="2" ry="2" />
<text  x="921.13" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="279.4" y="133" width="0.2" height="15.0" fill="rgb(252,132,46)" rx="2" ry="2" />
<text  x="282.38" y="143.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (5 samples, 0.10%)</title><rect x="56.0" y="133" width="1.2" height="15.0" fill="rgb(234,72,36)" rx="2" ry="2" />
<text  x="59.03" y="143.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="66.0" y="325" width="0.2" height="15.0" fill="rgb(214,1,31)" rx="2" ry="2" />
<text  x="69.01" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="53.8" y="181" width="0.2" height="15.0" fill="rgb(231,31,6)" rx="2" ry="2" />
<text  x="56.76" y="191.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (6 samples, 0.12%)</title><rect x="691.2" y="469" width="1.3" height="15.0" fill="rgb(236,228,51)" rx="2" ry="2" />
<text  x="694.15" y="479.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="115.4" y="485" width="0.3" height="15.0" fill="rgb(225,39,14)" rx="2" ry="2" />
<text  x="118.44" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="50.4" y="165" width="0.2" height="15.0" fill="rgb(221,155,15)" rx="2" ry="2" />
<text  x="53.36" y="175.5" ></text>
</g>
<g >
<title>database::find_schema (13 samples, 0.25%)</title><rect x="824.0" y="357" width="3.0" height="15.0" fill="rgb(217,174,27)" rx="2" ry="2" />
<text  x="827.03" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="709.3" y="469" width="0.2" height="15.0" fill="rgb(236,113,7)" rx="2" ry="2" />
<text  x="712.29" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (2 samples, 0.04%)</title><rect x="50.8" y="309" width="0.5" height="15.0" fill="rgb(239,164,26)" rx="2" ry="2" />
<text  x="53.81" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="700.0" y="437" width="0.2" height="15.0" fill="rgb(208,91,27)" rx="2" ry="2" />
<text  x="703.00" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="775.5" y="341" width="0.2" height="15.0" fill="rgb(229,131,19)" rx="2" ry="2" />
<text  x="778.50" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="806.3" y="69" width="0.3" height="15.0" fill="rgb(225,207,46)" rx="2" ry="2" />
<text  x="809.34" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="775.7" y="373" width="0.3" height="15.0" fill="rgb(221,63,24)" rx="2" ry="2" />
<text  x="778.73" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="23.8" y="485" width="0.3" height="15.0" fill="rgb(211,178,35)" rx="2" ry="2" />
<text  x="26.83" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="77.3" y="373" width="0.3" height="15.0" fill="rgb(218,226,2)" rx="2" ry="2" />
<text  x="80.34" y="383.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="865.5" y="405" width="0.2" height="15.0" fill="rgb(207,147,52)" rx="2" ry="2" />
<text  x="868.52" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (458 samples, 8.80%)</title><rect x="458.7" y="389" width="103.9" height="15.0" fill="rgb(216,212,22)" rx="2" ry="2" />
<text  x="461.74" y="399.5" >std::functio..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="775.3" y="357" width="0.4" height="15.0" fill="rgb(246,61,37)" rx="2" ry="2" />
<text  x="778.28" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="203.4" y="277" width="0.2" height="15.0" fill="rgb(208,93,44)" rx="2" ry="2" />
<text  x="206.42" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="23.6" y="501" width="0.2" height="15.0" fill="rgb(246,203,1)" rx="2" ry="2" />
<text  x="26.60" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="870.1" y="261" width="0.2" height="15.0" fill="rgb(218,174,38)" rx="2" ry="2" />
<text  x="873.06" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1007.9" y="277" width="0.5" height="15.0" fill="rgb(253,20,18)" rx="2" ry="2" />
<text  x="1010.92" y="287.5" ></text>
</g>
<g >
<title>freeze (8 samples, 0.15%)</title><rect x="1135.6" y="197" width="1.8" height="15.0" fill="rgb(207,167,18)" rx="2" ry="2" />
<text  x="1138.58" y="207.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="117.5" y="501" width="0.7" height="15.0" fill="rgb(208,105,3)" rx="2" ry="2" />
<text  x="120.48" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="632.9" y="421" width="0.2" height="15.0" fill="rgb(211,76,36)" rx="2" ry="2" />
<text  x="635.88" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="429.9" y="197" width="0.5" height="15.0" fill="rgb(254,189,25)" rx="2" ry="2" />
<text  x="432.94" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (3 samples, 0.06%)</title><rect x="372.1" y="181" width="0.7" height="15.0" fill="rgb(236,89,6)" rx="2" ry="2" />
<text  x="375.12" y="191.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="906.6" y="277" width="0.4" height="15.0" fill="rgb(242,6,28)" rx="2" ry="2" />
<text  x="909.56" y="287.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="728.3" y="421" width="1.2" height="15.0" fill="rgb(237,56,41)" rx="2" ry="2" />
<text  x="731.34" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="105.7" y="453" width="0.2" height="15.0" fill="rgb(232,173,8)" rx="2" ry="2" />
<text  x="108.69" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%)</title><rect x="60.6" y="245" width="0.2" height="15.0" fill="rgb(206,77,15)" rx="2" ry="2" />
<text  x="63.56" y="255.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="633.1" y="421" width="0.9" height="15.0" fill="rgb(233,222,52)" rx="2" ry="2" />
<text  x="636.11" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="23.4" y="309" width="0.2" height="15.0" fill="rgb(208,192,49)" rx="2" ry="2" />
<text  x="26.38" y="319.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="23.4" y="293" width="0.2" height="15.0" fill="rgb(218,75,6)" rx="2" ry="2" />
<text  x="26.38" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (3 samples, 0.06%)</title><rect x="1034.9" y="261" width="0.7" height="15.0" fill="rgb(234,201,14)" rx="2" ry="2" />
<text  x="1037.90" y="271.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="323.4" y="309" width="0.2" height="15.0" fill="rgb(230,97,34)" rx="2" ry="2" />
<text  x="326.37" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="120.2" y="485" width="0.2" height="15.0" fill="rgb(214,146,30)" rx="2" ry="2" />
<text  x="123.20" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (4 samples, 0.08%)</title><rect x="859.9" y="469" width="0.9" height="15.0" fill="rgb(238,71,34)" rx="2" ry="2" />
<text  x="862.85" y="479.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="116.8" y="309" width="0.2" height="15.0" fill="rgb(222,202,37)" rx="2" ry="2" />
<text  x="119.80" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="117" width="0.2" height="15.0" fill="rgb(239,155,28)" rx="2" ry="2" />
<text  x="64.02" y="127.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="70.1" y="341" width="0.2" height="15.0" fill="rgb(242,208,38)" rx="2" ry="2" />
<text  x="73.09" y="351.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="22.0" y="565" width="0.2" height="15.0" fill="rgb(238,99,37)" rx="2" ry="2" />
<text  x="25.02" y="575.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (17 samples, 0.33%)</title><rect x="903.2" y="293" width="3.8" height="15.0" fill="rgb(233,179,40)" rx="2" ry="2" />
<text  x="906.16" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (8 samples, 0.15%)</title><rect x="1047.8" y="325" width="1.8" height="15.0" fill="rgb(247,203,53)" rx="2" ry="2" />
<text  x="1050.83" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (8 samples, 0.15%)</title><rect x="55.3" y="277" width="1.9" height="15.0" fill="rgb(233,116,1)" rx="2" ry="2" />
<text  x="58.35" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="83.0" y="357" width="0.2" height="15.0" fill="rgb(234,64,2)" rx="2" ry="2" />
<text  x="86.01" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%)</title><rect x="142.2" y="421" width="0.2" height="15.0" fill="rgb(218,49,25)" rx="2" ry="2" />
<text  x="145.19" y="431.5" ></text>
</g>
<g >
<title>get_scheduling_groups (1 samples, 0.02%)</title><rect x="117.0" y="501" width="0.3" height="15.0" fill="rgb(237,25,25)" rx="2" ry="2" />
<text  x="120.03" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (3 samples, 0.06%)</title><rect x="28.1" y="421" width="0.7" height="15.0" fill="rgb(249,124,1)" rx="2" ry="2" />
<text  x="31.14" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="66.9" y="181" width="0.2" height="15.0" fill="rgb(220,133,50)" rx="2" ry="2" />
<text  x="69.91" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.4" y="325" width="0.2" height="15.0" fill="rgb(247,71,1)" rx="2" ry="2" />
<text  x="48.37" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1038.8" y="277" width="0.2" height="15.0" fill="rgb(241,192,53)" rx="2" ry="2" />
<text  x="1041.76" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="297.7" y="229" width="0.3" height="15.0" fill="rgb(209,229,32)" rx="2" ry="2" />
<text  x="300.74" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (3 samples, 0.06%)</title><rect x="114.8" y="485" width="0.6" height="15.0" fill="rgb(224,147,44)" rx="2" ry="2" />
<text  x="117.76" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="1168.5" y="485" width="0.2" height="15.0" fill="rgb(205,169,31)" rx="2" ry="2" />
<text  x="1171.46" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (2 samples, 0.04%)</title><rect x="50.4" y="341" width="0.4" height="15.0" fill="rgb(223,118,25)" rx="2" ry="2" />
<text  x="53.36" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (4 samples, 0.08%)</title><rect x="898.6" y="309" width="0.9" height="15.0" fill="rgb(206,10,44)" rx="2" ry="2" />
<text  x="901.63" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="50.4" y="325" width="0.2" height="15.0" fill="rgb(230,105,53)" rx="2" ry="2" />
<text  x="53.36" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="85" width="0.2" height="15.0" fill="rgb(250,30,2)" rx="2" ry="2" />
<text  x="64.02" y="95.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (53 samples, 1.02%)</title><rect x="585.3" y="325" width="12.0" height="15.0" fill="rgb(243,167,47)" rx="2" ry="2" />
<text  x="588.26" y="335.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="115.4" y="405" width="0.3" height="15.0" fill="rgb(218,21,39)" rx="2" ry="2" />
<text  x="118.44" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="57.6" y="261" width="0.2" height="15.0" fill="rgb(238,2,0)" rx="2" ry="2" />
<text  x="60.62" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="1140.6" y="501" width="0.4" height="15.0" fill="rgb(207,160,16)" rx="2" ry="2" />
<text  x="1143.57" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (10 samples, 0.19%)</title><rect x="51.3" y="341" width="2.2" height="15.0" fill="rgb(221,188,48)" rx="2" ry="2" />
<text  x="54.27" y="351.5" ></text>
</g>
<g >
<title>db::filter_for_query (1 samples, 0.02%)</title><rect x="970.1" y="357" width="0.2" height="15.0" fill="rgb(241,66,6)" rx="2" ry="2" />
<text  x="973.05" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="293.0" y="197" width="0.9" height="15.0" fill="rgb(210,99,46)" rx="2" ry="2" />
<text  x="295.98" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.15%)</title><rect x="900.0" y="293" width="1.8" height="15.0" fill="rgb(228,11,6)" rx="2" ry="2" />
<text  x="902.99" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="52.9" y="165" width="0.4" height="15.0" fill="rgb(242,125,32)" rx="2" ry="2" />
<text  x="55.86" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (56 samples, 1.08%)</title><rect x="285.7" y="245" width="12.7" height="15.0" fill="rgb(251,181,21)" rx="2" ry="2" />
<text  x="288.73" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="453.5" y="325" width="0.5" height="15.0" fill="rgb(245,150,16)" rx="2" ry="2" />
<text  x="456.52" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="27.2" y="373" width="0.3" height="15.0" fill="rgb(254,106,13)" rx="2" ry="2" />
<text  x="30.23" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%)</title><rect x="474.2" y="261" width="0.2" height="15.0" fill="rgb(233,174,44)" rx="2" ry="2" />
<text  x="477.15" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="793.2" y="261" width="0.2" height="15.0" fill="rgb(220,195,25)" rx="2" ry="2" />
<text  x="796.19" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (241 samples, 4.63%)</title><rect x="221.1" y="213" width="54.6" height="15.0" fill="rgb(222,189,30)" rx="2" ry="2" />
<text  x="224.10" y="223.5" >logal..</text>
</g>
<g >
<title>executor&lt;test_read (599 samples, 11.51%)</title><rect x="726.1" y="485" width="135.8" height="15.0" fill="rgb(254,97,1)" rx="2" ry="2" />
<text  x="729.07" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="177.6" y="373" width="0.6" height="15.0" fill="rgb(210,175,49)" rx="2" ry="2" />
<text  x="180.57" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="727.0" y="469" width="0.2" height="15.0" fill="rgb(244,144,30)" rx="2" ry="2" />
<text  x="729.98" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="140.6" y="389" width="0.2" height="15.0" fill="rgb(207,213,47)" rx="2" ry="2" />
<text  x="143.61" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="105.9" y="453" width="0.5" height="15.0" fill="rgb(244,108,6)" rx="2" ry="2" />
<text  x="108.91" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="67.4" y="133" width="0.2" height="15.0" fill="rgb(217,88,30)" rx="2" ry="2" />
<text  x="70.37" y="143.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="586.2" y="277" width="0.6" height="15.0" fill="rgb(211,212,29)" rx="2" ry="2" />
<text  x="589.17" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="69.0" y="293" width="0.2" height="15.0" fill="rgb(245,49,45)" rx="2" ry="2" />
<text  x="71.95" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%)</title><rect x="166.5" y="437" width="0.9" height="15.0" fill="rgb(236,8,9)" rx="2" ry="2" />
<text  x="169.46" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (2 samples, 0.04%)</title><rect x="1169.1" y="501" width="0.5" height="15.0" fill="rgb(223,86,35)" rx="2" ry="2" />
<text  x="1172.14" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; &gt;::finally_body&lt;seastar::with_closeable&lt;flat_mutation_reader, (anonymous namespace)::shard_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="117" width="0.2" height="15.0" fill="rgb(207,78,19)" rx="2" ry="2" />
<text  x="26.60" y="127.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1126.7" y="181" width="0.3" height="15.0" fill="rgb(227,127,38)" rx="2" ry="2" />
<text  x="1129.74" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="704.1" y="453" width="0.7" height="15.0" fill="rgb(246,42,17)" rx="2" ry="2" />
<text  x="707.08" y="463.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="933.5" y="405" width="1.9" height="15.0" fill="rgb(242,35,29)" rx="2" ry="2" />
<text  x="936.55" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="642.6" y="485" width="0.3" height="15.0" fill="rgb(212,58,34)" rx="2" ry="2" />
<text  x="645.63" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="651.2" y="453" width="0.3" height="15.0" fill="rgb(212,90,28)" rx="2" ry="2" />
<text  x="654.25" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="627.9" y="437" width="0.4" height="15.0" fill="rgb(214,122,29)" rx="2" ry="2" />
<text  x="630.89" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1117.9" y="421" width="0.2" height="15.0" fill="rgb(242,26,41)" rx="2" ry="2" />
<text  x="1120.89" y="431.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1104.1" y="421" width="0.2" height="15.0" fill="rgb(215,27,1)" rx="2" ry="2" />
<text  x="1107.06" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="51.5" y="293" width="0.7" height="15.0" fill="rgb(211,7,45)" rx="2" ry="2" />
<text  x="54.50" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="905.2" y="261" width="1.4" height="15.0" fill="rgb(253,10,6)" rx="2" ry="2" />
<text  x="908.20" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="1168.2" y="405" width="0.3" height="15.0" fill="rgb(206,198,12)" rx="2" ry="2" />
<text  x="1171.23" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="490.5" y="309" width="0.7" height="15.0" fill="rgb(237,135,10)" rx="2" ry="2" />
<text  x="493.48" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%)</title><rect x="659.2" y="405" width="0.4" height="15.0" fill="rgb(240,71,32)" rx="2" ry="2" />
<text  x="662.18" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (2 samples, 0.04%)</title><rect x="376.2" y="181" width="0.5" height="15.0" fill="rgb(216,26,26)" rx="2" ry="2" />
<text  x="379.20" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="48.1" y="165" width="0.2" height="15.0" fill="rgb(247,91,26)" rx="2" ry="2" />
<text  x="51.09" y="175.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (6 samples, 0.12%)</title><rect x="1116.1" y="405" width="1.3" height="15.0" fill="rgb(222,195,1)" rx="2" ry="2" />
<text  x="1119.08" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="834.7" y="421" width="0.2" height="15.0" fill="rgb(229,160,29)" rx="2" ry="2" />
<text  x="837.68" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="608.8" y="405" width="0.5" height="15.0" fill="rgb(209,43,54)" rx="2" ry="2" />
<text  x="611.84" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="837.9" y="373" width="0.4" height="15.0" fill="rgb(214,160,23)" rx="2" ry="2" />
<text  x="840.86" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="668.3" y="437" width="0.4" height="15.0" fill="rgb(225,19,36)" rx="2" ry="2" />
<text  x="671.25" y="447.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1137.6" y="197" width="0.5" height="15.0" fill="rgb(252,47,42)" rx="2" ry="2" />
<text  x="1140.62" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="68.0" y="197" width="0.3" height="15.0" fill="rgb(226,211,47)" rx="2" ry="2" />
<text  x="71.05" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="932.4" y="373" width="0.2" height="15.0" fill="rgb(225,213,28)" rx="2" ry="2" />
<text  x="935.41" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="57.4" y="293" width="0.4" height="15.0" fill="rgb(219,48,53)" rx="2" ry="2" />
<text  x="60.39" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="52.4" y="245" width="0.5" height="15.0" fill="rgb(227,83,48)" rx="2" ry="2" />
<text  x="55.40" y="255.5" ></text>
</g>
<g >
<title>database::find_uuid (23 samples, 0.44%)</title><rect x="765.1" y="389" width="5.2" height="15.0" fill="rgb(226,81,8)" rx="2" ry="2" />
<text  x="768.07" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="783.4" y="309" width="0.3" height="15.0" fill="rgb(235,164,13)" rx="2" ry="2" />
<text  x="786.44" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (49 samples, 0.94%)</title><rect x="33.1" y="309" width="11.1" height="15.0" fill="rgb(253,33,7)" rx="2" ry="2" />
<text  x="36.13" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="274.8" y="165" width="0.7" height="15.0" fill="rgb(219,87,14)" rx="2" ry="2" />
<text  x="277.84" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (8 samples, 0.15%)</title><rect x="321.6" y="309" width="1.8" height="15.0" fill="rgb(209,50,2)" rx="2" ry="2" />
<text  x="324.55" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="73.3" y="437" width="0.2" height="15.0" fill="rgb(220,35,31)" rx="2" ry="2" />
<text  x="76.26" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1044.0" y="293" width="0.2" height="15.0" fill="rgb(252,1,19)" rx="2" ry="2" />
<text  x="1046.97" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1138.5" y="229" width="0.3" height="15.0" fill="rgb(231,227,2)" rx="2" ry="2" />
<text  x="1141.53" y="239.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (2 samples, 0.04%)</title><rect x="115.7" y="261" width="0.4" height="15.0" fill="rgb(239,156,40)" rx="2" ry="2" />
<text  x="118.66" y="271.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="829.9" y="261" width="0.2" height="15.0" fill="rgb(215,194,3)" rx="2" ry="2" />
<text  x="832.92" y="271.5" ></text>
</g>
<g >
<title>dht::minimum_token (1 samples, 0.02%)</title><rect x="466.4" y="309" width="0.3" height="15.0" fill="rgb(205,180,23)" rx="2" ry="2" />
<text  x="469.45" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="60.6" y="277" width="0.6" height="15.0" fill="rgb(218,47,35)" rx="2" ry="2" />
<text  x="63.56" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="864.2" y="501" width="0.2" height="15.0" fill="rgb(209,81,25)" rx="2" ry="2" />
<text  x="867.16" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (7 samples, 0.13%)</title><rect x="134.5" y="405" width="1.6" height="15.0" fill="rgb(235,25,52)" rx="2" ry="2" />
<text  x="137.49" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (6 samples, 0.12%)</title><rect x="219.1" y="229" width="1.3" height="15.0" fill="rgb(229,73,30)" rx="2" ry="2" />
<text  x="222.06" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="177.3" y="373" width="0.3" height="15.0" fill="rgb(209,179,0)" rx="2" ry="2" />
<text  x="180.34" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="87.8" y="117" width="0.2" height="15.0" fill="rgb(238,151,21)" rx="2" ry="2" />
<text  x="90.77" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (47 samples, 0.90%)</title><rect x="286.0" y="229" width="10.6" height="15.0" fill="rgb(223,167,48)" rx="2" ry="2" />
<text  x="288.95" y="239.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::close (1 samples, 0.02%)</title><rect x="87.3" y="453" width="0.2" height="15.0" fill="rgb(229,53,26)" rx="2" ry="2" />
<text  x="90.32" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (19 samples, 0.37%)</title><rect x="683.9" y="485" width="4.3" height="15.0" fill="rgb(206,182,10)" rx="2" ry="2" />
<text  x="686.90" y="495.5" ></text>
</g>
<g >
<title>posix_memalign (4 samples, 0.08%)</title><rect x="253.5" y="85" width="0.9" height="15.0" fill="rgb(254,105,33)" rx="2" ry="2" />
<text  x="256.53" y="95.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="88.0" y="517" width="0.2" height="15.0" fill="rgb(227,130,26)" rx="2" ry="2" />
<text  x="91.00" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="363.3" y="165" width="0.2" height="15.0" fill="rgb(224,77,13)" rx="2" ry="2" />
<text  x="366.27" y="175.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="29.7" y="389" width="0.3" height="15.0" fill="rgb(243,28,21)" rx="2" ry="2" />
<text  x="32.73" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%)</title><rect x="1132.4" y="421" width="6.4" height="15.0" fill="rgb(205,24,29)" rx="2" ry="2" />
<text  x="1135.41" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="88.2" y="565" width="0.3" height="15.0" fill="rgb(209,37,19)" rx="2" ry="2" />
<text  x="91.23" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="26.6" y="389" width="0.4" height="15.0" fill="rgb(245,212,32)" rx="2" ry="2" />
<text  x="29.55" y="399.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="22.2" y="485" width="0.3" height="15.0" fill="rgb(212,52,13)" rx="2" ry="2" />
<text  x="25.24" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (4 samples, 0.08%)</title><rect x="143.3" y="453" width="0.9" height="15.0" fill="rgb(251,192,41)" rx="2" ry="2" />
<text  x="146.33" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="10.7" y="245" width="0.2" height="15.0" fill="rgb(224,101,43)" rx="2" ry="2" />
<text  x="13.68" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (3 samples, 0.06%)</title><rect x="301.4" y="277" width="0.7" height="15.0" fill="rgb(226,94,23)" rx="2" ry="2" />
<text  x="304.37" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="845.6" y="389" width="0.2" height="15.0" fill="rgb(210,218,1)" rx="2" ry="2" />
<text  x="848.57" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1138.5" y="213" width="0.3" height="15.0" fill="rgb(244,188,9)" rx="2" ry="2" />
<text  x="1141.53" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (17 samples, 0.33%)</title><rect x="1094.8" y="389" width="3.8" height="15.0" fill="rgb(237,69,37)" rx="2" ry="2" />
<text  x="1097.77" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1136.0" y="101" width="0.3" height="15.0" fill="rgb(210,67,1)" rx="2" ry="2" />
<text  x="1139.03" y="111.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="928.1" y="341" width="0.2" height="15.0" fill="rgb(239,149,23)" rx="2" ry="2" />
<text  x="931.11" y="351.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="858.5" y="437" width="0.7" height="15.0" fill="rgb(243,42,47)" rx="2" ry="2" />
<text  x="861.49" y="447.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (2 samples, 0.04%)</title><rect x="131.8" y="453" width="0.4" height="15.0" fill="rgb(209,191,46)" rx="2" ry="2" />
<text  x="134.76" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="1136.0" y="117" width="0.5" height="15.0" fill="rgb(245,26,21)" rx="2" ry="2" />
<text  x="1139.03" y="127.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (29 samples, 0.56%)</title><rect x="646.0" y="501" width="6.6" height="15.0" fill="rgb(233,185,0)" rx="2" ry="2" />
<text  x="649.03" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="398.0" y="149" width="0.9" height="15.0" fill="rgb(252,48,24)" rx="2" ry="2" />
<text  x="400.97" y="159.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="829.2" y="261" width="0.7" height="15.0" fill="rgb(223,15,17)" rx="2" ry="2" />
<text  x="832.24" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%)</title><rect x="987.5" y="325" width="4.3" height="15.0" fill="rgb(217,197,7)" rx="2" ry="2" />
<text  x="990.51" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="52.2" y="197" width="0.2" height="15.0" fill="rgb(239,50,33)" rx="2" ry="2" />
<text  x="55.18" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="10.7" y="229" width="0.2" height="15.0" fill="rgb(236,214,42)" rx="2" ry="2" />
<text  x="13.68" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (4 samples, 0.08%)</title><rect x="659.6" y="405" width="0.9" height="15.0" fill="rgb(244,38,16)" rx="2" ry="2" />
<text  x="662.63" y="415.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (2 samples, 0.04%)</title><rect x="1126.3" y="245" width="0.4" height="15.0" fill="rgb(239,65,54)" rx="2" ry="2" />
<text  x="1129.28" y="255.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="58.8" y="213" width="0.2" height="15.0" fill="rgb(243,91,12)" rx="2" ry="2" />
<text  x="61.75" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="51.3" y="325" width="0.2" height="15.0" fill="rgb(252,72,6)" rx="2" ry="2" />
<text  x="54.27" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="163.1" y="405" width="0.6" height="15.0" fill="rgb(221,98,49)" rx="2" ry="2" />
<text  x="166.06" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="670.1" y="453" width="0.2" height="15.0" fill="rgb(248,15,39)" rx="2" ry="2" />
<text  x="673.07" y="463.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (7 samples, 0.13%)</title><rect x="1130.6" y="309" width="1.6" height="15.0" fill="rgb(239,4,35)" rx="2" ry="2" />
<text  x="1133.59" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (82 samples, 1.58%)</title><rect x="579.6" y="389" width="18.6" height="15.0" fill="rgb(253,104,33)" rx="2" ry="2" />
<text  x="582.59" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%)</title><rect x="826.5" y="341" width="0.5" height="15.0" fill="rgb(241,226,14)" rx="2" ry="2" />
<text  x="829.52" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="47.2" y="293" width="0.2" height="15.0" fill="rgb(209,202,18)" rx="2" ry="2" />
<text  x="50.19" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="51.7" y="197" width="0.5" height="15.0" fill="rgb(211,97,21)" rx="2" ry="2" />
<text  x="54.72" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.23%)</title><rect x="946.0" y="389" width="2.7" height="15.0" fill="rgb(235,93,15)" rx="2" ry="2" />
<text  x="949.02" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (19 samples, 0.37%)</title><rect x="396.2" y="165" width="4.3" height="15.0" fill="rgb(213,160,7)" rx="2" ry="2" />
<text  x="399.15" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="615.9" y="389" width="0.2" height="15.0" fill="rgb(229,49,45)" rx="2" ry="2" />
<text  x="618.87" y="399.5" ></text>
</g>
<g >
<title>row::append_cell (3 samples, 0.06%)</title><rect x="1128.1" y="213" width="0.7" height="15.0" fill="rgb(238,218,40)" rx="2" ry="2" />
<text  x="1131.10" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="974.6" y="325" width="2.0" height="15.0" fill="rgb(207,18,50)" rx="2" ry="2" />
<text  x="977.59" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="53.3" y="293" width="0.2" height="15.0" fill="rgb(219,64,9)" rx="2" ry="2" />
<text  x="56.31" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="724.7" y="501" width="0.2" height="15.0" fill="rgb(224,152,50)" rx="2" ry="2" />
<text  x="727.71" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="717.7" y="437" width="0.2" height="15.0" fill="rgb(245,161,13)" rx="2" ry="2" />
<text  x="720.68" y="447.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="205.9" y="245" width="0.2" height="15.0" fill="rgb(209,140,11)" rx="2" ry="2" />
<text  x="208.91" y="255.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="559.4" y="245" width="0.2" height="15.0" fill="rgb(216,218,5)" rx="2" ry="2" />
<text  x="562.41" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (14 samples, 0.27%)</title><rect x="437.0" y="197" width="3.1" height="15.0" fill="rgb(227,63,30)" rx="2" ry="2" />
<text  x="439.97" y="207.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="698.9" y="309" width="0.2" height="15.0" fill="rgb(232,57,18)" rx="2" ry="2" />
<text  x="701.86" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;read_context::stop (3 samples, 0.06%)</title><rect x="114.8" y="277" width="0.6" height="15.0" fill="rgb(220,152,20)" rx="2" ry="2" />
<text  x="117.76" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="54.4" y="133" width="0.5" height="15.0" fill="rgb(207,9,39)" rx="2" ry="2" />
<text  x="57.44" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%)</title><rect x="881.6" y="437" width="0.2" height="15.0" fill="rgb(252,209,21)" rx="2" ry="2" />
<text  x="884.62" y="447.5" ></text>
</g>
<g >
<title>__libc_start_main (4,769 samples, 91.64%)</title><rect x="88.5" y="629" width="1081.3" height="15.0" fill="rgb(205,184,46)" rx="2" ry="2" />
<text  x="91.46" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="31.1" y="261" width="1.1" height="15.0" fill="rgb(244,23,43)" rx="2" ry="2" />
<text  x="34.09" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="907.9" y="357" width="0.3" height="15.0" fill="rgb(238,16,8)" rx="2" ry="2" />
<text  x="910.92" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (10 samples, 0.19%)</title><rect x="868.5" y="357" width="2.2" height="15.0" fill="rgb(212,17,45)" rx="2" ry="2" />
<text  x="871.47" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="686.4" y="437" width="0.7" height="15.0" fill="rgb(226,161,28)" rx="2" ry="2" />
<text  x="689.39" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="773.9" y="357" width="0.2" height="15.0" fill="rgb(235,162,10)" rx="2" ry="2" />
<text  x="776.92" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (4 samples, 0.08%)</title><rect x="281.4" y="213" width="0.9" height="15.0" fill="rgb(225,14,30)" rx="2" ry="2" />
<text  x="284.42" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="910.4" y="373" width="0.5" height="15.0" fill="rgb(237,105,31)" rx="2" ry="2" />
<text  x="913.42" y="383.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="841.3" y="437" width="0.4" height="15.0" fill="rgb(207,25,35)" rx="2" ry="2" />
<text  x="844.26" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="113.9" y="261" width="0.2" height="15.0" fill="rgb(248,160,9)" rx="2" ry="2" />
<text  x="116.85" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="52.4" y="133" width="0.2" height="15.0" fill="rgb(254,0,47)" rx="2" ry="2" />
<text  x="55.40" y="143.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="10.5" y="597" width="0.2" height="15.0" fill="rgb(232,127,28)" rx="2" ry="2" />
<text  x="13.45" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="765.5" y="357" width="0.5" height="15.0" fill="rgb(232,110,26)" rx="2" ry="2" />
<text  x="768.53" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (3 samples, 0.06%)</title><rect x="576.9" y="421" width="0.7" height="15.0" fill="rgb(220,28,0)" rx="2" ry="2" />
<text  x="579.87" y="431.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="10.0" y="597" width="0.5" height="15.0" fill="rgb(220,197,42)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="793.0" y="213" width="0.2" height="15.0" fill="rgb(212,49,27)" rx="2" ry="2" />
<text  x="795.96" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%)</title><rect x="295.2" y="197" width="0.3" height="15.0" fill="rgb(224,11,3)" rx="2" ry="2" />
<text  x="298.25" y="207.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="559.9" y="261" width="0.6" height="15.0" fill="rgb(251,3,5)" rx="2" ry="2" />
<text  x="562.87" y="271.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::range_tombstones (1 samples, 0.02%)</title><rect x="1130.1" y="245" width="0.3" height="15.0" fill="rgb(207,229,12)" rx="2" ry="2" />
<text  x="1133.14" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,287 samples, 43.95%)</title><rect x="124.1" y="469" width="518.5" height="15.0" fill="rgb(217,218,36)" rx="2" ry="2" />
<text  x="127.05" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.4" y="229" width="0.5" height="15.0" fill="rgb(228,158,44)" rx="2" ry="2" />
<text  x="57.44" y="239.5" ></text>
</g>
<g >
<title>database::query (19 samples, 0.37%)</title><rect x="109.1" y="501" width="4.3" height="15.0" fill="rgb(250,27,32)" rx="2" ry="2" />
<text  x="112.09" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="567.8" y="405" width="0.2" height="15.0" fill="rgb(214,143,14)" rx="2" ry="2" />
<text  x="570.80" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="46.3" y="229" width="0.7" height="15.0" fill="rgb(207,216,52)" rx="2" ry="2" />
<text  x="49.28" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%)</title><rect x="914.3" y="357" width="2.7" height="15.0" fill="rgb(222,23,19)" rx="2" ry="2" />
<text  x="917.27" y="367.5" ></text>
</g>
<g >
<title>all (5,204 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(233,224,39)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="774.1" y="357" width="1.2" height="15.0" fill="rgb(212,141,53)" rx="2" ry="2" />
<text  x="777.14" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1060.5" y="309" width="0.3" height="15.0" fill="rgb(209,201,45)" rx="2" ry="2" />
<text  x="1063.53" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (7 samples, 0.13%)</title><rect x="739.9" y="293" width="1.6" height="15.0" fill="rgb(221,164,14)" rx="2" ry="2" />
<text  x="742.90" y="303.5" ></text>
</g>
<g >
<title>cql3::cql3_type::get_kind (1 samples, 0.02%)</title><rect x="76.4" y="357" width="0.3" height="15.0" fill="rgb(252,203,53)" rx="2" ry="2" />
<text  x="79.44" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.10%)</title><rect x="695.5" y="453" width="1.1" height="15.0" fill="rgb(250,34,48)" rx="2" ry="2" />
<text  x="698.46" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="867.8" y="261" width="0.2" height="15.0" fill="rgb(235,199,26)" rx="2" ry="2" />
<text  x="870.79" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.56%)</title><rect x="1125.6" y="373" width="6.6" height="15.0" fill="rgb(230,142,16)" rx="2" ry="2" />
<text  x="1128.60" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1134.0" y="181" width="0.4" height="15.0" fill="rgb(207,156,46)" rx="2" ry="2" />
<text  x="1136.99" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="88.9" y="517" width="0.2" height="15.0" fill="rgb(233,119,33)" rx="2" ry="2" />
<text  x="91.91" y="527.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (11 samples, 0.21%)</title><rect x="856.0" y="405" width="2.5" height="15.0" fill="rgb(235,3,38)" rx="2" ry="2" />
<text  x="859.00" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="116.6" y="325" width="0.2" height="15.0" fill="rgb(206,51,24)" rx="2" ry="2" />
<text  x="119.57" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (21 samples, 0.40%)</title><rect x="713.1" y="453" width="4.8" height="15.0" fill="rgb(246,126,42)" rx="2" ry="2" />
<text  x="716.15" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="87.3" y="533" width="0.2" height="15.0" fill="rgb(225,117,9)" rx="2" ry="2" />
<text  x="90.32" y="543.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1129.9" y="213" width="0.2" height="15.0" fill="rgb(211,175,50)" rx="2" ry="2" />
<text  x="1132.91" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mU (1 samples, 0.02%)</title><rect x="42.7" y="261" width="0.2" height="15.0" fill="rgb(211,186,45)" rx="2" ry="2" />
<text  x="45.65" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (3 samples, 0.06%)</title><rect x="909.1" y="325" width="0.6" height="15.0" fill="rgb(233,175,16)" rx="2" ry="2" />
<text  x="912.06" y="335.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%)</title><rect x="358.3" y="165" width="0.4" height="15.0" fill="rgb(244,210,21)" rx="2" ry="2" />
<text  x="361.29" y="175.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="87.8" y="549" width="0.2" height="15.0" fill="rgb(227,222,37)" rx="2" ry="2" />
<text  x="90.77" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="965.1" y="373" width="0.2" height="15.0" fill="rgb(235,24,21)" rx="2" ry="2" />
<text  x="968.07" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="1047.1" y="293" width="0.7" height="15.0" fill="rgb(243,19,23)" rx="2" ry="2" />
<text  x="1050.15" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="146.0" y="453" width="0.3" height="15.0" fill="rgb(233,55,17)" rx="2" ry="2" />
<text  x="149.05" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (7 samples, 0.13%)</title><rect x="659.0" y="453" width="1.5" height="15.0" fill="rgb(249,179,13)" rx="2" ry="2" />
<text  x="661.95" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="291.8" y="181" width="1.0" height="15.0" fill="rgb(246,6,37)" rx="2" ry="2" />
<text  x="294.85" y="191.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="84.6" y="453" width="0.2" height="15.0" fill="rgb(231,142,11)" rx="2" ry="2" />
<text  x="87.60" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%)</title><rect x="555.6" y="309" width="0.4" height="15.0" fill="rgb(222,171,20)" rx="2" ry="2" />
<text  x="558.56" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="809.3" y="229" width="0.2" height="15.0" fill="rgb(243,42,14)" rx="2" ry="2" />
<text  x="812.29" y="239.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (18 samples, 0.35%)</title><rect x="570.5" y="389" width="4.1" height="15.0" fill="rgb(253,184,38)" rx="2" ry="2" />
<text  x="573.52" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.7" y="261" width="0.3" height="15.0" fill="rgb(241,186,47)" rx="2" ry="2" />
<text  x="88.73" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="172.1" y="421" width="0.3" height="15.0" fill="rgb(240,144,48)" rx="2" ry="2" />
<text  x="175.13" y="431.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1163.9" y="469" width="0.3" height="15.0" fill="rgb(237,8,21)" rx="2" ry="2" />
<text  x="1166.92" y="479.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="698.6" y="261" width="0.3" height="15.0" fill="rgb(225,56,28)" rx="2" ry="2" />
<text  x="701.64" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::signal_pollfn::poll (1 samples, 0.02%)</title><rect x="1168.9" y="501" width="0.2" height="15.0" fill="rgb(253,23,24)" rx="2" ry="2" />
<text  x="1171.91" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (10 samples, 0.19%)</title><rect x="1132.9" y="277" width="2.2" height="15.0" fill="rgb(220,106,9)" rx="2" ry="2" />
<text  x="1135.86" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="79.4" y="245" width="0.2" height="15.0" fill="rgb(208,117,48)" rx="2" ry="2" />
<text  x="82.39" y="255.5" ></text>
</g>
<g >
<title>query::result::result (3 samples, 0.06%)</title><rect x="616.1" y="421" width="0.7" height="15.0" fill="rgb(243,66,8)" rx="2" ry="2" />
<text  x="619.10" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="687.5" y="453" width="0.7" height="15.0" fill="rgb(205,148,30)" rx="2" ry="2" />
<text  x="690.52" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="76.7" y="373" width="0.2" height="15.0" fill="rgb(250,122,38)" rx="2" ry="2" />
<text  x="79.66" y="383.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="25.9" y="501" width="0.2" height="15.0" fill="rgb(231,47,32)" rx="2" ry="2" />
<text  x="28.87" y="511.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="23.4" y="229" width="0.2" height="15.0" fill="rgb(230,216,52)" rx="2" ry="2" />
<text  x="26.38" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::tuple_map_helper&lt;std::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;, seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::unwrap (1 samples, 0.02%)</title><rect x="1132.2" y="469" width="0.2" height="15.0" fill="rgb(227,226,16)" rx="2" ry="2" />
<text  x="1135.18" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (7 samples, 0.13%)</title><rect x="287.1" y="197" width="1.6" height="15.0" fill="rgb(207,96,42)" rx="2" ry="2" />
<text  x="290.09" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (288 samples, 5.53%)</title><rect x="22.0" y="581" width="65.3" height="15.0" fill="rgb(233,207,28)" rx="2" ry="2" />
<text  x="25.02" y="591.5" >seastar..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="87.3" y="565" width="0.2" height="15.0" fill="rgb(235,166,27)" rx="2" ry="2" />
<text  x="90.32" y="575.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%)</title><rect x="86.6" y="501" width="0.5" height="15.0" fill="rgb(220,98,5)" rx="2" ry="2" />
<text  x="89.64" y="511.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="78.5" y="293" width="0.2" height="15.0" fill="rgb(248,3,15)" rx="2" ry="2" />
<text  x="81.48" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="165" width="0.2" height="15.0" fill="rgb(243,210,21)" rx="2" ry="2" />
<text  x="64.02" y="175.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%)</title><rect x="1085.0" y="357" width="0.2" height="15.0" fill="rgb(214,160,9)" rx="2" ry="2" />
<text  x="1088.02" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="282.3" y="213" width="0.5" height="15.0" fill="rgb(246,150,50)" rx="2" ry="2" />
<text  x="285.33" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="897.3" y="341" width="0.2" height="15.0" fill="rgb(227,138,3)" rx="2" ry="2" />
<text  x="900.27" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="800.4" y="117" width="0.7" height="15.0" fill="rgb(230,21,17)" rx="2" ry="2" />
<text  x="803.45" y="127.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1026.7" y="181" width="0.3" height="15.0" fill="rgb(238,208,5)" rx="2" ry="2" />
<text  x="1029.74" y="191.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%)</title><rect x="539.7" y="229" width="0.4" height="15.0" fill="rgb(207,24,21)" rx="2" ry="2" />
<text  x="542.68" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="723.8" y="501" width="0.2" height="15.0" fill="rgb(223,180,14)" rx="2" ry="2" />
<text  x="726.80" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="812.9" y="309" width="0.2" height="15.0" fill="rgb(254,127,11)" rx="2" ry="2" />
<text  x="815.92" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (5 samples, 0.10%)</title><rect x="1153.3" y="405" width="1.1" height="15.0" fill="rgb(220,128,31)" rx="2" ry="2" />
<text  x="1156.27" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="703.9" y="453" width="0.2" height="15.0" fill="rgb(206,118,6)" rx="2" ry="2" />
<text  x="706.85" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="608.8" y="421" width="0.5" height="15.0" fill="rgb(247,125,16)" rx="2" ry="2" />
<text  x="611.84" y="431.5" ></text>
</g>
<g >
<title>table::query (2,188 samples, 42.04%)</title><rect x="146.5" y="453" width="496.1" height="15.0" fill="rgb(234,195,22)" rx="2" ry="2" />
<text  x="149.50" y="463.5" >table::query</text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="619.5" y="389" width="0.2" height="15.0" fill="rgb(207,200,37)" rx="2" ry="2" />
<text  x="622.50" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (2 samples, 0.04%)</title><rect x="408.4" y="213" width="0.5" height="15.0" fill="rgb(223,58,49)" rx="2" ry="2" />
<text  x="411.40" y="223.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="78.0" y="293" width="0.3" height="15.0" fill="rgb(252,56,30)" rx="2" ry="2" />
<text  x="81.02" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="808.2" y="245" width="0.9" height="15.0" fill="rgb(237,85,17)" rx="2" ry="2" />
<text  x="811.16" y="255.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1105.6" y="421" width="0.7" height="15.0" fill="rgb(254,201,48)" rx="2" ry="2" />
<text  x="1108.65" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="764.8" y="325" width="0.3" height="15.0" fill="rgb(241,194,6)" rx="2" ry="2" />
<text  x="767.85" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="577.8" y="405" width="0.2" height="15.0" fill="rgb(223,197,12)" rx="2" ry="2" />
<text  x="580.78" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="430.2" y="181" width="0.2" height="15.0" fill="rgb(229,53,15)" rx="2" ry="2" />
<text  x="433.17" y="191.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (2 samples, 0.04%)</title><rect x="446.0" y="229" width="0.5" height="15.0" fill="rgb(249,153,10)" rx="2" ry="2" />
<text  x="449.04" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (18 samples, 0.35%)</title><rect x="1072.3" y="277" width="4.1" height="15.0" fill="rgb(232,186,19)" rx="2" ry="2" />
<text  x="1075.32" y="287.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="671.0" y="437" width="0.2" height="15.0" fill="rgb(244,148,51)" rx="2" ry="2" />
<text  x="673.97" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="994.3" y="229" width="1.1" height="15.0" fill="rgb(219,81,21)" rx="2" ry="2" />
<text  x="997.32" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="71.7" y="357" width="0.2" height="15.0" fill="rgb(224,93,2)" rx="2" ry="2" />
<text  x="74.68" y="367.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.29%)</title><rect x="1108.4" y="405" width="3.4" height="15.0" fill="rgb(253,40,53)" rx="2" ry="2" />
<text  x="1111.37" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="59.4" y="229" width="0.3" height="15.0" fill="rgb(211,210,19)" rx="2" ry="2" />
<text  x="62.43" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (11 samples, 0.21%)</title><rect x="129.3" y="453" width="2.5" height="15.0" fill="rgb(212,204,20)" rx="2" ry="2" />
<text  x="132.27" y="463.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.46%)</title><rect x="15.9" y="597" width="5.4" height="15.0" fill="rgb(236,167,43)" rx="2" ry="2" />
<text  x="18.90" y="607.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="86.9" y="485" width="0.2" height="15.0" fill="rgb(227,197,16)" rx="2" ry="2" />
<text  x="89.87" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%)</title><rect x="79.6" y="357" width="0.2" height="15.0" fill="rgb(215,113,42)" rx="2" ry="2" />
<text  x="82.61" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%)</title><rect x="624.5" y="437" width="0.4" height="15.0" fill="rgb(208,26,34)" rx="2" ry="2" />
<text  x="627.49" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="694.3" y="453" width="0.3" height="15.0" fill="rgb(234,125,2)" rx="2" ry="2" />
<text  x="697.33" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="73.3" y="389" width="0.2" height="15.0" fill="rgb(216,134,29)" rx="2" ry="2" />
<text  x="76.26" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (37 samples, 0.71%)</title><rect x="1170.7" y="629" width="8.4" height="15.0" fill="rgb(207,179,31)" rx="2" ry="2" />
<text  x="1173.73" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="363.0" y="149" width="0.3" height="15.0" fill="rgb(234,207,41)" rx="2" ry="2" />
<text  x="366.05" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="798.4" y="197" width="0.5" height="15.0" fill="rgb(229,147,39)" rx="2" ry="2" />
<text  x="801.41" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="863.0" y="469" width="0.3" height="15.0" fill="rgb(227,209,5)" rx="2" ry="2" />
<text  x="866.03" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="703.9" y="437" width="0.2" height="15.0" fill="rgb(214,17,11)" rx="2" ry="2" />
<text  x="706.85" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="920.4" y="325" width="1.6" height="15.0" fill="rgb(235,107,1)" rx="2" ry="2" />
<text  x="923.40" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (66 samples, 1.27%)</title><rect x="50.8" y="357" width="15.0" height="15.0" fill="rgb(218,29,45)" rx="2" ry="2" />
<text  x="53.81" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="328.8" y="309" width="0.2" height="15.0" fill="rgb(234,201,36)" rx="2" ry="2" />
<text  x="331.81" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (2 samples, 0.04%)</title><rect x="840.1" y="437" width="0.5" height="15.0" fill="rgb(234,96,30)" rx="2" ry="2" />
<text  x="843.13" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::back (1 samples, 0.02%)</title><rect x="68.7" y="309" width="0.3" height="15.0" fill="rgb(244,207,50)" rx="2" ry="2" />
<text  x="71.73" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (1 samples, 0.02%)</title><rect x="1168.7" y="517" width="0.2" height="15.0" fill="rgb(215,193,13)" rx="2" ry="2" />
<text  x="1171.69" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="627.0" y="421" width="0.2" height="15.0" fill="rgb(219,58,47)" rx="2" ry="2" />
<text  x="629.98" y="431.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%)</title><rect x="116.3" y="421" width="0.7" height="15.0" fill="rgb(242,123,19)" rx="2" ry="2" />
<text  x="119.35" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="63.7" y="293" width="0.3" height="15.0" fill="rgb(211,199,53)" rx="2" ry="2" />
<text  x="66.74" y="303.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (167 samples, 3.21%)</title><rect x="778.9" y="357" width="37.9" height="15.0" fill="rgb(252,179,34)" rx="2" ry="2" />
<text  x="781.90" y="367.5" >ser..</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="650.8" y="469" width="0.7" height="15.0" fill="rgb(225,38,15)" rx="2" ry="2" />
<text  x="653.79" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="61.5" y="229" width="0.2" height="15.0" fill="rgb(218,185,31)" rx="2" ry="2" />
<text  x="64.47" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (3 samples, 0.06%)</title><rect x="722.4" y="501" width="0.7" height="15.0" fill="rgb(238,99,23)" rx="2" ry="2" />
<text  x="725.44" y="511.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%)</title><rect x="301.1" y="261" width="0.3" height="15.0" fill="rgb(252,117,19)" rx="2" ry="2" />
<text  x="304.15" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="658.5" y="485" width="0.2" height="15.0" fill="rgb(253,172,26)" rx="2" ry="2" />
<text  x="661.50" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="870.1" y="245" width="0.2" height="15.0" fill="rgb(216,125,23)" rx="2" ry="2" />
<text  x="873.06" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="114.3" y="357" width="0.2" height="15.0" fill="rgb(229,179,44)" rx="2" ry="2" />
<text  x="117.30" y="367.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume (1 samples, 0.02%)</title><rect x="13.9" y="437" width="0.2" height="15.0" fill="rgb(240,172,17)" rx="2" ry="2" />
<text  x="16.85" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="472.6" y="229" width="1.6" height="15.0" fill="rgb(243,6,21)" rx="2" ry="2" />
<text  x="475.57" y="239.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="128.1" y="453" width="0.5" height="15.0" fill="rgb(222,89,21)" rx="2" ry="2" />
<text  x="131.14" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%)</title><rect x="637.2" y="421" width="0.2" height="15.0" fill="rgb(208,102,45)" rx="2" ry="2" />
<text  x="640.19" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="699.1" y="453" width="0.2" height="15.0" fill="rgb(227,54,8)" rx="2" ry="2" />
<text  x="702.09" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="697.7" y="485" width="0.7" height="15.0" fill="rgb(219,164,37)" rx="2" ry="2" />
<text  x="700.73" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="764.6" y="357" width="0.2" height="15.0" fill="rgb(232,44,29)" rx="2" ry="2" />
<text  x="767.62" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="822.4" y="357" width="0.7" height="15.0" fill="rgb(249,103,29)" rx="2" ry="2" />
<text  x="825.44" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="88.0" y="565" width="0.2" height="15.0" fill="rgb(241,22,17)" rx="2" ry="2" />
<text  x="91.00" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="54.4" y="165" width="0.5" height="15.0" fill="rgb(208,54,49)" rx="2" ry="2" />
<text  x="57.44" y="175.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (12 samples, 0.23%)</title><rect x="1164.6" y="453" width="2.7" height="15.0" fill="rgb(207,214,20)" rx="2" ry="2" />
<text  x="1167.60" y="463.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="225.6" y="181" width="0.3" height="15.0" fill="rgb(208,155,1)" rx="2" ry="2" />
<text  x="228.64" y="191.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1080.5" y="341" width="0.2" height="15.0" fill="rgb(236,19,4)" rx="2" ry="2" />
<text  x="1083.48" y="351.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="81.0" y="421" width="0.2" height="15.0" fill="rgb(242,148,34)" rx="2" ry="2" />
<text  x="83.97" y="431.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%)</title><rect x="897.7" y="325" width="0.2" height="15.0" fill="rgb(240,42,34)" rx="2" ry="2" />
<text  x="900.72" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="622.4" y="437" width="0.3" height="15.0" fill="rgb(216,13,26)" rx="2" ry="2" />
<text  x="625.45" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (4 samples, 0.08%)</title><rect x="79.6" y="389" width="0.9" height="15.0" fill="rgb(250,133,36)" rx="2" ry="2" />
<text  x="82.61" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="88.0" y="533" width="0.2" height="15.0" fill="rgb(235,207,46)" rx="2" ry="2" />
<text  x="91.00" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="114.3" y="341" width="0.2" height="15.0" fill="rgb(233,97,26)" rx="2" ry="2" />
<text  x="117.30" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="872.8" y="405" width="0.2" height="15.0" fill="rgb(228,68,41)" rx="2" ry="2" />
<text  x="875.78" y="415.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="104.6" y="453" width="1.1" height="15.0" fill="rgb(228,125,38)" rx="2" ry="2" />
<text  x="107.55" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="47.0" y="357" width="0.2" height="15.0" fill="rgb(233,186,54)" rx="2" ry="2" />
<text  x="49.96" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="829.2" y="277" width="0.9" height="15.0" fill="rgb(211,7,4)" rx="2" ry="2" />
<text  x="832.24" y="287.5" ></text>
</g>
<g >
<title>database::find_schema (26 samples, 0.50%)</title><rect x="764.4" y="405" width="5.9" height="15.0" fill="rgb(238,73,46)" rx="2" ry="2" />
<text  x="767.39" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="83.0" y="421" width="0.2" height="15.0" fill="rgb(217,8,23)" rx="2" ry="2" />
<text  x="86.01" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="724.0" y="501" width="0.3" height="15.0" fill="rgb(232,198,48)" rx="2" ry="2" />
<text  x="727.03" y="511.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="371.0" y="181" width="0.4" height="15.0" fill="rgb(222,86,54)" rx="2" ry="2" />
<text  x="373.98" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="27.7" y="341" width="0.2" height="15.0" fill="rgb(228,182,5)" rx="2" ry="2" />
<text  x="30.69" y="351.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="23.6" y="245" width="0.2" height="15.0" fill="rgb(212,63,50)" rx="2" ry="2" />
<text  x="26.60" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="686.2" y="437" width="0.2" height="15.0" fill="rgb(205,47,32)" rx="2" ry="2" />
<text  x="689.16" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="342.9" y="261" width="0.2" height="15.0" fill="rgb(213,65,20)" rx="2" ry="2" />
<text  x="345.87" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (2 samples, 0.04%)</title><rect x="669.8" y="469" width="0.5" height="15.0" fill="rgb(240,170,48)" rx="2" ry="2" />
<text  x="672.84" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="62.2" y="101" width="0.6" height="15.0" fill="rgb(244,162,18)" rx="2" ry="2" />
<text  x="65.15" y="111.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (4 samples, 0.08%)</title><rect x="628.6" y="437" width="0.9" height="15.0" fill="rgb(251,16,48)" rx="2" ry="2" />
<text  x="631.57" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1097.7" y="357" width="0.7" height="15.0" fill="rgb(246,96,41)" rx="2" ry="2" />
<text  x="1100.71" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="449.0" y="277" width="1.8" height="15.0" fill="rgb(236,75,29)" rx="2" ry="2" />
<text  x="451.99" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="843.1" y="405" width="0.2" height="15.0" fill="rgb(223,184,6)" rx="2" ry="2" />
<text  x="846.07" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="68.0" y="149" width="0.3" height="15.0" fill="rgb(228,187,17)" rx="2" ry="2" />
<text  x="71.05" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.1" y="245" width="0.2" height="15.0" fill="rgb(209,78,39)" rx="2" ry="2" />
<text  x="49.05" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="58.8" y="293" width="0.6" height="15.0" fill="rgb(239,144,29)" rx="2" ry="2" />
<text  x="61.75" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="14.3" y="485" width="0.2" height="15.0" fill="rgb(228,11,44)" rx="2" ry="2" />
<text  x="17.31" y="495.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (49 samples, 0.94%)</title><rect x="504.8" y="277" width="11.1" height="15.0" fill="rgb(244,38,42)" rx="2" ry="2" />
<text  x="507.77" y="287.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="23.6" y="549" width="0.2" height="15.0" fill="rgb(221,114,20)" rx="2" ry="2" />
<text  x="26.60" y="559.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="205.0" y="245" width="0.2" height="15.0" fill="rgb(228,28,24)" rx="2" ry="2" />
<text  x="208.00" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="478.9" y="277" width="0.7" height="15.0" fill="rgb(235,67,39)" rx="2" ry="2" />
<text  x="481.92" y="287.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (3 samples, 0.06%)</title><rect x="85.3" y="341" width="0.7" height="15.0" fill="rgb(230,126,48)" rx="2" ry="2" />
<text  x="88.28" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="425.4" y="165" width="0.9" height="15.0" fill="rgb(250,183,3)" rx="2" ry="2" />
<text  x="428.40" y="175.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="561.7" y="325" width="0.9" height="15.0" fill="rgb(249,164,45)" rx="2" ry="2" />
<text  x="564.68" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="53.3" y="309" width="0.2" height="15.0" fill="rgb(221,162,53)" rx="2" ry="2" />
<text  x="56.31" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="709.1" y="469" width="0.2" height="15.0" fill="rgb(212,73,4)" rx="2" ry="2" />
<text  x="712.07" y="479.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (9 samples, 0.17%)</title><rect x="15.9" y="581" width="2.0" height="15.0" fill="rgb(239,181,26)" rx="2" ry="2" />
<text  x="18.90" y="591.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (16 samples, 0.31%)</title><rect x="918.6" y="357" width="3.6" height="15.0" fill="rgb(248,76,35)" rx="2" ry="2" />
<text  x="921.58" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="88.0" y="613" width="0.2" height="15.0" fill="rgb(230,45,39)" rx="2" ry="2" />
<text  x="91.00" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="866.7" y="325" width="0.4" height="15.0" fill="rgb(217,45,30)" rx="2" ry="2" />
<text  x="869.66" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1088.9" y="373" width="0.4" height="15.0" fill="rgb(221,139,51)" rx="2" ry="2" />
<text  x="1091.87" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="23.4" y="565" width="0.7" height="15.0" fill="rgb(233,190,40)" rx="2" ry="2" />
<text  x="26.38" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="843.5" y="389" width="2.1" height="15.0" fill="rgb(224,147,7)" rx="2" ry="2" />
<text  x="846.53" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="217.0" y="213" width="0.2" height="15.0" fill="rgb(250,5,45)" rx="2" ry="2" />
<text  x="220.02" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%)</title><rect x="1138.5" y="309" width="0.3" height="15.0" fill="rgb(226,130,54)" rx="2" ry="2" />
<text  x="1141.53" y="319.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.12%)</title><rect x="38.6" y="245" width="1.3" height="15.0" fill="rgb(238,212,47)" rx="2" ry="2" />
<text  x="41.57" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.17%)</title><rect x="1152.4" y="453" width="2.0" height="15.0" fill="rgb(217,193,12)" rx="2" ry="2" />
<text  x="1155.36" y="463.5" ></text>
</g>
<g >
<title>row_cache::row_cache (1 samples, 0.02%)</title><rect x="114.1" y="197" width="0.2" height="15.0" fill="rgb(229,37,1)" rx="2" ry="2" />
<text  x="117.08" y="207.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="23.6" y="341" width="0.2" height="15.0" fill="rgb(236,163,33)" rx="2" ry="2" />
<text  x="26.60" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="965.3" y="341" width="0.2" height="15.0" fill="rgb(224,108,15)" rx="2" ry="2" />
<text  x="968.29" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6 samples, 0.12%)</title><rect x="309.3" y="325" width="1.4" height="15.0" fill="rgb(227,31,35)" rx="2" ry="2" />
<text  x="312.31" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="203.0" y="277" width="0.2" height="15.0" fill="rgb(207,197,39)" rx="2" ry="2" />
<text  x="205.96" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1163.7" y="469" width="0.2" height="15.0" fill="rgb(244,9,38)" rx="2" ry="2" />
<text  x="1166.70" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="66.2" y="309" width="0.3" height="15.0" fill="rgb(219,151,8)" rx="2" ry="2" />
<text  x="69.23" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%)</title><rect x="55.3" y="229" width="1.9" height="15.0" fill="rgb(239,64,19)" rx="2" ry="2" />
<text  x="58.35" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="66.2" y="325" width="0.5" height="15.0" fill="rgb(231,193,4)" rx="2" ry="2" />
<text  x="69.23" y="335.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="813.4" y="325" width="0.4" height="15.0" fill="rgb(235,24,19)" rx="2" ry="2" />
<text  x="816.37" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="62.8" y="197" width="0.3" height="15.0" fill="rgb(227,110,9)" rx="2" ry="2" />
<text  x="65.83" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1104.7" y="421" width="0.3" height="15.0" fill="rgb(221,43,54)" rx="2" ry="2" />
<text  x="1107.74" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="908.6" y="341" width="0.2" height="15.0" fill="rgb(220,167,21)" rx="2" ry="2" />
<text  x="911.60" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (4 samples, 0.08%)</title><rect x="122.0" y="469" width="0.9" height="15.0" fill="rgb(211,68,12)" rx="2" ry="2" />
<text  x="125.01" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="936.5" y="405" width="0.4" height="15.0" fill="rgb(243,221,36)" rx="2" ry="2" />
<text  x="939.50" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="909.7" y="373" width="0.3" height="15.0" fill="rgb(210,107,39)" rx="2" ry="2" />
<text  x="912.74" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="703.4" y="453" width="0.2" height="15.0" fill="rgb(247,69,50)" rx="2" ry="2" />
<text  x="706.40" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="965.3" y="357" width="0.2" height="15.0" fill="rgb(219,122,44)" rx="2" ry="2" />
<text  x="968.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_view_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="70.3" y="373" width="0.2" height="15.0" fill="rgb(216,29,19)" rx="2" ry="2" />
<text  x="73.32" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="28.1" y="341" width="0.3" height="15.0" fill="rgb(235,181,35)" rx="2" ry="2" />
<text  x="31.14" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="81.0" y="389" width="0.2" height="15.0" fill="rgb(243,175,11)" rx="2" ry="2" />
<text  x="83.97" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (4 samples, 0.08%)</title><rect x="31.1" y="213" width="0.9" height="15.0" fill="rgb(217,47,24)" rx="2" ry="2" />
<text  x="34.09" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="53.5" y="213" width="0.3" height="15.0" fill="rgb(226,194,26)" rx="2" ry="2" />
<text  x="56.54" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (1 samples, 0.02%)</title><rect x="1154.4" y="453" width="0.2" height="15.0" fill="rgb(227,69,16)" rx="2" ry="2" />
<text  x="1157.40" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%)</title><rect x="803.2" y="165" width="3.4" height="15.0" fill="rgb(245,25,50)" rx="2" ry="2" />
<text  x="806.17" y="175.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average::timed_rate_moving_average (1 samples, 0.02%)</title><rect x="114.1" y="181" width="0.2" height="15.0" fill="rgb(244,76,23)" rx="2" ry="2" />
<text  x="117.08" y="191.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_channel (1 samples, 0.02%)</title><rect x="33.8" y="277" width="0.2" height="15.0" fill="rgb(233,174,1)" rx="2" ry="2" />
<text  x="36.81" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="108.4" y="421" width="0.2" height="15.0" fill="rgb(221,222,50)" rx="2" ry="2" />
<text  x="111.41" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="935.6" y="405" width="0.2" height="15.0" fill="rgb(220,176,26)" rx="2" ry="2" />
<text  x="938.59" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="798.0" y="213" width="0.2" height="15.0" fill="rgb(219,27,21)" rx="2" ry="2" />
<text  x="800.95" y="223.5" ></text>
</g>
<g >
<title>column_definition::operator= (1 samples, 0.02%)</title><rect x="23.4" y="165" width="0.2" height="15.0" fill="rgb(237,61,33)" rx="2" ry="2" />
<text  x="26.38" y="175.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="63.3" y="101" width="0.2" height="15.0" fill="rgb(251,103,8)" rx="2" ry="2" />
<text  x="66.29" y="111.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (8 samples, 0.15%)</title><rect x="468.7" y="277" width="1.8" height="15.0" fill="rgb(227,14,16)" rx="2" ry="2" />
<text  x="471.71" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="409.1" y="197" width="1.1" height="15.0" fill="rgb(228,34,14)" rx="2" ry="2" />
<text  x="412.08" y="207.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (267 samples, 5.13%)</title><rect x="26.1" y="517" width="60.5" height="15.0" fill="rgb(222,54,52)" rx="2" ry="2" />
<text  x="29.10" y="527.5" >single..</text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%)</title><rect x="116.8" y="325" width="0.2" height="15.0" fill="rgb(219,205,32)" rx="2" ry="2" />
<text  x="119.80" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="117.3" y="437" width="0.2" height="15.0" fill="rgb(237,197,47)" rx="2" ry="2" />
<text  x="120.25" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="51.9" y="149" width="0.3" height="15.0" fill="rgb(243,199,12)" rx="2" ry="2" />
<text  x="54.95" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%)</title><rect x="747.6" y="389" width="0.5" height="15.0" fill="rgb(237,134,40)" rx="2" ry="2" />
<text  x="750.61" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%)</title><rect x="836.5" y="405" width="0.5" height="15.0" fill="rgb(213,177,25)" rx="2" ry="2" />
<text  x="839.50" y="415.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (3 samples, 0.06%)</title><rect x="1128.8" y="213" width="0.7" height="15.0" fill="rgb(248,17,37)" rx="2" ry="2" />
<text  x="1131.78" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="837.2" y="389" width="0.2" height="15.0" fill="rgb(247,66,42)" rx="2" ry="2" />
<text  x="840.18" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (7 samples, 0.13%)</title><rect x="718.4" y="437" width="1.6" height="15.0" fill="rgb(224,174,2)" rx="2" ry="2" />
<text  x="721.36" y="447.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (2 samples, 0.04%)</title><rect x="15.0" y="597" width="0.4" height="15.0" fill="rgb(215,21,28)" rx="2" ry="2" />
<text  x="17.99" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (13 samples, 0.25%)</title><rect x="66.0" y="341" width="3.0" height="15.0" fill="rgb(239,220,31)" rx="2" ry="2" />
<text  x="69.01" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.10%)</title><rect x="889.6" y="421" width="1.1" height="15.0" fill="rgb(210,145,36)" rx="2" ry="2" />
<text  x="892.56" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (244 samples, 4.69%)</title><rect x="220.4" y="229" width="55.3" height="15.0" fill="rgb(248,110,37)" rx="2" ry="2" />
<text  x="223.42" y="239.5" >parti..</text>
</g>
<g >
<title>make_combined_reader (70 samples, 1.35%)</title><rect x="466.7" y="325" width="15.8" height="15.0" fill="rgb(216,188,15)" rx="2" ry="2" />
<text  x="469.67" y="335.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%)</title><rect x="12.3" y="261" width="0.4" height="15.0" fill="rgb(214,134,13)" rx="2" ry="2" />
<text  x="15.27" y="271.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (20 samples, 0.38%)</title><rect x="849.9" y="421" width="4.5" height="15.0" fill="rgb(205,203,3)" rx="2" ry="2" />
<text  x="852.88" y="431.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="116.1" y="357" width="0.2" height="15.0" fill="rgb(243,85,6)" rx="2" ry="2" />
<text  x="119.12" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="27.2" y="405" width="0.3" height="15.0" fill="rgb(209,152,8)" rx="2" ry="2" />
<text  x="30.23" y="415.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (5 samples, 0.10%)</title><rect x="924.0" y="357" width="1.2" height="15.0" fill="rgb(206,132,39)" rx="2" ry="2" />
<text  x="927.02" y="367.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (459 samples, 8.82%)</title><rect x="458.5" y="405" width="104.1" height="15.0" fill="rgb(225,149,16)" rx="2" ry="2" />
<text  x="461.51" y="415.5" >mutation_sou..</text>
</g>
<g >
<title>service::client_state::has_access (6 samples, 0.12%)</title><rect x="85.1" y="437" width="1.3" height="15.0" fill="rgb(222,165,19)" rx="2" ry="2" />
<text  x="88.05" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="1005.0" y="261" width="2.9" height="15.0" fill="rgb(246,100,31)" rx="2" ry="2" />
<text  x="1007.97" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="54.0" y="293" width="0.2" height="15.0" fill="rgb(207,82,25)" rx="2" ry="2" />
<text  x="56.99" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="128.6" y="453" width="0.2" height="15.0" fill="rgb(240,214,43)" rx="2" ry="2" />
<text  x="131.59" y="463.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="282.3" y="229" width="0.5" height="15.0" fill="rgb(205,167,48)" rx="2" ry="2" />
<text  x="285.33" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (4 samples, 0.08%)</title><rect x="64.4" y="309" width="0.9" height="15.0" fill="rgb(241,145,40)" rx="2" ry="2" />
<text  x="67.42" y="319.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%)</title><rect x="136.1" y="405" width="0.9" height="15.0" fill="rgb(233,160,6)" rx="2" ry="2" />
<text  x="139.07" y="415.5" ></text>
</g>
<g >
<title>row_tombstone::apply (4 samples, 0.08%)</title><rect x="428.8" y="213" width="0.9" height="15.0" fill="rgb(220,181,43)" rx="2" ry="2" />
<text  x="431.80" y="223.5" ></text>
</g>
<g >
<title>cql3::attributes::attributes (1 samples, 0.02%)</title><rect x="73.5" y="437" width="0.2" height="15.0" fill="rgb(248,156,2)" rx="2" ry="2" />
<text  x="76.49" y="447.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::registered_metric::~registered_metric (1 samples, 0.02%)</title><rect x="700.0" y="213" width="0.2" height="15.0" fill="rgb(210,95,51)" rx="2" ry="2" />
<text  x="703.00" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="1144.0" y="485" width="0.4" height="15.0" fill="rgb(211,9,51)" rx="2" ry="2" />
<text  x="1146.97" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="42.0" y="229" width="0.2" height="15.0" fill="rgb(224,111,29)" rx="2" ry="2" />
<text  x="44.97" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="831.5" y="341" width="1.6" height="15.0" fill="rgb(219,195,32)" rx="2" ry="2" />
<text  x="834.51" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="868.2" y="325" width="0.3" height="15.0" fill="rgb(249,214,0)" rx="2" ry="2" />
<text  x="871.24" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="804.8" y="117" width="0.2" height="15.0" fill="rgb(211,110,36)" rx="2" ry="2" />
<text  x="807.75" y="127.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="699.8" y="501" width="0.2" height="15.0" fill="rgb(236,121,32)" rx="2" ry="2" />
<text  x="702.77" y="511.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%)</title><rect x="1129.5" y="229" width="0.2" height="15.0" fill="rgb(252,14,26)" rx="2" ry="2" />
<text  x="1132.46" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="917.0" y="357" width="0.4" height="15.0" fill="rgb(226,42,17)" rx="2" ry="2" />
<text  x="919.99" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="907.5" y="325" width="0.2" height="15.0" fill="rgb(246,107,16)" rx="2" ry="2" />
<text  x="910.47" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (60 samples, 1.15%)</title><rect x="527.4" y="277" width="13.6" height="15.0" fill="rgb(212,71,30)" rx="2" ry="2" />
<text  x="530.44" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%)</title><rect x="49.7" y="341" width="0.2" height="15.0" fill="rgb(209,158,6)" rx="2" ry="2" />
<text  x="52.68" y="351.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (1 samples, 0.02%)</title><rect x="27.9" y="389" width="0.2" height="15.0" fill="rgb(250,224,15)" rx="2" ry="2" />
<text  x="30.91" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (8 samples, 0.15%)</title><rect x="634.5" y="405" width="1.8" height="15.0" fill="rgb(242,2,34)" rx="2" ry="2" />
<text  x="637.47" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="257.6" y="101" width="0.7" height="15.0" fill="rgb(216,141,27)" rx="2" ry="2" />
<text  x="260.61" y="111.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="457.4" y="421" width="0.2" height="15.0" fill="rgb(238,126,24)" rx="2" ry="2" />
<text  x="460.38" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::functions (1 samples, 0.02%)</title><rect x="23.4" y="261" width="0.2" height="15.0" fill="rgb(240,8,11)" rx="2" ry="2" />
<text  x="26.38" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="561.5" y="341" width="0.2" height="15.0" fill="rgb(249,72,19)" rx="2" ry="2" />
<text  x="564.45" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="560.5" y="325" width="0.3" height="15.0" fill="rgb(250,74,37)" rx="2" ry="2" />
<text  x="563.55" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="965.3" y="325" width="0.2" height="15.0" fill="rgb(211,41,51)" rx="2" ry="2" />
<text  x="968.29" y="335.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="22.0" y="549" width="0.2" height="15.0" fill="rgb(228,172,37)" rx="2" ry="2" />
<text  x="25.02" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (18 samples, 0.35%)</title><rect x="289.8" y="213" width="4.1" height="15.0" fill="rgb(221,102,52)" rx="2" ry="2" />
<text  x="292.81" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (138 samples, 2.65%)</title><rect x="228.4" y="133" width="31.3" height="15.0" fill="rgb(234,66,43)" rx="2" ry="2" />
<text  x="231.36" y="143.5" >co..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (2 samples, 0.04%)</title><rect x="635.6" y="389" width="0.5" height="15.0" fill="rgb(215,68,3)" rx="2" ry="2" />
<text  x="638.60" y="399.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="113.9" y="293" width="0.2" height="15.0" fill="rgb(226,129,4)" rx="2" ry="2" />
<text  x="116.85" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="18.4" y="581" width="0.2" height="15.0" fill="rgb(249,147,34)" rx="2" ry="2" />
<text  x="21.39" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="667.6" y="389" width="0.2" height="15.0" fill="rgb(238,36,32)" rx="2" ry="2" />
<text  x="670.57" y="399.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="917.4" y="373" width="0.7" height="15.0" fill="rgb(228,33,41)" rx="2" ry="2" />
<text  x="920.45" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (6 samples, 0.12%)</title><rect x="988.9" y="277" width="1.3" height="15.0" fill="rgb(239,47,54)" rx="2" ry="2" />
<text  x="991.87" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="81.0" y="357" width="0.2" height="15.0" fill="rgb(214,151,11)" rx="2" ry="2" />
<text  x="83.97" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="130.4" y="421" width="0.5" height="15.0" fill="rgb(229,142,15)" rx="2" ry="2" />
<text  x="133.40" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (4 samples, 0.08%)</title><rect x="130.9" y="437" width="0.9" height="15.0" fill="rgb(253,64,14)" rx="2" ry="2" />
<text  x="133.86" y="447.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="868.9" y="245" width="0.5" height="15.0" fill="rgb(249,37,43)" rx="2" ry="2" />
<text  x="871.92" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="50.8" y="293" width="0.5" height="15.0" fill="rgb(220,130,35)" rx="2" ry="2" />
<text  x="53.81" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="699.5" y="501" width="0.3" height="15.0" fill="rgb(209,33,1)" rx="2" ry="2" />
<text  x="702.54" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="722.2" y="501" width="0.2" height="15.0" fill="rgb(205,9,13)" rx="2" ry="2" />
<text  x="725.22" y="511.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="108.4" y="437" width="0.2" height="15.0" fill="rgb(234,36,19)" rx="2" ry="2" />
<text  x="111.41" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%)</title><rect x="624.3" y="421" width="0.2" height="15.0" fill="rgb(250,167,13)" rx="2" ry="2" />
<text  x="627.26" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.08%)</title><rect x="665.1" y="437" width="0.9" height="15.0" fill="rgb(241,216,27)" rx="2" ry="2" />
<text  x="668.08" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.10%)</title><rect x="800.4" y="133" width="1.2" height="15.0" fill="rgb(213,50,46)" rx="2" ry="2" />
<text  x="803.45" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1025.8" y="133" width="0.3" height="15.0" fill="rgb(249,11,29)" rx="2" ry="2" />
<text  x="1028.83" y="143.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mA (1 samples, 0.02%)</title><rect x="40.2" y="245" width="0.2" height="15.0" fill="rgb(241,109,0)" rx="2" ry="2" />
<text  x="43.16" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="606.3" y="373" width="0.3" height="15.0" fill="rgb(250,220,9)" rx="2" ry="2" />
<text  x="609.35" y="383.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1137.6" y="181" width="0.5" height="15.0" fill="rgb(239,195,11)" rx="2" ry="2" />
<text  x="1140.62" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::get (1 samples, 0.02%)</title><rect x="71.0" y="373" width="0.2" height="15.0" fill="rgb(209,33,4)" rx="2" ry="2" />
<text  x="74.00" y="383.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.23%)</title><rect x="442.9" y="245" width="2.7" height="15.0" fill="rgb(214,130,42)" rx="2" ry="2" />
<text  x="445.86" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.8" y="277" width="0.2" height="15.0" fill="rgb(249,42,26)" rx="2" ry="2" />
<text  x="53.81" y="287.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="802.7" y="117" width="0.2" height="15.0" fill="rgb(215,146,27)" rx="2" ry="2" />
<text  x="805.71" y="127.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (3 samples, 0.06%)</title><rect x="46.3" y="181" width="0.7" height="15.0" fill="rgb(236,173,0)" rx="2" ry="2" />
<text  x="49.28" y="191.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.8" y="261" width="0.2" height="15.0" fill="rgb(240,17,10)" rx="2" ry="2" />
<text  x="53.81" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="198.7" y="245" width="0.2" height="15.0" fill="rgb(227,6,15)" rx="2" ry="2" />
<text  x="201.65" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="12.3" y="277" width="0.4" height="15.0" fill="rgb(229,194,26)" rx="2" ry="2" />
<text  x="15.27" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="679.6" y="485" width="0.2" height="15.0" fill="rgb(211,133,40)" rx="2" ry="2" />
<text  x="682.59" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="97.3" y="469" width="0.2" height="15.0" fill="rgb(234,97,22)" rx="2" ry="2" />
<text  x="100.30" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt (2 samples, 0.04%)</title><rect x="501.8" y="277" width="0.5" height="15.0" fill="rgb(238,2,33)" rx="2" ry="2" />
<text  x="504.82" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="864.4" y="373" width="0.2" height="15.0" fill="rgb(206,19,31)" rx="2" ry="2" />
<text  x="867.39" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1114.9" y="389" width="0.3" height="15.0" fill="rgb(209,35,54)" rx="2" ry="2" />
<text  x="1117.95" y="399.5" ></text>
</g>
<g >
<title>row::external_memory_usage (23 samples, 0.44%)</title><rect x="260.1" y="149" width="5.2" height="15.0" fill="rgb(241,206,43)" rx="2" ry="2" />
<text  x="263.10" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (46 samples, 0.88%)</title><rect x="238.8" y="101" width="10.4" height="15.0" fill="rgb(249,178,1)" rx="2" ry="2" />
<text  x="241.79" y="111.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%)</title><rect x="14.3" y="533" width="0.2" height="15.0" fill="rgb(240,177,38)" rx="2" ry="2" />
<text  x="17.31" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (427 samples, 8.21%)</title><rect x="204.6" y="277" width="96.8" height="15.0" fill="rgb(245,58,49)" rx="2" ry="2" />
<text  x="207.55" y="287.5" >logalloc::a..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="79.4" y="293" width="0.2" height="15.0" fill="rgb(208,45,40)" rx="2" ry="2" />
<text  x="82.39" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="587.8" y="277" width="0.2" height="15.0" fill="rgb(226,134,5)" rx="2" ry="2" />
<text  x="590.76" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="715.4" y="421" width="0.2" height="15.0" fill="rgb(227,227,12)" rx="2" ry="2" />
<text  x="718.42" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.02%)</title><rect x="318.6" y="341" width="12.0" height="15.0" fill="rgb(235,16,45)" rx="2" ry="2" />
<text  x="321.60" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="698.9" y="421" width="0.2" height="15.0" fill="rgb(229,8,51)" rx="2" ry="2" />
<text  x="701.86" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="271.4" y="149" width="0.9" height="15.0" fill="rgb(242,108,46)" rx="2" ry="2" />
<text  x="274.44" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="161.9" y="421" width="3.6" height="15.0" fill="rgb(232,62,36)" rx="2" ry="2" />
<text  x="164.92" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="66.7" y="133" width="0.2" height="15.0" fill="rgb(216,114,49)" rx="2" ry="2" />
<text  x="69.69" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="1101.1" y="405" width="0.5" height="15.0" fill="rgb(252,226,44)" rx="2" ry="2" />
<text  x="1104.11" y="415.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="334.0" y="405" width="0.3" height="15.0" fill="rgb(220,211,25)" rx="2" ry="2" />
<text  x="337.02" y="415.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="87.3" y="389" width="0.2" height="15.0" fill="rgb(227,187,10)" rx="2" ry="2" />
<text  x="90.32" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="641.7" y="389" width="0.2" height="15.0" fill="rgb(235,220,42)" rx="2" ry="2" />
<text  x="644.72" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1155.5" y="405" width="0.5" height="15.0" fill="rgb(249,63,46)" rx="2" ry="2" />
<text  x="1158.53" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(225,91,9)" rx="2" ry="2" />
<text  x="13.68" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%)</title><rect x="889.1" y="421" width="0.2" height="15.0" fill="rgb(227,185,3)" rx="2" ry="2" />
<text  x="892.10" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="66.9" y="117" width="0.2" height="15.0" fill="rgb(206,128,43)" rx="2" ry="2" />
<text  x="69.91" y="127.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%)</title><rect x="39.9" y="261" width="0.3" height="15.0" fill="rgb(226,175,18)" rx="2" ry="2" />
<text  x="42.93" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="48.3" y="293" width="1.2" height="15.0" fill="rgb(237,82,51)" rx="2" ry="2" />
<text  x="51.32" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="537.0" y="197" width="0.2" height="15.0" fill="rgb(232,65,5)" rx="2" ry="2" />
<text  x="539.96" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="995.9" y="245" width="0.5" height="15.0" fill="rgb(233,142,46)" rx="2" ry="2" />
<text  x="998.90" y="255.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (19 samples, 0.37%)</title><rect x="388.2" y="165" width="4.3" height="15.0" fill="rgb(253,56,54)" rx="2" ry="2" />
<text  x="391.22" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="1042.6" y="197" width="0.5" height="15.0" fill="rgb(235,174,0)" rx="2" ry="2" />
<text  x="1045.61" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(246,66,41)" rx="2" ry="2" />
<text  x="13.68" y="575.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%)</title><rect x="933.3" y="405" width="0.2" height="15.0" fill="rgb(213,74,14)" rx="2" ry="2" />
<text  x="936.32" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,085 samples, 20.85%)</title><rect x="879.1" y="453" width="246.0" height="15.0" fill="rgb(208,197,51)" rx="2" ry="2" />
<text  x="882.13" y="463.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="753.5" y="277" width="0.5" height="15.0" fill="rgb(249,224,17)" rx="2" ry="2" />
<text  x="756.51" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1130.4" y="245" width="0.2" height="15.0" fill="rgb(223,76,41)" rx="2" ry="2" />
<text  x="1133.37" y="255.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::create_table_statement::raw_statement*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="70.1" y="309" width="0.2" height="15.0" fill="rgb(226,189,33)" rx="2" ry="2" />
<text  x="73.09" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.08%)</title><rect x="258.7" y="117" width="1.0" height="15.0" fill="rgb(243,161,16)" rx="2" ry="2" />
<text  x="261.74" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="117.0" y="245" width="0.3" height="15.0" fill="rgb(221,116,16)" rx="2" ry="2" />
<text  x="120.03" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="116.6" y="373" width="0.2" height="15.0" fill="rgb(217,188,0)" rx="2" ry="2" />
<text  x="119.57" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="71.9" y="389" width="0.2" height="15.0" fill="rgb(237,69,41)" rx="2" ry="2" />
<text  x="74.90" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="953.7" y="325" width="0.7" height="15.0" fill="rgb(209,72,18)" rx="2" ry="2" />
<text  x="956.73" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.08%)</title><rect x="1126.7" y="213" width="0.9" height="15.0" fill="rgb(246,64,27)" rx="2" ry="2" />
<text  x="1129.74" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="103.0" y="437" width="0.2" height="15.0" fill="rgb(250,67,21)" rx="2" ry="2" />
<text  x="105.97" y="447.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="529.5" y="245" width="0.2" height="15.0" fill="rgb(226,134,34)" rx="2" ry="2" />
<text  x="532.48" y="255.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="29.3" y="309" width="0.2" height="15.0" fill="rgb(225,183,1)" rx="2" ry="2" />
<text  x="32.27" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="541.7" y="277" width="0.3" height="15.0" fill="rgb(226,225,28)" rx="2" ry="2" />
<text  x="544.73" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (1 samples, 0.02%)</title><rect x="541.0" y="277" width="0.3" height="15.0" fill="rgb(250,110,44)" rx="2" ry="2" />
<text  x="544.05" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="774.6" y="325" width="0.7" height="15.0" fill="rgb(231,169,18)" rx="2" ry="2" />
<text  x="777.60" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (228 samples, 4.38%)</title><rect x="992.7" y="325" width="51.7" height="15.0" fill="rgb(222,94,28)" rx="2" ry="2" />
<text  x="995.73" y="335.5" >servi..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.37%)</title><rect x="752.1" y="357" width="4.4" height="15.0" fill="rgb(248,137,53)" rx="2" ry="2" />
<text  x="755.15" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="67.8" y="277" width="0.2" height="15.0" fill="rgb(214,69,28)" rx="2" ry="2" />
<text  x="70.82" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="545.6" y="325" width="0.2" height="15.0" fill="rgb(231,44,54)" rx="2" ry="2" />
<text  x="548.58" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (35 samples, 0.67%)</title><rect x="865.3" y="437" width="7.9" height="15.0" fill="rgb(231,172,46)" rx="2" ry="2" />
<text  x="868.30" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::statement_restrictions&gt;::shared_ptr_count_for&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="10.7" y="293" width="0.2" height="15.0" fill="rgb(221,223,7)" rx="2" ry="2" />
<text  x="13.68" y="303.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="300.2" y="213" width="0.5" height="15.0" fill="rgb(216,12,26)" rx="2" ry="2" />
<text  x="303.24" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (4 samples, 0.08%)</title><rect x="279.8" y="165" width="0.9" height="15.0" fill="rgb(205,1,17)" rx="2" ry="2" />
<text  x="282.83" y="175.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(205,28,31)" rx="2" ry="2" />
<text  x="13.68" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="138.3" y="373" width="0.5" height="15.0" fill="rgb(225,34,19)" rx="2" ry="2" />
<text  x="141.34" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (4 samples, 0.08%)</title><rect x="519.7" y="309" width="0.9" height="15.0" fill="rgb(238,123,15)" rx="2" ry="2" />
<text  x="522.73" y="319.5" ></text>
</g>
<g >
<title>siglongjmp@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="645.3" y="485" width="0.3" height="15.0" fill="rgb(229,85,18)" rx="2" ry="2" />
<text  x="648.35" y="495.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="864.4" y="293" width="0.2" height="15.0" fill="rgb(249,68,47)" rx="2" ry="2" />
<text  x="867.39" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.3" y="165" width="0.2" height="15.0" fill="rgb(240,92,39)" rx="2" ry="2" />
<text  x="66.29" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1101.6" y="405" width="0.6" height="15.0" fill="rgb(235,188,32)" rx="2" ry="2" />
<text  x="1104.57" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="629.5" y="437" width="0.2" height="15.0" fill="rgb(251,179,2)" rx="2" ry="2" />
<text  x="632.48" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1076.4" y="277" width="0.7" height="15.0" fill="rgb(210,151,18)" rx="2" ry="2" />
<text  x="1079.40" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="53.5" y="197" width="0.3" height="15.0" fill="rgb(208,187,54)" rx="2" ry="2" />
<text  x="56.54" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (3 samples, 0.06%)</title><rect x="659.9" y="357" width="0.6" height="15.0" fill="rgb(251,223,6)" rx="2" ry="2" />
<text  x="662.86" y="367.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="534.2" y="197" width="1.2" height="15.0" fill="rgb(237,194,51)" rx="2" ry="2" />
<text  x="537.24" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="29.3" y="325" width="0.2" height="15.0" fill="rgb(242,53,18)" rx="2" ry="2" />
<text  x="32.27" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="742.6" y="437" width="0.3" height="15.0" fill="rgb(234,118,27)" rx="2" ry="2" />
<text  x="745.62" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%)</title><rect x="186.6" y="309" width="0.5" height="15.0" fill="rgb(216,19,39)" rx="2" ry="2" />
<text  x="189.64" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (10 samples, 0.19%)</title><rect x="980.5" y="309" width="2.3" height="15.0" fill="rgb(232,25,48)" rx="2" ry="2" />
<text  x="983.48" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="989.8" y="261" width="0.4" height="15.0" fill="rgb(236,217,29)" rx="2" ry="2" />
<text  x="992.78" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="447.4" y="277" width="0.5" height="15.0" fill="rgb(207,5,23)" rx="2" ry="2" />
<text  x="450.40" y="287.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="70.1" y="325" width="0.2" height="15.0" fill="rgb(214,173,16)" rx="2" ry="2" />
<text  x="73.09" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (14 samples, 0.27%)</title><rect x="663.5" y="469" width="3.2" height="15.0" fill="rgb(207,35,16)" rx="2" ry="2" />
<text  x="666.49" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="963.9" y="341" width="0.3" height="15.0" fill="rgb(225,30,7)" rx="2" ry="2" />
<text  x="966.93" y="351.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (12 samples, 0.23%)</title><rect x="392.8" y="165" width="2.7" height="15.0" fill="rgb(248,7,35)" rx="2" ry="2" />
<text  x="395.75" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1039.4" y="261" width="0.3" height="15.0" fill="rgb(206,37,7)" rx="2" ry="2" />
<text  x="1042.44" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="60.6" y="261" width="0.6" height="15.0" fill="rgb(224,129,21)" rx="2" ry="2" />
<text  x="63.56" y="271.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="49.7" y="357" width="0.2" height="15.0" fill="rgb(231,114,31)" rx="2" ry="2" />
<text  x="52.68" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1095.9" y="341" width="1.8" height="15.0" fill="rgb(240,50,36)" rx="2" ry="2" />
<text  x="1098.90" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="450.8" y="293" width="0.2" height="15.0" fill="rgb(234,229,2)" rx="2" ry="2" />
<text  x="453.80" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="66.9" y="85" width="0.2" height="15.0" fill="rgb(244,3,28)" rx="2" ry="2" />
<text  x="69.91" y="95.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="255.6" y="117" width="0.4" height="15.0" fill="rgb(243,183,25)" rx="2" ry="2" />
<text  x="258.57" y="127.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="87.8" y="533" width="0.2" height="15.0" fill="rgb(234,57,2)" rx="2" ry="2" />
<text  x="90.77" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="63.3" y="133" width="0.2" height="15.0" fill="rgb(229,165,1)" rx="2" ry="2" />
<text  x="66.29" y="143.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (11 samples, 0.21%)</title><rect x="209.1" y="213" width="2.5" height="15.0" fill="rgb(217,92,54)" rx="2" ry="2" />
<text  x="212.09" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="660.1" y="341" width="0.4" height="15.0" fill="rgb(247,225,12)" rx="2" ry="2" />
<text  x="663.09" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="823.1" y="389" width="0.2" height="15.0" fill="rgb(210,172,31)" rx="2" ry="2" />
<text  x="826.12" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="806.3" y="85" width="0.3" height="15.0" fill="rgb(212,200,34)" rx="2" ry="2" />
<text  x="809.34" y="95.5" ></text>
</g>
<g >
<title>seastar::reactor::execution_stage_pollfn::poll (1 samples, 0.02%)</title><rect x="90.3" y="517" width="0.2" height="15.0" fill="rgb(216,114,3)" rx="2" ry="2" />
<text  x="93.27" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%)</title><rect x="723.1" y="501" width="0.5" height="15.0" fill="rgb(223,192,53)" rx="2" ry="2" />
<text  x="726.12" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="567.6" y="421" width="0.4" height="15.0" fill="rgb(212,143,34)" rx="2" ry="2" />
<text  x="570.57" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (3 samples, 0.06%)</title><rect x="36.8" y="213" width="0.6" height="15.0" fill="rgb(211,2,27)" rx="2" ry="2" />
<text  x="39.76" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1106.8" y="405" width="0.2" height="15.0" fill="rgb(205,83,53)" rx="2" ry="2" />
<text  x="1109.78" y="415.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="110.4" y="485" width="0.5" height="15.0" fill="rgb(210,109,29)" rx="2" ry="2" />
<text  x="113.45" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="256.0" y="117" width="2.3" height="15.0" fill="rgb(208,196,30)" rx="2" ry="2" />
<text  x="259.02" y="127.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS9_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSP_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESY_EUlDpOT_E_ZNS_6futureIvE14then_impl_nrvoIS13_NS14_IS7_EEEESN_OT_EUlOS8_RS13_ONS_12future_stateINS1_9monostateEEEE_vE15run_and_disposeEv (1 samples, 0.02%)</title><rect x="97.1" y="501" width="0.2" height="15.0" fill="rgb(212,85,49)" rx="2" ry="2" />
<text  x="100.07" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="61.7" y="245" width="0.2" height="15.0" fill="rgb(210,28,25)" rx="2" ry="2" />
<text  x="64.70" y="255.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="293.9" y="213" width="0.4" height="15.0" fill="rgb(237,73,50)" rx="2" ry="2" />
<text  x="296.89" y="223.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="867.3" y="373" width="0.3" height="15.0" fill="rgb(236,211,47)" rx="2" ry="2" />
<text  x="870.34" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="784.6" y="309" width="0.2" height="15.0" fill="rgb(243,143,25)" rx="2" ry="2" />
<text  x="787.57" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="88.2" y="549" width="0.3" height="15.0" fill="rgb(206,197,44)" rx="2" ry="2" />
<text  x="91.23" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="22.2" y="469" width="0.3" height="15.0" fill="rgb(253,164,34)" rx="2" ry="2" />
<text  x="25.24" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="754.2" y="277" width="0.2" height="15.0" fill="rgb(209,206,31)" rx="2" ry="2" />
<text  x="757.19" y="287.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="113.6" y="261" width="0.3" height="15.0" fill="rgb(242,167,11)" rx="2" ry="2" />
<text  x="116.62" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="844.2" y="357" width="0.2" height="15.0" fill="rgb(253,110,5)" rx="2" ry="2" />
<text  x="847.21" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.17%)</title><rect x="341.1" y="277" width="2.0" height="15.0" fill="rgb(214,151,8)" rx="2" ry="2" />
<text  x="344.05" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="956.4" y="373" width="0.3" height="15.0" fill="rgb(220,88,12)" rx="2" ry="2" />
<text  x="959.45" y="383.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%)</title><rect x="870.1" y="293" width="0.6" height="15.0" fill="rgb(252,104,0)" rx="2" ry="2" />
<text  x="873.06" y="303.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="761.2" y="357" width="0.2" height="15.0" fill="rgb(238,87,46)" rx="2" ry="2" />
<text  x="764.22" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (3 samples, 0.06%)</title><rect x="114.8" y="501" width="0.6" height="15.0" fill="rgb(225,54,33)" rx="2" ry="2" />
<text  x="117.76" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="864.6" y="453" width="0.2" height="15.0" fill="rgb(238,166,21)" rx="2" ry="2" />
<text  x="867.62" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (3 samples, 0.06%)</title><rect x="103.6" y="421" width="0.7" height="15.0" fill="rgb(237,191,40)" rx="2" ry="2" />
<text  x="106.65" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="12.3" y="181" width="0.2" height="15.0" fill="rgb(229,41,9)" rx="2" ry="2" />
<text  x="15.27" y="191.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="87.8" y="501" width="0.2" height="15.0" fill="rgb(233,112,6)" rx="2" ry="2" />
<text  x="90.77" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt; &gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="79.2" y="373" width="0.2" height="15.0" fill="rgb(209,194,32)" rx="2" ry="2" />
<text  x="82.16" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="672.6" y="485" width="0.6" height="15.0" fill="rgb(211,128,48)" rx="2" ry="2" />
<text  x="675.56" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,089 samples, 20.93%)</title><rect x="878.2" y="469" width="246.9" height="15.0" fill="rgb(235,158,33)" rx="2" ry="2" />
<text  x="881.22" y="479.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="47.4" y="197" width="0.2" height="15.0" fill="rgb(253,210,37)" rx="2" ry="2" />
<text  x="50.41" y="207.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%)</title><rect x="881.8" y="437" width="0.3" height="15.0" fill="rgb(248,81,1)" rx="2" ry="2" />
<text  x="884.85" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_drop_node (2 samples, 0.04%)</title><rect x="659.2" y="373" width="0.4" height="15.0" fill="rgb(241,23,49)" rx="2" ry="2" />
<text  x="662.18" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="931.3" y="373" width="0.4" height="15.0" fill="rgb(223,209,50)" rx="2" ry="2" />
<text  x="934.28" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="22.2" y="421" width="0.3" height="15.0" fill="rgb(253,174,15)" rx="2" ry="2" />
<text  x="25.24" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="930.8" y="389" width="0.3" height="15.0" fill="rgb(207,44,33)" rx="2" ry="2" />
<text  x="933.83" y="399.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_error (1 samples, 0.02%)</title><rect x="34.0" y="277" width="0.3" height="15.0" fill="rgb(222,60,31)" rx="2" ry="2" />
<text  x="37.04" y="287.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="205.2" y="245" width="0.7" height="15.0" fill="rgb(241,137,14)" rx="2" ry="2" />
<text  x="208.23" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="637.0" y="421" width="0.2" height="15.0" fill="rgb(217,56,15)" rx="2" ry="2" />
<text  x="639.96" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1124.7" y="437" width="0.2" height="15.0" fill="rgb(239,218,37)" rx="2" ry="2" />
<text  x="1127.70" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="261" width="0.7" height="15.0" fill="rgb(219,104,1)" rx="2" ry="2" />
<text  x="50.64" y="271.5" ></text>
</g>
<g >
<title>__start_context (288 samples, 5.53%)</title><rect x="22.0" y="613" width="65.3" height="15.0" fill="rgb(207,9,8)" rx="2" ry="2" />
<text  x="25.02" y="623.5" >__start..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (4 samples, 0.08%)</title><rect x="78.5" y="389" width="0.9" height="15.0" fill="rgb(205,10,39)" rx="2" ry="2" />
<text  x="81.48" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (3 samples, 0.06%)</title><rect x="573.9" y="277" width="0.7" height="15.0" fill="rgb(217,187,25)" rx="2" ry="2" />
<text  x="576.92" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="10.2" y="581" width="0.3" height="15.0" fill="rgb(245,104,5)" rx="2" ry="2" />
<text  x="13.23" y="591.5" ></text>
</g>
<g >
<title>query::querier_base::close (131 samples, 2.52%)</title><rect x="578.5" y="437" width="29.7" height="15.0" fill="rgb(219,146,43)" rx="2" ry="2" />
<text  x="581.46" y="447.5" >qu..</text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, schema_mutations&gt; (1 samples, 0.02%)</title><rect x="116.1" y="421" width="0.2" height="15.0" fill="rgb(233,100,43)" rx="2" ry="2" />
<text  x="119.12" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="566.2" y="405" width="0.2" height="15.0" fill="rgb(229,67,12)" rx="2" ry="2" />
<text  x="569.21" y="415.5" ></text>
</g>
<g >
<title>[unknown] (26 samples, 0.50%)</title><rect x="10.0" y="613" width="5.9" height="15.0" fill="rgb(209,181,32)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="788.7" y="261" width="1.1" height="15.0" fill="rgb(247,119,33)" rx="2" ry="2" />
<text  x="791.65" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare_restrictions (1 samples, 0.02%)</title><rect x="10.7" y="325" width="0.2" height="15.0" fill="rgb(219,161,36)" rx="2" ry="2" />
<text  x="13.68" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="964.8" y="373" width="0.3" height="15.0" fill="rgb(237,29,49)" rx="2" ry="2" />
<text  x="967.84" y="383.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="22.2" y="549" width="0.3" height="15.0" fill="rgb(231,127,48)" rx="2" ry="2" />
<text  x="25.24" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="756.7" y="405" width="0.2" height="15.0" fill="rgb(211,77,34)" rx="2" ry="2" />
<text  x="759.68" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="664.6" y="405" width="0.5" height="15.0" fill="rgb(210,92,17)" rx="2" ry="2" />
<text  x="667.62" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (32 samples, 0.61%)</title><rect x="434.9" y="245" width="7.3" height="15.0" fill="rgb(242,157,15)" rx="2" ry="2" />
<text  x="437.93" y="255.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1095.9" y="357" width="1.8" height="15.0" fill="rgb(240,46,30)" rx="2" ry="2" />
<text  x="1098.90" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="715.6" y="421" width="0.3" height="15.0" fill="rgb(215,12,5)" rx="2" ry="2" />
<text  x="718.64" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.3" y="293" width="0.2" height="15.0" fill="rgb(232,115,8)" rx="2" ry="2" />
<text  x="88.28" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="483.5" y="325" width="0.6" height="15.0" fill="rgb(234,122,39)" rx="2" ry="2" />
<text  x="486.45" y="335.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.10%)</title><rect x="83.0" y="453" width="1.1" height="15.0" fill="rgb(248,175,8)" rx="2" ry="2" />
<text  x="86.01" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (26 samples, 0.50%)</title><rect x="1132.6" y="341" width="5.9" height="15.0" fill="rgb(248,195,3)" rx="2" ry="2" />
<text  x="1135.63" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="145.8" y="453" width="0.2" height="15.0" fill="rgb(253,159,49)" rx="2" ry="2" />
<text  x="148.82" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="86.2" y="341" width="0.2" height="15.0" fill="rgb(241,55,32)" rx="2" ry="2" />
<text  x="89.19" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="53.5" y="325" width="0.5" height="15.0" fill="rgb(246,164,13)" rx="2" ry="2" />
<text  x="56.54" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="835.4" y="421" width="0.6" height="15.0" fill="rgb(252,51,7)" rx="2" ry="2" />
<text  x="838.37" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (9 samples, 0.17%)</title><rect x="824.5" y="325" width="2.0" height="15.0" fill="rgb(229,39,53)" rx="2" ry="2" />
<text  x="827.48" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="871.4" y="325" width="0.2" height="15.0" fill="rgb(249,103,45)" rx="2" ry="2" />
<text  x="874.42" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (434 samples, 8.34%)</title><rect x="203.6" y="309" width="98.5" height="15.0" fill="rgb(222,119,43)" rx="2" ry="2" />
<text  x="206.64" y="319.5" >partition_s..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="52.2" y="117" width="0.2" height="15.0" fill="rgb(221,133,35)" rx="2" ry="2" />
<text  x="55.18" y="127.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::task_queue (1 samples, 0.02%)</title><rect x="117.0" y="405" width="0.3" height="15.0" fill="rgb(236,141,26)" rx="2" ry="2" />
<text  x="120.03" y="415.5" ></text>
</g>
<g >
<title>ser::column__c__variant&lt;bytes_ostream&gt;::start_variant_live_cell (1 samples, 0.02%)</title><rect x="1136.5" y="117" width="0.2" height="15.0" fill="rgb(208,91,35)" rx="2" ry="2" />
<text  x="1139.49" y="127.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%)</title><rect x="619.3" y="405" width="0.4" height="15.0" fill="rgb(234,157,30)" rx="2" ry="2" />
<text  x="622.27" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="983.9" y="341" width="0.2" height="15.0" fill="rgb(209,185,27)" rx="2" ry="2" />
<text  x="986.89" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="79.6" y="325" width="0.2" height="15.0" fill="rgb(206,93,7)" rx="2" ry="2" />
<text  x="82.61" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="838.8" y="421" width="0.2" height="15.0" fill="rgb(227,70,4)" rx="2" ry="2" />
<text  x="841.77" y="431.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (1 samples, 0.02%)</title><rect x="73.7" y="437" width="0.2" height="15.0" fill="rgb(221,184,39)" rx="2" ry="2" />
<text  x="76.72" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (1 samples, 0.02%)</title><rect x="746.5" y="373" width="0.2" height="15.0" fill="rgb(223,198,36)" rx="2" ry="2" />
<text  x="749.48" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (2 samples, 0.04%)</title><rect x="62.2" y="53" width="0.4" height="15.0" fill="rgb(220,198,49)" rx="2" ry="2" />
<text  x="65.15" y="63.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.10%)</title><rect x="103.2" y="437" width="1.1" height="15.0" fill="rgb(250,90,25)" rx="2" ry="2" />
<text  x="106.19" y="447.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="82.6" y="437" width="0.2" height="15.0" fill="rgb(222,92,54)" rx="2" ry="2" />
<text  x="85.56" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="83.9" y="389" width="0.2" height="15.0" fill="rgb(227,197,22)" rx="2" ry="2" />
<text  x="86.92" y="399.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%)</title><rect x="463.0" y="341" width="0.7" height="15.0" fill="rgb(212,16,14)" rx="2" ry="2" />
<text  x="466.04" y="351.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="844.9" y="341" width="0.7" height="15.0" fill="rgb(232,127,40)" rx="2" ry="2" />
<text  x="847.89" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1043.1" y="277" width="0.4" height="15.0" fill="rgb(217,21,38)" rx="2" ry="2" />
<text  x="1046.07" y="287.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="66.0" y="293" width="0.2" height="15.0" fill="rgb(246,22,16)" rx="2" ry="2" />
<text  x="69.01" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="23.8" y="533" width="0.3" height="15.0" fill="rgb(238,113,29)" rx="2" ry="2" />
<text  x="26.83" y="543.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (10 samples, 0.19%)</title><rect x="533.1" y="229" width="2.3" height="15.0" fill="rgb(213,16,37)" rx="2" ry="2" />
<text  x="536.11" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="1163.0" y="485" width="0.5" height="15.0" fill="rgb(233,99,46)" rx="2" ry="2" />
<text  x="1166.02" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (59 samples, 1.13%)</title><rect x="793.6" y="261" width="13.4" height="15.0" fill="rgb(221,227,45)" rx="2" ry="2" />
<text  x="796.64" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="62.6" y="37" width="0.2" height="15.0" fill="rgb(248,89,43)" rx="2" ry="2" />
<text  x="65.61" y="47.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="1128.3" y="181" width="0.3" height="15.0" fill="rgb(235,20,13)" rx="2" ry="2" />
<text  x="1131.32" y="191.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned int, unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::empty (1 samples, 0.02%)</title><rect x="44.2" y="309" width="0.3" height="15.0" fill="rgb(229,2,21)" rx="2" ry="2" />
<text  x="47.24" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="114.8" y="229" width="0.2" height="15.0" fill="rgb(235,126,37)" rx="2" ry="2" />
<text  x="117.76" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (11 samples, 0.21%)</title><rect x="734.2" y="421" width="2.5" height="15.0" fill="rgb(212,49,48)" rx="2" ry="2" />
<text  x="737.24" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="114.8" y="469" width="0.6" height="15.0" fill="rgb(237,121,21)" rx="2" ry="2" />
<text  x="117.76" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="110.9" y="485" width="0.2" height="15.0" fill="rgb(246,52,23)" rx="2" ry="2" />
<text  x="113.90" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="860.8" y="469" width="0.4" height="15.0" fill="rgb(230,4,14)" rx="2" ry="2" />
<text  x="863.76" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_write_response_handler&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="721.5" y="453" width="0.3" height="15.0" fill="rgb(235,102,25)" rx="2" ry="2" />
<text  x="724.54" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="107.0" y="469" width="1.0" height="15.0" fill="rgb(250,90,52)" rx="2" ry="2" />
<text  x="110.05" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="954.2" y="309" width="0.2" height="15.0" fill="rgb(217,145,19)" rx="2" ry="2" />
<text  x="957.18" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="27.5" y="405" width="0.2" height="15.0" fill="rgb(226,214,32)" rx="2" ry="2" />
<text  x="30.46" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="53.8" y="133" width="0.2" height="15.0" fill="rgb(253,167,53)" rx="2" ry="2" />
<text  x="56.76" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="679.4" y="485" width="0.2" height="15.0" fill="rgb(209,101,26)" rx="2" ry="2" />
<text  x="682.36" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="68.0" y="165" width="0.3" height="15.0" fill="rgb(245,83,45)" rx="2" ry="2" />
<text  x="71.05" y="175.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="62.6" y="53" width="0.2" height="15.0" fill="rgb(249,149,41)" rx="2" ry="2" />
<text  x="65.61" y="63.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="57.8" y="261" width="0.7" height="15.0" fill="rgb(219,132,51)" rx="2" ry="2" />
<text  x="60.84" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="534.2" y="181" width="1.2" height="15.0" fill="rgb(226,18,41)" rx="2" ry="2" />
<text  x="537.24" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="54.4" y="149" width="0.5" height="15.0" fill="rgb(207,83,21)" rx="2" ry="2" />
<text  x="57.44" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="697.3" y="485" width="0.4" height="15.0" fill="rgb(230,4,6)" rx="2" ry="2" />
<text  x="700.28" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="31.8" y="165" width="0.2" height="15.0" fill="rgb(239,42,23)" rx="2" ry="2" />
<text  x="34.77" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="681.6" y="485" width="0.5" height="15.0" fill="rgb(228,18,1)" rx="2" ry="2" />
<text  x="684.63" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%)</title><rect x="1046.2" y="341" width="1.6" height="15.0" fill="rgb(206,72,30)" rx="2" ry="2" />
<text  x="1049.24" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="113.6" y="437" width="0.3" height="15.0" fill="rgb(237,186,11)" rx="2" ry="2" />
<text  x="116.62" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.12%)</title><rect x="682.5" y="485" width="1.4" height="15.0" fill="rgb(240,189,26)" rx="2" ry="2" />
<text  x="685.54" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="529.9" y="261" width="0.3" height="15.0" fill="rgb(206,89,0)" rx="2" ry="2" />
<text  x="532.93" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="932.4" y="389" width="0.2" height="15.0" fill="rgb(226,205,50)" rx="2" ry="2" />
<text  x="935.41" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="481.2" y="277" width="0.2" height="15.0" fill="rgb(225,197,29)" rx="2" ry="2" />
<text  x="484.18" y="287.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%)</title><rect x="258.3" y="117" width="0.4" height="15.0" fill="rgb(226,179,22)" rx="2" ry="2" />
<text  x="261.29" y="127.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="948.5" y="357" width="0.2" height="15.0" fill="rgb(213,81,6)" rx="2" ry="2" />
<text  x="951.51" y="367.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (12 samples, 0.23%)</title><rect x="855.8" y="437" width="2.7" height="15.0" fill="rgb(250,72,22)" rx="2" ry="2" />
<text  x="858.77" y="447.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="114.1" y="373" width="0.2" height="15.0" fill="rgb(254,64,43)" rx="2" ry="2" />
<text  x="117.08" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1135.4" y="309" width="3.1" height="15.0" fill="rgb(212,38,29)" rx="2" ry="2" />
<text  x="1138.35" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="64.4" y="261" width="0.5" height="15.0" fill="rgb(220,103,34)" rx="2" ry="2" />
<text  x="67.42" y="271.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="839.7" y="437" width="0.4" height="15.0" fill="rgb(234,75,34)" rx="2" ry="2" />
<text  x="842.67" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="817.7" y="325" width="0.2" height="15.0" fill="rgb(249,199,49)" rx="2" ry="2" />
<text  x="820.68" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="707.0" y="469" width="0.3" height="15.0" fill="rgb(220,221,54)" rx="2" ry="2" />
<text  x="710.03" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (11 samples, 0.21%)</title><rect x="552.4" y="293" width="2.5" height="15.0" fill="rgb(220,40,17)" rx="2" ry="2" />
<text  x="555.38" y="303.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="82.6" y="421" width="0.2" height="15.0" fill="rgb(222,228,29)" rx="2" ry="2" />
<text  x="85.56" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="68.5" y="325" width="0.2" height="15.0" fill="rgb(254,164,44)" rx="2" ry="2" />
<text  x="71.50" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%)</title><rect x="205.2" y="261" width="0.9" height="15.0" fill="rgb(210,3,51)" rx="2" ry="2" />
<text  x="208.23" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="66.5" y="309" width="0.2" height="15.0" fill="rgb(242,216,1)" rx="2" ry="2" />
<text  x="69.46" y="319.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%)</title><rect x="108.4" y="501" width="0.2" height="15.0" fill="rgb(249,212,21)" rx="2" ry="2" />
<text  x="111.41" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.13%)</title><rect x="953.0" y="357" width="1.6" height="15.0" fill="rgb(214,172,23)" rx="2" ry="2" />
<text  x="956.05" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (79 samples, 1.52%)</title><rect x="1061.7" y="341" width="17.9" height="15.0" fill="rgb(247,216,51)" rx="2" ry="2" />
<text  x="1064.66" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%)</title><rect x="737.2" y="373" width="4.7" height="15.0" fill="rgb(234,190,18)" rx="2" ry="2" />
<text  x="740.18" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;table&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, table::config, db::commitlog&amp;, compaction_manager&amp;, cell_locker_stats&amp;, cache_tracker&amp;&gt; (1 samples, 0.02%)</title><rect x="114.1" y="245" width="0.2" height="15.0" fill="rgb(250,181,17)" rx="2" ry="2" />
<text  x="117.08" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (8 samples, 0.15%)</title><rect x="784.8" y="309" width="1.8" height="15.0" fill="rgb(231,116,22)" rx="2" ry="2" />
<text  x="787.80" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1134.2" y="149" width="0.2" height="15.0" fill="rgb(222,40,21)" rx="2" ry="2" />
<text  x="1137.22" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="53.5" y="245" width="0.5" height="15.0" fill="rgb(236,225,22)" rx="2" ry="2" />
<text  x="56.54" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (14 samples, 0.27%)</title><rect x="685.0" y="469" width="3.2" height="15.0" fill="rgb(230,30,24)" rx="2" ry="2" />
<text  x="688.03" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="425.2" y="165" width="0.2" height="15.0" fill="rgb(207,59,10)" rx="2" ry="2" />
<text  x="428.18" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="791.4" y="229" width="0.2" height="15.0" fill="rgb(244,187,4)" rx="2" ry="2" />
<text  x="794.38" y="239.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="1133.3" y="165" width="0.2" height="15.0" fill="rgb(242,197,39)" rx="2" ry="2" />
<text  x="1136.31" y="175.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (6 samples, 0.12%)</title><rect x="477.1" y="309" width="1.4" height="15.0" fill="rgb(251,34,39)" rx="2" ry="2" />
<text  x="480.10" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (4 samples, 0.08%)</title><rect x="187.3" y="293" width="0.9" height="15.0" fill="rgb(207,201,41)" rx="2" ry="2" />
<text  x="190.32" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (3 samples, 0.06%)</title><rect x="569.6" y="357" width="0.7" height="15.0" fill="rgb(238,95,36)" rx="2" ry="2" />
<text  x="572.62" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="87.8" y="325" width="0.2" height="15.0" fill="rgb(247,209,27)" rx="2" ry="2" />
<text  x="90.77" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%)</title><rect x="78.0" y="325" width="0.3" height="15.0" fill="rgb(249,152,44)" rx="2" ry="2" />
<text  x="81.02" y="335.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="12.0" y="389" width="0.7" height="15.0" fill="rgb(212,23,5)" rx="2" ry="2" />
<text  x="15.04" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (2 samples, 0.04%)</title><rect x="936.9" y="405" width="0.5" height="15.0" fill="rgb(218,226,8)" rx="2" ry="2" />
<text  x="939.95" y="415.5" ></text>
</g>
<g >
<title>dht::tri_compare (12 samples, 0.23%)</title><rect x="505.0" y="261" width="2.7" height="15.0" fill="rgb(222,96,5)" rx="2" ry="2" />
<text  x="507.99" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (48 samples, 0.92%)</title><rect x="97.3" y="501" width="10.9" height="15.0" fill="rgb(231,62,34)" rx="2" ry="2" />
<text  x="100.30" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="559.0" y="245" width="0.4" height="15.0" fill="rgb(237,90,16)" rx="2" ry="2" />
<text  x="561.96" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.10%)</title><rect x="532.0" y="229" width="1.1" height="15.0" fill="rgb(210,161,39)" rx="2" ry="2" />
<text  x="534.98" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="583.7" y="293" width="0.2" height="15.0" fill="rgb(232,137,46)" rx="2" ry="2" />
<text  x="586.67" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="927.7" y="341" width="0.4" height="15.0" fill="rgb(217,53,27)" rx="2" ry="2" />
<text  x="930.65" y="351.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%)</title><rect x="871.0" y="277" width="0.4" height="15.0" fill="rgb(222,154,46)" rx="2" ry="2" />
<text  x="873.96" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%)</title><rect x="770.3" y="405" width="0.2" height="15.0" fill="rgb(213,98,40)" rx="2" ry="2" />
<text  x="773.29" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="608.2" y="437" width="0.2" height="15.0" fill="rgb(209,147,29)" rx="2" ry="2" />
<text  x="611.16" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="866.7" y="309" width="0.2" height="15.0" fill="rgb(221,222,44)" rx="2" ry="2" />
<text  x="869.66" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="14.3" y="469" width="0.2" height="15.0" fill="rgb(249,106,36)" rx="2" ry="2" />
<text  x="17.31" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="332.9" y="357" width="0.4" height="15.0" fill="rgb(216,73,40)" rx="2" ry="2" />
<text  x="335.89" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="113.9" y="245" width="0.2" height="15.0" fill="rgb(233,186,21)" rx="2" ry="2" />
<text  x="116.85" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (2 samples, 0.04%)</title><rect x="1137.6" y="149" width="0.5" height="15.0" fill="rgb(248,81,34)" rx="2" ry="2" />
<text  x="1140.62" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="77.1" y="373" width="0.2" height="15.0" fill="rgb(249,7,32)" rx="2" ry="2" />
<text  x="80.12" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="23.8" y="341" width="0.3" height="15.0" fill="rgb(231,195,42)" rx="2" ry="2" />
<text  x="26.83" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1054.6" y="309" width="1.8" height="15.0" fill="rgb(231,223,53)" rx="2" ry="2" />
<text  x="1057.63" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (73 samples, 1.40%)</title><rect x="581.0" y="357" width="16.5" height="15.0" fill="rgb(211,180,0)" rx="2" ry="2" />
<text  x="583.95" y="367.5" ></text>
</g>
<g >
<title>row_cache::make_reader (52 samples, 1.00%)</title><rect x="549.0" y="341" width="11.8" height="15.0" fill="rgb(209,134,40)" rx="2" ry="2" />
<text  x="551.98" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="79.4" y="357" width="0.2" height="15.0" fill="rgb(245,39,53)" rx="2" ry="2" />
<text  x="82.39" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="78.5" y="277" width="0.2" height="15.0" fill="rgb(221,27,6)" rx="2" ry="2" />
<text  x="81.48" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="204.3" y="277" width="0.3" height="15.0" fill="rgb(241,52,19)" rx="2" ry="2" />
<text  x="207.32" y="287.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="844.2" y="341" width="0.2" height="15.0" fill="rgb(237,92,19)" rx="2" ry="2" />
<text  x="847.21" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="707.9" y="485" width="0.3" height="15.0" fill="rgb(219,202,33)" rx="2" ry="2" />
<text  x="710.93" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="707.7" y="469" width="0.2" height="15.0" fill="rgb(242,43,27)" rx="2" ry="2" />
<text  x="710.71" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="871.4" y="341" width="0.2" height="15.0" fill="rgb(250,174,0)" rx="2" ry="2" />
<text  x="874.42" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (21 samples, 0.40%)</title><rect x="590.2" y="293" width="4.8" height="15.0" fill="rgb(237,223,1)" rx="2" ry="2" />
<text  x="593.25" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="698.6" y="309" width="0.3" height="15.0" fill="rgb(221,195,35)" rx="2" ry="2" />
<text  x="701.64" y="319.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="87.3" y="613" width="0.2" height="15.0" fill="rgb(229,113,40)" rx="2" ry="2" />
<text  x="90.32" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1167.6" y="501" width="0.2" height="15.0" fill="rgb(234,15,23)" rx="2" ry="2" />
<text  x="1170.55" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="46.1" y="277" width="0.9" height="15.0" fill="rgb(246,133,42)" rx="2" ry="2" />
<text  x="49.05" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (6 samples, 0.12%)</title><rect x="535.8" y="213" width="1.4" height="15.0" fill="rgb(229,26,42)" rx="2" ry="2" />
<text  x="538.83" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="724.5" y="501" width="0.2" height="15.0" fill="rgb(237,195,53)" rx="2" ry="2" />
<text  x="727.49" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%)</title><rect x="360.8" y="165" width="0.9" height="15.0" fill="rgb(239,134,17)" rx="2" ry="2" />
<text  x="363.78" y="175.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (3 samples, 0.06%)</title><rect x="861.2" y="453" width="0.7" height="15.0" fill="rgb(237,183,47)" rx="2" ry="2" />
<text  x="864.21" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%)</title><rect x="1103.6" y="405" width="0.5" height="15.0" fill="rgb(233,103,16)" rx="2" ry="2" />
<text  x="1106.61" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="846.0" y="421" width="1.4" height="15.0" fill="rgb(251,170,24)" rx="2" ry="2" />
<text  x="849.02" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="99.6" y="485" width="0.2" height="15.0" fill="rgb(208,149,52)" rx="2" ry="2" />
<text  x="102.57" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="116.8" y="389" width="0.2" height="15.0" fill="rgb(217,16,14)" rx="2" ry="2" />
<text  x="119.80" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="627.7" y="437" width="0.2" height="15.0" fill="rgb(227,25,27)" rx="2" ry="2" />
<text  x="630.66" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.2" y="165" width="0.3" height="15.0" fill="rgb(243,180,28)" rx="2" ry="2" />
<text  x="52.23" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="598.9" y="341" width="0.4" height="15.0" fill="rgb(253,229,47)" rx="2" ry="2" />
<text  x="601.87" y="351.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (2 samples, 0.04%)</title><rect x="10.9" y="437" width="0.5" height="15.0" fill="rgb(222,135,21)" rx="2" ry="2" />
<text  x="13.91" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="854.9" y="453" width="0.2" height="15.0" fill="rgb(239,108,53)" rx="2" ry="2" />
<text  x="857.87" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1040.6" y="229" width="1.8" height="15.0" fill="rgb(235,135,40)" rx="2" ry="2" />
<text  x="1043.57" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="23.4" y="469" width="0.2" height="15.0" fill="rgb(221,207,32)" rx="2" ry="2" />
<text  x="26.38" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="1094.3" y="389" width="0.5" height="15.0" fill="rgb(212,24,29)" rx="2" ry="2" />
<text  x="1097.31" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%)</title><rect x="944.2" y="357" width="1.4" height="15.0" fill="rgb(214,58,37)" rx="2" ry="2" />
<text  x="947.20" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="667.1" y="405" width="0.7" height="15.0" fill="rgb(247,48,22)" rx="2" ry="2" />
<text  x="670.12" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%)</title><rect x="721.5" y="501" width="0.5" height="15.0" fill="rgb(209,9,26)" rx="2" ry="2" />
<text  x="724.54" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;::pair (1 samples, 0.02%)</title><rect x="113.6" y="277" width="0.3" height="15.0" fill="rgb(251,88,29)" rx="2" ry="2" />
<text  x="116.62" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="936.0" y="405" width="0.3" height="15.0" fill="rgb(230,182,15)" rx="2" ry="2" />
<text  x="939.04" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="80.1" y="325" width="0.2" height="15.0" fill="rgb(215,228,26)" rx="2" ry="2" />
<text  x="83.07" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (10 samples, 0.19%)</title><rect x="209.3" y="197" width="2.3" height="15.0" fill="rgb(209,69,3)" rx="2" ry="2" />
<text  x="212.31" y="207.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="156.7" y="437" width="0.2" height="15.0" fill="rgb(250,173,28)" rx="2" ry="2" />
<text  x="159.71" y="447.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (15 samples, 0.29%)</title><rect x="74.2" y="421" width="3.4" height="15.0" fill="rgb(220,0,14)" rx="2" ry="2" />
<text  x="77.17" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="720.6" y="485" width="0.3" height="15.0" fill="rgb(214,185,47)" rx="2" ry="2" />
<text  x="723.63" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="67.8" y="261" width="0.2" height="15.0" fill="rgb(219,171,37)" rx="2" ry="2" />
<text  x="70.82" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (60 samples, 1.15%)</title><rect x="190.0" y="293" width="13.6" height="15.0" fill="rgb(210,223,3)" rx="2" ry="2" />
<text  x="193.04" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="63.3" y="85" width="0.2" height="15.0" fill="rgb(252,50,24)" rx="2" ry="2" />
<text  x="66.29" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="825.4" y="293" width="1.1" height="15.0" fill="rgb(251,6,45)" rx="2" ry="2" />
<text  x="828.39" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%)</title><rect x="81.2" y="421" width="0.5" height="15.0" fill="rgb(206,170,46)" rx="2" ry="2" />
<text  x="84.20" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="694.3" y="469" width="0.5" height="15.0" fill="rgb(216,13,39)" rx="2" ry="2" />
<text  x="697.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (60 samples, 1.15%)</title><rect x="317.0" y="357" width="13.6" height="15.0" fill="rgb(241,201,20)" rx="2" ry="2" />
<text  x="320.02" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (6 samples, 0.12%)</title><rect x="585.5" y="309" width="1.3" height="15.0" fill="rgb(249,0,33)" rx="2" ry="2" />
<text  x="588.49" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="702.0" y="453" width="0.3" height="15.0" fill="rgb(222,57,38)" rx="2" ry="2" />
<text  x="705.04" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="63.3" y="117" width="0.2" height="15.0" fill="rgb(210,3,49)" rx="2" ry="2" />
<text  x="66.29" y="127.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="791.1" y="245" width="0.5" height="15.0" fill="rgb(253,221,48)" rx="2" ry="2" />
<text  x="794.15" y="255.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.17%)</title><rect x="426.3" y="165" width="2.1" height="15.0" fill="rgb(245,61,36)" rx="2" ry="2" />
<text  x="429.31" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="10.9" y="517" width="3.2" height="15.0" fill="rgb(218,34,4)" rx="2" ry="2" />
<text  x="13.91" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%)</title><rect x="887.3" y="421" width="0.4" height="15.0" fill="rgb(242,115,13)" rx="2" ry="2" />
<text  x="890.29" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (46 samples, 0.88%)</title><rect x="710.0" y="469" width="10.4" height="15.0" fill="rgb(237,98,32)" rx="2" ry="2" />
<text  x="712.97" y="479.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%)</title><rect x="759.6" y="405" width="0.3" height="15.0" fill="rgb(234,107,14)" rx="2" ry="2" />
<text  x="762.63" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%)</title><rect x="1036.7" y="261" width="0.5" height="15.0" fill="rgb(240,2,0)" rx="2" ry="2" />
<text  x="1039.72" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%)</title><rect x="837.4" y="389" width="1.4" height="15.0" fill="rgb(231,23,12)" rx="2" ry="2" />
<text  x="840.41" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;__gnu_cxx::__normal_iterator&lt;global_schema_ptr*, std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt; &gt;, db::schema_tables::merge_tables_and_views (1 samples, 0.02%)</title><rect x="114.1" y="309" width="0.2" height="15.0" fill="rgb(234,20,15)" rx="2" ry="2" />
<text  x="117.08" y="319.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (2 samples, 0.04%)</title><rect x="50.8" y="325" width="0.5" height="15.0" fill="rgb(210,85,5)" rx="2" ry="2" />
<text  x="53.81" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="50.4" y="197" width="0.2" height="15.0" fill="rgb(207,130,37)" rx="2" ry="2" />
<text  x="53.36" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="639.5" y="373" width="0.2" height="15.0" fill="rgb(226,121,53)" rx="2" ry="2" />
<text  x="642.45" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%)</title><rect x="624.9" y="437" width="0.9" height="15.0" fill="rgb(248,105,29)" rx="2" ry="2" />
<text  x="627.94" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="40.4" y="245" width="0.2" height="15.0" fill="rgb(227,138,51)" rx="2" ry="2" />
<text  x="43.38" y="255.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="65.6" y="341" width="0.2" height="15.0" fill="rgb(230,189,37)" rx="2" ry="2" />
<text  x="68.55" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="902.9" y="293" width="0.3" height="15.0" fill="rgb(218,145,54)" rx="2" ry="2" />
<text  x="905.94" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.0" y="245" width="0.2" height="15.0" fill="rgb(254,10,47)" rx="2" ry="2" />
<text  x="873.96" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="54.2" y="293" width="0.7" height="15.0" fill="rgb(237,27,39)" rx="2" ry="2" />
<text  x="57.22" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="330.8" y="357" width="0.7" height="15.0" fill="rgb(252,213,10)" rx="2" ry="2" />
<text  x="333.85" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="659.4" y="357" width="0.2" height="15.0" fill="rgb(222,75,53)" rx="2" ry="2" />
<text  x="662.41" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="358.7" y="165" width="0.3" height="15.0" fill="rgb(215,188,28)" rx="2" ry="2" />
<text  x="361.74" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="863.0" y="437" width="0.3" height="15.0" fill="rgb(209,107,4)" rx="2" ry="2" />
<text  x="866.03" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="51.9" y="133" width="0.3" height="15.0" fill="rgb(245,177,28)" rx="2" ry="2" />
<text  x="54.95" y="143.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="1139.2" y="485" width="0.2" height="15.0" fill="rgb(213,9,17)" rx="2" ry="2" />
<text  x="1142.21" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="100.5" y="485" width="0.2" height="15.0" fill="rgb(252,50,31)" rx="2" ry="2" />
<text  x="103.47" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="988.6" y="277" width="0.3" height="15.0" fill="rgb(246,169,13)" rx="2" ry="2" />
<text  x="991.65" y="287.5" ></text>
</g>
<g >
<title>posix_memalign (13 samples, 0.25%)</title><rect x="246.3" y="53" width="2.9" height="15.0" fill="rgb(230,161,2)" rx="2" ry="2" />
<text  x="249.27" y="63.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (37 samples, 0.71%)</title><rect x="568.3" y="421" width="8.3" height="15.0" fill="rgb(233,57,51)" rx="2" ry="2" />
<text  x="571.26" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="935.8" y="405" width="0.2" height="15.0" fill="rgb(223,62,30)" rx="2" ry="2" />
<text  x="938.81" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1138.5" y="325" width="0.3" height="15.0" fill="rgb(208,99,7)" rx="2" ry="2" />
<text  x="1141.53" y="335.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (1 samples, 0.02%)</title><rect x="114.5" y="341" width="0.3" height="15.0" fill="rgb(235,212,1)" rx="2" ry="2" />
<text  x="117.53" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (58 samples, 1.11%)</title><rect x="896.6" y="373" width="13.1" height="15.0" fill="rgb(250,72,0)" rx="2" ry="2" />
<text  x="899.59" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="682.3" y="485" width="0.2" height="15.0" fill="rgb(219,173,3)" rx="2" ry="2" />
<text  x="685.31" y="495.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (13 samples, 0.25%)</title><rect x="557.6" y="293" width="2.9" height="15.0" fill="rgb(234,214,41)" rx="2" ry="2" />
<text  x="560.60" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="197.1" y="245" width="0.2" height="15.0" fill="rgb(213,208,24)" rx="2" ry="2" />
<text  x="200.07" y="255.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.19%)</title><rect x="47.2" y="341" width="2.3" height="15.0" fill="rgb(220,218,19)" rx="2" ry="2" />
<text  x="50.19" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (10 samples, 0.19%)</title><rect x="357.2" y="181" width="2.2" height="15.0" fill="rgb(232,49,21)" rx="2" ry="2" />
<text  x="360.15" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="57.4" y="309" width="0.4" height="15.0" fill="rgb(248,80,51)" rx="2" ry="2" />
<text  x="60.39" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="87.8" y="373" width="0.2" height="15.0" fill="rgb(244,169,6)" rx="2" ry="2" />
<text  x="90.77" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="595.9" y="293" width="0.5" height="15.0" fill="rgb(240,171,52)" rx="2" ry="2" />
<text  x="598.92" y="303.5" ></text>
</g>
<g >
<title>[[vdso]] (20 samples, 0.38%)</title><rect x="1171.0" y="613" width="4.5" height="15.0" fill="rgb(213,194,32)" rx="2" ry="2" />
<text  x="1173.95" y="623.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (41 samples, 0.79%)</title><rect x="912.9" y="389" width="9.3" height="15.0" fill="rgb(243,142,40)" rx="2" ry="2" />
<text  x="915.91" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%)</title><rect x="754.4" y="277" width="0.5" height="15.0" fill="rgb(231,126,44)" rx="2" ry="2" />
<text  x="757.42" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="907.2" y="309" width="0.3" height="15.0" fill="rgb(227,228,45)" rx="2" ry="2" />
<text  x="910.24" y="319.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.13%)</title><rect x="24.5" y="517" width="1.6" height="15.0" fill="rgb(242,112,35)" rx="2" ry="2" />
<text  x="27.51" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="864.4" y="485" width="0.4" height="15.0" fill="rgb(242,193,4)" rx="2" ry="2" />
<text  x="867.39" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (3 samples, 0.06%)</title><rect x="85.3" y="325" width="0.7" height="15.0" fill="rgb(241,121,13)" rx="2" ry="2" />
<text  x="88.28" y="335.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (276 samples, 5.30%)</title><rect x="484.6" y="341" width="62.6" height="15.0" fill="rgb(219,145,46)" rx="2" ry="2" />
<text  x="487.58" y="351.5" >memtab..</text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (10 samples, 0.19%)</title><rect x="952.6" y="405" width="2.3" height="15.0" fill="rgb(206,64,5)" rx="2" ry="2" />
<text  x="955.59" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="66.9" y="101" width="0.2" height="15.0" fill="rgb(247,159,41)" rx="2" ry="2" />
<text  x="69.91" y="111.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="529.7" y="261" width="0.2" height="15.0" fill="rgb(222,129,23)" rx="2" ry="2" />
<text  x="532.71" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1115.4" y="421" width="0.5" height="15.0" fill="rgb(252,206,0)" rx="2" ry="2" />
<text  x="1118.40" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="783.0" y="309" width="0.4" height="15.0" fill="rgb(215,175,14)" rx="2" ry="2" />
<text  x="785.99" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="839.4" y="437" width="0.3" height="15.0" fill="rgb(229,158,46)" rx="2" ry="2" />
<text  x="842.45" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (11 samples, 0.21%)</title><rect x="246.7" y="37" width="2.5" height="15.0" fill="rgb(214,8,30)" rx="2" ry="2" />
<text  x="249.73" y="47.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,768 samples, 91.62%)</title><rect x="88.5" y="549" width="1081.1" height="15.0" fill="rgb(229,63,35)" rx="2" ry="2" />
<text  x="91.46" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="130.4" y="405" width="0.5" height="15.0" fill="rgb(219,22,28)" rx="2" ry="2" />
<text  x="133.40" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.1" y="229" width="0.2" height="15.0" fill="rgb(246,201,5)" rx="2" ry="2" />
<text  x="49.05" y="239.5" ></text>
</g>
<g >
<title>main (4,769 samples, 91.64%)</title><rect x="88.5" y="613" width="1081.3" height="15.0" fill="rgb(211,148,1)" rx="2" ry="2" />
<text  x="91.46" y="623.5" >main</text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="54.4" y="117" width="0.5" height="15.0" fill="rgb(232,126,2)" rx="2" ry="2" />
<text  x="57.44" y="127.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="537.9" y="213" width="0.2" height="15.0" fill="rgb(254,177,18)" rx="2" ry="2" />
<text  x="540.87" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="60.3" y="261" width="0.3" height="15.0" fill="rgb(208,38,27)" rx="2" ry="2" />
<text  x="63.34" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="1142.6" y="485" width="0.9" height="15.0" fill="rgb(252,101,13)" rx="2" ry="2" />
<text  x="1145.61" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="12.3" y="325" width="0.4" height="15.0" fill="rgb(253,143,22)" rx="2" ry="2" />
<text  x="15.27" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="287.5" y="165" width="1.2" height="15.0" fill="rgb(233,220,42)" rx="2" ry="2" />
<text  x="290.54" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1127.6" y="197" width="0.3" height="15.0" fill="rgb(244,200,17)" rx="2" ry="2" />
<text  x="1130.64" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.12%)</title><rect x="433.3" y="229" width="1.4" height="15.0" fill="rgb(235,3,29)" rx="2" ry="2" />
<text  x="436.34" y="239.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="515.6" y="213" width="0.3" height="15.0" fill="rgb(218,166,31)" rx="2" ry="2" />
<text  x="518.65" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (9 samples, 0.17%)</title><rect x="752.8" y="309" width="2.1" height="15.0" fill="rgb(211,39,42)" rx="2" ry="2" />
<text  x="755.83" y="319.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%)</title><rect x="1078.7" y="309" width="0.2" height="15.0" fill="rgb(254,96,39)" rx="2" ry="2" />
<text  x="1081.67" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="815.2" y="309" width="0.7" height="15.0" fill="rgb(207,88,19)" rx="2" ry="2" />
<text  x="818.18" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (8 samples, 0.15%)</title><rect x="268.7" y="165" width="1.8" height="15.0" fill="rgb(205,20,20)" rx="2" ry="2" />
<text  x="271.72" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="81.4" y="357" width="0.3" height="15.0" fill="rgb(231,43,2)" rx="2" ry="2" />
<text  x="84.43" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="23.4" y="405" width="0.2" height="15.0" fill="rgb(233,143,14)" rx="2" ry="2" />
<text  x="26.38" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (24 samples, 0.46%)</title><rect x="15.9" y="613" width="5.4" height="15.0" fill="rgb(212,21,45)" rx="2" ry="2" />
<text  x="18.90" y="623.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (9 samples, 0.17%)</title><rect x="771.4" y="389" width="2.1" height="15.0" fill="rgb(234,164,19)" rx="2" ry="2" />
<text  x="774.42" y="399.5" ></text>
</g>
<g >
<title>table::make_reader (452 samples, 8.69%)</title><rect x="460.1" y="357" width="102.5" height="15.0" fill="rgb(213,150,40)" rx="2" ry="2" />
<text  x="463.10" y="367.5" >table::make_..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (32 samples, 0.61%)</title><rect x="1151.2" y="469" width="7.3" height="15.0" fill="rgb(222,172,2)" rx="2" ry="2" />
<text  x="1154.23" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="227.7" y="133" width="0.7" height="15.0" fill="rgb(252,132,33)" rx="2" ry="2" />
<text  x="230.68" y="143.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="58.5" y="277" width="0.3" height="15.0" fill="rgb(234,130,24)" rx="2" ry="2" />
<text  x="61.52" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="814.1" y="325" width="0.2" height="15.0" fill="rgb(238,74,49)" rx="2" ry="2" />
<text  x="817.05" y="335.5" ></text>
</g>
<g >
<title>sstables::sstable::make_component_file_writer (1 samples, 0.02%)</title><rect x="88.0" y="373" width="0.2" height="15.0" fill="rgb(239,180,3)" rx="2" ry="2" />
<text  x="91.00" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="63.3" y="181" width="0.2" height="15.0" fill="rgb(232,125,50)" rx="2" ry="2" />
<text  x="66.29" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="10.7" y="341" width="0.2" height="15.0" fill="rgb(245,100,31)" rx="2" ry="2" />
<text  x="13.68" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="66.7" y="277" width="0.2" height="15.0" fill="rgb(212,134,24)" rx="2" ry="2" />
<text  x="69.69" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%)</title><rect x="1135.4" y="277" width="3.1" height="15.0" fill="rgb(226,211,31)" rx="2" ry="2" />
<text  x="1138.35" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="87.8" y="149" width="0.2" height="15.0" fill="rgb(231,116,51)" rx="2" ry="2" />
<text  x="90.77" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (54 samples, 1.04%)</title><rect x="1148.3" y="485" width="12.2" height="15.0" fill="rgb(238,35,30)" rx="2" ry="2" />
<text  x="1151.28" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (79 samples, 1.52%)</title><rect x="410.9" y="197" width="17.9" height="15.0" fill="rgb(253,121,40)" rx="2" ry="2" />
<text  x="413.89" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (4 samples, 0.08%)</title><rect x="877.1" y="469" width="0.9" height="15.0" fill="rgb(207,199,27)" rx="2" ry="2" />
<text  x="880.09" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (3 samples, 0.06%)</title><rect x="333.3" y="389" width="0.7" height="15.0" fill="rgb(241,162,31)" rx="2" ry="2" />
<text  x="336.34" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="830.4" y="277" width="0.4" height="15.0" fill="rgb(222,223,4)" rx="2" ry="2" />
<text  x="833.38" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="363.5" y="197" width="0.5" height="15.0" fill="rgb(223,154,5)" rx="2" ry="2" />
<text  x="366.50" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%)</title><rect x="912.9" y="373" width="1.4" height="15.0" fill="rgb(213,64,6)" rx="2" ry="2" />
<text  x="915.91" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="26.8" y="357" width="0.2" height="15.0" fill="rgb(231,109,31)" rx="2" ry="2" />
<text  x="29.78" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="14.3" y="437" width="0.2" height="15.0" fill="rgb(239,14,4)" rx="2" ry="2" />
<text  x="17.31" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="53.8" y="149" width="0.2" height="15.0" fill="rgb(245,72,17)" rx="2" ry="2" />
<text  x="56.76" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.5" y="277" width="0.2" height="15.0" fill="rgb(222,190,52)" rx="2" ry="2" />
<text  x="88.51" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="66.9" y="277" width="0.2" height="15.0" fill="rgb(244,122,47)" rx="2" ry="2" />
<text  x="69.91" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="678.9" y="469" width="0.5" height="15.0" fill="rgb(230,94,31)" rx="2" ry="2" />
<text  x="681.91" y="479.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="76.7" y="357" width="0.2" height="15.0" fill="rgb(228,193,29)" rx="2" ry="2" />
<text  x="79.66" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="715.2" y="405" width="0.2" height="15.0" fill="rgb(212,157,3)" rx="2" ry="2" />
<text  x="718.19" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (4 samples, 0.08%)</title><rect x="538.8" y="229" width="0.9" height="15.0" fill="rgb(218,177,34)" rx="2" ry="2" />
<text  x="541.78" y="239.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="23.8" y="501" width="0.3" height="15.0" fill="rgb(231,44,47)" rx="2" ry="2" />
<text  x="26.83" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (7 samples, 0.13%)</title><rect x="102.7" y="453" width="1.6" height="15.0" fill="rgb(249,178,5)" rx="2" ry="2" />
<text  x="105.74" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="520.2" y="277" width="0.4" height="15.0" fill="rgb(248,27,25)" rx="2" ry="2" />
<text  x="523.18" y="287.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (13 samples, 0.25%)</title><rect x="478.9" y="293" width="3.0" height="15.0" fill="rgb(218,109,30)" rx="2" ry="2" />
<text  x="481.92" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (684 samples, 13.14%)</title><rect x="178.2" y="373" width="155.1" height="15.0" fill="rgb(224,184,54)" rx="2" ry="2" />
<text  x="181.25" y="383.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="844.0" y="373" width="0.4" height="15.0" fill="rgb(253,0,40)" rx="2" ry="2" />
<text  x="846.98" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (37 samples, 0.71%)</title><rect x="73.9" y="437" width="8.4" height="15.0" fill="rgb(220,189,54)" rx="2" ry="2" />
<text  x="76.94" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="149" width="0.2" height="15.0" fill="rgb(216,39,26)" rx="2" ry="2" />
<text  x="64.02" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (11 samples, 0.21%)</title><rect x="104.6" y="469" width="2.4" height="15.0" fill="rgb(221,45,17)" rx="2" ry="2" />
<text  x="107.55" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="114.8" y="245" width="0.2" height="15.0" fill="rgb(211,159,38)" rx="2" ry="2" />
<text  x="117.76" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%)</title><rect x="663.3" y="469" width="0.2" height="15.0" fill="rgb(232,119,28)" rx="2" ry="2" />
<text  x="666.26" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (2 samples, 0.04%)</title><rect x="66.7" y="325" width="0.4" height="15.0" fill="rgb(233,137,49)" rx="2" ry="2" />
<text  x="69.69" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="909.3" y="309" width="0.4" height="15.0" fill="rgb(229,92,34)" rx="2" ry="2" />
<text  x="912.29" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureISt5tupleIJEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSB_ONS_12future_stateIS5_EEE_clESJ_SK_SN_EUlvE_EEvSJ_SF_ (1 samples, 0.02%)</title><rect x="108.2" y="485" width="0.2" height="15.0" fill="rgb(244,34,9)" rx="2" ry="2" />
<text  x="111.18" y="495.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="23.8" y="453" width="0.3" height="15.0" fill="rgb(220,153,4)" rx="2" ry="2" />
<text  x="26.83" y="463.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (37 samples, 0.71%)</title><rect x="734.2" y="437" width="8.4" height="15.0" fill="rgb(253,82,35)" rx="2" ry="2" />
<text  x="737.24" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="700.7" y="485" width="0.2" height="15.0" fill="rgb(251,58,20)" rx="2" ry="2" />
<text  x="703.68" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="695.7" y="437" width="0.9" height="15.0" fill="rgb(233,219,47)" rx="2" ry="2" />
<text  x="698.69" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="44.0" y="261" width="0.2" height="15.0" fill="rgb(236,63,14)" rx="2" ry="2" />
<text  x="47.01" y="271.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (7 samples, 0.13%)</title><rect x="1148.7" y="453" width="1.6" height="15.0" fill="rgb(229,18,19)" rx="2" ry="2" />
<text  x="1151.73" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (10 samples, 0.19%)</title><rect x="278.5" y="181" width="2.2" height="15.0" fill="rgb(214,187,50)" rx="2" ry="2" />
<text  x="281.47" y="191.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="796.1" y="149" width="0.9" height="15.0" fill="rgb(232,7,7)" rx="2" ry="2" />
<text  x="799.14" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (4 samples, 0.08%)</title><rect x="944.7" y="341" width="0.9" height="15.0" fill="rgb(254,72,15)" rx="2" ry="2" />
<text  x="947.66" y="351.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (53 samples, 1.02%)</title><rect x="842.4" y="437" width="12.0" height="15.0" fill="rgb(234,175,46)" rx="2" ry="2" />
<text  x="845.39" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%)</title><rect x="944.2" y="373" width="1.8" height="15.0" fill="rgb(237,162,1)" rx="2" ry="2" />
<text  x="947.20" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="913.8" y="357" width="0.5" height="15.0" fill="rgb(222,221,2)" rx="2" ry="2" />
<text  x="916.82" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="62.2" y="165" width="0.6" height="15.0" fill="rgb(251,43,41)" rx="2" ry="2" />
<text  x="65.15" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="48.3" y="213" width="0.2" height="15.0" fill="rgb(210,193,4)" rx="2" ry="2" />
<text  x="51.32" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="68.3" y="85" width="0.2" height="15.0" fill="rgb(221,90,50)" rx="2" ry="2" />
<text  x="71.27" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="469.6" y="245" width="0.2" height="15.0" fill="rgb(254,133,10)" rx="2" ry="2" />
<text  x="472.62" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="703.4" y="437" width="0.2" height="15.0" fill="rgb(213,143,13)" rx="2" ry="2" />
<text  x="706.40" y="447.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (5 samples, 0.10%)</title><rect x="399.3" y="149" width="1.2" height="15.0" fill="rgb(240,102,53)" rx="2" ry="2" />
<text  x="402.33" y="159.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.23%)</title><rect x="727.2" y="469" width="2.7" height="15.0" fill="rgb(219,73,22)" rx="2" ry="2" />
<text  x="730.21" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (3 samples, 0.06%)</title><rect x="440.6" y="213" width="0.7" height="15.0" fill="rgb(210,13,36)" rx="2" ry="2" />
<text  x="443.60" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="59.9" y="277" width="0.7" height="15.0" fill="rgb(222,125,27)" rx="2" ry="2" />
<text  x="62.88" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="656.0" y="501" width="0.2" height="15.0" fill="rgb(238,153,40)" rx="2" ry="2" />
<text  x="659.01" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1154.2" y="389" width="0.2" height="15.0" fill="rgb(207,26,27)" rx="2" ry="2" />
<text  x="1157.17" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="68.3" y="101" width="0.2" height="15.0" fill="rgb(237,38,51)" rx="2" ry="2" />
<text  x="71.27" y="111.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="68.0" y="245" width="0.3" height="15.0" fill="rgb(237,95,47)" rx="2" ry="2" />
<text  x="71.05" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="106.8" y="453" width="0.2" height="15.0" fill="rgb(218,88,20)" rx="2" ry="2" />
<text  x="109.82" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="818.4" y="309" width="0.2" height="15.0" fill="rgb(232,116,26)" rx="2" ry="2" />
<text  x="821.36" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="614.7" y="389" width="0.7" height="15.0" fill="rgb(220,78,3)" rx="2" ry="2" />
<text  x="617.74" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="482.3" y="309" width="0.2" height="15.0" fill="rgb(239,185,54)" rx="2" ry="2" />
<text  x="485.32" y="319.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%)</title><rect x="699.1" y="437" width="0.2" height="15.0" fill="rgb(237,91,7)" rx="2" ry="2" />
<text  x="702.09" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="61.9" y="261" width="0.3" height="15.0" fill="rgb(228,92,19)" rx="2" ry="2" />
<text  x="64.93" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (547 samples, 10.51%)</title><rect x="184.4" y="325" width="124.0" height="15.0" fill="rgb(224,222,3)" rx="2" ry="2" />
<text  x="187.37" y="335.5" >mutation_reader..</text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::begin (1 samples, 0.02%)</title><rect x="28.6" y="341" width="0.2" height="15.0" fill="rgb(216,23,8)" rx="2" ry="2" />
<text  x="31.59" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="841.0" y="437" width="0.3" height="15.0" fill="rgb(224,33,18)" rx="2" ry="2" />
<text  x="844.03" y="447.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="159.0" y="437" width="0.7" height="15.0" fill="rgb(238,189,31)" rx="2" ry="2" />
<text  x="161.97" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (14 samples, 0.27%)</title><rect x="74.2" y="405" width="3.1" height="15.0" fill="rgb(251,192,26)" rx="2" ry="2" />
<text  x="77.17" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="901.8" y="293" width="0.2" height="15.0" fill="rgb(239,48,46)" rx="2" ry="2" />
<text  x="904.80" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%)</title><rect x="31.1" y="197" width="0.2" height="15.0" fill="rgb(231,16,34)" rx="2" ry="2" />
<text  x="34.09" y="207.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%)</title><rect x="698.4" y="293" width="0.2" height="15.0" fill="rgb(246,137,20)" rx="2" ry="2" />
<text  x="701.41" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="59.9" y="261" width="0.2" height="15.0" fill="rgb(224,177,9)" rx="2" ry="2" />
<text  x="62.88" y="271.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (4 samples, 0.08%)</title><rect x="77.6" y="389" width="0.9" height="15.0" fill="rgb(217,10,37)" rx="2" ry="2" />
<text  x="80.57" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (512 samples, 9.84%)</title><rect x="335.8" y="373" width="116.1" height="15.0" fill="rgb(241,96,46)" rx="2" ry="2" />
<text  x="338.84" y="383.5" >flat_mutation_..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="866.4" y="309" width="0.3" height="15.0" fill="rgb(224,224,8)" rx="2" ry="2" />
<text  x="869.43" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (4 samples, 0.08%)</title><rect x="606.8" y="389" width="0.9" height="15.0" fill="rgb(240,127,47)" rx="2" ry="2" />
<text  x="609.80" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="864.4" y="357" width="0.2" height="15.0" fill="rgb(217,62,17)" rx="2" ry="2" />
<text  x="867.39" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (8 samples, 0.15%)</title><rect x="55.3" y="293" width="1.9" height="15.0" fill="rgb(225,180,31)" rx="2" ry="2" />
<text  x="58.35" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="845.8" y="405" width="0.2" height="15.0" fill="rgb(224,117,25)" rx="2" ry="2" />
<text  x="848.80" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="60.6" y="229" width="0.2" height="15.0" fill="rgb(241,9,41)" rx="2" ry="2" />
<text  x="63.56" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="451.7" y="357" width="0.2" height="15.0" fill="rgb(217,187,11)" rx="2" ry="2" />
<text  x="454.71" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="53.5" y="277" width="0.5" height="15.0" fill="rgb(213,65,19)" rx="2" ry="2" />
<text  x="56.54" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="797.7" y="197" width="0.3" height="15.0" fill="rgb(231,36,33)" rx="2" ry="2" />
<text  x="800.72" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.2" y="245" width="0.2" height="15.0" fill="rgb(239,141,19)" rx="2" ry="2" />
<text  x="55.18" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="794.6" y="213" width="0.2" height="15.0" fill="rgb(245,104,38)" rx="2" ry="2" />
<text  x="797.55" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1059.2" y="293" width="0.4" height="15.0" fill="rgb(243,36,25)" rx="2" ry="2" />
<text  x="1062.17" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.10%)</title><rect x="313.6" y="325" width="1.2" height="15.0" fill="rgb(250,27,39)" rx="2" ry="2" />
<text  x="316.62" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="671.2" y="437" width="0.5" height="15.0" fill="rgb(237,16,45)" rx="2" ry="2" />
<text  x="674.20" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="454.9" y="373" width="0.2" height="15.0" fill="rgb(217,216,6)" rx="2" ry="2" />
<text  x="457.88" y="383.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%)</title><rect x="77.3" y="389" width="0.3" height="15.0" fill="rgb(206,24,21)" rx="2" ry="2" />
<text  x="80.34" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (41 samples, 0.79%)</title><rect x="73.5" y="453" width="9.3" height="15.0" fill="rgb(213,178,21)" rx="2" ry="2" />
<text  x="76.49" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="772.1" y="341" width="1.4" height="15.0" fill="rgb(214,118,35)" rx="2" ry="2" />
<text  x="775.10" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="992.7" y="293" width="0.3" height="15.0" fill="rgb(237,18,2)" rx="2" ry="2" />
<text  x="995.73" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_set_pi_first_clustering (1 samples, 0.02%)</title><rect x="12.7" y="405" width="0.2" height="15.0" fill="rgb(241,153,40)" rx="2" ry="2" />
<text  x="15.72" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (10 samples, 0.19%)</title><rect x="298.7" y="245" width="2.2" height="15.0" fill="rgb(219,161,23)" rx="2" ry="2" />
<text  x="301.65" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1024.2" y="149" width="0.3" height="15.0" fill="rgb(251,225,18)" rx="2" ry="2" />
<text  x="1027.25" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="654.2" y="485" width="0.2" height="15.0" fill="rgb(246,139,20)" rx="2" ry="2" />
<text  x="657.19" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="73.3" y="405" width="0.2" height="15.0" fill="rgb(226,42,17)" rx="2" ry="2" />
<text  x="76.26" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%)</title><rect x="78.3" y="373" width="0.2" height="15.0" fill="rgb(247,137,52)" rx="2" ry="2" />
<text  x="81.25" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="52.9" y="117" width="0.4" height="15.0" fill="rgb(253,90,1)" rx="2" ry="2" />
<text  x="55.86" y="127.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="528.1" y="261" width="0.2" height="15.0" fill="rgb(215,142,31)" rx="2" ry="2" />
<text  x="531.12" y="271.5" ></text>
</g>
<g >
<title>do_parse_schema_tables (1 samples, 0.02%)</title><rect x="87.8" y="245" width="0.2" height="15.0" fill="rgb(209,14,8)" rx="2" ry="2" />
<text  x="90.77" y="255.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,211 samples, 23.27%)</title><rect x="864.8" y="501" width="274.6" height="15.0" fill="rgb(240,162,2)" rx="2" ry="2" />
<text  x="867.84" y="511.5" >seastar::lambda_task&lt;seastar::execut..</text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="700.0" y="293" width="0.2" height="15.0" fill="rgb(211,87,31)" rx="2" ry="2" />
<text  x="703.00" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="852.6" y="357" width="0.5" height="15.0" fill="rgb(252,12,42)" rx="2" ry="2" />
<text  x="855.60" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="803.6" y="133" width="0.7" height="15.0" fill="rgb(218,208,34)" rx="2" ry="2" />
<text  x="806.62" y="143.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (42 samples, 0.81%)</title><rect x="133.4" y="437" width="9.5" height="15.0" fill="rgb(235,56,24)" rx="2" ry="2" />
<text  x="136.35" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%)</title><rect x="720.0" y="453" width="0.4" height="15.0" fill="rgb(205,43,24)" rx="2" ry="2" />
<text  x="722.95" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="265.3" y="165" width="0.2" height="15.0" fill="rgb(228,85,26)" rx="2" ry="2" />
<text  x="268.32" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="52.9" y="213" width="0.4" height="15.0" fill="rgb(214,21,22)" rx="2" ry="2" />
<text  x="55.86" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="87.8" y="517" width="0.2" height="15.0" fill="rgb(250,72,44)" rx="2" ry="2" />
<text  x="90.77" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (2 samples, 0.04%)</title><rect x="114.3" y="437" width="0.5" height="15.0" fill="rgb(245,147,51)" rx="2" ry="2" />
<text  x="117.30" y="447.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1129.5" y="181" width="0.2" height="15.0" fill="rgb(247,59,36)" rx="2" ry="2" />
<text  x="1132.46" y="191.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="329.3" y="309" width="0.2" height="15.0" fill="rgb(220,11,39)" rx="2" ry="2" />
<text  x="332.26" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="1090.0" y="405" width="1.1" height="15.0" fill="rgb(243,38,23)" rx="2" ry="2" />
<text  x="1093.00" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="578.9" y="421" width="0.2" height="15.0" fill="rgb(249,142,49)" rx="2" ry="2" />
<text  x="581.91" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (3 samples, 0.06%)</title><rect x="1168.9" y="517" width="0.7" height="15.0" fill="rgb(253,128,40)" rx="2" ry="2" />
<text  x="1171.91" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="71.7" y="373" width="0.2" height="15.0" fill="rgb(211,96,22)" rx="2" ry="2" />
<text  x="74.68" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::reactor::task_queue, unsigned int&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, float&amp;&gt; (1 samples, 0.02%)</title><rect x="117.0" y="421" width="0.3" height="15.0" fill="rgb(205,54,36)" rx="2" ry="2" />
<text  x="120.03" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="51.7" y="229" width="0.5" height="15.0" fill="rgb(238,4,21)" rx="2" ry="2" />
<text  x="54.72" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="628.3" y="437" width="0.3" height="15.0" fill="rgb(208,160,50)" rx="2" ry="2" />
<text  x="631.34" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="871.2" y="229" width="0.2" height="15.0" fill="rgb(242,75,50)" rx="2" ry="2" />
<text  x="874.19" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (30 samples, 0.58%)</title><rect x="435.4" y="229" width="6.8" height="15.0" fill="rgb(218,126,32)" rx="2" ry="2" />
<text  x="438.38" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1131.3" y="213" width="0.2" height="15.0" fill="rgb(240,33,44)" rx="2" ry="2" />
<text  x="1134.27" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="23.6" y="373" width="0.2" height="15.0" fill="rgb(223,126,6)" rx="2" ry="2" />
<text  x="26.60" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="1168.2" y="421" width="0.3" height="15.0" fill="rgb(237,67,44)" rx="2" ry="2" />
<text  x="1171.23" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="685.9" y="453" width="0.3" height="15.0" fill="rgb(247,29,41)" rx="2" ry="2" />
<text  x="688.94" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="66.7" y="229" width="0.2" height="15.0" fill="rgb(229,29,54)" rx="2" ry="2" />
<text  x="69.69" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (8 samples, 0.15%)</title><rect x="939.4" y="357" width="1.9" height="15.0" fill="rgb(213,177,36)" rx="2" ry="2" />
<text  x="942.44" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::writer_of_column (1 samples, 0.02%)</title><rect x="1136.3" y="101" width="0.2" height="15.0" fill="rgb(219,154,9)" rx="2" ry="2" />
<text  x="1139.26" y="111.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%)</title><rect x="866.0" y="325" width="0.4" height="15.0" fill="rgb(216,106,5)" rx="2" ry="2" />
<text  x="868.98" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.9" y="149" width="0.2" height="15.0" fill="rgb(226,54,13)" rx="2" ry="2" />
<text  x="798.91" y="159.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%)</title><rect x="202.3" y="261" width="0.2" height="15.0" fill="rgb(219,224,53)" rx="2" ry="2" />
<text  x="205.28" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="522.2" y="309" width="0.7" height="15.0" fill="rgb(245,203,48)" rx="2" ry="2" />
<text  x="525.23" y="319.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.12%)</title><rect x="1133.3" y="245" width="1.4" height="15.0" fill="rgb(207,68,2)" rx="2" ry="2" />
<text  x="1136.31" y="255.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="12.9" y="389" width="0.7" height="15.0" fill="rgb(235,175,22)" rx="2" ry="2" />
<text  x="15.95" y="399.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (1 samples, 0.02%)</title><rect x="991.8" y="325" width="0.2" height="15.0" fill="rgb(221,150,4)" rx="2" ry="2" />
<text  x="994.82" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (8 samples, 0.15%)</title><rect x="695.5" y="469" width="1.8" height="15.0" fill="rgb(233,4,22)" rx="2" ry="2" />
<text  x="698.46" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1059.6" y="309" width="0.5" height="15.0" fill="rgb(222,24,34)" rx="2" ry="2" />
<text  x="1062.62" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="1100.0" y="389" width="1.1" height="15.0" fill="rgb(239,152,10)" rx="2" ry="2" />
<text  x="1102.98" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.2" y="517" width="0.3" height="15.0" fill="rgb(241,28,28)" rx="2" ry="2" />
<text  x="13.23" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (54 samples, 1.04%)</title><rect x="1020.2" y="245" width="12.2" height="15.0" fill="rgb(214,134,33)" rx="2" ry="2" />
<text  x="1023.17" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, read_context::stop (3 samples, 0.06%)</title><rect x="114.8" y="293" width="0.6" height="15.0" fill="rgb(245,106,50)" rx="2" ry="2" />
<text  x="117.76" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;unsigned long&amp;, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; (1 samples, 0.02%)</title><rect x="1138.3" y="165" width="0.2" height="15.0" fill="rgb(209,130,11)" rx="2" ry="2" />
<text  x="1141.30" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="611.3" y="421" width="0.9" height="15.0" fill="rgb(221,218,38)" rx="2" ry="2" />
<text  x="614.34" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="162.6" y="405" width="0.5" height="15.0" fill="rgb(231,101,16)" rx="2" ry="2" />
<text  x="165.60" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (35 samples, 0.67%)</title><rect x="865.3" y="453" width="7.9" height="15.0" fill="rgb(221,91,38)" rx="2" ry="2" />
<text  x="868.30" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%)</title><rect x="1168.2" y="469" width="0.3" height="15.0" fill="rgb(226,10,35)" rx="2" ry="2" />
<text  x="1171.23" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::build (3 samples, 0.06%)</title><rect x="616.1" y="437" width="0.7" height="15.0" fill="rgb(212,212,26)" rx="2" ry="2" />
<text  x="619.10" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="860.3" y="437" width="0.5" height="15.0" fill="rgb(245,128,43)" rx="2" ry="2" />
<text  x="863.31" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (2 samples, 0.04%)</title><rect x="1169.1" y="485" width="0.5" height="15.0" fill="rgb(231,33,13)" rx="2" ry="2" />
<text  x="1172.14" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1 samples, 0.02%)</title><rect x="114.5" y="389" width="0.3" height="15.0" fill="rgb(207,155,1)" rx="2" ry="2" />
<text  x="117.53" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="435.2" y="229" width="0.2" height="15.0" fill="rgb(247,176,11)" rx="2" ry="2" />
<text  x="438.15" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="475.1" y="261" width="0.2" height="15.0" fill="rgb(221,68,41)" rx="2" ry="2" />
<text  x="478.06" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1046.2" y="309" width="0.3" height="15.0" fill="rgb(207,16,47)" rx="2" ry="2" />
<text  x="1049.24" y="319.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="113.9" y="277" width="0.2" height="15.0" fill="rgb(234,74,29)" rx="2" ry="2" />
<text  x="116.85" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="1132.6" y="293" width="2.8" height="15.0" fill="rgb(206,108,4)" rx="2" ry="2" />
<text  x="1135.63" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="764.8" y="341" width="0.3" height="15.0" fill="rgb(235,229,26)" rx="2" ry="2" />
<text  x="767.85" y="351.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (137 samples, 2.63%)</title><rect x="376.7" y="181" width="31.0" height="15.0" fill="rgb(216,182,25)" rx="2" ry="2" />
<text  x="379.65" y="191.5" >wr..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="66.7" y="197" width="0.2" height="15.0" fill="rgb(214,30,33)" rx="2" ry="2" />
<text  x="69.69" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="329.5" y="325" width="0.2" height="15.0" fill="rgb(205,85,20)" rx="2" ry="2" />
<text  x="332.49" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (2 samples, 0.04%)</title><rect x="108.6" y="501" width="0.5" height="15.0" fill="rgb(208,3,47)" rx="2" ry="2" />
<text  x="111.64" y="511.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="23.8" y="405" width="0.3" height="15.0" fill="rgb(221,87,31)" rx="2" ry="2" />
<text  x="26.83" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="114.1" y="405" width="0.2" height="15.0" fill="rgb(205,104,49)" rx="2" ry="2" />
<text  x="117.08" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (20 samples, 0.38%)</title><rect x="925.4" y="373" width="4.5" height="15.0" fill="rgb(226,194,32)" rx="2" ry="2" />
<text  x="928.38" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="212.0" y="197" width="0.3" height="15.0" fill="rgb(230,21,41)" rx="2" ry="2" />
<text  x="215.03" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (7 samples, 0.13%)</title><rect x="1148.7" y="437" width="1.6" height="15.0" fill="rgb(226,213,3)" rx="2" ry="2" />
<text  x="1151.73" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (32 samples, 0.61%)</title><rect x="1020.6" y="229" width="7.3" height="15.0" fill="rgb(222,164,15)" rx="2" ry="2" />
<text  x="1023.62" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="962.3" y="357" width="1.9" height="15.0" fill="rgb(217,146,29)" rx="2" ry="2" />
<text  x="965.34" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="822.7" y="341" width="0.2" height="15.0" fill="rgb(224,123,42)" rx="2" ry="2" />
<text  x="825.67" y="351.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="192.8" y="277" width="0.2" height="15.0" fill="rgb(232,184,10)" rx="2" ry="2" />
<text  x="195.76" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="68.3" y="149" width="0.2" height="15.0" fill="rgb(247,120,53)" rx="2" ry="2" />
<text  x="71.27" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (22 samples, 0.42%)</title><rect x="435.6" y="213" width="5.0" height="15.0" fill="rgb(230,131,10)" rx="2" ry="2" />
<text  x="438.61" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="279.6" y="133" width="0.2" height="15.0" fill="rgb(253,150,31)" rx="2" ry="2" />
<text  x="282.60" y="143.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="86.4" y="437" width="0.2" height="15.0" fill="rgb(221,158,38)" rx="2" ry="2" />
<text  x="89.41" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="66.9" y="261" width="0.2" height="15.0" fill="rgb(250,172,20)" rx="2" ry="2" />
<text  x="69.91" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="60.1" y="261" width="0.2" height="15.0" fill="rgb(244,25,27)" rx="2" ry="2" />
<text  x="63.11" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="188.2" y="293" width="0.3" height="15.0" fill="rgb(251,15,9)" rx="2" ry="2" />
<text  x="191.22" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="424.0" y="133" width="1.2" height="15.0" fill="rgb(231,97,23)" rx="2" ry="2" />
<text  x="427.04" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1080.7" y="341" width="0.2" height="15.0" fill="rgb(225,9,8)" rx="2" ry="2" />
<text  x="1083.71" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="713.6" y="437" width="0.2" height="15.0" fill="rgb(250,187,11)" rx="2" ry="2" />
<text  x="716.60" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (9 samples, 0.17%)</title><rect x="666.7" y="469" width="2.0" height="15.0" fill="rgb(210,138,0)" rx="2" ry="2" />
<text  x="669.66" y="479.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="12.3" y="245" width="0.4" height="15.0" fill="rgb(232,144,16)" rx="2" ry="2" />
<text  x="15.27" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="451.5" y="357" width="0.2" height="15.0" fill="rgb(207,94,51)" rx="2" ry="2" />
<text  x="454.48" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, query::querier&lt; (1 samples, 0.02%)</title><rect x="699.3" y="501" width="0.2" height="15.0" fill="rgb(206,112,15)" rx="2" ry="2" />
<text  x="702.32" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;partition_snapshot_row_cursor::position_in_version, 2ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="23.2" y="517" width="0.2" height="15.0" fill="rgb(242,226,9)" rx="2" ry="2" />
<text  x="26.15" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="50.4" y="149" width="0.2" height="15.0" fill="rgb(252,142,16)" rx="2" ry="2" />
<text  x="53.36" y="159.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="14.1" y="469" width="0.2" height="15.0" fill="rgb(242,72,0)" rx="2" ry="2" />
<text  x="17.08" y="479.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (2 samples, 0.04%)</title><rect x="373.9" y="181" width="0.5" height="15.0" fill="rgb(245,222,14)" rx="2" ry="2" />
<text  x="376.93" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (1 samples, 0.02%)</title><rect x="1027.2" y="213" width="0.2" height="15.0" fill="rgb(217,6,31)" rx="2" ry="2" />
<text  x="1030.19" y="223.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="116.1" y="437" width="0.2" height="15.0" fill="rgb(245,47,22)" rx="2" ry="2" />
<text  x="119.12" y="447.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="1127.9" y="213" width="0.2" height="15.0" fill="rgb(230,11,31)" rx="2" ry="2" />
<text  x="1130.87" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (19 samples, 0.37%)</title><rect x="827.2" y="325" width="4.3" height="15.0" fill="rgb(211,176,52)" rx="2" ry="2" />
<text  x="830.20" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1121.3" y="405" width="0.2" height="15.0" fill="rgb(248,207,29)" rx="2" ry="2" />
<text  x="1124.30" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="88.0" y="581" width="0.2" height="15.0" fill="rgb(229,35,23)" rx="2" ry="2" />
<text  x="91.00" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="204.1" y="277" width="0.2" height="15.0" fill="rgb(216,154,49)" rx="2" ry="2" />
<text  x="207.10" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="908.2" y="357" width="0.2" height="15.0" fill="rgb(210,201,46)" rx="2" ry="2" />
<text  x="911.15" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="856.5" y="373" width="0.2" height="15.0" fill="rgb(215,150,16)" rx="2" ry="2" />
<text  x="859.45" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="292.8" y="181" width="0.2" height="15.0" fill="rgb(225,97,36)" rx="2" ry="2" />
<text  x="295.76" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%)</title><rect x="828.8" y="293" width="1.3" height="15.0" fill="rgb(220,120,0)" rx="2" ry="2" />
<text  x="831.79" y="303.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="34.7" y="261" width="0.2" height="15.0" fill="rgb(227,79,32)" rx="2" ry="2" />
<text  x="37.72" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (8 samples, 0.15%)</title><rect x="252.6" y="117" width="1.8" height="15.0" fill="rgb(217,215,22)" rx="2" ry="2" />
<text  x="255.62" y="127.5" ></text>
</g>
<g >
<title>db::schema_tables::recalculate_schema_version (1 samples, 0.02%)</title><rect x="23.6" y="453" width="0.2" height="15.0" fill="rgb(238,77,44)" rx="2" ry="2" />
<text  x="26.60" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="333.8" y="373" width="0.2" height="15.0" fill="rgb(254,106,22)" rx="2" ry="2" />
<text  x="336.80" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%)</title><rect x="543.8" y="293" width="0.6" height="15.0" fill="rgb(221,124,9)" rx="2" ry="2" />
<text  x="546.77" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="121.8" y="453" width="0.2" height="15.0" fill="rgb(205,131,12)" rx="2" ry="2" />
<text  x="124.79" y="463.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="629.0" y="421" width="0.3" height="15.0" fill="rgb(223,211,45)" rx="2" ry="2" />
<text  x="632.02" y="431.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="48.3" y="197" width="0.2" height="15.0" fill="rgb(210,87,0)" rx="2" ry="2" />
<text  x="51.32" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="115.7" y="245" width="0.4" height="15.0" fill="rgb(243,153,29)" rx="2" ry="2" />
<text  x="118.66" y="255.5" ></text>
</g>
<g >
<title>query_result_builder::consume (198 samples, 3.80%)</title><rect x="363.5" y="213" width="44.9" height="15.0" fill="rgb(207,223,11)" rx="2" ry="2" />
<text  x="366.50" y="223.5" >quer..</text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="63.5" y="277" width="0.2" height="15.0" fill="rgb(224,181,53)" rx="2" ry="2" />
<text  x="66.51" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="54.0" y="325" width="0.9" height="15.0" fill="rgb(235,226,51)" rx="2" ry="2" />
<text  x="56.99" y="335.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (18 samples, 0.35%)</title><rect x="497.7" y="277" width="4.1" height="15.0" fill="rgb(236,152,19)" rx="2" ry="2" />
<text  x="500.74" y="287.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="43.1" y="245" width="0.2" height="15.0" fill="rgb(251,221,53)" rx="2" ry="2" />
<text  x="46.11" y="255.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (1 samples, 0.02%)</title><rect x="114.1" y="293" width="0.2" height="15.0" fill="rgb(226,80,10)" rx="2" ry="2" />
<text  x="117.08" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (15 samples, 0.29%)</title><rect x="738.5" y="309" width="3.4" height="15.0" fill="rgb(225,119,11)" rx="2" ry="2" />
<text  x="741.54" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (2 samples, 0.04%)</title><rect x="567.1" y="421" width="0.5" height="15.0" fill="rgb(212,4,15)" rx="2" ry="2" />
<text  x="570.12" y="431.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="117.3" y="485" width="0.2" height="15.0" fill="rgb(251,96,10)" rx="2" ry="2" />
<text  x="120.25" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="665.8" y="373" width="0.2" height="15.0" fill="rgb(230,62,42)" rx="2" ry="2" />
<text  x="668.76" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="322.0" y="293" width="0.2" height="15.0" fill="rgb(231,159,30)" rx="2" ry="2" />
<text  x="325.01" y="303.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="811.3" y="277" width="1.2" height="15.0" fill="rgb(228,187,32)" rx="2" ry="2" />
<text  x="814.33" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1169.6" y="533" width="0.2" height="15.0" fill="rgb(252,92,48)" rx="2" ry="2" />
<text  x="1172.59" y="543.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.13%)</title><rect x="831.5" y="357" width="1.6" height="15.0" fill="rgb(253,62,42)" rx="2" ry="2" />
<text  x="834.51" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (42 samples, 0.81%)</title><rect x="897.9" y="325" width="9.6" height="15.0" fill="rgb(254,21,35)" rx="2" ry="2" />
<text  x="900.95" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="674.1" y="485" width="0.7" height="15.0" fill="rgb(210,71,7)" rx="2" ry="2" />
<text  x="677.15" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="66.0" y="309" width="0.2" height="15.0" fill="rgb(221,127,23)" rx="2" ry="2" />
<text  x="69.01" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="978.0" y="357" width="0.2" height="15.0" fill="rgb(222,104,32)" rx="2" ry="2" />
<text  x="980.99" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="647.4" y="485" width="0.2" height="15.0" fill="rgb(244,116,39)" rx="2" ry="2" />
<text  x="650.39" y="495.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%)</title><rect x="116.3" y="453" width="0.7" height="15.0" fill="rgb(228,149,20)" rx="2" ry="2" />
<text  x="119.35" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="66.9" y="149" width="0.2" height="15.0" fill="rgb(222,129,20)" rx="2" ry="2" />
<text  x="69.91" y="159.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (109 samples, 2.09%)</title><rect x="491.2" y="325" width="24.7" height="15.0" fill="rgb(243,115,46)" rx="2" ry="2" />
<text  x="494.16" y="335.5" >d..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (10 samples, 0.19%)</title><rect x="538.6" y="245" width="2.2" height="15.0" fill="rgb(239,45,0)" rx="2" ry="2" />
<text  x="541.55" y="255.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="211.6" y="213" width="0.2" height="15.0" fill="rgb(208,139,25)" rx="2" ry="2" />
<text  x="214.58" y="223.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1044.2" y="293" width="0.2" height="15.0" fill="rgb(241,163,1)" rx="2" ry="2" />
<text  x="1047.20" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="560.8" y="341" width="0.4" height="15.0" fill="rgb(241,181,12)" rx="2" ry="2" />
<text  x="563.77" y="351.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="14.3" y="581" width="0.2" height="15.0" fill="rgb(217,114,14)" rx="2" ry="2" />
<text  x="17.31" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.08%)</title><rect x="1099.1" y="389" width="0.9" height="15.0" fill="rgb(216,185,23)" rx="2" ry="2" />
<text  x="1102.07" y="399.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.02%)</title><rect x="15.7" y="597" width="0.2" height="15.0" fill="rgb(231,2,1)" rx="2" ry="2" />
<text  x="18.67" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%)</title><rect x="832.2" y="293" width="0.9" height="15.0" fill="rgb(225,225,28)" rx="2" ry="2" />
<text  x="835.19" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="622.0" y="373" width="0.2" height="15.0" fill="rgb(211,84,19)" rx="2" ry="2" />
<text  x="624.99" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="117.3" y="453" width="0.2" height="15.0" fill="rgb(206,95,47)" rx="2" ry="2" />
<text  x="120.25" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="536.7" y="197" width="0.3" height="15.0" fill="rgb(232,11,1)" rx="2" ry="2" />
<text  x="539.74" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.10%)</title><rect x="304.1" y="277" width="1.1" height="15.0" fill="rgb(252,117,42)" rx="2" ry="2" />
<text  x="307.09" y="287.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%)</title><rect x="459.6" y="357" width="0.3" height="15.0" fill="rgb(210,173,17)" rx="2" ry="2" />
<text  x="462.64" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="87.8" y="277" width="0.2" height="15.0" fill="rgb(248,165,43)" rx="2" ry="2" />
<text  x="90.77" y="287.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="117.0" y="469" width="0.3" height="15.0" fill="rgb(239,130,12)" rx="2" ry="2" />
<text  x="120.03" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="52.9" y="229" width="0.4" height="15.0" fill="rgb(230,38,49)" rx="2" ry="2" />
<text  x="55.86" y="239.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%)</title><rect x="117.3" y="469" width="0.2" height="15.0" fill="rgb(235,196,9)" rx="2" ry="2" />
<text  x="120.25" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="84.1" y="437" width="0.3" height="15.0" fill="rgb(229,110,7)" rx="2" ry="2" />
<text  x="87.15" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%)</title><rect x="698.4" y="277" width="0.2" height="15.0" fill="rgb(242,90,3)" rx="2" ry="2" />
<text  x="701.41" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="816.8" y="357" width="0.2" height="15.0" fill="rgb(230,137,18)" rx="2" ry="2" />
<text  x="819.77" y="367.5" ></text>
</g>
<g >
<title>read_context::stop (3 samples, 0.06%)</title><rect x="114.8" y="309" width="0.6" height="15.0" fill="rgb(231,222,9)" rx="2" ry="2" />
<text  x="117.76" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="12.3" y="165" width="0.2" height="15.0" fill="rgb(231,184,24)" rx="2" ry="2" />
<text  x="15.27" y="175.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (30 samples, 0.58%)</title><rect x="568.7" y="405" width="6.8" height="15.0" fill="rgb(248,37,2)" rx="2" ry="2" />
<text  x="571.71" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="693.4" y="453" width="0.7" height="15.0" fill="rgb(248,135,17)" rx="2" ry="2" />
<text  x="696.42" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1164.6" y="437" width="0.2" height="15.0" fill="rgb(221,43,54)" rx="2" ry="2" />
<text  x="1167.60" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="737.9" y="325" width="0.2" height="15.0" fill="rgb(215,34,39)" rx="2" ry="2" />
<text  x="740.86" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="45.4" y="261" width="0.2" height="15.0" fill="rgb(208,173,48)" rx="2" ry="2" />
<text  x="48.37" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (72 samples, 1.38%)</title><rect x="895.2" y="405" width="16.4" height="15.0" fill="rgb(234,156,19)" rx="2" ry="2" />
<text  x="898.23" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="657.4" y="485" width="1.1" height="15.0" fill="rgb(235,0,18)" rx="2" ry="2" />
<text  x="660.37" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="698.4" y="341" width="0.2" height="15.0" fill="rgb(214,219,14)" rx="2" ry="2" />
<text  x="701.41" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="61.7" y="277" width="0.2" height="15.0" fill="rgb(234,191,38)" rx="2" ry="2" />
<text  x="64.70" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (4 samples, 0.08%)</title><rect x="79.6" y="373" width="0.9" height="15.0" fill="rgb(234,140,33)" rx="2" ry="2" />
<text  x="82.61" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="48.3" y="181" width="0.2" height="15.0" fill="rgb(209,190,37)" rx="2" ry="2" />
<text  x="51.32" y="191.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="782.1" y="309" width="0.9" height="15.0" fill="rgb(215,221,10)" rx="2" ry="2" />
<text  x="785.08" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="371.4" y="181" width="0.5" height="15.0" fill="rgb(248,182,52)" rx="2" ry="2" />
<text  x="374.44" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="683.7" y="469" width="0.2" height="15.0" fill="rgb(217,61,30)" rx="2" ry="2" />
<text  x="686.67" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="72.6" y="437" width="0.2" height="15.0" fill="rgb(208,114,7)" rx="2" ry="2" />
<text  x="75.58" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%)</title><rect x="116.8" y="341" width="0.2" height="15.0" fill="rgb(231,105,42)" rx="2" ry="2" />
<text  x="119.80" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (9 samples, 0.17%)</title><rect x="659.0" y="469" width="2.0" height="15.0" fill="rgb(205,100,37)" rx="2" ry="2" />
<text  x="661.95" y="479.5" ></text>
</g>
<g >
<title>iterator_reader::fetch_entry (1 samples, 0.02%)</title><rect x="10.9" y="373" width="0.2" height="15.0" fill="rgb(213,101,35)" rx="2" ry="2" />
<text  x="13.91" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="10.7" y="357" width="0.2" height="15.0" fill="rgb(212,87,6)" rx="2" ry="2" />
<text  x="13.68" y="367.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;schema_mutations&gt; (1 samples, 0.02%)</title><rect x="116.1" y="405" width="0.2" height="15.0" fill="rgb(214,87,4)" rx="2" ry="2" />
<text  x="119.12" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (3 samples, 0.06%)</title><rect x="540.1" y="229" width="0.7" height="15.0" fill="rgb(238,1,29)" rx="2" ry="2" />
<text  x="543.14" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%)</title><rect x="278.9" y="149" width="0.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="281.92" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (41 samples, 0.79%)</title><rect x="320.2" y="325" width="9.3" height="15.0" fill="rgb(222,155,17)" rx="2" ry="2" />
<text  x="323.19" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (6 samples, 0.12%)</title><rect x="772.1" y="357" width="1.4" height="15.0" fill="rgb(252,183,36)" rx="2" ry="2" />
<text  x="775.10" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%)</title><rect x="13.6" y="437" width="0.3" height="15.0" fill="rgb(246,24,32)" rx="2" ry="2" />
<text  x="16.63" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="23.6" y="293" width="0.2" height="15.0" fill="rgb(243,91,29)" rx="2" ry="2" />
<text  x="26.60" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (537 samples, 10.32%)</title><rect x="334.3" y="389" width="121.7" height="15.0" fill="rgb(235,65,41)" rx="2" ry="2" />
<text  x="337.25" y="399.5" >query::consume_..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="22.9" y="485" width="0.3" height="15.0" fill="rgb(218,39,24)" rx="2" ry="2" />
<text  x="25.92" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%)</title><rect x="409.1" y="181" width="0.7" height="15.0" fill="rgb(219,221,42)" rx="2" ry="2" />
<text  x="412.08" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="458.3" y="405" width="0.2" height="15.0" fill="rgb(237,180,49)" rx="2" ry="2" />
<text  x="461.28" y="415.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="273.5" y="149" width="0.2" height="15.0" fill="rgb(220,82,22)" rx="2" ry="2" />
<text  x="276.48" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="474.4" y="261" width="0.2" height="15.0" fill="rgb(230,18,34)" rx="2" ry="2" />
<text  x="477.38" y="271.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.10%)</title><rect x="56.0" y="165" width="1.2" height="15.0" fill="rgb(206,42,48)" rx="2" ry="2" />
<text  x="59.03" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="342.6" y="229" width="0.3" height="15.0" fill="rgb(207,156,37)" rx="2" ry="2" />
<text  x="345.64" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%)</title><rect x="834.0" y="421" width="0.7" height="15.0" fill="rgb(207,178,38)" rx="2" ry="2" />
<text  x="837.00" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="371.9" y="181" width="0.2" height="15.0" fill="rgb(229,9,52)" rx="2" ry="2" />
<text  x="374.89" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="31.1" y="245" width="1.1" height="15.0" fill="rgb(223,17,13)" rx="2" ry="2" />
<text  x="34.09" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1145.6" y="469" width="0.4" height="15.0" fill="rgb(214,22,42)" rx="2" ry="2" />
<text  x="1148.56" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%)</title><rect x="537.4" y="213" width="0.5" height="15.0" fill="rgb(226,108,16)" rx="2" ry="2" />
<text  x="540.42" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="1006.6" y="245" width="1.3" height="15.0" fill="rgb(228,217,1)" rx="2" ry="2" />
<text  x="1009.56" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="337.4" y="277" width="0.5" height="15.0" fill="rgb(238,100,24)" rx="2" ry="2" />
<text  x="340.43" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1114.3" y="373" width="0.4" height="15.0" fill="rgb(254,117,5)" rx="2" ry="2" />
<text  x="1117.27" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="60.6" y="213" width="0.2" height="15.0" fill="rgb(250,133,15)" rx="2" ry="2" />
<text  x="63.56" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1147.8" y="485" width="0.5" height="15.0" fill="rgb(238,171,37)" rx="2" ry="2" />
<text  x="1150.82" y="495.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="113.4" y="469" width="0.2" height="15.0" fill="rgb(230,130,41)" rx="2" ry="2" />
<text  x="116.40" y="479.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="117.0" y="373" width="0.3" height="15.0" fill="rgb(239,12,47)" rx="2" ry="2" />
<text  x="120.03" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%)</title><rect x="340.6" y="293" width="2.7" height="15.0" fill="rgb(227,115,17)" rx="2" ry="2" />
<text  x="343.60" y="303.5" ></text>
</g>
<g >
<title>utils::crc32::process (2 samples, 0.04%)</title><rect x="1130.8" y="245" width="0.5" height="15.0" fill="rgb(226,24,35)" rx="2" ry="2" />
<text  x="1133.82" y="255.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="867.1" y="357" width="0.2" height="15.0" fill="rgb(228,163,0)" rx="2" ry="2" />
<text  x="870.11" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="931.1" y="389" width="0.6" height="15.0" fill="rgb(244,11,31)" rx="2" ry="2" />
<text  x="934.05" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="46.1" y="261" width="0.9" height="15.0" fill="rgb(245,192,38)" rx="2" ry="2" />
<text  x="49.05" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="86.4" y="389" width="0.2" height="15.0" fill="rgb(232,213,9)" rx="2" ry="2" />
<text  x="89.41" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="10.7" y="277" width="0.2" height="15.0" fill="rgb(242,52,27)" rx="2" ry="2" />
<text  x="13.68" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="1136.0" y="133" width="0.7" height="15.0" fill="rgb(226,219,38)" rx="2" ry="2" />
<text  x="1139.03" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="871.4" y="357" width="0.2" height="15.0" fill="rgb(223,155,44)" rx="2" ry="2" />
<text  x="874.42" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.08%)</title><rect x="62.2" y="229" width="0.9" height="15.0" fill="rgb(211,165,29)" rx="2" ry="2" />
<text  x="65.15" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1060.5" y="325" width="0.3" height="15.0" fill="rgb(250,1,42)" rx="2" ry="2" />
<text  x="1063.53" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (29 samples, 0.56%)</title><rect x="1132.2" y="485" width="6.6" height="15.0" fill="rgb(224,136,12)" rx="2" ry="2" />
<text  x="1135.18" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="763.0" y="405" width="0.5" height="15.0" fill="rgb(207,134,45)" rx="2" ry="2" />
<text  x="766.03" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (13 samples, 0.25%)</title><rect x="1040.1" y="261" width="3.0" height="15.0" fill="rgb(251,89,44)" rx="2" ry="2" />
<text  x="1043.12" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="86.4" y="405" width="0.2" height="15.0" fill="rgb(232,77,41)" rx="2" ry="2" />
<text  x="89.41" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="766.9" y="341" width="1.1" height="15.0" fill="rgb(235,155,2)" rx="2" ry="2" />
<text  x="769.89" y="351.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="603.4" y="341" width="1.6" height="15.0" fill="rgb(239,13,51)" rx="2" ry="2" />
<text  x="606.40" y="351.5" ></text>
</g>
<g >
<title>intrusive_array&lt;cache_entry&gt;::~intrusive_array (1 samples, 0.02%)</title><rect x="88.2" y="485" width="0.3" height="15.0" fill="rgb(244,6,47)" rx="2" ry="2" />
<text  x="91.23" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="14.3" y="421" width="0.2" height="15.0" fill="rgb(219,4,30)" rx="2" ry="2" />
<text  x="17.31" y="431.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="114.1" y="213" width="0.2" height="15.0" fill="rgb(250,125,16)" rx="2" ry="2" />
<text  x="117.08" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (2 samples, 0.04%)</title><rect x="89.4" y="517" width="0.4" height="15.0" fill="rgb(217,93,29)" rx="2" ry="2" />
<text  x="92.36" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="1105.0" y="421" width="0.6" height="15.0" fill="rgb(217,135,23)" rx="2" ry="2" />
<text  x="1107.97" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="792.3" y="229" width="0.2" height="15.0" fill="rgb(252,182,48)" rx="2" ry="2" />
<text  x="795.28" y="239.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="475.3" y="277" width="0.4" height="15.0" fill="rgb(241,180,19)" rx="2" ry="2" />
<text  x="478.29" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="853.3" y="357" width="0.7" height="15.0" fill="rgb(206,72,22)" rx="2" ry="2" />
<text  x="856.28" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="343.1" y="277" width="0.2" height="15.0" fill="rgb(227,158,18)" rx="2" ry="2" />
<text  x="346.09" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (1 samples, 0.02%)</title><rect x="1079.6" y="341" width="0.2" height="15.0" fill="rgb(239,142,36)" rx="2" ry="2" />
<text  x="1082.57" y="351.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%)</title><rect x="78.0" y="309" width="0.3" height="15.0" fill="rgb(248,26,36)" rx="2" ry="2" />
<text  x="81.02" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (1 samples, 0.02%)</title><rect x="23.6" y="389" width="0.2" height="15.0" fill="rgb(213,184,51)" rx="2" ry="2" />
<text  x="26.60" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2 samples, 0.04%)</title><rect x="43.3" y="261" width="0.5" height="15.0" fill="rgb(236,116,36)" rx="2" ry="2" />
<text  x="46.33" y="271.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (17 samples, 0.33%)</title><rect x="1056.4" y="325" width="3.9" height="15.0" fill="rgb(240,224,35)" rx="2" ry="2" />
<text  x="1059.45" y="335.5" ></text>
</g>
<g >
<title>memtable::apply (20 samples, 0.38%)</title><rect x="1126.1" y="261" width="4.5" height="15.0" fill="rgb(251,98,19)" rx="2" ry="2" />
<text  x="1129.06" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="50.4" y="213" width="0.2" height="15.0" fill="rgb(229,86,51)" rx="2" ry="2" />
<text  x="53.36" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="651.9" y="469" width="0.7" height="15.0" fill="rgb(249,74,45)" rx="2" ry="2" />
<text  x="654.93" y="479.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="58.8" y="229" width="0.6" height="15.0" fill="rgb(217,116,8)" rx="2" ry="2" />
<text  x="61.75" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="83.7" y="389" width="0.2" height="15.0" fill="rgb(243,65,27)" rx="2" ry="2" />
<text  x="86.69" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="80.5" y="373" width="0.2" height="15.0" fill="rgb(228,91,22)" rx="2" ry="2" />
<text  x="83.52" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="454.0" y="357" width="0.2" height="15.0" fill="rgb(237,6,6)" rx="2" ry="2" />
<text  x="456.97" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="922.9" y="389" width="0.2" height="15.0" fill="rgb(224,39,31)" rx="2" ry="2" />
<text  x="925.89" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1124.9" y="437" width="0.2" height="15.0" fill="rgb(233,93,29)" rx="2" ry="2" />
<text  x="1127.92" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (1 samples, 0.02%)</title><rect x="862.8" y="485" width="0.2" height="15.0" fill="rgb(233,21,34)" rx="2" ry="2" />
<text  x="865.80" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="23.8" y="325" width="0.3" height="15.0" fill="rgb(250,195,18)" rx="2" ry="2" />
<text  x="26.83" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%)</title><rect x="556.0" y="309" width="1.4" height="15.0" fill="rgb(213,115,22)" rx="2" ry="2" />
<text  x="559.01" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%)</title><rect x="410.2" y="213" width="0.5" height="15.0" fill="rgb(226,68,46)" rx="2" ry="2" />
<text  x="413.21" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (2 samples, 0.04%)</title><rect x="34.9" y="261" width="0.5" height="15.0" fill="rgb(212,37,35)" rx="2" ry="2" />
<text  x="37.94" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (3 samples, 0.06%)</title><rect x="113.6" y="485" width="0.7" height="15.0" fill="rgb(208,71,1)" rx="2" ry="2" />
<text  x="116.62" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="52.9" y="133" width="0.4" height="15.0" fill="rgb(254,140,45)" rx="2" ry="2" />
<text  x="55.86" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="54.4" y="213" width="0.5" height="15.0" fill="rgb(241,56,5)" rx="2" ry="2" />
<text  x="57.44" y="223.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%)</title><rect x="547.2" y="341" width="0.4" height="15.0" fill="rgb(246,144,20)" rx="2" ry="2" />
<text  x="550.17" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="69.2" y="373" width="0.2" height="15.0" fill="rgb(222,35,31)" rx="2" ry="2" />
<text  x="72.18" y="383.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (13 samples, 0.25%)</title><rect x="973.7" y="341" width="2.9" height="15.0" fill="rgb(222,60,52)" rx="2" ry="2" />
<text  x="976.68" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="936.3" y="389" width="0.2" height="15.0" fill="rgb(212,17,22)" rx="2" ry="2" />
<text  x="939.27" y="399.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1054.6" y="325" width="1.8" height="15.0" fill="rgb(214,124,24)" rx="2" ry="2" />
<text  x="1057.63" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="849.4" y="373" width="0.3" height="15.0" fill="rgb(238,104,27)" rx="2" ry="2" />
<text  x="852.42" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="514.1" y="197" width="0.2" height="15.0" fill="rgb(249,24,9)" rx="2" ry="2" />
<text  x="517.06" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (3 samples, 0.06%)</title><rect x="67.8" y="293" width="0.7" height="15.0" fill="rgb(220,207,25)" rx="2" ry="2" />
<text  x="70.82" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="225.9" y="149" width="0.2" height="15.0" fill="rgb(250,57,30)" rx="2" ry="2" />
<text  x="228.86" y="159.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (53 samples, 1.02%)</title><rect x="503.9" y="293" width="12.0" height="15.0" fill="rgb(224,139,23)" rx="2" ry="2" />
<text  x="506.86" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="807.9" y="213" width="0.3" height="15.0" fill="rgb(244,35,51)" rx="2" ry="2" />
<text  x="810.93" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="700.0" y="341" width="0.2" height="15.0" fill="rgb(211,11,15)" rx="2" ry="2" />
<text  x="703.00" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (5 samples, 0.10%)</title><rect x="111.4" y="485" width="1.1" height="15.0" fill="rgb(224,180,9)" rx="2" ry="2" />
<text  x="114.36" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%)</title><rect x="489.1" y="325" width="0.2" height="15.0" fill="rgb(245,52,35)" rx="2" ry="2" />
<text  x="492.12" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="46.3" y="197" width="0.7" height="15.0" fill="rgb(253,56,52)" rx="2" ry="2" />
<text  x="49.28" y="207.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="117.0" y="357" width="0.3" height="15.0" fill="rgb(206,152,42)" rx="2" ry="2" />
<text  x="120.03" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%)</title><rect x="953.5" y="341" width="1.1" height="15.0" fill="rgb(235,61,18)" rx="2" ry="2" />
<text  x="956.50" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="32.9" y="293" width="0.2" height="15.0" fill="rgb(220,198,26)" rx="2" ry="2" />
<text  x="35.90" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="172.4" y="421" width="0.2" height="15.0" fill="rgb(243,9,8)" rx="2" ry="2" />
<text  x="175.35" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="66.7" y="165" width="0.2" height="15.0" fill="rgb(229,123,33)" rx="2" ry="2" />
<text  x="69.69" y="175.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="53.5" y="261" width="0.5" height="15.0" fill="rgb(216,119,52)" rx="2" ry="2" />
<text  x="56.54" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="31.8" y="181" width="0.2" height="15.0" fill="rgb(210,61,21)" rx="2" ry="2" />
<text  x="34.77" y="191.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.38%)</title><rect x="1015.6" y="245" width="4.6" height="15.0" fill="rgb(240,161,18)" rx="2" ry="2" />
<text  x="1018.63" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="284.1" y="229" width="0.3" height="15.0" fill="rgb(229,16,17)" rx="2" ry="2" />
<text  x="287.14" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="114.8" y="213" width="0.2" height="15.0" fill="rgb(240,169,50)" rx="2" ry="2" />
<text  x="117.76" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="798.9" y="181" width="0.2" height="15.0" fill="rgb(216,75,26)" rx="2" ry="2" />
<text  x="801.86" y="191.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%)</title><rect x="23.4" y="245" width="0.2" height="15.0" fill="rgb(242,94,6)" rx="2" ry="2" />
<text  x="26.38" y="255.5" ></text>
</g>
<g >
<title>db::schema_tables::recalculate_schema_version (1 samples, 0.02%)</title><rect x="23.6" y="405" width="0.2" height="15.0" fill="rgb(235,67,35)" rx="2" ry="2" />
<text  x="26.60" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="684.4" y="453" width="0.4" height="15.0" fill="rgb(253,43,21)" rx="2" ry="2" />
<text  x="687.35" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="14.3" y="453" width="0.2" height="15.0" fill="rgb(233,104,48)" rx="2" ry="2" />
<text  x="17.31" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="10.9" y="485" width="3.2" height="15.0" fill="rgb(246,186,4)" rx="2" ry="2" />
<text  x="13.91" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="66.7" y="293" width="0.2" height="15.0" fill="rgb(247,227,4)" rx="2" ry="2" />
<text  x="69.69" y="303.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.2" y="549" width="0.3" height="15.0" fill="rgb(205,208,44)" rx="2" ry="2" />
<text  x="13.23" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="653.7" y="469" width="0.3" height="15.0" fill="rgb(216,119,11)" rx="2" ry="2" />
<text  x="656.74" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%)</title><rect x="213.4" y="213" width="0.7" height="15.0" fill="rgb(230,221,4)" rx="2" ry="2" />
<text  x="216.39" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="114.1" y="341" width="0.2" height="15.0" fill="rgb(207,196,36)" rx="2" ry="2" />
<text  x="117.08" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (116 samples, 2.23%)</title><rect x="1141.0" y="501" width="26.3" height="15.0" fill="rgb(247,33,5)" rx="2" ry="2" />
<text  x="1144.02" y="511.5" >s..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (35 samples, 0.67%)</title><rect x="417.2" y="165" width="8.0" height="15.0" fill="rgb(231,3,26)" rx="2" ry="2" />
<text  x="420.24" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1077.1" y="293" width="0.2" height="15.0" fill="rgb(237,225,28)" rx="2" ry="2" />
<text  x="1080.08" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1088.6" y="389" width="0.7" height="15.0" fill="rgb(232,162,4)" rx="2" ry="2" />
<text  x="1091.64" y="399.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_input (1 samples, 0.02%)</title><rect x="36.1" y="245" width="0.2" height="15.0" fill="rgb(250,113,4)" rx="2" ry="2" />
<text  x="39.08" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="1027.9" y="229" width="0.2" height="15.0" fill="rgb(224,74,22)" rx="2" ry="2" />
<text  x="1030.87" y="239.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="52.6" y="165" width="0.3" height="15.0" fill="rgb(252,226,30)" rx="2" ry="2" />
<text  x="55.63" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="775.3" y="341" width="0.2" height="15.0" fill="rgb(246,100,7)" rx="2" ry="2" />
<text  x="778.28" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="129.0" y="453" width="0.3" height="15.0" fill="rgb(206,145,26)" rx="2" ry="2" />
<text  x="132.04" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="673.0" y="469" width="0.2" height="15.0" fill="rgb(214,214,42)" rx="2" ry="2" />
<text  x="676.01" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="308.9" y="325" width="0.4" height="15.0" fill="rgb(244,157,15)" rx="2" ry="2" />
<text  x="311.85" y="335.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="1049.4" y="277" width="0.2" height="15.0" fill="rgb(211,158,24)" rx="2" ry="2" />
<text  x="1052.42" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.6" y="373" width="0.2" height="15.0" fill="rgb(209,86,40)" rx="2" ry="2" />
<text  x="85.56" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="80.1" y="309" width="0.2" height="15.0" fill="rgb(230,29,12)" rx="2" ry="2" />
<text  x="83.07" y="319.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="871.2" y="261" width="0.2" height="15.0" fill="rgb(236,122,52)" rx="2" ry="2" />
<text  x="874.19" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.2" y="149" width="0.3" height="15.0" fill="rgb(224,90,24)" rx="2" ry="2" />
<text  x="52.23" y="159.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="115.4" y="421" width="0.3" height="15.0" fill="rgb(237,97,3)" rx="2" ry="2" />
<text  x="118.44" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (9 samples, 0.17%)</title><rect x="1118.1" y="421" width="2.1" height="15.0" fill="rgb(212,8,8)" rx="2" ry="2" />
<text  x="1121.12" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="636.5" y="421" width="0.5" height="15.0" fill="rgb(222,211,51)" rx="2" ry="2" />
<text  x="639.51" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.9" y="229" width="0.3" height="15.0" fill="rgb(232,178,3)" rx="2" ry="2" />
<text  x="64.93" y="239.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="962.3" y="373" width="1.9" height="15.0" fill="rgb(223,131,26)" rx="2" ry="2" />
<text  x="965.34" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="52.4" y="261" width="0.5" height="15.0" fill="rgb(234,92,43)" rx="2" ry="2" />
<text  x="55.40" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (16 samples, 0.31%)</title><rect x="988.2" y="293" width="3.6" height="15.0" fill="rgb(229,13,49)" rx="2" ry="2" />
<text  x="991.19" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="686.2" y="453" width="0.9" height="15.0" fill="rgb(246,190,50)" rx="2" ry="2" />
<text  x="689.16" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="666.0" y="437" width="0.2" height="15.0" fill="rgb(220,140,36)" rx="2" ry="2" />
<text  x="668.98" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="66.9" y="213" width="0.2" height="15.0" fill="rgb(209,55,41)" rx="2" ry="2" />
<text  x="69.91" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%)</title><rect x="946.5" y="357" width="2.0" height="15.0" fill="rgb(214,196,7)" rx="2" ry="2" />
<text  x="949.47" y="367.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="65.8" y="325" width="0.2" height="15.0" fill="rgb(254,171,12)" rx="2" ry="2" />
<text  x="68.78" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="53.8" y="165" width="0.2" height="15.0" fill="rgb(215,7,35)" rx="2" ry="2" />
<text  x="56.76" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (6 samples, 0.12%)</title><rect x="55.8" y="197" width="1.4" height="15.0" fill="rgb(253,34,35)" rx="2" ry="2" />
<text  x="58.80" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.25%)</title><rect x="794.8" y="213" width="2.9" height="15.0" fill="rgb(238,129,32)" rx="2" ry="2" />
<text  x="797.78" y="223.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureISt5tupleIJEEE14discard_resultEvEUlDpOT_E_ZNS7_14then_impl_nrvoISB_NS4_IvEEEET0_OT_EUlOS3_RSB_ONS_12future_stateIS6_EEE_S6_E15run_and_disposeEv (1 samples, 0.02%)</title><rect x="108.2" y="501" width="0.2" height="15.0" fill="rgb(237,188,46)" rx="2" ry="2" />
<text  x="111.18" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="52.2" y="101" width="0.2" height="15.0" fill="rgb(219,119,13)" rx="2" ry="2" />
<text  x="55.18" y="111.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="536.7" y="181" width="0.3" height="15.0" fill="rgb(231,226,6)" rx="2" ry="2" />
<text  x="539.74" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (3 samples, 0.06%)</title><rect x="98.9" y="469" width="0.7" height="15.0" fill="rgb(220,71,23)" rx="2" ry="2" />
<text  x="101.89" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::void_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1140.3" y="501" width="0.3" height="15.0" fill="rgb(214,214,15)" rx="2" ry="2" />
<text  x="1143.34" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="566.4" y="405" width="0.3" height="15.0" fill="rgb(253,93,17)" rx="2" ry="2" />
<text  x="569.44" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="10.7" y="389" width="0.2" height="15.0" fill="rgb(208,93,8)" rx="2" ry="2" />
<text  x="13.68" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.25%)</title><rect x="1073.5" y="261" width="2.9" height="15.0" fill="rgb(222,183,8)" rx="2" ry="2" />
<text  x="1076.45" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_create_nodes (1 samples, 0.02%)</title><rect x="27.2" y="357" width="0.3" height="15.0" fill="rgb(212,107,30)" rx="2" ry="2" />
<text  x="30.23" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%)</title><rect x="1168.2" y="485" width="0.3" height="15.0" fill="rgb(253,173,23)" rx="2" ry="2" />
<text  x="1171.23" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.10%)</title><rect x="24.7" y="501" width="1.2" height="15.0" fill="rgb(229,11,30)" rx="2" ry="2" />
<text  x="27.74" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="270.1" y="149" width="0.4" height="15.0" fill="rgb(249,21,41)" rx="2" ry="2" />
<text  x="273.08" y="159.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="114.8" y="373" width="0.6" height="15.0" fill="rgb(238,220,23)" rx="2" ry="2" />
<text  x="117.76" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_stream_validating_filter::operator (1 samples, 0.02%)</title><rect x="13.9" y="421" width="0.2" height="15.0" fill="rgb(210,132,53)" rx="2" ry="2" />
<text  x="16.85" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="27.2" y="325" width="0.3" height="15.0" fill="rgb(231,106,15)" rx="2" ry="2" />
<text  x="30.23" y="335.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%)</title><rect x="86.6" y="517" width="0.5" height="15.0" fill="rgb(245,0,22)" rx="2" ry="2" />
<text  x="89.64" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="736.3" y="389" width="0.4" height="15.0" fill="rgb(244,116,15)" rx="2" ry="2" />
<text  x="739.28" y="399.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (5 samples, 0.10%)</title><rect x="569.4" y="389" width="1.1" height="15.0" fill="rgb(205,35,19)" rx="2" ry="2" />
<text  x="572.39" y="399.5" ></text>
</g>
<g >
<title>__strxfrm_l (1 samples, 0.02%)</title><rect x="14.8" y="581" width="0.2" height="15.0" fill="rgb(223,106,24)" rx="2" ry="2" />
<text  x="17.76" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (1 samples, 0.02%)</title><rect x="10.7" y="261" width="0.2" height="15.0" fill="rgb(224,212,38)" rx="2" ry="2" />
<text  x="13.68" y="271.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="253.1" y="101" width="0.2" height="15.0" fill="rgb(209,218,38)" rx="2" ry="2" />
<text  x="256.07" y="111.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="71.4" y="341" width="0.3" height="15.0" fill="rgb(230,146,19)" rx="2" ry="2" />
<text  x="74.45" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.7" y="261" width="0.2" height="15.0" fill="rgb(205,95,37)" rx="2" ry="2" />
<text  x="62.66" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (3 samples, 0.06%)</title><rect x="1035.6" y="261" width="0.7" height="15.0" fill="rgb(212,191,31)" rx="2" ry="2" />
<text  x="1038.58" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (3 samples, 0.06%)</title><rect x="28.1" y="405" width="0.7" height="15.0" fill="rgb(209,80,41)" rx="2" ry="2" />
<text  x="31.14" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.02%)</title><rect x="14.8" y="597" width="0.2" height="15.0" fill="rgb(215,118,5)" rx="2" ry="2" />
<text  x="17.76" y="607.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="700.0" y="277" width="0.2" height="15.0" fill="rgb(252,31,38)" rx="2" ry="2" />
<text  x="703.00" y="287.5" ></text>
</g>
<g >
<title>validation::validate_column_family (43 samples, 0.83%)</title><rect x="823.3" y="389" width="9.8" height="15.0" fill="rgb(245,179,16)" rx="2" ry="2" />
<text  x="826.35" y="399.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="634.7" y="389" width="0.9" height="15.0" fill="rgb(212,106,15)" rx="2" ry="2" />
<text  x="637.69" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%)</title><rect x="749.2" y="293" width="0.7" height="15.0" fill="rgb(217,226,4)" rx="2" ry="2" />
<text  x="752.20" y="303.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.8" y="613" width="0.2" height="15.0" fill="rgb(236,1,18)" rx="2" ry="2" />
<text  x="1192.77" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.37%)</title><rect x="260.6" y="133" width="4.3" height="15.0" fill="rgb(249,203,19)" rx="2" ry="2" />
<text  x="263.56" y="143.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="869.6" y="261" width="0.5" height="15.0" fill="rgb(246,58,6)" rx="2" ry="2" />
<text  x="872.60" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="698.4" y="325" width="0.2" height="15.0" fill="rgb(208,198,6)" rx="2" ry="2" />
<text  x="701.41" y="335.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="451.9" y="373" width="2.3" height="15.0" fill="rgb(230,113,46)" rx="2" ry="2" />
<text  x="454.93" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="937.6" y="389" width="0.3" height="15.0" fill="rgb(240,165,26)" rx="2" ry="2" />
<text  x="940.63" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="116.1" y="277" width="0.2" height="15.0" fill="rgb(241,215,2)" rx="2" ry="2" />
<text  x="119.12" y="287.5" ></text>
</g>
<g >
<title>from_hex (6 samples, 0.12%)</title><rect x="74.9" y="341" width="1.3" height="15.0" fill="rgb(249,8,39)" rx="2" ry="2" />
<text  x="77.85" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1082.1" y="357" width="0.2" height="15.0" fill="rgb(236,108,7)" rx="2" ry="2" />
<text  x="1085.07" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (4 samples, 0.08%)</title><rect x="1150.3" y="453" width="0.9" height="15.0" fill="rgb(243,226,45)" rx="2" ry="2" />
<text  x="1153.32" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="289.1" y="197" width="0.5" height="15.0" fill="rgb(254,34,52)" rx="2" ry="2" />
<text  x="292.13" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="78.7" y="293" width="0.2" height="15.0" fill="rgb(225,118,48)" rx="2" ry="2" />
<text  x="81.70" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="70.1" y="373" width="0.2" height="15.0" fill="rgb(212,44,42)" rx="2" ry="2" />
<text  x="73.09" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="67.1" y="261" width="0.3" height="15.0" fill="rgb(241,59,53)" rx="2" ry="2" />
<text  x="70.14" y="271.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.5" y="245" width="0.2" height="15.0" fill="rgb(234,218,21)" rx="2" ry="2" />
<text  x="88.51" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="249.2" y="101" width="0.2" height="15.0" fill="rgb(221,66,38)" rx="2" ry="2" />
<text  x="252.22" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="212.5" y="165" width="0.9" height="15.0" fill="rgb(237,146,51)" rx="2" ry="2" />
<text  x="215.49" y="175.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="980.5" y="293" width="1.8" height="15.0" fill="rgb(211,184,4)" rx="2" ry="2" />
<text  x="983.48" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="54.4" y="197" width="0.5" height="15.0" fill="rgb(224,150,45)" rx="2" ry="2" />
<text  x="57.44" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="527.0" y="277" width="0.4" height="15.0" fill="rgb(221,20,11)" rx="2" ry="2" />
<text  x="529.99" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%)</title><rect x="12.3" y="229" width="0.4" height="15.0" fill="rgb(221,118,52)" rx="2" ry="2" />
<text  x="15.27" y="239.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, false, std::random_access_iterator_tag&gt;::__copy_m&lt;column_definition*, column_definition*&gt; (1 samples, 0.02%)</title><rect x="23.4" y="181" width="0.2" height="15.0" fill="rgb(213,27,13)" rx="2" ry="2" />
<text  x="26.38" y="191.5" ></text>
</g>
<g >
<title>std::function&lt;frozen_schema  (1 samples, 0.02%)</title><rect x="113.9" y="389" width="0.2" height="15.0" fill="rgb(210,111,28)" rx="2" ry="2" />
<text  x="116.85" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="29.0" y="373" width="0.3" height="15.0" fill="rgb(242,150,23)" rx="2" ry="2" />
<text  x="32.05" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (10 samples, 0.19%)</title><rect x="952.6" y="389" width="2.3" height="15.0" fill="rgb(206,225,3)" rx="2" ry="2" />
<text  x="955.59" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.37%)</title><rect x="1015.9" y="229" width="4.3" height="15.0" fill="rgb(227,216,40)" rx="2" ry="2" />
<text  x="1018.86" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.3" y="197" width="0.2" height="15.0" fill="rgb(207,44,26)" rx="2" ry="2" />
<text  x="66.29" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="542.0" y="293" width="0.2" height="15.0" fill="rgb(239,90,52)" rx="2" ry="2" />
<text  x="544.95" y="303.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="114.8" y="341" width="0.6" height="15.0" fill="rgb(230,195,26)" rx="2" ry="2" />
<text  x="117.76" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="112.9" y="485" width="0.5" height="15.0" fill="rgb(239,202,8)" rx="2" ry="2" />
<text  x="115.94" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="863.0" y="421" width="0.3" height="15.0" fill="rgb(243,77,10)" rx="2" ry="2" />
<text  x="866.03" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="698.6" y="325" width="0.3" height="15.0" fill="rgb(247,55,52)" rx="2" ry="2" />
<text  x="701.64" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1153.5" y="389" width="0.7" height="15.0" fill="rgb(242,219,28)" rx="2" ry="2" />
<text  x="1156.49" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.12%)</title><rect x="62.2" y="261" width="1.3" height="15.0" fill="rgb(218,147,8)" rx="2" ry="2" />
<text  x="65.15" y="271.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (29 samples, 0.56%)</title><rect x="356.9" y="197" width="6.6" height="15.0" fill="rgb(221,158,31)" rx="2" ry="2" />
<text  x="359.93" y="207.5" ></text>
</g>
<g >
<title>query::result_atomic_cell_view::value (1 samples, 0.02%)</title><rect x="116.3" y="293" width="0.3" height="15.0" fill="rgb(228,34,31)" rx="2" ry="2" />
<text  x="119.35" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="601.4" y="341" width="0.6" height="15.0" fill="rgb(206,27,25)" rx="2" ry="2" />
<text  x="604.36" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="69.4" y="373" width="0.2" height="15.0" fill="rgb(210,148,31)" rx="2" ry="2" />
<text  x="72.41" y="383.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="685.3" y="453" width="0.6" height="15.0" fill="rgb(238,29,46)" rx="2" ry="2" />
<text  x="688.26" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="86.4" y="373" width="0.2" height="15.0" fill="rgb(225,31,10)" rx="2" ry="2" />
<text  x="89.41" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (3 samples, 0.06%)</title><rect x="573.9" y="293" width="0.7" height="15.0" fill="rgb(240,56,42)" rx="2" ry="2" />
<text  x="576.92" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (16 samples, 0.31%)</title><rect x="738.3" y="341" width="3.6" height="15.0" fill="rgb(234,121,35)" rx="2" ry="2" />
<text  x="741.32" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="910.0" y="373" width="0.4" height="15.0" fill="rgb(226,194,13)" rx="2" ry="2" />
<text  x="912.97" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (411 samples, 7.90%)</title><rect x="742.9" y="437" width="93.1" height="15.0" fill="rgb(254,113,41)" rx="2" ry="2" />
<text  x="745.85" y="447.5" >cql3::query..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="840.6" y="437" width="0.4" height="15.0" fill="rgb(250,159,53)" rx="2" ry="2" />
<text  x="843.58" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; const*&gt; (1 samples, 0.02%)</title><rect x="1134.7" y="245" width="0.2" height="15.0" fill="rgb(238,17,2)" rx="2" ry="2" />
<text  x="1137.67" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="113.9" y="229" width="0.2" height="15.0" fill="rgb(211,200,34)" rx="2" ry="2" />
<text  x="116.85" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="87.8" y="389" width="0.2" height="15.0" fill="rgb(252,55,35)" rx="2" ry="2" />
<text  x="90.77" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="682.1" y="485" width="0.2" height="15.0" fill="rgb(223,38,47)" rx="2" ry="2" />
<text  x="685.08" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="63.3" y="213" width="0.2" height="15.0" fill="rgb(242,113,54)" rx="2" ry="2" />
<text  x="66.29" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="52.4" y="229" width="0.5" height="15.0" fill="rgb(221,71,36)" rx="2" ry="2" />
<text  x="55.40" y="239.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (4 samples, 0.08%)</title><rect x="159.7" y="437" width="0.9" height="15.0" fill="rgb(253,108,4)" rx="2" ry="2" />
<text  x="162.65" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="272.1" y="101" width="0.2" height="15.0" fill="rgb(216,187,47)" rx="2" ry="2" />
<text  x="275.12" y="111.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="758.5" y="389" width="0.2" height="15.0" fill="rgb(253,92,33)" rx="2" ry="2" />
<text  x="761.50" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.29%)</title><rect x="562.6" y="389" width="3.4" height="15.0" fill="rgb(206,150,13)" rx="2" ry="2" />
<text  x="565.59" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%)</title><rect x="515.9" y="325" width="0.7" height="15.0" fill="rgb(237,187,6)" rx="2" ry="2" />
<text  x="518.88" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="67.4" y="197" width="0.2" height="15.0" fill="rgb(234,166,29)" rx="2" ry="2" />
<text  x="70.37" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="359.0" y="165" width="0.4" height="15.0" fill="rgb(223,188,25)" rx="2" ry="2" />
<text  x="361.97" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (4 samples, 0.08%)</title><rect x="995.4" y="261" width="1.0" height="15.0" fill="rgb(250,187,21)" rx="2" ry="2" />
<text  x="998.45" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="577.6" y="421" width="0.2" height="15.0" fill="rgb(227,182,52)" rx="2" ry="2" />
<text  x="580.55" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1138.5" y="245" width="0.3" height="15.0" fill="rgb(235,33,1)" rx="2" ry="2" />
<text  x="1141.53" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="50.4" y="245" width="0.2" height="15.0" fill="rgb(219,37,0)" rx="2" ry="2" />
<text  x="53.36" y="255.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="52.4" y="165" width="0.2" height="15.0" fill="rgb(231,216,46)" rx="2" ry="2" />
<text  x="55.40" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="705.7" y="485" width="0.2" height="15.0" fill="rgb(216,219,8)" rx="2" ry="2" />
<text  x="708.66" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (2 samples, 0.04%)</title><rect x="483.0" y="325" width="0.5" height="15.0" fill="rgb(208,57,2)" rx="2" ry="2" />
<text  x="486.00" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="712.5" y="453" width="0.4" height="15.0" fill="rgb(230,226,19)" rx="2" ry="2" />
<text  x="715.47" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (27 samples, 0.52%)</title><rect x="1132.6" y="357" width="6.2" height="15.0" fill="rgb(234,28,0)" rx="2" ry="2" />
<text  x="1135.63" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="678.7" y="437" width="0.2" height="15.0" fill="rgb(236,158,25)" rx="2" ry="2" />
<text  x="681.68" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="793.6" y="229" width="0.3" height="15.0" fill="rgb(213,87,30)" rx="2" ry="2" />
<text  x="796.64" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1049.0" y="293" width="0.2" height="15.0" fill="rgb(231,28,44)" rx="2" ry="2" />
<text  x="1051.96" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="78.7" y="277" width="0.2" height="15.0" fill="rgb(247,58,28)" rx="2" ry="2" />
<text  x="81.70" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="860.1" y="437" width="0.2" height="15.0" fill="rgb(209,26,45)" rx="2" ry="2" />
<text  x="863.08" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="795.7" y="165" width="1.3" height="15.0" fill="rgb(254,218,47)" rx="2" ry="2" />
<text  x="798.68" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (1 samples, 0.02%)</title><rect x="865.7" y="405" width="0.3" height="15.0" fill="rgb(247,67,36)" rx="2" ry="2" />
<text  x="868.75" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (1 samples, 0.02%)</title><rect x="72.1" y="437" width="0.3" height="15.0" fill="rgb(252,3,11)" rx="2" ry="2" />
<text  x="75.13" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%)</title><rect x="407.7" y="197" width="0.2" height="15.0" fill="rgb(220,199,37)" rx="2" ry="2" />
<text  x="410.72" y="207.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (7 samples, 0.13%)</title><rect x="351.9" y="229" width="1.6" height="15.0" fill="rgb(212,122,12)" rx="2" ry="2" />
<text  x="354.94" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="29.0" y="389" width="0.3" height="15.0" fill="rgb(238,165,20)" rx="2" ry="2" />
<text  x="32.05" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.27%)</title><rect x="10.9" y="533" width="3.2" height="15.0" fill="rgb(222,11,41)" rx="2" ry="2" />
<text  x="13.91" y="543.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (2 samples, 0.04%)</title><rect x="867.6" y="357" width="0.4" height="15.0" fill="rgb(206,115,12)" rx="2" ry="2" />
<text  x="870.56" y="367.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (3 samples, 0.06%)</title><rect x="1139.7" y="501" width="0.6" height="15.0" fill="rgb(233,202,47)" rx="2" ry="2" />
<text  x="1142.66" y="511.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::write_dma (1 samples, 0.02%)</title><rect x="87.3" y="277" width="0.2" height="15.0" fill="rgb(212,101,51)" rx="2" ry="2" />
<text  x="90.32" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="449.9" y="245" width="0.2" height="15.0" fill="rgb(205,96,10)" rx="2" ry="2" />
<text  x="452.89" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="281.2" y="213" width="0.2" height="15.0" fill="rgb(206,99,39)" rx="2" ry="2" />
<text  x="284.19" y="223.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="1094.1" y="373" width="0.2" height="15.0" fill="rgb(228,161,16)" rx="2" ry="2" />
<text  x="1097.09" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="428.6" y="181" width="0.2" height="15.0" fill="rgb(231,207,0)" rx="2" ry="2" />
<text  x="431.58" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="10.7" y="197" width="0.2" height="15.0" fill="rgb(226,128,5)" rx="2" ry="2" />
<text  x="13.68" y="207.5" ></text>
</g>
<g >
<title>cache_entry::~cache_entry (1 samples, 0.02%)</title><rect x="88.2" y="469" width="0.3" height="15.0" fill="rgb(234,59,19)" rx="2" ry="2" />
<text  x="91.23" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (2 samples, 0.04%)</title><rect x="1032.0" y="213" width="0.4" height="15.0" fill="rgb(249,55,15)" rx="2" ry="2" />
<text  x="1034.96" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="447.9" y="277" width="0.2" height="15.0" fill="rgb(220,153,42)" rx="2" ry="2" />
<text  x="450.85" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (2 samples, 0.04%)</title><rect x="869.6" y="277" width="0.5" height="15.0" fill="rgb(212,215,11)" rx="2" ry="2" />
<text  x="872.60" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (33 samples, 0.63%)</title><rect x="100.7" y="485" width="7.5" height="15.0" fill="rgb(241,189,43)" rx="2" ry="2" />
<text  x="103.70" y="495.5" ></text>
</g>
<g >
<title>database::~database (1 samples, 0.02%)</title><rect x="700.0" y="325" width="0.2" height="15.0" fill="rgb(241,164,48)" rx="2" ry="2" />
<text  x="703.00" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="114.3" y="389" width="0.2" height="15.0" fill="rgb(246,152,38)" rx="2" ry="2" />
<text  x="117.30" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (37 samples, 0.71%)</title><rect x="748.1" y="389" width="8.4" height="15.0" fill="rgb(241,171,5)" rx="2" ry="2" />
<text  x="751.07" y="399.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="463.7" y="341" width="0.3" height="15.0" fill="rgb(233,52,24)" rx="2" ry="2" />
<text  x="466.72" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="843.3" y="389" width="0.2" height="15.0" fill="rgb(209,12,19)" rx="2" ry="2" />
<text  x="846.30" y="399.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="156.9" y="437" width="2.1" height="15.0" fill="rgb(228,136,47)" rx="2" ry="2" />
<text  x="159.93" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1126.7" y="197" width="0.9" height="15.0" fill="rgb(229,36,13)" rx="2" ry="2" />
<text  x="1129.74" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (1 samples, 0.02%)</title><rect x="872.3" y="405" width="0.3" height="15.0" fill="rgb(236,226,32)" rx="2" ry="2" />
<text  x="875.33" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="53.5" y="229" width="0.5" height="15.0" fill="rgb(242,39,16)" rx="2" ry="2" />
<text  x="56.54" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mR (1 samples, 0.02%)</title><rect x="40.6" y="261" width="0.2" height="15.0" fill="rgb(233,177,44)" rx="2" ry="2" />
<text  x="43.61" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%)</title><rect x="1025.8" y="149" width="0.5" height="15.0" fill="rgb(222,213,49)" rx="2" ry="2" />
<text  x="1028.83" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%)</title><rect x="785.9" y="293" width="0.7" height="15.0" fill="rgb(233,96,53)" rx="2" ry="2" />
<text  x="788.93" y="303.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="820.2" y="373" width="1.3" height="15.0" fill="rgb(223,145,19)" rx="2" ry="2" />
<text  x="823.17" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="55.3" y="181" width="0.5" height="15.0" fill="rgb(248,51,22)" rx="2" ry="2" />
<text  x="58.35" y="191.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="847.4" y="421" width="0.2" height="15.0" fill="rgb(225,163,19)" rx="2" ry="2" />
<text  x="850.38" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (481 samples, 9.24%)</title><rect x="457.6" y="421" width="109.1" height="15.0" fill="rgb(229,101,25)" rx="2" ry="2" />
<text  x="460.60" y="431.5" >query::querie..</text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1153.5" y="373" width="0.7" height="15.0" fill="rgb(235,12,35)" rx="2" ry="2" />
<text  x="1156.49" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="23.6" y="421" width="0.2" height="15.0" fill="rgb(222,106,21)" rx="2" ry="2" />
<text  x="26.60" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%)</title><rect x="721.5" y="485" width="0.3" height="15.0" fill="rgb(218,106,24)" rx="2" ry="2" />
<text  x="724.54" y="495.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (8 samples, 0.15%)</title><rect x="10.9" y="453" width="1.8" height="15.0" fill="rgb(237,76,15)" rx="2" ry="2" />
<text  x="13.91" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (3 samples, 0.06%)</title><rect x="477.6" y="293" width="0.6" height="15.0" fill="rgb(225,53,26)" rx="2" ry="2" />
<text  x="480.56" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="673.5" y="469" width="0.2" height="15.0" fill="rgb(254,175,51)" rx="2" ry="2" />
<text  x="676.47" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (12 samples, 0.23%)</title><rect x="557.8" y="277" width="2.7" height="15.0" fill="rgb(225,166,12)" rx="2" ry="2" />
<text  x="560.82" y="287.5" ></text>
</g>
<g >
<title>db::filter_for_query (7 samples, 0.13%)</title><rect x="1051.5" y="341" width="1.5" height="15.0" fill="rgb(213,11,42)" rx="2" ry="2" />
<text  x="1054.46" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (5 samples, 0.10%)</title><rect x="479.6" y="277" width="1.1" height="15.0" fill="rgb(223,217,39)" rx="2" ry="2" />
<text  x="482.60" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="356.7" y="181" width="0.2" height="15.0" fill="rgb(232,151,24)" rx="2" ry="2" />
<text  x="359.70" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (2 samples, 0.04%)</title><rect x="871.0" y="357" width="0.4" height="15.0" fill="rgb(253,154,20)" rx="2" ry="2" />
<text  x="873.96" y="367.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,769 samples, 91.64%)</title><rect x="88.5" y="565" width="1081.3" height="15.0" fill="rgb(242,171,25)" rx="2" ry="2" />
<text  x="91.46" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (3 samples, 0.06%)</title><rect x="114.8" y="405" width="0.6" height="15.0" fill="rgb(254,150,16)" rx="2" ry="2" />
<text  x="117.76" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1048.3" y="309" width="0.2" height="15.0" fill="rgb(234,158,40)" rx="2" ry="2" />
<text  x="1051.28" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="797.7" y="213" width="0.3" height="15.0" fill="rgb(222,60,37)" rx="2" ry="2" />
<text  x="800.72" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (8 samples, 0.15%)</title><rect x="341.1" y="261" width="1.8" height="15.0" fill="rgb(254,12,11)" rx="2" ry="2" />
<text  x="344.05" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="87.8" y="405" width="0.2" height="15.0" fill="rgb(212,147,0)" rx="2" ry="2" />
<text  x="90.77" y="415.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%)</title><rect x="1078.0" y="261" width="0.2" height="15.0" fill="rgb(248,21,21)" rx="2" ry="2" />
<text  x="1080.99" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="52.9" y="181" width="0.4" height="15.0" fill="rgb(205,127,42)" rx="2" ry="2" />
<text  x="55.86" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (1 samples, 0.02%)</title><rect x="992.5" y="325" width="0.2" height="15.0" fill="rgb(211,217,49)" rx="2" ry="2" />
<text  x="995.50" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.23%)</title><rect x="101.8" y="469" width="2.8" height="15.0" fill="rgb(217,108,6)" rx="2" ry="2" />
<text  x="104.83" y="479.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="117.0" y="341" width="0.3" height="15.0" fill="rgb(244,178,49)" rx="2" ry="2" />
<text  x="120.03" y="351.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="656.5" y="485" width="0.4" height="15.0" fill="rgb(211,101,37)" rx="2" ry="2" />
<text  x="659.46" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="88.2" y="533" width="0.3" height="15.0" fill="rgb(231,80,48)" rx="2" ry="2" />
<text  x="91.23" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;long&gt; &gt;::skip&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="115.4" y="373" width="0.3" height="15.0" fill="rgb(223,159,50)" rx="2" ry="2" />
<text  x="118.44" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="54.9" y="293" width="0.2" height="15.0" fill="rgb(212,125,38)" rx="2" ry="2" />
<text  x="57.90" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (1 samples, 0.02%)</title><rect x="741.9" y="405" width="0.3" height="15.0" fill="rgb(229,229,44)" rx="2" ry="2" />
<text  x="744.94" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="756.9" y="389" width="1.1" height="15.0" fill="rgb(241,204,45)" rx="2" ry="2" />
<text  x="759.91" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="457.4" y="405" width="0.2" height="15.0" fill="rgb(243,200,15)" rx="2" ry="2" />
<text  x="460.38" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1125.4" y="421" width="6.8" height="15.0" fill="rgb(250,225,42)" rx="2" ry="2" />
<text  x="1128.38" y="431.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (3 samples, 0.06%)</title><rect x="115.7" y="453" width="0.6" height="15.0" fill="rgb(242,73,43)" rx="2" ry="2" />
<text  x="118.66" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1136.9" y="149" width="0.3" height="15.0" fill="rgb(225,181,22)" rx="2" ry="2" />
<text  x="1139.94" y="159.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="544.7" y="325" width="0.9" height="15.0" fill="rgb(253,8,51)" rx="2" ry="2" />
<text  x="547.67" y="335.5" ></text>
</g>
<g >
<title>cql3::get_cql3_kind (1 samples, 0.02%)</title><rect x="76.4" y="341" width="0.3" height="15.0" fill="rgb(239,132,12)" rx="2" ry="2" />
<text  x="79.44" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="514.3" y="197" width="0.2" height="15.0" fill="rgb(254,224,4)" rx="2" ry="2" />
<text  x="517.29" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="681.4" y="469" width="0.2" height="15.0" fill="rgb(214,86,11)" rx="2" ry="2" />
<text  x="684.40" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="27.2" y="341" width="0.3" height="15.0" fill="rgb(242,213,53)" rx="2" ry="2" />
<text  x="30.23" y="351.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1038.5" y="261" width="0.3" height="15.0" fill="rgb(223,228,14)" rx="2" ry="2" />
<text  x="1041.53" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (5 samples, 0.10%)</title><rect x="362.4" y="181" width="1.1" height="15.0" fill="rgb(219,56,9)" rx="2" ry="2" />
<text  x="365.37" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1058.9" y="293" width="0.3" height="15.0" fill="rgb(224,197,22)" rx="2" ry="2" />
<text  x="1061.94" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="678.7" y="421" width="0.2" height="15.0" fill="rgb(238,159,1)" rx="2" ry="2" />
<text  x="681.68" y="431.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="360.3" y="165" width="0.5" height="15.0" fill="rgb(253,172,49)" rx="2" ry="2" />
<text  x="363.33" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="123.4" y="469" width="0.7" height="15.0" fill="rgb(220,204,7)" rx="2" ry="2" />
<text  x="126.37" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="863.0" y="405" width="0.3" height="15.0" fill="rgb(241,6,16)" rx="2" ry="2" />
<text  x="866.03" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="640.6" y="437" width="0.2" height="15.0" fill="rgb(237,78,16)" rx="2" ry="2" />
<text  x="643.59" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1076.9" y="261" width="0.2" height="15.0" fill="rgb(238,105,11)" rx="2" ry="2" />
<text  x="1079.85" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="709.5" y="469" width="0.2" height="15.0" fill="rgb(251,24,2)" rx="2" ry="2" />
<text  x="712.52" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="585.5" y="293" width="0.7" height="15.0" fill="rgb(247,67,32)" rx="2" ry="2" />
<text  x="588.49" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (44 samples, 0.85%)</title><rect x="193.0" y="277" width="10.0" height="15.0" fill="rgb(249,218,32)" rx="2" ry="2" />
<text  x="195.99" y="287.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1052.1" y="325" width="0.3" height="15.0" fill="rgb(207,81,38)" rx="2" ry="2" />
<text  x="1055.14" y="335.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.06%)</title><rect x="886.6" y="421" width="0.7" height="15.0" fill="rgb(233,92,0)" rx="2" ry="2" />
<text  x="889.61" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="439.7" y="165" width="0.4" height="15.0" fill="rgb(210,152,38)" rx="2" ry="2" />
<text  x="442.69" y="175.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (6 samples, 0.12%)</title><rect x="281.0" y="229" width="1.3" height="15.0" fill="rgb(221,136,52)" rx="2" ry="2" />
<text  x="283.96" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%)</title><rect x="752.4" y="325" width="2.5" height="15.0" fill="rgb(220,36,8)" rx="2" ry="2" />
<text  x="755.38" y="335.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1015.4" y="245" width="0.2" height="15.0" fill="rgb(215,0,7)" rx="2" ry="2" />
<text  x="1018.40" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="660.5" y="453" width="0.3" height="15.0" fill="rgb(212,170,12)" rx="2" ry="2" />
<text  x="663.54" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="854.4" y="437" width="0.2" height="15.0" fill="rgb(213,66,36)" rx="2" ry="2" />
<text  x="857.41" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.19%)</title><rect x="47.2" y="357" width="2.3" height="15.0" fill="rgb(232,155,23)" rx="2" ry="2" />
<text  x="50.19" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="1029.2" y="197" width="2.8" height="15.0" fill="rgb(225,45,37)" rx="2" ry="2" />
<text  x="1032.24" y="207.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.10%)</title><rect x="1077.3" y="309" width="1.1" height="15.0" fill="rgb(208,112,4)" rx="2" ry="2" />
<text  x="1080.31" y="319.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="519.7" y="293" width="0.9" height="15.0" fill="rgb(249,87,7)" rx="2" ry="2" />
<text  x="522.73" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="59.4" y="293" width="0.3" height="15.0" fill="rgb(227,97,20)" rx="2" ry="2" />
<text  x="62.43" y="303.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (60 samples, 1.15%)</title><rect x="745.1" y="421" width="13.6" height="15.0" fill="rgb(231,3,24)" rx="2" ry="2" />
<text  x="748.12" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="831.5" y="309" width="0.2" height="15.0" fill="rgb(242,7,14)" rx="2" ry="2" />
<text  x="834.51" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="605.0" y="341" width="0.2" height="15.0" fill="rgb(249,138,41)" rx="2" ry="2" />
<text  x="607.99" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="641.7" y="373" width="0.2" height="15.0" fill="rgb(213,180,9)" rx="2" ry="2" />
<text  x="644.72" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1093.9" y="373" width="0.2" height="15.0" fill="rgb(210,170,13)" rx="2" ry="2" />
<text  x="1096.86" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="668.7" y="469" width="0.2" height="15.0" fill="rgb(218,145,9)" rx="2" ry="2" />
<text  x="671.70" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1061.4" y="341" width="0.3" height="15.0" fill="rgb(212,63,10)" rx="2" ry="2" />
<text  x="1064.43" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (16 samples, 0.31%)</title><rect x="270.5" y="165" width="3.7" height="15.0" fill="rgb(211,22,30)" rx="2" ry="2" />
<text  x="273.53" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="870.7" y="357" width="0.3" height="15.0" fill="rgb(237,77,46)" rx="2" ry="2" />
<text  x="873.74" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="813.8" y="325" width="0.3" height="15.0" fill="rgb(213,98,14)" rx="2" ry="2" />
<text  x="816.82" y="335.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1050.8" y="325" width="0.2" height="15.0" fill="rgb(214,31,38)" rx="2" ry="2" />
<text  x="1053.78" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="10.9" y="501" width="3.2" height="15.0" fill="rgb(214,105,38)" rx="2" ry="2" />
<text  x="13.91" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="328.6" y="277" width="0.2" height="15.0" fill="rgb(218,148,20)" rx="2" ry="2" />
<text  x="331.58" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="856.2" y="389" width="0.3" height="15.0" fill="rgb(218,93,19)" rx="2" ry="2" />
<text  x="859.23" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="114.8" y="453" width="0.6" height="15.0" fill="rgb(241,68,50)" rx="2" ry="2" />
<text  x="117.76" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="166.2" y="405" width="0.3" height="15.0" fill="rgb(244,224,33)" rx="2" ry="2" />
<text  x="169.23" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="824.5" y="309" width="2.0" height="15.0" fill="rgb(210,131,28)" rx="2" ry="2" />
<text  x="827.48" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="88.0" y="485" width="0.2" height="15.0" fill="rgb(248,172,2)" rx="2" ry="2" />
<text  x="91.00" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="348.8" y="245" width="0.4" height="15.0" fill="rgb(229,167,17)" rx="2" ry="2" />
<text  x="351.76" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="658.7" y="485" width="0.3" height="15.0" fill="rgb(224,91,39)" rx="2" ry="2" />
<text  x="661.73" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="45.4" y="229" width="0.2" height="15.0" fill="rgb(248,76,29)" rx="2" ry="2" />
<text  x="48.37" y="239.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_still_allocating (1 samples, 0.02%)</title><rect x="1131.7" y="277" width="0.3" height="15.0" fill="rgb(214,19,26)" rx="2" ry="2" />
<text  x="1134.73" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="704.8" y="453" width="0.2" height="15.0" fill="rgb(206,15,41)" rx="2" ry="2" />
<text  x="707.76" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="60.6" y="181" width="0.2" height="15.0" fill="rgb(227,78,36)" rx="2" ry="2" />
<text  x="63.56" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.38%)</title><rect x="442.6" y="261" width="4.6" height="15.0" fill="rgb(237,222,13)" rx="2" ry="2" />
<text  x="445.64" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="278.0" y="181" width="0.2" height="15.0" fill="rgb(205,86,27)" rx="2" ry="2" />
<text  x="281.02" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="114.1" y="437" width="0.2" height="15.0" fill="rgb(227,177,28)" rx="2" ry="2" />
<text  x="117.08" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="541.3" y="277" width="0.2" height="15.0" fill="rgb(221,81,40)" rx="2" ry="2" />
<text  x="544.27" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="283.7" y="213" width="0.4" height="15.0" fill="rgb(237,135,36)" rx="2" ry="2" />
<text  x="286.69" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (2 samples, 0.04%)</title><rect x="952.1" y="405" width="0.5" height="15.0" fill="rgb(208,17,16)" rx="2" ry="2" />
<text  x="955.14" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_text[abi:cxx11] (1 samples, 0.02%)</title><rect x="36.5" y="261" width="0.3" height="15.0" fill="rgb(214,0,12)" rx="2" ry="2" />
<text  x="39.53" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (4 samples, 0.08%)</title><rect x="659.6" y="389" width="0.9" height="15.0" fill="rgb(231,133,24)" rx="2" ry="2" />
<text  x="662.63" y="399.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1136.7" y="133" width="0.2" height="15.0" fill="rgb(219,112,24)" rx="2" ry="2" />
<text  x="1139.71" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="699.5" y="485" width="0.3" height="15.0" fill="rgb(243,173,11)" rx="2" ry="2" />
<text  x="702.54" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="833.3" y="405" width="0.3" height="15.0" fill="rgb(239,98,11)" rx="2" ry="2" />
<text  x="836.32" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="767.8" y="325" width="0.2" height="15.0" fill="rgb(221,206,6)" rx="2" ry="2" />
<text  x="770.79" y="335.5" ></text>
</g>
<g >
<title>multishard_combining_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="181" width="0.2" height="15.0" fill="rgb(217,61,9)" rx="2" ry="2" />
<text  x="26.60" y="191.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="80.1" y="293" width="0.2" height="15.0" fill="rgb(212,184,36)" rx="2" ry="2" />
<text  x="83.07" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="79.6" y="341" width="0.2" height="15.0" fill="rgb(218,197,41)" rx="2" ry="2" />
<text  x="82.61" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="66.9" y="229" width="0.2" height="15.0" fill="rgb(230,53,23)" rx="2" ry="2" />
<text  x="69.91" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="664.2" y="437" width="0.9" height="15.0" fill="rgb(220,208,42)" rx="2" ry="2" />
<text  x="667.17" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="1049.4" y="293" width="0.2" height="15.0" fill="rgb(232,88,20)" rx="2" ry="2" />
<text  x="1052.42" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="337.4" y="293" width="0.5" height="15.0" fill="rgb(224,82,19)" rx="2" ry="2" />
<text  x="340.43" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="964.6" y="373" width="0.2" height="15.0" fill="rgb(207,190,6)" rx="2" ry="2" />
<text  x="967.61" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="52.4" y="293" width="0.5" height="15.0" fill="rgb(245,137,8)" rx="2" ry="2" />
<text  x="55.40" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="998.9" y="293" width="0.2" height="15.0" fill="rgb(229,223,13)" rx="2" ry="2" />
<text  x="1001.85" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="721.1" y="485" width="0.2" height="15.0" fill="rgb(247,145,36)" rx="2" ry="2" />
<text  x="724.08" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.7" y="229" width="0.3" height="15.0" fill="rgb(224,196,48)" rx="2" ry="2" />
<text  x="88.73" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="630.6" y="437" width="0.5" height="15.0" fill="rgb(237,153,38)" rx="2" ry="2" />
<text  x="633.61" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (31 samples, 0.60%)</title><rect x="531.3" y="245" width="7.0" height="15.0" fill="rgb(232,11,10)" rx="2" ry="2" />
<text  x="534.30" y="255.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="442.4" y="261" width="0.2" height="15.0" fill="rgb(242,76,25)" rx="2" ry="2" />
<text  x="445.41" y="271.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="61.0" y="229" width="0.2" height="15.0" fill="rgb(223,209,22)" rx="2" ry="2" />
<text  x="64.02" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="61.2" y="277" width="0.5" height="15.0" fill="rgb(242,149,27)" rx="2" ry="2" />
<text  x="64.25" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="996.6" y="277" width="0.2" height="15.0" fill="rgb(247,133,8)" rx="2" ry="2" />
<text  x="999.58" y="287.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="653.1" y="485" width="0.9" height="15.0" fill="rgb(207,158,13)" rx="2" ry="2" />
<text  x="656.06" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="738.1" y="341" width="0.2" height="15.0" fill="rgb(236,32,11)" rx="2" ry="2" />
<text  x="741.09" y="351.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="601.1" y="341" width="0.3" height="15.0" fill="rgb(245,20,49)" rx="2" ry="2" />
<text  x="604.13" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="14.1" y="485" width="0.2" height="15.0" fill="rgb(249,135,13)" rx="2" ry="2" />
<text  x="17.08" y="495.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="23.6" y="261" width="0.2" height="15.0" fill="rgb(245,163,9)" rx="2" ry="2" />
<text  x="26.60" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="871.6" y="389" width="0.3" height="15.0" fill="rgb(240,140,31)" rx="2" ry="2" />
<text  x="874.64" y="399.5" ></text>
</g>
<g >
<title>database::has_keyspace (3 samples, 0.06%)</title><rect x="83.5" y="421" width="0.6" height="15.0" fill="rgb(229,79,20)" rx="2" ry="2" />
<text  x="86.47" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%)</title><rect x="273.7" y="149" width="0.5" height="15.0" fill="rgb(246,117,16)" rx="2" ry="2" />
<text  x="276.71" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="846.0" y="405" width="1.4" height="15.0" fill="rgb(206,137,31)" rx="2" ry="2" />
<text  x="849.02" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="54.9" y="325" width="0.2" height="15.0" fill="rgb(232,107,1)" rx="2" ry="2" />
<text  x="57.90" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="805.0" y="117" width="1.6" height="15.0" fill="rgb(228,84,40)" rx="2" ry="2" />
<text  x="807.98" y="127.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%)</title><rect x="27.7" y="421" width="0.4" height="15.0" fill="rgb(207,120,20)" rx="2" ry="2" />
<text  x="30.69" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="640.4" y="437" width="0.2" height="15.0" fill="rgb(236,188,7)" rx="2" ry="2" />
<text  x="643.36" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1049.6" y="325" width="0.7" height="15.0" fill="rgb(210,224,52)" rx="2" ry="2" />
<text  x="1052.64" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="864.4" y="325" width="0.2" height="15.0" fill="rgb(254,160,4)" rx="2" ry="2" />
<text  x="867.39" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="716.3" y="405" width="0.5" height="15.0" fill="rgb(234,86,10)" rx="2" ry="2" />
<text  x="719.32" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1138.5" y="341" width="0.3" height="15.0" fill="rgb(211,210,15)" rx="2" ry="2" />
<text  x="1141.53" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="932.6" y="405" width="0.7" height="15.0" fill="rgb(248,182,19)" rx="2" ry="2" />
<text  x="935.64" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="701.6" y="469" width="0.7" height="15.0" fill="rgb(241,41,15)" rx="2" ry="2" />
<text  x="704.58" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="46.1" y="293" width="0.9" height="15.0" fill="rgb(234,108,29)" rx="2" ry="2" />
<text  x="49.05" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="756.5" y="405" width="0.2" height="15.0" fill="rgb(249,209,33)" rx="2" ry="2" />
<text  x="759.46" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::reap_kernel_completions_pollfn::poll (1 samples, 0.02%)</title><rect x="90.5" y="517" width="0.2" height="15.0" fill="rgb(253,60,11)" rx="2" ry="2" />
<text  x="93.50" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="863.3" y="501" width="0.2" height="15.0" fill="rgb(225,73,27)" rx="2" ry="2" />
<text  x="866.26" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="26.3" y="389" width="0.3" height="15.0" fill="rgb(219,12,50)" rx="2" ry="2" />
<text  x="29.33" y="399.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1137.8" y="133" width="0.3" height="15.0" fill="rgb(241,166,4)" rx="2" ry="2" />
<text  x="1140.85" y="143.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (7 samples, 0.13%)</title><rect x="337.2" y="309" width="1.6" height="15.0" fill="rgb(244,42,39)" rx="2" ry="2" />
<text  x="340.20" y="319.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="868.7" y="325" width="2.0" height="15.0" fill="rgb(248,220,6)" rx="2" ry="2" />
<text  x="871.70" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%)</title><rect x="717.9" y="453" width="0.5" height="15.0" fill="rgb(212,153,18)" rx="2" ry="2" />
<text  x="720.91" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.4" y="261" width="0.5" height="15.0" fill="rgb(220,43,34)" rx="2" ry="2" />
<text  x="57.44" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="346.3" y="261" width="0.6" height="15.0" fill="rgb(242,83,54)" rx="2" ry="2" />
<text  x="349.27" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1129.5" y="213" width="0.2" height="15.0" fill="rgb(205,13,52)" rx="2" ry="2" />
<text  x="1132.46" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="306.4" y="277" width="0.4" height="15.0" fill="rgb(225,67,14)" rx="2" ry="2" />
<text  x="309.36" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="31.8" y="149" width="0.2" height="15.0" fill="rgb(219,117,3)" rx="2" ry="2" />
<text  x="34.77" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="23.8" y="357" width="0.3" height="15.0" fill="rgb(229,194,15)" rx="2" ry="2" />
<text  x="26.83" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="87.8" y="469" width="0.2" height="15.0" fill="rgb(246,159,21)" rx="2" ry="2" />
<text  x="90.77" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="66.7" y="149" width="0.2" height="15.0" fill="rgb(235,109,31)" rx="2" ry="2" />
<text  x="69.69" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (3 samples, 0.06%)</title><rect x="807.5" y="261" width="0.7" height="15.0" fill="rgb(216,33,48)" rx="2" ry="2" />
<text  x="810.48" y="271.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.10%)</title><rect x="85.3" y="373" width="1.1" height="15.0" fill="rgb(242,221,7)" rx="2" ry="2" />
<text  x="88.28" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="76.9" y="373" width="0.2" height="15.0" fill="rgb(216,65,53)" rx="2" ry="2" />
<text  x="79.89" y="383.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="12.3" y="213" width="0.2" height="15.0" fill="rgb(230,178,14)" rx="2" ry="2" />
<text  x="15.27" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="88.2" y="613" width="0.3" height="15.0" fill="rgb(209,78,43)" rx="2" ry="2" />
<text  x="91.23" y="623.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="59.0" y="213" width="0.4" height="15.0" fill="rgb(221,83,48)" rx="2" ry="2" />
<text  x="61.98" y="223.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%)</title><rect x="804.3" y="117" width="0.5" height="15.0" fill="rgb(221,214,49)" rx="2" ry="2" />
<text  x="807.30" y="127.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="137.9" y="389" width="0.2" height="15.0" fill="rgb(238,131,24)" rx="2" ry="2" />
<text  x="140.89" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1053.0" y="341" width="0.3" height="15.0" fill="rgb(249,23,22)" rx="2" ry="2" />
<text  x="1056.04" y="351.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1135.4" y="213" width="0.2" height="15.0" fill="rgb(221,140,32)" rx="2" ry="2" />
<text  x="1138.35" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="525.4" y="277" width="0.5" height="15.0" fill="rgb(239,161,26)" rx="2" ry="2" />
<text  x="528.40" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (2 samples, 0.04%)</title><rect x="26.6" y="421" width="0.4" height="15.0" fill="rgb(209,21,22)" rx="2" ry="2" />
<text  x="29.55" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="476.2" y="277" width="0.2" height="15.0" fill="rgb(228,8,43)" rx="2" ry="2" />
<text  x="479.20" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="870.5" y="229" width="0.2" height="15.0" fill="rgb(237,59,48)" rx="2" ry="2" />
<text  x="873.51" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="671.4" y="421" width="0.3" height="15.0" fill="rgb(239,150,48)" rx="2" ry="2" />
<text  x="674.43" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="627.4" y="405" width="0.3" height="15.0" fill="rgb(245,28,29)" rx="2" ry="2" />
<text  x="630.44" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (1 samples, 0.02%)</title><rect x="1189.8" y="597" width="0.2" height="15.0" fill="rgb(211,131,19)" rx="2" ry="2" />
<text  x="1192.77" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (3 samples, 0.06%)</title><rect x="28.1" y="389" width="0.7" height="15.0" fill="rgb(234,130,5)" rx="2" ry="2" />
<text  x="31.14" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="859.9" y="453" width="0.2" height="15.0" fill="rgb(215,137,2)" rx="2" ry="2" />
<text  x="862.85" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="47.4" y="261" width="0.2" height="15.0" fill="rgb(220,78,22)" rx="2" ry="2" />
<text  x="50.41" y="271.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="296.2" y="181" width="0.4" height="15.0" fill="rgb(235,120,41)" rx="2" ry="2" />
<text  x="299.16" y="191.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (6 samples, 0.12%)</title><rect x="760.1" y="389" width="1.3" height="15.0" fill="rgb(245,128,54)" rx="2" ry="2" />
<text  x="763.08" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (15 samples, 0.29%)</title><rect x="652.6" y="501" width="3.4" height="15.0" fill="rgb(220,37,24)" rx="2" ry="2" />
<text  x="655.61" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (44 samples, 0.85%)</title><rect x="467.1" y="309" width="10.0" height="15.0" fill="rgb(246,45,19)" rx="2" ry="2" />
<text  x="470.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="764.8" y="357" width="0.3" height="15.0" fill="rgb(250,150,10)" rx="2" ry="2" />
<text  x="767.85" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (3 samples, 0.06%)</title><rect x="12.9" y="405" width="0.7" height="15.0" fill="rgb(218,213,33)" rx="2" ry="2" />
<text  x="15.95" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="806.8" y="197" width="0.2" height="15.0" fill="rgb(233,57,50)" rx="2" ry="2" />
<text  x="809.79" y="207.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="116.3" y="389" width="0.3" height="15.0" fill="rgb(242,68,38)" rx="2" ry="2" />
<text  x="119.35" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="294.3" y="213" width="0.3" height="15.0" fill="rgb(228,225,54)" rx="2" ry="2" />
<text  x="297.34" y="223.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(217,3,38)" rx="2" ry="2" />
<text  x="13.68" y="607.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="536.7" y="165" width="0.3" height="15.0" fill="rgb(240,104,33)" rx="2" ry="2" />
<text  x="539.74" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="22.7" y="533" width="0.2" height="15.0" fill="rgb(224,166,38)" rx="2" ry="2" />
<text  x="25.70" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="746.5" y="389" width="0.2" height="15.0" fill="rgb(243,67,33)" rx="2" ry="2" />
<text  x="749.48" y="399.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="117.3" y="501" width="0.2" height="15.0" fill="rgb(249,51,13)" rx="2" ry="2" />
<text  x="120.25" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="684.8" y="469" width="0.2" height="15.0" fill="rgb(206,171,1)" rx="2" ry="2" />
<text  x="687.80" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="200.7" y="213" width="0.4" height="15.0" fill="rgb(218,119,44)" rx="2" ry="2" />
<text  x="203.70" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (44 samples, 0.85%)</title><rect x="34.3" y="277" width="9.9" height="15.0" fill="rgb(244,203,27)" rx="2" ry="2" />
<text  x="37.26" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="647.6" y="485" width="0.2" height="15.0" fill="rgb(234,217,26)" rx="2" ry="2" />
<text  x="650.62" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (5 samples, 0.10%)</title><rect x="638.8" y="437" width="1.1" height="15.0" fill="rgb(228,116,18)" rx="2" ry="2" />
<text  x="641.77" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="788.7" y="277" width="1.1" height="15.0" fill="rgb(237,19,44)" rx="2" ry="2" />
<text  x="791.65" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="756.9" y="405" width="1.1" height="15.0" fill="rgb(208,196,4)" rx="2" ry="2" />
<text  x="759.91" y="415.5" ></text>
</g>
<g >
<title>dht::minimum_token (1 samples, 0.02%)</title><rect x="465.5" y="325" width="0.3" height="15.0" fill="rgb(252,191,13)" rx="2" ry="2" />
<text  x="468.54" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&amp;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;**&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="28.6" y="325" width="0.2" height="15.0" fill="rgb(252,143,16)" rx="2" ry="2" />
<text  x="31.59" y="335.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1125.4" y="469" width="6.8" height="15.0" fill="rgb(242,46,9)" rx="2" ry="2" />
<text  x="1128.38" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%)</title><rect x="1131.3" y="261" width="0.4" height="15.0" fill="rgb(213,142,7)" rx="2" ry="2" />
<text  x="1134.27" y="271.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="516.8" y="309" width="0.4" height="15.0" fill="rgb(228,73,9)" rx="2" ry="2" />
<text  x="519.78" y="319.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="970.3" y="357" width="3.2" height="15.0" fill="rgb(233,139,38)" rx="2" ry="2" />
<text  x="973.28" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (5 samples, 0.10%)</title><rect x="748.7" y="325" width="1.2" height="15.0" fill="rgb(251,228,52)" rx="2" ry="2" />
<text  x="751.75" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (2 samples, 0.04%)</title><rect x="115.7" y="293" width="0.4" height="15.0" fill="rgb(244,194,1)" rx="2" ry="2" />
<text  x="118.66" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="46.1" y="341" width="0.9" height="15.0" fill="rgb(235,218,15)" rx="2" ry="2" />
<text  x="49.05" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::close_writer (1 samples, 0.02%)</title><rect x="87.3" y="485" width="0.2" height="15.0" fill="rgb(230,170,24)" rx="2" ry="2" />
<text  x="90.32" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="61.5" y="245" width="0.2" height="15.0" fill="rgb(209,49,17)" rx="2" ry="2" />
<text  x="64.47" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (2 samples, 0.04%)</title><rect x="1081.6" y="357" width="0.5" height="15.0" fill="rgb(230,113,25)" rx="2" ry="2" />
<text  x="1084.61" y="367.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%)</title><rect x="23.8" y="469" width="0.3" height="15.0" fill="rgb(235,172,16)" rx="2" ry="2" />
<text  x="26.83" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="61.0" y="69" width="0.2" height="15.0" fill="rgb(252,61,2)" rx="2" ry="2" />
<text  x="64.02" y="79.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (12 samples, 0.23%)</title><rect x="535.4" y="229" width="2.7" height="15.0" fill="rgb(230,12,51)" rx="2" ry="2" />
<text  x="538.38" y="239.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="1133.5" y="165" width="0.3" height="15.0" fill="rgb(248,108,18)" rx="2" ry="2" />
<text  x="1136.54" y="175.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (33 samples, 0.63%)</title><rect x="1063.7" y="261" width="7.5" height="15.0" fill="rgb(248,161,53)" rx="2" ry="2" />
<text  x="1066.70" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="23.2" y="549" width="0.2" height="15.0" fill="rgb(244,93,20)" rx="2" ry="2" />
<text  x="26.15" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="894.5" y="389" width="0.7" height="15.0" fill="rgb(242,74,4)" rx="2" ry="2" />
<text  x="897.55" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (13 samples, 0.25%)</title><rect x="702.3" y="469" width="2.9" height="15.0" fill="rgb(207,130,49)" rx="2" ry="2" />
<text  x="705.26" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="71.7" y="341" width="0.2" height="15.0" fill="rgb(241,69,41)" rx="2" ry="2" />
<text  x="74.68" y="351.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (1 samples, 0.02%)</title><rect x="976.9" y="357" width="0.2" height="15.0" fill="rgb(222,124,40)" rx="2" ry="2" />
<text  x="979.86" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="285.5" y="261" width="0.2" height="15.0" fill="rgb(228,59,35)" rx="2" ry="2" />
<text  x="288.50" y="271.5" ></text>
</g>
<g >
<title>database::add_column_family (1 samples, 0.02%)</title><rect x="114.1" y="261" width="0.2" height="15.0" fill="rgb(210,159,1)" rx="2" ry="2" />
<text  x="117.08" y="271.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1127.6" y="213" width="0.3" height="15.0" fill="rgb(230,21,26)" rx="2" ry="2" />
<text  x="1130.64" y="223.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (43 samples, 0.83%)</title><rect x="493.7" y="293" width="9.7" height="15.0" fill="rgb(205,53,37)" rx="2" ry="2" />
<text  x="496.65" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%)</title><rect x="1014.7" y="245" width="0.7" height="15.0" fill="rgb(249,119,47)" rx="2" ry="2" />
<text  x="1017.72" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="729.5" y="421" width="0.2" height="15.0" fill="rgb(207,219,40)" rx="2" ry="2" />
<text  x="732.47" y="431.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="1107.0" y="421" width="0.2" height="15.0" fill="rgb(228,204,47)" rx="2" ry="2" />
<text  x="1110.01" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1117.7" y="421" width="0.2" height="15.0" fill="rgb(222,33,21)" rx="2" ry="2" />
<text  x="1120.67" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="116.8" y="261" width="0.2" height="15.0" fill="rgb(240,140,40)" rx="2" ry="2" />
<text  x="119.80" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="675.1" y="485" width="0.2" height="15.0" fill="rgb(222,102,35)" rx="2" ry="2" />
<text  x="678.05" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="68.3" y="53" width="0.2" height="15.0" fill="rgb(241,14,16)" rx="2" ry="2" />
<text  x="71.27" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (4 samples, 0.08%)</title><rect x="1156.9" y="453" width="0.9" height="15.0" fill="rgb(243,52,51)" rx="2" ry="2" />
<text  x="1159.89" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%)</title><rect x="705.0" y="453" width="0.2" height="15.0" fill="rgb(230,8,9)" rx="2" ry="2" />
<text  x="707.98" y="463.5" ></text>
</g>
<g >
<title>database::add_column_family (6 samples, 0.12%)</title><rect x="115.7" y="485" width="1.3" height="15.0" fill="rgb(243,134,38)" rx="2" ry="2" />
<text  x="118.66" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1004.7" y="277" width="0.3" height="15.0" fill="rgb(233,183,49)" rx="2" ry="2" />
<text  x="1007.75" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="805.4" y="101" width="0.5" height="15.0" fill="rgb(218,167,53)" rx="2" ry="2" />
<text  x="808.43" y="111.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="115.7" y="325" width="0.4" height="15.0" fill="rgb(236,8,35)" rx="2" ry="2" />
<text  x="118.66" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="831.1" y="293" width="0.4" height="15.0" fill="rgb(225,148,41)" rx="2" ry="2" />
<text  x="834.06" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (22 samples, 0.42%)</title><rect x="765.3" y="373" width="5.0" height="15.0" fill="rgb(219,121,25)" rx="2" ry="2" />
<text  x="768.30" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (3 samples, 0.06%)</title><rect x="429.7" y="213" width="0.7" height="15.0" fill="rgb(212,103,37)" rx="2" ry="2" />
<text  x="432.71" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="584.4" y="325" width="0.4" height="15.0" fill="rgb(238,172,38)" rx="2" ry="2" />
<text  x="587.35" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="513.8" y="181" width="0.3" height="15.0" fill="rgb(228,155,11)" rx="2" ry="2" />
<text  x="516.84" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%)</title><rect x="264.9" y="133" width="0.2" height="15.0" fill="rgb(220,126,51)" rx="2" ry="2" />
<text  x="267.87" y="143.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="683.9" y="469" width="0.9" height="15.0" fill="rgb(247,143,7)" rx="2" ry="2" />
<text  x="686.90" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="308.2" y="309" width="0.2" height="15.0" fill="rgb(205,227,32)" rx="2" ry="2" />
<text  x="311.17" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="82.1" y="421" width="0.2" height="15.0" fill="rgb(208,73,2)" rx="2" ry="2" />
<text  x="85.11" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="852.8" y="325" width="0.3" height="15.0" fill="rgb(249,185,18)" rx="2" ry="2" />
<text  x="855.82" y="335.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="742.4" y="421" width="0.2" height="15.0" fill="rgb(234,28,28)" rx="2" ry="2" />
<text  x="745.40" y="431.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="622.9" y="405" width="0.2" height="15.0" fill="rgb(233,128,25)" rx="2" ry="2" />
<text  x="625.90" y="415.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="97.5" y="485" width="0.9" height="15.0" fill="rgb(216,103,39)" rx="2" ry="2" />
<text  x="100.52" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1139.4" y="501" width="0.3" height="15.0" fill="rgb(234,190,50)" rx="2" ry="2" />
<text  x="1142.44" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="63.1" y="213" width="0.2" height="15.0" fill="rgb(227,146,10)" rx="2" ry="2" />
<text  x="66.06" y="223.5" ></text>
</g>
<g >
<title>free (3 samples, 0.06%)</title><rect x="57.8" y="245" width="0.7" height="15.0" fill="rgb(222,29,35)" rx="2" ry="2" />
<text  x="60.84" y="255.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.1" y="213" width="0.2" height="15.0" fill="rgb(235,65,43)" rx="2" ry="2" />
<text  x="49.05" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="186.4" y="309" width="0.2" height="15.0" fill="rgb(241,218,30)" rx="2" ry="2" />
<text  x="189.41" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (46 samples, 0.88%)</title><rect x="897.3" y="357" width="10.4" height="15.0" fill="rgb(239,87,32)" rx="2" ry="2" />
<text  x="900.27" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%)</title><rect x="1153.0" y="405" width="0.3" height="15.0" fill="rgb(247,142,25)" rx="2" ry="2" />
<text  x="1156.04" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (5 samples, 0.10%)</title><rect x="290.7" y="181" width="1.1" height="15.0" fill="rgb(207,185,41)" rx="2" ry="2" />
<text  x="293.71" y="191.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="217.0" y="197" width="0.2" height="15.0" fill="rgb(244,77,31)" rx="2" ry="2" />
<text  x="220.02" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="441.7" y="213" width="0.3" height="15.0" fill="rgb(214,3,0)" rx="2" ry="2" />
<text  x="444.73" y="223.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.8" y="341" width="0.2" height="15.0" fill="rgb(211,29,3)" rx="2" ry="2" />
<text  x="919.77" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="122.9" y="469" width="0.2" height="15.0" fill="rgb(213,103,2)" rx="2" ry="2" />
<text  x="125.92" y="479.5" ></text>
</g>
<g >
<title>seastar::file::dma_write_impl (1 samples, 0.02%)</title><rect x="87.3" y="325" width="0.2" height="15.0" fill="rgb(224,161,16)" rx="2" ry="2" />
<text  x="90.32" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (6 samples, 0.12%)</title><rect x="55.8" y="181" width="1.4" height="15.0" fill="rgb(224,154,19)" rx="2" ry="2" />
<text  x="58.80" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (45 samples, 0.86%)</title><rect x="688.2" y="501" width="10.2" height="15.0" fill="rgb(251,92,30)" rx="2" ry="2" />
<text  x="691.21" y="511.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%)</title><rect x="1022.9" y="181" width="3.4" height="15.0" fill="rgb(249,198,6)" rx="2" ry="2" />
<text  x="1025.89" y="191.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (29 samples, 0.56%)</title><rect x="1125.6" y="325" width="6.6" height="15.0" fill="rgb(216,186,25)" rx="2" ry="2" />
<text  x="1128.60" y="335.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%)</title><rect x="1051.0" y="341" width="0.5" height="15.0" fill="rgb(239,95,34)" rx="2" ry="2" />
<text  x="1054.00" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (3 samples, 0.06%)</title><rect x="78.5" y="341" width="0.7" height="15.0" fill="rgb(234,134,47)" rx="2" ry="2" />
<text  x="81.48" y="351.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%)</title><rect x="618.8" y="421" width="0.2" height="15.0" fill="rgb(250,155,8)" rx="2" ry="2" />
<text  x="621.82" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (4 samples, 0.08%)</title><rect x="1021.8" y="197" width="0.9" height="15.0" fill="rgb(206,177,20)" rx="2" ry="2" />
<text  x="1024.75" y="207.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::put (1 samples, 0.02%)</title><rect x="87.3" y="421" width="0.2" height="15.0" fill="rgb(209,171,51)" rx="2" ry="2" />
<text  x="90.32" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%)</title><rect x="1079.8" y="341" width="0.7" height="15.0" fill="rgb(225,215,45)" rx="2" ry="2" />
<text  x="1082.80" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setTokenStream (1 samples, 0.02%)</title><rect x="27.7" y="389" width="0.2" height="15.0" fill="rgb(237,103,20)" rx="2" ry="2" />
<text  x="30.69" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_for_keyspaces (2 samples, 0.04%)</title><rect x="114.3" y="485" width="0.5" height="15.0" fill="rgb(210,63,40)" rx="2" ry="2" />
<text  x="117.30" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="802.9" y="133" width="0.3" height="15.0" fill="rgb(224,119,14)" rx="2" ry="2" />
<text  x="805.94" y="143.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="88.2" y="581" width="0.3" height="15.0" fill="rgb(207,7,54)" rx="2" ry="2" />
<text  x="91.23" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="575.3" y="373" width="0.2" height="15.0" fill="rgb(206,209,23)" rx="2" ry="2" />
<text  x="578.28" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (2 samples, 0.04%)</title><rect x="705.2" y="469" width="0.5" height="15.0" fill="rgb(248,189,22)" rx="2" ry="2" />
<text  x="708.21" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (35 samples, 0.67%)</title><rect x="984.1" y="341" width="7.9" height="15.0" fill="rgb(245,67,6)" rx="2" ry="2" />
<text  x="987.11" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (30 samples, 0.58%)</title><rect x="1108.4" y="421" width="6.8" height="15.0" fill="rgb(226,3,37)" rx="2" ry="2" />
<text  x="1111.37" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="315.7" y="341" width="0.2" height="15.0" fill="rgb(241,161,1)" rx="2" ry="2" />
<text  x="318.66" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="115.9" y="229" width="0.2" height="15.0" fill="rgb(220,133,10)" rx="2" ry="2" />
<text  x="118.89" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="659.2" y="357" width="0.2" height="15.0" fill="rgb(224,69,5)" rx="2" ry="2" />
<text  x="662.18" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="775.7" y="357" width="0.3" height="15.0" fill="rgb(209,29,40)" rx="2" ry="2" />
<text  x="778.73" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="932.0" y="405" width="0.6" height="15.0" fill="rgb(230,3,32)" rx="2" ry="2" />
<text  x="934.96" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (3 samples, 0.06%)</title><rect x="28.1" y="373" width="0.7" height="15.0" fill="rgb(206,75,29)" rx="2" ry="2" />
<text  x="31.14" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="554.4" y="277" width="0.3" height="15.0" fill="rgb(241,164,5)" rx="2" ry="2" />
<text  x="557.42" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="80.5" y="389" width="0.2" height="15.0" fill="rgb(214,134,15)" rx="2" ry="2" />
<text  x="83.52" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header (1 samples, 0.02%)</title><rect x="872.6" y="405" width="0.2" height="15.0" fill="rgb(228,21,3)" rx="2" ry="2" />
<text  x="875.55" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.8" y="325" width="0.2" height="15.0" fill="rgb(212,182,22)" rx="2" ry="2" />
<text  x="919.77" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (2 samples, 0.04%)</title><rect x="482.5" y="325" width="0.5" height="15.0" fill="rgb(207,12,18)" rx="2" ry="2" />
<text  x="485.54" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="597.7" y="373" width="0.5" height="15.0" fill="rgb(217,51,3)" rx="2" ry="2" />
<text  x="600.73" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="645.1" y="453" width="0.2" height="15.0" fill="rgb(242,81,44)" rx="2" ry="2" />
<text  x="648.12" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="440.4" y="197" width="0.2" height="15.0" fill="rgb(215,187,35)" rx="2" ry="2" />
<text  x="443.37" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="10.9" y="405" width="0.2" height="15.0" fill="rgb(206,31,46)" rx="2" ry="2" />
<text  x="13.91" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="372.6" y="165" width="0.2" height="15.0" fill="rgb(220,63,49)" rx="2" ry="2" />
<text  x="375.57" y="175.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (14 samples, 0.27%)</title><rect x="74.2" y="389" width="3.1" height="15.0" fill="rgb(251,36,12)" rx="2" ry="2" />
<text  x="77.17" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="87.3" y="373" width="0.2" height="15.0" fill="rgb(232,181,30)" rx="2" ry="2" />
<text  x="90.32" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1033.3" y="245" width="1.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1036.32" y="255.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned int&gt;::the_value (1 samples, 0.02%)</title><rect x="1134.9" y="261" width="0.2" height="15.0" fill="rgb(236,207,14)" rx="2" ry="2" />
<text  x="1137.90" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="590.0" y="277" width="0.2" height="15.0" fill="rgb(206,11,1)" rx="2" ry="2" />
<text  x="593.02" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="392.1" y="149" width="0.4" height="15.0" fill="rgb(234,105,9)" rx="2" ry="2" />
<text  x="395.07" y="159.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="570.1" y="341" width="0.2" height="15.0" fill="rgb(206,99,32)" rx="2" ry="2" />
<text  x="573.07" y="351.5" ></text>
</g>
<g >
<title>partition_entry::read (3 samples, 0.06%)</title><rect x="545.8" y="325" width="0.7" height="15.0" fill="rgb(221,130,18)" rx="2" ry="2" />
<text  x="548.81" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (22 samples, 0.42%)</title><rect x="758.7" y="421" width="5.0" height="15.0" fill="rgb(227,86,36)" rx="2" ry="2" />
<text  x="761.72" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="852.8" y="341" width="0.3" height="15.0" fill="rgb(252,98,26)" rx="2" ry="2" />
<text  x="855.82" y="351.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_receivers (1 samples, 0.02%)</title><rect x="77.8" y="357" width="0.2" height="15.0" fill="rgb(252,172,23)" rx="2" ry="2" />
<text  x="80.80" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="77.6" y="341" width="0.2" height="15.0" fill="rgb(230,71,6)" rx="2" ry="2" />
<text  x="80.57" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1163.2" y="453" width="0.3" height="15.0" fill="rgb(241,50,2)" rx="2" ry="2" />
<text  x="1166.24" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%)</title><rect x="23.4" y="277" width="0.2" height="15.0" fill="rgb(218,20,34)" rx="2" ry="2" />
<text  x="26.38" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="1120.2" y="421" width="0.4" height="15.0" fill="rgb(210,79,5)" rx="2" ry="2" />
<text  x="1123.16" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="818.6" y="309" width="0.4" height="15.0" fill="rgb(223,218,0)" rx="2" ry="2" />
<text  x="821.59" y="319.5" ></text>
</g>
<g >
<title>mutation::mutation (2 samples, 0.04%)</title><rect x="871.0" y="325" width="0.4" height="15.0" fill="rgb(217,112,51)" rx="2" ry="2" />
<text  x="873.96" y="335.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%)</title><rect x="430.4" y="213" width="0.4" height="15.0" fill="rgb(219,76,54)" rx="2" ry="2" />
<text  x="433.39" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="751.0" y="341" width="0.7" height="15.0" fill="rgb(250,52,46)" rx="2" ry="2" />
<text  x="754.01" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="86.0" y="341" width="0.2" height="15.0" fill="rgb(225,155,0)" rx="2" ry="2" />
<text  x="88.96" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.4" y="293" width="0.2" height="15.0" fill="rgb(221,72,35)" rx="2" ry="2" />
<text  x="48.37" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="931.5" y="357" width="0.2" height="15.0" fill="rgb(233,158,12)" rx="2" ry="2" />
<text  x="934.51" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="62.2" y="69" width="0.6" height="15.0" fill="rgb(209,166,15)" rx="2" ry="2" />
<text  x="65.15" y="79.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::promise&lt;void&gt; &gt;::operator=&lt;seastar::promise&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="643.5" y="485" width="0.3" height="15.0" fill="rgb(244,95,14)" rx="2" ry="2" />
<text  x="646.54" y="495.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="114.8" y="325" width="0.6" height="15.0" fill="rgb(226,142,40)" rx="2" ry="2" />
<text  x="117.76" y="335.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="113.9" y="357" width="0.2" height="15.0" fill="rgb(248,215,18)" rx="2" ry="2" />
<text  x="116.85" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1042.6" y="213" width="0.5" height="15.0" fill="rgb(226,73,46)" rx="2" ry="2" />
<text  x="1045.61" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="12.0" y="373" width="0.7" height="15.0" fill="rgb(246,204,43)" rx="2" ry="2" />
<text  x="15.04" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.08%)</title><rect x="62.2" y="213" width="0.9" height="15.0" fill="rgb(251,26,50)" rx="2" ry="2" />
<text  x="65.15" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (6 samples, 0.12%)</title><rect x="244.2" y="69" width="1.4" height="15.0" fill="rgb(224,89,18)" rx="2" ry="2" />
<text  x="247.23" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="165.5" y="421" width="1.0" height="15.0" fill="rgb(253,146,54)" rx="2" ry="2" />
<text  x="168.55" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="22.2" y="517" width="0.3" height="15.0" fill="rgb(228,82,19)" rx="2" ry="2" />
<text  x="25.24" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="456.9" y="405" width="0.5" height="15.0" fill="rgb(230,109,53)" rx="2" ry="2" />
<text  x="459.92" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="23.6" y="197" width="0.2" height="15.0" fill="rgb(221,165,53)" rx="2" ry="2" />
<text  x="26.60" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%)</title><rect x="877.5" y="453" width="0.5" height="15.0" fill="rgb(240,57,1)" rx="2" ry="2" />
<text  x="880.54" y="463.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%)</title><rect x="116.8" y="357" width="0.2" height="15.0" fill="rgb(209,177,11)" rx="2" ry="2" />
<text  x="119.80" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="948.1" y="341" width="0.2" height="15.0" fill="rgb(250,135,53)" rx="2" ry="2" />
<text  x="951.06" y="351.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (267 samples, 5.13%)</title><rect x="26.1" y="501" width="60.5" height="15.0" fill="rgb(225,130,45)" rx="2" ry="2" />
<text  x="29.10" y="511.5" >cql3::..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="1042.6" y="181" width="0.5" height="15.0" fill="rgb(211,147,32)" rx="2" ry="2" />
<text  x="1045.61" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="113.9" y="453" width="0.2" height="15.0" fill="rgb(236,71,7)" rx="2" ry="2" />
<text  x="116.85" y="463.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="14.1" y="517" width="0.2" height="15.0" fill="rgb(227,171,23)" rx="2" ry="2" />
<text  x="17.08" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="271.2" y="149" width="0.2" height="15.0" fill="rgb(243,3,14)" rx="2" ry="2" />
<text  x="274.21" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="812.5" y="277" width="0.2" height="15.0" fill="rgb(213,157,29)" rx="2" ry="2" />
<text  x="815.46" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="330.6" y="357" width="0.2" height="15.0" fill="rgb(224,50,35)" rx="2" ry="2" />
<text  x="333.62" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="746.7" y="389" width="0.2" height="15.0" fill="rgb(226,52,39)" rx="2" ry="2" />
<text  x="749.71" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="114.5" y="357" width="0.3" height="15.0" fill="rgb(237,72,22)" rx="2" ry="2" />
<text  x="117.53" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="450.1" y="261" width="0.7" height="15.0" fill="rgb(217,115,7)" rx="2" ry="2" />
<text  x="453.12" y="271.5" ></text>
</g>
<g >
<title>ser::qr_cell_view::value (1 samples, 0.02%)</title><rect x="116.3" y="277" width="0.3" height="15.0" fill="rgb(229,199,26)" rx="2" ry="2" />
<text  x="119.35" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="480.7" y="277" width="0.5" height="15.0" fill="rgb(245,184,18)" rx="2" ry="2" />
<text  x="483.73" y="287.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1137.8" y="117" width="0.3" height="15.0" fill="rgb(237,149,36)" rx="2" ry="2" />
<text  x="1140.85" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="908.8" y="341" width="0.3" height="15.0" fill="rgb(241,189,14)" rx="2" ry="2" />
<text  x="911.83" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="782.1" y="293" width="0.9" height="15.0" fill="rgb(253,107,0)" rx="2" ry="2" />
<text  x="785.08" y="303.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%)</title><rect x="543.5" y="309" width="0.9" height="15.0" fill="rgb(232,21,50)" rx="2" ry="2" />
<text  x="546.54" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::semaphore_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="1132.0" y="293" width="0.2" height="15.0" fill="rgb(251,196,22)" rx="2" ry="2" />
<text  x="1134.95" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="28.1" y="357" width="0.3" height="15.0" fill="rgb(224,159,12)" rx="2" ry="2" />
<text  x="31.14" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%)</title><rect x="836.5" y="421" width="2.3" height="15.0" fill="rgb(224,133,43)" rx="2" ry="2" />
<text  x="839.50" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%)</title><rect x="1063.7" y="245" width="1.1" height="15.0" fill="rgb(214,118,49)" rx="2" ry="2" />
<text  x="1066.70" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="667.1" y="389" width="0.5" height="15.0" fill="rgb(238,190,1)" rx="2" ry="2" />
<text  x="670.12" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="700.0" y="469" width="0.2" height="15.0" fill="rgb(243,143,18)" rx="2" ry="2" />
<text  x="703.00" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="114.8" y="197" width="0.2" height="15.0" fill="rgb(207,109,21)" rx="2" ry="2" />
<text  x="117.76" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::iterators_valid (1 samples, 0.02%)</title><rect x="22.5" y="533" width="0.2" height="15.0" fill="rgb(247,10,45)" rx="2" ry="2" />
<text  x="25.47" y="543.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="807.2" y="261" width="0.3" height="15.0" fill="rgb(232,165,27)" rx="2" ry="2" />
<text  x="810.25" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%)</title><rect x="586.2" y="293" width="0.6" height="15.0" fill="rgb(242,114,11)" rx="2" ry="2" />
<text  x="589.17" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="792.5" y="229" width="0.7" height="15.0" fill="rgb(246,204,10)" rx="2" ry="2" />
<text  x="795.51" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="115.2" y="245" width="0.2" height="15.0" fill="rgb(222,212,38)" rx="2" ry="2" />
<text  x="118.21" y="255.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="115.4" y="437" width="0.3" height="15.0" fill="rgb(215,47,52)" rx="2" ry="2" />
<text  x="118.44" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1167.3" y="501" width="0.3" height="15.0" fill="rgb(233,109,12)" rx="2" ry="2" />
<text  x="1170.33" y="511.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (12 samples, 0.23%)</title><rect x="552.2" y="309" width="2.7" height="15.0" fill="rgb(214,130,10)" rx="2" ry="2" />
<text  x="555.16" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1021.5" y="197" width="0.3" height="15.0" fill="rgb(230,78,32)" rx="2" ry="2" />
<text  x="1024.53" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (3 samples, 0.06%)</title><rect x="909.1" y="341" width="0.6" height="15.0" fill="rgb(239,151,0)" rx="2" ry="2" />
<text  x="912.06" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="636.1" y="389" width="0.2" height="15.0" fill="rgb(243,202,0)" rx="2" ry="2" />
<text  x="639.05" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="68.0" y="85" width="0.3" height="15.0" fill="rgb(240,120,46)" rx="2" ry="2" />
<text  x="71.05" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="478.7" y="309" width="0.2" height="15.0" fill="rgb(223,49,31)" rx="2" ry="2" />
<text  x="481.69" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="771.6" y="357" width="0.3" height="15.0" fill="rgb(226,7,9)" rx="2" ry="2" />
<text  x="774.65" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="864.4" y="389" width="0.2" height="15.0" fill="rgb(242,68,23)" rx="2" ry="2" />
<text  x="867.39" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.12%)</title><rect x="609.3" y="421" width="1.4" height="15.0" fill="rgb(215,112,10)" rx="2" ry="2" />
<text  x="612.30" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.23%)</title><rect x="946.0" y="373" width="2.7" height="15.0" fill="rgb(210,190,10)" rx="2" ry="2" />
<text  x="949.02" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="450.6" y="245" width="0.2" height="15.0" fill="rgb(206,21,36)" rx="2" ry="2" />
<text  x="453.57" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="23.6" y="325" width="0.2" height="15.0" fill="rgb(206,85,39)" rx="2" ry="2" />
<text  x="26.60" y="335.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="984.8" y="325" width="2.7" height="15.0" fill="rgb(212,130,32)" rx="2" ry="2" />
<text  x="987.79" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="694.1" y="469" width="0.2" height="15.0" fill="rgb(253,45,32)" rx="2" ry="2" />
<text  x="697.10" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="328.4" y="277" width="0.2" height="15.0" fill="rgb(219,84,26)" rx="2" ry="2" />
<text  x="331.36" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (9 samples, 0.17%)</title><rect x="659.0" y="485" width="2.0" height="15.0" fill="rgb(253,161,49)" rx="2" ry="2" />
<text  x="661.95" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="713.4" y="421" width="0.2" height="15.0" fill="rgb(209,85,46)" rx="2" ry="2" />
<text  x="716.37" y="431.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="892.7" y="405" width="0.3" height="15.0" fill="rgb(234,154,33)" rx="2" ry="2" />
<text  x="895.73" y="415.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%)</title><rect x="429.3" y="197" width="0.4" height="15.0" fill="rgb(236,159,17)" rx="2" ry="2" />
<text  x="432.26" y="207.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="62.2" y="85" width="0.6" height="15.0" fill="rgb(243,207,4)" rx="2" ry="2" />
<text  x="65.15" y="95.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="14.1" y="501" width="0.2" height="15.0" fill="rgb(209,164,6)" rx="2" ry="2" />
<text  x="17.08" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="596.4" y="309" width="0.2" height="15.0" fill="rgb(225,55,30)" rx="2" ry="2" />
<text  x="599.37" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%)</title><rect x="433.6" y="213" width="0.9" height="15.0" fill="rgb(213,7,42)" rx="2" ry="2" />
<text  x="436.57" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="659.4" y="325" width="0.2" height="15.0" fill="rgb(232,203,26)" rx="2" ry="2" />
<text  x="662.41" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_response_handler (1 samples, 0.02%)</title><rect x="1138.3" y="181" width="0.2" height="15.0" fill="rgb(234,57,4)" rx="2" ry="2" />
<text  x="1141.30" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="722.0" y="501" width="0.2" height="15.0" fill="rgb(210,124,16)" rx="2" ry="2" />
<text  x="724.99" y="511.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%)</title><rect x="102.7" y="437" width="0.3" height="15.0" fill="rgb(206,83,49)" rx="2" ry="2" />
<text  x="105.74" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%)</title><rect x="22.5" y="549" width="0.2" height="15.0" fill="rgb(240,5,29)" rx="2" ry="2" />
<text  x="25.47" y="559.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::index_impl (1 samples, 0.02%)</title><rect x="36.3" y="245" width="0.2" height="15.0" fill="rgb(208,69,15)" rx="2" ry="2" />
<text  x="39.30" y="255.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%)</title><rect x="23.8" y="549" width="0.3" height="15.0" fill="rgb(246,64,15)" rx="2" ry="2" />
<text  x="26.83" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation&lt;bytes_ostream&gt;::writer_of_mutation (1 samples, 0.02%)</title><rect x="1136.9" y="165" width="0.3" height="15.0" fill="rgb(250,184,31)" rx="2" ry="2" />
<text  x="1139.94" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::promise&lt;void&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1027.2" y="197" width="0.2" height="15.0" fill="rgb(217,51,36)" rx="2" ry="2" />
<text  x="1030.19" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="80.3" y="341" width="0.2" height="15.0" fill="rgb(243,78,30)" rx="2" ry="2" />
<text  x="83.29" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (12 samples, 0.23%)</title><rect x="471.4" y="261" width="2.8" height="15.0" fill="rgb(210,188,41)" rx="2" ry="2" />
<text  x="474.43" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="52.6" y="197" width="0.3" height="15.0" fill="rgb(222,54,1)" rx="2" ry="2" />
<text  x="55.63" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (6 samples, 0.12%)</title><rect x="274.2" y="181" width="1.3" height="15.0" fill="rgb(226,42,4)" rx="2" ry="2" />
<text  x="277.16" y="191.5" ></text>
</g>
<g >
<title>std::_Enable_default_constructor&lt;true, std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; &gt;::_Enable_default_constructor (1 samples, 0.02%)</title><rect x="60.8" y="229" width="0.2" height="15.0" fill="rgb(224,45,50)" rx="2" ry="2" />
<text  x="63.79" y="239.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (107 samples, 2.06%)</title><rect x="518.1" y="325" width="24.3" height="15.0" fill="rgb(246,30,41)" rx="2" ry="2" />
<text  x="521.14" y="335.5" >m..</text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="548.3" y="341" width="0.5" height="15.0" fill="rgb(249,138,4)" rx="2" ry="2" />
<text  x="551.30" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="67.4" y="181" width="0.2" height="15.0" fill="rgb(238,167,11)" rx="2" ry="2" />
<text  x="70.37" y="191.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="698.4" y="469" width="0.5" height="15.0" fill="rgb(205,146,47)" rx="2" ry="2" />
<text  x="701.41" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="546.5" y="325" width="0.2" height="15.0" fill="rgb(209,56,15)" rx="2" ry="2" />
<text  x="549.49" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1049.0" y="277" width="0.2" height="15.0" fill="rgb(232,160,15)" rx="2" ry="2" />
<text  x="1051.96" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="87.3" y="581" width="0.2" height="15.0" fill="rgb(219,124,50)" rx="2" ry="2" />
<text  x="90.32" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (17 samples, 0.33%)</title><rect x="993.0" y="293" width="3.8" height="15.0" fill="rgb(238,181,29)" rx="2" ry="2" />
<text  x="995.96" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1032.2" y="197" width="0.2" height="15.0" fill="rgb(237,18,29)" rx="2" ry="2" />
<text  x="1035.18" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="795.2" y="197" width="2.3" height="15.0" fill="rgb(230,30,21)" rx="2" ry="2" />
<text  x="798.23" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (34 samples, 0.65%)</title><rect x="865.3" y="421" width="7.7" height="15.0" fill="rgb(239,109,48)" rx="2" ry="2" />
<text  x="868.30" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (206 samples, 3.96%)</title><rect x="26.1" y="469" width="46.7" height="15.0" fill="rgb(249,16,26)" rx="2" ry="2" />
<text  x="29.10" y="479.5" >cql3..</text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%)</title><rect x="116.8" y="405" width="0.2" height="15.0" fill="rgb(250,36,33)" rx="2" ry="2" />
<text  x="119.80" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (2 samples, 0.04%)</title><rect x="29.3" y="357" width="0.4" height="15.0" fill="rgb(220,118,48)" rx="2" ry="2" />
<text  x="32.27" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="68.3" y="69" width="0.2" height="15.0" fill="rgb(250,129,26)" rx="2" ry="2" />
<text  x="71.27" y="79.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="701.4" y="469" width="0.2" height="15.0" fill="rgb(232,56,10)" rx="2" ry="2" />
<text  x="704.36" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%)</title><rect x="866.0" y="357" width="0.4" height="15.0" fill="rgb(213,19,32)" rx="2" ry="2" />
<text  x="868.98" y="367.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%)</title><rect x="336.3" y="325" width="0.2" height="15.0" fill="rgb(227,36,51)" rx="2" ry="2" />
<text  x="339.29" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1154.9" y="421" width="1.1" height="15.0" fill="rgb(224,163,18)" rx="2" ry="2" />
<text  x="1157.85" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="528.3" y="261" width="0.3" height="15.0" fill="rgb(209,22,9)" rx="2" ry="2" />
<text  x="531.35" y="271.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="115.0" y="213" width="0.2" height="15.0" fill="rgb(239,26,9)" rx="2" ry="2" />
<text  x="117.98" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="68.3" y="133" width="0.2" height="15.0" fill="rgb(229,49,13)" rx="2" ry="2" />
<text  x="71.27" y="143.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (3 samples, 0.06%)</title><rect x="334.7" y="373" width="0.7" height="15.0" fill="rgb(233,191,3)" rx="2" ry="2" />
<text  x="337.70" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::~pair (2 samples, 0.04%)</title><rect x="59.0" y="149" width="0.4" height="15.0" fill="rgb(217,53,10)" rx="2" ry="2" />
<text  x="61.98" y="159.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="113.6" y="405" width="0.3" height="15.0" fill="rgb(245,189,36)" rx="2" ry="2" />
<text  x="116.62" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="856.9" y="357" width="1.1" height="15.0" fill="rgb(243,28,41)" rx="2" ry="2" />
<text  x="859.91" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="448.1" y="277" width="0.2" height="15.0" fill="rgb(206,136,32)" rx="2" ry="2" />
<text  x="451.08" y="287.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="53.5" y="149" width="0.3" height="15.0" fill="rgb(205,96,7)" rx="2" ry="2" />
<text  x="56.54" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1039.9" y="277" width="0.2" height="15.0" fill="rgb(244,90,23)" rx="2" ry="2" />
<text  x="1042.89" y="287.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="635.6" y="373" width="0.5" height="15.0" fill="rgb(251,127,14)" rx="2" ry="2" />
<text  x="638.60" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="527.2" y="261" width="0.2" height="15.0" fill="rgb(236,177,9)" rx="2" ry="2" />
<text  x="530.21" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (1 samples, 0.02%)</title><rect x="570.7" y="373" width="0.3" height="15.0" fill="rgb(234,142,14)" rx="2" ry="2" />
<text  x="573.75" y="383.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (158 samples, 3.04%)</title><rect x="780.3" y="341" width="35.8" height="15.0" fill="rgb(220,226,24)" rx="2" ry="2" />
<text  x="783.27" y="351.5" >ser..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="699.5" y="469" width="0.3" height="15.0" fill="rgb(224,64,48)" rx="2" ry="2" />
<text  x="702.54" y="479.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="82.6" y="405" width="0.2" height="15.0" fill="rgb(209,176,19)" rx="2" ry="2" />
<text  x="85.56" y="415.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="113.4" y="501" width="0.2" height="15.0" fill="rgb(244,64,30)" rx="2" ry="2" />
<text  x="116.40" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="596.6" y="309" width="0.5" height="15.0" fill="rgb(214,132,2)" rx="2" ry="2" />
<text  x="599.60" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="398.9" y="149" width="0.4" height="15.0" fill="rgb(218,179,3)" rx="2" ry="2" />
<text  x="401.87" y="159.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (2 samples, 0.04%)</title><rect x="322.9" y="277" width="0.5" height="15.0" fill="rgb(251,125,44)" rx="2" ry="2" />
<text  x="325.91" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (1 samples, 0.02%)</title><rect x="712.9" y="453" width="0.2" height="15.0" fill="rgb(249,207,46)" rx="2" ry="2" />
<text  x="715.92" y="463.5" ></text>
</g>
<g >
<title>ser::column_view::c (3 samples, 0.06%)</title><rect x="1128.8" y="229" width="0.7" height="15.0" fill="rgb(250,220,44)" rx="2" ry="2" />
<text  x="1131.78" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="51.7" y="277" width="0.5" height="15.0" fill="rgb(206,114,8)" rx="2" ry="2" />
<text  x="54.72" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="85.1" y="421" width="0.2" height="15.0" fill="rgb(209,110,49)" rx="2" ry="2" />
<text  x="88.05" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="929.7" y="357" width="0.2" height="15.0" fill="rgb(253,219,37)" rx="2" ry="2" />
<text  x="932.69" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="86.4" y="357" width="0.2" height="15.0" fill="rgb(226,188,7)" rx="2" ry="2" />
<text  x="89.41" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1145.3" y="469" width="0.3" height="15.0" fill="rgb(222,163,13)" rx="2" ry="2" />
<text  x="1148.33" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (8 samples, 0.15%)</title><rect x="856.7" y="373" width="1.8" height="15.0" fill="rgb(231,20,33)" rx="2" ry="2" />
<text  x="859.68" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.10%)</title><rect x="48.3" y="325" width="1.2" height="15.0" fill="rgb(240,104,46)" rx="2" ry="2" />
<text  x="51.32" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="644.7" y="469" width="0.2" height="15.0" fill="rgb(238,103,8)" rx="2" ry="2" />
<text  x="647.67" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="1086.8" y="357" width="0.9" height="15.0" fill="rgb(249,69,39)" rx="2" ry="2" />
<text  x="1089.83" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (1 samples, 0.02%)</title><rect x="638.5" y="437" width="0.3" height="15.0" fill="rgb(240,166,17)" rx="2" ry="2" />
<text  x="641.55" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.12%)</title><rect x="139.0" y="405" width="1.4" height="15.0" fill="rgb(246,192,33)" rx="2" ry="2" />
<text  x="142.02" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="723.6" y="501" width="0.2" height="15.0" fill="rgb(216,65,9)" rx="2" ry="2" />
<text  x="726.58" y="511.5" ></text>
</g>
<g >
<title>database::query (102 samples, 1.96%)</title><rect x="1009.5" y="261" width="23.1" height="15.0" fill="rgb(216,40,30)" rx="2" ry="2" />
<text  x="1012.51" y="271.5" >d..</text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (8 samples, 0.15%)</title><rect x="40.8" y="245" width="1.9" height="15.0" fill="rgb(224,81,27)" rx="2" ry="2" />
<text  x="43.84" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="83.5" y="373" width="0.2" height="15.0" fill="rgb(222,59,9)" rx="2" ry="2" />
<text  x="86.47" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="61.2" y="261" width="0.5" height="15.0" fill="rgb(230,219,13)" rx="2" ry="2" />
<text  x="64.25" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%)</title><rect x="58.8" y="245" width="0.6" height="15.0" fill="rgb(222,65,19)" rx="2" ry="2" />
<text  x="61.75" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.10%)</title><rect x="706.8" y="485" width="1.1" height="15.0" fill="rgb(206,181,39)" rx="2" ry="2" />
<text  x="709.80" y="495.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="23.4" y="373" width="0.2" height="15.0" fill="rgb(227,224,21)" rx="2" ry="2" />
<text  x="26.38" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="10.7" y="213" width="0.2" height="15.0" fill="rgb(248,109,32)" rx="2" ry="2" />
<text  x="13.68" y="223.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (33 samples, 0.63%)</title><rect x="899.5" y="309" width="7.5" height="15.0" fill="rgb(221,101,33)" rx="2" ry="2" />
<text  x="902.53" y="319.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="1032.6" y="261" width="2.3" height="15.0" fill="rgb(206,180,28)" rx="2" ry="2" />
<text  x="1035.64" y="271.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (8 samples, 0.15%)</title><rect x="140.4" y="405" width="1.8" height="15.0" fill="rgb(221,55,35)" rx="2" ry="2" />
<text  x="143.38" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1088.0" y="373" width="0.2" height="15.0" fill="rgb(233,110,7)" rx="2" ry="2" />
<text  x="1090.96" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="559.6" y="245" width="0.3" height="15.0" fill="rgb(244,4,30)" rx="2" ry="2" />
<text  x="562.64" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="867.8" y="325" width="0.2" height="15.0" fill="rgb(230,206,50)" rx="2" ry="2" />
<text  x="870.79" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="862.3" y="485" width="0.5" height="15.0" fill="rgb(240,195,35)" rx="2" ry="2" />
<text  x="865.35" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%)</title><rect x="77.6" y="357" width="0.2" height="15.0" fill="rgb(209,205,9)" rx="2" ry="2" />
<text  x="80.57" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="57.8" y="293" width="0.7" height="15.0" fill="rgb(223,91,23)" rx="2" ry="2" />
<text  x="60.84" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="47.4" y="229" width="0.2" height="15.0" fill="rgb(243,178,34)" rx="2" ry="2" />
<text  x="50.41" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="447.6" y="261" width="0.3" height="15.0" fill="rgb(227,36,39)" rx="2" ry="2" />
<text  x="450.62" y="271.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="116.3" y="325" width="0.3" height="15.0" fill="rgb(230,63,46)" rx="2" ry="2" />
<text  x="119.35" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="67.1" y="277" width="0.3" height="15.0" fill="rgb(227,3,12)" rx="2" ry="2" />
<text  x="70.14" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%)</title><rect x="1029.0" y="229" width="3.4" height="15.0" fill="rgb(241,187,40)" rx="2" ry="2" />
<text  x="1032.01" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="59.4" y="213" width="0.3" height="15.0" fill="rgb(215,184,7)" rx="2" ry="2" />
<text  x="62.43" y="223.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (202 samples, 3.88%)</title><rect x="26.3" y="437" width="45.8" height="15.0" fill="rgb(209,194,12)" rx="2" ry="2" />
<text  x="29.33" y="447.5" >cql3..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (2 samples, 0.04%)</title><rect x="11.4" y="405" width="0.4" height="15.0" fill="rgb(223,17,2)" rx="2" ry="2" />
<text  x="14.36" y="415.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="898.4" y="293" width="0.2" height="15.0" fill="rgb(205,41,39)" rx="2" ry="2" />
<text  x="901.40" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="627.4" y="421" width="0.3" height="15.0" fill="rgb(215,117,22)" rx="2" ry="2" />
<text  x="630.44" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="768.0" y="341" width="0.2" height="15.0" fill="rgb(230,142,4)" rx="2" ry="2" />
<text  x="771.02" y="351.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (4 samples, 0.08%)</title><rect x="253.5" y="101" width="0.9" height="15.0" fill="rgb(232,206,34)" rx="2" ry="2" />
<text  x="256.53" y="111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="61.7" y="261" width="0.2" height="15.0" fill="rgb(220,33,7)" rx="2" ry="2" />
<text  x="64.70" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1088.4" y="373" width="0.2" height="15.0" fill="rgb(244,157,27)" rx="2" ry="2" />
<text  x="1091.42" y="383.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (24 samples, 0.46%)</title><rect x="259.9" y="165" width="5.4" height="15.0" fill="rgb(218,184,31)" rx="2" ry="2" />
<text  x="262.88" y="175.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="23.4" y="357" width="0.2" height="15.0" fill="rgb(242,205,5)" rx="2" ry="2" />
<text  x="26.38" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1111.8" y="405" width="0.2" height="15.0" fill="rgb(233,9,21)" rx="2" ry="2" />
<text  x="1114.77" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="340.1" y="293" width="0.3" height="15.0" fill="rgb(220,11,33)" rx="2" ry="2" />
<text  x="343.15" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="80.7" y="421" width="0.3" height="15.0" fill="rgb(219,13,38)" rx="2" ry="2" />
<text  x="83.75" y="431.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (2 samples, 0.04%)</title><rect x="29.3" y="373" width="0.4" height="15.0" fill="rgb(225,11,46)" rx="2" ry="2" />
<text  x="32.27" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (81 samples, 1.56%)</title><rect x="661.0" y="501" width="18.4" height="15.0" fill="rgb(227,154,30)" rx="2" ry="2" />
<text  x="664.00" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="63.3" y="69" width="0.2" height="15.0" fill="rgb(207,32,24)" rx="2" ry="2" />
<text  x="66.29" y="79.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%)</title><rect x="998.2" y="293" width="0.2" height="15.0" fill="rgb(219,190,41)" rx="2" ry="2" />
<text  x="1001.17" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="812.7" y="261" width="0.2" height="15.0" fill="rgb(223,125,31)" rx="2" ry="2" />
<text  x="815.69" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="66.7" y="261" width="0.2" height="15.0" fill="rgb(227,128,40)" rx="2" ry="2" />
<text  x="69.69" y="271.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (3 samples, 0.06%)</title><rect x="114.8" y="421" width="0.6" height="15.0" fill="rgb(207,50,28)" rx="2" ry="2" />
<text  x="117.76" y="431.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (89 samples, 1.71%)</title><rect x="790.2" y="277" width="20.2" height="15.0" fill="rgb(232,188,16)" rx="2" ry="2" />
<text  x="793.24" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%)</title><rect x="245.1" y="53" width="0.5" height="15.0" fill="rgb(245,65,44)" rx="2" ry="2" />
<text  x="248.14" y="63.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="52.4" y="181" width="0.2" height="15.0" fill="rgb(246,65,32)" rx="2" ry="2" />
<text  x="55.40" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (48 samples, 0.92%)</title><rect x="530.2" y="261" width="10.8" height="15.0" fill="rgb(229,36,17)" rx="2" ry="2" />
<text  x="533.16" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.12%)</title><rect x="939.9" y="325" width="1.4" height="15.0" fill="rgb(213,101,31)" rx="2" ry="2" />
<text  x="942.90" y="335.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="23.4" y="325" width="0.2" height="15.0" fill="rgb(232,201,31)" rx="2" ry="2" />
<text  x="26.38" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="1132.6" y="309" width="2.8" height="15.0" fill="rgb(226,190,22)" rx="2" ry="2" />
<text  x="1135.63" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="802.0" y="117" width="0.7" height="15.0" fill="rgb(241,7,31)" rx="2" ry="2" />
<text  x="805.03" y="127.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%)</title><rect x="1037.4" y="277" width="0.5" height="15.0" fill="rgb(216,53,44)" rx="2" ry="2" />
<text  x="1040.40" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="982.1" y="261" width="0.2" height="15.0" fill="rgb(208,206,3)" rx="2" ry="2" />
<text  x="985.07" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="52.9" y="197" width="0.4" height="15.0" fill="rgb(232,60,49)" rx="2" ry="2" />
<text  x="55.86" y="207.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="670.3" y="453" width="0.4" height="15.0" fill="rgb(220,151,15)" rx="2" ry="2" />
<text  x="673.29" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="23.6" y="485" width="0.2" height="15.0" fill="rgb(248,36,34)" rx="2" ry="2" />
<text  x="26.60" y="495.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="1127.2" y="165" width="0.4" height="15.0" fill="rgb(209,91,0)" rx="2" ry="2" />
<text  x="1130.19" y="175.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="533.8" y="213" width="0.2" height="15.0" fill="rgb(242,35,12)" rx="2" ry="2" />
<text  x="536.79" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="666.4" y="453" width="0.3" height="15.0" fill="rgb(214,207,26)" rx="2" ry="2" />
<text  x="669.44" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="325.4" y="293" width="0.7" height="15.0" fill="rgb(244,84,47)" rx="2" ry="2" />
<text  x="328.41" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="12.9" y="357" width="0.7" height="15.0" fill="rgb(236,113,5)" rx="2" ry="2" />
<text  x="15.95" y="367.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.06%)</title><rect x="21.3" y="613" width="0.7" height="15.0" fill="rgb(237,20,12)" rx="2" ry="2" />
<text  x="24.34" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%)</title><rect x="965.3" y="373" width="0.2" height="15.0" fill="rgb(245,76,19)" rx="2" ry="2" />
<text  x="968.29" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (585 samples, 11.24%)</title><rect x="956.9" y="405" width="132.7" height="15.0" fill="rgb(241,154,44)" rx="2" ry="2" />
<text  x="959.90" y="415.5" >service::storage..</text>
</g>
<g >
<title>query::result::result (3 samples, 0.06%)</title><rect x="616.8" y="437" width="0.7" height="15.0" fill="rgb(208,34,40)" rx="2" ry="2" />
<text  x="619.78" y="447.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%)</title><rect x="1163.5" y="485" width="0.2" height="15.0" fill="rgb(215,164,27)" rx="2" ry="2" />
<text  x="1166.47" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (12 samples, 0.23%)</title><rect x="676.6" y="485" width="2.8" height="15.0" fill="rgb(235,61,33)" rx="2" ry="2" />
<text  x="679.64" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="819.7" y="389" width="0.2" height="15.0" fill="rgb(235,38,35)" rx="2" ry="2" />
<text  x="822.72" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="47.6" y="245" width="0.7" height="15.0" fill="rgb(248,79,0)" rx="2" ry="2" />
<text  x="50.64" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="83.5" y="405" width="0.6" height="15.0" fill="rgb(213,205,40)" rx="2" ry="2" />
<text  x="86.47" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (2 samples, 0.04%)</title><rect x="582.3" y="341" width="0.5" height="15.0" fill="rgb(230,22,29)" rx="2" ry="2" />
<text  x="585.31" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="721.5" y="469" width="0.3" height="15.0" fill="rgb(213,143,22)" rx="2" ry="2" />
<text  x="724.54" y="479.5" ></text>
</g>
<g >
<title>do_cql_test (279 samples, 5.36%)</title><rect x="24.1" y="549" width="63.2" height="15.0" fill="rgb(225,134,5)" rx="2" ry="2" />
<text  x="27.06" y="559.5" >do_cql..</text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="113.4" y="453" width="0.2" height="15.0" fill="rgb(211,221,5)" rx="2" ry="2" />
<text  x="116.40" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="48.3" y="229" width="0.2" height="15.0" fill="rgb(217,31,36)" rx="2" ry="2" />
<text  x="51.32" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.4" y="261" width="0.2" height="15.0" fill="rgb(238,127,36)" rx="2" ry="2" />
<text  x="53.36" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="442.2" y="245" width="0.2" height="15.0" fill="rgb(231,193,38)" rx="2" ry="2" />
<text  x="445.18" y="255.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%)</title><rect x="676.6" y="469" width="0.7" height="15.0" fill="rgb(227,60,48)" rx="2" ry="2" />
<text  x="679.64" y="479.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="868.7" y="309" width="2.0" height="15.0" fill="rgb(236,83,21)" rx="2" ry="2" />
<text  x="871.70" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="23.4" y="533" width="0.2" height="15.0" fill="rgb(235,94,15)" rx="2" ry="2" />
<text  x="26.38" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (7 samples, 0.13%)</title><rect x="670.3" y="469" width="1.6" height="15.0" fill="rgb(236,6,31)" rx="2" ry="2" />
<text  x="673.29" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="82.3" y="437" width="0.3" height="15.0" fill="rgb(213,175,31)" rx="2" ry="2" />
<text  x="85.33" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (23 samples, 0.44%)</title><rect x="208.9" y="229" width="5.2" height="15.0" fill="rgb(229,22,15)" rx="2" ry="2" />
<text  x="211.86" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%)</title><rect x="830.8" y="309" width="0.7" height="15.0" fill="rgb(253,23,14)" rx="2" ry="2" />
<text  x="833.83" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="464.0" y="341" width="0.4" height="15.0" fill="rgb(223,159,11)" rx="2" ry="2" />
<text  x="466.95" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="639.9" y="437" width="0.2" height="15.0" fill="rgb(253,129,0)" rx="2" ry="2" />
<text  x="642.91" y="447.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="593.9" y="261" width="0.2" height="15.0" fill="rgb(226,122,12)" rx="2" ry="2" />
<text  x="596.88" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%)</title><rect x="594.3" y="261" width="0.7" height="15.0" fill="rgb(240,133,16)" rx="2" ry="2" />
<text  x="597.33" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (4 samples, 0.08%)</title><rect x="639.0" y="421" width="0.9" height="15.0" fill="rgb(209,171,12)" rx="2" ry="2" />
<text  x="642.00" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="831.5" y="277" width="0.2" height="15.0" fill="rgb(218,34,18)" rx="2" ry="2" />
<text  x="834.51" y="287.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="1029.2" y="213" width="2.8" height="15.0" fill="rgb(205,192,22)" rx="2" ry="2" />
<text  x="1032.24" y="223.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,253 samples, 24.08%)</title><rect x="172.6" y="421" width="284.1" height="15.0" fill="rgb(238,224,29)" rx="2" ry="2" />
<text  x="175.58" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="87.8" y="613" width="0.2" height="15.0" fill="rgb(220,210,44)" rx="2" ry="2" />
<text  x="90.77" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="785.3" y="293" width="0.2" height="15.0" fill="rgb(248,25,6)" rx="2" ry="2" />
<text  x="788.25" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1151.9" y="453" width="0.2" height="15.0" fill="rgb(221,36,10)" rx="2" ry="2" />
<text  x="1154.91" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,768 samples, 91.62%)</title><rect x="88.5" y="533" width="1081.1" height="15.0" fill="rgb(220,129,4)" rx="2" ry="2" />
<text  x="91.46" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="850.3" y="389" width="0.3" height="15.0" fill="rgb(222,67,31)" rx="2" ry="2" />
<text  x="853.33" y="399.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="856.0" y="389" width="0.2" height="15.0" fill="rgb(231,137,50)" rx="2" ry="2" />
<text  x="859.00" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="700.0" y="485" width="0.2" height="15.0" fill="rgb(213,187,51)" rx="2" ry="2" />
<text  x="703.00" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="868.2" y="357" width="0.3" height="15.0" fill="rgb(210,196,36)" rx="2" ry="2" />
<text  x="871.24" y="367.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (7 samples, 0.13%)</title><rect x="754.9" y="325" width="1.6" height="15.0" fill="rgb(209,113,19)" rx="2" ry="2" />
<text  x="757.87" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="22.9" y="501" width="0.3" height="15.0" fill="rgb(218,48,31)" rx="2" ry="2" />
<text  x="25.92" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (7 samples, 0.13%)</title><rect x="677.3" y="469" width="1.6" height="15.0" fill="rgb(238,156,20)" rx="2" ry="2" />
<text  x="680.32" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.08%)</title><rect x="48.5" y="229" width="1.0" height="15.0" fill="rgb(208,164,10)" rx="2" ry="2" />
<text  x="51.55" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="326.8" y="261" width="1.6" height="15.0" fill="rgb(233,17,13)" rx="2" ry="2" />
<text  x="329.77" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (16 samples, 0.31%)</title><rect x="766.0" y="357" width="3.6" height="15.0" fill="rgb(205,60,34)" rx="2" ry="2" />
<text  x="768.98" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="734.9" y="389" width="1.1" height="15.0" fill="rgb(236,103,12)" rx="2" ry="2" />
<text  x="737.92" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (45 samples, 0.86%)</title><rect x="897.5" y="341" width="10.2" height="15.0" fill="rgb(230,144,13)" rx="2" ry="2" />
<text  x="900.49" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="186.4" y="293" width="0.2" height="15.0" fill="rgb(243,160,31)" rx="2" ry="2" />
<text  x="189.41" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="480.0" y="261" width="0.5" height="15.0" fill="rgb(227,185,3)" rx="2" ry="2" />
<text  x="483.05" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="945.6" y="357" width="0.4" height="15.0" fill="rgb(254,187,46)" rx="2" ry="2" />
<text  x="948.56" y="367.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="848.1" y="405" width="1.6" height="15.0" fill="rgb(205,186,11)" rx="2" ry="2" />
<text  x="851.06" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="66.9" y="245" width="0.2" height="15.0" fill="rgb(226,54,42)" rx="2" ry="2" />
<text  x="69.91" y="255.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="52.2" y="149" width="0.2" height="15.0" fill="rgb(239,183,43)" rx="2" ry="2" />
<text  x="55.18" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%)</title><rect x="1138.3" y="197" width="0.2" height="15.0" fill="rgb(225,1,45)" rx="2" ry="2" />
<text  x="1141.30" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="720.9" y="485" width="0.2" height="15.0" fill="rgb(243,145,4)" rx="2" ry="2" />
<text  x="723.86" y="495.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%)</title><rect x="1132.4" y="469" width="6.4" height="15.0" fill="rgb(237,114,42)" rx="2" ry="2" />
<text  x="1135.41" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="23.6" y="277" width="0.2" height="15.0" fill="rgb(234,131,54)" rx="2" ry="2" />
<text  x="26.60" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (11 samples, 0.21%)</title><rect x="1164.8" y="437" width="2.5" height="15.0" fill="rgb(235,65,26)" rx="2" ry="2" />
<text  x="1167.83" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.2" y="533" width="0.3" height="15.0" fill="rgb(206,10,26)" rx="2" ry="2" />
<text  x="13.23" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%)</title><rect x="112.0" y="469" width="0.5" height="15.0" fill="rgb(253,223,41)" rx="2" ry="2" />
<text  x="115.04" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%)</title><rect x="637.6" y="437" width="0.3" height="15.0" fill="rgb(218,127,14)" rx="2" ry="2" />
<text  x="640.64" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="700.4" y="485" width="0.3" height="15.0" fill="rgb(216,20,39)" rx="2" ry="2" />
<text  x="703.45" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1147.6" y="485" width="0.2" height="15.0" fill="rgb(253,39,7)" rx="2" ry="2" />
<text  x="1150.60" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="66.7" y="245" width="0.2" height="15.0" fill="rgb(210,80,18)" rx="2" ry="2" />
<text  x="69.69" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1097.5" y="325" width="0.2" height="15.0" fill="rgb(237,110,17)" rx="2" ry="2" />
<text  x="1100.49" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="111.1" y="485" width="0.3" height="15.0" fill="rgb(208,16,20)" rx="2" ry="2" />
<text  x="114.13" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%)</title><rect x="130.4" y="437" width="0.5" height="15.0" fill="rgb(222,225,44)" rx="2" ry="2" />
<text  x="133.40" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%)</title><rect x="516.8" y="325" width="1.3" height="15.0" fill="rgb(213,71,0)" rx="2" ry="2" />
<text  x="519.78" y="335.5" ></text>
</g>
<g >
<title>sstables::sstable::do_write_simple (1 samples, 0.02%)</title><rect x="88.0" y="405" width="0.2" height="15.0" fill="rgb(238,127,13)" rx="2" ry="2" />
<text  x="91.00" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="32.2" y="229" width="0.2" height="15.0" fill="rgb(250,202,51)" rx="2" ry="2" />
<text  x="35.22" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (509 samples, 9.78%)</title><rect x="335.8" y="357" width="115.5" height="15.0" fill="rgb(225,217,12)" rx="2" ry="2" />
<text  x="338.84" y="367.5" >flat_mutation_..</text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="23.4" y="437" width="0.2" height="15.0" fill="rgb(221,179,23)" rx="2" ry="2" />
<text  x="26.38" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (8 samples, 0.15%)</title><rect x="286.9" y="213" width="1.8" height="15.0" fill="rgb(247,78,33)" rx="2" ry="2" />
<text  x="289.86" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (2 samples, 0.04%)</title><rect x="114.3" y="421" width="0.5" height="15.0" fill="rgb(214,229,52)" rx="2" ry="2" />
<text  x="117.30" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="754.9" y="277" width="0.2" height="15.0" fill="rgb(230,135,3)" rx="2" ry="2" />
<text  x="757.87" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.29%)</title><rect x="1108.4" y="389" width="3.4" height="15.0" fill="rgb(214,1,35)" rx="2" ry="2" />
<text  x="1111.37" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (6 samples, 0.12%)</title><rect x="266.2" y="149" width="1.4" height="15.0" fill="rgb(208,15,53)" rx="2" ry="2" />
<text  x="269.23" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.10%)</title><rect x="1137.4" y="213" width="1.1" height="15.0" fill="rgb(221,24,29)" rx="2" ry="2" />
<text  x="1140.39" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="71.4" y="373" width="0.3" height="15.0" fill="rgb(207,12,28)" rx="2" ry="2" />
<text  x="74.45" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%)</title><rect x="970.3" y="341" width="3.2" height="15.0" fill="rgb(240,162,3)" rx="2" ry="2" />
<text  x="973.28" y="351.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1133.5" y="149" width="0.3" height="15.0" fill="rgb(239,115,15)" rx="2" ry="2" />
<text  x="1136.54" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="23.2" y="533" width="0.2" height="15.0" fill="rgb(210,59,33)" rx="2" ry="2" />
<text  x="26.15" y="543.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="816.5" y="341" width="0.3" height="15.0" fill="rgb(214,200,33)" rx="2" ry="2" />
<text  x="819.54" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="71.4" y="357" width="0.3" height="15.0" fill="rgb(205,196,12)" rx="2" ry="2" />
<text  x="74.45" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="656.0" y="485" width="0.2" height="15.0" fill="rgb(246,208,48)" rx="2" ry="2" />
<text  x="659.01" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="57.6" y="245" width="0.2" height="15.0" fill="rgb(208,0,27)" rx="2" ry="2" />
<text  x="60.62" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::operator= (1 samples, 0.02%)</title><rect x="23.4" y="149" width="0.2" height="15.0" fill="rgb(228,208,39)" rx="2" ry="2" />
<text  x="26.38" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="852.6" y="341" width="0.2" height="15.0" fill="rgb(226,50,33)" rx="2" ry="2" />
<text  x="855.60" y="351.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="12.0" y="309" width="0.3" height="15.0" fill="rgb(211,176,7)" rx="2" ry="2" />
<text  x="15.04" y="319.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.08%)</title><rect x="1126.7" y="229" width="0.9" height="15.0" fill="rgb(210,73,41)" rx="2" ry="2" />
<text  x="1129.74" y="239.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (2 samples, 0.04%)</title><rect x="871.0" y="341" width="0.4" height="15.0" fill="rgb(215,48,23)" rx="2" ry="2" />
<text  x="873.96" y="351.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (31 samples, 0.60%)</title><rect x="356.5" y="213" width="7.0" height="15.0" fill="rgb(218,222,1)" rx="2" ry="2" />
<text  x="359.47" y="223.5" ></text>
</g>
<g >
<title>create_partitions (278 samples, 5.34%)</title><rect x="24.1" y="533" width="63.0" height="15.0" fill="rgb(229,73,43)" rx="2" ry="2" />
<text  x="27.06" y="543.5" >create..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%)</title><rect x="737.4" y="309" width="0.5" height="15.0" fill="rgb(231,173,17)" rx="2" ry="2" />
<text  x="740.41" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (126 samples, 2.42%)</title><rect x="579.6" y="405" width="28.6" height="15.0" fill="rgb(253,91,7)" rx="2" ry="2" />
<text  x="582.59" y="415.5" >fl..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (30 samples, 0.58%)</title><rect x="1125.4" y="405" width="6.8" height="15.0" fill="rgb(215,196,19)" rx="2" ry="2" />
<text  x="1128.38" y="415.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="88.2" y="517" width="0.3" height="15.0" fill="rgb(245,165,7)" rx="2" ry="2" />
<text  x="91.23" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="605.7" y="357" width="0.6" height="15.0" fill="rgb(220,108,17)" rx="2" ry="2" />
<text  x="608.67" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%)</title><rect x="1133.3" y="197" width="1.4" height="15.0" fill="rgb(220,194,13)" rx="2" ry="2" />
<text  x="1136.31" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="445.6" y="245" width="0.2" height="15.0" fill="rgb(213,222,16)" rx="2" ry="2" />
<text  x="448.58" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt; (1 samples, 0.02%)</title><rect x="28.4" y="341" width="0.2" height="15.0" fill="rgb(228,219,26)" rx="2" ry="2" />
<text  x="31.37" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (1 samples, 0.02%)</title><rect x="372.8" y="181" width="0.2" height="15.0" fill="rgb(232,74,3)" rx="2" ry="2" />
<text  x="375.80" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="116.6" y="357" width="0.2" height="15.0" fill="rgb(226,103,2)" rx="2" ry="2" />
<text  x="119.57" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="698.9" y="501" width="0.2" height="15.0" fill="rgb(223,179,48)" rx="2" ry="2" />
<text  x="701.86" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="667.8" y="405" width="0.5" height="15.0" fill="rgb(245,226,21)" rx="2" ry="2" />
<text  x="670.80" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (4 samples, 0.08%)</title><rect x="163.7" y="405" width="0.9" height="15.0" fill="rgb(212,117,17)" rx="2" ry="2" />
<text  x="166.74" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="1039.4" y="277" width="0.3" height="15.0" fill="rgb(219,125,53)" rx="2" ry="2" />
<text  x="1042.44" y="287.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (2 samples, 0.04%)</title><rect x="1137.6" y="165" width="0.5" height="15.0" fill="rgb(242,0,33)" rx="2" ry="2" />
<text  x="1140.62" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="85.5" y="229" width="0.2" height="15.0" fill="rgb(244,182,1)" rx="2" ry="2" />
<text  x="88.51" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="679.4" y="501" width="0.2" height="15.0" fill="rgb(244,192,27)" rx="2" ry="2" />
<text  x="682.36" y="511.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="14.3" y="565" width="0.2" height="15.0" fill="rgb(211,168,26)" rx="2" ry="2" />
<text  x="17.31" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (24 samples, 0.46%)</title><rect x="1093.2" y="405" width="5.4" height="15.0" fill="rgb(225,74,31)" rx="2" ry="2" />
<text  x="1096.18" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="422.9" y="149" width="2.3" height="15.0" fill="rgb(205,114,31)" rx="2" ry="2" />
<text  x="425.91" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="455.3" y="373" width="0.3" height="15.0" fill="rgb(240,216,9)" rx="2" ry="2" />
<text  x="458.33" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="659.4" y="261" width="0.2" height="15.0" fill="rgb(227,138,7)" rx="2" ry="2" />
<text  x="662.41" y="271.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Lexer (1 samples, 0.02%)</title><rect x="27.5" y="421" width="0.2" height="15.0" fill="rgb(251,110,16)" rx="2" ry="2" />
<text  x="30.46" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (6 samples, 0.12%)</title><rect x="583.0" y="325" width="1.4" height="15.0" fill="rgb(219,203,5)" rx="2" ry="2" />
<text  x="585.99" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,754 samples, 91.35%)</title><rect x="90.7" y="517" width="1078.0" height="15.0" fill="rgb(205,117,21)" rx="2" ry="2" />
<text  x="93.72" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="362.8" y="149" width="0.2" height="15.0" fill="rgb(219,55,50)" rx="2" ry="2" />
<text  x="365.82" y="159.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="22.2" y="533" width="0.3" height="15.0" fill="rgb(250,80,54)" rx="2" ry="2" />
<text  x="25.24" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="700.0" y="453" width="0.2" height="15.0" fill="rgb(254,139,6)" rx="2" ry="2" />
<text  x="703.00" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (33 samples, 0.63%)</title><rect x="1054.0" y="341" width="7.4" height="15.0" fill="rgb(240,113,24)" rx="2" ry="2" />
<text  x="1056.95" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%)</title><rect x="87.8" y="181" width="0.2" height="15.0" fill="rgb(227,11,25)" rx="2" ry="2" />
<text  x="90.77" y="191.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (433 samples, 8.32%)</title><rect x="203.9" y="293" width="98.2" height="15.0" fill="rgb(205,24,23)" rx="2" ry="2" />
<text  x="206.87" y="303.5" >seastar::do..</text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="51.0" y="277" width="0.3" height="15.0" fill="rgb(219,111,37)" rx="2" ry="2" />
<text  x="54.04" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="68.0" y="213" width="0.3" height="15.0" fill="rgb(247,115,37)" rx="2" ry="2" />
<text  x="71.05" y="223.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="116.3" y="309" width="0.3" height="15.0" fill="rgb(221,14,25)" rx="2" ry="2" />
<text  x="119.35" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (68 samples, 1.31%)</title><rect x="30.4" y="357" width="15.4" height="15.0" fill="rgb(223,172,6)" rx="2" ry="2" />
<text  x="33.41" y="367.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (5 samples, 0.10%)</title><rect x="622.7" y="437" width="1.1" height="15.0" fill="rgb(237,193,1)" rx="2" ry="2" />
<text  x="625.67" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="481.4" y="277" width="0.5" height="15.0" fill="rgb(216,197,49)" rx="2" ry="2" />
<text  x="484.41" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="786.6" y="309" width="0.2" height="15.0" fill="rgb(251,196,33)" rx="2" ry="2" />
<text  x="789.61" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (16 samples, 0.31%)</title><rect x="1163.7" y="485" width="3.6" height="15.0" fill="rgb(222,130,18)" rx="2" ry="2" />
<text  x="1166.70" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1043.7" y="293" width="0.3" height="15.0" fill="rgb(241,173,1)" rx="2" ry="2" />
<text  x="1046.75" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (18 samples, 0.35%)</title><rect x="197.3" y="261" width="4.1" height="15.0" fill="rgb(216,196,16)" rx="2" ry="2" />
<text  x="200.29" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="809.1" y="245" width="1.1" height="15.0" fill="rgb(220,69,7)" rx="2" ry="2" />
<text  x="812.06" y="255.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="23.6" y="229" width="0.2" height="15.0" fill="rgb(220,224,29)" rx="2" ry="2" />
<text  x="26.60" y="239.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (690 samples, 13.26%)</title><rect x="176.9" y="389" width="156.4" height="15.0" fill="rgb(208,98,4)" rx="2" ry="2" />
<text  x="179.89" y="399.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="793.9" y="229" width="0.2" height="15.0" fill="rgb(211,42,37)" rx="2" ry="2" />
<text  x="796.87" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="982.8" y="309" width="0.2" height="15.0" fill="rgb(253,130,41)" rx="2" ry="2" />
<text  x="985.75" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::pair (1 samples, 0.02%)</title><rect x="117.0" y="261" width="0.3" height="15.0" fill="rgb(208,106,10)" rx="2" ry="2" />
<text  x="120.03" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1034.2" y="229" width="0.7" height="15.0" fill="rgb(237,51,20)" rx="2" ry="2" />
<text  x="1037.22" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="549.9" y="325" width="0.2" height="15.0" fill="rgb(240,155,31)" rx="2" ry="2" />
<text  x="552.89" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="575.5" y="389" width="1.1" height="15.0" fill="rgb(232,207,52)" rx="2" ry="2" />
<text  x="578.51" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="700.0" y="421" width="0.2" height="15.0" fill="rgb(233,10,33)" rx="2" ry="2" />
<text  x="703.00" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (11 samples, 0.21%)</title><rect x="694.8" y="485" width="2.5" height="15.0" fill="rgb(223,215,46)" rx="2" ry="2" />
<text  x="697.78" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;frozen_schema  (1 samples, 0.02%)</title><rect x="113.9" y="373" width="0.2" height="15.0" fill="rgb(213,20,36)" rx="2" ry="2" />
<text  x="116.85" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="762.8" y="405" width="0.2" height="15.0" fill="rgb(216,201,36)" rx="2" ry="2" />
<text  x="765.81" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="600.5" y="357" width="0.4" height="15.0" fill="rgb(210,127,24)" rx="2" ry="2" />
<text  x="603.45" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="815.9" y="325" width="0.2" height="15.0" fill="rgb(222,67,18)" rx="2" ry="2" />
<text  x="818.86" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (12 samples, 0.23%)</title><rect x="689.8" y="485" width="2.7" height="15.0" fill="rgb(209,74,37)" rx="2" ry="2" />
<text  x="692.79" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="482.1" y="277" width="0.2" height="15.0" fill="rgb(212,144,42)" rx="2" ry="2" />
<text  x="485.09" y="287.5" ></text>
</g>
<g >
<title>query::result_atomic_cell_view::value (1 samples, 0.02%)</title><rect x="115.4" y="389" width="0.3" height="15.0" fill="rgb(217,186,54)" rx="2" ry="2" />
<text  x="118.44" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="51.7" y="245" width="0.5" height="15.0" fill="rgb(244,62,35)" rx="2" ry="2" />
<text  x="54.72" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="128.8" y="453" width="0.2" height="15.0" fill="rgb(251,186,20)" rx="2" ry="2" />
<text  x="131.82" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="84.1" y="453" width="0.3" height="15.0" fill="rgb(245,208,49)" rx="2" ry="2" />
<text  x="87.15" y="463.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="49.5" y="357" width="0.2" height="15.0" fill="rgb(245,100,41)" rx="2" ry="2" />
<text  x="52.45" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (5 samples, 0.10%)</title><rect x="67.4" y="309" width="1.1" height="15.0" fill="rgb(220,133,14)" rx="2" ry="2" />
<text  x="70.37" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (26 samples, 0.50%)</title><rect x="160.6" y="437" width="5.9" height="15.0" fill="rgb(228,159,43)" rx="2" ry="2" />
<text  x="163.56" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="59.4" y="245" width="0.3" height="15.0" fill="rgb(220,24,16)" rx="2" ry="2" />
<text  x="62.43" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%)</title><rect x="623.8" y="421" width="0.5" height="15.0" fill="rgb(207,102,37)" rx="2" ry="2" />
<text  x="626.81" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="703.2" y="453" width="0.2" height="15.0" fill="rgb(211,200,44)" rx="2" ry="2" />
<text  x="706.17" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (5 samples, 0.10%)</title><rect x="670.7" y="453" width="1.2" height="15.0" fill="rgb(238,128,46)" rx="2" ry="2" />
<text  x="673.75" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="65.8" y="293" width="0.2" height="15.0" fill="rgb(251,38,38)" rx="2" ry="2" />
<text  x="68.78" y="303.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (1 samples, 0.02%)</title><rect x="42.2" y="229" width="0.2" height="15.0" fill="rgb(241,182,2)" rx="2" ry="2" />
<text  x="45.20" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="1036.3" y="261" width="0.2" height="15.0" fill="rgb(222,53,23)" rx="2" ry="2" />
<text  x="1039.26" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="46.3" y="245" width="0.7" height="15.0" fill="rgb(212,125,2)" rx="2" ry="2" />
<text  x="49.28" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;mutation_fragment*&gt;, flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="88.7" y="517" width="0.2" height="15.0" fill="rgb(244,79,30)" rx="2" ry="2" />
<text  x="91.68" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%)</title><rect x="919.7" y="341" width="2.3" height="15.0" fill="rgb(237,35,0)" rx="2" ry="2" />
<text  x="922.72" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="659.4" y="277" width="0.2" height="15.0" fill="rgb(234,65,32)" rx="2" ry="2" />
<text  x="662.41" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (3 samples, 0.06%)</title><rect x="610.7" y="421" width="0.6" height="15.0" fill="rgb(214,19,29)" rx="2" ry="2" />
<text  x="613.66" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,325 samples, 44.68%)</title><rect x="118.2" y="501" width="527.1" height="15.0" fill="rgb(206,95,24)" rx="2" ry="2" />
<text  x="121.16" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%)</title><rect x="598.2" y="373" width="1.1" height="15.0" fill="rgb(207,37,41)" rx="2" ry="2" />
<text  x="601.19" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="455.1" y="373" width="0.2" height="15.0" fill="rgb(243,126,31)" rx="2" ry="2" />
<text  x="458.11" y="383.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="621.5" y="373" width="0.5" height="15.0" fill="rgb(233,33,16)" rx="2" ry="2" />
<text  x="624.54" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%)</title><rect x="698.9" y="373" width="0.2" height="15.0" fill="rgb(223,177,26)" rx="2" ry="2" />
<text  x="701.86" y="383.5" ></text>
</g>
</g>
</svg>
