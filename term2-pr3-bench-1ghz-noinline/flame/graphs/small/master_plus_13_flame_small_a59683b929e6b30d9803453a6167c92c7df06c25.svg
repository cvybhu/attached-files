<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="806.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="789" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="789" > </text>
<g id="frames">
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="764.2" y="485" width="0.2" height="15.0" fill="rgb(214,182,19)" rx="2" ry="2" />
<text  x="767.22" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="831.6" y="373" width="0.2" height="15.0" fill="rgb(246,124,14)" rx="2" ry="2" />
<text  x="834.56" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (48 samples, 0.93%)</title><rect x="856.8" y="533" width="10.9" height="15.0" fill="rgb(251,69,12)" rx="2" ry="2" />
<text  x="859.75" y="543.5" ></text>
</g>
<g >
<title>database::find_uuid (26 samples, 0.50%)</title><rect x="783.7" y="485" width="5.9" height="15.0" fill="rgb(216,98,21)" rx="2" ry="2" />
<text  x="786.69" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (2 samples, 0.04%)</title><rect x="837.1" y="421" width="0.4" height="15.0" fill="rgb(253,213,46)" rx="2" ry="2" />
<text  x="840.05" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="110.5" y="389" width="0.3" height="15.0" fill="rgb(228,15,28)" rx="2" ry="2" />
<text  x="113.55" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1050.3" y="437" width="0.2" height="15.0" fill="rgb(233,78,41)" rx="2" ry="2" />
<text  x="1053.29" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="581" width="0.3" height="15.0" fill="rgb(232,5,3)" rx="2" ry="2" />
<text  x="1169.64" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="976.5" y="421" width="0.5" height="15.0" fill="rgb(211,128,28)" rx="2" ry="2" />
<text  x="979.54" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="825.4" y="197" width="0.7" height="15.0" fill="rgb(248,57,5)" rx="2" ry="2" />
<text  x="828.37" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%)</title><rect x="24.2" y="261" width="0.2" height="15.0" fill="rgb(213,128,46)" rx="2" ry="2" />
<text  x="27.20" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="75.0" y="485" width="0.3" height="15.0" fill="rgb(254,100,34)" rx="2" ry="2" />
<text  x="78.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%)</title><rect x="640.8" y="533" width="0.4" height="15.0" fill="rgb(248,209,35)" rx="2" ry="2" />
<text  x="643.77" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.2" y="357" width="0.3" height="15.0" fill="rgb(248,25,51)" rx="2" ry="2" />
<text  x="43.23" y="367.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="659.3" y="517" width="0.2" height="15.0" fill="rgb(254,228,10)" rx="2" ry="2" />
<text  x="662.32" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="83.8" y="421" width="0.2" height="15.0" fill="rgb(244,43,12)" rx="2" ry="2" />
<text  x="86.75" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.23%)</title><rect x="695.1" y="565" width="2.7" height="15.0" fill="rgb(251,96,21)" rx="2" ry="2" />
<text  x="698.05" y="575.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (28 samples, 0.54%)</title><rect x="1119.7" y="373" width="6.4" height="15.0" fill="rgb(232,17,25)" rx="2" ry="2" />
<text  x="1122.69" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.2" y="613" width="0.3" height="15.0" fill="rgb(225,84,48)" rx="2" ry="2" />
<text  x="13.23" y="623.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (14 samples, 0.27%)</title><rect x="447.2" y="341" width="3.2" height="15.0" fill="rgb(231,9,42)" rx="2" ry="2" />
<text  x="450.23" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;sstables::commitlog_interval [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::operator= (1 samples, 0.02%)</title><rect x="81.9" y="373" width="0.2" height="15.0" fill="rgb(210,154,30)" rx="2" ry="2" />
<text  x="84.92" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="58.6" y="213" width="0.2" height="15.0" fill="rgb(250,81,24)" rx="2" ry="2" />
<text  x="61.56" y="223.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.35%)</title><rect x="1012.3" y="341" width="4.1" height="15.0" fill="rgb(227,186,28)" rx="2" ry="2" />
<text  x="1015.27" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (71 samples, 1.38%)</title><rect x="810.5" y="357" width="16.2" height="15.0" fill="rgb(224,21,54)" rx="2" ry="2" />
<text  x="813.49" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="54.9" y="229" width="0.2" height="15.0" fill="rgb(225,120,21)" rx="2" ry="2" />
<text  x="57.89" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (37 samples, 0.72%)</title><rect x="485.3" y="405" width="8.4" height="15.0" fill="rgb(210,160,27)" rx="2" ry="2" />
<text  x="488.25" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%)</title><rect x="73.2" y="405" width="0.2" height="15.0" fill="rgb(218,109,17)" rx="2" ry="2" />
<text  x="76.21" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="968.3" y="405" width="0.2" height="15.0" fill="rgb(222,68,43)" rx="2" ry="2" />
<text  x="971.29" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="18.7" y="405" width="0.2" height="15.0" fill="rgb(206,91,21)" rx="2" ry="2" />
<text  x="21.70" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="137.8" y="549" width="0.5" height="15.0" fill="rgb(217,20,6)" rx="2" ry="2" />
<text  x="140.80" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="969.0" y="469" width="0.4" height="15.0" fill="rgb(219,190,5)" rx="2" ry="2" />
<text  x="971.98" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="987.5" y="373" width="0.3" height="15.0" fill="rgb(237,32,4)" rx="2" ry="2" />
<text  x="990.53" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (4 samples, 0.08%)</title><rect x="868.9" y="485" width="0.9" height="15.0" fill="rgb(222,191,47)" rx="2" ry="2" />
<text  x="871.89" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="54.9" y="213" width="0.2" height="15.0" fill="rgb(239,192,48)" rx="2" ry="2" />
<text  x="57.89" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="60.2" y="357" width="0.2" height="15.0" fill="rgb(232,21,3)" rx="2" ry="2" />
<text  x="63.16" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%)</title><rect x="1094.5" y="453" width="0.4" height="15.0" fill="rgb(225,114,27)" rx="2" ry="2" />
<text  x="1097.49" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="675.8" y="533" width="0.5" height="15.0" fill="rgb(232,79,44)" rx="2" ry="2" />
<text  x="678.81" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="24.9" y="277" width="0.2" height="15.0" fill="rgb(214,225,17)" rx="2" ry="2" />
<text  x="27.89" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="55.1" y="229" width="0.2" height="15.0" fill="rgb(253,108,45)" rx="2" ry="2" />
<text  x="58.12" y="239.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%)</title><rect x="884.9" y="293" width="0.3" height="15.0" fill="rgb(253,167,49)" rx="2" ry="2" />
<text  x="887.92" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="996.9" y="325" width="0.7" height="15.0" fill="rgb(240,107,51)" rx="2" ry="2" />
<text  x="999.92" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%)</title><rect x="449.3" y="309" width="0.9" height="15.0" fill="rgb(240,138,2)" rx="2" ry="2" />
<text  x="452.29" y="319.5" ></text>
</g>
<g >
<title>auth::find_record (1 samples, 0.02%)</title><rect x="1166.6" y="341" width="0.3" height="15.0" fill="rgb(254,209,34)" rx="2" ry="2" />
<text  x="1169.64" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="844.4" y="389" width="0.4" height="15.0" fill="rgb(252,188,5)" rx="2" ry="2" />
<text  x="847.38" y="399.5" ></text>
</g>
<g >
<title>service::migration_manager::announce_new_column_family (1 samples, 0.02%)</title><rect x="718.6" y="469" width="0.3" height="15.0" fill="rgb(216,122,41)" rx="2" ry="2" />
<text  x="721.64" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::deletable_row_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.6" y="277" width="0.2" height="15.0" fill="rgb(246,74,18)" rx="2" ry="2" />
<text  x="1126.58" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%)</title><rect x="75.7" y="469" width="0.3" height="15.0" fill="rgb(249,219,18)" rx="2" ry="2" />
<text  x="78.73" y="479.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="938.7" y="501" width="0.3" height="15.0" fill="rgb(221,102,18)" rx="2" ry="2" />
<text  x="941.75" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="557.2" y="437" width="0.2" height="15.0" fill="rgb(238,65,13)" rx="2" ry="2" />
<text  x="560.17" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="580.5" y="437" width="0.5" height="15.0" fill="rgb(248,194,44)" rx="2" ry="2" />
<text  x="583.53" y="447.5" ></text>
</g>
<g >
<title>compaction_backlog_manager::backlog (1 samples, 0.02%)</title><rect x="1167.3" y="501" width="0.3" height="15.0" fill="rgb(209,82,39)" rx="2" ry="2" />
<text  x="1170.33" y="511.5" ></text>
</g>
<g >
<title>ser::column_view::c (2 samples, 0.04%)</title><rect x="110.8" y="389" width="0.4" height="15.0" fill="rgb(236,132,10)" rx="2" ry="2" />
<text  x="113.78" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.14%)</title><rect x="44.6" y="421" width="1.6" height="15.0" fill="rgb(232,54,18)" rx="2" ry="2" />
<text  x="47.58" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (40 samples, 0.78%)</title><rect x="516.4" y="389" width="9.2" height="15.0" fill="rgb(242,77,54)" rx="2" ry="2" />
<text  x="519.40" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (4 samples, 0.08%)</title><rect x="606.2" y="373" width="0.9" height="15.0" fill="rgb(212,183,5)" rx="2" ry="2" />
<text  x="609.18" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (362 samples, 7.03%)</title><rect x="362.3" y="325" width="82.9" height="15.0" fill="rgb(216,151,35)" rx="2" ry="2" />
<text  x="365.26" y="335.5" >compact_m..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="935.3" y="437" width="0.5" height="15.0" fill="rgb(227,49,20)" rx="2" ry="2" />
<text  x="938.31" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="106.4" y="501" width="0.3" height="15.0" fill="rgb(213,64,37)" rx="2" ry="2" />
<text  x="109.42" y="511.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="18.2" y="229" width="0.3" height="15.0" fill="rgb(247,75,31)" rx="2" ry="2" />
<text  x="21.25" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="988.0" y="437" width="0.7" height="15.0" fill="rgb(232,112,43)" rx="2" ry="2" />
<text  x="990.99" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="18.0" y="613" width="0.2" height="15.0" fill="rgb(245,196,20)" rx="2" ry="2" />
<text  x="21.02" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="675.8" y="501" width="0.2" height="15.0" fill="rgb(224,41,20)" rx="2" ry="2" />
<text  x="678.81" y="511.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="300.4" y="309" width="0.2" height="15.0" fill="rgb(218,41,49)" rx="2" ry="2" />
<text  x="303.42" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="733.3" y="549" width="0.2" height="15.0" fill="rgb(244,113,19)" rx="2" ry="2" />
<text  x="736.30" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="60.4" y="197" width="0.2" height="15.0" fill="rgb(223,207,12)" rx="2" ry="2" />
<text  x="63.39" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1120.1" y="213" width="0.3" height="15.0" fill="rgb(210,38,7)" rx="2" ry="2" />
<text  x="1123.14" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1161.8" y="533" width="0.3" height="15.0" fill="rgb(225,227,20)" rx="2" ry="2" />
<text  x="1164.83" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%)</title><rect x="1119.2" y="565" width="0.3" height="15.0" fill="rgb(252,145,26)" rx="2" ry="2" />
<text  x="1122.23" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="60.4" y="357" width="0.2" height="15.0" fill="rgb(215,211,52)" rx="2" ry="2" />
<text  x="63.39" y="367.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="745.9" y="501" width="0.2" height="15.0" fill="rgb(219,16,10)" rx="2" ry="2" />
<text  x="748.90" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1116.5" y="517" width="0.4" height="15.0" fill="rgb(211,187,48)" rx="2" ry="2" />
<text  x="1119.48" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="325" width="0.2" height="15.0" fill="rgb(253,140,4)" rx="2" ry="2" />
<text  x="82.17" y="335.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,854 samples, 35.99%)</title><rect x="164.1" y="533" width="424.7" height="15.0" fill="rgb(253,2,41)" rx="2" ry="2" />
<text  x="167.14" y="543.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="138.3" y="549" width="0.6" height="15.0" fill="rgb(236,28,20)" rx="2" ry="2" />
<text  x="141.26" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (487 samples, 9.45%)</title><rect x="350.3" y="405" width="111.6" height="15.0" fill="rgb(249,45,5)" rx="2" ry="2" />
<text  x="353.35" y="415.5" >std::__invoke..</text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1122.4" y="325" width="0.3" height="15.0" fill="rgb(238,169,36)" rx="2" ry="2" />
<text  x="1125.43" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="453" width="8.0" height="15.0" fill="rgb(228,61,50)" rx="2" ry="2" />
<text  x="1122.46" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="674.7" y="469" width="0.2" height="15.0" fill="rgb(221,196,46)" rx="2" ry="2" />
<text  x="677.67" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%)</title><rect x="718.9" y="597" width="0.2" height="15.0" fill="rgb(212,210,38)" rx="2" ry="2" />
<text  x="721.87" y="607.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1121.5" y="325" width="0.2" height="15.0" fill="rgb(210,44,19)" rx="2" ry="2" />
<text  x="1124.52" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="885.2" y="373" width="0.4" height="15.0" fill="rgb(226,0,42)" rx="2" ry="2" />
<text  x="888.15" y="383.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="72.3" y="405" width="0.2" height="15.0" fill="rgb(242,206,11)" rx="2" ry="2" />
<text  x="75.30" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="375.3" y="293" width="0.2" height="15.0" fill="rgb(237,54,18)" rx="2" ry="2" />
<text  x="378.31" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (12 samples, 0.23%)</title><rect x="843.5" y="437" width="2.7" height="15.0" fill="rgb(254,81,48)" rx="2" ry="2" />
<text  x="846.47" y="447.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(247,184,40)" rx="2" ry="2" />
<text  x="13.69" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="603.0" y="389" width="0.2" height="15.0" fill="rgb(205,55,49)" rx="2" ry="2" />
<text  x="605.98" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="810.5" y="341" width="0.4" height="15.0" fill="rgb(234,213,7)" rx="2" ry="2" />
<text  x="813.49" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (14 samples, 0.27%)</title><rect x="757.8" y="517" width="3.2" height="15.0" fill="rgb(209,122,44)" rx="2" ry="2" />
<text  x="760.81" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="848.5" y="501" width="0.2" height="15.0" fill="rgb(211,96,7)" rx="2" ry="2" />
<text  x="851.51" y="511.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="746.8" y="165" width="0.2" height="15.0" fill="rgb(217,195,37)" rx="2" ry="2" />
<text  x="749.81" y="175.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%)</title><rect x="84.2" y="533" width="0.9" height="15.0" fill="rgb(235,123,46)" rx="2" ry="2" />
<text  x="87.21" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="115.8" y="565" width="0.5" height="15.0" fill="rgb(222,28,23)" rx="2" ry="2" />
<text  x="118.82" y="575.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%)</title><rect x="506.6" y="421" width="0.6" height="15.0" fill="rgb(211,225,8)" rx="2" ry="2" />
<text  x="509.55" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="73.0" y="405" width="0.2" height="15.0" fill="rgb(234,32,13)" rx="2" ry="2" />
<text  x="75.99" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="480.0" y="437" width="0.2" height="15.0" fill="rgb(208,97,47)" rx="2" ry="2" />
<text  x="482.98" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.29%)</title><rect x="1035.2" y="373" width="3.4" height="15.0" fill="rgb(209,34,33)" rx="2" ry="2" />
<text  x="1038.17" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (4 samples, 0.08%)</title><rect x="999.4" y="389" width="1.0" height="15.0" fill="rgb(232,142,38)" rx="2" ry="2" />
<text  x="1002.44" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="833.6" y="421" width="0.2" height="15.0" fill="rgb(217,83,45)" rx="2" ry="2" />
<text  x="836.62" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (2 samples, 0.04%)</title><rect x="492.1" y="357" width="0.5" height="15.0" fill="rgb(253,51,0)" rx="2" ry="2" />
<text  x="495.12" y="367.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1028.5" y="357" width="2.1" height="15.0" fill="rgb(247,206,53)" rx="2" ry="2" />
<text  x="1031.53" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="791.9" y="453" width="0.5" height="15.0" fill="rgb(217,38,32)" rx="2" ry="2" />
<text  x="794.93" y="463.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1125.0" y="293" width="0.2" height="15.0" fill="rgb(241,134,25)" rx="2" ry="2" />
<text  x="1127.95" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (168 samples, 3.26%)</title><rect x="1000.6" y="389" width="38.5" height="15.0" fill="rgb(226,126,24)" rx="2" ry="2" />
<text  x="1003.59" y="399.5" >ser..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (8 samples, 0.16%)</title><rect x="841.4" y="421" width="1.8" height="15.0" fill="rgb(221,81,25)" rx="2" ry="2" />
<text  x="844.41" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="821.0" y="245" width="0.2" height="15.0" fill="rgb(241,138,40)" rx="2" ry="2" />
<text  x="824.02" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="57.6" y="293" width="0.3" height="15.0" fill="rgb(211,126,30)" rx="2" ry="2" />
<text  x="60.64" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="56.0" y="357" width="0.3" height="15.0" fill="rgb(223,15,10)" rx="2" ry="2" />
<text  x="59.04" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%)</title><rect x="1027.2" y="293" width="0.4" height="15.0" fill="rgb(241,202,36)" rx="2" ry="2" />
<text  x="1030.15" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%)</title><rect x="83.5" y="453" width="0.3" height="15.0" fill="rgb(208,222,10)" rx="2" ry="2" />
<text  x="86.52" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (3 samples, 0.06%)</title><rect x="373.9" y="309" width="0.7" height="15.0" fill="rgb(244,219,45)" rx="2" ry="2" />
<text  x="376.94" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="57.6" y="373" width="0.5" height="15.0" fill="rgb(250,52,47)" rx="2" ry="2" />
<text  x="60.64" y="383.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%)</title><rect x="1078.0" y="405" width="0.2" height="15.0" fill="rgb(210,20,25)" rx="2" ry="2" />
<text  x="1081.00" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="692.1" y="549" width="0.2" height="15.0" fill="rgb(225,194,16)" rx="2" ry="2" />
<text  x="695.07" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%)</title><rect x="53.3" y="309" width="0.2" height="15.0" fill="rgb(214,46,28)" rx="2" ry="2" />
<text  x="56.29" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="567.7" y="437" width="0.2" height="15.0" fill="rgb(223,136,32)" rx="2" ry="2" />
<text  x="570.71" y="447.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="943.6" y="469" width="0.4" height="15.0" fill="rgb(246,57,35)" rx="2" ry="2" />
<text  x="946.56" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="307.7" y="325" width="0.3" height="15.0" fill="rgb(221,31,46)" rx="2" ry="2" />
<text  x="310.75" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="599.8" y="389" width="0.4" height="15.0" fill="rgb(254,180,1)" rx="2" ry="2" />
<text  x="602.77" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.33%)</title><rect x="1012.5" y="325" width="3.9" height="15.0" fill="rgb(217,17,28)" rx="2" ry="2" />
<text  x="1015.50" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="47.6" y="293" width="0.2" height="15.0" fill="rgb(215,168,25)" rx="2" ry="2" />
<text  x="50.56" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="754.4" y="533" width="0.2" height="15.0" fill="rgb(249,55,6)" rx="2" ry="2" />
<text  x="757.37" y="543.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (13 samples, 0.25%)</title><rect x="564.5" y="389" width="3.0" height="15.0" fill="rgb(240,74,19)" rx="2" ry="2" />
<text  x="567.50" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (3 samples, 0.06%)</title><rect x="569.1" y="437" width="0.7" height="15.0" fill="rgb(250,209,25)" rx="2" ry="2" />
<text  x="572.08" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%)</title><rect x="719.3" y="597" width="0.5" height="15.0" fill="rgb(237,146,52)" rx="2" ry="2" />
<text  x="722.33" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1137.6" y="389" width="0.2" height="15.0" fill="rgb(242,34,42)" rx="2" ry="2" />
<text  x="1140.55" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.4" y="277" width="0.3" height="15.0" fill="rgb(209,125,22)" rx="2" ry="2" />
<text  x="27.43" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (4 samples, 0.08%)</title><rect x="701.5" y="581" width="0.9" height="15.0" fill="rgb(214,200,6)" rx="2" ry="2" />
<text  x="704.46" y="591.5" ></text>
</g>
<g >
<title>cql3::update_parameters::prefetch_data::prefetch_data (1 samples, 0.02%)</title><rect x="887.2" y="469" width="0.2" height="15.0" fill="rgb(224,27,11)" rx="2" ry="2" />
<text  x="890.21" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (43 samples, 0.83%)</title><rect x="246.6" y="181" width="9.8" height="15.0" fill="rgb(248,221,34)" rx="2" ry="2" />
<text  x="249.60" y="191.5" ></text>
</g>
<g >
<title>row::external_memory_usage (37 samples, 0.72%)</title><rect x="264.2" y="245" width="8.5" height="15.0" fill="rgb(205,80,25)" rx="2" ry="2" />
<text  x="267.23" y="255.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%)</title><rect x="271.3" y="213" width="1.4" height="15.0" fill="rgb(208,166,5)" rx="2" ry="2" />
<text  x="274.33" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="658.6" y="469" width="0.3" height="15.0" fill="rgb(243,223,1)" rx="2" ry="2" />
<text  x="661.63" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="884.9" y="373" width="0.3" height="15.0" fill="rgb(245,85,23)" rx="2" ry="2" />
<text  x="887.92" y="383.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="1161.4" y="549" width="0.7" height="15.0" fill="rgb(235,157,46)" rx="2" ry="2" />
<text  x="1164.37" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="80.3" y="485" width="0.2" height="15.0" fill="rgb(215,5,40)" rx="2" ry="2" />
<text  x="83.31" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="847.6" y="373" width="0.4" height="15.0" fill="rgb(208,118,6)" rx="2" ry="2" />
<text  x="850.59" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1137.6" y="245" width="0.2" height="15.0" fill="rgb(207,155,54)" rx="2" ry="2" />
<text  x="1140.55" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="761.0" y="533" width="0.2" height="15.0" fill="rgb(228,154,36)" rx="2" ry="2" />
<text  x="764.01" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (5 samples, 0.10%)</title><rect x="49.9" y="405" width="1.1" height="15.0" fill="rgb(206,190,45)" rx="2" ry="2" />
<text  x="52.85" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (3 samples, 0.06%)</title><rect x="284.6" y="261" width="0.7" height="15.0" fill="rgb(233,176,24)" rx="2" ry="2" />
<text  x="287.62" y="271.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%)</title><rect x="388.4" y="277" width="0.2" height="15.0" fill="rgb(243,145,38)" rx="2" ry="2" />
<text  x="391.37" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="336.8" y="389" width="0.3" height="15.0" fill="rgb(228,128,27)" rx="2" ry="2" />
<text  x="339.84" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="862.9" y="485" width="0.7" height="15.0" fill="rgb(235,90,41)" rx="2" ry="2" />
<text  x="865.93" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="639.2" y="501" width="0.2" height="15.0" fill="rgb(205,145,8)" rx="2" ry="2" />
<text  x="642.17" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="537.2" y="309" width="0.3" height="15.0" fill="rgb(222,133,39)" rx="2" ry="2" />
<text  x="540.24" y="319.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (3 samples, 0.06%)</title><rect x="110.8" y="453" width="0.7" height="15.0" fill="rgb(248,37,32)" rx="2" ry="2" />
<text  x="113.78" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="880.1" y="453" width="0.2" height="15.0" fill="rgb(217,75,14)" rx="2" ry="2" />
<text  x="883.11" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="747.0" y="597" width="1.0" height="15.0" fill="rgb(214,163,40)" rx="2" ry="2" />
<text  x="750.04" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation&lt;bytes_ostream&gt;::writer_of_mutation (1 samples, 0.02%)</title><rect x="1133.7" y="261" width="0.2" height="15.0" fill="rgb(226,112,4)" rx="2" ry="2" />
<text  x="1136.66" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="928.4" y="421" width="0.7" height="15.0" fill="rgb(242,185,27)" rx="2" ry="2" />
<text  x="931.44" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="706.3" y="549" width="0.4" height="15.0" fill="rgb(250,64,41)" rx="2" ry="2" />
<text  x="709.27" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="82.6" y="629" width="0.5" height="15.0" fill="rgb(232,194,9)" rx="2" ry="2" />
<text  x="85.60" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="45.5" y="309" width="0.2" height="15.0" fill="rgb(237,21,2)" rx="2" ry="2" />
<text  x="48.50" y="319.5" ></text>
</g>
<g >
<title>auth::require_record (1 samples, 0.02%)</title><rect x="1166.6" y="357" width="0.3" height="15.0" fill="rgb(234,221,36)" rx="2" ry="2" />
<text  x="1169.64" y="367.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%)</title><rect x="638.2" y="517" width="0.3" height="15.0" fill="rgb(223,89,4)" rx="2" ry="2" />
<text  x="641.25" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::row_has_complex_deletion (1 samples, 0.02%)</title><rect x="84.2" y="501" width="0.2" height="15.0" fill="rgb(248,166,42)" rx="2" ry="2" />
<text  x="87.21" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="55.1" y="325" width="0.5" height="15.0" fill="rgb(238,132,19)" rx="2" ry="2" />
<text  x="58.12" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::apply (3 samples, 0.06%)</title><rect x="110.8" y="437" width="0.7" height="15.0" fill="rgb(226,91,4)" rx="2" ry="2" />
<text  x="113.78" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="815.3" y="309" width="0.7" height="15.0" fill="rgb(206,51,45)" rx="2" ry="2" />
<text  x="818.30" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="772.5" y="405" width="0.2" height="15.0" fill="rgb(247,209,24)" rx="2" ry="2" />
<text  x="775.47" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (78 samples, 1.51%)</title><rect x="531.5" y="405" width="17.9" height="15.0" fill="rgb(206,26,43)" rx="2" ry="2" />
<text  x="534.52" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;unsigned long&amp;, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; (1 samples, 0.02%)</title><rect x="1134.6" y="261" width="0.2" height="15.0" fill="rgb(211,30,1)" rx="2" ry="2" />
<text  x="1137.57" y="271.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="745.9" y="517" width="0.2" height="15.0" fill="rgb(244,85,44)" rx="2" ry="2" />
<text  x="748.90" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="60.6" y="373" width="0.2" height="15.0" fill="rgb(228,18,17)" rx="2" ry="2" />
<text  x="63.62" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.10%)</title><rect x="48.2" y="293" width="1.2" height="15.0" fill="rgb(239,96,30)" rx="2" ry="2" />
<text  x="51.25" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.12%)</title><rect x="133.9" y="469" width="1.4" height="15.0" fill="rgb(254,155,5)" rx="2" ry="2" />
<text  x="136.91" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="786.2" y="421" width="0.9" height="15.0" fill="rgb(252,190,21)" rx="2" ry="2" />
<text  x="789.21" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="45.0" y="261" width="0.3" height="15.0" fill="rgb(233,27,47)" rx="2" ry="2" />
<text  x="48.04" y="271.5" ></text>
</g>
<g >
<title>cql3::relation::get_operator (1 samples, 0.02%)</title><rect x="70.9" y="501" width="0.3" height="15.0" fill="rgb(231,183,48)" rx="2" ry="2" />
<text  x="73.92" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (65 samples, 1.26%)</title><rect x="293.8" y="357" width="14.9" height="15.0" fill="rgb(243,128,0)" rx="2" ry="2" />
<text  x="296.78" y="367.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="639.6" y="501" width="0.3" height="15.0" fill="rgb(207,153,45)" rx="2" ry="2" />
<text  x="642.62" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_function_statement*, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="65.7" y="421" width="0.2" height="15.0" fill="rgb(214,48,23)" rx="2" ry="2" />
<text  x="68.66" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="880.1" y="485" width="0.2" height="15.0" fill="rgb(225,158,53)" rx="2" ry="2" />
<text  x="883.11" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="54.9" y="181" width="0.2" height="15.0" fill="rgb(241,109,10)" rx="2" ry="2" />
<text  x="57.89" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="675.8" y="517" width="0.2" height="15.0" fill="rgb(211,76,12)" rx="2" ry="2" />
<text  x="678.81" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%)</title><rect x="784.8" y="421" width="1.4" height="15.0" fill="rgb(216,181,32)" rx="2" ry="2" />
<text  x="787.83" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1067.7" y="357" width="0.2" height="15.0" fill="rgb(231,90,53)" rx="2" ry="2" />
<text  x="1070.69" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="650.4" y="501" width="0.2" height="15.0" fill="rgb(247,209,27)" rx="2" ry="2" />
<text  x="653.39" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="832.9" y="373" width="0.5" height="15.0" fill="rgb(215,110,23)" rx="2" ry="2" />
<text  x="835.93" y="383.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="1003.3" y="373" width="3.2" height="15.0" fill="rgb(207,202,50)" rx="2" ry="2" />
<text  x="1006.33" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="679.9" y="549" width="0.3" height="15.0" fill="rgb(249,53,36)" rx="2" ry="2" />
<text  x="682.93" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.6" y="341" width="0.3" height="15.0" fill="rgb(216,182,0)" rx="2" ry="2" />
<text  x="82.63" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (3 samples, 0.06%)</title><rect x="588.8" y="517" width="0.7" height="15.0" fill="rgb(246,91,8)" rx="2" ry="2" />
<text  x="591.78" y="527.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (3 samples, 0.06%)</title><rect x="110.8" y="469" width="0.7" height="15.0" fill="rgb(254,51,47)" rx="2" ry="2" />
<text  x="113.78" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="987.3" y="357" width="0.2" height="15.0" fill="rgb(226,196,8)" rx="2" ry="2" />
<text  x="990.30" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="1043.4" y="389" width="0.7" height="15.0" fill="rgb(222,122,31)" rx="2" ry="2" />
<text  x="1046.42" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (989 samples, 19.20%)</title><rect x="892.7" y="549" width="226.5" height="15.0" fill="rgb(228,60,0)" rx="2" ry="2" />
<text  x="895.71" y="559.5" >seastar::noncopyable_function..</text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="675.4" y="549" width="0.9" height="15.0" fill="rgb(217,46,33)" rx="2" ry="2" />
<text  x="678.35" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="982.5" y="453" width="0.2" height="15.0" fill="rgb(251,69,13)" rx="2" ry="2" />
<text  x="985.49" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="802.7" y="405" width="1.4" height="15.0" fill="rgb(224,87,51)" rx="2" ry="2" />
<text  x="805.70" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (3 samples, 0.06%)</title><rect x="305.9" y="277" width="0.7" height="15.0" fill="rgb(205,196,45)" rx="2" ry="2" />
<text  x="308.92" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="443.1" y="261" width="0.2" height="15.0" fill="rgb(231,211,29)" rx="2" ry="2" />
<text  x="446.11" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.2" y="549" width="0.3" height="15.0" fill="rgb(213,65,27)" rx="2" ry="2" />
<text  x="21.25" y="559.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="525.1" y="373" width="0.5" height="15.0" fill="rgb(240,162,37)" rx="2" ry="2" />
<text  x="528.10" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="466.5" y="437" width="0.9" height="15.0" fill="rgb(252,82,49)" rx="2" ry="2" />
<text  x="469.47" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="277" width="0.5" height="15.0" fill="rgb(252,159,50)" rx="2" ry="2" />
<text  x="56.52" y="287.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="660.9" y="565" width="0.3" height="15.0" fill="rgb(211,30,43)" rx="2" ry="2" />
<text  x="663.92" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="735.8" y="533" width="0.2" height="15.0" fill="rgb(233,54,45)" rx="2" ry="2" />
<text  x="738.82" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="821.9" y="213" width="0.5" height="15.0" fill="rgb(227,205,21)" rx="2" ry="2" />
<text  x="824.94" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="880.1" y="501" width="0.2" height="15.0" fill="rgb(213,183,11)" rx="2" ry="2" />
<text  x="883.11" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="78.7" y="389" width="0.2" height="15.0" fill="rgb(221,163,3)" rx="2" ry="2" />
<text  x="81.71" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="556.3" y="421" width="0.2" height="15.0" fill="rgb(239,229,19)" rx="2" ry="2" />
<text  x="559.25" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (60 samples, 1.16%)</title><rect x="43.7" y="453" width="13.7" height="15.0" fill="rgb(244,182,14)" rx="2" ry="2" />
<text  x="46.67" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="212.9" y="293" width="0.3" height="15.0" fill="rgb(227,228,23)" rx="2" ry="2" />
<text  x="215.93" y="303.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="849.9" y="517" width="0.4" height="15.0" fill="rgb(215,130,11)" rx="2" ry="2" />
<text  x="852.88" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="87.9" y="613" width="0.2" height="15.0" fill="rgb(241,5,40)" rx="2" ry="2" />
<text  x="90.87" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="276.8" y="213" width="0.3" height="15.0" fill="rgb(249,121,54)" rx="2" ry="2" />
<text  x="279.83" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (372 samples, 7.22%)</title><rect x="361.6" y="341" width="85.2" height="15.0" fill="rgb(233,112,5)" rx="2" ry="2" />
<text  x="364.57" y="351.5" >flat_mutat..</text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="28.1" y="357" width="0.7" height="15.0" fill="rgb(210,114,4)" rx="2" ry="2" />
<text  x="31.09" y="367.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="872.6" y="533" width="1.3" height="15.0" fill="rgb(212,36,26)" rx="2" ry="2" />
<text  x="875.55" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="578.0" y="453" width="0.2" height="15.0" fill="rgb(242,214,38)" rx="2" ry="2" />
<text  x="581.01" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="548.7" y="389" width="0.2" height="15.0" fill="rgb(216,74,36)" rx="2" ry="2" />
<text  x="551.70" y="399.5" ></text>
</g>
<g >
<title>database::query (10 samples, 0.19%)</title><rect x="106.7" y="597" width="2.2" height="15.0" fill="rgb(237,157,11)" rx="2" ry="2" />
<text  x="109.65" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="84.4" y="373" width="0.3" height="15.0" fill="rgb(252,55,10)" rx="2" ry="2" />
<text  x="87.44" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.4" y="629" width="0.2" height="15.0" fill="rgb(240,124,40)" rx="2" ry="2" />
<text  x="88.35" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="865.5" y="453" width="0.2" height="15.0" fill="rgb(227,97,34)" rx="2" ry="2" />
<text  x="868.45" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1122.0" y="293" width="0.2" height="15.0" fill="rgb(231,135,19)" rx="2" ry="2" />
<text  x="1124.98" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%)</title><rect x="677.9" y="581" width="0.2" height="15.0" fill="rgb(254,103,30)" rx="2" ry="2" />
<text  x="680.87" y="591.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%)</title><rect x="835.9" y="453" width="0.2" height="15.0" fill="rgb(226,31,37)" rx="2" ry="2" />
<text  x="838.91" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (113 samples, 2.19%)</title><rect x="1006.5" y="373" width="25.9" height="15.0" fill="rgb(217,208,47)" rx="2" ry="2" />
<text  x="1009.54" y="383.5" >s..</text>
</g>
<g >
<title>__atomic_store (2 samples, 0.04%)</title><rect x="745.4" y="581" width="0.5" height="15.0" fill="rgb(227,55,38)" rx="2" ry="2" />
<text  x="748.44" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (53 samples, 1.03%)</title><rect x="599.1" y="421" width="12.1" height="15.0" fill="rgb(251,59,47)" rx="2" ry="2" />
<text  x="602.08" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (91 samples, 1.77%)</title><rect x="1057.6" y="437" width="20.9" height="15.0" fill="rgb(229,156,14)" rx="2" ry="2" />
<text  x="1060.62" y="447.5" ></text>
</g>
<g >
<title>executor&lt;test_read (555 samples, 10.77%)</title><rect x="751.2" y="581" width="127.1" height="15.0" fill="rgb(220,101,32)" rx="2" ry="2" />
<text  x="754.16" y="591.5" >executor&lt;test_r..</text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (7 samples, 0.14%)</title><rect x="466.0" y="453" width="1.6" height="15.0" fill="rgb(246,11,54)" rx="2" ry="2" />
<text  x="469.01" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.6" y="341" width="0.4" height="15.0" fill="rgb(224,68,40)" rx="2" ry="2" />
<text  x="47.58" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (20 samples, 0.39%)</title><rect x="274.8" y="277" width="4.5" height="15.0" fill="rgb(241,23,45)" rx="2" ry="2" />
<text  x="277.77" y="287.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="306.6" y="277" width="0.9" height="15.0" fill="rgb(223,149,45)" rx="2" ry="2" />
<text  x="309.60" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1152.4" y="501" width="0.3" height="15.0" fill="rgb(232,105,2)" rx="2" ry="2" />
<text  x="1155.44" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="746.8" y="405" width="0.2" height="15.0" fill="rgb(248,58,12)" rx="2" ry="2" />
<text  x="749.81" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="42.3" y="341" width="0.2" height="15.0" fill="rgb(228,27,23)" rx="2" ry="2" />
<text  x="45.29" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="675.4" y="533" width="0.2" height="15.0" fill="rgb(214,221,5)" rx="2" ry="2" />
<text  x="678.35" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (7 samples, 0.14%)</title><rect x="643.3" y="533" width="1.6" height="15.0" fill="rgb(222,153,3)" rx="2" ry="2" />
<text  x="646.29" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="330.4" y="437" width="0.3" height="15.0" fill="rgb(226,167,25)" rx="2" ry="2" />
<text  x="333.42" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="309" width="0.5" height="15.0" fill="rgb(248,14,23)" rx="2" ry="2" />
<text  x="56.52" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (4 samples, 0.08%)</title><rect x="84.2" y="581" width="0.9" height="15.0" fill="rgb(205,67,44)" rx="2" ry="2" />
<text  x="87.21" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="933.0" y="485" width="0.2" height="15.0" fill="rgb(221,16,39)" rx="2" ry="2" />
<text  x="936.02" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.16%)</title><rect x="1150.4" y="533" width="1.8" height="15.0" fill="rgb(254,138,26)" rx="2" ry="2" />
<text  x="1153.38" y="543.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="109.6" y="405" width="0.7" height="15.0" fill="rgb(228,128,36)" rx="2" ry="2" />
<text  x="112.63" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="446.8" y="341" width="0.4" height="15.0" fill="rgb(251,124,25)" rx="2" ry="2" />
<text  x="449.77" y="351.5" ></text>
</g>
<g >
<title>auth::create_metadata_table_if_missing (1 samples, 0.02%)</title><rect x="718.6" y="533" width="0.3" height="15.0" fill="rgb(239,9,12)" rx="2" ry="2" />
<text  x="721.64" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="878.5" y="581" width="0.2" height="15.0" fill="rgb(254,51,46)" rx="2" ry="2" />
<text  x="881.51" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.25%)</title><rect x="852.2" y="517" width="2.9" height="15.0" fill="rgb(225,104,34)" rx="2" ry="2" />
<text  x="855.17" y="527.5" ></text>
</g>
<g >
<title>stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="109.9" y="341" width="0.4" height="15.0" fill="rgb(230,196,51)" rx="2" ry="2" />
<text  x="112.86" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (273 samples, 5.30%)</title><rect x="19.2" y="661" width="62.5" height="15.0" fill="rgb(236,140,6)" rx="2" ry="2" />
<text  x="22.16" y="671.5" >std::_..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="915.2" y="421" width="0.2" height="15.0" fill="rgb(253,72,22)" rx="2" ry="2" />
<text  x="918.16" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.0" y="389" width="0.2" height="15.0" fill="rgb(209,170,31)" rx="2" ry="2" />
<text  x="62.01" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1035.4" y="341" width="1.1" height="15.0" fill="rgb(229,113,20)" rx="2" ry="2" />
<text  x="1038.40" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (70 samples, 1.36%)</title><rect x="23.3" y="421" width="16.0" height="15.0" fill="rgb(229,99,40)" rx="2" ry="2" />
<text  x="26.28" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (25 samples, 0.49%)</title><rect x="783.9" y="469" width="5.7" height="15.0" fill="rgb(211,100,47)" rx="2" ry="2" />
<text  x="786.92" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (4 samples, 0.08%)</title><rect x="289.9" y="325" width="0.9" height="15.0" fill="rgb(247,18,42)" rx="2" ry="2" />
<text  x="292.88" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="712.9" y="549" width="0.5" height="15.0" fill="rgb(238,227,19)" rx="2" ry="2" />
<text  x="715.92" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="686.1" y="533" width="0.2" height="15.0" fill="rgb(249,177,29)" rx="2" ry="2" />
<text  x="689.12" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (2 samples, 0.04%)</title><rect x="685.2" y="565" width="0.5" height="15.0" fill="rgb(233,226,1)" rx="2" ry="2" />
<text  x="688.20" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="22.1" y="501" width="0.3" height="15.0" fill="rgb(243,59,17)" rx="2" ry="2" />
<text  x="25.14" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (472 samples, 9.16%)</title><rect x="205.1" y="389" width="108.1" height="15.0" fill="rgb(242,197,0)" rx="2" ry="2" />
<text  x="208.14" y="399.5" >seastar::do_u..</text>
</g>
<g >
<title>main::$_3::operator (1 samples, 0.02%)</title><rect x="746.8" y="533" width="0.2" height="15.0" fill="rgb(245,153,25)" rx="2" ry="2" />
<text  x="749.81" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (53 samples, 1.03%)</title><rect x="575.3" y="517" width="12.1" height="15.0" fill="rgb(248,121,17)" rx="2" ry="2" />
<text  x="578.26" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="568.9" y="437" width="0.2" height="15.0" fill="rgb(249,57,50)" rx="2" ry="2" />
<text  x="571.85" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (15 samples, 0.29%)</title><rect x="1161.4" y="581" width="3.4" height="15.0" fill="rgb(251,17,52)" rx="2" ry="2" />
<text  x="1164.37" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1051.0" y="421" width="0.9" height="15.0" fill="rgb(214,35,48)" rx="2" ry="2" />
<text  x="1053.97" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (1 samples, 0.02%)</title><rect x="991.2" y="405" width="0.2" height="15.0" fill="rgb(226,164,52)" rx="2" ry="2" />
<text  x="994.20" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="39.5" y="469" width="0.3" height="15.0" fill="rgb(232,228,30)" rx="2" ry="2" />
<text  x="42.55" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="500.8" y="373" width="0.3" height="15.0" fill="rgb(223,121,1)" rx="2" ry="2" />
<text  x="503.83" y="383.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="858.6" y="469" width="0.7" height="15.0" fill="rgb(249,155,3)" rx="2" ry="2" />
<text  x="861.58" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.12%)</title><rect x="1089.9" y="469" width="1.4" height="15.0" fill="rgb(218,211,2)" rx="2" ry="2" />
<text  x="1092.91" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.12%)</title><rect x="202.2" y="357" width="1.3" height="15.0" fill="rgb(218,127,13)" rx="2" ry="2" />
<text  x="205.16" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="848.0" y="373" width="0.3" height="15.0" fill="rgb(247,69,43)" rx="2" ry="2" />
<text  x="851.05" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%)</title><rect x="717.5" y="389" width="0.2" height="15.0" fill="rgb(246,16,14)" rx="2" ry="2" />
<text  x="720.50" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="21.7" y="389" width="0.2" height="15.0" fill="rgb(217,162,16)" rx="2" ry="2" />
<text  x="24.68" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_group::update (1 samples, 0.02%)</title><rect x="83.1" y="517" width="0.2" height="15.0" fill="rgb(249,129,9)" rx="2" ry="2" />
<text  x="86.06" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="105.7" y="565" width="0.3" height="15.0" fill="rgb(226,108,21)" rx="2" ry="2" />
<text  x="108.74" y="575.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="883.1" y="437" width="0.2" height="15.0" fill="rgb(215,163,6)" rx="2" ry="2" />
<text  x="886.09" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (21 samples, 0.41%)</title><rect x="31.1" y="357" width="4.8" height="15.0" fill="rgb(254,159,17)" rx="2" ry="2" />
<text  x="34.07" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="827.9" y="309" width="0.2" height="15.0" fill="rgb(239,123,40)" rx="2" ry="2" />
<text  x="830.89" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="494.4" y="389" width="0.7" height="15.0" fill="rgb(231,220,12)" rx="2" ry="2" />
<text  x="497.41" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="542.5" y="293" width="0.2" height="15.0" fill="rgb(249,207,52)" rx="2" ry="2" />
<text  x="545.51" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (3 samples, 0.06%)</title><rect x="738.6" y="501" width="0.7" height="15.0" fill="rgb(237,79,30)" rx="2" ry="2" />
<text  x="741.57" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="23.1" y="485" width="0.2" height="15.0" fill="rgb(225,98,3)" rx="2" ry="2" />
<text  x="26.06" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.21%)</title><rect x="752.5" y="565" width="2.6" height="15.0" fill="rgb(239,112,11)" rx="2" ry="2" />
<text  x="755.54" y="575.5" ></text>
</g>
<g >
<title>keyspace::make_directory_for_column_family (1 samples, 0.02%)</title><rect x="82.6" y="517" width="0.2" height="15.0" fill="rgb(233,10,48)" rx="2" ry="2" />
<text  x="85.60" y="527.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1133.7" y="245" width="0.2" height="15.0" fill="rgb(228,43,19)" rx="2" ry="2" />
<text  x="1136.66" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::base (1 samples, 0.02%)</title><rect x="50.3" y="389" width="0.2" height="15.0" fill="rgb(235,114,9)" rx="2" ry="2" />
<text  x="53.31" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%)</title><rect x="18.0" y="581" width="0.2" height="15.0" fill="rgb(246,56,9)" rx="2" ry="2" />
<text  x="21.02" y="591.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="698.0" y="581" width="1.4" height="15.0" fill="rgb(244,86,22)" rx="2" ry="2" />
<text  x="701.03" y="591.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (7 samples, 0.14%)</title><rect x="821.2" y="245" width="1.7" height="15.0" fill="rgb(214,0,46)" rx="2" ry="2" />
<text  x="824.25" y="255.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.12%)</title><rect x="1119.9" y="309" width="1.4" height="15.0" fill="rgb(250,102,48)" rx="2" ry="2" />
<text  x="1122.91" y="319.5" ></text>
</g>
<g >
<title>table::as_mutation_source (1 samples, 0.02%)</title><rect x="140.3" y="549" width="0.3" height="15.0" fill="rgb(210,113,47)" rx="2" ry="2" />
<text  x="143.32" y="559.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="53.3" y="325" width="0.2" height="15.0" fill="rgb(213,196,16)" rx="2" ry="2" />
<text  x="56.29" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%)</title><rect x="641.2" y="517" width="0.5" height="15.0" fill="rgb(216,211,24)" rx="2" ry="2" />
<text  x="644.23" y="527.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (2 samples, 0.04%)</title><rect x="980.9" y="453" width="0.4" height="15.0" fill="rgb(213,58,34)" rx="2" ry="2" />
<text  x="983.89" y="463.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (232 samples, 4.50%)</title><rect x="503.6" y="437" width="53.1" height="15.0" fill="rgb(207,152,53)" rx="2" ry="2" />
<text  x="506.58" y="447.5" >memta..</text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="56.0" y="389" width="0.3" height="15.0" fill="rgb(247,78,12)" rx="2" ry="2" />
<text  x="59.04" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="357.7" y="293" width="0.2" height="15.0" fill="rgb(224,35,33)" rx="2" ry="2" />
<text  x="360.68" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="49.6" y="389" width="0.3" height="15.0" fill="rgb(223,174,23)" rx="2" ry="2" />
<text  x="52.62" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (213 samples, 4.13%)</title><rect x="899.8" y="517" width="48.8" height="15.0" fill="rgb(249,143,49)" rx="2" ry="2" />
<text  x="902.81" y="527.5" >cql3..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="855.8" y="533" width="0.3" height="15.0" fill="rgb(233,21,9)" rx="2" ry="2" />
<text  x="858.83" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="43.0" y="421" width="0.2" height="15.0" fill="rgb(218,85,13)" rx="2" ry="2" />
<text  x="45.98" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="827.4" y="341" width="0.3" height="15.0" fill="rgb(242,133,25)" rx="2" ry="2" />
<text  x="830.43" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (38 samples, 0.74%)</title><rect x="208.8" y="341" width="8.7" height="15.0" fill="rgb(234,135,30)" rx="2" ry="2" />
<text  x="211.80" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="54.0" y="309" width="0.2" height="15.0" fill="rgb(243,222,30)" rx="2" ry="2" />
<text  x="56.98" y="319.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="17.3" y="645" width="0.3" height="15.0" fill="rgb(218,205,22)" rx="2" ry="2" />
<text  x="20.33" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.9" y="325" width="0.2" height="15.0" fill="rgb(240,9,18)" rx="2" ry="2" />
<text  x="41.86" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="671.7" y="581" width="0.2" height="15.0" fill="rgb(247,170,35)" rx="2" ry="2" />
<text  x="674.69" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="543.0" y="309" width="0.2" height="15.0" fill="rgb(205,136,32)" rx="2" ry="2" />
<text  x="545.97" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%)</title><rect x="274.3" y="277" width="0.5" height="15.0" fill="rgb(252,37,37)" rx="2" ry="2" />
<text  x="277.31" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="110.5" y="421" width="0.3" height="15.0" fill="rgb(236,137,43)" rx="2" ry="2" />
<text  x="113.55" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.9" y="469" width="0.2" height="15.0" fill="rgb(253,68,9)" rx="2" ry="2" />
<text  x="68.89" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="688.0" y="533" width="0.4" height="15.0" fill="rgb(248,211,31)" rx="2" ry="2" />
<text  x="690.95" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_table_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.0" y="485" width="0.3" height="15.0" fill="rgb(233,141,19)" rx="2" ry="2" />
<text  x="70.03" y="495.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="1137.6" y="341" width="0.2" height="15.0" fill="rgb(223,35,26)" rx="2" ry="2" />
<text  x="1140.55" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1120.4" y="229" width="0.2" height="15.0" fill="rgb(241,184,38)" rx="2" ry="2" />
<text  x="1123.37" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (4 samples, 0.08%)</title><rect x="914.5" y="453" width="0.9" height="15.0" fill="rgb(252,51,28)" rx="2" ry="2" />
<text  x="917.47" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="950.7" y="453" width="0.2" height="15.0" fill="rgb(212,123,7)" rx="2" ry="2" />
<text  x="953.66" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="793.8" y="453" width="1.1" height="15.0" fill="rgb(224,45,41)" rx="2" ry="2" />
<text  x="796.77" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1130.0" y="325" width="0.2" height="15.0" fill="rgb(219,204,53)" rx="2" ry="2" />
<text  x="1132.99" y="335.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (209 samples, 4.06%)</title><rect x="21.0" y="549" width="47.9" height="15.0" fill="rgb(231,190,2)" rx="2" ry="2" />
<text  x="23.99" y="559.5" >cql3..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="293" width="0.2" height="15.0" fill="rgb(211,55,23)" rx="2" ry="2" />
<text  x="60.87" y="303.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1123.6" y="309" width="0.4" height="15.0" fill="rgb(236,63,12)" rx="2" ry="2" />
<text  x="1126.58" y="319.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1127.2" y="421" width="0.3" height="15.0" fill="rgb(219,137,44)" rx="2" ry="2" />
<text  x="1130.24" y="431.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="563.8" y="389" width="0.2" height="15.0" fill="rgb(207,137,8)" rx="2" ry="2" />
<text  x="566.81" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="60.8" y="389" width="0.3" height="15.0" fill="rgb(230,68,50)" rx="2" ry="2" />
<text  x="63.85" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="18.7" y="469" width="0.2" height="15.0" fill="rgb(213,17,7)" rx="2" ry="2" />
<text  x="21.70" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="863.9" y="485" width="3.4" height="15.0" fill="rgb(247,186,33)" rx="2" ry="2" />
<text  x="866.85" y="495.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%)</title><rect x="1075.0" y="357" width="0.3" height="15.0" fill="rgb(220,116,18)" rx="2" ry="2" />
<text  x="1078.02" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="1050.1" y="437" width="0.2" height="15.0" fill="rgb(212,40,40)" rx="2" ry="2" />
<text  x="1053.06" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (1 samples, 0.02%)</title><rect x="760.8" y="501" width="0.2" height="15.0" fill="rgb(207,135,35)" rx="2" ry="2" />
<text  x="763.78" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="227.6" y="229" width="0.4" height="15.0" fill="rgb(230,210,15)" rx="2" ry="2" />
<text  x="230.59" y="239.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="816.2" y="309" width="0.2" height="15.0" fill="rgb(205,16,50)" rx="2" ry="2" />
<text  x="819.21" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.2" y="421" width="0.2" height="15.0" fill="rgb(239,6,23)" rx="2" ry="2" />
<text  x="112.17" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1024.4" y="325" width="0.2" height="15.0" fill="rgb(232,162,9)" rx="2" ry="2" />
<text  x="1027.41" y="335.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="728.9" y="581" width="1.0" height="15.0" fill="rgb(211,152,43)" rx="2" ry="2" />
<text  x="731.95" y="591.5" ></text>
</g>
<g >
<title>auth::resource::resource (6 samples, 0.12%)</title><rect x="793.8" y="469" width="1.3" height="15.0" fill="rgb(252,110,33)" rx="2" ry="2" />
<text  x="796.77" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (9 samples, 0.17%)</title><rect x="488.7" y="357" width="2.0" height="15.0" fill="rgb(243,38,8)" rx="2" ry="2" />
<text  x="491.69" y="367.5" ></text>
</g>
<g >
<title>db::get_cdc_streams_descriptions_v2_mutation (1 samples, 0.02%)</title><rect x="106.4" y="565" width="0.3" height="15.0" fill="rgb(238,139,45)" rx="2" ry="2" />
<text  x="109.42" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="910.3" y="373" width="0.5" height="15.0" fill="rgb(226,211,25)" rx="2" ry="2" />
<text  x="913.35" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="620.6" y="421" width="0.2" height="15.0" fill="rgb(218,178,21)" rx="2" ry="2" />
<text  x="623.61" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="825.4" y="165" width="0.4" height="15.0" fill="rgb(234,157,42)" rx="2" ry="2" />
<text  x="828.37" y="175.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="40.2" y="309" width="0.3" height="15.0" fill="rgb(209,1,40)" rx="2" ry="2" />
<text  x="43.23" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1055.6" y="389" width="0.2" height="15.0" fill="rgb(221,194,17)" rx="2" ry="2" />
<text  x="1058.56" y="399.5" ></text>
</g>
<g >
<title>query::clustering_key_filter_ranges::get_ranges (1 samples, 0.02%)</title><rect x="83.3" y="533" width="0.2" height="15.0" fill="rgb(254,5,23)" rx="2" ry="2" />
<text  x="86.29" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.10%)</title><rect x="48.2" y="245" width="1.2" height="15.0" fill="rgb(211,0,38)" rx="2" ry="2" />
<text  x="51.25" y="255.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="679.2" y="565" width="0.3" height="15.0" fill="rgb(219,19,28)" rx="2" ry="2" />
<text  x="682.25" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="727.6" y="565" width="0.2" height="15.0" fill="rgb(212,181,2)" rx="2" ry="2" />
<text  x="730.57" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (1 samples, 0.02%)</title><rect x="640.5" y="533" width="0.3" height="15.0" fill="rgb(227,18,7)" rx="2" ry="2" />
<text  x="643.54" y="543.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="85.6" y="613" width="0.2" height="15.0" fill="rgb(233,143,37)" rx="2" ry="2" />
<text  x="88.58" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (5 samples, 0.10%)</title><rect x="195.7" y="341" width="1.2" height="15.0" fill="rgb(235,37,4)" rx="2" ry="2" />
<text  x="198.75" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="966.0" y="469" width="0.2" height="15.0" fill="rgb(252,66,20)" rx="2" ry="2" />
<text  x="969.00" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1101.1" y="501" width="0.3" height="15.0" fill="rgb(235,102,3)" rx="2" ry="2" />
<text  x="1104.13" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.37%)</title><rect x="771.1" y="437" width="4.3" height="15.0" fill="rgb(230,65,33)" rx="2" ry="2" />
<text  x="774.09" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="959.1" y="469" width="1.2" height="15.0" fill="rgb(244,95,40)" rx="2" ry="2" />
<text  x="962.13" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.0" y="357" width="0.2" height="15.0" fill="rgb(207,8,42)" rx="2" ry="2" />
<text  x="62.01" y="367.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="493.5" y="389" width="0.2" height="15.0" fill="rgb(244,97,6)" rx="2" ry="2" />
<text  x="496.50" y="399.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="39.1" y="405" width="0.2" height="15.0" fill="rgb(208,135,22)" rx="2" ry="2" />
<text  x="42.09" y="415.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="18.5" y="613" width="0.4" height="15.0" fill="rgb(229,91,7)" rx="2" ry="2" />
<text  x="21.47" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="37" width="0.3" height="15.0" fill="rgb(248,22,43)" rx="2" ry="2" />
<text  x="56.75" y="47.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="102.8" y="485" width="0.4" height="15.0" fill="rgb(211,102,37)" rx="2" ry="2" />
<text  x="105.76" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1148.3" y="533" width="0.5" height="15.0" fill="rgb(222,129,19)" rx="2" ry="2" />
<text  x="1151.32" y="543.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.04%)</title><rect x="1189.5" y="725" width="0.5" height="15.0" fill="rgb(212,64,42)" rx="2" ry="2" />
<text  x="1192.54" y="735.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%)</title><rect x="940.6" y="501" width="0.4" height="15.0" fill="rgb(231,203,30)" rx="2" ry="2" />
<text  x="943.58" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="45.0" y="293" width="0.3" height="15.0" fill="rgb(225,92,7)" rx="2" ry="2" />
<text  x="48.04" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="517" width="0.7" height="15.0" fill="rgb(233,42,26)" rx="2" ry="2" />
<text  x="86.52" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="474.5" y="453" width="0.2" height="15.0" fill="rgb(216,35,5)" rx="2" ry="2" />
<text  x="477.49" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt; (1 samples, 0.02%)</title><rect x="110.5" y="437" width="0.3" height="15.0" fill="rgb(215,68,39)" rx="2" ry="2" />
<text  x="113.55" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.7" y="453" width="0.2" height="15.0" fill="rgb(241,52,25)" rx="2" ry="2" />
<text  x="68.66" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="212.0" y="277" width="0.9" height="15.0" fill="rgb(230,76,24)" rx="2" ry="2" />
<text  x="215.01" y="287.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="107.1" y="581" width="0.5" height="15.0" fill="rgb(254,21,10)" rx="2" ry="2" />
<text  x="110.11" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (2 samples, 0.04%)</title><rect x="73.0" y="469" width="0.4" height="15.0" fill="rgb(248,49,33)" rx="2" ry="2" />
<text  x="75.99" y="479.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1048.9" y="421" width="0.2" height="15.0" fill="rgb(235,38,8)" rx="2" ry="2" />
<text  x="1051.91" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.14%)</title><rect x="340.7" y="405" width="1.6" height="15.0" fill="rgb(250,57,33)" rx="2" ry="2" />
<text  x="343.73" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="811.4" y="325" width="0.2" height="15.0" fill="rgb(227,97,47)" rx="2" ry="2" />
<text  x="814.40" y="335.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%)</title><rect x="21.7" y="421" width="0.2" height="15.0" fill="rgb(215,23,30)" rx="2" ry="2" />
<text  x="24.68" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="695.7" y="533" width="0.3" height="15.0" fill="rgb(219,178,28)" rx="2" ry="2" />
<text  x="698.74" y="543.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1033.3" y="373" width="0.5" height="15.0" fill="rgb(231,201,15)" rx="2" ry="2" />
<text  x="1036.34" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_base::shared_ptr_count_base (1 samples, 0.02%)</title><rect x="46.6" y="373" width="0.3" height="15.0" fill="rgb(228,175,9)" rx="2" ry="2" />
<text  x="49.65" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.0" y="341" width="0.3" height="15.0" fill="rgb(240,30,50)" rx="2" ry="2" />
<text  x="48.04" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (10 samples, 0.19%)</title><rect x="784.8" y="437" width="2.3" height="15.0" fill="rgb(213,86,41)" rx="2" ry="2" />
<text  x="787.83" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="627.3" y="501" width="0.6" height="15.0" fill="rgb(206,130,50)" rx="2" ry="2" />
<text  x="630.26" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (1 samples, 0.02%)</title><rect x="651.3" y="501" width="0.2" height="15.0" fill="rgb(251,124,37)" rx="2" ry="2" />
<text  x="654.30" y="511.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (6 samples, 0.12%)</title><rect x="78.7" y="437" width="1.4" height="15.0" fill="rgb(230,48,44)" rx="2" ry="2" />
<text  x="81.71" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="357.7" y="309" width="0.2" height="15.0" fill="rgb(246,202,44)" rx="2" ry="2" />
<text  x="360.68" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="840.7" y="437" width="0.2" height="15.0" fill="rgb(216,59,34)" rx="2" ry="2" />
<text  x="843.72" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="743.1" y="517" width="0.3" height="15.0" fill="rgb(218,189,27)" rx="2" ry="2" />
<text  x="746.15" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="103.4" y="549" width="0.3" height="15.0" fill="rgb(205,21,11)" rx="2" ry="2" />
<text  x="106.45" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (52 samples, 1.01%)</title><rect x="330.7" y="453" width="11.9" height="15.0" fill="rgb(242,149,38)" rx="2" ry="2" />
<text  x="333.65" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (2 samples, 0.04%)</title><rect x="72.1" y="421" width="0.4" height="15.0" fill="rgb(216,104,23)" rx="2" ry="2" />
<text  x="75.07" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="775.9" y="501" width="0.5" height="15.0" fill="rgb(224,225,35)" rx="2" ry="2" />
<text  x="778.90" y="511.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.78%)</title><rect x="1179.9" y="725" width="9.2" height="15.0" fill="rgb(206,140,10)" rx="2" ry="2" />
<text  x="1182.92" y="735.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="225.1" y="277" width="0.9" height="15.0" fill="rgb(248,138,21)" rx="2" ry="2" />
<text  x="228.07" y="287.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="941.0" y="501" width="1.0" height="15.0" fill="rgb(206,91,39)" rx="2" ry="2" />
<text  x="944.04" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1034.9" y="373" width="0.3" height="15.0" fill="rgb(236,222,20)" rx="2" ry="2" />
<text  x="1037.94" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="49.6" y="341" width="0.3" height="15.0" fill="rgb(251,161,11)" rx="2" ry="2" />
<text  x="52.62" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (13 samples, 0.25%)</title><rect x="883.8" y="453" width="3.0" height="15.0" fill="rgb(250,41,10)" rx="2" ry="2" />
<text  x="886.78" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="886.8" y="357" width="0.2" height="15.0" fill="rgb(249,228,27)" rx="2" ry="2" />
<text  x="889.75" y="367.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="110.5" y="405" width="0.3" height="15.0" fill="rgb(251,55,18)" rx="2" ry="2" />
<text  x="113.55" y="415.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%)</title><rect x="110.8" y="533" width="0.7" height="15.0" fill="rgb(227,6,36)" rx="2" ry="2" />
<text  x="113.78" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="397.1" y="261" width="1.6" height="15.0" fill="rgb(219,140,27)" rx="2" ry="2" />
<text  x="400.07" y="271.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1124.3" y="309" width="0.4" height="15.0" fill="rgb(228,175,19)" rx="2" ry="2" />
<text  x="1127.27" y="319.5" ></text>
</g>
<g >
<title>database::find_schema (23 samples, 0.45%)</title><rect x="841.2" y="469" width="5.2" height="15.0" fill="rgb(234,135,18)" rx="2" ry="2" />
<text  x="844.18" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="882.4" y="421" width="0.2" height="15.0" fill="rgb(243,222,36)" rx="2" ry="2" />
<text  x="885.40" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="674.9" y="533" width="0.2" height="15.0" fill="rgb(209,19,43)" rx="2" ry="2" />
<text  x="677.90" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="840.9" y="469" width="0.3" height="15.0" fill="rgb(233,227,0)" rx="2" ry="2" />
<text  x="843.95" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (5 samples, 0.10%)</title><rect x="947.2" y="437" width="1.2" height="15.0" fill="rgb(211,2,33)" rx="2" ry="2" />
<text  x="950.22" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%)</title><rect x="882.4" y="453" width="0.2" height="15.0" fill="rgb(214,203,36)" rx="2" ry="2" />
<text  x="885.40" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (10 samples, 0.19%)</title><rect x="1110.8" y="517" width="2.2" height="15.0" fill="rgb(226,76,25)" rx="2" ry="2" />
<text  x="1113.75" y="527.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="109.6" y="277" width="0.3" height="15.0" fill="rgb(215,205,27)" rx="2" ry="2" />
<text  x="112.63" y="287.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;service::storage_service&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;database&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::gossiper&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, service::storage_service_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_manager&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;cdc::generation_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;repair_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::raft_group_registry&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::endpoint_lifecycle_notifier&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="293" width="0.2" height="15.0" fill="rgb(236,154,19)" rx="2" ry="2" />
<text  x="749.81" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (9 samples, 0.17%)</title><rect x="327.4" y="421" width="2.1" height="15.0" fill="rgb(240,128,17)" rx="2" ry="2" />
<text  x="330.45" y="431.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (93 samples, 1.81%)</title><rect x="528.5" y="421" width="21.3" height="15.0" fill="rgb(226,99,39)" rx="2" ry="2" />
<text  x="531.54" y="431.5" >m..</text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="952.5" y="517" width="0.2" height="15.0" fill="rgb(248,33,38)" rx="2" ry="2" />
<text  x="955.49" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="488.2" y="357" width="0.5" height="15.0" fill="rgb(209,79,23)" rx="2" ry="2" />
<text  x="491.23" y="367.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="109.6" y="293" width="0.3" height="15.0" fill="rgb(216,1,23)" rx="2" ry="2" />
<text  x="112.63" y="303.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%)</title><rect x="1131.8" y="245" width="1.2" height="15.0" fill="rgb(240,219,39)" rx="2" ry="2" />
<text  x="1134.82" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="717.7" y="453" width="0.3" height="15.0" fill="rgb(248,203,30)" rx="2" ry="2" />
<text  x="720.73" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="77.1" y="453" width="0.2" height="15.0" fill="rgb(224,0,9)" rx="2" ry="2" />
<text  x="80.11" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (18 samples, 0.35%)</title><rect x="326.1" y="437" width="4.1" height="15.0" fill="rgb(210,224,21)" rx="2" ry="2" />
<text  x="329.07" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="781.4" y="501" width="0.2" height="15.0" fill="rgb(226,38,53)" rx="2" ry="2" />
<text  x="784.40" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="85.4" y="693" width="0.4" height="15.0" fill="rgb(245,78,31)" rx="2" ry="2" />
<text  x="88.35" y="703.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="615.8" y="437" width="0.2" height="15.0" fill="rgb(233,133,12)" rx="2" ry="2" />
<text  x="618.80" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.6" y="453" width="0.2" height="15.0" fill="rgb(247,141,36)" rx="2" ry="2" />
<text  x="69.57" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="599.3" y="389" width="0.5" height="15.0" fill="rgb(249,78,20)" rx="2" ry="2" />
<text  x="602.31" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.2" y="469" width="0.2" height="15.0" fill="rgb(209,188,0)" rx="2" ry="2" />
<text  x="68.20" y="479.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1127.7" y="565" width="8.7" height="15.0" fill="rgb(221,83,46)" rx="2" ry="2" />
<text  x="1130.70" y="575.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%)</title><rect x="110.3" y="565" width="1.2" height="15.0" fill="rgb(211,23,9)" rx="2" ry="2" />
<text  x="113.32" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="1144.9" y="581" width="0.4" height="15.0" fill="rgb(213,194,36)" rx="2" ry="2" />
<text  x="1147.88" y="591.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="519.6" y="309" width="0.5" height="15.0" fill="rgb(253,157,49)" rx="2" ry="2" />
<text  x="522.61" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (37 samples, 0.72%)</title><rect x="333.9" y="421" width="8.4" height="15.0" fill="rgb(231,48,39)" rx="2" ry="2" />
<text  x="336.86" y="431.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="115.6" y="565" width="0.2" height="15.0" fill="rgb(211,93,7)" rx="2" ry="2" />
<text  x="118.59" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (4 samples, 0.08%)</title><rect x="17.3" y="661" width="0.9" height="15.0" fill="rgb(209,111,8)" rx="2" ry="2" />
<text  x="20.33" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1100.9" y="517" width="0.2" height="15.0" fill="rgb(205,31,12)" rx="2" ry="2" />
<text  x="1103.90" y="527.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.10%)</title><rect x="708.8" y="565" width="1.1" height="15.0" fill="rgb(231,190,4)" rx="2" ry="2" />
<text  x="711.79" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (15 samples, 0.29%)</title><rect x="543.2" y="341" width="3.4" height="15.0" fill="rgb(219,118,1)" rx="2" ry="2" />
<text  x="546.20" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%)</title><rect x="286.4" y="309" width="0.3" height="15.0" fill="rgb(223,8,41)" rx="2" ry="2" />
<text  x="289.45" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1127.7" y="517" width="8.7" height="15.0" fill="rgb(241,101,21)" rx="2" ry="2" />
<text  x="1130.70" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="108.9" y="277" width="0.3" height="15.0" fill="rgb(237,212,36)" rx="2" ry="2" />
<text  x="111.94" y="287.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="542.7" y="309" width="0.3" height="15.0" fill="rgb(251,61,26)" rx="2" ry="2" />
<text  x="545.74" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (10 samples, 0.19%)</title><rect x="949.5" y="501" width="2.3" height="15.0" fill="rgb(242,108,11)" rx="2" ry="2" />
<text  x="952.51" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="595.4" y="405" width="0.5" height="15.0" fill="rgb(247,6,32)" rx="2" ry="2" />
<text  x="598.42" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="455.0" y="293" width="0.7" height="15.0" fill="rgb(225,1,10)" rx="2" ry="2" />
<text  x="458.02" y="303.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (3 samples, 0.06%)</title><rect x="21.5" y="485" width="0.6" height="15.0" fill="rgb(234,61,1)" rx="2" ry="2" />
<text  x="24.45" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.6" y="309" width="0.2" height="15.0" fill="rgb(237,42,42)" rx="2" ry="2" />
<text  x="61.56" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="273.6" y="261" width="0.7" height="15.0" fill="rgb(230,222,6)" rx="2" ry="2" />
<text  x="276.62" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (49 samples, 0.95%)</title><rect x="1016.4" y="341" width="11.2" height="15.0" fill="rgb(229,75,26)" rx="2" ry="2" />
<text  x="1019.39" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1132.7" y="149" width="0.3" height="15.0" fill="rgb(214,63,28)" rx="2" ry="2" />
<text  x="1135.74" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="829.3" y="341" width="0.2" height="15.0" fill="rgb(244,15,40)" rx="2" ry="2" />
<text  x="832.27" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="748.9" y="597" width="0.2" height="15.0" fill="rgb(225,56,0)" rx="2" ry="2" />
<text  x="751.87" y="607.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1121.3" y="341" width="0.4" height="15.0" fill="rgb(226,101,28)" rx="2" ry="2" />
<text  x="1124.29" y="351.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (22 samples, 0.43%)</title><rect x="924.3" y="469" width="5.1" height="15.0" fill="rgb(236,103,1)" rx="2" ry="2" />
<text  x="927.32" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1015.5" y="309" width="0.9" height="15.0" fill="rgb(226,34,27)" rx="2" ry="2" />
<text  x="1018.47" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_list::range_tombstone_list (1 samples, 0.02%)</title><rect x="718.6" y="261" width="0.3" height="15.0" fill="rgb(239,92,33)" rx="2" ry="2" />
<text  x="721.64" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="157.3" y="517" width="0.4" height="15.0" fill="rgb(234,211,10)" rx="2" ry="2" />
<text  x="160.27" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="85.1" y="565" width="0.3" height="15.0" fill="rgb(249,19,7)" rx="2" ry="2" />
<text  x="88.12" y="575.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (41 samples, 0.80%)</title><rect x="125.9" y="549" width="9.4" height="15.0" fill="rgb(227,157,54)" rx="2" ry="2" />
<text  x="128.89" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.6" y="325" width="0.2" height="15.0" fill="rgb(241,181,0)" rx="2" ry="2" />
<text  x="50.56" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="718.6" y="245" width="0.3" height="15.0" fill="rgb(234,229,16)" rx="2" ry="2" />
<text  x="721.64" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="468.1" y="453" width="0.2" height="15.0" fill="rgb(253,184,18)" rx="2" ry="2" />
<text  x="471.07" y="463.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="83.1" y="565" width="1.1" height="15.0" fill="rgb(223,28,8)" rx="2" ry="2" />
<text  x="86.06" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="55.3" y="181" width="0.3" height="15.0" fill="rgb(229,21,53)" rx="2" ry="2" />
<text  x="58.35" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="831.3" y="373" width="0.3" height="15.0" fill="rgb(231,14,36)" rx="2" ry="2" />
<text  x="834.33" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%)</title><rect x="366.6" y="261" width="0.7" height="15.0" fill="rgb(221,109,26)" rx="2" ry="2" />
<text  x="369.61" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="463.7" y="357" width="0.9" height="15.0" fill="rgb(205,35,26)" rx="2" ry="2" />
<text  x="466.72" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (4 samples, 0.08%)</title><rect x="724.4" y="549" width="0.9" height="15.0" fill="rgb(221,134,1)" rx="2" ry="2" />
<text  x="727.37" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="531.1" y="405" width="0.4" height="15.0" fill="rgb(240,116,5)" rx="2" ry="2" />
<text  x="534.06" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="18.2" y="389" width="0.3" height="15.0" fill="rgb(215,224,8)" rx="2" ry="2" />
<text  x="21.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="325.8" y="437" width="0.3" height="15.0" fill="rgb(215,71,51)" rx="2" ry="2" />
<text  x="328.84" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.3" y="261" width="0.3" height="15.0" fill="rgb(207,111,51)" rx="2" ry="2" />
<text  x="50.33" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.3" y="341" width="0.2" height="15.0" fill="rgb(212,157,29)" rx="2" ry="2" />
<text  x="48.27" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="51.0" y="357" width="0.2" height="15.0" fill="rgb(210,14,18)" rx="2" ry="2" />
<text  x="54.00" y="367.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="682.5" y="549" width="0.2" height="15.0" fill="rgb(239,194,5)" rx="2" ry="2" />
<text  x="685.45" y="559.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="786.7" y="405" width="0.4" height="15.0" fill="rgb(242,110,51)" rx="2" ry="2" />
<text  x="789.67" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="85.4" y="709" width="0.4" height="15.0" fill="rgb(249,64,49)" rx="2" ry="2" />
<text  x="88.35" y="719.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::start (1 samples, 0.02%)</title><rect x="718.6" y="565" width="0.3" height="15.0" fill="rgb(236,162,13)" rx="2" ry="2" />
<text  x="721.64" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="915.2" y="405" width="0.2" height="15.0" fill="rgb(235,189,49)" rx="2" ry="2" />
<text  x="918.16" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="535.4" y="341" width="0.5" height="15.0" fill="rgb(245,155,24)" rx="2" ry="2" />
<text  x="538.41" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="675.1" y="517" width="0.3" height="15.0" fill="rgb(254,142,16)" rx="2" ry="2" />
<text  x="678.12" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (8 samples, 0.16%)</title><rect x="787.6" y="437" width="1.8" height="15.0" fill="rgb(247,119,50)" rx="2" ry="2" />
<text  x="790.58" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="312.3" y="309" width="0.3" height="15.0" fill="rgb(220,145,16)" rx="2" ry="2" />
<text  x="315.33" y="319.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="111.5" y="597" width="0.4" height="15.0" fill="rgb(248,166,48)" rx="2" ry="2" />
<text  x="114.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1086.5" y="485" width="0.2" height="15.0" fill="rgb(207,151,11)" rx="2" ry="2" />
<text  x="1089.48" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="674.9" y="453" width="0.2" height="15.0" fill="rgb(248,34,44)" rx="2" ry="2" />
<text  x="677.90" y="463.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="701.9" y="565" width="0.5" height="15.0" fill="rgb(231,69,23)" rx="2" ry="2" />
<text  x="704.92" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%)</title><rect x="939.0" y="501" width="0.9" height="15.0" fill="rgb(229,180,40)" rx="2" ry="2" />
<text  x="941.98" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="246.4" y="181" width="0.2" height="15.0" fill="rgb(228,70,13)" rx="2" ry="2" />
<text  x="249.37" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="132.8" y="469" width="0.2" height="15.0" fill="rgb(235,129,14)" rx="2" ry="2" />
<text  x="135.76" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.5" y="677" width="0.2" height="15.0" fill="rgb(221,206,39)" rx="2" ry="2" />
<text  x="13.46" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1022.3" y="293" width="0.3" height="15.0" fill="rgb(233,104,40)" rx="2" ry="2" />
<text  x="1025.34" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="830.4" y="325" width="0.5" height="15.0" fill="rgb(223,1,53)" rx="2" ry="2" />
<text  x="833.41" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="40.9" y="261" width="0.7" height="15.0" fill="rgb(224,222,54)" rx="2" ry="2" />
<text  x="43.92" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="343.5" y="453" width="0.2" height="15.0" fill="rgb(237,59,35)" rx="2" ry="2" />
<text  x="346.48" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (6 samples, 0.12%)</title><rect x="583.7" y="485" width="1.4" height="15.0" fill="rgb(239,201,46)" rx="2" ry="2" />
<text  x="586.74" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="57.6" y="325" width="0.5" height="15.0" fill="rgb(235,188,36)" rx="2" ry="2" />
<text  x="60.64" y="335.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="885.2" y="293" width="0.2" height="15.0" fill="rgb(213,218,54)" rx="2" ry="2" />
<text  x="888.15" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="573.4" y="485" width="0.3" height="15.0" fill="rgb(220,35,45)" rx="2" ry="2" />
<text  x="576.43" y="495.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%)</title><rect x="631.4" y="501" width="0.4" height="15.0" fill="rgb(245,186,9)" rx="2" ry="2" />
<text  x="634.38" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="318.1" y="357" width="0.2" height="15.0" fill="rgb(237,224,2)" rx="2" ry="2" />
<text  x="321.06" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (19 samples, 0.37%)</title><rect x="236.7" y="197" width="4.4" height="15.0" fill="rgb(216,107,22)" rx="2" ry="2" />
<text  x="239.75" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="207.2" y="357" width="0.5" height="15.0" fill="rgb(210,167,23)" rx="2" ry="2" />
<text  x="210.20" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1 samples, 0.02%)</title><rect x="55.6" y="357" width="0.2" height="15.0" fill="rgb(210,84,52)" rx="2" ry="2" />
<text  x="58.58" y="367.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="82.6" y="677" width="0.5" height="15.0" fill="rgb(248,197,35)" rx="2" ry="2" />
<text  x="85.60" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="102.1" y="501" width="0.2" height="15.0" fill="rgb(237,102,0)" rx="2" ry="2" />
<text  x="105.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.4" y="341" width="0.2" height="15.0" fill="rgb(217,201,15)" rx="2" ry="2" />
<text  x="63.39" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (11 samples, 0.21%)</title><rect x="44.4" y="437" width="2.5" height="15.0" fill="rgb(239,198,42)" rx="2" ry="2" />
<text  x="47.36" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="220.7" y="325" width="0.2" height="15.0" fill="rgb(217,34,11)" rx="2" ry="2" />
<text  x="223.71" y="335.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (10 samples, 0.19%)</title><rect x="1089.7" y="485" width="2.3" height="15.0" fill="rgb(210,23,34)" rx="2" ry="2" />
<text  x="1092.68" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (9 samples, 0.17%)</title><rect x="297.9" y="293" width="2.1" height="15.0" fill="rgb(236,135,40)" rx="2" ry="2" />
<text  x="300.90" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="692.8" y="581" width="1.1" height="15.0" fill="rgb(227,142,42)" rx="2" ry="2" />
<text  x="695.76" y="591.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (89 samples, 1.73%)</title><rect x="236.1" y="213" width="20.3" height="15.0" fill="rgb(223,118,9)" rx="2" ry="2" />
<text  x="239.06" y="223.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="158.4" y="485" width="1.6" height="15.0" fill="rgb(210,57,0)" rx="2" ry="2" />
<text  x="161.42" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (3 samples, 0.06%)</title><rect x="48.7" y="213" width="0.7" height="15.0" fill="rgb(233,17,12)" rx="2" ry="2" />
<text  x="51.71" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="582.4" y="405" width="1.1" height="15.0" fill="rgb(232,147,14)" rx="2" ry="2" />
<text  x="585.36" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="891.8" y="565" width="0.2" height="15.0" fill="rgb(236,102,28)" rx="2" ry="2" />
<text  x="894.79" y="575.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a59683b929e6b30d9803453a6167c92c7df06c25] (1 samples, 0.02%)</title><rect x="729.9" y="565" width="0.2" height="15.0" fill="rgb(217,8,34)" rx="2" ry="2" />
<text  x="732.86" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1021.4" y="261" width="0.3" height="15.0" fill="rgb(241,18,16)" rx="2" ry="2" />
<text  x="1024.43" y="271.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1125.0" y="309" width="0.2" height="15.0" fill="rgb(216,185,47)" rx="2" ry="2" />
<text  x="1127.95" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="311.4" y="293" width="0.2" height="15.0" fill="rgb(238,59,0)" rx="2" ry="2" />
<text  x="314.41" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (486 samples, 9.43%)</title><rect x="756.4" y="549" width="111.3" height="15.0" fill="rgb(210,200,34)" rx="2" ry="2" />
<text  x="759.43" y="559.5" >single_node_c..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (148 samples, 2.87%)</title><rect x="589.5" y="517" width="33.9" height="15.0" fill="rgb(208,134,54)" rx="2" ry="2" />
<text  x="592.46" y="527.5" >st..</text>
</g>
<g >
<title>service::client_state::has_access (10 samples, 0.19%)</title><rect x="78.3" y="533" width="2.2" height="15.0" fill="rgb(225,128,10)" rx="2" ry="2" />
<text  x="81.25" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="718.0" y="485" width="0.6" height="15.0" fill="rgb(227,212,52)" rx="2" ry="2" />
<text  x="720.95" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.1" y="261" width="0.5" height="15.0" fill="rgb(219,41,31)" rx="2" ry="2" />
<text  x="58.12" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (252 samples, 4.89%)</title><rect x="223.5" y="293" width="57.7" height="15.0" fill="rgb(248,43,3)" rx="2" ry="2" />
<text  x="226.46" y="303.5" >partit..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.0" y="309" width="0.3" height="15.0" fill="rgb(217,8,51)" rx="2" ry="2" />
<text  x="48.04" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="77.6" y="549" width="0.2" height="15.0" fill="rgb(206,172,20)" rx="2" ry="2" />
<text  x="80.57" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.3" y="389" width="0.2" height="15.0" fill="rgb(213,144,29)" rx="2" ry="2" />
<text  x="45.29" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (44 samples, 0.85%)</title><rect x="96.3" y="597" width="10.1" height="15.0" fill="rgb(224,76,27)" rx="2" ry="2" />
<text  x="99.35" y="607.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="595.9" y="405" width="0.4" height="15.0" fill="rgb(235,146,33)" rx="2" ry="2" />
<text  x="598.88" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::__detail::_Node_const_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;schema const&gt; &gt;, false, true&gt;, single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="82.6" y="549" width="0.2" height="15.0" fill="rgb(225,195,0)" rx="2" ry="2" />
<text  x="85.60" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.2" y="517" width="0.3" height="15.0" fill="rgb(236,42,11)" rx="2" ry="2" />
<text  x="21.25" y="527.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token_present (1 samples, 0.02%)</title><rect x="26.5" y="373" width="0.2" height="15.0" fill="rgb(229,39,42)" rx="2" ry="2" />
<text  x="29.49" y="383.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="937.6" y="485" width="0.2" height="15.0" fill="rgb(251,91,41)" rx="2" ry="2" />
<text  x="940.60" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (12 samples, 0.23%)</title><rect x="758.0" y="501" width="2.8" height="15.0" fill="rgb(243,129,42)" rx="2" ry="2" />
<text  x="761.04" y="511.5" ></text>
</g>
<g >
<title>abstract_type::from_string (6 samples, 0.12%)</title><rect x="69.3" y="469" width="1.4" height="15.0" fill="rgb(232,32,45)" rx="2" ry="2" />
<text  x="72.32" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="746.8" y="437" width="0.2" height="15.0" fill="rgb(248,194,29)" rx="2" ry="2" />
<text  x="749.81" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="884.5" y="389" width="0.2" height="15.0" fill="rgb(223,51,46)" rx="2" ry="2" />
<text  x="887.46" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="58.6" y="293" width="0.2" height="15.0" fill="rgb(218,7,36)" rx="2" ry="2" />
<text  x="61.56" y="303.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (2 samples, 0.04%)</title><rect x="444.0" y="293" width="0.5" height="15.0" fill="rgb(211,61,29)" rx="2" ry="2" />
<text  x="447.03" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="915.4" y="453" width="0.2" height="15.0" fill="rgb(212,25,27)" rx="2" ry="2" />
<text  x="918.38" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (8 samples, 0.16%)</title><rect x="78.5" y="485" width="1.8" height="15.0" fill="rgb(238,127,15)" rx="2" ry="2" />
<text  x="81.48" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1131.6" y="373" width="3.7" height="15.0" fill="rgb(214,0,46)" rx="2" ry="2" />
<text  x="1134.60" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.16%)</title><rect x="813.5" y="261" width="1.8" height="15.0" fill="rgb(228,16,32)" rx="2" ry="2" />
<text  x="816.46" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (13 samples, 0.25%)</title><rect x="1127.9" y="373" width="3.0" height="15.0" fill="rgb(247,206,15)" rx="2" ry="2" />
<text  x="1130.93" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.5" y="325" width="0.7" height="15.0" fill="rgb(236,23,24)" rx="2" ry="2" />
<text  x="48.50" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (3 samples, 0.06%)</title><rect x="914.7" y="437" width="0.7" height="15.0" fill="rgb(232,155,1)" rx="2" ry="2" />
<text  x="917.70" y="447.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="1133.9" y="293" width="0.2" height="15.0" fill="rgb(209,123,26)" rx="2" ry="2" />
<text  x="1136.89" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="671.2" y="581" width="0.3" height="15.0" fill="rgb(220,87,9)" rx="2" ry="2" />
<text  x="674.23" y="591.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (5 samples, 0.10%)</title><rect x="739.3" y="517" width="1.1" height="15.0" fill="rgb(206,115,51)" rx="2" ry="2" />
<text  x="742.25" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="706.5" y="533" width="0.2" height="15.0" fill="rgb(230,177,4)" rx="2" ry="2" />
<text  x="709.50" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="609.8" y="389" width="0.3" height="15.0" fill="rgb(236,45,40)" rx="2" ry="2" />
<text  x="612.85" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="899.1" y="517" width="0.3" height="15.0" fill="rgb(218,149,9)" rx="2" ry="2" />
<text  x="902.12" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="307.5" y="277" width="0.2" height="15.0" fill="rgb(243,102,45)" rx="2" ry="2" />
<text  x="310.52" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="564.7" y="373" width="0.3" height="15.0" fill="rgb(212,225,20)" rx="2" ry="2" />
<text  x="567.73" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="42.3" y="309" width="0.2" height="15.0" fill="rgb(212,114,10)" rx="2" ry="2" />
<text  x="45.29" y="319.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="527.4" y="405" width="0.2" height="15.0" fill="rgb(243,4,20)" rx="2" ry="2" />
<text  x="530.40" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="674.0" y="581" width="0.4" height="15.0" fill="rgb(216,40,37)" rx="2" ry="2" />
<text  x="676.98" y="591.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (17 samples, 0.33%)</title><rect x="408.3" y="261" width="3.9" height="15.0" fill="rgb(236,16,8)" rx="2" ry="2" />
<text  x="411.30" y="271.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (434 samples, 8.42%)</title><rect x="472.0" y="501" width="99.4" height="15.0" fill="rgb(233,123,40)" rx="2" ry="2" />
<text  x="474.97" y="511.5" >mutation_sou..</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="285.5" y="277" width="0.3" height="15.0" fill="rgb(234,168,28)" rx="2" ry="2" />
<text  x="288.53" y="287.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1137.6" y="581" width="0.2" height="15.0" fill="rgb(218,110,21)" rx="2" ry="2" />
<text  x="1140.55" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (2 samples, 0.04%)</title><rect x="787.1" y="437" width="0.5" height="15.0" fill="rgb(252,225,2)" rx="2" ry="2" />
<text  x="790.12" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="44.4" y="421" width="0.2" height="15.0" fill="rgb(218,219,48)" rx="2" ry="2" />
<text  x="47.36" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="54.4" y="357" width="0.3" height="15.0" fill="rgb(243,85,10)" rx="2" ry="2" />
<text  x="57.43" y="367.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="309" width="0.2" height="15.0" fill="rgb(254,171,30)" rx="2" ry="2" />
<text  x="1126.35" y="319.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="541.1" y="293" width="0.7" height="15.0" fill="rgb(221,72,51)" rx="2" ry="2" />
<text  x="544.14" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="978.6" y="421" width="0.2" height="15.0" fill="rgb(211,169,27)" rx="2" ry="2" />
<text  x="981.60" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="745.9" y="533" width="0.2" height="15.0" fill="rgb(217,146,40)" rx="2" ry="2" />
<text  x="748.90" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.10%)</title><rect x="956.4" y="501" width="1.1" height="15.0" fill="rgb(215,85,37)" rx="2" ry="2" />
<text  x="959.38" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="775.7" y="501" width="0.2" height="15.0" fill="rgb(216,3,10)" rx="2" ry="2" />
<text  x="778.67" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%)</title><rect x="748.2" y="597" width="0.4" height="15.0" fill="rgb(222,53,49)" rx="2" ry="2" />
<text  x="751.19" y="607.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.14%)</title><rect x="508.8" y="389" width="1.6" height="15.0" fill="rgb(210,217,35)" rx="2" ry="2" />
<text  x="511.84" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="775.9" y="485" width="0.5" height="15.0" fill="rgb(251,194,13)" rx="2" ry="2" />
<text  x="778.90" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="892.0" y="565" width="0.3" height="15.0" fill="rgb(216,114,41)" rx="2" ry="2" />
<text  x="895.02" y="575.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (1 samples, 0.02%)</title><rect x="479.8" y="437" width="0.2" height="15.0" fill="rgb(252,55,28)" rx="2" ry="2" />
<text  x="482.76" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="20.8" y="565" width="0.2" height="15.0" fill="rgb(251,57,41)" rx="2" ry="2" />
<text  x="23.76" y="575.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%)</title><rect x="813.7" y="245" width="1.6" height="15.0" fill="rgb(253,113,4)" rx="2" ry="2" />
<text  x="816.69" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="681.5" y="517" width="0.7" height="15.0" fill="rgb(221,79,17)" rx="2" ry="2" />
<text  x="684.54" y="527.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="718.2" y="341" width="0.2" height="15.0" fill="rgb(253,189,3)" rx="2" ry="2" />
<text  x="721.18" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%)</title><rect x="837.5" y="421" width="2.3" height="15.0" fill="rgb(253,59,21)" rx="2" ry="2" />
<text  x="840.51" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.6" y="325" width="0.2" height="15.0" fill="rgb(248,17,15)" rx="2" ry="2" />
<text  x="55.60" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="682.2" y="533" width="0.3" height="15.0" fill="rgb(252,147,49)" rx="2" ry="2" />
<text  x="685.22" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4 samples, 0.08%)</title><rect x="74.1" y="453" width="0.9" height="15.0" fill="rgb(247,226,24)" rx="2" ry="2" />
<text  x="77.13" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="647.9" y="485" width="0.2" height="15.0" fill="rgb(248,162,42)" rx="2" ry="2" />
<text  x="650.87" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="53.1" y="325" width="0.2" height="15.0" fill="rgb(216,23,21)" rx="2" ry="2" />
<text  x="56.06" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (4 samples, 0.08%)</title><rect x="532.7" y="373" width="0.9" height="15.0" fill="rgb(207,104,49)" rx="2" ry="2" />
<text  x="535.66" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="51.7" y="325" width="0.2" height="15.0" fill="rgb(239,226,30)" rx="2" ry="2" />
<text  x="54.68" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="694.1" y="581" width="0.3" height="15.0" fill="rgb(242,92,41)" rx="2" ry="2" />
<text  x="697.13" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (45 samples, 0.87%)</title><rect x="600.2" y="405" width="10.3" height="15.0" fill="rgb(246,229,47)" rx="2" ry="2" />
<text  x="603.23" y="415.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="81.7" y="709" width="0.2" height="15.0" fill="rgb(241,131,13)" rx="2" ry="2" />
<text  x="84.69" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="85.6" y="517" width="0.2" height="15.0" fill="rgb(213,66,38)" rx="2" ry="2" />
<text  x="88.58" y="527.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="489.1" y="341" width="1.6" height="15.0" fill="rgb(227,180,14)" rx="2" ry="2" />
<text  x="492.15" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&amp;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;**&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.9" y="341" width="0.2" height="15.0" fill="rgb(231,69,21)" rx="2" ry="2" />
<text  x="41.86" y="351.5" ></text>
</g>
<g >
<title>table::make_reader (419 samples, 8.13%)</title><rect x="475.2" y="453" width="95.9" height="15.0" fill="rgb(215,81,14)" rx="2" ry="2" />
<text  x="478.17" y="463.5" >table::make..</text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="859.3" y="517" width="2.5" height="15.0" fill="rgb(246,145,32)" rx="2" ry="2" />
<text  x="862.27" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (5 samples, 0.10%)</title><rect x="419.7" y="277" width="1.2" height="15.0" fill="rgb(210,86,17)" rx="2" ry="2" />
<text  x="422.75" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="80.3" y="469" width="0.2" height="15.0" fill="rgb(222,203,49)" rx="2" ry="2" />
<text  x="83.31" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="726.0" y="565" width="0.2" height="15.0" fill="rgb(222,166,45)" rx="2" ry="2" />
<text  x="728.97" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="321.9" y="405" width="0.5" height="15.0" fill="rgb(252,133,2)" rx="2" ry="2" />
<text  x="324.95" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (2 samples, 0.04%)</title><rect x="21.0" y="517" width="0.5" height="15.0" fill="rgb(237,158,12)" rx="2" ry="2" />
<text  x="23.99" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="280.0" y="261" width="0.7" height="15.0" fill="rgb(236,9,39)" rx="2" ry="2" />
<text  x="283.03" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="21.7" y="341" width="0.2" height="15.0" fill="rgb(226,106,34)" rx="2" ry="2" />
<text  x="24.68" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="1189.1" y="725" width="0.2" height="15.0" fill="rgb(211,23,53)" rx="2" ry="2" />
<text  x="1192.08" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="54.4" y="341" width="0.3" height="15.0" fill="rgb(250,150,2)" rx="2" ry="2" />
<text  x="57.43" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="195.1" y="341" width="0.4" height="15.0" fill="rgb(252,148,34)" rx="2" ry="2" />
<text  x="198.06" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.5" y="485" width="0.2" height="15.0" fill="rgb(220,62,16)" rx="2" ry="2" />
<text  x="70.49" y="495.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="311.6" y="293" width="0.3" height="15.0" fill="rgb(205,48,6)" rx="2" ry="2" />
<text  x="314.64" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="814.6" y="229" width="0.7" height="15.0" fill="rgb(208,135,28)" rx="2" ry="2" />
<text  x="817.61" y="239.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(219,48,16)" rx="2" ry="2" />
<text  x="13.69" y="671.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="1165.5" y="597" width="0.5" height="15.0" fill="rgb(244,44,43)" rx="2" ry="2" />
<text  x="1168.49" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="950.7" y="469" width="0.2" height="15.0" fill="rgb(230,175,5)" rx="2" ry="2" />
<text  x="953.66" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="107.6" y="581" width="0.2" height="15.0" fill="rgb(251,20,29)" rx="2" ry="2" />
<text  x="110.57" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="485" width="0.3" height="15.0" fill="rgb(223,159,5)" rx="2" ry="2" />
<text  x="1169.64" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (25 samples, 0.49%)</title><rect x="510.4" y="389" width="5.8" height="15.0" fill="rgb(232,81,13)" rx="2" ry="2" />
<text  x="513.45" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1056.9" y="421" width="0.3" height="15.0" fill="rgb(242,46,12)" rx="2" ry="2" />
<text  x="1059.93" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::prepare_heap (1 samples, 0.02%)</title><rect x="17.6" y="629" width="0.2" height="15.0" fill="rgb(222,95,39)" rx="2" ry="2" />
<text  x="20.56" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="44.6" y="309" width="0.4" height="15.0" fill="rgb(217,180,19)" rx="2" ry="2" />
<text  x="47.58" y="319.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1124.3" y="277" width="0.4" height="15.0" fill="rgb(227,115,33)" rx="2" ry="2" />
<text  x="1127.27" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.5" y="405" width="0.2" height="15.0" fill="rgb(225,75,37)" rx="2" ry="2" />
<text  x="67.51" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1167.8" y="549" width="0.2" height="15.0" fill="rgb(231,56,21)" rx="2" ry="2" />
<text  x="1170.78" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (4 samples, 0.08%)</title><rect x="682.9" y="549" width="0.9" height="15.0" fill="rgb(212,135,12)" rx="2" ry="2" />
<text  x="685.91" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="101.6" y="517" width="0.2" height="15.0" fill="rgb(235,168,29)" rx="2" ry="2" />
<text  x="104.61" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="361.3" y="309" width="0.3" height="15.0" fill="rgb(247,33,9)" rx="2" ry="2" />
<text  x="364.34" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="668.5" y="549" width="0.2" height="15.0" fill="rgb(216,67,23)" rx="2" ry="2" />
<text  x="671.48" y="559.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="718.2" y="469" width="0.4" height="15.0" fill="rgb(254,104,40)" rx="2" ry="2" />
<text  x="721.18" y="479.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="106.4" y="421" width="0.3" height="15.0" fill="rgb(248,81,42)" rx="2" ry="2" />
<text  x="109.42" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (2 samples, 0.04%)</title><rect x="480.2" y="437" width="0.5" height="15.0" fill="rgb(225,222,13)" rx="2" ry="2" />
<text  x="483.21" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="85.6" y="533" width="0.2" height="15.0" fill="rgb(207,72,49)" rx="2" ry="2" />
<text  x="88.58" y="543.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="884.9" y="325" width="0.3" height="15.0" fill="rgb(213,30,13)" rx="2" ry="2" />
<text  x="887.92" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (21 samples, 0.41%)</title><rect x="578.9" y="469" width="4.8" height="15.0" fill="rgb(253,112,27)" rx="2" ry="2" />
<text  x="581.93" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::value_at_index (1 samples, 0.02%)</title><rect x="1122.2" y="293" width="0.2" height="15.0" fill="rgb(250,176,18)" rx="2" ry="2" />
<text  x="1125.20" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (7 samples, 0.14%)</title><rect x="1019.8" y="261" width="1.6" height="15.0" fill="rgb(213,135,13)" rx="2" ry="2" />
<text  x="1022.83" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="690.9" y="565" width="0.5" height="15.0" fill="rgb(247,78,2)" rx="2" ry="2" />
<text  x="693.93" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="352.0" y="357" width="0.2" height="15.0" fill="rgb(215,228,38)" rx="2" ry="2" />
<text  x="354.95" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="701.0" y="581" width="0.2" height="15.0" fill="rgb(235,176,49)" rx="2" ry="2" />
<text  x="704.01" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (1 samples, 0.02%)</title><rect x="881.5" y="485" width="0.2" height="15.0" fill="rgb(207,7,35)" rx="2" ry="2" />
<text  x="884.49" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%)</title><rect x="934.4" y="453" width="2.7" height="15.0" fill="rgb(240,145,27)" rx="2" ry="2" />
<text  x="937.39" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%)</title><rect x="890.6" y="565" width="0.7" height="15.0" fill="rgb(238,19,34)" rx="2" ry="2" />
<text  x="893.65" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="40.9" y="293" width="0.7" height="15.0" fill="rgb(216,144,11)" rx="2" ry="2" />
<text  x="43.92" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="910.1" y="389" width="0.2" height="15.0" fill="rgb(246,206,4)" rx="2" ry="2" />
<text  x="913.12" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (3 samples, 0.06%)</title><rect x="21.5" y="469" width="0.6" height="15.0" fill="rgb(248,15,9)" rx="2" ry="2" />
<text  x="24.45" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%)</title><rect x="849.2" y="517" width="0.7" height="15.0" fill="rgb(212,114,13)" rx="2" ry="2" />
<text  x="852.19" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="723.5" y="533" width="0.2" height="15.0" fill="rgb(253,2,20)" rx="2" ry="2" />
<text  x="726.45" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="501.3" y="389" width="0.4" height="15.0" fill="rgb(207,171,11)" rx="2" ry="2" />
<text  x="504.28" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (40 samples, 0.78%)</title><rect x="697.8" y="597" width="9.2" height="15.0" fill="rgb(232,39,47)" rx="2" ry="2" />
<text  x="700.80" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (35 samples, 0.68%)</title><rect x="313.2" y="405" width="8.1" height="15.0" fill="rgb(211,23,26)" rx="2" ry="2" />
<text  x="316.25" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (11 samples, 0.21%)</title><rect x="593.8" y="421" width="2.5" height="15.0" fill="rgb(229,102,54)" rx="2" ry="2" />
<text  x="596.82" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="83.8" y="437" width="0.2" height="15.0" fill="rgb(249,58,51)" rx="2" ry="2" />
<text  x="86.75" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="968.5" y="469" width="0.3" height="15.0" fill="rgb(209,160,36)" rx="2" ry="2" />
<text  x="971.52" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1129.5" y="245" width="0.3" height="15.0" fill="rgb(237,10,15)" rx="2" ry="2" />
<text  x="1132.53" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (12 samples, 0.23%)</title><rect x="192.8" y="357" width="2.7" height="15.0" fill="rgb(211,217,2)" rx="2" ry="2" />
<text  x="195.77" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="76.6" y="517" width="0.3" height="15.0" fill="rgb(248,76,23)" rx="2" ry="2" />
<text  x="79.65" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1134.3" y="293" width="0.3" height="15.0" fill="rgb(242,211,36)" rx="2" ry="2" />
<text  x="1137.34" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.21%)</title><rect x="258.3" y="213" width="2.5" height="15.0" fill="rgb(247,173,45)" rx="2" ry="2" />
<text  x="261.28" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%)</title><rect x="916.5" y="485" width="0.5" height="15.0" fill="rgb(232,79,15)" rx="2" ry="2" />
<text  x="919.53" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="97.7" y="581" width="0.5" height="15.0" fill="rgb(250,166,38)" rx="2" ry="2" />
<text  x="100.72" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="808.9" y="325" width="0.2" height="15.0" fill="rgb(220,2,11)" rx="2" ry="2" />
<text  x="811.88" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="58.6" y="405" width="0.2" height="15.0" fill="rgb(248,219,16)" rx="2" ry="2" />
<text  x="61.56" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (4 samples, 0.08%)</title><rect x="667.8" y="581" width="0.9" height="15.0" fill="rgb(230,75,14)" rx="2" ry="2" />
<text  x="670.80" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%)</title><rect x="289.2" y="325" width="0.2" height="15.0" fill="rgb(242,198,47)" rx="2" ry="2" />
<text  x="292.20" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%)</title><rect x="704.4" y="549" width="1.4" height="15.0" fill="rgb(228,198,0)" rx="2" ry="2" />
<text  x="707.44" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="82.8" y="565" width="0.3" height="15.0" fill="rgb(241,56,42)" rx="2" ry="2" />
<text  x="85.83" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="287.8" y="293" width="0.7" height="15.0" fill="rgb(222,171,45)" rx="2" ry="2" />
<text  x="290.82" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="52.6" y="277" width="0.2" height="15.0" fill="rgb(224,199,8)" rx="2" ry="2" />
<text  x="55.60" y="287.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="461.9" y="389" width="0.4" height="15.0" fill="rgb(213,12,53)" rx="2" ry="2" />
<text  x="464.89" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.2" y="501" width="0.3" height="15.0" fill="rgb(235,31,37)" rx="2" ry="2" />
<text  x="21.25" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (8 samples, 0.16%)</title><rect x="1106.9" y="485" width="1.8" height="15.0" fill="rgb(222,193,11)" rx="2" ry="2" />
<text  x="1109.86" y="495.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (20 samples, 0.39%)</title><rect x="770.9" y="469" width="4.5" height="15.0" fill="rgb(220,219,2)" rx="2" ry="2" />
<text  x="773.86" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_construct_node&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="110.5" y="453" width="0.3" height="15.0" fill="rgb(245,159,51)" rx="2" ry="2" />
<text  x="113.55" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;float  (1 samples, 0.02%)</title><rect x="1167.3" y="517" width="0.3" height="15.0" fill="rgb(246,125,31)" rx="2" ry="2" />
<text  x="1170.33" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1137.6" y="469" width="0.2" height="15.0" fill="rgb(253,67,12)" rx="2" ry="2" />
<text  x="1140.55" y="479.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (6 samples, 0.12%)</title><rect x="635.0" y="501" width="1.4" height="15.0" fill="rgb(215,207,21)" rx="2" ry="2" />
<text  x="638.04" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="21.5" y="405" width="0.2" height="15.0" fill="rgb(222,203,3)" rx="2" ry="2" />
<text  x="24.45" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (71 samples, 1.38%)</title><rect x="23.3" y="437" width="16.2" height="15.0" fill="rgb(245,113,40)" rx="2" ry="2" />
<text  x="26.28" y="447.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (4 samples, 0.08%)</title><rect x="1090.4" y="453" width="0.9" height="15.0" fill="rgb(207,183,27)" rx="2" ry="2" />
<text  x="1093.37" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="813.5" y="245" width="0.2" height="15.0" fill="rgb(207,61,54)" rx="2" ry="2" />
<text  x="816.46" y="255.5" ></text>
</g>
<g >
<title>seastar::file_exists (1 samples, 0.02%)</title><rect x="746.6" y="549" width="0.2" height="15.0" fill="rgb(242,14,51)" rx="2" ry="2" />
<text  x="749.58" y="559.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.16%)</title><rect x="841.4" y="437" width="1.8" height="15.0" fill="rgb(225,75,22)" rx="2" ry="2" />
<text  x="844.41" y="447.5" ></text>
</g>
<g >
<title>row::compact_and_expire (100 samples, 1.94%)</title><rect x="420.9" y="309" width="22.9" height="15.0" fill="rgb(247,94,31)" rx="2" ry="2" />
<text  x="423.89" y="319.5" >r..</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="57.9" y="277" width="0.2" height="15.0" fill="rgb(229,41,49)" rx="2" ry="2" />
<text  x="60.87" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.0" y="309" width="0.2" height="15.0" fill="rgb(205,57,12)" rx="2" ry="2" />
<text  x="62.01" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="10.2" y="501" width="0.3" height="15.0" fill="rgb(250,37,4)" rx="2" ry="2" />
<text  x="13.23" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="886.8" y="453" width="0.2" height="15.0" fill="rgb(224,42,18)" rx="2" ry="2" />
<text  x="889.75" y="463.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (8 samples, 0.16%)</title><rect x="36.3" y="341" width="1.9" height="15.0" fill="rgb(208,54,19)" rx="2" ry="2" />
<text  x="39.34" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="939.9" y="501" width="0.7" height="15.0" fill="rgb(216,31,35)" rx="2" ry="2" />
<text  x="942.89" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="658.6" y="485" width="0.3" height="15.0" fill="rgb(221,26,41)" rx="2" ry="2" />
<text  x="661.63" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="322.9" y="421" width="0.2" height="15.0" fill="rgb(214,26,46)" rx="2" ry="2" />
<text  x="325.86" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1167.1" y="565" width="0.2" height="15.0" fill="rgb(217,66,40)" rx="2" ry="2" />
<text  x="1170.10" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%)</title><rect x="24.2" y="277" width="0.2" height="15.0" fill="rgb(250,4,17)" rx="2" ry="2" />
<text  x="27.20" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.10%)</title><rect x="48.2" y="309" width="1.2" height="15.0" fill="rgb(226,59,39)" rx="2" ry="2" />
<text  x="51.25" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.9" y="437" width="0.2" height="15.0" fill="rgb(214,204,20)" rx="2" ry="2" />
<text  x="677.90" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::rename_new_sstable_component_file (1 samples, 0.02%)</title><rect x="665.0" y="549" width="0.3" height="15.0" fill="rgb(215,220,30)" rx="2" ry="2" />
<text  x="668.05" y="559.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (58 samples, 1.13%)</title><rect x="1061.1" y="405" width="13.2" height="15.0" fill="rgb(215,191,34)" rx="2" ry="2" />
<text  x="1064.05" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::file_accessible (1 samples, 0.02%)</title><rect x="746.6" y="533" width="0.2" height="15.0" fill="rgb(242,171,39)" rx="2" ry="2" />
<text  x="749.58" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (58 samples, 1.13%)</title><rect x="533.6" y="373" width="13.3" height="15.0" fill="rgb(207,226,52)" rx="2" ry="2" />
<text  x="536.58" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (11 samples, 0.21%)</title><rect x="884.2" y="437" width="2.6" height="15.0" fill="rgb(210,103,31)" rx="2" ry="2" />
<text  x="887.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="149" width="0.5" height="15.0" fill="rgb(234,48,14)" rx="2" ry="2" />
<text  x="56.52" y="159.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="136.7" y="549" width="0.2" height="15.0" fill="rgb(222,69,35)" rx="2" ry="2" />
<text  x="139.66" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="60.6" y="357" width="0.2" height="15.0" fill="rgb(237,94,53)" rx="2" ry="2" />
<text  x="63.62" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6 samples, 0.12%)</title><rect x="174.0" y="469" width="1.4" height="15.0" fill="rgb(245,68,19)" rx="2" ry="2" />
<text  x="176.99" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, std::function&lt;void  (1 samples, 0.02%)</title><rect x="746.8" y="597" width="0.2" height="15.0" fill="rgb(247,32,45)" rx="2" ry="2" />
<text  x="749.81" y="607.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1131.4" y="405" width="0.2" height="15.0" fill="rgb(250,153,3)" rx="2" ry="2" />
<text  x="1134.37" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="728.0" y="565" width="0.3" height="15.0" fill="rgb(242,149,40)" rx="2" ry="2" />
<text  x="731.03" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="40.0" y="453" width="0.5" height="15.0" fill="rgb(229,207,19)" rx="2" ry="2" />
<text  x="43.00" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(210,175,19)" rx="2" ry="2" />
<text  x="13.69" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1006.1" y="341" width="0.4" height="15.0" fill="rgb(228,226,12)" rx="2" ry="2" />
<text  x="1009.08" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="297.0" y="309" width="0.2" height="15.0" fill="rgb(238,195,17)" rx="2" ry="2" />
<text  x="299.98" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (8 samples, 0.16%)</title><rect x="537.2" y="325" width="1.9" height="15.0" fill="rgb(234,114,4)" rx="2" ry="2" />
<text  x="540.24" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="51.5" y="373" width="0.9" height="15.0" fill="rgb(229,135,3)" rx="2" ry="2" />
<text  x="54.46" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="344.2" y="469" width="0.2" height="15.0" fill="rgb(223,94,48)" rx="2" ry="2" />
<text  x="347.17" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="47.1" y="421" width="0.7" height="15.0" fill="rgb(229,37,41)" rx="2" ry="2" />
<text  x="50.10" y="431.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,123 samples, 21.80%)</title><rect x="880.3" y="597" width="257.3" height="15.0" fill="rgb(210,172,26)" rx="2" ry="2" />
<text  x="883.34" y="607.5" >seastar::lambda_task&lt;seastar::exec..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="723.9" y="549" width="0.5" height="15.0" fill="rgb(234,86,31)" rx="2" ry="2" />
<text  x="726.91" y="559.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (26 samples, 0.50%)</title><rect x="519.1" y="341" width="6.0" height="15.0" fill="rgb(228,112,27)" rx="2" ry="2" />
<text  x="522.15" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.0" y="213" width="0.3" height="15.0" fill="rgb(252,228,47)" rx="2" ry="2" />
<text  x="48.04" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="277.1" y="245" width="0.2" height="15.0" fill="rgb(221,39,37)" rx="2" ry="2" />
<text  x="280.06" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="723.9" y="533" width="0.5" height="15.0" fill="rgb(236,16,13)" rx="2" ry="2" />
<text  x="726.91" y="543.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="109.9" y="277" width="0.4" height="15.0" fill="rgb(206,228,8)" rx="2" ry="2" />
<text  x="112.86" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.14%)</title><rect x="123.1" y="533" width="1.6" height="15.0" fill="rgb(247,213,0)" rx="2" ry="2" />
<text  x="126.14" y="543.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%)</title><rect x="291.7" y="341" width="0.2" height="15.0" fill="rgb(231,76,50)" rx="2" ry="2" />
<text  x="294.72" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1022.1" y="261" width="0.2" height="15.0" fill="rgb(226,43,29)" rx="2" ry="2" />
<text  x="1025.12" y="271.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (4 samples, 0.08%)</title><rect x="592.2" y="437" width="0.9" height="15.0" fill="rgb(249,229,2)" rx="2" ry="2" />
<text  x="595.21" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="52.8" y="341" width="0.3" height="15.0" fill="rgb(238,154,20)" rx="2" ry="2" />
<text  x="55.83" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="18.5" y="629" width="0.4" height="15.0" fill="rgb(206,61,12)" rx="2" ry="2" />
<text  x="21.47" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="54.9" y="197" width="0.2" height="15.0" fill="rgb(231,23,18)" rx="2" ry="2" />
<text  x="57.89" y="207.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (30 samples, 0.58%)</title><rect x="734.4" y="549" width="6.9" height="15.0" fill="rgb(211,196,53)" rx="2" ry="2" />
<text  x="737.44" y="559.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="1133.2" y="165" width="0.2" height="15.0" fill="rgb(222,70,31)" rx="2" ry="2" />
<text  x="1136.20" y="175.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="82.8" y="453" width="0.3" height="15.0" fill="rgb(228,70,28)" rx="2" ry="2" />
<text  x="85.83" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.10%)</title><rect x="48.2" y="277" width="1.2" height="15.0" fill="rgb(216,121,14)" rx="2" ry="2" />
<text  x="51.25" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1117.2" y="517" width="0.4" height="15.0" fill="rgb(243,121,25)" rx="2" ry="2" />
<text  x="1120.17" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="41.6" y="421" width="0.5" height="15.0" fill="rgb(238,18,53)" rx="2" ry="2" />
<text  x="44.61" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="321.7" y="389" width="0.2" height="15.0" fill="rgb(223,122,42)" rx="2" ry="2" />
<text  x="324.72" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1097.2" y="485" width="0.5" height="15.0" fill="rgb(254,215,1)" rx="2" ry="2" />
<text  x="1100.24" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.7" y="469" width="0.3" height="15.0" fill="rgb(227,27,41)" rx="2" ry="2" />
<text  x="67.74" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (4 samples, 0.08%)</title><rect x="84.2" y="565" width="0.9" height="15.0" fill="rgb(245,38,0)" rx="2" ry="2" />
<text  x="87.21" y="575.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::entry, std::function&lt;void  (1 samples, 0.02%)</title><rect x="717.5" y="517" width="0.2" height="15.0" fill="rgb(238,140,12)" rx="2" ry="2" />
<text  x="720.50" y="527.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="245" width="0.2" height="15.0" fill="rgb(239,136,50)" rx="2" ry="2" />
<text  x="1126.35" y="255.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (8 samples, 0.16%)</title><rect x="876.4" y="565" width="1.9" height="15.0" fill="rgb(244,121,21)" rx="2" ry="2" />
<text  x="879.45" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="809.6" y="325" width="0.2" height="15.0" fill="rgb(254,222,3)" rx="2" ry="2" />
<text  x="812.57" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="950.9" y="485" width="0.7" height="15.0" fill="rgb(233,51,10)" rx="2" ry="2" />
<text  x="953.89" y="495.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="1164.8" y="549" width="0.2" height="15.0" fill="rgb(220,223,5)" rx="2" ry="2" />
<text  x="1167.81" y="559.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1131.6" y="309" width="0.2" height="15.0" fill="rgb(239,199,2)" rx="2" ry="2" />
<text  x="1134.60" y="319.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="720.5" y="581" width="1.1" height="15.0" fill="rgb(251,188,12)" rx="2" ry="2" />
<text  x="723.47" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="76.4" y="469" width="0.2" height="15.0" fill="rgb(235,40,51)" rx="2" ry="2" />
<text  x="79.42" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="850.3" y="517" width="0.3" height="15.0" fill="rgb(229,98,19)" rx="2" ry="2" />
<text  x="853.34" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="530.1" y="389" width="0.5" height="15.0" fill="rgb(254,33,50)" rx="2" ry="2" />
<text  x="533.14" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="351.3" y="389" width="2.0" height="15.0" fill="rgb(252,156,23)" rx="2" ry="2" />
<text  x="354.27" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="294.5" y="325" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="297.46" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1108.7" y="469" width="0.2" height="15.0" fill="rgb(246,121,24)" rx="2" ry="2" />
<text  x="1111.69" y="479.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,311 samples, 25.45%)</title><rect x="169.2" y="517" width="300.2" height="15.0" fill="rgb(230,54,5)" rx="2" ry="2" />
<text  x="172.18" y="527.5" >query::consume_page&lt;</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.4" y="309" width="0.3" height="15.0" fill="rgb(250,106,37)" rx="2" ry="2" />
<text  x="57.43" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (54 samples, 1.05%)</title><rect x="1086.7" y="517" width="12.4" height="15.0" fill="rgb(217,124,24)" rx="2" ry="2" />
<text  x="1089.70" y="527.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 6.42%)</title><rect x="10.2" y="725" width="75.8" height="15.0" fill="rgb(238,122,1)" rx="2" ry="2" />
<text  x="13.23" y="735.5" >[unknown]</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="840.7" y="453" width="0.2" height="15.0" fill="rgb(212,81,31)" rx="2" ry="2" />
<text  x="843.72" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="120.4" y="549" width="0.9" height="15.0" fill="rgb(210,9,41)" rx="2" ry="2" />
<text  x="123.40" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.6" y="469" width="0.2" height="15.0" fill="rgb(211,198,39)" rx="2" ry="2" />
<text  x="66.59" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_initial_partition_key_restrictions (1 samples, 0.02%)</title><rect x="72.8" y="485" width="0.2" height="15.0" fill="rgb(230,33,42)" rx="2" ry="2" />
<text  x="75.76" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="880.1" y="437" width="0.2" height="15.0" fill="rgb(215,207,7)" rx="2" ry="2" />
<text  x="883.11" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="826.5" y="293" width="0.2" height="15.0" fill="rgb(216,50,8)" rx="2" ry="2" />
<text  x="829.52" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (3 samples, 0.06%)</title><rect x="639.9" y="533" width="0.6" height="15.0" fill="rgb(252,170,17)" rx="2" ry="2" />
<text  x="642.85" y="543.5" ></text>
</g>
<g >
<title>boost::unique_lock&lt;boost::mutex&gt;::unlock (1 samples, 0.02%)</title><rect x="87.4" y="613" width="0.2" height="15.0" fill="rgb(240,33,26)" rx="2" ry="2" />
<text  x="90.41" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="833.8" y="421" width="1.0" height="15.0" fill="rgb(249,106,9)" rx="2" ry="2" />
<text  x="836.85" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="98.0" y="565" width="0.2" height="15.0" fill="rgb(208,178,29)" rx="2" ry="2" />
<text  x="100.95" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="700.3" y="549" width="0.2" height="15.0" fill="rgb(251,85,42)" rx="2" ry="2" />
<text  x="703.32" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="802.2" y="405" width="0.5" height="15.0" fill="rgb(240,93,35)" rx="2" ry="2" />
<text  x="805.24" y="415.5" ></text>
</g>
<g >
<title>schema_registry::get (17 samples, 0.33%)</title><rect x="977.0" y="453" width="3.9" height="15.0" fill="rgb(242,161,54)" rx="2" ry="2" />
<text  x="980.00" y="463.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="153.6" y="533" width="1.4" height="15.0" fill="rgb(210,60,11)" rx="2" ry="2" />
<text  x="156.61" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="832.5" y="373" width="0.4" height="15.0" fill="rgb(226,125,38)" rx="2" ry="2" />
<text  x="835.47" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (3 samples, 0.06%)</title><rect x="634.4" y="501" width="0.6" height="15.0" fill="rgb(205,46,5)" rx="2" ry="2" />
<text  x="637.36" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (3 samples, 0.06%)</title><rect x="109.6" y="581" width="0.7" height="15.0" fill="rgb(216,188,16)" rx="2" ry="2" />
<text  x="112.63" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="43.0" y="437" width="0.2" height="15.0" fill="rgb(215,179,12)" rx="2" ry="2" />
<text  x="45.98" y="447.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="746.8" y="149" width="0.2" height="15.0" fill="rgb(217,68,12)" rx="2" ry="2" />
<text  x="749.81" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="878.3" y="581" width="0.2" height="15.0" fill="rgb(250,148,31)" rx="2" ry="2" />
<text  x="881.28" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (211 samples, 4.10%)</title><rect x="226.0" y="277" width="48.3" height="15.0" fill="rgb(241,160,22)" rx="2" ry="2" />
<text  x="228.98" y="287.5" >muta..</text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%)</title><rect x="110.3" y="517" width="0.2" height="15.0" fill="rgb(224,7,43)" rx="2" ry="2" />
<text  x="113.32" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%)</title><rect x="1003.3" y="357" width="3.2" height="15.0" fill="rgb(247,173,0)" rx="2" ry="2" />
<text  x="1006.33" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="746.8" y="581" width="0.2" height="15.0" fill="rgb(213,24,0)" rx="2" ry="2" />
<text  x="749.81" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="649.7" y="517" width="0.2" height="15.0" fill="rgb(219,161,9)" rx="2" ry="2" />
<text  x="652.70" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="18.2" y="661" width="0.7" height="15.0" fill="rgb(224,37,48)" rx="2" ry="2" />
<text  x="21.25" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (46 samples, 0.89%)</title><rect x="707.0" y="597" width="10.5" height="15.0" fill="rgb(228,14,50)" rx="2" ry="2" />
<text  x="709.96" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::live_cell_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="277" width="0.2" height="15.0" fill="rgb(239,190,4)" rx="2" ry="2" />
<text  x="1126.35" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%)</title><rect x="1084.9" y="485" width="0.9" height="15.0" fill="rgb(212,49,25)" rx="2" ry="2" />
<text  x="1087.87" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (32 samples, 0.62%)</title><rect x="614.9" y="469" width="7.3" height="15.0" fill="rgb(234,186,11)" rx="2" ry="2" />
<text  x="617.89" y="479.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="878.7" y="581" width="0.3" height="15.0" fill="rgb(230,93,9)" rx="2" ry="2" />
<text  x="881.74" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="548.0" y="373" width="0.7" height="15.0" fill="rgb(210,102,36)" rx="2" ry="2" />
<text  x="551.01" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (394 samples, 7.65%)</title><rect x="761.2" y="533" width="90.3" height="15.0" fill="rgb(251,167,21)" rx="2" ry="2" />
<text  x="764.24" y="543.5" >cql3::quer..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="21.0" y="453" width="0.2" height="15.0" fill="rgb(253,23,24)" rx="2" ry="2" />
<text  x="23.99" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1017.5" y="293" width="0.3" height="15.0" fill="rgb(211,152,21)" rx="2" ry="2" />
<text  x="1020.53" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="487.3" y="341" width="0.5" height="15.0" fill="rgb(254,124,18)" rx="2" ry="2" />
<text  x="490.31" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="660.0" y="565" width="0.9" height="15.0" fill="rgb(222,194,49)" rx="2" ry="2" />
<text  x="663.01" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1137.6" y="277" width="0.2" height="15.0" fill="rgb(219,218,4)" rx="2" ry="2" />
<text  x="1140.55" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="43.2" y="389" width="0.2" height="15.0" fill="rgb(254,209,31)" rx="2" ry="2" />
<text  x="46.21" y="399.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="1125.0" y="277" width="0.2" height="15.0" fill="rgb(232,31,14)" rx="2" ry="2" />
<text  x="1127.95" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(219,34,19)" rx="2" ry="2" />
<text  x="1192.77" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="18.2" y="261" width="0.3" height="15.0" fill="rgb(235,195,19)" rx="2" ry="2" />
<text  x="21.25" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (1 samples, 0.02%)</title><rect x="733.8" y="549" width="0.2" height="15.0" fill="rgb(211,16,52)" rx="2" ry="2" />
<text  x="736.76" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (55 samples, 1.07%)</title><rect x="1146.0" y="581" width="12.6" height="15.0" fill="rgb(241,224,25)" rx="2" ry="2" />
<text  x="1149.02" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (7 samples, 0.14%)</title><rect x="283.9" y="277" width="1.6" height="15.0" fill="rgb(237,120,5)" rx="2" ry="2" />
<text  x="286.93" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1152.0" y="453" width="0.2" height="15.0" fill="rgb(239,34,24)" rx="2" ry="2" />
<text  x="1154.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;seastar::do_recursive_touch_directory (1 samples, 0.02%)</title><rect x="82.6" y="453" width="0.2" height="15.0" fill="rgb(241,118,48)" rx="2" ry="2" />
<text  x="85.60" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="833.4" y="405" width="0.2" height="15.0" fill="rgb(227,165,28)" rx="2" ry="2" />
<text  x="836.39" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="643.1" y="517" width="0.2" height="15.0" fill="rgb(237,159,10)" rx="2" ry="2" />
<text  x="646.06" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="650.8" y="501" width="0.3" height="15.0" fill="rgb(242,35,8)" rx="2" ry="2" />
<text  x="653.85" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="556.0" y="421" width="0.3" height="15.0" fill="rgb(235,58,2)" rx="2" ry="2" />
<text  x="559.02" y="431.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1168.9" y="725" width="0.9" height="15.0" fill="rgb(250,190,31)" rx="2" ry="2" />
<text  x="1171.93" y="735.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="275.2" y="213" width="0.3" height="15.0" fill="rgb(242,61,19)" rx="2" ry="2" />
<text  x="278.23" y="223.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="884.0" y="405" width="0.2" height="15.0" fill="rgb(216,191,31)" rx="2" ry="2" />
<text  x="887.01" y="415.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="72.1" y="405" width="0.2" height="15.0" fill="rgb(232,64,9)" rx="2" ry="2" />
<text  x="75.07" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="468.1" y="469" width="0.2" height="15.0" fill="rgb(207,2,9)" rx="2" ry="2" />
<text  x="471.07" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1098.4" y="501" width="0.2" height="15.0" fill="rgb(223,144,0)" rx="2" ry="2" />
<text  x="1101.39" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="41.6" y="405" width="0.5" height="15.0" fill="rgb(213,69,14)" rx="2" ry="2" />
<text  x="44.61" y="415.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1151.3" y="485" width="0.9" height="15.0" fill="rgb(244,1,27)" rx="2" ry="2" />
<text  x="1154.29" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="746.8" y="117" width="0.2" height="15.0" fill="rgb(225,19,47)" rx="2" ry="2" />
<text  x="749.81" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="213" width="0.5" height="15.0" fill="rgb(213,44,5)" rx="2" ry="2" />
<text  x="56.52" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%)</title><rect x="817.4" y="277" width="0.6" height="15.0" fill="rgb(217,86,46)" rx="2" ry="2" />
<text  x="820.36" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="69.1" y="485" width="0.2" height="15.0" fill="rgb(227,124,37)" rx="2" ry="2" />
<text  x="72.09" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (2 samples, 0.04%)</title><rect x="943.6" y="485" width="0.4" height="15.0" fill="rgb(214,167,24)" rx="2" ry="2" />
<text  x="946.56" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="344.9" y="469" width="0.4" height="15.0" fill="rgb(224,202,48)" rx="2" ry="2" />
<text  x="347.85" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="946.1" y="469" width="0.2" height="15.0" fill="rgb(219,109,15)" rx="2" ry="2" />
<text  x="949.08" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%)</title><rect x="995.5" y="389" width="2.6" height="15.0" fill="rgb(234,22,13)" rx="2" ry="2" />
<text  x="998.55" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.0" y="325" width="0.2" height="15.0" fill="rgb(244,184,23)" rx="2" ry="2" />
<text  x="56.98" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="939.0" y="485" width="0.9" height="15.0" fill="rgb(219,179,22)" rx="2" ry="2" />
<text  x="941.98" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="312.6" y="325" width="0.2" height="15.0" fill="rgb(254,112,32)" rx="2" ry="2" />
<text  x="315.56" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="1034.0" y="373" width="0.5" height="15.0" fill="rgb(229,221,48)" rx="2" ry="2" />
<text  x="1037.03" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (11 samples, 0.21%)</title><rect x="695.3" y="549" width="2.5" height="15.0" fill="rgb(235,94,45)" rx="2" ry="2" />
<text  x="698.28" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="832.0" y="373" width="0.2" height="15.0" fill="rgb(224,13,39)" rx="2" ry="2" />
<text  x="835.01" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (15 samples, 0.29%)</title><rect x="1161.4" y="565" width="3.4" height="15.0" fill="rgb(207,221,1)" rx="2" ry="2" />
<text  x="1164.37" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (46 samples, 0.89%)</title><rect x="332.0" y="437" width="10.6" height="15.0" fill="rgb(207,188,13)" rx="2" ry="2" />
<text  x="335.03" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="643.1" y="533" width="0.2" height="15.0" fill="rgb(205,84,33)" rx="2" ry="2" />
<text  x="646.06" y="543.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1046.9" y="373" width="0.2" height="15.0" fill="rgb(247,88,1)" rx="2" ry="2" />
<text  x="1049.85" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (38 samples, 0.74%)</title><rect x="48.0" y="421" width="8.7" height="15.0" fill="rgb(230,45,23)" rx="2" ry="2" />
<text  x="51.02" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (2 samples, 0.04%)</title><rect x="955.9" y="501" width="0.5" height="15.0" fill="rgb(253,136,52)" rx="2" ry="2" />
<text  x="958.92" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="706.7" y="549" width="0.3" height="15.0" fill="rgb(238,145,8)" rx="2" ry="2" />
<text  x="709.73" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="1146.5" y="533" width="1.4" height="15.0" fill="rgb(254,67,13)" rx="2" ry="2" />
<text  x="1149.48" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="1044.6" y="405" width="0.4" height="15.0" fill="rgb(214,175,9)" rx="2" ry="2" />
<text  x="1047.56" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="701.2" y="581" width="0.3" height="15.0" fill="rgb(226,207,4)" rx="2" ry="2" />
<text  x="704.23" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="434.6" y="245" width="2.8" height="15.0" fill="rgb(207,229,18)" rx="2" ry="2" />
<text  x="437.64" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (29 samples, 0.56%)</title><rect x="1067.2" y="373" width="6.7" height="15.0" fill="rgb(238,68,38)" rx="2" ry="2" />
<text  x="1070.24" y="383.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="524.2" y="277" width="0.2" height="15.0" fill="rgb(220,74,33)" rx="2" ry="2" />
<text  x="527.19" y="287.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="884.9" y="309" width="0.3" height="15.0" fill="rgb(219,196,12)" rx="2" ry="2" />
<text  x="887.92" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.17%)</title><rect x="359.5" y="341" width="2.1" height="15.0" fill="rgb(239,44,19)" rx="2" ry="2" />
<text  x="362.51" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="51.0" y="373" width="0.2" height="15.0" fill="rgb(234,184,17)" rx="2" ry="2" />
<text  x="54.00" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (6 samples, 0.12%)</title><rect x="69.3" y="501" width="1.4" height="15.0" fill="rgb(222,164,19)" rx="2" ry="2" />
<text  x="72.32" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="22.8" y="453" width="0.3" height="15.0" fill="rgb(214,148,41)" rx="2" ry="2" />
<text  x="25.83" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="737.0" y="517" width="0.2" height="15.0" fill="rgb(226,172,12)" rx="2" ry="2" />
<text  x="739.96" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="489.4" y="325" width="1.3" height="15.0" fill="rgb(221,138,24)" rx="2" ry="2" />
<text  x="492.38" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="827.7" y="325" width="0.2" height="15.0" fill="rgb(215,10,22)" rx="2" ry="2" />
<text  x="830.66" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="212.9" y="309" width="0.3" height="15.0" fill="rgb(216,59,13)" rx="2" ry="2" />
<text  x="215.93" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="779.8" y="469" width="0.2" height="15.0" fill="rgb(205,6,13)" rx="2" ry="2" />
<text  x="782.79" y="479.5" ></text>
</g>
<g >
<title>sstables::sstable::temp_filename (1 samples, 0.02%)</title><rect x="18.9" y="565" width="0.3" height="15.0" fill="rgb(247,226,51)" rx="2" ry="2" />
<text  x="21.93" y="575.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (26 samples, 0.50%)</title><rect x="1061.3" y="357" width="5.9" height="15.0" fill="rgb(240,8,42)" rx="2" ry="2" />
<text  x="1064.28" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="997.4" y="309" width="0.2" height="15.0" fill="rgb(247,119,17)" rx="2" ry="2" />
<text  x="1000.38" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="565" width="8.0" height="15.0" fill="rgb(213,198,23)" rx="2" ry="2" />
<text  x="1122.46" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (111 samples, 2.15%)</title><rect x="806.8" y="389" width="25.4" height="15.0" fill="rgb(215,61,12)" rx="2" ry="2" />
<text  x="809.82" y="399.5" >s..</text>
</g>
<g >
<title>auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1166.6" y="405" width="0.3" height="15.0" fill="rgb(235,67,45)" rx="2" ry="2" />
<text  x="1169.64" y="415.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (6 samples, 0.12%)</title><rect x="1119.9" y="341" width="1.4" height="15.0" fill="rgb(239,89,37)" rx="2" ry="2" />
<text  x="1122.91" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="311.0" y="309" width="0.2" height="15.0" fill="rgb(220,87,25)" rx="2" ry="2" />
<text  x="313.95" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (35 samples, 0.68%)</title><rect x="1119.5" y="501" width="8.0" height="15.0" fill="rgb(231,209,39)" rx="2" ry="2" />
<text  x="1122.46" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%)</title><rect x="1131.6" y="357" width="3.4" height="15.0" fill="rgb(215,63,25)" rx="2" ry="2" />
<text  x="1134.60" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="274.1" y="229" width="0.2" height="15.0" fill="rgb(212,177,1)" rx="2" ry="2" />
<text  x="277.08" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%)</title><rect x="723.7" y="549" width="0.2" height="15.0" fill="rgb(209,201,18)" rx="2" ry="2" />
<text  x="726.68" y="559.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="85.4" y="677" width="0.4" height="15.0" fill="rgb(235,199,9)" rx="2" ry="2" />
<text  x="88.35" y="687.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="17.8" y="613" width="0.2" height="15.0" fill="rgb(227,54,11)" rx="2" ry="2" />
<text  x="20.79" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (565 samples, 10.97%)</title><rect x="749.3" y="597" width="129.4" height="15.0" fill="rgb(237,40,37)" rx="2" ry="2" />
<text  x="752.33" y="607.5" >seastar::interna..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="699.4" y="565" width="0.2" height="15.0" fill="rgb(228,7,22)" rx="2" ry="2" />
<text  x="702.40" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="717.7" y="501" width="0.9" height="15.0" fill="rgb(238,199,15)" rx="2" ry="2" />
<text  x="720.73" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.5" y="693" width="0.2" height="15.0" fill="rgb(235,70,45)" rx="2" ry="2" />
<text  x="13.46" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="1043.2" y="421" width="0.9" height="15.0" fill="rgb(242,97,6)" rx="2" ry="2" />
<text  x="1046.19" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_emplace_unique&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="110.5" y="485" width="0.3" height="15.0" fill="rgb(212,166,16)" rx="2" ry="2" />
<text  x="113.55" y="495.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="311.9" y="309" width="0.4" height="15.0" fill="rgb(253,98,28)" rx="2" ry="2" />
<text  x="314.87" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="21.0" y="501" width="0.5" height="15.0" fill="rgb(248,169,17)" rx="2" ry="2" />
<text  x="23.99" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (12 samples, 0.23%)</title><rect x="1075.5" y="421" width="2.7" height="15.0" fill="rgb(219,142,39)" rx="2" ry="2" />
<text  x="1078.48" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="437" width="0.2" height="15.0" fill="rgb(226,77,19)" rx="2" ry="2" />
<text  x="113.32" y="447.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="17.3" y="597" width="0.3" height="15.0" fill="rgb(229,113,20)" rx="2" ry="2" />
<text  x="20.33" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="609.2" y="373" width="0.2" height="15.0" fill="rgb(216,157,5)" rx="2" ry="2" />
<text  x="612.16" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="891.1" y="533" width="0.2" height="15.0" fill="rgb(214,180,24)" rx="2" ry="2" />
<text  x="894.11" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (10 samples, 0.19%)</title><rect x="83.1" y="629" width="2.3" height="15.0" fill="rgb(231,210,15)" rx="2" ry="2" />
<text  x="86.06" y="639.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="76.4" y="517" width="0.2" height="15.0" fill="rgb(224,186,47)" rx="2" ry="2" />
<text  x="79.42" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="54.9" y="261" width="0.2" height="15.0" fill="rgb(224,2,46)" rx="2" ry="2" />
<text  x="57.89" y="271.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="58.6" y="245" width="0.2" height="15.0" fill="rgb(213,221,1)" rx="2" ry="2" />
<text  x="61.56" y="255.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="1024.9" y="309" width="1.3" height="15.0" fill="rgb(239,61,54)" rx="2" ry="2" />
<text  x="1027.86" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="737.7" y="517" width="0.2" height="15.0" fill="rgb(242,6,46)" rx="2" ry="2" />
<text  x="740.65" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (3 samples, 0.06%)</title><rect x="641.7" y="533" width="0.7" height="15.0" fill="rgb(224,3,22)" rx="2" ry="2" />
<text  x="644.68" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.12%)</title><rect x="771.3" y="421" width="1.4" height="15.0" fill="rgb(249,193,13)" rx="2" ry="2" />
<text  x="774.32" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (2 samples, 0.04%)</title><rect x="56.0" y="405" width="0.5" height="15.0" fill="rgb(237,152,27)" rx="2" ry="2" />
<text  x="59.04" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="57.6" y="309" width="0.3" height="15.0" fill="rgb(224,1,33)" rx="2" ry="2" />
<text  x="60.64" y="319.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.16%)</title><rect x="384.5" y="277" width="1.8" height="15.0" fill="rgb(225,12,32)" rx="2" ry="2" />
<text  x="387.48" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%)</title><rect x="1023.0" y="309" width="0.5" height="15.0" fill="rgb(210,7,39)" rx="2" ry="2" />
<text  x="1026.03" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="79.6" y="325" width="0.3" height="15.0" fill="rgb(206,220,53)" rx="2" ry="2" />
<text  x="82.63" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="199.2" y="325" width="0.7" height="15.0" fill="rgb(212,171,24)" rx="2" ry="2" />
<text  x="202.18" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (2 samples, 0.04%)</title><rect x="283.5" y="277" width="0.4" height="15.0" fill="rgb(218,87,8)" rx="2" ry="2" />
<text  x="286.47" y="287.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="57.4" y="421" width="0.2" height="15.0" fill="rgb(212,36,32)" rx="2" ry="2" />
<text  x="60.41" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (6 samples, 0.12%)</title><rect x="509.1" y="373" width="1.3" height="15.0" fill="rgb(220,16,0)" rx="2" ry="2" />
<text  x="512.07" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;query::result_set&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;query::result_set&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;query::result_set&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="719.8" y="581" width="0.2" height="15.0" fill="rgb(212,144,41)" rx="2" ry="2" />
<text  x="722.79" y="591.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%)</title><rect x="1027.8" y="341" width="0.5" height="15.0" fill="rgb(252,77,15)" rx="2" ry="2" />
<text  x="1030.84" y="351.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%)</title><rect x="106.4" y="597" width="0.3" height="15.0" fill="rgb(246,142,38)" rx="2" ry="2" />
<text  x="109.42" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="101.8" y="517" width="0.5" height="15.0" fill="rgb(219,125,27)" rx="2" ry="2" />
<text  x="104.84" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="796.1" y="453" width="0.2" height="15.0" fill="rgb(214,158,29)" rx="2" ry="2" />
<text  x="799.06" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="49.6" y="373" width="0.3" height="15.0" fill="rgb(236,206,16)" rx="2" ry="2" />
<text  x="52.62" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="827.9" y="325" width="0.2" height="15.0" fill="rgb(207,105,42)" rx="2" ry="2" />
<text  x="830.89" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="82.6" y="533" width="0.2" height="15.0" fill="rgb(219,93,43)" rx="2" ry="2" />
<text  x="85.60" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (9 samples, 0.17%)</title><rect x="946.5" y="469" width="2.1" height="15.0" fill="rgb(211,199,3)" rx="2" ry="2" />
<text  x="949.53" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="690.0" y="565" width="0.5" height="15.0" fill="rgb(228,68,16)" rx="2" ry="2" />
<text  x="693.01" y="575.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1007.5" y="357" width="0.2" height="15.0" fill="rgb(220,213,47)" rx="2" ry="2" />
<text  x="1010.46" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (6 samples, 0.12%)</title><rect x="596.3" y="421" width="1.4" height="15.0" fill="rgb(206,216,44)" rx="2" ry="2" />
<text  x="599.34" y="431.5" ></text>
</g>
<g >
<title>freeze (9 samples, 0.17%)</title><rect x="1131.8" y="293" width="2.1" height="15.0" fill="rgb(231,95,47)" rx="2" ry="2" />
<text  x="1134.82" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (1 samples, 0.02%)</title><rect x="1155.0" y="565" width="0.2" height="15.0" fill="rgb(223,123,19)" rx="2" ry="2" />
<text  x="1157.96" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="574.6" y="501" width="0.4" height="15.0" fill="rgb(230,206,51)" rx="2" ry="2" />
<text  x="577.58" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="668.5" y="565" width="0.2" height="15.0" fill="rgb(237,197,23)" rx="2" ry="2" />
<text  x="671.48" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (37 samples, 0.72%)</title><rect x="264.2" y="229" width="8.5" height="15.0" fill="rgb(219,194,23)" rx="2" ry="2" />
<text  x="267.23" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="139.6" y="549" width="0.7" height="15.0" fill="rgb(215,204,52)" rx="2" ry="2" />
<text  x="142.64" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.7" y="277" width="0.2" height="15.0" fill="rgb(220,196,0)" rx="2" ry="2" />
<text  x="27.66" y="287.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="199.0" y="325" width="0.2" height="15.0" fill="rgb(221,110,4)" rx="2" ry="2" />
<text  x="201.96" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="54.0" y="373" width="0.2" height="15.0" fill="rgb(241,42,0)" rx="2" ry="2" />
<text  x="56.98" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="469.0" y="501" width="0.2" height="15.0" fill="rgb(239,6,14)" rx="2" ry="2" />
<text  x="471.99" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%)</title><rect x="110.5" y="517" width="0.3" height="15.0" fill="rgb(238,215,3)" rx="2" ry="2" />
<text  x="113.55" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="40.9" y="405" width="0.7" height="15.0" fill="rgb(252,83,8)" rx="2" ry="2" />
<text  x="43.92" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="733.5" y="549" width="0.3" height="15.0" fill="rgb(221,75,16)" rx="2" ry="2" />
<text  x="736.53" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="21.9" y="421" width="0.2" height="15.0" fill="rgb(236,17,13)" rx="2" ry="2" />
<text  x="24.91" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="681.8" y="485" width="0.2" height="15.0" fill="rgb(253,65,40)" rx="2" ry="2" />
<text  x="684.77" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="613.1" y="453" width="0.4" height="15.0" fill="rgb(223,83,22)" rx="2" ry="2" />
<text  x="616.06" y="463.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="82.8" y="245" width="0.3" height="15.0" fill="rgb(206,176,26)" rx="2" ry="2" />
<text  x="85.83" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (526 samples, 10.21%)</title><rect x="962.3" y="485" width="120.5" height="15.0" fill="rgb(210,130,13)" rx="2" ry="2" />
<text  x="965.34" y="495.5" >service::storag..</text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="717.5" y="453" width="0.2" height="15.0" fill="rgb(225,5,23)" rx="2" ry="2" />
<text  x="720.50" y="463.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="924.1" y="469" width="0.2" height="15.0" fill="rgb(232,126,15)" rx="2" ry="2" />
<text  x="927.09" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%)</title><rect x="18.0" y="597" width="0.2" height="15.0" fill="rgb(217,93,14)" rx="2" ry="2" />
<text  x="21.02" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%)</title><rect x="975.2" y="437" width="1.8" height="15.0" fill="rgb(244,132,43)" rx="2" ry="2" />
<text  x="978.16" y="447.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::_Bind&lt;bool  (1 samples, 0.02%)</title><rect x="1134.3" y="277" width="0.3" height="15.0" fill="rgb(249,195,28)" rx="2" ry="2" />
<text  x="1137.34" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.10%)</title><rect x="682.7" y="565" width="1.1" height="15.0" fill="rgb(242,106,34)" rx="2" ry="2" />
<text  x="685.68" y="575.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="349.4" y="389" width="0.7" height="15.0" fill="rgb(222,157,27)" rx="2" ry="2" />
<text  x="352.43" y="399.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="526.9" y="405" width="0.5" height="15.0" fill="rgb(248,31,54)" rx="2" ry="2" />
<text  x="529.94" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="110.3" y="341" width="0.2" height="15.0" fill="rgb(234,146,16)" rx="2" ry="2" />
<text  x="113.32" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (14 samples, 0.27%)</title><rect x="301.1" y="293" width="3.2" height="15.0" fill="rgb(245,79,6)" rx="2" ry="2" />
<text  x="304.11" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="325.4" y="437" width="0.4" height="15.0" fill="rgb(220,138,3)" rx="2" ry="2" />
<text  x="328.38" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="357.4" y="341" width="0.3" height="15.0" fill="rgb(224,108,11)" rx="2" ry="2" />
<text  x="360.45" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1132.3" y="197" width="0.2" height="15.0" fill="rgb(225,99,20)" rx="2" ry="2" />
<text  x="1135.28" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="47.6" y="245" width="0.2" height="15.0" fill="rgb(239,34,40)" rx="2" ry="2" />
<text  x="50.56" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="18.7" y="453" width="0.2" height="15.0" fill="rgb(227,57,41)" rx="2" ry="2" />
<text  x="21.70" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="1124.7" y="309" width="0.3" height="15.0" fill="rgb(234,25,20)" rx="2" ry="2" />
<text  x="1127.72" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="465.1" y="437" width="0.2" height="15.0" fill="rgb(246,219,24)" rx="2" ry="2" />
<text  x="468.10" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="746.8" y="341" width="0.2" height="15.0" fill="rgb(244,79,9)" rx="2" ry="2" />
<text  x="749.81" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="51.9" y="309" width="0.2" height="15.0" fill="rgb(212,122,22)" rx="2" ry="2" />
<text  x="54.91" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="22.8" y="469" width="0.3" height="15.0" fill="rgb(238,115,51)" rx="2" ry="2" />
<text  x="25.83" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="47.6" y="277" width="0.2" height="15.0" fill="rgb(220,95,16)" rx="2" ry="2" />
<text  x="50.56" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%)</title><rect x="640.3" y="517" width="0.2" height="15.0" fill="rgb(236,134,16)" rx="2" ry="2" />
<text  x="643.31" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="201.9" y="357" width="0.3" height="15.0" fill="rgb(248,114,24)" rx="2" ry="2" />
<text  x="204.93" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="718.6" y="485" width="0.3" height="15.0" fill="rgb(240,124,20)" rx="2" ry="2" />
<text  x="721.64" y="495.5" ></text>
</g>
<g >
<title>database::apply_in_memory (1 samples, 0.02%)</title><rect x="1119.5" y="405" width="0.2" height="15.0" fill="rgb(234,54,15)" rx="2" ry="2" />
<text  x="1122.46" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1022.1" y="277" width="0.2" height="15.0" fill="rgb(228,160,41)" rx="2" ry="2" />
<text  x="1025.12" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="848.0" y="405" width="0.3" height="15.0" fill="rgb(241,9,39)" rx="2" ry="2" />
<text  x="851.05" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="443.3" y="277" width="0.5" height="15.0" fill="rgb(241,170,9)" rx="2" ry="2" />
<text  x="446.34" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1097.9" y="501" width="0.3" height="15.0" fill="rgb(227,219,43)" rx="2" ry="2" />
<text  x="1100.93" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1123.1" y="277" width="0.3" height="15.0" fill="rgb(225,59,51)" rx="2" ry="2" />
<text  x="1126.12" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (4 samples, 0.08%)</title><rect x="1020.1" y="245" width="0.9" height="15.0" fill="rgb(241,110,53)" rx="2" ry="2" />
<text  x="1023.05" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="82.8" y="405" width="0.3" height="15.0" fill="rgb(209,190,22)" rx="2" ry="2" />
<text  x="85.83" y="415.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="381.3" y="277" width="0.4" height="15.0" fill="rgb(206,22,42)" rx="2" ry="2" />
<text  x="384.27" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="25.8" y="325" width="0.2" height="15.0" fill="rgb(240,40,20)" rx="2" ry="2" />
<text  x="28.80" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.0" y="277" width="0.3" height="15.0" fill="rgb(236,56,19)" rx="2" ry="2" />
<text  x="48.04" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="667.8" y="565" width="0.2" height="15.0" fill="rgb(227,61,20)" rx="2" ry="2" />
<text  x="670.80" y="575.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (34 samples, 0.66%)</title><rect x="1119.5" y="421" width="7.7" height="15.0" fill="rgb(211,140,26)" rx="2" ry="2" />
<text  x="1122.46" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.12%)</title><rect x="823.1" y="213" width="1.4" height="15.0" fill="rgb(249,127,32)" rx="2" ry="2" />
<text  x="826.08" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="749.1" y="597" width="0.2" height="15.0" fill="rgb(241,30,28)" rx="2" ry="2" />
<text  x="752.10" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (6 samples, 0.12%)</title><rect x="1163.4" y="533" width="1.4" height="15.0" fill="rgb(213,62,26)" rx="2" ry="2" />
<text  x="1166.43" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.37%)</title><rect x="771.1" y="453" width="4.3" height="15.0" fill="rgb(243,40,53)" rx="2" ry="2" />
<text  x="774.09" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="71.2" y="501" width="0.2" height="15.0" fill="rgb(235,174,24)" rx="2" ry="2" />
<text  x="74.15" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_view_statement*, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.7" y="453" width="0.3" height="15.0" fill="rgb(230,169,51)" rx="2" ry="2" />
<text  x="67.74" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="260.8" y="213" width="0.7" height="15.0" fill="rgb(208,13,43)" rx="2" ry="2" />
<text  x="263.80" y="223.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="18.2" y="325" width="0.3" height="15.0" fill="rgb(236,140,33)" rx="2" ry="2" />
<text  x="21.25" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1120.1" y="293" width="1.0" height="15.0" fill="rgb(212,128,52)" rx="2" ry="2" />
<text  x="1123.14" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="340.5" y="405" width="0.2" height="15.0" fill="rgb(237,53,14)" rx="2" ry="2" />
<text  x="343.50" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (6 samples, 0.12%)</title><rect x="823.1" y="245" width="1.4" height="15.0" fill="rgb(249,172,39)" rx="2" ry="2" />
<text  x="826.08" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="47.6" y="373" width="0.2" height="15.0" fill="rgb(218,43,21)" rx="2" ry="2" />
<text  x="50.56" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="78.7" y="405" width="1.2" height="15.0" fill="rgb(237,44,33)" rx="2" ry="2" />
<text  x="81.71" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="885.2" y="277" width="0.2" height="15.0" fill="rgb(246,152,5)" rx="2" ry="2" />
<text  x="888.15" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="469" width="8.0" height="15.0" fill="rgb(227,214,9)" rx="2" ry="2" />
<text  x="1122.46" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (5 samples, 0.10%)</title><rect x="1135.3" y="437" width="1.1" height="15.0" fill="rgb(239,50,11)" rx="2" ry="2" />
<text  x="1138.26" y="447.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="848.3" y="485" width="0.2" height="15.0" fill="rgb(252,143,1)" rx="2" ry="2" />
<text  x="851.28" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%)</title><rect x="20.1" y="581" width="0.2" height="15.0" fill="rgb(216,121,47)" rx="2" ry="2" />
<text  x="23.08" y="591.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (2 samples, 0.04%)</title><rect x="83.1" y="549" width="0.4" height="15.0" fill="rgb(235,42,11)" rx="2" ry="2" />
<text  x="86.06" y="559.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_output_stream (1 samples, 0.02%)</title><rect x="717.5" y="565" width="0.2" height="15.0" fill="rgb(218,27,5)" rx="2" ry="2" />
<text  x="720.50" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="569.8" y="421" width="0.4" height="15.0" fill="rgb(242,224,28)" rx="2" ry="2" />
<text  x="572.77" y="431.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%)</title><rect x="1167.1" y="581" width="0.2" height="15.0" fill="rgb(249,18,37)" rx="2" ry="2" />
<text  x="1170.10" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (8 samples, 0.16%)</title><rect x="256.4" y="213" width="1.9" height="15.0" fill="rgb(222,136,25)" rx="2" ry="2" />
<text  x="259.44" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="812.1" y="325" width="0.2" height="15.0" fill="rgb(226,67,40)" rx="2" ry="2" />
<text  x="815.09" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (66 samples, 1.28%)</title><rect x="189.8" y="389" width="15.1" height="15.0" fill="rgb(249,163,4)" rx="2" ry="2" />
<text  x="192.79" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="884.9" y="277" width="0.3" height="15.0" fill="rgb(240,129,46)" rx="2" ry="2" />
<text  x="887.92" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.17%)</title><rect x="36.3" y="357" width="2.1" height="15.0" fill="rgb(243,42,34)" rx="2" ry="2" />
<text  x="39.34" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="845.5" y="389" width="0.7" height="15.0" fill="rgb(226,56,13)" rx="2" ry="2" />
<text  x="848.53" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="647.9" y="501" width="0.2" height="15.0" fill="rgb(243,78,38)" rx="2" ry="2" />
<text  x="650.87" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (53 samples, 1.03%)</title><rect x="191.6" y="373" width="12.2" height="15.0" fill="rgb(234,88,0)" rx="2" ry="2" />
<text  x="194.63" y="383.5" ></text>
</g>
<g >
<title>make_combined_reader (98 samples, 1.90%)</title><rect x="481.1" y="437" width="22.5" height="15.0" fill="rgb(239,37,42)" rx="2" ry="2" />
<text  x="484.13" y="447.5" >m..</text>
</g>
<g >
<title>ser::writer_of_commitlog_entry&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::skip_mapping (1 samples, 0.02%)</title><rect x="1126.8" y="325" width="0.2" height="15.0" fill="rgb(241,162,13)" rx="2" ry="2" />
<text  x="1129.79" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="942.4" y="501" width="0.2" height="15.0" fill="rgb(221,20,20)" rx="2" ry="2" />
<text  x="945.41" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.10%)</title><rect x="1128.8" y="309" width="1.2" height="15.0" fill="rgb(241,16,40)" rx="2" ry="2" />
<text  x="1131.85" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="704.7" y="533" width="1.1" height="15.0" fill="rgb(212,28,28)" rx="2" ry="2" />
<text  x="707.67" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (5 samples, 0.10%)</title><rect x="78.7" y="421" width="1.2" height="15.0" fill="rgb(227,203,42)" rx="2" ry="2" />
<text  x="81.71" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (282 samples, 5.47%)</title><rect x="17.1" y="677" width="64.6" height="15.0" fill="rgb(218,22,49)" rx="2" ry="2" />
<text  x="20.10" y="687.5" >seastar..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.10%)</title><rect x="48.2" y="373" width="1.2" height="15.0" fill="rgb(252,82,31)" rx="2" ry="2" />
<text  x="51.25" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (452 samples, 8.77%)</title><rect x="470.1" y="517" width="103.6" height="15.0" fill="rgb(251,140,2)" rx="2" ry="2" />
<text  x="473.14" y="527.5" >query::queri..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="313.0" y="373" width="0.2" height="15.0" fill="rgb(244,45,42)" rx="2" ry="2" />
<text  x="316.02" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="880.1" y="549" width="0.2" height="15.0" fill="rgb(215,151,33)" rx="2" ry="2" />
<text  x="883.11" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="872.3" y="501" width="0.3" height="15.0" fill="rgb(209,52,20)" rx="2" ry="2" />
<text  x="875.33" y="511.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="341.2" y="389" width="1.1" height="15.0" fill="rgb(220,66,2)" rx="2" ry="2" />
<text  x="344.19" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="622.7" y="469" width="0.2" height="15.0" fill="rgb(251,30,24)" rx="2" ry="2" />
<text  x="625.67" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="480.9" y="437" width="0.2" height="15.0" fill="rgb(221,134,4)" rx="2" ry="2" />
<text  x="483.90" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (33 samples, 0.64%)</title><rect x="903.9" y="453" width="7.6" height="15.0" fill="rgb(229,126,27)" rx="2" ry="2" />
<text  x="906.93" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.5" y="357" width="0.7" height="15.0" fill="rgb(215,59,42)" rx="2" ry="2" />
<text  x="48.50" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="985.2" y="421" width="0.3" height="15.0" fill="rgb(220,116,28)" rx="2" ry="2" />
<text  x="988.24" y="431.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="906.0" y="405" width="0.5" height="15.0" fill="rgb(213,212,46)" rx="2" ry="2" />
<text  x="908.99" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1127.0" y="357" width="0.2" height="15.0" fill="rgb(225,81,43)" rx="2" ry="2" />
<text  x="1130.01" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="968.3" y="421" width="0.2" height="15.0" fill="rgb(240,125,48)" rx="2" ry="2" />
<text  x="971.29" y="431.5" ></text>
</g>
<g >
<title>sstables::serialized_size&lt;sstables::stats_metadata&gt; (1 samples, 0.02%)</title><rect x="10.2" y="469" width="0.3" height="15.0" fill="rgb(236,111,47)" rx="2" ry="2" />
<text  x="13.23" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="944.9" y="501" width="3.7" height="15.0" fill="rgb(233,38,41)" rx="2" ry="2" />
<text  x="947.93" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="47.8" y="421" width="0.2" height="15.0" fill="rgb(248,115,20)" rx="2" ry="2" />
<text  x="50.79" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%)</title><rect x="758.3" y="469" width="2.5" height="15.0" fill="rgb(231,111,15)" rx="2" ry="2" />
<text  x="761.26" y="479.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (20 samples, 0.39%)</title><rect x="335.9" y="405" width="4.6" height="15.0" fill="rgb(224,172,19)" rx="2" ry="2" />
<text  x="338.92" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (7 samples, 0.14%)</title><rect x="655.9" y="533" width="1.6" height="15.0" fill="rgb(231,97,4)" rx="2" ry="2" />
<text  x="658.89" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="261" width="0.3" height="15.0" fill="rgb(254,8,7)" rx="2" ry="2" />
<text  x="85.83" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.14%)</title><rect x="759.2" y="437" width="1.6" height="15.0" fill="rgb(206,182,39)" rx="2" ry="2" />
<text  x="762.18" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="461.7" y="373" width="0.2" height="15.0" fill="rgb(252,14,27)" rx="2" ry="2" />
<text  x="464.66" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, query::querier&lt; (1 samples, 0.02%)</title><rect x="719.1" y="565" width="0.2" height="15.0" fill="rgb(238,158,19)" rx="2" ry="2" />
<text  x="722.10" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="216.6" y="325" width="0.4" height="15.0" fill="rgb(219,95,10)" rx="2" ry="2" />
<text  x="219.59" y="335.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,719 samples, 91.60%)</title><rect x="87.2" y="661" width="1080.8" height="15.0" fill="rgb(237,31,6)" rx="2" ry="2" />
<text  x="90.19" y="671.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (15 samples, 0.29%)</title><rect x="617.4" y="453" width="3.4" height="15.0" fill="rgb(231,184,20)" rx="2" ry="2" />
<text  x="620.41" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="44.6" y="389" width="0.4" height="15.0" fill="rgb(217,120,41)" rx="2" ry="2" />
<text  x="47.58" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="794.7" y="421" width="0.2" height="15.0" fill="rgb(246,182,41)" rx="2" ry="2" />
<text  x="797.68" y="431.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (11 samples, 0.21%)</title><rect x="78.0" y="565" width="2.5" height="15.0" fill="rgb(234,14,15)" rx="2" ry="2" />
<text  x="81.02" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%)</title><rect x="679.5" y="565" width="0.2" height="15.0" fill="rgb(220,52,44)" rx="2" ry="2" />
<text  x="682.48" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="109.9" y="261" width="0.4" height="15.0" fill="rgb(221,75,33)" rx="2" ry="2" />
<text  x="112.86" y="271.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="560.1" y="405" width="0.3" height="15.0" fill="rgb(207,120,45)" rx="2" ry="2" />
<text  x="563.15" y="415.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (5 samples, 0.10%)</title><rect x="1002.2" y="373" width="1.1" height="15.0" fill="rgb(226,163,30)" rx="2" ry="2" />
<text  x="1005.19" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%)</title><rect x="383.6" y="261" width="0.4" height="15.0" fill="rgb(205,13,23)" rx="2" ry="2" />
<text  x="386.56" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="469" width="0.7" height="15.0" fill="rgb(216,73,35)" rx="2" ry="2" />
<text  x="86.52" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="464.4" y="341" width="0.2" height="15.0" fill="rgb(222,191,29)" rx="2" ry="2" />
<text  x="467.41" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (1 samples, 0.02%)</title><rect x="634.1" y="485" width="0.3" height="15.0" fill="rgb(244,145,0)" rx="2" ry="2" />
<text  x="637.13" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="57.6" y="261" width="0.3" height="15.0" fill="rgb(214,141,26)" rx="2" ry="2" />
<text  x="60.64" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1109.1" y="485" width="0.5" height="15.0" fill="rgb(242,141,27)" rx="2" ry="2" />
<text  x="1112.15" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (6 samples, 0.12%)</title><rect x="1166.6" y="613" width="1.4" height="15.0" fill="rgb(235,131,16)" rx="2" ry="2" />
<text  x="1169.64" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.1" y="341" width="0.5" height="15.0" fill="rgb(251,121,25)" rx="2" ry="2" />
<text  x="50.10" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="622.7" y="485" width="0.2" height="15.0" fill="rgb(219,22,34)" rx="2" ry="2" />
<text  x="625.67" y="495.5" ></text>
</g>
<g >
<title>query::result_set_row::get_ptr&lt;int&gt; (1 samples, 0.02%)</title><rect x="109.4" y="469" width="0.2" height="15.0" fill="rgb(253,163,21)" rx="2" ry="2" />
<text  x="112.40" y="479.5" ></text>
</g>
<g >
<title>sstables::write&lt;unsigned char, bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="84.7" y="421" width="0.2" height="15.0" fill="rgb(220,110,8)" rx="2" ry="2" />
<text  x="87.67" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="642.8" y="517" width="0.3" height="15.0" fill="rgb(232,189,34)" rx="2" ry="2" />
<text  x="645.83" y="527.5" ></text>
</g>
<g >
<title>compact (2 samples, 0.04%)</title><rect x="108.9" y="517" width="0.5" height="15.0" fill="rgb(214,24,47)" rx="2" ry="2" />
<text  x="111.94" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%)</title><rect x="1039.5" y="421" width="0.3" height="15.0" fill="rgb(250,151,25)" rx="2" ry="2" />
<text  x="1042.52" y="431.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.10%)</title><rect x="10.2" y="709" width="1.2" height="15.0" fill="rgb(206,74,3)" rx="2" ry="2" />
<text  x="13.23" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="556.5" y="421" width="0.2" height="15.0" fill="rgb(242,84,11)" rx="2" ry="2" />
<text  x="559.48" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (71 samples, 1.38%)</title><rect x="23.3" y="453" width="16.2" height="15.0" fill="rgb(225,188,35)" rx="2" ry="2" />
<text  x="26.28" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="885.4" y="357" width="0.2" height="15.0" fill="rgb(206,193,31)" rx="2" ry="2" />
<text  x="888.38" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="40.0" y="421" width="0.5" height="15.0" fill="rgb(223,41,19)" rx="2" ry="2" />
<text  x="43.00" y="431.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (3 samples, 0.06%)</title><rect x="21.5" y="453" width="0.6" height="15.0" fill="rgb(213,71,45)" rx="2" ry="2" />
<text  x="24.45" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="52.6" y="373" width="0.5" height="15.0" fill="rgb(232,12,5)" rx="2" ry="2" />
<text  x="55.60" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="769.5" y="389" width="0.2" height="15.0" fill="rgb(234,207,12)" rx="2" ry="2" />
<text  x="772.49" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%)</title><rect x="778.9" y="469" width="0.2" height="15.0" fill="rgb(223,20,21)" rx="2" ry="2" />
<text  x="781.88" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (10 samples, 0.19%)</title><rect x="627.9" y="501" width="2.3" height="15.0" fill="rgb(213,190,17)" rx="2" ry="2" />
<text  x="630.94" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="665.0" y="485" width="0.3" height="15.0" fill="rgb(208,67,18)" rx="2" ry="2" />
<text  x="668.05" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="996.5" y="341" width="1.1" height="15.0" fill="rgb(219,93,12)" rx="2" ry="2" />
<text  x="999.46" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="54.7" y="325" width="0.4" height="15.0" fill="rgb(237,5,25)" rx="2" ry="2" />
<text  x="57.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;column_definition const* const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="74.4" y="437" width="0.2" height="15.0" fill="rgb(207,169,47)" rx="2" ry="2" />
<text  x="77.36" y="447.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="47.3" y="245" width="0.3" height="15.0" fill="rgb(222,187,54)" rx="2" ry="2" />
<text  x="50.33" y="255.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="945.8" y="469" width="0.3" height="15.0" fill="rgb(229,117,50)" rx="2" ry="2" />
<text  x="948.85" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="681.5" y="501" width="0.5" height="15.0" fill="rgb(225,188,38)" rx="2" ry="2" />
<text  x="684.54" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="748.0" y="597" width="0.2" height="15.0" fill="rgb(223,140,48)" rx="2" ry="2" />
<text  x="750.96" y="607.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="88.6" y="613" width="0.2" height="15.0" fill="rgb(230,226,48)" rx="2" ry="2" />
<text  x="91.56" y="623.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="636.6" y="533" width="0.5" height="15.0" fill="rgb(209,187,10)" rx="2" ry="2" />
<text  x="639.65" y="543.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(215,1,4)" rx="2" ry="2" />
<text  x="13.69" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="960.3" y="501" width="0.4" height="15.0" fill="rgb(242,77,17)" rx="2" ry="2" />
<text  x="963.28" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4 samples, 0.08%)</title><rect x="717.7" y="517" width="0.9" height="15.0" fill="rgb(209,6,20)" rx="2" ry="2" />
<text  x="720.73" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="886.8" y="341" width="0.2" height="15.0" fill="rgb(219,149,49)" rx="2" ry="2" />
<text  x="889.75" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="819.6" y="245" width="1.4" height="15.0" fill="rgb(254,45,33)" rx="2" ry="2" />
<text  x="822.65" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (1 samples, 0.02%)</title><rect x="881.5" y="469" width="0.2" height="15.0" fill="rgb(232,107,10)" rx="2" ry="2" />
<text  x="884.49" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="847.6" y="405" width="0.4" height="15.0" fill="rgb(215,17,54)" rx="2" ry="2" />
<text  x="850.59" y="415.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.10%)</title><rect x="427.1" y="277" width="1.1" height="15.0" fill="rgb(245,152,45)" rx="2" ry="2" />
<text  x="430.08" y="287.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="44.6" y="245" width="0.4" height="15.0" fill="rgb(216,31,44)" rx="2" ry="2" />
<text  x="47.58" y="255.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="224.8" y="277" width="0.3" height="15.0" fill="rgb(234,210,48)" rx="2" ry="2" />
<text  x="227.84" y="287.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::_Bind&lt;bool  (1 samples, 0.02%)</title><rect x="1134.3" y="261" width="0.3" height="15.0" fill="rgb(236,45,7)" rx="2" ry="2" />
<text  x="1137.34" y="271.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="18.7" y="501" width="0.2" height="15.0" fill="rgb(235,23,6)" rx="2" ry="2" />
<text  x="21.70" y="511.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1133.0" y="213" width="0.2" height="15.0" fill="rgb(232,155,48)" rx="2" ry="2" />
<text  x="1135.97" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (14 samples, 0.27%)</title><rect x="268.1" y="213" width="3.2" height="15.0" fill="rgb(206,30,22)" rx="2" ry="2" />
<text  x="271.12" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="663.9" y="565" width="0.2" height="15.0" fill="rgb(226,148,46)" rx="2" ry="2" />
<text  x="666.90" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="871.2" y="437" width="0.4" height="15.0" fill="rgb(227,122,25)" rx="2" ry="2" />
<text  x="874.18" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="956.6" y="469" width="0.2" height="15.0" fill="rgb(213,171,9)" rx="2" ry="2" />
<text  x="959.61" y="479.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (4 samples, 0.08%)</title><rect x="635.3" y="485" width="0.9" height="15.0" fill="rgb(225,15,28)" rx="2" ry="2" />
<text  x="638.27" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%)</title><rect x="853.1" y="485" width="2.0" height="15.0" fill="rgb(240,217,17)" rx="2" ry="2" />
<text  x="856.09" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="245" width="0.5" height="15.0" fill="rgb(217,217,43)" rx="2" ry="2" />
<text  x="56.52" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (3 samples, 0.06%)</title><rect x="582.6" y="389" width="0.7" height="15.0" fill="rgb(220,86,2)" rx="2" ry="2" />
<text  x="585.59" y="399.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="272.9" y="261" width="0.7" height="15.0" fill="rgb(239,172,42)" rx="2" ry="2" />
<text  x="275.93" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.16%)</title><rect x="298.1" y="277" width="1.9" height="15.0" fill="rgb(235,167,38)" rx="2" ry="2" />
<text  x="301.13" y="287.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::tomb (1 samples, 0.02%)</title><rect x="1124.0" y="325" width="0.3" height="15.0" fill="rgb(211,219,47)" rx="2" ry="2" />
<text  x="1127.04" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (3 samples, 0.06%)</title><rect x="745.9" y="581" width="0.7" height="15.0" fill="rgb(254,57,44)" rx="2" ry="2" />
<text  x="748.90" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (15 samples, 0.29%)</title><rect x="1035.2" y="357" width="3.4" height="15.0" fill="rgb(228,205,54)" rx="2" ry="2" />
<text  x="1038.17" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="539.8" y="293" width="0.2" height="15.0" fill="rgb(209,213,15)" rx="2" ry="2" />
<text  x="542.76" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="665.5" y="581" width="0.2" height="15.0" fill="rgb(205,71,24)" rx="2" ry="2" />
<text  x="668.50" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="1158.6" y="581" width="1.2" height="15.0" fill="rgb(233,228,14)" rx="2" ry="2" />
<text  x="1161.62" y="591.5" ></text>
</g>
<g >
<title>__start_context (282 samples, 5.47%)</title><rect x="17.1" y="709" width="64.6" height="15.0" fill="rgb(223,158,17)" rx="2" ry="2" />
<text  x="20.10" y="719.5" >__start..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (28 samples, 0.54%)</title><rect x="99.6" y="581" width="6.4" height="15.0" fill="rgb(252,209,7)" rx="2" ry="2" />
<text  x="102.55" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (8 samples, 0.16%)</title><rect x="767.9" y="437" width="1.8" height="15.0" fill="rgb(213,224,5)" rx="2" ry="2" />
<text  x="770.88" y="447.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1118.3" y="533" width="0.2" height="15.0" fill="rgb(208,166,27)" rx="2" ry="2" />
<text  x="1121.31" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (2 samples, 0.04%)</title><rect x="1117.9" y="533" width="0.4" height="15.0" fill="rgb(207,167,44)" rx="2" ry="2" />
<text  x="1120.85" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="109.6" y="565" width="0.7" height="15.0" fill="rgb(217,126,33)" rx="2" ry="2" />
<text  x="112.63" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (6 samples, 0.12%)</title><rect x="742.0" y="533" width="1.4" height="15.0" fill="rgb(253,196,31)" rx="2" ry="2" />
<text  x="745.00" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="375.1" y="293" width="0.2" height="15.0" fill="rgb(216,206,6)" rx="2" ry="2" />
<text  x="378.09" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="53.3" y="373" width="0.7" height="15.0" fill="rgb(234,93,51)" rx="2" ry="2" />
<text  x="56.29" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.9" y="661" width="0.2" height="15.0" fill="rgb(236,187,16)" rx="2" ry="2" />
<text  x="84.92" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="410.6" y="245" width="0.9" height="15.0" fill="rgb(227,205,17)" rx="2" ry="2" />
<text  x="413.59" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="58.1" y="421" width="0.2" height="15.0" fill="rgb(252,110,39)" rx="2" ry="2" />
<text  x="61.10" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="61.3" y="389" width="0.2" height="15.0" fill="rgb(244,94,36)" rx="2" ry="2" />
<text  x="64.30" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1083.5" y="469" width="0.2" height="15.0" fill="rgb(242,169,38)" rx="2" ry="2" />
<text  x="1086.50" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="880.1" y="421" width="0.2" height="15.0" fill="rgb(206,214,47)" rx="2" ry="2" />
<text  x="883.11" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;frozen_mutation&gt;::dispose (1 samples, 0.02%)</title><rect x="746.1" y="533" width="0.3" height="15.0" fill="rgb(212,182,23)" rx="2" ry="2" />
<text  x="749.13" y="543.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="521.2" y="293" width="0.2" height="15.0" fill="rgb(210,20,48)" rx="2" ry="2" />
<text  x="524.21" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="283.2" y="277" width="0.3" height="15.0" fill="rgb(247,174,25)" rx="2" ry="2" />
<text  x="286.24" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (19 samples, 0.37%)</title><rect x="933.2" y="485" width="4.4" height="15.0" fill="rgb(208,93,0)" rx="2" ry="2" />
<text  x="936.25" y="495.5" ></text>
</g>
<g >
<title>row::compact_and_expire (2 samples, 0.04%)</title><rect x="718.2" y="389" width="0.4" height="15.0" fill="rgb(231,207,4)" rx="2" ry="2" />
<text  x="721.18" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="577.8" y="437" width="0.2" height="15.0" fill="rgb(228,121,1)" rx="2" ry="2" />
<text  x="580.78" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="717.7" y="533" width="0.9" height="15.0" fill="rgb(231,140,12)" rx="2" ry="2" />
<text  x="720.73" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.6" y="565" width="0.2" height="15.0" fill="rgb(225,73,28)" rx="2" ry="2" />
<text  x="88.58" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="885.6" y="357" width="0.2" height="15.0" fill="rgb(250,44,42)" rx="2" ry="2" />
<text  x="888.61" y="367.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (11 samples, 0.21%)</title><rect x="550.3" y="421" width="2.5" height="15.0" fill="rgb(218,96,8)" rx="2" ry="2" />
<text  x="553.30" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (31 samples, 0.60%)</title><rect x="486.4" y="389" width="7.1" height="15.0" fill="rgb(223,57,39)" rx="2" ry="2" />
<text  x="489.40" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (2 samples, 0.04%)</title><rect x="72.1" y="453" width="0.4" height="15.0" fill="rgb(210,188,21)" rx="2" ry="2" />
<text  x="75.07" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="297.7" y="293" width="0.2" height="15.0" fill="rgb(235,147,31)" rx="2" ry="2" />
<text  x="300.67" y="303.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="288.7" y="309" width="0.3" height="15.0" fill="rgb(251,208,43)" rx="2" ry="2" />
<text  x="291.74" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%)</title><rect x="1002.9" y="357" width="0.4" height="15.0" fill="rgb(219,116,16)" rx="2" ry="2" />
<text  x="1005.88" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="361.3" y="293" width="0.3" height="15.0" fill="rgb(253,200,27)" rx="2" ry="2" />
<text  x="364.34" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (10 samples, 0.19%)</title><rect x="83.1" y="677" width="2.3" height="15.0" fill="rgb(243,38,12)" rx="2" ry="2" />
<text  x="86.06" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="54.0" y="341" width="0.2" height="15.0" fill="rgb(244,68,25)" rx="2" ry="2" />
<text  x="56.98" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="838.9" y="389" width="0.4" height="15.0" fill="rgb(212,17,31)" rx="2" ry="2" />
<text  x="841.89" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%)</title><rect x="656.8" y="501" width="0.7" height="15.0" fill="rgb(242,193,15)" rx="2" ry="2" />
<text  x="659.80" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%)</title><rect x="235.6" y="213" width="0.5" height="15.0" fill="rgb(220,27,37)" rx="2" ry="2" />
<text  x="238.60" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="1082.8" y="485" width="0.9" height="15.0" fill="rgb(221,16,31)" rx="2" ry="2" />
<text  x="1085.81" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="752.3" y="565" width="0.2" height="15.0" fill="rgb(213,148,43)" rx="2" ry="2" />
<text  x="755.31" y="575.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="1042.7" y="437" width="1.4" height="15.0" fill="rgb(246,127,27)" rx="2" ry="2" />
<text  x="1045.73" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="847.6" y="389" width="0.4" height="15.0" fill="rgb(221,138,1)" rx="2" ry="2" />
<text  x="850.59" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="622.2" y="469" width="0.2" height="15.0" fill="rgb(246,205,23)" rx="2" ry="2" />
<text  x="625.22" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (2 samples, 0.04%)</title><rect x="73.0" y="421" width="0.4" height="15.0" fill="rgb(254,170,49)" rx="2" ry="2" />
<text  x="75.99" y="431.5" ></text>
</g>
<g >
<title>rows_entry::memory_usage (1 samples, 0.02%)</title><rect x="17.8" y="629" width="0.2" height="15.0" fill="rgb(214,204,15)" rx="2" ry="2" />
<text  x="20.79" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="185.0" y="405" width="0.7" height="15.0" fill="rgb(206,41,54)" rx="2" ry="2" />
<text  x="187.98" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.1" y="213" width="0.2" height="15.0" fill="rgb(212,225,34)" rx="2" ry="2" />
<text  x="58.12" y="223.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (3 samples, 0.06%)</title><rect x="680.9" y="533" width="0.6" height="15.0" fill="rgb(227,1,46)" rx="2" ry="2" />
<text  x="683.85" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.10%)</title><rect x="463.7" y="373" width="1.2" height="15.0" fill="rgb(213,226,51)" rx="2" ry="2" />
<text  x="466.72" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="898.9" y="517" width="0.2" height="15.0" fill="rgb(243,79,24)" rx="2" ry="2" />
<text  x="901.89" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="130.9" y="485" width="0.5" height="15.0" fill="rgb(231,118,17)" rx="2" ry="2" />
<text  x="133.93" y="495.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="189.3" y="357" width="0.3" height="15.0" fill="rgb(208,112,9)" rx="2" ry="2" />
<text  x="192.34" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="707.6" y="581" width="0.7" height="15.0" fill="rgb(238,54,15)" rx="2" ry="2" />
<text  x="710.65" y="591.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1027.4" y="277" width="0.2" height="15.0" fill="rgb(218,114,11)" rx="2" ry="2" />
<text  x="1030.38" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::maybe_advance_to (1 samples, 0.02%)</title><rect x="17.6" y="645" width="0.2" height="15.0" fill="rgb(221,121,51)" rx="2" ry="2" />
<text  x="20.56" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="746.8" y="101" width="0.2" height="15.0" fill="rgb(245,23,42)" rx="2" ry="2" />
<text  x="749.81" y="111.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="469" width="0.3" height="15.0" fill="rgb(231,195,6)" rx="2" ry="2" />
<text  x="1169.64" y="479.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_data_sink (1 samples, 0.02%)</title><rect x="717.5" y="549" width="0.2" height="15.0" fill="rgb(237,86,16)" rx="2" ry="2" />
<text  x="720.50" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (10 samples, 0.19%)</title><rect x="1128.4" y="357" width="2.3" height="15.0" fill="rgb(217,204,50)" rx="2" ry="2" />
<text  x="1131.39" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (5 samples, 0.10%)</title><rect x="738.1" y="517" width="1.2" height="15.0" fill="rgb(235,140,2)" rx="2" ry="2" />
<text  x="741.11" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="966.5" y="453" width="2.0" height="15.0" fill="rgb(235,135,19)" rx="2" ry="2" />
<text  x="969.46" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="998.3" y="405" width="0.2" height="15.0" fill="rgb(221,42,6)" rx="2" ry="2" />
<text  x="1001.30" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="18.5" y="581" width="0.4" height="15.0" fill="rgb(217,100,3)" rx="2" ry="2" />
<text  x="21.47" y="591.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="152.9" y="533" width="0.2" height="15.0" fill="rgb(209,29,35)" rx="2" ry="2" />
<text  x="155.92" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%)</title><rect x="320.3" y="389" width="0.3" height="15.0" fill="rgb(239,130,11)" rx="2" ry="2" />
<text  x="323.35" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mX (1 samples, 0.02%)</title><rect x="35.7" y="341" width="0.2" height="15.0" fill="rgb(220,36,11)" rx="2" ry="2" />
<text  x="38.65" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (69 samples, 1.34%)</title><rect x="810.9" y="341" width="15.8" height="15.0" fill="rgb(240,93,14)" rx="2" ry="2" />
<text  x="813.94" y="351.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="85.6" y="629" width="0.2" height="15.0" fill="rgb(226,131,9)" rx="2" ry="2" />
<text  x="88.58" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%)</title><rect x="501.1" y="389" width="0.2" height="15.0" fill="rgb(221,95,13)" rx="2" ry="2" />
<text  x="504.06" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="18.0" y="645" width="0.2" height="15.0" fill="rgb(220,157,3)" rx="2" ry="2" />
<text  x="21.02" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="215.7" y="293" width="0.4" height="15.0" fill="rgb(248,56,16)" rx="2" ry="2" />
<text  x="218.68" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="42.1" y="405" width="0.4" height="15.0" fill="rgb(205,112,54)" rx="2" ry="2" />
<text  x="45.07" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.4" y="549" width="0.2" height="15.0" fill="rgb(206,185,16)" rx="2" ry="2" />
<text  x="142.41" y="559.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (44 samples, 0.85%)</title><rect x="1169.8" y="725" width="10.1" height="15.0" fill="rgb(230,7,14)" rx="2" ry="2" />
<text  x="1172.84" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (66 samples, 1.28%)</title><rect x="428.2" y="277" width="15.1" height="15.0" fill="rgb(227,138,1)" rx="2" ry="2" />
<text  x="431.22" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.1" y="373" width="0.5" height="15.0" fill="rgb(247,105,8)" rx="2" ry="2" />
<text  x="50.10" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (2 samples, 0.04%)</title><rect x="984.8" y="437" width="0.4" height="15.0" fill="rgb(226,204,32)" rx="2" ry="2" />
<text  x="987.78" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (18 samples, 0.35%)</title><rect x="605.0" y="389" width="4.2" height="15.0" fill="rgb(222,208,29)" rx="2" ry="2" />
<text  x="608.04" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1121.5" y="293" width="0.2" height="15.0" fill="rgb(244,162,15)" rx="2" ry="2" />
<text  x="1124.52" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="658.2" y="469" width="0.2" height="15.0" fill="rgb(218,203,45)" rx="2" ry="2" />
<text  x="661.18" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="103.7" y="549" width="0.4" height="15.0" fill="rgb(248,169,27)" rx="2" ry="2" />
<text  x="106.68" y="559.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="82.6" y="693" width="0.5" height="15.0" fill="rgb(237,133,18)" rx="2" ry="2" />
<text  x="85.60" y="703.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="135.3" y="549" width="0.2" height="15.0" fill="rgb(242,186,4)" rx="2" ry="2" />
<text  x="138.28" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.3" y="421" width="0.2" height="15.0" fill="rgb(232,132,35)" rx="2" ry="2" />
<text  x="67.28" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="817.6" y="261" width="0.4" height="15.0" fill="rgb(231,3,36)" rx="2" ry="2" />
<text  x="820.59" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (12 samples, 0.23%)</title><rect x="709.9" y="565" width="2.8" height="15.0" fill="rgb(222,9,14)" rx="2" ry="2" />
<text  x="712.94" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%)</title><rect x="124.1" y="517" width="0.4" height="15.0" fill="rgb(215,180,9)" rx="2" ry="2" />
<text  x="127.06" y="527.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (4 samples, 0.08%)</title><rect x="349.4" y="405" width="0.9" height="15.0" fill="rgb(227,66,50)" rx="2" ry="2" />
<text  x="352.43" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="946.3" y="469" width="0.2" height="15.0" fill="rgb(236,102,11)" rx="2" ry="2" />
<text  x="949.30" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::make_create_table_mutations (1 samples, 0.02%)</title><rect x="718.6" y="373" width="0.3" height="15.0" fill="rgb(213,75,22)" rx="2" ry="2" />
<text  x="721.64" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="648.1" y="533" width="0.2" height="15.0" fill="rgb(211,70,25)" rx="2" ry="2" />
<text  x="651.10" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="59.5" y="357" width="0.2" height="15.0" fill="rgb(209,56,52)" rx="2" ry="2" />
<text  x="62.47" y="367.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (17 samples, 0.33%)</title><rect x="539.1" y="325" width="3.9" height="15.0" fill="rgb(215,92,17)" rx="2" ry="2" />
<text  x="542.08" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (197 samples, 3.82%)</title><rect x="23.1" y="517" width="45.1" height="15.0" fill="rgb(231,91,17)" rx="2" ry="2" />
<text  x="26.06" y="527.5" >seas..</text>
</g>
<g >
<title>__libc_csu_init (5 samples, 0.10%)</title><rect x="86.0" y="725" width="1.2" height="15.0" fill="rgb(205,175,21)" rx="2" ry="2" />
<text  x="89.04" y="735.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="18.9" y="533" width="0.3" height="15.0" fill="rgb(242,115,21)" rx="2" ry="2" />
<text  x="21.93" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (71 samples, 1.38%)</title><rect x="23.3" y="469" width="16.2" height="15.0" fill="rgb(210,30,54)" rx="2" ry="2" />
<text  x="26.28" y="479.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (11 samples, 0.21%)</title><rect x="1146.3" y="565" width="2.5" height="15.0" fill="rgb(211,78,35)" rx="2" ry="2" />
<text  x="1149.25" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1137.3" y="581" width="0.3" height="15.0" fill="rgb(220,145,53)" rx="2" ry="2" />
<text  x="1140.32" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (11 samples, 0.21%)</title><rect x="78.0" y="581" width="2.5" height="15.0" fill="rgb(213,195,31)" rx="2" ry="2" />
<text  x="81.02" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(238,1,18)" rx="2" ry="2" />
<text  x="13.69" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="494.0" y="389" width="0.4" height="15.0" fill="rgb(221,222,26)" rx="2" ry="2" />
<text  x="496.96" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%)</title><rect x="824.7" y="213" width="1.4" height="15.0" fill="rgb(244,114,26)" rx="2" ry="2" />
<text  x="827.69" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (57 samples, 1.11%)</title><rect x="26.0" y="389" width="13.1" height="15.0" fill="rgb(230,165,46)" rx="2" ry="2" />
<text  x="29.03" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="420.4" y="261" width="0.5" height="15.0" fill="rgb(208,166,27)" rx="2" ry="2" />
<text  x="423.43" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="291.9" y="341" width="0.3" height="15.0" fill="rgb(219,127,27)" rx="2" ry="2" />
<text  x="294.94" y="351.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%)</title><rect x="1129.5" y="261" width="0.3" height="15.0" fill="rgb(247,203,23)" rx="2" ry="2" />
<text  x="1132.53" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="721.4" y="565" width="0.2" height="15.0" fill="rgb(218,150,49)" rx="2" ry="2" />
<text  x="724.39" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="615.3" y="453" width="0.5" height="15.0" fill="rgb(218,46,28)" rx="2" ry="2" />
<text  x="618.35" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="589.7" y="485" width="0.2" height="15.0" fill="rgb(249,48,33)" rx="2" ry="2" />
<text  x="592.69" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="109.6" y="549" width="0.7" height="15.0" fill="rgb(210,183,0)" rx="2" ry="2" />
<text  x="112.63" y="559.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="746.8" y="453" width="0.2" height="15.0" fill="rgb(252,90,31)" rx="2" ry="2" />
<text  x="749.81" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="79.9" y="405" width="0.2" height="15.0" fill="rgb(236,166,29)" rx="2" ry="2" />
<text  x="82.86" y="415.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (532 samples, 10.33%)</title><rect x="346.9" y="485" width="121.9" height="15.0" fill="rgb(210,188,37)" rx="2" ry="2" />
<text  x="349.91" y="495.5" >query::consume_..</text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="37.9" y="325" width="0.3" height="15.0" fill="rgb(221,172,1)" rx="2" ry="2" />
<text  x="40.94" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.6" y="357" width="0.3" height="15.0" fill="rgb(241,100,12)" rx="2" ry="2" />
<text  x="82.63" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1138.0" y="581" width="0.2" height="15.0" fill="rgb(228,139,42)" rx="2" ry="2" />
<text  x="1141.01" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="485" width="0.7" height="15.0" fill="rgb(241,228,40)" rx="2" ry="2" />
<text  x="86.52" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="249.1" y="149" width="0.2" height="15.0" fill="rgb(246,52,15)" rx="2" ry="2" />
<text  x="252.11" y="159.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (44 samples, 0.85%)</title><rect x="612.4" y="485" width="10.0" height="15.0" fill="rgb(248,144,54)" rx="2" ry="2" />
<text  x="615.37" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (4 samples, 0.08%)</title><rect x="885.6" y="389" width="0.9" height="15.0" fill="rgb(216,85,53)" rx="2" ry="2" />
<text  x="888.61" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1098.6" y="501" width="0.5" height="15.0" fill="rgb(236,204,25)" rx="2" ry="2" />
<text  x="1101.61" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (282 samples, 5.47%)</title><rect x="17.1" y="693" width="64.6" height="15.0" fill="rgb(250,210,10)" rx="2" ry="2" />
<text  x="20.10" y="703.5" >seastar..</text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.2" y="437" width="0.3" height="15.0" fill="rgb(220,204,31)" rx="2" ry="2" />
<text  x="21.25" y="447.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="743.6" y="565" width="0.2" height="15.0" fill="rgb(246,74,20)" rx="2" ry="2" />
<text  x="746.61" y="575.5" ></text>
</g>
<g >
<title>__strlen_avx2 (2 samples, 0.04%)</title><rect x="19.2" y="613" width="0.4" height="15.0" fill="rgb(212,58,9)" rx="2" ry="2" />
<text  x="22.16" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="728.7" y="565" width="0.2" height="15.0" fill="rgb(221,63,44)" rx="2" ry="2" />
<text  x="731.72" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="957.3" y="469" width="0.2" height="15.0" fill="rgb(253,205,16)" rx="2" ry="2" />
<text  x="960.30" y="479.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="884.7" y="389" width="0.2" height="15.0" fill="rgb(219,154,44)" rx="2" ry="2" />
<text  x="887.69" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="345.3" y="501" width="0.7" height="15.0" fill="rgb(252,147,30)" rx="2" ry="2" />
<text  x="348.31" y="511.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt;::emplace_back&lt;ser::deletable_row_view&gt; (1 samples, 0.02%)</title><rect x="1123.8" y="277" width="0.2" height="15.0" fill="rgb(219,24,19)" rx="2" ry="2" />
<text  x="1126.81" y="287.5" ></text>
</g>
<g >
<title>sstables::file_writer::make (1 samples, 0.02%)</title><rect x="717.5" y="581" width="0.2" height="15.0" fill="rgb(208,150,33)" rx="2" ry="2" />
<text  x="720.50" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (4 samples, 0.08%)</title><rect x="207.7" y="341" width="0.9" height="15.0" fill="rgb(225,131,18)" rx="2" ry="2" />
<text  x="210.66" y="351.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1129.3" y="261" width="0.2" height="15.0" fill="rgb(215,68,7)" rx="2" ry="2" />
<text  x="1132.31" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (1 samples, 0.02%)</title><rect x="851.5" y="533" width="0.2" height="15.0" fill="rgb(247,158,0)" rx="2" ry="2" />
<text  x="854.48" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="663.4" y="581" width="0.3" height="15.0" fill="rgb(236,20,40)" rx="2" ry="2" />
<text  x="666.44" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="110.3" y="309" width="0.2" height="15.0" fill="rgb(236,19,24)" rx="2" ry="2" />
<text  x="113.32" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="718.6" y="517" width="0.3" height="15.0" fill="rgb(252,219,33)" rx="2" ry="2" />
<text  x="721.64" y="527.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (1 samples, 0.02%)</title><rect x="1161.1" y="581" width="0.3" height="15.0" fill="rgb(208,138,32)" rx="2" ry="2" />
<text  x="1164.14" y="591.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (18 samples, 0.35%)</title><rect x="868.4" y="517" width="4.2" height="15.0" fill="rgb(249,62,46)" rx="2" ry="2" />
<text  x="871.43" y="527.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="46.4" y="421" width="0.5" height="15.0" fill="rgb(212,218,37)" rx="2" ry="2" />
<text  x="49.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="696.0" y="533" width="0.7" height="15.0" fill="rgb(222,68,54)" rx="2" ry="2" />
<text  x="698.97" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="49.6" y="405" width="0.3" height="15.0" fill="rgb(231,47,12)" rx="2" ry="2" />
<text  x="52.62" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_or_view_to_schema_mutation (1 samples, 0.02%)</title><rect x="718.6" y="357" width="0.3" height="15.0" fill="rgb(228,214,42)" rx="2" ry="2" />
<text  x="721.64" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="373" width="0.2" height="15.0" fill="rgb(219,116,21)" rx="2" ry="2" />
<text  x="82.17" y="383.5" ></text>
</g>
<g >
<title>utils::array_search_gt (2 samples, 0.04%)</title><rect x="1120.6" y="261" width="0.5" height="15.0" fill="rgb(250,179,35)" rx="2" ry="2" />
<text  x="1123.60" y="271.5" ></text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%)</title><rect x="1137.6" y="373" width="0.2" height="15.0" fill="rgb(253,80,8)" rx="2" ry="2" />
<text  x="1140.55" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="40.2" y="325" width="0.3" height="15.0" fill="rgb(229,138,35)" rx="2" ry="2" />
<text  x="43.23" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1074.1" y="389" width="0.2" height="15.0" fill="rgb(247,50,24)" rx="2" ry="2" />
<text  x="1077.11" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (62 samples, 1.20%)</title><rect x="902.3" y="485" width="14.2" height="15.0" fill="rgb(205,185,53)" rx="2" ry="2" />
<text  x="905.33" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="44.6" y="357" width="0.4" height="15.0" fill="rgb(235,133,6)" rx="2" ry="2" />
<text  x="47.58" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (32 samples, 0.62%)</title><rect x="1127.9" y="437" width="7.4" height="15.0" fill="rgb(241,121,1)" rx="2" ry="2" />
<text  x="1130.93" y="447.5" ></text>
</g>
<g >
<title>partition_entry::read (5 samples, 0.10%)</title><rect x="551.2" y="405" width="1.2" height="15.0" fill="rgb(231,122,9)" rx="2" ry="2" />
<text  x="554.22" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, query::querier&lt; (1 samples, 0.02%)</title><rect x="719.1" y="597" width="0.2" height="15.0" fill="rgb(211,210,2)" rx="2" ry="2" />
<text  x="722.10" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="57.9" y="261" width="0.2" height="15.0" fill="rgb(236,12,15)" rx="2" ry="2" />
<text  x="60.87" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (2 samples, 0.04%)</title><rect x="1023.5" y="309" width="0.4" height="15.0" fill="rgb(211,50,35)" rx="2" ry="2" />
<text  x="1026.49" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.16%)</title><rect x="1084.9" y="501" width="1.8" height="15.0" fill="rgb(239,202,25)" rx="2" ry="2" />
<text  x="1087.87" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="760.8" y="485" width="0.2" height="15.0" fill="rgb(207,156,42)" rx="2" ry="2" />
<text  x="763.78" y="495.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (8 samples, 0.16%)</title><rect x="406.2" y="261" width="1.9" height="15.0" fill="rgb(246,142,19)" rx="2" ry="2" />
<text  x="409.23" y="271.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (16 samples, 0.31%)</title><rect x="977.2" y="437" width="3.7" height="15.0" fill="rgb(228,24,17)" rx="2" ry="2" />
<text  x="980.22" y="447.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1039.1" y="389" width="0.2" height="15.0" fill="rgb(244,10,43)" rx="2" ry="2" />
<text  x="1042.06" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_lineStart (1 samples, 0.02%)</title><rect x="27.4" y="357" width="0.2" height="15.0" fill="rgb(227,11,40)" rx="2" ry="2" />
<text  x="30.41" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (58 samples, 1.13%)</title><rect x="902.3" y="469" width="13.3" height="15.0" fill="rgb(251,157,54)" rx="2" ry="2" />
<text  x="905.33" y="479.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%)</title><rect x="18.9" y="661" width="0.3" height="15.0" fill="rgb(236,198,36)" rx="2" ry="2" />
<text  x="21.93" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (30 samples, 0.58%)</title><rect x="1050.5" y="437" width="6.9" height="15.0" fill="rgb(234,158,34)" rx="2" ry="2" />
<text  x="1053.52" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (8 samples, 0.16%)</title><rect x="351.5" y="373" width="1.8" height="15.0" fill="rgb(243,5,9)" rx="2" ry="2" />
<text  x="354.49" y="383.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="418.8" y="293" width="0.3" height="15.0" fill="rgb(229,135,26)" rx="2" ry="2" />
<text  x="421.83" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="60.2" y="341" width="0.2" height="15.0" fill="rgb(217,96,25)" rx="2" ry="2" />
<text  x="63.16" y="351.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="17.3" y="629" width="0.3" height="15.0" fill="rgb(235,152,16)" rx="2" ry="2" />
<text  x="20.33" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="461.9" y="405" width="3.0" height="15.0" fill="rgb(250,154,43)" rx="2" ry="2" />
<text  x="464.89" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="730.3" y="565" width="0.5" height="15.0" fill="rgb(245,151,28)" rx="2" ry="2" />
<text  x="733.32" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl_nrvo&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="719.1" y="581" width="0.2" height="15.0" fill="rgb(205,124,6)" rx="2" ry="2" />
<text  x="722.10" y="591.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.2" y="437" width="0.2" height="15.0" fill="rgb(238,181,38)" rx="2" ry="2" />
<text  x="112.17" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="719.3" y="581" width="0.3" height="15.0" fill="rgb(227,44,1)" rx="2" ry="2" />
<text  x="722.33" y="591.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.06%)</title><rect x="635.5" y="469" width="0.7" height="15.0" fill="rgb(222,160,11)" rx="2" ry="2" />
<text  x="638.50" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (16 samples, 0.31%)</title><rect x="776.8" y="517" width="3.7" height="15.0" fill="rgb(212,187,8)" rx="2" ry="2" />
<text  x="779.82" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (2 samples, 0.04%)</title><rect x="1150.6" y="501" width="0.5" height="15.0" fill="rgb(225,196,17)" rx="2" ry="2" />
<text  x="1153.61" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="18.7" y="421" width="0.2" height="15.0" fill="rgb(218,52,22)" rx="2" ry="2" />
<text  x="21.70" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="437.4" y="245" width="2.7" height="15.0" fill="rgb(241,183,10)" rx="2" ry="2" />
<text  x="440.38" y="255.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="108.9" y="309" width="0.3" height="15.0" fill="rgb(233,200,27)" rx="2" ry="2" />
<text  x="111.94" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (5 samples, 0.10%)</title><rect x="773.6" y="357" width="1.2" height="15.0" fill="rgb(234,50,8)" rx="2" ry="2" />
<text  x="776.61" y="367.5" ></text>
</g>
<g >
<title>[[vdso]] (28 samples, 0.54%)</title><rect x="1170.3" y="709" width="6.4" height="15.0" fill="rgb(222,53,36)" rx="2" ry="2" />
<text  x="1173.30" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="886.1" y="309" width="0.2" height="15.0" fill="rgb(223,167,43)" rx="2" ry="2" />
<text  x="889.07" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1029.9" y="325" width="0.7" height="15.0" fill="rgb(229,194,18)" rx="2" ry="2" />
<text  x="1032.90" y="335.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.10%)</title><rect x="884.5" y="405" width="1.1" height="15.0" fill="rgb(237,60,5)" rx="2" ry="2" />
<text  x="887.46" y="415.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="1123.1" y="325" width="0.3" height="15.0" fill="rgb(206,11,1)" rx="2" ry="2" />
<text  x="1126.12" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="47.6" y="229" width="0.2" height="15.0" fill="rgb(238,138,10)" rx="2" ry="2" />
<text  x="50.56" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1127.7" y="485" width="8.7" height="15.0" fill="rgb(214,22,24)" rx="2" ry="2" />
<text  x="1130.70" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="734.0" y="549" width="0.4" height="15.0" fill="rgb(253,69,10)" rx="2" ry="2" />
<text  x="736.99" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="99.1" y="581" width="0.2" height="15.0" fill="rgb(244,60,52)" rx="2" ry="2" />
<text  x="102.10" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.4" y="293" width="0.2" height="15.0" fill="rgb(238,1,9)" rx="2" ry="2" />
<text  x="63.39" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="718.6" y="277" width="0.3" height="15.0" fill="rgb(229,92,41)" rx="2" ry="2" />
<text  x="721.64" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="632.1" y="533" width="0.2" height="15.0" fill="rgb(221,35,30)" rx="2" ry="2" />
<text  x="635.07" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="194.8" y="325" width="0.3" height="15.0" fill="rgb(213,65,52)" rx="2" ry="2" />
<text  x="197.83" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="1147.9" y="533" width="0.2" height="15.0" fill="rgb(252,0,47)" rx="2" ry="2" />
<text  x="1150.86" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="65.7" y="437" width="0.2" height="15.0" fill="rgb(222,175,27)" rx="2" ry="2" />
<text  x="68.66" y="447.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%)</title><rect x="365.9" y="261" width="0.5" height="15.0" fill="rgb(243,130,42)" rx="2" ry="2" />
<text  x="368.92" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="501.7" y="405" width="0.3" height="15.0" fill="rgb(214,178,23)" rx="2" ry="2" />
<text  x="504.74" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="25.6" y="341" width="0.2" height="15.0" fill="rgb(229,168,51)" rx="2" ry="2" />
<text  x="28.57" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="685.2" y="549" width="0.5" height="15.0" fill="rgb(239,116,8)" rx="2" ry="2" />
<text  x="688.20" y="559.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (4 samples, 0.08%)</title><rect x="387.2" y="277" width="0.9" height="15.0" fill="rgb(246,190,47)" rx="2" ry="2" />
<text  x="390.22" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="656.6" y="517" width="0.2" height="15.0" fill="rgb(239,1,6)" rx="2" ry="2" />
<text  x="659.57" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="997.4" y="277" width="0.2" height="15.0" fill="rgb(212,171,8)" rx="2" ry="2" />
<text  x="1000.38" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="223.0" y="293" width="0.2" height="15.0" fill="rgb(210,63,41)" rx="2" ry="2" />
<text  x="226.00" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (991 samples, 19.24%)</title><rect x="892.3" y="565" width="226.9" height="15.0" fill="rgb(230,6,50)" rx="2" ry="2" />
<text  x="895.25" y="575.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (2 samples, 0.04%)</title><rect x="551.9" y="389" width="0.5" height="15.0" fill="rgb(249,189,17)" rx="2" ry="2" />
<text  x="554.90" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="922.9" y="421" width="0.3" height="15.0" fill="rgb(206,179,13)" rx="2" ry="2" />
<text  x="925.94" y="431.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="546.6" y="341" width="0.3" height="15.0" fill="rgb(215,113,51)" rx="2" ry="2" />
<text  x="549.63" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="131.8" y="469" width="0.3" height="15.0" fill="rgb(232,112,26)" rx="2" ry="2" />
<text  x="134.85" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="667.1" y="581" width="0.2" height="15.0" fill="rgb(226,102,19)" rx="2" ry="2" />
<text  x="670.11" y="591.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="935.8" y="437" width="0.4" height="15.0" fill="rgb(210,0,7)" rx="2" ry="2" />
<text  x="938.77" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="263.5" y="229" width="0.3" height="15.0" fill="rgb(225,134,44)" rx="2" ry="2" />
<text  x="266.54" y="239.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (5 samples, 0.10%)</title><rect x="248.2" y="165" width="1.1" height="15.0" fill="rgb(209,166,26)" rx="2" ry="2" />
<text  x="251.20" y="175.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="54.7" y="357" width="0.9" height="15.0" fill="rgb(215,98,9)" rx="2" ry="2" />
<text  x="57.66" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (5 samples, 0.10%)</title><rect x="696.7" y="533" width="1.1" height="15.0" fill="rgb(205,95,53)" rx="2" ry="2" />
<text  x="699.65" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="122.9" y="533" width="0.2" height="15.0" fill="rgb(231,225,53)" rx="2" ry="2" />
<text  x="125.92" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="769.9" y="453" width="0.5" height="15.0" fill="rgb(216,22,54)" rx="2" ry="2" />
<text  x="772.95" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="50.5" y="389" width="0.5" height="15.0" fill="rgb(224,53,47)" rx="2" ry="2" />
<text  x="53.54" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="47.1" y="325" width="0.5" height="15.0" fill="rgb(251,95,2)" rx="2" ry="2" />
<text  x="50.10" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (489 samples, 9.49%)</title><rect x="969.7" y="469" width="112.0" height="15.0" fill="rgb(238,188,54)" rx="2" ry="2" />
<text  x="972.67" y="479.5" >service::stor..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (3 samples, 0.06%)</title><rect x="578.2" y="469" width="0.7" height="15.0" fill="rgb(231,212,20)" rx="2" ry="2" />
<text  x="581.24" y="479.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="881.7" y="469" width="0.2" height="15.0" fill="rgb(249,129,12)" rx="2" ry="2" />
<text  x="884.72" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (8 samples, 0.16%)</title><rect x="607.3" y="357" width="1.9" height="15.0" fill="rgb(238,43,25)" rx="2" ry="2" />
<text  x="610.33" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (30 samples, 0.58%)</title><rect x="451.1" y="341" width="6.9" height="15.0" fill="rgb(223,213,36)" rx="2" ry="2" />
<text  x="454.13" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.3" y="277" width="0.2" height="15.0" fill="rgb(214,128,47)" rx="2" ry="2" />
<text  x="45.29" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%)</title><rect x="995.5" y="405" width="2.6" height="15.0" fill="rgb(229,227,30)" rx="2" ry="2" />
<text  x="998.55" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%)</title><rect x="614.7" y="469" width="0.2" height="15.0" fill="rgb(252,204,41)" rx="2" ry="2" />
<text  x="617.66" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="626.8" y="485" width="0.5" height="15.0" fill="rgb(210,56,1)" rx="2" ry="2" />
<text  x="629.80" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%)</title><rect x="752.8" y="549" width="2.0" height="15.0" fill="rgb(247,144,38)" rx="2" ry="2" />
<text  x="755.77" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="575.0" y="517" width="0.3" height="15.0" fill="rgb(254,57,45)" rx="2" ry="2" />
<text  x="578.03" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="60.8" y="405" width="0.3" height="15.0" fill="rgb(206,62,21)" rx="2" ry="2" />
<text  x="63.85" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="919.5" y="453" width="0.5" height="15.0" fill="rgb(208,66,38)" rx="2" ry="2" />
<text  x="922.51" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="705.4" y="517" width="0.4" height="15.0" fill="rgb(252,205,22)" rx="2" ry="2" />
<text  x="708.36" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="614.4" y="421" width="0.3" height="15.0" fill="rgb(246,175,43)" rx="2" ry="2" />
<text  x="617.43" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (2 samples, 0.04%)</title><rect x="899.4" y="517" width="0.4" height="15.0" fill="rgb(250,192,13)" rx="2" ry="2" />
<text  x="902.35" y="527.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%)</title><rect x="486.2" y="389" width="0.2" height="15.0" fill="rgb(244,221,17)" rx="2" ry="2" />
<text  x="489.17" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="275.2" y="245" width="0.3" height="15.0" fill="rgb(220,167,40)" rx="2" ry="2" />
<text  x="278.23" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (8 samples, 0.16%)</title><rect x="365.5" y="277" width="1.8" height="15.0" fill="rgb(205,100,15)" rx="2" ry="2" />
<text  x="368.47" y="287.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="871.2" y="453" width="0.4" height="15.0" fill="rgb(239,17,22)" rx="2" ry="2" />
<text  x="874.18" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1164.8" y="533" width="0.2" height="15.0" fill="rgb(227,9,26)" rx="2" ry="2" />
<text  x="1167.81" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="100.9" y="549" width="0.5" height="15.0" fill="rgb(217,228,8)" rx="2" ry="2" />
<text  x="103.93" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="873.9" y="549" width="0.3" height="15.0" fill="rgb(251,17,30)" rx="2" ry="2" />
<text  x="876.93" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="500.1" y="357" width="0.5" height="15.0" fill="rgb(219,59,31)" rx="2" ry="2" />
<text  x="503.14" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (3 samples, 0.06%)</title><rect x="792.6" y="453" width="0.7" height="15.0" fill="rgb(252,138,11)" rx="2" ry="2" />
<text  x="795.62" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::statement_restrictions&gt;::shared_ptr_count_for&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="82.8" y="357" width="0.3" height="15.0" fill="rgb(214,122,54)" rx="2" ry="2" />
<text  x="85.83" y="367.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="856.1" y="533" width="0.7" height="15.0" fill="rgb(223,65,19)" rx="2" ry="2" />
<text  x="859.06" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (12 samples, 0.23%)</title><rect x="991.2" y="421" width="2.7" height="15.0" fill="rgb(228,152,32)" rx="2" ry="2" />
<text  x="994.20" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (5 samples, 0.10%)</title><rect x="1135.3" y="389" width="1.1" height="15.0" fill="rgb(206,17,27)" rx="2" ry="2" />
<text  x="1138.26" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;schema const&gt; &gt; &gt; &gt; const&amp;, single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="82.6" y="565" width="0.2" height="15.0" fill="rgb(248,16,19)" rx="2" ry="2" />
<text  x="85.60" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%)</title><rect x="43.0" y="453" width="0.7" height="15.0" fill="rgb(216,84,21)" rx="2" ry="2" />
<text  x="45.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (5 samples, 0.10%)</title><rect x="573.9" y="517" width="1.1" height="15.0" fill="rgb(248,53,34)" rx="2" ry="2" />
<text  x="576.89" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (8 samples, 0.16%)</title><rect x="1095.9" y="501" width="1.8" height="15.0" fill="rgb(248,214,34)" rx="2" ry="2" />
<text  x="1098.87" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="861.8" y="517" width="0.2" height="15.0" fill="rgb(221,73,53)" rx="2" ry="2" />
<text  x="864.79" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (8 samples, 0.16%)</title><rect x="1036.8" y="341" width="1.8" height="15.0" fill="rgb(231,132,29)" rx="2" ry="2" />
<text  x="1039.77" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (2 samples, 0.04%)</title><rect x="582.8" y="357" width="0.5" height="15.0" fill="rgb(225,134,52)" rx="2" ry="2" />
<text  x="585.82" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (3 samples, 0.06%)</title><rect x="882.6" y="453" width="0.7" height="15.0" fill="rgb(208,29,52)" rx="2" ry="2" />
<text  x="885.63" y="463.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="76.4" y="501" width="0.2" height="15.0" fill="rgb(251,7,8)" rx="2" ry="2" />
<text  x="79.42" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="1137.6" y="421" width="0.2" height="15.0" fill="rgb(213,4,51)" rx="2" ry="2" />
<text  x="1140.55" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1128.2" y="341" width="0.2" height="15.0" fill="rgb(252,143,14)" rx="2" ry="2" />
<text  x="1131.16" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="46.0" y="229" width="0.2" height="15.0" fill="rgb(219,104,20)" rx="2" ry="2" />
<text  x="48.96" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="712.7" y="565" width="0.2" height="15.0" fill="rgb(244,35,12)" rx="2" ry="2" />
<text  x="715.69" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="622.0" y="437" width="0.2" height="15.0" fill="rgb(254,3,41)" rx="2" ry="2" />
<text  x="624.99" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.1" y="469" width="0.3" height="15.0" fill="rgb(205,88,41)" rx="2" ry="2" />
<text  x="66.14" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (15 samples, 0.29%)</title><rect x="945.2" y="485" width="3.4" height="15.0" fill="rgb(236,222,17)" rx="2" ry="2" />
<text  x="948.16" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="657.3" y="485" width="0.2" height="15.0" fill="rgb(248,168,19)" rx="2" ry="2" />
<text  x="660.26" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="469.4" y="517" width="0.5" height="15.0" fill="rgb(222,202,48)" rx="2" ry="2" />
<text  x="472.45" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.8" y="485" width="0.2" height="15.0" fill="rgb(227,200,17)" rx="2" ry="2" />
<text  x="69.80" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="675.6" y="533" width="0.2" height="15.0" fill="rgb(249,44,22)" rx="2" ry="2" />
<text  x="678.58" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;service::storage_service&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;database&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::gossiper&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, service::storage_service_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_manager&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;cdc::generation_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;repair_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::raft_group_registry&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::endpoint_lifecycle_notifier&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="309" width="0.2" height="15.0" fill="rgb(249,50,3)" rx="2" ry="2" />
<text  x="749.81" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (30 samples, 0.58%)</title><rect x="623.4" y="533" width="6.8" height="15.0" fill="rgb(207,0,19)" rx="2" ry="2" />
<text  x="626.36" y="543.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="906.0" y="389" width="0.5" height="15.0" fill="rgb(210,138,28)" rx="2" ry="2" />
<text  x="908.99" y="399.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::file_data_sink_impl (1 samples, 0.02%)</title><rect x="81.9" y="597" width="0.2" height="15.0" fill="rgb(222,88,19)" rx="2" ry="2" />
<text  x="84.92" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="49.6" y="357" width="0.3" height="15.0" fill="rgb(244,78,19)" rx="2" ry="2" />
<text  x="52.62" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="85.4" y="645" width="0.4" height="15.0" fill="rgb(220,169,39)" rx="2" ry="2" />
<text  x="88.35" y="655.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::select_statement*, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.1" y="437" width="0.2" height="15.0" fill="rgb(211,105,53)" rx="2" ry="2" />
<text  x="69.11" y="447.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="951.3" y="469" width="0.3" height="15.0" fill="rgb(247,110,24)" rx="2" ry="2" />
<text  x="954.34" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (38 samples, 0.74%)</title><rect x="558.8" y="421" width="8.7" height="15.0" fill="rgb(205,199,6)" rx="2" ry="2" />
<text  x="561.77" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (3 samples, 0.06%)</title><rect x="654.7" y="533" width="0.7" height="15.0" fill="rgb(247,126,0)" rx="2" ry="2" />
<text  x="657.74" y="543.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="269.5" y="197" width="0.2" height="15.0" fill="rgb(246,116,39)" rx="2" ry="2" />
<text  x="272.50" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (24 samples, 0.47%)</title><rect x="11.4" y="709" width="5.5" height="15.0" fill="rgb(219,202,40)" rx="2" ry="2" />
<text  x="14.37" y="719.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.54%)</title><rect x="1119.7" y="405" width="6.4" height="15.0" fill="rgb(208,3,39)" rx="2" ry="2" />
<text  x="1122.69" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1148.3" y="517" width="0.5" height="15.0" fill="rgb(205,173,35)" rx="2" ry="2" />
<text  x="1151.32" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="714.3" y="533" width="1.1" height="15.0" fill="rgb(229,123,21)" rx="2" ry="2" />
<text  x="717.29" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="1160.5" y="549" width="0.4" height="15.0" fill="rgb(214,26,41)" rx="2" ry="2" />
<text  x="1163.45" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="45.5" y="389" width="0.7" height="15.0" fill="rgb(243,139,1)" rx="2" ry="2" />
<text  x="48.50" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="461.0" y="325" width="0.2" height="15.0" fill="rgb(233,195,5)" rx="2" ry="2" />
<text  x="463.97" y="335.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="881.5" y="453" width="0.2" height="15.0" fill="rgb(230,16,19)" rx="2" ry="2" />
<text  x="884.49" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="880.1" y="597" width="0.2" height="15.0" fill="rgb(246,149,44)" rx="2" ry="2" />
<text  x="883.11" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (10 samples, 0.19%)</title><rect x="985.7" y="405" width="2.3" height="15.0" fill="rgb(249,103,15)" rx="2" ry="2" />
<text  x="988.70" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictionsL11has_eq_nullERKNS4_13query_optionsERKNS5_10expressionEE3$_8EES8_SI_T_EUlRS7_E_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_8constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_11conjunctionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_12column_valueEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_5tokenEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13function_callEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4castEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_15field_selectionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4nullEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13bind_variableEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_16untyped_constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_17tuple_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_22collection_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSR_S6_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_SN_S1Z_S23_S27_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2C_S2F_ (1 samples, 0.02%)</title><rect x="881.7" y="421" width="0.2" height="15.0" fill="rgb(209,76,35)" rx="2" ry="2" />
<text  x="884.72" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="191.4" y="373" width="0.2" height="15.0" fill="rgb(219,123,28)" rx="2" ry="2" />
<text  x="194.40" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (2 samples, 0.04%)</title><rect x="678.1" y="581" width="0.5" height="15.0" fill="rgb(205,71,54)" rx="2" ry="2" />
<text  x="681.10" y="591.5" ></text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%)</title><rect x="1125.0" y="341" width="0.4" height="15.0" fill="rgb(247,112,10)" rx="2" ry="2" />
<text  x="1127.95" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="163.0" y="533" width="1.1" height="15.0" fill="rgb(248,186,17)" rx="2" ry="2" />
<text  x="166.00" y="543.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_data_sink (1 samples, 0.02%)</title><rect x="81.9" y="613" width="0.2" height="15.0" fill="rgb(213,163,23)" rx="2" ry="2" />
<text  x="84.92" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="746.4" y="549" width="0.2" height="15.0" fill="rgb(254,98,31)" rx="2" ry="2" />
<text  x="749.35" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (18 samples, 0.35%)</title><rect x="300.6" y="309" width="4.2" height="15.0" fill="rgb(230,27,53)" rx="2" ry="2" />
<text  x="303.65" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (79 samples, 1.53%)</title><rect x="593.1" y="437" width="18.1" height="15.0" fill="rgb(207,110,35)" rx="2" ry="2" />
<text  x="596.13" y="447.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (56 samples, 1.09%)</title><rect x="1061.1" y="389" width="12.8" height="15.0" fill="rgb(226,45,28)" rx="2" ry="2" />
<text  x="1064.05" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%)</title><rect x="290.8" y="325" width="0.5" height="15.0" fill="rgb(207,193,21)" rx="2" ry="2" />
<text  x="293.80" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="459.8" y="341" width="0.3" height="15.0" fill="rgb(218,130,23)" rx="2" ry="2" />
<text  x="462.83" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1164.6" y="517" width="0.2" height="15.0" fill="rgb(211,210,2)" rx="2" ry="2" />
<text  x="1167.58" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="502.2" y="405" width="0.7" height="15.0" fill="rgb(241,101,50)" rx="2" ry="2" />
<text  x="505.20" y="415.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (153 samples, 2.97%)</title><rect x="799.9" y="437" width="35.1" height="15.0" fill="rgb(217,172,18)" rx="2" ry="2" />
<text  x="802.95" y="447.5" >se..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="829.0" y="325" width="0.3" height="15.0" fill="rgb(247,126,36)" rx="2" ry="2" />
<text  x="832.04" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="357" width="0.2" height="15.0" fill="rgb(243,6,29)" rx="2" ry="2" />
<text  x="82.17" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="462.6" y="389" width="2.3" height="15.0" fill="rgb(228,105,45)" rx="2" ry="2" />
<text  x="465.58" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (4 samples, 0.08%)</title><rect x="653.4" y="469" width="0.9" height="15.0" fill="rgb(245,62,20)" rx="2" ry="2" />
<text  x="656.37" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1016.8" y="325" width="0.3" height="15.0" fill="rgb(249,101,35)" rx="2" ry="2" />
<text  x="1019.85" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="775.4" y="501" width="0.3" height="15.0" fill="rgb(251,58,3)" rx="2" ry="2" />
<text  x="778.44" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (63 samples, 1.22%)</title><rect x="812.3" y="325" width="14.4" height="15.0" fill="rgb(239,125,52)" rx="2" ry="2" />
<text  x="815.32" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="54.9" y="293" width="0.2" height="15.0" fill="rgb(253,147,36)" rx="2" ry="2" />
<text  x="57.89" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="249.3" y="165" width="0.3" height="15.0" fill="rgb(209,81,12)" rx="2" ry="2" />
<text  x="252.34" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="300.0" y="309" width="0.4" height="15.0" fill="rgb(242,154,15)" rx="2" ry="2" />
<text  x="302.96" y="319.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="825.4" y="181" width="0.7" height="15.0" fill="rgb(213,212,47)" rx="2" ry="2" />
<text  x="828.37" y="191.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1120.1" y="181" width="0.3" height="15.0" fill="rgb(246,133,51)" rx="2" ry="2" />
<text  x="1123.14" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%)</title><rect x="1127.9" y="469" width="8.5" height="15.0" fill="rgb(245,100,37)" rx="2" ry="2" />
<text  x="1130.93" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="454.6" y="261" width="0.2" height="15.0" fill="rgb(208,171,8)" rx="2" ry="2" />
<text  x="457.56" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (26 samples, 0.50%)</title><rect x="195.5" y="357" width="6.0" height="15.0" fill="rgb(250,214,9)" rx="2" ry="2" />
<text  x="198.52" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1109.6" y="485" width="0.2" height="15.0" fill="rgb(239,54,39)" rx="2" ry="2" />
<text  x="1112.61" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="920.0" y="453" width="0.2" height="15.0" fill="rgb(251,134,4)" rx="2" ry="2" />
<text  x="922.97" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="551.9" y="357" width="0.5" height="15.0" fill="rgb(232,216,8)" rx="2" ry="2" />
<text  x="554.90" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (1 samples, 0.02%)</title><rect x="881.7" y="453" width="0.2" height="15.0" fill="rgb(235,106,19)" rx="2" ry="2" />
<text  x="884.72" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="667.3" y="581" width="0.5" height="15.0" fill="rgb(216,116,4)" rx="2" ry="2" />
<text  x="670.34" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="658.2" y="501" width="0.4" height="15.0" fill="rgb(238,79,53)" rx="2" ry="2" />
<text  x="661.18" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1017.3" y="309" width="0.2" height="15.0" fill="rgb(244,211,24)" rx="2" ry="2" />
<text  x="1020.31" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="105.1" y="565" width="0.4" height="15.0" fill="rgb(217,79,23)" rx="2" ry="2" />
<text  x="108.05" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="40.9" y="325" width="0.7" height="15.0" fill="rgb(214,132,45)" rx="2" ry="2" />
<text  x="43.92" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_assign_base (1 samples, 0.02%)</title><rect x="53.3" y="293" width="0.2" height="15.0" fill="rgb(208,84,48)" rx="2" ry="2" />
<text  x="56.29" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (1 samples, 0.02%)</title><rect x="1166.9" y="597" width="0.2" height="15.0" fill="rgb(227,208,24)" rx="2" ry="2" />
<text  x="1169.87" y="607.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="85.6" y="469" width="0.2" height="15.0" fill="rgb(248,49,34)" rx="2" ry="2" />
<text  x="88.58" y="479.5" ></text>
</g>
<g >
<title>posix_memalign (7 samples, 0.14%)</title><rect x="259.2" y="181" width="1.6" height="15.0" fill="rgb(235,136,52)" rx="2" ry="2" />
<text  x="262.19" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="444.9" y="293" width="0.3" height="15.0" fill="rgb(209,108,4)" rx="2" ry="2" />
<text  x="447.94" y="303.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token (2 samples, 0.04%)</title><rect x="29.9" y="357" width="0.5" height="15.0" fill="rgb(205,152,32)" rx="2" ry="2" />
<text  x="32.93" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="55.3" y="197" width="0.3" height="15.0" fill="rgb(225,76,19)" rx="2" ry="2" />
<text  x="58.35" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="25.3" y="357" width="0.7" height="15.0" fill="rgb(205,198,50)" rx="2" ry="2" />
<text  x="28.35" y="367.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="886.1" y="325" width="0.2" height="15.0" fill="rgb(245,220,22)" rx="2" ry="2" />
<text  x="889.07" y="335.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%)</title><rect x="10.5" y="645" width="0.2" height="15.0" fill="rgb(251,78,34)" rx="2" ry="2" />
<text  x="13.46" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="55.1" y="181" width="0.2" height="15.0" fill="rgb(213,227,43)" rx="2" ry="2" />
<text  x="58.12" y="191.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1137.6" y="501" width="0.2" height="15.0" fill="rgb(212,123,12)" rx="2" ry="2" />
<text  x="1140.55" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1147.4" y="517" width="0.5" height="15.0" fill="rgb(216,75,54)" rx="2" ry="2" />
<text  x="1150.40" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="465.3" y="469" width="0.3" height="15.0" fill="rgb(213,190,16)" rx="2" ry="2" />
<text  x="468.33" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="59.0" y="261" width="0.2" height="15.0" fill="rgb(234,164,1)" rx="2" ry="2" />
<text  x="62.01" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (9 samples, 0.17%)</title><rect x="305.7" y="293" width="2.0" height="15.0" fill="rgb(237,159,17)" rx="2" ry="2" />
<text  x="308.69" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="217.0" y="325" width="0.3" height="15.0" fill="rgb(210,207,46)" rx="2" ry="2" />
<text  x="220.05" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%)</title><rect x="587.2" y="501" width="0.2" height="15.0" fill="rgb(235,164,6)" rx="2" ry="2" />
<text  x="590.17" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="1137.6" y="517" width="0.2" height="15.0" fill="rgb(221,93,13)" rx="2" ry="2" />
<text  x="1140.55" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1035.6" y="325" width="0.9" height="15.0" fill="rgb(247,129,18)" rx="2" ry="2" />
<text  x="1038.63" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1127.7" y="533" width="8.7" height="15.0" fill="rgb(210,43,21)" rx="2" ry="2" />
<text  x="1130.70" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (2 samples, 0.04%)</title><rect x="456.6" y="293" width="0.5" height="15.0" fill="rgb(219,77,50)" rx="2" ry="2" />
<text  x="459.62" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.2" y="405" width="0.3" height="15.0" fill="rgb(212,110,32)" rx="2" ry="2" />
<text  x="43.23" y="415.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (3 samples, 0.06%)</title><rect x="109.6" y="389" width="0.7" height="15.0" fill="rgb(217,20,41)" rx="2" ry="2" />
<text  x="112.63" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%)</title><rect x="213.8" y="293" width="1.9" height="15.0" fill="rgb(209,56,12)" rx="2" ry="2" />
<text  x="216.84" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="343.0" y="453" width="0.5" height="15.0" fill="rgb(238,105,22)" rx="2" ry="2" />
<text  x="346.02" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1024.9" y="293" width="1.3" height="15.0" fill="rgb(221,121,22)" rx="2" ry="2" />
<text  x="1027.86" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="533" width="0.7" height="15.0" fill="rgb(250,94,50)" rx="2" ry="2" />
<text  x="86.52" y="543.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="75.0" y="453" width="0.3" height="15.0" fill="rgb(206,142,37)" rx="2" ry="2" />
<text  x="78.05" y="463.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (5 samples, 0.10%)</title><rect x="565.2" y="357" width="1.1" height="15.0" fill="rgb(232,227,47)" rx="2" ry="2" />
<text  x="568.19" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="109.4" y="533" width="0.2" height="15.0" fill="rgb(252,187,12)" rx="2" ry="2" />
<text  x="112.40" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1099.5" y="517" width="0.3" height="15.0" fill="rgb(238,222,46)" rx="2" ry="2" />
<text  x="1102.53" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="261" width="0.5" height="15.0" fill="rgb(236,152,35)" rx="2" ry="2" />
<text  x="56.52" y="271.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="446.1" y="325" width="0.2" height="15.0" fill="rgb(241,48,13)" rx="2" ry="2" />
<text  x="449.09" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.2" y="533" width="0.3" height="15.0" fill="rgb(207,169,53)" rx="2" ry="2" />
<text  x="13.23" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="499.2" y="357" width="0.9" height="15.0" fill="rgb(241,53,54)" rx="2" ry="2" />
<text  x="502.22" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (15 samples, 0.29%)</title><rect x="412.2" y="261" width="3.4" height="15.0" fill="rgb(248,29,46)" rx="2" ry="2" />
<text  x="415.19" y="271.5" ></text>
</g>
<g >
<title>sstables::file_writer::make (1 samples, 0.02%)</title><rect x="81.9" y="645" width="0.2" height="15.0" fill="rgb(219,197,34)" rx="2" ry="2" />
<text  x="84.92" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="108.9" y="373" width="0.3" height="15.0" fill="rgb(206,159,30)" rx="2" ry="2" />
<text  x="111.94" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="645.1" y="533" width="0.9" height="15.0" fill="rgb(241,89,41)" rx="2" ry="2" />
<text  x="648.12" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.4" y="261" width="0.3" height="15.0" fill="rgb(247,153,2)" rx="2" ry="2" />
<text  x="27.43" y="271.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (9 samples, 0.17%)</title><rect x="927.1" y="437" width="2.0" height="15.0" fill="rgb(245,224,36)" rx="2" ry="2" />
<text  x="930.07" y="447.5" ></text>
</g>
<g >
<title>database::has_keyspace (8 samples, 0.16%)</title><rect x="846.4" y="453" width="1.9" height="15.0" fill="rgb(223,166,29)" rx="2" ry="2" />
<text  x="849.44" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (4 samples, 0.08%)</title><rect x="1094.9" y="501" width="1.0" height="15.0" fill="rgb(230,8,24)" rx="2" ry="2" />
<text  x="1097.95" y="511.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (8 samples, 0.16%)</title><rect x="876.4" y="549" width="1.9" height="15.0" fill="rgb(218,36,9)" rx="2" ry="2" />
<text  x="879.45" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="571.4" y="501" width="1.1" height="15.0" fill="rgb(237,130,33)" rx="2" ry="2" />
<text  x="574.37" y="511.5" ></text>
</g>
<g >
<title>database::has_keyspace (17 samples, 0.33%)</title><rect x="863.9" y="501" width="3.8" height="15.0" fill="rgb(245,202,43)" rx="2" ry="2" />
<text  x="866.85" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="83.8" y="453" width="0.2" height="15.0" fill="rgb(222,24,0)" rx="2" ry="2" />
<text  x="86.75" y="463.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="138.9" y="549" width="0.3" height="15.0" fill="rgb(224,40,16)" rx="2" ry="2" />
<text  x="141.95" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%)</title><rect x="352.2" y="357" width="1.1" height="15.0" fill="rgb(251,72,7)" rx="2" ry="2" />
<text  x="355.18" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (5 samples, 0.10%)</title><rect x="302.7" y="277" width="1.2" height="15.0" fill="rgb(205,52,24)" rx="2" ry="2" />
<text  x="305.71" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="506.1" y="421" width="0.5" height="15.0" fill="rgb(214,74,13)" rx="2" ry="2" />
<text  x="509.09" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="40.9" y="309" width="0.7" height="15.0" fill="rgb(237,197,13)" rx="2" ry="2" />
<text  x="43.92" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="683.8" y="565" width="0.3" height="15.0" fill="rgb(252,102,13)" rx="2" ry="2" />
<text  x="686.83" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (22 samples, 0.43%)</title><rect x="784.4" y="453" width="5.0" height="15.0" fill="rgb(250,184,39)" rx="2" ry="2" />
<text  x="787.38" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="58.6" y="277" width="0.2" height="15.0" fill="rgb(209,58,33)" rx="2" ry="2" />
<text  x="61.56" y="287.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.14%)</title><rect x="211.3" y="309" width="1.6" height="15.0" fill="rgb(222,80,52)" rx="2" ry="2" />
<text  x="214.32" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1144.4" y="549" width="0.5" height="15.0" fill="rgb(230,162,54)" rx="2" ry="2" />
<text  x="1147.42" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="1157.5" y="565" width="1.1" height="15.0" fill="rgb(210,188,29)" rx="2" ry="2" />
<text  x="1160.48" y="575.5" ></text>
</g>
<g >
<title>database::find_schema (35 samples, 0.68%)</title><rect x="781.6" y="501" width="8.0" height="15.0" fill="rgb(250,88,40)" rx="2" ry="2" />
<text  x="784.63" y="511.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (5 samples, 0.10%)</title><rect x="545.5" y="325" width="1.1" height="15.0" fill="rgb(222,77,29)" rx="2" ry="2" />
<text  x="548.49" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%)</title><rect x="683.1" y="533" width="0.7" height="15.0" fill="rgb(242,218,1)" rx="2" ry="2" />
<text  x="686.14" y="543.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (8 samples, 0.16%)</title><rect x="259.0" y="197" width="1.8" height="15.0" fill="rgb(205,151,53)" rx="2" ry="2" />
<text  x="261.96" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1133.2" y="149" width="0.2" height="15.0" fill="rgb(214,90,51)" rx="2" ry="2" />
<text  x="1136.20" y="159.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1021.0" y="229" width="0.4" height="15.0" fill="rgb(212,165,0)" rx="2" ry="2" />
<text  x="1023.97" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%)</title><rect x="58.6" y="421" width="0.2" height="15.0" fill="rgb(251,131,28)" rx="2" ry="2" />
<text  x="61.56" y="431.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.10%)</title><rect x="1126.1" y="389" width="1.1" height="15.0" fill="rgb(251,133,26)" rx="2" ry="2" />
<text  x="1129.10" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (1 samples, 0.02%)</title><rect x="386.3" y="277" width="0.2" height="15.0" fill="rgb(205,61,4)" rx="2" ry="2" />
<text  x="389.31" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="884.7" y="373" width="0.2" height="15.0" fill="rgb(234,116,1)" rx="2" ry="2" />
<text  x="887.69" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1164.3" y="517" width="0.3" height="15.0" fill="rgb(231,38,15)" rx="2" ry="2" />
<text  x="1167.35" y="527.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (6 samples, 0.12%)</title><rect x="69.3" y="517" width="1.4" height="15.0" fill="rgb(243,117,8)" rx="2" ry="2" />
<text  x="72.32" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (6 samples, 0.12%)</title><rect x="826.7" y="357" width="1.4" height="15.0" fill="rgb(253,21,34)" rx="2" ry="2" />
<text  x="829.75" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (2 samples, 0.04%)</title><rect x="586.7" y="501" width="0.5" height="15.0" fill="rgb(207,125,5)" rx="2" ry="2" />
<text  x="589.72" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::initial_key_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="277" width="0.3" height="15.0" fill="rgb(248,35,13)" rx="2" ry="2" />
<text  x="85.83" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="611.2" y="437" width="0.3" height="15.0" fill="rgb(231,201,38)" rx="2" ry="2" />
<text  x="614.22" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="833.2" y="357" width="0.2" height="15.0" fill="rgb(249,130,41)" rx="2" ry="2" />
<text  x="836.16" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="133.7" y="501" width="0.2" height="15.0" fill="rgb(250,27,29)" rx="2" ry="2" />
<text  x="136.68" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="87.6" y="613" width="0.3" height="15.0" fill="rgb(253,186,13)" rx="2" ry="2" />
<text  x="90.64" y="623.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.10%)</title><rect x="1054.4" y="389" width="1.2" height="15.0" fill="rgb(213,170,24)" rx="2" ry="2" />
<text  x="1057.41" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1033.8" y="373" width="0.2" height="15.0" fill="rgb(228,225,17)" rx="2" ry="2" />
<text  x="1036.80" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="55.8" y="405" width="0.2" height="15.0" fill="rgb(248,162,31)" rx="2" ry="2" />
<text  x="58.81" y="415.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.123 (4 samples, 0.08%)</title><rect x="86.3" y="709" width="0.9" height="15.0" fill="rgb(241,219,37)" rx="2" ry="2" />
<text  x="89.27" y="719.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%)</title><rect x="1137.6" y="565" width="0.2" height="15.0" fill="rgb(224,137,5)" rx="2" ry="2" />
<text  x="1140.55" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="276.6" y="245" width="0.5" height="15.0" fill="rgb(248,51,10)" rx="2" ry="2" />
<text  x="279.60" y="255.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="501" width="0.7" height="15.0" fill="rgb(241,25,15)" rx="2" ry="2" />
<text  x="86.52" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="884.9" y="341" width="0.3" height="15.0" fill="rgb(213,81,35)" rx="2" ry="2" />
<text  x="887.92" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%)</title><rect x="292.4" y="341" width="0.5" height="15.0" fill="rgb(227,51,48)" rx="2" ry="2" />
<text  x="295.40" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="855.4" y="533" width="0.2" height="15.0" fill="rgb(239,106,48)" rx="2" ry="2" />
<text  x="858.38" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="723.2" y="549" width="0.5" height="15.0" fill="rgb(221,75,1)" rx="2" ry="2" />
<text  x="726.22" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (30 samples, 0.58%)</title><rect x="819.4" y="277" width="6.9" height="15.0" fill="rgb(207,216,50)" rx="2" ry="2" />
<text  x="822.42" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="883.5" y="405" width="0.3" height="15.0" fill="rgb(247,80,14)" rx="2" ry="2" />
<text  x="886.55" y="415.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="601.8" y="389" width="0.5" height="15.0" fill="rgb(217,13,18)" rx="2" ry="2" />
<text  x="604.83" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="990.1" y="437" width="3.8" height="15.0" fill="rgb(248,22,3)" rx="2" ry="2" />
<text  x="993.05" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="649.9" y="517" width="0.7" height="15.0" fill="rgb(233,86,46)" rx="2" ry="2" />
<text  x="652.93" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="570.2" y="437" width="0.9" height="15.0" fill="rgb(207,226,24)" rx="2" ry="2" />
<text  x="573.23" y="447.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%)</title><rect x="110.8" y="549" width="0.7" height="15.0" fill="rgb(238,168,16)" rx="2" ry="2" />
<text  x="113.78" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="745.0" y="581" width="0.2" height="15.0" fill="rgb(253,28,28)" rx="2" ry="2" />
<text  x="747.98" y="591.5" ></text>
</g>
<g >
<title>query_state::query_state (19 samples, 0.37%)</title><rect x="632.3" y="533" width="4.3" height="15.0" fill="rgb(227,49,54)" rx="2" ry="2" />
<text  x="635.29" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (12 samples, 0.23%)</title><rect x="452.3" y="293" width="2.7" height="15.0" fill="rgb(218,207,32)" rx="2" ry="2" />
<text  x="455.27" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="61.8" y="421" width="0.2" height="15.0" fill="rgb(214,77,30)" rx="2" ry="2" />
<text  x="64.76" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="109.6" y="485" width="0.7" height="15.0" fill="rgb(212,133,51)" rx="2" ry="2" />
<text  x="112.63" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="444.5" y="309" width="0.2" height="15.0" fill="rgb(250,143,21)" rx="2" ry="2" />
<text  x="447.48" y="319.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (9 samples, 0.17%)</title><rect x="1155.4" y="549" width="2.1" height="15.0" fill="rgb(230,155,7)" rx="2" ry="2" />
<text  x="1158.42" y="559.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="643.7" y="517" width="0.7" height="15.0" fill="rgb(252,62,19)" rx="2" ry="2" />
<text  x="646.75" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unimplemented::cause, std::pair&lt;unimplemented::cause const, bool&gt;, std::allocator&lt;std::pair&lt;unimplemented::cause const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unimplemented::cause&gt;, std::hash&lt;unimplemented::cause&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="80.5" y="565" width="0.3" height="15.0" fill="rgb(248,102,54)" rx="2" ry="2" />
<text  x="83.54" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="158.2" y="501" width="0.2" height="15.0" fill="rgb(207,70,51)" rx="2" ry="2" />
<text  x="161.19" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (3 samples, 0.06%)</title><rect x="73.0" y="485" width="0.7" height="15.0" fill="rgb(243,220,28)" rx="2" ry="2" />
<text  x="75.99" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="994.4" y="421" width="0.5" height="15.0" fill="rgb(243,118,49)" rx="2" ry="2" />
<text  x="997.40" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="47.3" y="293" width="0.3" height="15.0" fill="rgb(228,66,13)" rx="2" ry="2" />
<text  x="50.33" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="22.8" y="485" width="0.3" height="15.0" fill="rgb(235,101,10)" rx="2" ry="2" />
<text  x="25.83" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="82.8" y="549" width="0.3" height="15.0" fill="rgb(217,103,17)" rx="2" ry="2" />
<text  x="85.83" y="559.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1121.1" y="293" width="0.2" height="15.0" fill="rgb(228,188,29)" rx="2" ry="2" />
<text  x="1124.06" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (7 samples, 0.14%)</title><rect x="759.2" y="421" width="1.6" height="15.0" fill="rgb(233,195,13)" rx="2" ry="2" />
<text  x="762.18" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1122.7" y="325" width="0.4" height="15.0" fill="rgb(249,144,3)" rx="2" ry="2" />
<text  x="1125.66" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="318.3" y="373" width="0.2" height="15.0" fill="rgb(208,222,9)" rx="2" ry="2" />
<text  x="321.28" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="745.9" y="469" width="0.2" height="15.0" fill="rgb(207,80,0)" rx="2" ry="2" />
<text  x="748.90" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="855.6" y="533" width="0.2" height="15.0" fill="rgb(217,15,4)" rx="2" ry="2" />
<text  x="858.61" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="56.3" y="389" width="0.2" height="15.0" fill="rgb(227,141,51)" rx="2" ry="2" />
<text  x="59.27" y="399.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.2" y="597" width="0.3" height="15.0" fill="rgb(210,201,13)" rx="2" ry="2" />
<text  x="13.23" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="108.0" y="581" width="0.3" height="15.0" fill="rgb(253,225,51)" rx="2" ry="2" />
<text  x="111.03" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (585 samples, 11.35%)</title><rect x="952.7" y="517" width="134.0" height="15.0" fill="rgb(213,96,25)" rx="2" ry="2" />
<text  x="955.72" y="527.5" >cql3::statements..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="883.5" y="421" width="0.3" height="15.0" fill="rgb(212,28,18)" rx="2" ry="2" />
<text  x="886.55" y="431.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="639.4" y="501" width="0.2" height="15.0" fill="rgb(237,214,23)" rx="2" ry="2" />
<text  x="642.39" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="18.2" y="421" width="0.3" height="15.0" fill="rgb(245,228,8)" rx="2" ry="2" />
<text  x="21.25" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.12%)</title><rect x="714.1" y="549" width="1.3" height="15.0" fill="rgb(240,152,26)" rx="2" ry="2" />
<text  x="717.06" y="559.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(236,216,15)" rx="2" ry="2" />
<text  x="13.69" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="54.7" y="293" width="0.2" height="15.0" fill="rgb(231,136,28)" rx="2" ry="2" />
<text  x="57.66" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="783.9" y="453" width="0.5" height="15.0" fill="rgb(237,173,44)" rx="2" ry="2" />
<text  x="786.92" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (265 samples, 5.14%)</title><rect x="220.9" y="325" width="60.7" height="15.0" fill="rgb(237,227,29)" rx="2" ry="2" />
<text  x="223.94" y="335.5" >partit..</text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (18 samples, 0.35%)</title><rect x="70.9" y="517" width="4.1" height="15.0" fill="rgb(247,58,36)" rx="2" ry="2" />
<text  x="73.92" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (12 samples, 0.23%)</title><rect x="581.0" y="453" width="2.7" height="15.0" fill="rgb(220,164,23)" rx="2" ry="2" />
<text  x="583.99" y="463.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (12 samples, 0.23%)</title><rect x="772.7" y="421" width="2.7" height="15.0" fill="rgb(232,208,1)" rx="2" ry="2" />
<text  x="775.69" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="313.7" y="389" width="0.2" height="15.0" fill="rgb(209,3,26)" rx="2" ry="2" />
<text  x="316.70" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="879.0" y="597" width="0.2" height="15.0" fill="rgb(232,201,3)" rx="2" ry="2" />
<text  x="881.97" y="607.5" ></text>
</g>
<g >
<title>_ZN8sstables14stats_metadata13describe_typeIZNS_5writeIS0_NS_11file_writerEEEvNS_21sstable_version_typesERT0_RKT_EUlDpOT_E_EEDaS4_S7_ (1 samples, 0.02%)</title><rect x="10.2" y="453" width="0.3" height="15.0" fill="rgb(237,52,34)" rx="2" ry="2" />
<text  x="13.23" y="463.5" ></text>
</g>
<g >
<title>log_heap&lt;logalloc::segment_descriptor, logalloc::segment_descriptor_hist_options&gt;::adjust_up (1 samples, 0.02%)</title><rect x="1137.6" y="197" width="0.2" height="15.0" fill="rgb(222,202,9)" rx="2" ry="2" />
<text  x="1140.55" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="44.6" y="325" width="0.4" height="15.0" fill="rgb(249,221,34)" rx="2" ry="2" />
<text  x="47.58" y="335.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="556.7" y="437" width="0.2" height="15.0" fill="rgb(212,47,50)" rx="2" ry="2" />
<text  x="559.71" y="447.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="110.3" y="485" width="0.2" height="15.0" fill="rgb(246,22,31)" rx="2" ry="2" />
<text  x="113.32" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="949.3" y="501" width="0.2" height="15.0" fill="rgb(232,121,23)" rx="2" ry="2" />
<text  x="952.28" y="511.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (124 samples, 2.41%)</title><rect x="389.5" y="277" width="28.4" height="15.0" fill="rgb(225,179,29)" rx="2" ry="2" />
<text  x="392.51" y="287.5" >wr..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="421" width="0.2" height="15.0" fill="rgb(211,19,33)" rx="2" ry="2" />
<text  x="113.32" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="39.1" y="373" width="0.2" height="15.0" fill="rgb(229,136,36)" rx="2" ry="2" />
<text  x="42.09" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.08%)</title><rect x="653.4" y="485" width="0.9" height="15.0" fill="rgb(213,126,46)" rx="2" ry="2" />
<text  x="656.37" y="495.5" ></text>
</g>
<g >
<title>auth::service::start (1 samples, 0.02%)</title><rect x="718.6" y="581" width="0.3" height="15.0" fill="rgb(229,137,16)" rx="2" ry="2" />
<text  x="721.64" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="967.8" y="437" width="0.7" height="15.0" fill="rgb(227,224,18)" rx="2" ry="2" />
<text  x="970.83" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%)</title><rect x="198.3" y="325" width="0.7" height="15.0" fill="rgb(220,47,32)" rx="2" ry="2" />
<text  x="201.27" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%)</title><rect x="137.3" y="549" width="0.5" height="15.0" fill="rgb(229,44,26)" rx="2" ry="2" />
<text  x="140.34" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="920.0" y="437" width="0.2" height="15.0" fill="rgb(221,55,18)" rx="2" ry="2" />
<text  x="922.97" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (4 samples, 0.08%)</title><rect x="717.7" y="581" width="0.9" height="15.0" fill="rgb(236,126,13)" rx="2" ry="2" />
<text  x="720.73" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.6" y="325" width="0.3" height="15.0" fill="rgb(205,217,30)" rx="2" ry="2" />
<text  x="112.63" y="335.5" ></text>
</g>
<g >
<title>perf_simple_que (5,150 samples, 99.96%)</title><rect x="10.0" y="741" width="1179.5" height="15.0" fill="rgb(205,216,10)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >perf_simple_que</text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.0" y="453" width="0.2" height="15.0" fill="rgb(216,82,36)" rx="2" ry="2" />
<text  x="67.97" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="993.3" y="357" width="0.4" height="15.0" fill="rgb(221,180,38)" rx="2" ry="2" />
<text  x="996.26" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="806.1" y="341" width="0.7" height="15.0" fill="rgb(219,79,51)" rx="2" ry="2" />
<text  x="809.13" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="1120.1" y="277" width="0.5" height="15.0" fill="rgb(226,69,21)" rx="2" ry="2" />
<text  x="1123.14" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="1043.2" y="405" width="0.9" height="15.0" fill="rgb(221,5,48)" rx="2" ry="2" />
<text  x="1046.19" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (3 samples, 0.06%)</title><rect x="30.4" y="357" width="0.7" height="15.0" fill="rgb(215,72,49)" rx="2" ry="2" />
<text  x="33.38" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%)</title><rect x="270.0" y="197" width="1.3" height="15.0" fill="rgb(227,29,15)" rx="2" ry="2" />
<text  x="272.96" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (48 samples, 0.93%)</title><rect x="535.9" y="357" width="11.0" height="15.0" fill="rgb(213,47,6)" rx="2" ry="2" />
<text  x="538.87" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="85.6" y="485" width="0.2" height="15.0" fill="rgb(211,73,32)" rx="2" ry="2" />
<text  x="88.58" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (70 samples, 1.36%)</title><rect x="728.9" y="597" width="16.1" height="15.0" fill="rgb(236,2,38)" rx="2" ry="2" />
<text  x="731.95" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (4 samples, 0.08%)</title><rect x="862.0" y="517" width="0.9" height="15.0" fill="rgb(216,36,34)" rx="2" ry="2" />
<text  x="865.02" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (7 samples, 0.14%)</title><rect x="158.4" y="501" width="1.6" height="15.0" fill="rgb(215,183,24)" rx="2" ry="2" />
<text  x="161.42" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (8 samples, 0.16%)</title><rect x="773.6" y="389" width="1.8" height="15.0" fill="rgb(222,173,25)" rx="2" ry="2" />
<text  x="776.61" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (24 samples, 0.47%)</title><rect x="578.2" y="485" width="5.5" height="15.0" fill="rgb(234,176,20)" rx="2" ry="2" />
<text  x="581.24" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1081.4" y="453" width="0.3" height="15.0" fill="rgb(212,223,19)" rx="2" ry="2" />
<text  x="1084.44" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.3" y="261" width="0.2" height="15.0" fill="rgb(208,214,6)" rx="2" ry="2" />
<text  x="45.29" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.10%)</title><rect x="686.6" y="549" width="1.1" height="15.0" fill="rgb(250,91,48)" rx="2" ry="2" />
<text  x="689.58" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="830.4" y="309" width="0.2" height="15.0" fill="rgb(212,105,1)" rx="2" ry="2" />
<text  x="833.41" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="798.1" y="469" width="0.2" height="15.0" fill="rgb(228,104,14)" rx="2" ry="2" />
<text  x="801.12" y="479.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (2 samples, 0.04%)</title><rect x="1189.5" y="709" width="0.5" height="15.0" fill="rgb(206,216,17)" rx="2" ry="2" />
<text  x="1192.54" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (12 samples, 0.23%)</title><rect x="685.7" y="565" width="2.7" height="15.0" fill="rgb(209,44,30)" rx="2" ry="2" />
<text  x="688.66" y="575.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%)</title><rect x="757.6" y="501" width="0.2" height="15.0" fill="rgb(228,149,33)" rx="2" ry="2" />
<text  x="760.58" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="73.2" y="389" width="0.2" height="15.0" fill="rgb(245,208,7)" rx="2" ry="2" />
<text  x="76.21" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="229.6" y="229" width="0.5" height="15.0" fill="rgb(244,146,52)" rx="2" ry="2" />
<text  x="232.65" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (4 samples, 0.08%)</title><rect x="1133.9" y="309" width="0.9" height="15.0" fill="rgb(223,209,47)" rx="2" ry="2" />
<text  x="1136.89" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="702.4" y="565" width="0.4" height="15.0" fill="rgb(246,145,36)" rx="2" ry="2" />
<text  x="705.38" y="575.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (4 samples, 0.08%)</title><rect x="611.5" y="469" width="0.9" height="15.0" fill="rgb(211,73,14)" rx="2" ry="2" />
<text  x="614.45" y="479.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (7 samples, 0.14%)</title><rect x="800.4" y="421" width="1.6" height="15.0" fill="rgb(244,198,2)" rx="2" ry="2" />
<text  x="803.41" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="81.9" y="549" width="0.2" height="15.0" fill="rgb(225,45,36)" rx="2" ry="2" />
<text  x="84.92" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1118.5" y="533" width="0.7" height="15.0" fill="rgb(234,198,39)" rx="2" ry="2" />
<text  x="1121.54" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1166.6" y="277" width="0.3" height="15.0" fill="rgb(240,24,13)" rx="2" ry="2" />
<text  x="1169.64" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="836.8" y="437" width="0.3" height="15.0" fill="rgb(243,151,53)" rx="2" ry="2" />
<text  x="839.82" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="17.8" y="581" width="0.2" height="15.0" fill="rgb(211,215,13)" rx="2" ry="2" />
<text  x="20.79" y="591.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="388.1" y="277" width="0.3" height="15.0" fill="rgb(215,0,39)" rx="2" ry="2" />
<text  x="391.14" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="108.9" y="437" width="0.3" height="15.0" fill="rgb(243,84,40)" rx="2" ry="2" />
<text  x="111.94" y="447.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="1135.7" y="261" width="0.5" height="15.0" fill="rgb(239,154,15)" rx="2" ry="2" />
<text  x="1138.72" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="324.2" y="421" width="0.5" height="15.0" fill="rgb(209,140,29)" rx="2" ry="2" />
<text  x="327.24" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (12 samples, 0.23%)</title><rect x="709.9" y="549" width="2.8" height="15.0" fill="rgb(246,36,16)" rx="2" ry="2" />
<text  x="712.94" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="792.6" y="437" width="0.2" height="15.0" fill="rgb(215,177,32)" rx="2" ry="2" />
<text  x="795.62" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.17%)</title><rect x="261.5" y="213" width="2.0" height="15.0" fill="rgb(252,191,4)" rx="2" ry="2" />
<text  x="264.48" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="879.7" y="597" width="0.4" height="15.0" fill="rgb(235,150,23)" rx="2" ry="2" />
<text  x="882.65" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="524.6" y="277" width="0.3" height="15.0" fill="rgb(233,62,29)" rx="2" ry="2" />
<text  x="527.65" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (6 samples, 0.12%)</title><rect x="24.0" y="309" width="1.3" height="15.0" fill="rgb(250,225,34)" rx="2" ry="2" />
<text  x="26.97" y="319.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (1 samples, 0.02%)</title><rect x="719.6" y="565" width="0.2" height="15.0" fill="rgb(215,224,48)" rx="2" ry="2" />
<text  x="722.56" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="991.7" y="389" width="0.2" height="15.0" fill="rgb(212,23,50)" rx="2" ry="2" />
<text  x="994.65" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="880.1" y="405" width="0.2" height="15.0" fill="rgb(253,200,31)" rx="2" ry="2" />
<text  x="883.11" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (16 samples, 0.31%)</title><rect x="275.7" y="261" width="3.6" height="15.0" fill="rgb(254,13,13)" rx="2" ry="2" />
<text  x="278.68" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (32 samples, 0.62%)</title><rect x="68.9" y="549" width="7.3" height="15.0" fill="rgb(232,144,45)" rx="2" ry="2" />
<text  x="71.86" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="84.4" y="405" width="0.3" height="15.0" fill="rgb(213,67,38)" rx="2" ry="2" />
<text  x="87.44" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (24 samples, 0.47%)</title><rect x="1017.5" y="309" width="5.5" height="15.0" fill="rgb(238,184,13)" rx="2" ry="2" />
<text  x="1020.53" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="1046.9" y="357" width="0.2" height="15.0" fill="rgb(225,60,15)" rx="2" ry="2" />
<text  x="1049.85" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="226.4" y="245" width="0.3" height="15.0" fill="rgb(223,69,30)" rx="2" ry="2" />
<text  x="229.44" y="255.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="52.6" y="229" width="0.2" height="15.0" fill="rgb(223,204,8)" rx="2" ry="2" />
<text  x="55.60" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="705.8" y="549" width="0.5" height="15.0" fill="rgb(223,140,45)" rx="2" ry="2" />
<text  x="708.82" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="867.3" y="485" width="0.4" height="15.0" fill="rgb(213,64,11)" rx="2" ry="2" />
<text  x="870.29" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1081.9" y="469" width="0.7" height="15.0" fill="rgb(224,188,30)" rx="2" ry="2" />
<text  x="1084.89" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (146 samples, 2.83%)</title><rect x="230.1" y="229" width="33.4" height="15.0" fill="rgb(250,11,18)" rx="2" ry="2" />
<text  x="233.10" y="239.5" >co..</text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="110.3" y="453" width="0.2" height="15.0" fill="rgb(213,65,39)" rx="2" ry="2" />
<text  x="113.32" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (32 samples, 0.62%)</title><rect x="68.9" y="533" width="7.3" height="15.0" fill="rgb(220,18,16)" rx="2" ry="2" />
<text  x="71.86" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (59 samples, 1.15%)</title><rect x="763.3" y="517" width="13.5" height="15.0" fill="rgb(252,81,51)" rx="2" ry="2" />
<text  x="766.30" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (4 samples, 0.08%)</title><rect x="546.9" y="373" width="0.9" height="15.0" fill="rgb(228,88,22)" rx="2" ry="2" />
<text  x="549.86" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="88.1" y="613" width="0.2" height="15.0" fill="rgb(209,209,25)" rx="2" ry="2" />
<text  x="91.10" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (1 samples, 0.02%)</title><rect x="1167.8" y="565" width="0.2" height="15.0" fill="rgb(254,132,23)" rx="2" ry="2" />
<text  x="1170.78" y="575.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.10%)</title><rect x="76.2" y="549" width="1.1" height="15.0" fill="rgb(252,100,36)" rx="2" ry="2" />
<text  x="79.19" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.10%)</title><rect x="800.9" y="405" width="1.1" height="15.0" fill="rgb(231,211,17)" rx="2" ry="2" />
<text  x="803.87" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="911.7" y="453" width="0.7" height="15.0" fill="rgb(217,206,2)" rx="2" ry="2" />
<text  x="914.72" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="109.4" y="517" width="0.2" height="15.0" fill="rgb(216,41,42)" rx="2" ry="2" />
<text  x="112.40" y="527.5" ></text>
</g>
<g >
<title>schema::get_column_definition (3 samples, 0.06%)</title><rect x="75.0" y="517" width="0.7" height="15.0" fill="rgb(246,75,28)" rx="2" ry="2" />
<text  x="78.05" y="527.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="577.1" y="469" width="1.1" height="15.0" fill="rgb(218,6,6)" rx="2" ry="2" />
<text  x="580.10" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="879.0" y="565" width="0.2" height="15.0" fill="rgb(207,132,15)" rx="2" ry="2" />
<text  x="881.97" y="575.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="18.2" y="309" width="0.3" height="15.0" fill="rgb(216,216,24)" rx="2" ry="2" />
<text  x="21.25" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="530.6" y="405" width="0.5" height="15.0" fill="rgb(251,162,33)" rx="2" ry="2" />
<text  x="533.60" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1098.2" y="501" width="0.2" height="15.0" fill="rgb(227,103,7)" rx="2" ry="2" />
<text  x="1101.16" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1125.2" y="325" width="0.2" height="15.0" fill="rgb(208,4,49)" rx="2" ry="2" />
<text  x="1128.18" y="335.5" ></text>
</g>
<g >
<title>schema_mutations::copy_to (1 samples, 0.02%)</title><rect x="718.6" y="341" width="0.3" height="15.0" fill="rgb(242,170,33)" rx="2" ry="2" />
<text  x="721.64" y="351.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (13 samples, 0.25%)</title><rect x="926.4" y="453" width="3.0" height="15.0" fill="rgb(226,45,25)" rx="2" ry="2" />
<text  x="929.38" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="44.6" y="261" width="0.4" height="15.0" fill="rgb(249,161,4)" rx="2" ry="2" />
<text  x="47.58" y="271.5" ></text>
</g>
<g >
<title>row_tombstone::apply (3 samples, 0.06%)</title><rect x="443.8" y="309" width="0.7" height="15.0" fill="rgb(237,87,8)" rx="2" ry="2" />
<text  x="446.80" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="914.9" y="405" width="0.3" height="15.0" fill="rgb(246,213,46)" rx="2" ry="2" />
<text  x="917.93" y="415.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1166.0" y="597" width="0.2" height="15.0" fill="rgb(207,163,19)" rx="2" ry="2" />
<text  x="1168.95" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="420.2" y="245" width="0.2" height="15.0" fill="rgb(207,31,15)" rx="2" ry="2" />
<text  x="423.21" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.02%)</title><rect x="25.1" y="293" width="0.2" height="15.0" fill="rgb(235,169,31)" rx="2" ry="2" />
<text  x="28.12" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="75.7" y="421" width="0.3" height="15.0" fill="rgb(244,215,46)" rx="2" ry="2" />
<text  x="78.73" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="44.6" y="293" width="0.4" height="15.0" fill="rgb(249,141,31)" rx="2" ry="2" />
<text  x="47.58" y="303.5" ></text>
</g>
<g >
<title>seastar::recursive_touch_directory (1 samples, 0.02%)</title><rect x="82.6" y="485" width="0.2" height="15.0" fill="rgb(223,132,13)" rx="2" ry="2" />
<text  x="85.60" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="746.8" y="549" width="0.2" height="15.0" fill="rgb(244,120,31)" rx="2" ry="2" />
<text  x="749.81" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (17 samples, 0.33%)</title><rect x="948.6" y="517" width="3.9" height="15.0" fill="rgb(232,135,21)" rx="2" ry="2" />
<text  x="951.59" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="642.4" y="533" width="0.2" height="15.0" fill="rgb(220,217,0)" rx="2" ry="2" />
<text  x="645.37" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (5 samples, 0.10%)</title><rect x="71.6" y="469" width="1.2" height="15.0" fill="rgb(246,87,25)" rx="2" ry="2" />
<text  x="74.61" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="854.2" y="453" width="0.5" height="15.0" fill="rgb(226,220,29)" rx="2" ry="2" />
<text  x="857.23" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="879.0" y="549" width="0.2" height="15.0" fill="rgb(215,38,37)" rx="2" ry="2" />
<text  x="881.97" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (26 samples, 0.50%)</title><rect x="648.6" y="533" width="5.9" height="15.0" fill="rgb(245,90,27)" rx="2" ry="2" />
<text  x="651.56" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.1" y="293" width="0.5" height="15.0" fill="rgb(246,152,34)" rx="2" ry="2" />
<text  x="58.12" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="541.8" y="277" width="0.7" height="15.0" fill="rgb(226,27,17)" rx="2" ry="2" />
<text  x="544.82" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="62.2" y="469" width="0.2" height="15.0" fill="rgb(234,79,29)" rx="2" ry="2" />
<text  x="65.22" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (13 samples, 0.25%)</title><rect x="512.7" y="373" width="3.0" height="15.0" fill="rgb(230,86,30)" rx="2" ry="2" />
<text  x="515.74" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (5 samples, 0.10%)</title><rect x="1030.6" y="357" width="1.1" height="15.0" fill="rgb(210,202,16)" rx="2" ry="2" />
<text  x="1033.59" y="367.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="746.8" y="181" width="0.2" height="15.0" fill="rgb(246,63,30)" rx="2" ry="2" />
<text  x="749.81" y="191.5" ></text>
</g>
<g >
<title>timerfd_settime (1 samples, 0.02%)</title><rect x="1167.6" y="533" width="0.2" height="15.0" fill="rgb(205,136,16)" rx="2" ry="2" />
<text  x="1170.55" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="161.4" y="517" width="0.2" height="15.0" fill="rgb(227,97,53)" rx="2" ry="2" />
<text  x="164.39" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="755.7" y="549" width="0.3" height="15.0" fill="rgb(252,200,52)" rx="2" ry="2" />
<text  x="758.75" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="21.7" y="357" width="0.2" height="15.0" fill="rgb(234,143,5)" rx="2" ry="2" />
<text  x="24.68" y="367.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (1 samples, 0.02%)</title><rect x="1032.2" y="357" width="0.2" height="15.0" fill="rgb(237,131,37)" rx="2" ry="2" />
<text  x="1035.19" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (11 samples, 0.21%)</title><rect x="985.5" y="421" width="2.5" height="15.0" fill="rgb(226,106,38)" rx="2" ry="2" />
<text  x="988.47" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="618.3" y="437" width="0.3" height="15.0" fill="rgb(240,170,2)" rx="2" ry="2" />
<text  x="621.32" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="64.3" y="453" width="0.4" height="15.0" fill="rgb(250,27,6)" rx="2" ry="2" />
<text  x="67.28" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="898.2" y="517" width="0.5" height="15.0" fill="rgb(243,56,37)" rx="2" ry="2" />
<text  x="901.21" y="527.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (12 samples, 0.23%)</title><rect x="513.0" y="357" width="2.7" height="15.0" fill="rgb(225,201,14)" rx="2" ry="2" />
<text  x="515.97" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_service_level_statement, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.7" y="469" width="0.2" height="15.0" fill="rgb(219,225,27)" rx="2" ry="2" />
<text  x="65.68" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="699.2" y="565" width="0.2" height="15.0" fill="rgb(249,210,30)" rx="2" ry="2" />
<text  x="702.17" y="575.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="884.7" y="357" width="0.2" height="15.0" fill="rgb(213,47,47)" rx="2" ry="2" />
<text  x="887.69" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="81.0" y="613" width="0.2" height="15.0" fill="rgb(229,134,26)" rx="2" ry="2" />
<text  x="84.00" y="623.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="773.4" y="405" width="2.0" height="15.0" fill="rgb(249,155,37)" rx="2" ry="2" />
<text  x="776.38" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="440.8" y="261" width="0.2" height="15.0" fill="rgb(248,227,26)" rx="2" ry="2" />
<text  x="443.82" y="271.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (6 samples, 0.12%)</title><rect x="69.3" y="485" width="1.4" height="15.0" fill="rgb(208,182,3)" rx="2" ry="2" />
<text  x="72.32" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (7 samples, 0.14%)</title><rect x="824.5" y="245" width="1.6" height="15.0" fill="rgb(230,175,38)" rx="2" ry="2" />
<text  x="827.46" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="199.9" y="341" width="0.4" height="15.0" fill="rgb(254,169,1)" rx="2" ry="2" />
<text  x="202.87" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="371.2" y="261" width="0.2" height="15.0" fill="rgb(221,87,32)" rx="2" ry="2" />
<text  x="374.19" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%)</title><rect x="577.1" y="453" width="0.9" height="15.0" fill="rgb(243,171,13)" rx="2" ry="2" />
<text  x="580.10" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="753.2" y="501" width="1.2" height="15.0" fill="rgb(245,103,5)" rx="2" ry="2" />
<text  x="756.23" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="106.0" y="581" width="0.4" height="15.0" fill="rgb(227,52,49)" rx="2" ry="2" />
<text  x="108.97" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="746.8" y="325" width="0.2" height="15.0" fill="rgb(244,221,36)" rx="2" ry="2" />
<text  x="749.81" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%)</title><rect x="664.4" y="565" width="0.4" height="15.0" fill="rgb(230,63,47)" rx="2" ry="2" />
<text  x="667.36" y="575.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="1002.0" y="373" width="0.2" height="15.0" fill="rgb(244,68,53)" rx="2" ry="2" />
<text  x="1004.96" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="329.3" y="405" width="0.2" height="15.0" fill="rgb(209,7,8)" rx="2" ry="2" />
<text  x="332.28" y="415.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (3 samples, 0.06%)</title><rect x="529.9" y="405" width="0.7" height="15.0" fill="rgb(251,8,46)" rx="2" ry="2" />
<text  x="532.91" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="181" width="0.5" height="15.0" fill="rgb(215,20,40)" rx="2" ry="2" />
<text  x="56.52" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%)</title><rect x="950.0" y="485" width="0.4" height="15.0" fill="rgb(243,146,51)" rx="2" ry="2" />
<text  x="952.97" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (194 samples, 3.77%)</title><rect x="995.1" y="421" width="44.4" height="15.0" fill="rgb(229,87,19)" rx="2" ry="2" />
<text  x="998.09" y="431.5" >serv..</text>
</g>
<g >
<title>__libc_start_main (4,719 samples, 91.60%)</title><rect x="87.2" y="725" width="1080.8" height="15.0" fill="rgb(237,189,21)" rx="2" ry="2" />
<text  x="90.19" y="735.5" >__libc_start_main</text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.02%)</title><rect x="74.8" y="437" width="0.2" height="15.0" fill="rgb(211,141,11)" rx="2" ry="2" />
<text  x="77.82" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="552.8" y="421" width="1.2" height="15.0" fill="rgb(223,78,19)" rx="2" ry="2" />
<text  x="555.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="288.3" y="277" width="0.2" height="15.0" fill="rgb(229,20,10)" rx="2" ry="2" />
<text  x="291.28" y="287.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1012.0" y="341" width="0.3" height="15.0" fill="rgb(245,71,20)" rx="2" ry="2" />
<text  x="1015.04" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="133" width="0.5" height="15.0" fill="rgb(244,90,22)" rx="2" ry="2" />
<text  x="56.52" y="143.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="982.3" y="453" width="0.2" height="15.0" fill="rgb(222,197,5)" rx="2" ry="2" />
<text  x="985.26" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="567.5" y="421" width="0.2" height="15.0" fill="rgb(211,121,37)" rx="2" ry="2" />
<text  x="570.48" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (12 samples, 0.23%)</title><rect x="758.0" y="485" width="2.8" height="15.0" fill="rgb(205,104,13)" rx="2" ry="2" />
<text  x="761.04" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%)</title><rect x="718.2" y="373" width="0.4" height="15.0" fill="rgb(232,158,48)" rx="2" ry="2" />
<text  x="721.18" y="383.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%)</title><rect x="1128.8" y="261" width="0.5" height="15.0" fill="rgb(251,194,23)" rx="2" ry="2" />
<text  x="1131.85" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (9 samples, 0.17%)</title><rect x="58.8" y="421" width="2.0" height="15.0" fill="rgb(227,119,39)" rx="2" ry="2" />
<text  x="61.78" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="881.9" y="469" width="0.3" height="15.0" fill="rgb(243,161,49)" rx="2" ry="2" />
<text  x="884.94" y="479.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="883.5" y="453" width="0.3" height="15.0" fill="rgb(233,223,27)" rx="2" ry="2" />
<text  x="886.55" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="805.7" y="357" width="1.1" height="15.0" fill="rgb(221,144,50)" rx="2" ry="2" />
<text  x="808.68" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="804.3" y="421" width="0.2" height="15.0" fill="rgb(217,81,34)" rx="2" ry="2" />
<text  x="807.30" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="45.7" y="309" width="0.5" height="15.0" fill="rgb(208,75,33)" rx="2" ry="2" />
<text  x="48.73" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="809.1" y="341" width="1.2" height="15.0" fill="rgb(227,200,47)" rx="2" ry="2" />
<text  x="812.11" y="351.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (32 samples, 0.62%)</title><rect x="517.8" y="373" width="7.3" height="15.0" fill="rgb(250,131,17)" rx="2" ry="2" />
<text  x="520.78" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="658.9" y="501" width="0.2" height="15.0" fill="rgb(234,75,43)" rx="2" ry="2" />
<text  x="661.86" y="511.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="1123.1" y="309" width="0.3" height="15.0" fill="rgb(245,41,24)" rx="2" ry="2" />
<text  x="1126.12" y="319.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.2" y="661" width="0.3" height="15.0" fill="rgb(254,137,15)" rx="2" ry="2" />
<text  x="13.23" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::_M_realloc_insert&lt;mutation const&amp;&gt; (1 samples, 0.02%)</title><rect x="718.6" y="325" width="0.3" height="15.0" fill="rgb(248,209,49)" rx="2" ry="2" />
<text  x="721.64" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%)</title><rect x="886.1" y="341" width="0.4" height="15.0" fill="rgb(206,49,28)" rx="2" ry="2" />
<text  x="889.07" y="351.5" ></text>
</g>
<g >
<title>boost::signals2::signal&lt;void  (1 samples, 0.02%)</title><rect x="81.9" y="709" width="0.2" height="15.0" fill="rgb(237,21,34)" rx="2" ry="2" />
<text  x="84.92" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1081.2" y="453" width="0.2" height="15.0" fill="rgb(246,155,0)" rx="2" ry="2" />
<text  x="1084.21" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.0" y="469" width="0.2" height="15.0" fill="rgb(226,92,10)" rx="2" ry="2" />
<text  x="67.97" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (11 samples, 0.21%)</title><rect x="78.0" y="549" width="2.5" height="15.0" fill="rgb(237,9,45)" rx="2" ry="2" />
<text  x="81.02" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="669.4" y="581" width="0.9" height="15.0" fill="rgb(236,126,53)" rx="2" ry="2" />
<text  x="672.40" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (10 samples, 0.19%)</title><rect x="652.0" y="501" width="2.3" height="15.0" fill="rgb(222,43,47)" rx="2" ry="2" />
<text  x="654.99" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (537 samples, 10.42%)</title><rect x="346.0" y="501" width="123.0" height="15.0" fill="rgb(248,168,46)" rx="2" ry="2" />
<text  x="349.00" y="511.5" >seastar::future..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%)</title><rect x="50.5" y="373" width="0.3" height="15.0" fill="rgb(224,14,20)" rx="2" ry="2" />
<text  x="53.54" y="383.5" ></text>
</g>
<g >
<title>compression_parameters::get_options (1 samples, 0.02%)</title><rect x="110.5" y="501" width="0.3" height="15.0" fill="rgb(240,83,40)" rx="2" ry="2" />
<text  x="113.55" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.23%)</title><rect x="100.7" y="565" width="2.7" height="15.0" fill="rgb(242,206,27)" rx="2" ry="2" />
<text  x="103.70" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (9 samples, 0.17%)</title><rect x="24.0" y="373" width="2.0" height="15.0" fill="rgb(216,97,9)" rx="2" ry="2" />
<text  x="26.97" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="880.1" y="565" width="0.2" height="15.0" fill="rgb(248,104,6)" rx="2" ry="2" />
<text  x="883.11" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1046.4" y="373" width="0.5" height="15.0" fill="rgb(224,149,10)" rx="2" ry="2" />
<text  x="1049.39" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="562.9" y="405" width="0.2" height="15.0" fill="rgb(248,172,54)" rx="2" ry="2" />
<text  x="565.90" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1151.3" y="469" width="0.9" height="15.0" fill="rgb(212,50,53)" rx="2" ry="2" />
<text  x="1154.29" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="49.4" y="389" width="0.2" height="15.0" fill="rgb(221,95,30)" rx="2" ry="2" />
<text  x="52.39" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="109.6" y="533" width="0.7" height="15.0" fill="rgb(242,3,22)" rx="2" ry="2" />
<text  x="112.63" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="588.5" y="517" width="0.3" height="15.0" fill="rgb(238,9,27)" rx="2" ry="2" />
<text  x="591.55" y="527.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="443.8" y="293" width="0.2" height="15.0" fill="rgb(222,76,1)" rx="2" ry="2" />
<text  x="446.80" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1048.2" y="421" width="0.5" height="15.0" fill="rgb(214,204,5)" rx="2" ry="2" />
<text  x="1051.23" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="820.8" y="229" width="0.2" height="15.0" fill="rgb(247,154,1)" rx="2" ry="2" />
<text  x="823.79" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="683.4" y="517" width="0.4" height="15.0" fill="rgb(225,217,44)" rx="2" ry="2" />
<text  x="686.37" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="674.7" y="517" width="0.2" height="15.0" fill="rgb(252,70,3)" rx="2" ry="2" />
<text  x="677.67" y="527.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="1137.6" y="213" width="0.2" height="15.0" fill="rgb(218,91,45)" rx="2" ry="2" />
<text  x="1140.55" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%)</title><rect x="450.4" y="341" width="0.3" height="15.0" fill="rgb(238,41,8)" rx="2" ry="2" />
<text  x="453.44" y="351.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1133.9" y="277" width="0.2" height="15.0" fill="rgb(249,79,10)" rx="2" ry="2" />
<text  x="1136.89" y="287.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="60.8" y="421" width="0.3" height="15.0" fill="rgb(225,18,13)" rx="2" ry="2" />
<text  x="63.85" y="431.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="189.6" y="373" width="0.2" height="15.0" fill="rgb(230,77,36)" rx="2" ry="2" />
<text  x="192.57" y="383.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::tomb (1 samples, 0.02%)</title><rect x="1125.4" y="341" width="0.2" height="15.0" fill="rgb(244,64,34)" rx="2" ry="2" />
<text  x="1128.41" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="671.9" y="581" width="0.7" height="15.0" fill="rgb(252,17,38)" rx="2" ry="2" />
<text  x="674.92" y="591.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%)</title><rect x="18.9" y="517" width="0.3" height="15.0" fill="rgb(212,56,39)" rx="2" ry="2" />
<text  x="21.93" y="527.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="110.8" y="373" width="0.4" height="15.0" fill="rgb(236,134,20)" rx="2" ry="2" />
<text  x="113.78" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="718.6" y="437" width="0.3" height="15.0" fill="rgb(205,114,40)" rx="2" ry="2" />
<text  x="721.64" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="541.1" y="277" width="0.7" height="15.0" fill="rgb(218,178,11)" rx="2" ry="2" />
<text  x="544.14" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="43.2" y="373" width="0.2" height="15.0" fill="rgb(222,127,5)" rx="2" ry="2" />
<text  x="46.21" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_WHERE (1 samples, 0.02%)</title><rect x="36.1" y="357" width="0.2" height="15.0" fill="rgb(220,86,41)" rx="2" ry="2" />
<text  x="39.11" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.4" y="261" width="0.2" height="15.0" fill="rgb(234,161,5)" rx="2" ry="2" />
<text  x="63.39" y="271.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="81.9" y="517" width="0.2" height="15.0" fill="rgb(229,107,22)" rx="2" ry="2" />
<text  x="84.92" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_access (181 samples, 3.51%)</title><rect x="798.3" y="469" width="41.5" height="15.0" fill="rgb(251,64,9)" rx="2" ry="2" />
<text  x="801.35" y="479.5" >ser..</text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="688.4" y="581" width="2.1" height="15.0" fill="rgb(227,18,23)" rx="2" ry="2" />
<text  x="691.41" y="591.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (13 samples, 0.25%)</title><rect x="564.5" y="405" width="3.0" height="15.0" fill="rgb(219,171,3)" rx="2" ry="2" />
<text  x="567.50" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (16 samples, 0.31%)</title><rect x="209.5" y="325" width="3.7" height="15.0" fill="rgb(219,112,50)" rx="2" ry="2" />
<text  x="212.49" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="352.6" y="341" width="0.7" height="15.0" fill="rgb(215,151,47)" rx="2" ry="2" />
<text  x="355.64" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="686.3" y="549" width="0.3" height="15.0" fill="rgb(236,125,9)" rx="2" ry="2" />
<text  x="689.35" y="559.5" ></text>
</g>
<g >
<title>sstables::sstable::write_components (1 samples, 0.02%)</title><rect x="10.2" y="629" width="0.3" height="15.0" fill="rgb(227,49,33)" rx="2" ry="2" />
<text  x="13.23" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="829.5" y="341" width="1.4" height="15.0" fill="rgb(215,112,35)" rx="2" ry="2" />
<text  x="832.50" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="49.4" y="405" width="0.2" height="15.0" fill="rgb(249,58,10)" rx="2" ry="2" />
<text  x="52.39" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="727.6" y="549" width="0.2" height="15.0" fill="rgb(236,10,52)" rx="2" ry="2" />
<text  x="730.57" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="109.6" y="373" width="0.7" height="15.0" fill="rgb(214,105,12)" rx="2" ry="2" />
<text  x="112.63" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="879.2" y="597" width="0.5" height="15.0" fill="rgb(246,28,3)" rx="2" ry="2" />
<text  x="882.20" y="607.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="759.4" y="405" width="0.2" height="15.0" fill="rgb(208,183,14)" rx="2" ry="2" />
<text  x="762.41" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="55.3" y="165" width="0.3" height="15.0" fill="rgb(220,92,13)" rx="2" ry="2" />
<text  x="58.35" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (20 samples, 0.39%)</title><rect x="721.6" y="581" width="4.6" height="15.0" fill="rgb(207,217,43)" rx="2" ry="2" />
<text  x="724.62" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (24 samples, 0.47%)</title><rect x="250.7" y="133" width="5.5" height="15.0" fill="rgb(247,28,3)" rx="2" ry="2" />
<text  x="253.72" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="24.0" y="341" width="1.3" height="15.0" fill="rgb(254,107,35)" rx="2" ry="2" />
<text  x="26.97" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="692.3" y="581" width="0.5" height="15.0" fill="rgb(231,2,12)" rx="2" ry="2" />
<text  x="695.30" y="591.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="457.1" y="293" width="0.2" height="15.0" fill="rgb(246,140,22)" rx="2" ry="2" />
<text  x="460.08" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="1026.9" y="293" width="0.3" height="15.0" fill="rgb(230,7,41)" rx="2" ry="2" />
<text  x="1029.93" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (7 samples, 0.14%)</title><rect x="455.7" y="309" width="1.6" height="15.0" fill="rgb(234,114,37)" rx="2" ry="2" />
<text  x="458.71" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (44 samples, 0.85%)</title><rect x="46.9" y="437" width="10.1" height="15.0" fill="rgb(239,144,51)" rx="2" ry="2" />
<text  x="49.88" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1144.4" y="565" width="0.5" height="15.0" fill="rgb(217,10,4)" rx="2" ry="2" />
<text  x="1147.42" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%)</title><rect x="61.1" y="405" width="0.4" height="15.0" fill="rgb(236,29,44)" rx="2" ry="2" />
<text  x="64.08" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::close (151 samples, 2.93%)</title><rect x="588.8" y="533" width="34.6" height="15.0" fill="rgb(254,229,7)" rx="2" ry="2" />
<text  x="591.78" y="543.5" >qu..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="795.4" y="469" width="1.1" height="15.0" fill="rgb(251,16,24)" rx="2" ry="2" />
<text  x="798.37" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (178 samples, 3.45%)</title><rect x="998.5" y="405" width="40.8" height="15.0" fill="rgb(234,181,8)" rx="2" ry="2" />
<text  x="1001.52" y="415.5" >ser..</text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="885.2" y="309" width="0.2" height="15.0" fill="rgb(237,30,11)" rx="2" ry="2" />
<text  x="888.15" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1163.2" y="533" width="0.2" height="15.0" fill="rgb(254,25,1)" rx="2" ry="2" />
<text  x="1166.20" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="748.6" y="597" width="0.3" height="15.0" fill="rgb(230,43,45)" rx="2" ry="2" />
<text  x="751.65" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="1047.3" y="357" width="0.2" height="15.0" fill="rgb(220,162,41)" rx="2" ry="2" />
<text  x="1050.31" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="585.8" y="501" width="0.9" height="15.0" fill="rgb(252,14,41)" rx="2" ry="2" />
<text  x="588.80" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="60.4" y="229" width="0.2" height="15.0" fill="rgb(234,173,18)" rx="2" ry="2" />
<text  x="63.39" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::has_supporting_index (1 samples, 0.02%)</title><rect x="71.4" y="485" width="0.2" height="15.0" fill="rgb(230,99,46)" rx="2" ry="2" />
<text  x="74.38" y="495.5" ></text>
</g>
<g >
<title>query::result_set_row::get_nonnull&lt;int&gt; (1 samples, 0.02%)</title><rect x="109.4" y="485" width="0.2" height="15.0" fill="rgb(235,175,24)" rx="2" ry="2" />
<text  x="112.40" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="505.6" y="421" width="0.5" height="15.0" fill="rgb(220,110,43)" rx="2" ry="2" />
<text  x="508.64" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="49.6" y="325" width="0.3" height="15.0" fill="rgb(238,171,2)" rx="2" ry="2" />
<text  x="52.62" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="718.9" y="533" width="0.2" height="15.0" fill="rgb(240,194,18)" rx="2" ry="2" />
<text  x="721.87" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="572.5" y="485" width="0.7" height="15.0" fill="rgb(241,157,33)" rx="2" ry="2" />
<text  x="575.52" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="872.6" y="517" width="1.3" height="15.0" fill="rgb(248,74,29)" rx="2" ry="2" />
<text  x="875.55" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="357.7" y="325" width="0.2" height="15.0" fill="rgb(251,164,44)" rx="2" ry="2" />
<text  x="360.68" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (6 samples, 0.12%)</title><rect x="753.0" y="533" width="1.4" height="15.0" fill="rgb(211,169,30)" rx="2" ry="2" />
<text  x="756.00" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="565.9" y="325" width="0.2" height="15.0" fill="rgb(247,143,10)" rx="2" ry="2" />
<text  x="568.87" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="69.1" y="469" width="0.2" height="15.0" fill="rgb(236,219,36)" rx="2" ry="2" />
<text  x="72.09" y="479.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (3 samples, 0.06%)</title><rect x="1133.0" y="229" width="0.7" height="15.0" fill="rgb(224,9,22)" rx="2" ry="2" />
<text  x="1135.97" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="665.0" y="565" width="0.3" height="15.0" fill="rgb(212,73,30)" rx="2" ry="2" />
<text  x="668.05" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="962.1" y="485" width="0.2" height="15.0" fill="rgb(234,42,39)" rx="2" ry="2" />
<text  x="965.11" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%)</title><rect x="339.8" y="373" width="0.7" height="15.0" fill="rgb(214,59,54)" rx="2" ry="2" />
<text  x="342.81" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="22.4" y="485" width="0.2" height="15.0" fill="rgb(221,90,0)" rx="2" ry="2" />
<text  x="25.37" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="28.8" y="357" width="0.2" height="15.0" fill="rgb(254,48,53)" rx="2" ry="2" />
<text  x="31.78" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="1137.6" y="325" width="0.2" height="15.0" fill="rgb(241,25,54)" rx="2" ry="2" />
<text  x="1140.55" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(233,117,49)" rx="2" ry="2" />
<text  x="13.69" y="527.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="108.9" y="405" width="0.3" height="15.0" fill="rgb(229,63,18)" rx="2" ry="2" />
<text  x="111.94" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="349.4" y="373" width="0.7" height="15.0" fill="rgb(207,144,9)" rx="2" ry="2" />
<text  x="352.43" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (34 samples, 0.66%)</title><rect x="1102.0" y="517" width="7.8" height="15.0" fill="rgb(214,48,37)" rx="2" ry="2" />
<text  x="1105.05" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_large_cells (1 samples, 0.02%)</title><rect x="84.4" y="421" width="0.3" height="15.0" fill="rgb(210,218,33)" rx="2" ry="2" />
<text  x="87.44" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="770.4" y="453" width="0.2" height="15.0" fill="rgb(238,60,7)" rx="2" ry="2" />
<text  x="773.40" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1056.0" y="405" width="0.5" height="15.0" fill="rgb(215,168,45)" rx="2" ry="2" />
<text  x="1059.01" y="415.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="1166.0" y="581" width="0.2" height="15.0" fill="rgb(254,194,14)" rx="2" ry="2" />
<text  x="1168.95" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (1 samples, 0.02%)</title><rect x="68.2" y="533" width="0.2" height="15.0" fill="rgb(252,103,8)" rx="2" ry="2" />
<text  x="71.18" y="543.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%)</title><rect x="615.8" y="453" width="0.2" height="15.0" fill="rgb(237,11,33)" rx="2" ry="2" />
<text  x="618.80" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="285.1" y="213" width="0.2" height="15.0" fill="rgb(232,125,5)" rx="2" ry="2" />
<text  x="288.07" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="501.5" y="373" width="0.2" height="15.0" fill="rgb(206,135,34)" rx="2" ry="2" />
<text  x="504.51" y="383.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::create_metadata_tables_if_missing (1 samples, 0.02%)</title><rect x="718.6" y="549" width="0.3" height="15.0" fill="rgb(217,217,33)" rx="2" ry="2" />
<text  x="721.64" y="559.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="718.6" y="293" width="0.3" height="15.0" fill="rgb(210,166,14)" rx="2" ry="2" />
<text  x="721.64" y="303.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (4 samples, 0.08%)</title><rect x="19.6" y="597" width="0.9" height="15.0" fill="rgb(234,157,46)" rx="2" ry="2" />
<text  x="22.62" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (3 samples, 0.06%)</title><rect x="388.6" y="277" width="0.7" height="15.0" fill="rgb(241,160,8)" rx="2" ry="2" />
<text  x="391.60" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (32 samples, 0.62%)</title><rect x="1127.9" y="421" width="7.4" height="15.0" fill="rgb(212,220,47)" rx="2" ry="2" />
<text  x="1130.93" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;do_io_check&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="665.0" y="501" width="0.3" height="15.0" fill="rgb(238,25,46)" rx="2" ry="2" />
<text  x="668.05" y="511.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="79.6" y="293" width="0.3" height="15.0" fill="rgb(238,86,9)" rx="2" ry="2" />
<text  x="82.63" y="303.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="1166.6" y="325" width="0.3" height="15.0" fill="rgb(228,226,24)" rx="2" ry="2" />
<text  x="1169.64" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="520.5" y="293" width="0.7" height="15.0" fill="rgb(246,68,28)" rx="2" ry="2" />
<text  x="523.52" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="77.8" y="533" width="0.2" height="15.0" fill="rgb(245,98,2)" rx="2" ry="2" />
<text  x="80.80" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::syscall_result&lt;int&gt;  (1 samples, 0.02%)</title><rect x="746.6" y="517" width="0.2" height="15.0" fill="rgb(216,209,9)" rx="2" ry="2" />
<text  x="749.58" y="527.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%)</title><rect x="26.3" y="373" width="0.2" height="15.0" fill="rgb(222,112,11)" rx="2" ry="2" />
<text  x="29.26" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="84.4" y="501" width="0.7" height="15.0" fill="rgb(252,177,2)" rx="2" ry="2" />
<text  x="87.44" y="511.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1137.6" y="597" width="0.2" height="15.0" fill="rgb(236,27,5)" rx="2" ry="2" />
<text  x="1140.55" y="607.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (2 samples, 0.04%)</title><rect x="740.4" y="517" width="0.5" height="15.0" fill="rgb(205,225,19)" rx="2" ry="2" />
<text  x="743.40" y="527.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (2 samples, 0.04%)</title><rect x="109.9" y="309" width="0.4" height="15.0" fill="rgb(218,92,35)" rx="2" ry="2" />
<text  x="112.86" y="319.5" ></text>
</g>
<g >
<title>difference&lt;std::map, utils::UUID, schema_mutations, std::equal_to&lt;schema_mutations&gt;, std::less&lt;utils::UUID&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, schema_mutations&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="108.9" y="549" width="0.5" height="15.0" fill="rgb(223,188,53)" rx="2" ry="2" />
<text  x="111.94" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.4" y="245" width="0.3" height="15.0" fill="rgb(253,28,5)" rx="2" ry="2" />
<text  x="27.43" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="674.9" y="469" width="0.2" height="15.0" fill="rgb(224,183,20)" rx="2" ry="2" />
<text  x="677.90" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="18.9" y="469" width="0.3" height="15.0" fill="rgb(241,165,21)" rx="2" ry="2" />
<text  x="21.93" y="479.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1122.0" y="309" width="0.4" height="15.0" fill="rgb(245,71,16)" rx="2" ry="2" />
<text  x="1124.98" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="658.6" y="501" width="0.3" height="15.0" fill="rgb(240,214,17)" rx="2" ry="2" />
<text  x="661.63" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="521.9" y="293" width="2.5" height="15.0" fill="rgb(213,69,4)" rx="2" ry="2" />
<text  x="524.90" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%)</title><rect x="20.5" y="549" width="0.3" height="15.0" fill="rgb(227,135,53)" rx="2" ry="2" />
<text  x="23.54" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="108.9" y="261" width="0.3" height="15.0" fill="rgb(232,3,41)" rx="2" ry="2" />
<text  x="111.94" y="271.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (3 samples, 0.06%)</title><rect x="932.3" y="453" width="0.7" height="15.0" fill="rgb(243,163,22)" rx="2" ry="2" />
<text  x="935.33" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="468.8" y="485" width="0.2" height="15.0" fill="rgb(235,68,46)" rx="2" ry="2" />
<text  x="471.76" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (57 samples, 1.11%)</title><rect x="294.7" y="325" width="13.0" height="15.0" fill="rgb(247,184,29)" rx="2" ry="2" />
<text  x="297.69" y="335.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="886.8" y="373" width="0.2" height="15.0" fill="rgb(218,9,49)" rx="2" ry="2" />
<text  x="889.75" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="468.3" y="469" width="0.2" height="15.0" fill="rgb(225,132,44)" rx="2" ry="2" />
<text  x="471.30" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (3 samples, 0.06%)</title><rect x="206.1" y="357" width="0.6" height="15.0" fill="rgb(237,144,34)" rx="2" ry="2" />
<text  x="209.06" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="865.0" y="437" width="0.5" height="15.0" fill="rgb(254,215,17)" rx="2" ry="2" />
<text  x="868.00" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,012 samples, 19.64%)</title><rect x="887.7" y="581" width="231.8" height="15.0" fill="rgb(217,140,38)" rx="2" ry="2" />
<text  x="890.67" y="591.5" >seastar::concrete_execution_st..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="57.6" y="421" width="0.5" height="15.0" fill="rgb(209,15,5)" rx="2" ry="2" />
<text  x="60.64" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%)</title><rect x="822.9" y="261" width="3.4" height="15.0" fill="rgb(211,126,37)" rx="2" ry="2" />
<text  x="825.85" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="754.1" y="485" width="0.3" height="15.0" fill="rgb(246,210,15)" rx="2" ry="2" />
<text  x="757.14" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.14%)</title><rect x="40.9" y="437" width="1.6" height="15.0" fill="rgb(221,192,29)" rx="2" ry="2" />
<text  x="43.92" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume (192 samples, 3.73%)</title><rect x="375.1" y="309" width="44.0" height="15.0" fill="rgb(232,82,33)" rx="2" ry="2" />
<text  x="378.09" y="319.5" >quer..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="99.3" y="581" width="0.3" height="15.0" fill="rgb(211,95,3)" rx="2" ry="2" />
<text  x="102.32" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%)</title><rect x="718.2" y="357" width="0.4" height="15.0" fill="rgb(209,80,7)" rx="2" ry="2" />
<text  x="721.18" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (4 samples, 0.08%)</title><rect x="344.4" y="485" width="0.9" height="15.0" fill="rgb(221,167,23)" rx="2" ry="2" />
<text  x="347.39" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (5 samples, 0.10%)</title><rect x="1151.1" y="501" width="1.1" height="15.0" fill="rgb(237,43,21)" rx="2" ry="2" />
<text  x="1154.06" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="280.7" y="277" width="0.5" height="15.0" fill="rgb(240,171,5)" rx="2" ry="2" />
<text  x="283.72" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="745.9" y="453" width="0.2" height="15.0" fill="rgb(244,24,10)" rx="2" ry="2" />
<text  x="748.90" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1109.8" y="517" width="0.3" height="15.0" fill="rgb(250,68,50)" rx="2" ry="2" />
<text  x="1112.84" y="527.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="60.6" y="341" width="0.2" height="15.0" fill="rgb(244,132,17)" rx="2" ry="2" />
<text  x="63.62" y="351.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%)</title><rect x="618.6" y="437" width="2.2" height="15.0" fill="rgb(251,95,9)" rx="2" ry="2" />
<text  x="621.55" y="447.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%)</title><rect x="18.5" y="645" width="0.4" height="15.0" fill="rgb(243,133,52)" rx="2" ry="2" />
<text  x="21.47" y="655.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="910.3" y="389" width="0.5" height="15.0" fill="rgb(208,180,18)" rx="2" ry="2" />
<text  x="913.35" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="51.7" y="309" width="0.2" height="15.0" fill="rgb(233,104,10)" rx="2" ry="2" />
<text  x="54.68" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (9 samples, 0.17%)</title><rect x="995.8" y="373" width="2.0" height="15.0" fill="rgb(241,214,17)" rx="2" ry="2" />
<text  x="998.78" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="485" width="8.0" height="15.0" fill="rgb(247,227,54)" rx="2" ry="2" />
<text  x="1122.46" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (25 samples, 0.49%)</title><rect x="881.7" y="501" width="5.7" height="15.0" fill="rgb(236,169,27)" rx="2" ry="2" />
<text  x="884.72" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (42 samples, 0.82%)</title><rect x="364.3" y="309" width="9.6" height="15.0" fill="rgb(253,1,52)" rx="2" ry="2" />
<text  x="367.32" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="1045.0" y="405" width="2.5" height="15.0" fill="rgb(233,220,7)" rx="2" ry="2" />
<text  x="1048.02" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_tokenStartCharPositionInLine (1 samples, 0.02%)</title><rect x="26.9" y="373" width="0.3" height="15.0" fill="rgb(226,106,45)" rx="2" ry="2" />
<text  x="29.95" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="840.7" y="469" width="0.2" height="15.0" fill="rgb(218,78,42)" rx="2" ry="2" />
<text  x="843.72" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (263 samples, 5.10%)</title><rect x="20.5" y="597" width="60.3" height="15.0" fill="rgb(237,49,33)" rx="2" ry="2" />
<text  x="23.54" y="607.5" >cql3::..</text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="547.8" y="373" width="0.2" height="15.0" fill="rgb(226,125,36)" rx="2" ry="2" />
<text  x="550.78" y="383.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="1164.8" y="565" width="0.2" height="15.0" fill="rgb(209,180,21)" rx="2" ry="2" />
<text  x="1167.81" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="498.8" y="357" width="0.2" height="15.0" fill="rgb(250,62,13)" rx="2" ry="2" />
<text  x="501.77" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="636.2" y="485" width="0.2" height="15.0" fill="rgb(224,188,19)" rx="2" ry="2" />
<text  x="639.19" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.4" y="277" width="0.2" height="15.0" fill="rgb(243,24,2)" rx="2" ry="2" />
<text  x="63.39" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;service::storage_service&gt;, seastar::sharded&lt;service::storage_service&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;database&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::gossiper&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, service::storage_service_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_manager&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;cdc::generation_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;repair_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::raft_group_registry&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::endpoint_lifecycle_notifier&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="261" width="0.2" height="15.0" fill="rgb(229,82,16)" rx="2" ry="2" />
<text  x="749.81" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="583.3" y="389" width="0.2" height="15.0" fill="rgb(224,105,28)" rx="2" ry="2" />
<text  x="586.28" y="399.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="18.5" y="517" width="0.2" height="15.0" fill="rgb(227,161,7)" rx="2" ry="2" />
<text  x="21.47" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="384.2" y="261" width="0.3" height="15.0" fill="rgb(209,197,17)" rx="2" ry="2" />
<text  x="387.25" y="271.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="1129.5" y="213" width="0.3" height="15.0" fill="rgb(241,13,41)" rx="2" ry="2" />
<text  x="1132.53" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%)</title><rect x="585.1" y="485" width="0.5" height="15.0" fill="rgb(239,0,47)" rx="2" ry="2" />
<text  x="588.11" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="75.0" y="469" width="0.3" height="15.0" fill="rgb(226,143,27)" rx="2" ry="2" />
<text  x="78.05" y="479.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="29.5" y="341" width="0.2" height="15.0" fill="rgb(225,174,12)" rx="2" ry="2" />
<text  x="32.47" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="337.5" y="373" width="0.3" height="15.0" fill="rgb(233,229,42)" rx="2" ry="2" />
<text  x="340.52" y="383.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (2 samples, 0.04%)</title><rect x="1113.3" y="517" width="0.4" height="15.0" fill="rgb(211,47,1)" rx="2" ry="2" />
<text  x="1116.27" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="610.1" y="389" width="0.2" height="15.0" fill="rgb(253,6,14)" rx="2" ry="2" />
<text  x="613.08" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (4 samples, 0.08%)</title><rect x="102.3" y="517" width="0.9" height="15.0" fill="rgb(250,141,39)" rx="2" ry="2" />
<text  x="105.30" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%)</title><rect x="212.0" y="293" width="0.9" height="15.0" fill="rgb(244,224,34)" rx="2" ry="2" />
<text  x="215.01" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.10%)</title><rect x="838.7" y="405" width="1.1" height="15.0" fill="rgb(231,169,3)" rx="2" ry="2" />
<text  x="841.66" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="342.1" y="373" width="0.2" height="15.0" fill="rgb(213,98,42)" rx="2" ry="2" />
<text  x="345.10" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (4 samples, 0.08%)</title><rect x="819.9" y="229" width="0.9" height="15.0" fill="rgb(217,196,35)" rx="2" ry="2" />
<text  x="822.88" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1137.6" y="293" width="0.2" height="15.0" fill="rgb(220,178,40)" rx="2" ry="2" />
<text  x="1140.55" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="756.0" y="549" width="0.2" height="15.0" fill="rgb(247,213,21)" rx="2" ry="2" />
<text  x="758.97" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="18.2" y="453" width="0.3" height="15.0" fill="rgb(242,51,25)" rx="2" ry="2" />
<text  x="21.25" y="463.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%)</title><rect x="1137.6" y="549" width="0.2" height="15.0" fill="rgb(222,195,50)" rx="2" ry="2" />
<text  x="1140.55" y="559.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1126.3" y="357" width="0.3" height="15.0" fill="rgb(213,67,26)" rx="2" ry="2" />
<text  x="1129.33" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1100.4" y="501" width="0.5" height="15.0" fill="rgb(222,174,22)" rx="2" ry="2" />
<text  x="1103.45" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (3 samples, 0.06%)</title><rect x="1101.4" y="517" width="0.6" height="15.0" fill="rgb(240,159,30)" rx="2" ry="2" />
<text  x="1104.36" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (4 samples, 0.08%)</title><rect x="74.1" y="469" width="0.9" height="15.0" fill="rgb(220,88,43)" rx="2" ry="2" />
<text  x="77.13" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="915.6" y="469" width="0.5" height="15.0" fill="rgb(249,75,33)" rx="2" ry="2" />
<text  x="918.61" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="834.8" y="405" width="0.2" height="15.0" fill="rgb(221,136,47)" rx="2" ry="2" />
<text  x="837.76" y="415.5" ></text>
</g>
<g >
<title>row_cache::make_reader (43 samples, 0.83%)</title><rect x="557.9" y="437" width="9.8" height="15.0" fill="rgb(210,141,50)" rx="2" ry="2" />
<text  x="560.86" y="447.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,719 samples, 91.60%)</title><rect x="87.2" y="693" width="1080.8" height="15.0" fill="rgb(237,32,40)" rx="2" ry="2" />
<text  x="90.19" y="703.5" >seastar::app_template::run</text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="718.6" y="229" width="0.3" height="15.0" fill="rgb(251,189,40)" rx="2" ry="2" />
<text  x="721.64" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="106.4" y="469" width="0.3" height="15.0" fill="rgb(218,105,43)" rx="2" ry="2" />
<text  x="109.42" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (8 samples, 0.16%)</title><rect x="912.4" y="453" width="1.8" height="15.0" fill="rgb(243,9,14)" rx="2" ry="2" />
<text  x="915.41" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (20 samples, 0.39%)</title><rect x="488.0" y="373" width="4.6" height="15.0" fill="rgb(224,42,32)" rx="2" ry="2" />
<text  x="491.00" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="54.4" y="229" width="0.3" height="15.0" fill="rgb(206,6,41)" rx="2" ry="2" />
<text  x="57.43" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.12%)</title><rect x="839.8" y="485" width="1.4" height="15.0" fill="rgb(211,63,29)" rx="2" ry="2" />
<text  x="842.80" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6 samples, 0.12%)</title><rect x="777.7" y="501" width="1.4" height="15.0" fill="rgb(222,64,21)" rx="2" ry="2" />
<text  x="780.73" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%)</title><rect x="29.2" y="341" width="0.3" height="15.0" fill="rgb(216,90,40)" rx="2" ry="2" />
<text  x="32.24" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="60.4" y="373" width="0.2" height="15.0" fill="rgb(211,72,23)" rx="2" ry="2" />
<text  x="63.39" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="846.2" y="437" width="0.2" height="15.0" fill="rgb(222,82,9)" rx="2" ry="2" />
<text  x="849.22" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (18 samples, 0.35%)</title><rect x="1044.1" y="421" width="4.1" height="15.0" fill="rgb(234,84,28)" rx="2" ry="2" />
<text  x="1047.10" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="534.0" y="357" width="0.3" height="15.0" fill="rgb(221,18,4)" rx="2" ry="2" />
<text  x="537.04" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (5 samples, 0.10%)</title><rect x="816.9" y="309" width="1.1" height="15.0" fill="rgb(205,174,38)" rx="2" ry="2" />
<text  x="819.90" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.9" y="421" width="0.2" height="15.0" fill="rgb(236,38,22)" rx="2" ry="2" />
<text  x="82.86" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.10%)</title><rect x="124.7" y="533" width="1.2" height="15.0" fill="rgb(242,73,48)" rx="2" ry="2" />
<text  x="127.75" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="158.0" y="501" width="0.2" height="15.0" fill="rgb(238,171,42)" rx="2" ry="2" />
<text  x="160.96" y="511.5" ></text>
</g>
<g >
<title>backlog_controller::adjust (1 samples, 0.02%)</title><rect x="1167.3" y="533" width="0.3" height="15.0" fill="rgb(221,86,21)" rx="2" ry="2" />
<text  x="1170.33" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="1044.3" y="405" width="0.3" height="15.0" fill="rgb(206,225,44)" rx="2" ry="2" />
<text  x="1047.33" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="467.6" y="453" width="0.2" height="15.0" fill="rgb(244,121,51)" rx="2" ry="2" />
<text  x="470.62" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="83.5" y="549" width="0.7" height="15.0" fill="rgb(237,160,26)" rx="2" ry="2" />
<text  x="86.52" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="52.6" y="293" width="0.2" height="15.0" fill="rgb(214,9,27)" rx="2" ry="2" />
<text  x="55.60" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="18.5" y="501" width="0.2" height="15.0" fill="rgb(243,220,32)" rx="2" ry="2" />
<text  x="21.47" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="499.0" y="357" width="0.2" height="15.0" fill="rgb(220,76,54)" rx="2" ry="2" />
<text  x="501.99" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_create_node&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="110.5" y="469" width="0.3" height="15.0" fill="rgb(248,55,28)" rx="2" ry="2" />
<text  x="113.55" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="43.2" y="357" width="0.2" height="15.0" fill="rgb(235,213,44)" rx="2" ry="2" />
<text  x="46.21" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="987.8" y="389" width="0.2" height="15.0" fill="rgb(220,118,42)" rx="2" ry="2" />
<text  x="990.76" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1084.6" y="501" width="0.3" height="15.0" fill="rgb(206,149,9)" rx="2" ry="2" />
<text  x="1087.64" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (1 samples, 0.02%)</title><rect x="312.8" y="325" width="0.2" height="15.0" fill="rgb(216,180,41)" rx="2" ry="2" />
<text  x="315.79" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="73.7" y="485" width="0.2" height="15.0" fill="rgb(248,78,52)" rx="2" ry="2" />
<text  x="76.67" y="495.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="1141.7" y="581" width="0.7" height="15.0" fill="rgb(253,103,31)" rx="2" ry="2" />
<text  x="1144.67" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (6 samples, 0.12%)</title><rect x="624.7" y="517" width="1.4" height="15.0" fill="rgb(216,17,21)" rx="2" ry="2" />
<text  x="627.74" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="46.4" y="405" width="0.5" height="15.0" fill="rgb(234,121,39)" rx="2" ry="2" />
<text  x="49.42" y="415.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (18 samples, 0.35%)</title><rect x="863.6" y="517" width="4.1" height="15.0" fill="rgb(210,109,27)" rx="2" ry="2" />
<text  x="866.62" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.10%)</title><rect x="48.2" y="261" width="1.2" height="15.0" fill="rgb(234,178,41)" rx="2" ry="2" />
<text  x="51.25" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="718.9" y="501" width="0.2" height="15.0" fill="rgb(217,219,51)" rx="2" ry="2" />
<text  x="721.87" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (3 samples, 0.06%)</title><rect x="109.6" y="517" width="0.7" height="15.0" fill="rgb(207,195,53)" rx="2" ry="2" />
<text  x="112.63" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="468.5" y="469" width="0.3" height="15.0" fill="rgb(218,210,27)" rx="2" ry="2" />
<text  x="471.53" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="78.3" y="485" width="0.2" height="15.0" fill="rgb(221,96,15)" rx="2" ry="2" />
<text  x="81.25" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="1092.0" y="485" width="0.2" height="15.0" fill="rgb(208,88,29)" rx="2" ry="2" />
<text  x="1094.97" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="659.8" y="533" width="0.2" height="15.0" fill="rgb(222,31,40)" rx="2" ry="2" />
<text  x="662.78" y="543.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="833.8" y="405" width="1.0" height="15.0" fill="rgb(239,64,20)" rx="2" ry="2" />
<text  x="836.85" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1138.0" y="565" width="0.2" height="15.0" fill="rgb(218,37,16)" rx="2" ry="2" />
<text  x="1141.01" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="21.5" y="421" width="0.2" height="15.0" fill="rgb(254,22,22)" rx="2" ry="2" />
<text  x="24.45" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="675.1" y="533" width="0.3" height="15.0" fill="rgb(222,190,7)" rx="2" ry="2" />
<text  x="678.12" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (12 samples, 0.23%)</title><rect x="695.1" y="581" width="2.7" height="15.0" fill="rgb(225,56,28)" rx="2" ry="2" />
<text  x="698.05" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="849.7" y="485" width="0.2" height="15.0" fill="rgb(251,96,4)" rx="2" ry="2" />
<text  x="852.65" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="80.1" y="437" width="0.2" height="15.0" fill="rgb(206,62,35)" rx="2" ry="2" />
<text  x="83.09" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="874.8" y="565" width="0.3" height="15.0" fill="rgb(225,151,43)" rx="2" ry="2" />
<text  x="877.84" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,368 samples, 45.96%)</title><rect x="117.6" y="565" width="542.4" height="15.0" fill="rgb(223,42,22)" rx="2" ry="2" />
<text  x="120.65" y="575.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::truncate_statement*, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.6" y="437" width="0.2" height="15.0" fill="rgb(239,123,3)" rx="2" ry="2" />
<text  x="69.57" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="356.1" y="357" width="0.9" height="15.0" fill="rgb(236,148,28)" rx="2" ry="2" />
<text  x="359.08" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (50 samples, 0.97%)</title><rect x="27.2" y="373" width="11.4" height="15.0" fill="rgb(250,100,4)" rx="2" ry="2" />
<text  x="30.18" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="275.5" y="261" width="0.2" height="15.0" fill="rgb(251,180,49)" rx="2" ry="2" />
<text  x="278.45" y="271.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="263.8" y="229" width="0.2" height="15.0" fill="rgb(218,15,30)" rx="2" ry="2" />
<text  x="266.77" y="239.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (7 samples, 0.14%)</title><rect x="1111.0" y="501" width="1.6" height="15.0" fill="rgb(207,221,47)" rx="2" ry="2" />
<text  x="1113.98" y="511.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_output_stream (1 samples, 0.02%)</title><rect x="81.9" y="629" width="0.2" height="15.0" fill="rgb(250,158,49)" rx="2" ry="2" />
<text  x="84.92" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="825.8" y="165" width="0.3" height="15.0" fill="rgb(228,133,26)" rx="2" ry="2" />
<text  x="828.83" y="175.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%)</title><rect x="222.3" y="293" width="0.7" height="15.0" fill="rgb(216,209,12)" rx="2" ry="2" />
<text  x="225.32" y="303.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (2 samples, 0.04%)</title><rect x="622.9" y="501" width="0.5" height="15.0" fill="rgb(236,121,53)" rx="2" ry="2" />
<text  x="625.90" y="511.5" ></text>
</g>
<g >
<title>[libatomic.so.1.2.0] (1 samples, 0.02%)</title><rect x="745.2" y="581" width="0.2" height="15.0" fill="rgb(228,3,29)" rx="2" ry="2" />
<text  x="748.21" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (27 samples, 0.52%)</title><rect x="1061.1" y="373" width="6.1" height="15.0" fill="rgb(238,18,11)" rx="2" ry="2" />
<text  x="1064.05" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (21 samples, 0.41%)</title><rect x="1062.4" y="341" width="4.8" height="15.0" fill="rgb(224,170,20)" rx="2" ry="2" />
<text  x="1065.43" y="351.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (2 samples, 0.04%)</title><rect x="956.8" y="437" width="0.5" height="15.0" fill="rgb(216,132,44)" rx="2" ry="2" />
<text  x="959.84" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (4 samples, 0.08%)</title><rect x="885.6" y="405" width="0.9" height="15.0" fill="rgb(242,62,15)" rx="2" ry="2" />
<text  x="888.61" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="873.7" y="501" width="0.2" height="15.0" fill="rgb(251,155,42)" rx="2" ry="2" />
<text  x="876.70" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="844.8" y="373" width="0.7" height="15.0" fill="rgb(235,135,18)" rx="2" ry="2" />
<text  x="847.84" y="383.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (14 samples, 0.27%)</title><rect x="1176.7" y="709" width="3.2" height="15.0" fill="rgb(216,117,13)" rx="2" ry="2" />
<text  x="1179.72" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="744.8" y="581" width="0.2" height="15.0" fill="rgb(244,192,33)" rx="2" ry="2" />
<text  x="747.75" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (61 samples, 1.18%)</title><rect x="729.9" y="581" width="13.9" height="15.0" fill="rgb(207,29,45)" rx="2" ry="2" />
<text  x="732.86" y="591.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="858.4" y="469" width="0.2" height="15.0" fill="rgb(238,35,2)" rx="2" ry="2" />
<text  x="861.35" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (2 samples, 0.04%)</title><rect x="740.9" y="533" width="0.4" height="15.0" fill="rgb(206,158,20)" rx="2" ry="2" />
<text  x="743.86" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="691.6" y="565" width="0.2" height="15.0" fill="rgb(235,81,14)" rx="2" ry="2" />
<text  x="694.61" y="575.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%)</title><rect x="1189.5" y="677" width="0.3" height="15.0" fill="rgb(252,201,20)" rx="2" ry="2" />
<text  x="1192.54" y="687.5" ></text>
</g>
<g >
<title>ser::row_view::columns (2 samples, 0.04%)</title><rect x="1124.3" y="325" width="0.4" height="15.0" fill="rgb(242,54,26)" rx="2" ry="2" />
<text  x="1127.27" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="109.4" y="453" width="0.2" height="15.0" fill="rgb(230,116,2)" rx="2" ry="2" />
<text  x="112.40" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="22.4" y="501" width="0.2" height="15.0" fill="rgb(249,48,15)" rx="2" ry="2" />
<text  x="25.37" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="612.8" y="453" width="0.3" height="15.0" fill="rgb(243,16,6)" rx="2" ry="2" />
<text  x="615.83" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="60.6" y="325" width="0.2" height="15.0" fill="rgb(208,65,33)" rx="2" ry="2" />
<text  x="63.62" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1102.5" y="485" width="2.5" height="15.0" fill="rgb(252,65,30)" rx="2" ry="2" />
<text  x="1105.51" y="495.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="76.2" y="533" width="0.7" height="15.0" fill="rgb(244,196,10)" rx="2" ry="2" />
<text  x="79.19" y="543.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (4 samples, 0.08%)</title><rect x="778.2" y="485" width="0.9" height="15.0" fill="rgb(254,137,34)" rx="2" ry="2" />
<text  x="781.19" y="495.5" ></text>
</g>
<g >
<title>database::apply_in_memory (28 samples, 0.54%)</title><rect x="1119.7" y="389" width="6.4" height="15.0" fill="rgb(221,159,45)" rx="2" ry="2" />
<text  x="1122.69" y="399.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="111.9" y="597" width="0.3" height="15.0" fill="rgb(241,209,28)" rx="2" ry="2" />
<text  x="114.92" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="907.6" y="389" width="0.2" height="15.0" fill="rgb(209,228,13)" rx="2" ry="2" />
<text  x="910.60" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="325" width="0.3" height="15.0" fill="rgb(209,4,48)" rx="2" ry="2" />
<text  x="85.83" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="719.1" y="549" width="0.2" height="15.0" fill="rgb(224,101,8)" rx="2" ry="2" />
<text  x="722.10" y="559.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="75.3" y="453" width="0.2" height="15.0" fill="rgb(224,135,33)" rx="2" ry="2" />
<text  x="78.28" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="697.6" y="501" width="0.2" height="15.0" fill="rgb(234,184,54)" rx="2" ry="2" />
<text  x="700.57" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="944.7" y="501" width="0.2" height="15.0" fill="rgb(227,140,22)" rx="2" ry="2" />
<text  x="947.70" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="56.3" y="373" width="0.2" height="15.0" fill="rgb(222,185,38)" rx="2" ry="2" />
<text  x="59.27" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="613.5" y="453" width="1.2" height="15.0" fill="rgb(216,134,50)" rx="2" ry="2" />
<text  x="616.51" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="453" width="0.3" height="15.0" fill="rgb(244,154,15)" rx="2" ry="2" />
<text  x="1169.64" y="463.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="718.9" y="581" width="0.2" height="15.0" fill="rgb(238,10,29)" rx="2" ry="2" />
<text  x="721.87" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="854.2" y="469" width="0.5" height="15.0" fill="rgb(241,210,3)" rx="2" ry="2" />
<text  x="857.23" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.0" y="357" width="0.2" height="15.0" fill="rgb(235,228,14)" rx="2" ry="2" />
<text  x="56.98" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (39 samples, 0.76%)</title><rect x="720.0" y="597" width="8.9" height="15.0" fill="rgb(246,101,23)" rx="2" ry="2" />
<text  x="723.02" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (5 samples, 0.10%)</title><rect x="1135.3" y="341" width="1.1" height="15.0" fill="rgb(230,64,51)" rx="2" ry="2" />
<text  x="1138.26" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="885.2" y="325" width="0.2" height="15.0" fill="rgb(210,181,3)" rx="2" ry="2" />
<text  x="888.15" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1021.7" y="261" width="0.2" height="15.0" fill="rgb(225,189,7)" rx="2" ry="2" />
<text  x="1024.66" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="820.1" y="213" width="0.5" height="15.0" fill="rgb(225,170,36)" rx="2" ry="2" />
<text  x="823.10" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1057.2" y="421" width="0.2" height="15.0" fill="rgb(207,213,26)" rx="2" ry="2" />
<text  x="1060.16" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (8 samples, 0.16%)</title><rect x="419.1" y="309" width="1.8" height="15.0" fill="rgb(223,149,18)" rx="2" ry="2" />
<text  x="422.06" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="51.2" y="389" width="0.3" height="15.0" fill="rgb(243,149,43)" rx="2" ry="2" />
<text  x="54.23" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="467.4" y="437" width="0.2" height="15.0" fill="rgb(240,20,20)" rx="2" ry="2" />
<text  x="470.39" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="71.8" y="437" width="0.3" height="15.0" fill="rgb(222,203,35)" rx="2" ry="2" />
<text  x="74.84" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="628.6" y="485" width="0.3" height="15.0" fill="rgb(231,123,0)" rx="2" ry="2" />
<text  x="631.63" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="1046.2" y="389" width="0.9" height="15.0" fill="rgb(224,122,36)" rx="2" ry="2" />
<text  x="1049.16" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="46.9" y="421" width="0.2" height="15.0" fill="rgb(244,166,40)" rx="2" ry="2" />
<text  x="49.88" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%)</title><rect x="1031.7" y="357" width="0.5" height="15.0" fill="rgb(239,120,20)" rx="2" ry="2" />
<text  x="1034.74" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%)</title><rect x="882.4" y="437" width="0.2" height="15.0" fill="rgb(241,167,46)" rx="2" ry="2" />
<text  x="885.40" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="292.2" y="341" width="0.2" height="15.0" fill="rgb(250,148,24)" rx="2" ry="2" />
<text  x="295.17" y="351.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="936.2" y="437" width="0.9" height="15.0" fill="rgb(236,53,31)" rx="2" ry="2" />
<text  x="939.23" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="38.4" y="357" width="0.2" height="15.0" fill="rgb(235,86,41)" rx="2" ry="2" />
<text  x="41.40" y="367.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(232,87,18)" rx="2" ry="2" />
<text  x="13.69" y="559.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (8 samples, 0.16%)</title><rect x="846.4" y="469" width="1.9" height="15.0" fill="rgb(212,6,47)" rx="2" ry="2" />
<text  x="849.44" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="53" width="0.3" height="15.0" fill="rgb(230,2,29)" rx="2" ry="2" />
<text  x="56.75" y="63.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="54.4" y="181" width="0.3" height="15.0" fill="rgb(244,228,51)" rx="2" ry="2" />
<text  x="57.43" y="191.5" ></text>
</g>
<g >
<title>auth::get_permissions (124 samples, 2.41%)</title><rect x="805.0" y="405" width="28.4" height="15.0" fill="rgb(217,26,20)" rx="2" ry="2" />
<text  x="807.99" y="415.5" >au..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1086.2" y="469" width="0.3" height="15.0" fill="rgb(250,45,41)" rx="2" ry="2" />
<text  x="1089.25" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(241,99,31)" rx="2" ry="2" />
<text  x="13.69" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="331.6" y="437" width="0.4" height="15.0" fill="rgb(225,157,53)" rx="2" ry="2" />
<text  x="334.57" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="1099.3" y="517" width="0.2" height="15.0" fill="rgb(238,75,14)" rx="2" ry="2" />
<text  x="1102.30" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="809.3" y="325" width="0.3" height="15.0" fill="rgb(252,17,0)" rx="2" ry="2" />
<text  x="812.34" y="335.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (206 samples, 4.00%)</title><rect x="21.0" y="533" width="47.2" height="15.0" fill="rgb(247,111,43)" rx="2" ry="2" />
<text  x="23.99" y="543.5" >cql3..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="827.7" y="341" width="0.4" height="15.0" fill="rgb(231,103,29)" rx="2" ry="2" />
<text  x="830.66" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (18 samples, 0.35%)</title><rect x="451.6" y="309" width="4.1" height="15.0" fill="rgb(216,51,43)" rx="2" ry="2" />
<text  x="454.58" y="319.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="77.1" y="517" width="0.2" height="15.0" fill="rgb(221,68,1)" rx="2" ry="2" />
<text  x="80.11" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1055.8" y="389" width="0.2" height="15.0" fill="rgb(243,111,32)" rx="2" ry="2" />
<text  x="1058.78" y="399.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%)</title><rect x="29.7" y="357" width="0.2" height="15.0" fill="rgb(237,182,28)" rx="2" ry="2" />
<text  x="32.70" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="693.9" y="581" width="0.2" height="15.0" fill="rgb(216,139,38)" rx="2" ry="2" />
<text  x="696.91" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="37.9" y="309" width="0.3" height="15.0" fill="rgb(215,133,17)" rx="2" ry="2" />
<text  x="40.94" y="319.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="281.4" y="309" width="0.2" height="15.0" fill="rgb(234,200,30)" rx="2" ry="2" />
<text  x="284.41" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="41.6" y="373" width="0.5" height="15.0" fill="rgb(246,202,22)" rx="2" ry="2" />
<text  x="44.61" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="810.3" y="357" width="0.2" height="15.0" fill="rgb(234,27,51)" rx="2" ry="2" />
<text  x="813.26" y="367.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="111.0" y="357" width="0.2" height="15.0" fill="rgb(247,34,8)" rx="2" ry="2" />
<text  x="114.01" y="367.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="1123.4" y="325" width="0.2" height="15.0" fill="rgb(229,118,38)" rx="2" ry="2" />
<text  x="1126.35" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.37%)</title><rect x="282.1" y="309" width="4.3" height="15.0" fill="rgb(238,120,35)" rx="2" ry="2" />
<text  x="285.10" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="469.9" y="501" width="0.2" height="15.0" fill="rgb(243,126,13)" rx="2" ry="2" />
<text  x="472.91" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="1145.3" y="581" width="0.5" height="15.0" fill="rgb(224,201,27)" rx="2" ry="2" />
<text  x="1148.34" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="442.9" y="245" width="0.2" height="15.0" fill="rgb(210,180,18)" rx="2" ry="2" />
<text  x="445.88" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="45.0" y="373" width="0.5" height="15.0" fill="rgb(250,75,0)" rx="2" ry="2" />
<text  x="48.04" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="824.7" y="181" width="0.7" height="15.0" fill="rgb(227,8,37)" rx="2" ry="2" />
<text  x="827.69" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="657.5" y="533" width="0.2" height="15.0" fill="rgb(228,24,3)" rx="2" ry="2" />
<text  x="660.49" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="459.1" y="325" width="0.5" height="15.0" fill="rgb(229,184,36)" rx="2" ry="2" />
<text  x="462.14" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.4" y="469" width="0.2" height="15.0" fill="rgb(238,223,23)" rx="2" ry="2" />
<text  x="66.37" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1078.5" y="437" width="0.4" height="15.0" fill="rgb(226,65,31)" rx="2" ry="2" />
<text  x="1081.46" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (9 samples, 0.17%)</title><rect x="24.0" y="389" width="2.0" height="15.0" fill="rgb(235,183,25)" rx="2" ry="2" />
<text  x="26.97" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (3 samples, 0.06%)</title><rect x="637.1" y="533" width="0.7" height="15.0" fill="rgb(213,140,37)" rx="2" ry="2" />
<text  x="640.10" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(247,165,44)" rx="2" ry="2" />
<text  x="13.69" y="591.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="278.7" y="213" width="0.2" height="15.0" fill="rgb(254,182,20)" rx="2" ry="2" />
<text  x="281.66" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="843.7" y="421" width="2.5" height="15.0" fill="rgb(227,53,38)" rx="2" ry="2" />
<text  x="846.70" y="431.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::entry, std::function&lt;void  (1 samples, 0.02%)</title><rect x="81.9" y="581" width="0.2" height="15.0" fill="rgb(206,128,32)" rx="2" ry="2" />
<text  x="84.92" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="661.2" y="565" width="0.2" height="15.0" fill="rgb(240,48,50)" rx="2" ry="2" />
<text  x="664.15" y="575.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="308.0" y="325" width="0.4" height="15.0" fill="rgb(214,168,16)" rx="2" ry="2" />
<text  x="310.98" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (3 samples, 0.06%)</title><rect x="40.9" y="229" width="0.7" height="15.0" fill="rgb(211,171,39)" rx="2" ry="2" />
<text  x="43.92" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1129.3" y="245" width="0.2" height="15.0" fill="rgb(231,115,39)" rx="2" ry="2" />
<text  x="1132.31" y="255.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="550.1" y="421" width="0.2" height="15.0" fill="rgb(213,179,37)" rx="2" ry="2" />
<text  x="553.07" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="909.7" y="389" width="0.4" height="15.0" fill="rgb(232,60,19)" rx="2" ry="2" />
<text  x="912.66" y="399.5" ></text>
</g>
<g >
<title>auth::create_metadata_table_if_missing_impl (1 samples, 0.02%)</title><rect x="718.6" y="501" width="0.3" height="15.0" fill="rgb(218,90,25)" rx="2" ry="2" />
<text  x="721.64" y="511.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="1189.3" y="725" width="0.2" height="15.0" fill="rgb(215,28,17)" rx="2" ry="2" />
<text  x="1192.31" y="735.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="848.0" y="389" width="0.3" height="15.0" fill="rgb(211,197,48)" rx="2" ry="2" />
<text  x="851.05" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%)</title><rect x="755.5" y="549" width="0.2" height="15.0" fill="rgb(248,85,8)" rx="2" ry="2" />
<text  x="758.52" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="533" width="0.3" height="15.0" fill="rgb(225,122,25)" rx="2" ry="2" />
<text  x="1169.64" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%)</title><rect x="84.2" y="517" width="0.9" height="15.0" fill="rgb(248,52,14)" rx="2" ry="2" />
<text  x="87.21" y="527.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%)</title><rect x="82.8" y="485" width="0.3" height="15.0" fill="rgb(217,145,46)" rx="2" ry="2" />
<text  x="85.83" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (80 samples, 1.55%)</title><rect x="507.2" y="421" width="18.4" height="15.0" fill="rgb(220,148,48)" rx="2" ry="2" />
<text  x="510.24" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (32 samples, 0.62%)</title><rect x="904.2" y="437" width="7.3" height="15.0" fill="rgb(208,146,5)" rx="2" ry="2" />
<text  x="907.16" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="789.4" y="453" width="0.2" height="15.0" fill="rgb(210,159,18)" rx="2" ry="2" />
<text  x="792.41" y="463.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="17.6" y="581" width="0.2" height="15.0" fill="rgb(250,153,13)" rx="2" ry="2" />
<text  x="20.56" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="742.9" y="517" width="0.2" height="15.0" fill="rgb(238,8,34)" rx="2" ry="2" />
<text  x="745.92" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::storage_service (1 samples, 0.02%)</title><rect x="746.8" y="213" width="0.2" height="15.0" fill="rgb(213,88,19)" rx="2" ry="2" />
<text  x="749.81" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (3 samples, 0.06%)</title><rect x="320.6" y="389" width="0.7" height="15.0" fill="rgb(211,201,22)" rx="2" ry="2" />
<text  x="323.57" y="399.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%)</title><rect x="975.2" y="453" width="1.8" height="15.0" fill="rgb(232,199,54)" rx="2" ry="2" />
<text  x="978.16" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="45.7" y="245" width="0.5" height="15.0" fill="rgb(219,121,26)" rx="2" ry="2" />
<text  x="48.73" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%)</title><rect x="110.3" y="597" width="1.2" height="15.0" fill="rgb(221,190,47)" rx="2" ry="2" />
<text  x="113.32" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="57.6" y="341" width="0.5" height="15.0" fill="rgb(218,27,26)" rx="2" ry="2" />
<text  x="60.64" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="343.9" y="453" width="0.3" height="15.0" fill="rgb(214,43,4)" rx="2" ry="2" />
<text  x="346.94" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="830.9" y="341" width="0.2" height="15.0" fill="rgb(206,154,22)" rx="2" ry="2" />
<text  x="833.87" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="757.1" y="485" width="0.5" height="15.0" fill="rgb(216,102,48)" rx="2" ry="2" />
<text  x="760.12" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (10 samples, 0.19%)</title><rect x="187.5" y="389" width="2.3" height="15.0" fill="rgb(246,8,39)" rx="2" ry="2" />
<text  x="190.50" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="664.6" y="549" width="0.2" height="15.0" fill="rgb(237,209,11)" rx="2" ry="2" />
<text  x="667.59" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="891.3" y="565" width="0.5" height="15.0" fill="rgb(241,7,13)" rx="2" ry="2" />
<text  x="894.34" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="104.1" y="549" width="0.3" height="15.0" fill="rgb(209,186,37)" rx="2" ry="2" />
<text  x="107.13" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="337.8" y="357" width="2.0" height="15.0" fill="rgb(247,60,28)" rx="2" ry="2" />
<text  x="340.75" y="367.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%)</title><rect x="1133.2" y="197" width="0.2" height="15.0" fill="rgb(209,31,11)" rx="2" ry="2" />
<text  x="1136.20" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (12 samples, 0.23%)</title><rect x="767.0" y="469" width="2.7" height="15.0" fill="rgb(215,96,4)" rx="2" ry="2" />
<text  x="769.97" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="573.4" y="501" width="0.3" height="15.0" fill="rgb(206,8,3)" rx="2" ry="2" />
<text  x="576.43" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="834.8" y="421" width="0.2" height="15.0" fill="rgb(218,142,14)" rx="2" ry="2" />
<text  x="837.76" y="431.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="53.1" y="357" width="0.2" height="15.0" fill="rgb(252,137,5)" rx="2" ry="2" />
<text  x="56.06" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="18.2" y="597" width="0.3" height="15.0" fill="rgb(220,56,43)" rx="2" ry="2" />
<text  x="21.25" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="53.1" y="373" width="0.2" height="15.0" fill="rgb(234,8,8)" rx="2" ry="2" />
<text  x="56.06" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.2" y="693" width="0.3" height="15.0" fill="rgb(243,165,45)" rx="2" ry="2" />
<text  x="13.23" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1024.2" y="325" width="0.2" height="15.0" fill="rgb(236,206,39)" rx="2" ry="2" />
<text  x="1027.18" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="77.8" y="549" width="0.2" height="15.0" fill="rgb(242,175,50)" rx="2" ry="2" />
<text  x="80.80" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.12%)</title><rect x="788.0" y="421" width="1.4" height="15.0" fill="rgb(247,123,24)" rx="2" ry="2" />
<text  x="791.04" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (6 samples, 0.12%)</title><rect x="69.3" y="453" width="1.4" height="15.0" fill="rgb(224,57,0)" rx="2" ry="2" />
<text  x="72.32" y="463.5" ></text>
</g>
<g >
<title>sstables::sstable::create_data (1 samples, 0.02%)</title><rect x="18.9" y="613" width="0.3" height="15.0" fill="rgb(221,197,3)" rx="2" ry="2" />
<text  x="21.93" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1127.0" y="373" width="0.2" height="15.0" fill="rgb(253,34,47)" rx="2" ry="2" />
<text  x="1130.01" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="420.2" y="261" width="0.2" height="15.0" fill="rgb(216,62,2)" rx="2" ry="2" />
<text  x="423.21" y="271.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (3 samples, 0.06%)</title><rect x="411.5" y="245" width="0.7" height="15.0" fill="rgb(235,38,35)" rx="2" ry="2" />
<text  x="414.50" y="255.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1125.0" y="325" width="0.2" height="15.0" fill="rgb(222,15,49)" rx="2" ry="2" />
<text  x="1127.95" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%)</title><rect x="71.8" y="453" width="0.3" height="15.0" fill="rgb(251,148,1)" rx="2" ry="2" />
<text  x="74.84" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.1" y="469" width="0.2" height="15.0" fill="rgb(218,215,34)" rx="2" ry="2" />
<text  x="67.05" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="1079.6" y="453" width="1.4" height="15.0" fill="rgb(226,187,54)" rx="2" ry="2" />
<text  x="1082.60" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="58.6" y="389" width="0.2" height="15.0" fill="rgb(218,110,4)" rx="2" ry="2" />
<text  x="61.56" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="41.6" y="357" width="0.5" height="15.0" fill="rgb(243,186,1)" rx="2" ry="2" />
<text  x="44.61" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (508 samples, 9.86%)</title><rect x="349.0" y="469" width="116.3" height="15.0" fill="rgb(208,42,53)" rx="2" ry="2" />
<text  x="351.98" y="479.5" >flat_mutation_..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (15 samples, 0.29%)</title><rect x="920.2" y="469" width="3.4" height="15.0" fill="rgb(236,227,5)" rx="2" ry="2" />
<text  x="923.19" y="479.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="18.2" y="645" width="0.3" height="15.0" fill="rgb(251,169,9)" rx="2" ry="2" />
<text  x="21.25" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="745.0" y="597" width="0.2" height="15.0" fill="rgb(219,97,13)" rx="2" ry="2" />
<text  x="747.98" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="59.0" y="277" width="0.2" height="15.0" fill="rgb(244,52,34)" rx="2" ry="2" />
<text  x="62.01" y="287.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="717.5" y="469" width="0.2" height="15.0" fill="rgb(238,183,3)" rx="2" ry="2" />
<text  x="720.50" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%)</title><rect x="1131.8" y="229" width="0.9" height="15.0" fill="rgb(241,183,1)" rx="2" ry="2" />
<text  x="1134.82" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.7" y="341" width="0.4" height="15.0" fill="rgb(220,87,52)" rx="2" ry="2" />
<text  x="54.68" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="779.3" y="485" width="0.7" height="15.0" fill="rgb(250,153,9)" rx="2" ry="2" />
<text  x="782.34" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1124.7" y="293" width="0.3" height="15.0" fill="rgb(249,80,16)" rx="2" ry="2" />
<text  x="1127.72" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="62.0" y="469" width="0.2" height="15.0" fill="rgb(214,129,43)" rx="2" ry="2" />
<text  x="64.99" y="479.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a59683b929e6b30d9803453a6167c92c7df06c25] (1 samples, 0.02%)</title><rect x="1132.1" y="197" width="0.2" height="15.0" fill="rgb(227,114,43)" rx="2" ry="2" />
<text  x="1135.05" y="207.5" ></text>
</g>
<g >
<title>schema_mutations::operator== (2 samples, 0.04%)</title><rect x="108.9" y="533" width="0.5" height="15.0" fill="rgb(213,102,47)" rx="2" ry="2" />
<text  x="111.94" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="43.9" y="437" width="0.2" height="15.0" fill="rgb(214,214,37)" rx="2" ry="2" />
<text  x="46.90" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (10 samples, 0.19%)</title><rect x="78.3" y="517" width="2.2" height="15.0" fill="rgb(244,33,18)" rx="2" ry="2" />
<text  x="81.25" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="717.7" y="549" width="0.9" height="15.0" fill="rgb(242,137,14)" rx="2" ry="2" />
<text  x="720.73" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1130.9" y="405" width="0.2" height="15.0" fill="rgb(235,87,45)" rx="2" ry="2" />
<text  x="1133.91" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="854.9" y="469" width="0.2" height="15.0" fill="rgb(251,152,46)" rx="2" ry="2" />
<text  x="857.92" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="681.5" y="533" width="0.7" height="15.0" fill="rgb(250,112,25)" rx="2" ry="2" />
<text  x="684.54" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="932.6" y="437" width="0.2" height="15.0" fill="rgb(233,9,27)" rx="2" ry="2" />
<text  x="935.56" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="153.1" y="533" width="0.5" height="15.0" fill="rgb(212,144,5)" rx="2" ry="2" />
<text  x="156.15" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="1079.4" y="453" width="0.2" height="15.0" fill="rgb(240,160,41)" rx="2" ry="2" />
<text  x="1082.38" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (3 samples, 0.06%)</title><rect x="258.3" y="197" width="0.7" height="15.0" fill="rgb(238,192,21)" rx="2" ry="2" />
<text  x="261.28" y="207.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="885.4" y="309" width="0.2" height="15.0" fill="rgb(220,7,37)" rx="2" ry="2" />
<text  x="888.38" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="75.5" y="501" width="0.2" height="15.0" fill="rgb(227,121,44)" rx="2" ry="2" />
<text  x="78.50" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.14%)</title><rect x="44.6" y="405" width="1.6" height="15.0" fill="rgb(218,227,6)" rx="2" ry="2" />
<text  x="47.58" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;int&gt;  (1 samples, 0.02%)</title><rect x="746.8" y="565" width="0.2" height="15.0" fill="rgb(215,51,7)" rx="2" ry="2" />
<text  x="749.81" y="575.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%)</title><rect x="18.9" y="645" width="0.3" height="15.0" fill="rgb(249,196,52)" rx="2" ry="2" />
<text  x="21.93" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="106.4" y="453" width="0.3" height="15.0" fill="rgb(229,41,7)" rx="2" ry="2" />
<text  x="109.42" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="73.7" y="469" width="0.2" height="15.0" fill="rgb(228,122,41)" rx="2" ry="2" />
<text  x="76.67" y="479.5" ></text>
</g>
<g >
<title>database::shard_of (3 samples, 0.06%)</title><rect x="1128.8" y="277" width="0.7" height="15.0" fill="rgb(210,53,10)" rx="2" ry="2" />
<text  x="1131.85" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.14%)</title><rect x="699.4" y="581" width="1.6" height="15.0" fill="rgb(232,14,2)" rx="2" ry="2" />
<text  x="702.40" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%)</title><rect x="24.2" y="293" width="0.9" height="15.0" fill="rgb(245,209,32)" rx="2" ry="2" />
<text  x="27.20" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="675.1" y="501" width="0.3" height="15.0" fill="rgb(231,209,39)" rx="2" ry="2" />
<text  x="678.12" y="511.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (41 samples, 0.80%)</title><rect x="516.2" y="405" width="9.4" height="15.0" fill="rgb(230,65,14)" rx="2" ry="2" />
<text  x="519.17" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (4 samples, 0.08%)</title><rect x="835.0" y="437" width="0.9" height="15.0" fill="rgb(247,187,8)" rx="2" ry="2" />
<text  x="837.99" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1092.2" y="485" width="0.5" height="15.0" fill="rgb(209,203,37)" rx="2" ry="2" />
<text  x="1095.20" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="284.8" y="229" width="0.5" height="15.0" fill="rgb(238,165,19)" rx="2" ry="2" />
<text  x="287.84" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (30 samples, 0.58%)</title><rect x="249.6" y="165" width="6.8" height="15.0" fill="rgb(248,77,28)" rx="2" ry="2" />
<text  x="252.57" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1018.7" y="293" width="0.2" height="15.0" fill="rgb(246,202,4)" rx="2" ry="2" />
<text  x="1021.68" y="303.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="517.8" y="357" width="0.7" height="15.0" fill="rgb(230,72,10)" rx="2" ry="2" />
<text  x="520.78" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (6 samples, 0.12%)</title><rect x="870.5" y="469" width="1.4" height="15.0" fill="rgb(231,26,13)" rx="2" ry="2" />
<text  x="873.49" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="718.2" y="437" width="0.4" height="15.0" fill="rgb(249,158,21)" rx="2" ry="2" />
<text  x="721.18" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="43.0" y="405" width="0.2" height="15.0" fill="rgb(225,112,52)" rx="2" ry="2" />
<text  x="45.98" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="1130.2" y="325" width="0.5" height="15.0" fill="rgb(226,134,34)" rx="2" ry="2" />
<text  x="1133.22" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1034.3" y="357" width="0.2" height="15.0" fill="rgb(226,83,27)" rx="2" ry="2" />
<text  x="1037.25" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (8 samples, 0.16%)</title><rect x="773.6" y="373" width="1.8" height="15.0" fill="rgb(231,47,25)" rx="2" ry="2" />
<text  x="776.61" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="297.2" y="309" width="0.2" height="15.0" fill="rgb(245,69,25)" rx="2" ry="2" />
<text  x="300.21" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (5 samples, 0.10%)</title><rect x="621.1" y="453" width="1.1" height="15.0" fill="rgb(223,147,42)" rx="2" ry="2" />
<text  x="624.07" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (65 samples, 1.26%)</title><rect x="902.1" y="501" width="14.9" height="15.0" fill="rgb(230,62,35)" rx="2" ry="2" />
<text  x="905.10" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="551.9" y="373" width="0.5" height="15.0" fill="rgb(243,219,17)" rx="2" ry="2" />
<text  x="554.90" y="383.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="1048.7" y="437" width="0.4" height="15.0" fill="rgb(241,165,20)" rx="2" ry="2" />
<text  x="1051.68" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="59.7" y="389" width="0.2" height="15.0" fill="rgb(236,156,3)" rx="2" ry="2" />
<text  x="62.70" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="735.4" y="517" width="0.2" height="15.0" fill="rgb(210,55,10)" rx="2" ry="2" />
<text  x="738.36" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="718.6" y="389" width="0.3" height="15.0" fill="rgb(254,43,3)" rx="2" ry="2" />
<text  x="721.64" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (1 samples, 0.02%)</title><rect x="73.4" y="469" width="0.3" height="15.0" fill="rgb(218,220,51)" rx="2" ry="2" />
<text  x="76.44" y="479.5" ></text>
</g>
<g >
<title>do_cql_test (273 samples, 5.30%)</title><rect x="19.2" y="645" width="62.5" height="15.0" fill="rgb(209,187,5)" rx="2" ry="2" />
<text  x="22.16" y="655.5" >do_cql..</text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="53.3" y="277" width="0.2" height="15.0" fill="rgb(218,133,12)" rx="2" ry="2" />
<text  x="56.29" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%)</title><rect x="890.9" y="549" width="0.4" height="15.0" fill="rgb(230,68,11)" rx="2" ry="2" />
<text  x="893.88" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (2 samples, 0.04%)</title><rect x="72.1" y="437" width="0.4" height="15.0" fill="rgb(234,176,14)" rx="2" ry="2" />
<text  x="75.07" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="929.8" y="485" width="0.7" height="15.0" fill="rgb(248,172,26)" rx="2" ry="2" />
<text  x="932.81" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (2 samples, 0.04%)</title><rect x="371.4" y="277" width="0.5" height="15.0" fill="rgb(210,225,11)" rx="2" ry="2" />
<text  x="374.42" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="887.4" y="517" width="0.3" height="15.0" fill="rgb(216,168,28)" rx="2" ry="2" />
<text  x="890.44" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="273.6" y="245" width="0.7" height="15.0" fill="rgb(215,193,20)" rx="2" ry="2" />
<text  x="276.62" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (20 samples, 0.39%)</title><rect x="496.5" y="389" width="4.6" height="15.0" fill="rgb(242,34,34)" rx="2" ry="2" />
<text  x="499.48" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1129.8" y="277" width="0.2" height="15.0" fill="rgb(225,180,13)" rx="2" ry="2" />
<text  x="1132.76" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (3 samples, 0.06%)</title><rect x="674.7" y="549" width="0.7" height="15.0" fill="rgb(206,101,19)" rx="2" ry="2" />
<text  x="677.67" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (2 samples, 0.04%)</title><rect x="961.6" y="485" width="0.5" height="15.0" fill="rgb(215,115,25)" rx="2" ry="2" />
<text  x="964.65" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="1129.5" y="277" width="0.3" height="15.0" fill="rgb(252,78,53)" rx="2" ry="2" />
<text  x="1132.53" y="287.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.7" y="645" width="0.2" height="15.0" fill="rgb(219,100,18)" rx="2" ry="2" />
<text  x="13.69" y="655.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%)</title><rect x="1078.2" y="421" width="0.3" height="15.0" fill="rgb(210,78,6)" rx="2" ry="2" />
<text  x="1081.23" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (39 samples, 0.76%)</title><rect x="766.5" y="485" width="8.9" height="15.0" fill="rgb(251,123,35)" rx="2" ry="2" />
<text  x="769.51" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::builder (14 samples, 0.27%)</title><rect x="633.4" y="517" width="3.2" height="15.0" fill="rgb(215,221,13)" rx="2" ry="2" />
<text  x="636.44" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="17.8" y="597" width="0.2" height="15.0" fill="rgb(211,161,27)" rx="2" ry="2" />
<text  x="20.79" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (4 samples, 0.08%)</title><rect x="717.7" y="597" width="0.9" height="15.0" fill="rgb(246,136,6)" rx="2" ry="2" />
<text  x="720.73" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="908.7" y="389" width="1.0" height="15.0" fill="rgb(232,135,3)" rx="2" ry="2" />
<text  x="911.74" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (98 samples, 1.90%)</title><rect x="589.9" y="485" width="22.5" height="15.0" fill="rgb(245,92,37)" rx="2" ry="2" />
<text  x="592.92" y="495.5" >m..</text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%)</title><rect x="221.9" y="293" width="0.4" height="15.0" fill="rgb(217,33,30)" rx="2" ry="2" />
<text  x="224.86" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (18 samples, 0.35%)</title><rect x="367.3" y="277" width="4.1" height="15.0" fill="rgb(207,171,50)" rx="2" ry="2" />
<text  x="370.30" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="155.4" y="517" width="0.7" height="15.0" fill="rgb(206,128,5)" rx="2" ry="2" />
<text  x="158.44" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="18.5" y="597" width="0.4" height="15.0" fill="rgb(245,83,2)" rx="2" ry="2" />
<text  x="21.47" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="886.3" y="325" width="0.2" height="15.0" fill="rgb(251,160,14)" rx="2" ry="2" />
<text  x="889.30" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="982.7" y="453" width="0.3" height="15.0" fill="rgb(212,146,15)" rx="2" ry="2" />
<text  x="985.72" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (16 samples, 0.31%)</title><rect x="402.6" y="261" width="3.6" height="15.0" fill="rgb(223,56,2)" rx="2" ry="2" />
<text  x="405.57" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.1" y="453" width="0.2" height="15.0" fill="rgb(214,15,3)" rx="2" ry="2" />
<text  x="69.11" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="40.2" y="293" width="0.3" height="15.0" fill="rgb(211,59,22)" rx="2" ry="2" />
<text  x="43.23" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="884.9" y="357" width="0.3" height="15.0" fill="rgb(230,51,8)" rx="2" ry="2" />
<text  x="887.92" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="495.3" y="389" width="0.5" height="15.0" fill="rgb(251,72,2)" rx="2" ry="2" />
<text  x="498.33" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%)</title><rect x="1138.0" y="597" width="0.2" height="15.0" fill="rgb(249,132,7)" rx="2" ry="2" />
<text  x="1141.01" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="61.8" y="437" width="0.2" height="15.0" fill="rgb(205,225,29)" rx="2" ry="2" />
<text  x="64.76" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%)</title><rect x="717.5" y="373" width="0.2" height="15.0" fill="rgb(219,146,50)" rx="2" ry="2" />
<text  x="720.50" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="948.4" y="453" width="0.2" height="15.0" fill="rgb(217,57,38)" rx="2" ry="2" />
<text  x="951.37" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (506 samples, 9.82%)</title><rect x="349.2" y="437" width="115.9" height="15.0" fill="rgb(241,88,11)" rx="2" ry="2" />
<text  x="352.20" y="447.5" >seastar::futur..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="671.5" y="581" width="0.2" height="15.0" fill="rgb(231,124,31)" rx="2" ry="2" />
<text  x="674.46" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="758.7" y="437" width="0.5" height="15.0" fill="rgb(221,103,37)" rx="2" ry="2" />
<text  x="761.72" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (87 samples, 1.69%)</title><rect x="591.5" y="453" width="20.0" height="15.0" fill="rgb(244,218,34)" rx="2" ry="2" />
<text  x="594.53" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="52.6" y="309" width="0.2" height="15.0" fill="rgb(242,189,47)" rx="2" ry="2" />
<text  x="55.60" y="319.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="875.3" y="533" width="0.7" height="15.0" fill="rgb(226,88,7)" rx="2" ry="2" />
<text  x="878.30" y="543.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="745.0" y="549" width="0.2" height="15.0" fill="rgb(237,51,4)" rx="2" ry="2" />
<text  x="747.98" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="676.0" y="517" width="0.3" height="15.0" fill="rgb(244,52,7)" rx="2" ry="2" />
<text  x="679.04" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_function_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="65.7" y="469" width="0.2" height="15.0" fill="rgb(215,57,53)" rx="2" ry="2" />
<text  x="68.66" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="717.5" y="421" width="0.2" height="15.0" fill="rgb(211,193,24)" rx="2" ry="2" />
<text  x="720.50" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="978.8" y="421" width="2.1" height="15.0" fill="rgb(213,219,7)" rx="2" ry="2" />
<text  x="981.83" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="685.2" y="533" width="0.5" height="15.0" fill="rgb(208,30,39)" rx="2" ry="2" />
<text  x="688.20" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1165.0" y="597" width="0.3" height="15.0" fill="rgb(213,156,3)" rx="2" ry="2" />
<text  x="1168.03" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (94 samples, 1.82%)</title><rect x="676.3" y="597" width="21.5" height="15.0" fill="rgb(252,147,40)" rx="2" ry="2" />
<text  x="679.27" y="607.5" >s..</text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="57.6" y="277" width="0.3" height="15.0" fill="rgb(253,81,10)" rx="2" ry="2" />
<text  x="60.64" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%)</title><rect x="21.7" y="405" width="0.2" height="15.0" fill="rgb(233,13,52)" rx="2" ry="2" />
<text  x="24.68" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="279.1" y="229" width="0.2" height="15.0" fill="rgb(248,16,44)" rx="2" ry="2" />
<text  x="282.12" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="75.3" y="469" width="0.2" height="15.0" fill="rgb(217,141,34)" rx="2" ry="2" />
<text  x="78.28" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;long, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.1" y="629" width="0.2" height="15.0" fill="rgb(241,178,54)" rx="2" ry="2" />
<text  x="20.10" y="639.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="1128.8" y="229" width="0.5" height="15.0" fill="rgb(205,50,48)" rx="2" ry="2" />
<text  x="1131.85" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%)</title><rect x="526.2" y="421" width="2.3" height="15.0" fill="rgb(239,184,51)" rx="2" ry="2" />
<text  x="529.25" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (9 samples, 0.17%)</title><rect x="931.0" y="485" width="2.0" height="15.0" fill="rgb(207,69,41)" rx="2" ry="2" />
<text  x="933.96" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1081.0" y="453" width="0.2" height="15.0" fill="rgb(207,89,49)" rx="2" ry="2" />
<text  x="1083.98" y="463.5" ></text>
</g>
<g >
<title>db::hints::manager::too_many_in_flight_hints_for (1 samples, 0.02%)</title><rect x="1134.3" y="245" width="0.3" height="15.0" fill="rgb(246,29,23)" rx="2" ry="2" />
<text  x="1137.34" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.2" y="565" width="0.3" height="15.0" fill="rgb(220,212,17)" rx="2" ry="2" />
<text  x="13.23" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (94 samples, 1.82%)</title><rect x="589.9" y="469" width="21.6" height="15.0" fill="rgb(235,67,6)" rx="2" ry="2" />
<text  x="592.92" y="479.5" >m..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="794.9" y="453" width="0.2" height="15.0" fill="rgb(219,109,28)" rx="2" ry="2" />
<text  x="797.91" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="1127.9" y="389" width="3.0" height="15.0" fill="rgb(230,190,15)" rx="2" ry="2" />
<text  x="1130.93" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="291.0" y="309" width="0.3" height="15.0" fill="rgb(209,82,52)" rx="2" ry="2" />
<text  x="294.03" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="58.3" y="421" width="0.3" height="15.0" fill="rgb(249,2,29)" rx="2" ry="2" />
<text  x="61.33" y="431.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%)</title><rect x="1126.6" y="357" width="0.4" height="15.0" fill="rgb(221,81,36)" rx="2" ry="2" />
<text  x="1129.56" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%)</title><rect x="18.2" y="373" width="0.3" height="15.0" fill="rgb(251,211,39)" rx="2" ry="2" />
<text  x="21.25" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (424 samples, 8.23%)</title><rect x="474.0" y="469" width="97.1" height="15.0" fill="rgb(243,109,25)" rx="2" ry="2" />
<text  x="477.03" y="479.5" >std::_Funct..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (3 samples, 0.06%)</title><rect x="652.7" y="485" width="0.7" height="15.0" fill="rgb(218,129,52)" rx="2" ry="2" />
<text  x="655.68" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.3" y="357" width="0.2" height="15.0" fill="rgb(208,17,38)" rx="2" ry="2" />
<text  x="45.29" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="44.6" y="277" width="0.4" height="15.0" fill="rgb(228,189,29)" rx="2" ry="2" />
<text  x="47.58" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="684.1" y="565" width="0.4" height="15.0" fill="rgb(230,208,10)" rx="2" ry="2" />
<text  x="687.06" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (14 samples, 0.27%)</title><rect x="883.8" y="485" width="3.2" height="15.0" fill="rgb(236,14,54)" rx="2" ry="2" />
<text  x="886.78" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, auth::service::start (1 samples, 0.02%)</title><rect x="718.6" y="597" width="0.3" height="15.0" fill="rgb(237,104,11)" rx="2" ry="2" />
<text  x="721.64" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="474.9" y="453" width="0.3" height="15.0" fill="rgb(221,179,11)" rx="2" ry="2" />
<text  x="477.95" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="799.3" y="453" width="0.2" height="15.0" fill="rgb(224,183,14)" rx="2" ry="2" />
<text  x="802.26" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.2" y="565" width="0.3" height="15.0" fill="rgb(246,222,15)" rx="2" ry="2" />
<text  x="21.25" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="864.5" y="453" width="1.0" height="15.0" fill="rgb(244,17,52)" rx="2" ry="2" />
<text  x="867.54" y="463.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="59.0" y="245" width="0.2" height="15.0" fill="rgb(225,1,13)" rx="2" ry="2" />
<text  x="62.01" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="40.5" y="437" width="0.2" height="15.0" fill="rgb(211,65,50)" rx="2" ry="2" />
<text  x="43.46" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (6 samples, 0.12%)</title><rect x="875.1" y="549" width="1.3" height="15.0" fill="rgb(205,218,6)" rx="2" ry="2" />
<text  x="878.07" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="809.8" y="325" width="0.5" height="15.0" fill="rgb(232,225,19)" rx="2" ry="2" />
<text  x="812.80" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="881.3" y="501" width="0.2" height="15.0" fill="rgb(237,43,12)" rx="2" ry="2" />
<text  x="884.26" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="353.1" y="325" width="0.2" height="15.0" fill="rgb(251,16,13)" rx="2" ry="2" />
<text  x="356.10" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="56.0" y="373" width="0.3" height="15.0" fill="rgb(229,183,52)" rx="2" ry="2" />
<text  x="59.04" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (13 samples, 0.25%)</title><rect x="309.6" y="325" width="3.0" height="15.0" fill="rgb(241,16,51)" rx="2" ry="2" />
<text  x="312.58" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (3 samples, 0.06%)</title><rect x="638.5" y="501" width="0.7" height="15.0" fill="rgb(243,115,43)" rx="2" ry="2" />
<text  x="641.48" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="191.4" y="357" width="0.2" height="15.0" fill="rgb(251,214,23)" rx="2" ry="2" />
<text  x="194.40" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="109.2" y="373" width="0.2" height="15.0" fill="rgb(238,17,49)" rx="2" ry="2" />
<text  x="112.17" y="383.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="106.4" y="581" width="0.3" height="15.0" fill="rgb(240,181,50)" rx="2" ry="2" />
<text  x="109.42" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="103.7" y="533" width="0.2" height="15.0" fill="rgb(223,13,30)" rx="2" ry="2" />
<text  x="106.68" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="581.0" y="421" width="2.5" height="15.0" fill="rgb(218,95,25)" rx="2" ry="2" />
<text  x="583.99" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="657.7" y="533" width="0.2" height="15.0" fill="rgb(251,168,33)" rx="2" ry="2" />
<text  x="660.72" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="922.3" y="437" width="0.9" height="15.0" fill="rgb(229,197,39)" rx="2" ry="2" />
<text  x="925.26" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="610.8" y="405" width="0.4" height="15.0" fill="rgb(231,192,6)" rx="2" ry="2" />
<text  x="613.76" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (507 samples, 9.84%)</title><rect x="349.2" y="453" width="116.1" height="15.0" fill="rgb(231,93,3)" rx="2" ry="2" />
<text  x="352.20" y="463.5" >flat_mutation_..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.0" y="229" width="0.3" height="15.0" fill="rgb(241,175,49)" rx="2" ry="2" />
<text  x="48.04" y="239.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="108.9" y="389" width="0.3" height="15.0" fill="rgb(208,114,34)" rx="2" ry="2" />
<text  x="111.94" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="839.3" y="389" width="0.5" height="15.0" fill="rgb(230,115,25)" rx="2" ry="2" />
<text  x="842.34" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (3 samples, 0.06%)</title><rect x="750.5" y="581" width="0.7" height="15.0" fill="rgb(206,122,26)" rx="2" ry="2" />
<text  x="753.48" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1096.8" y="485" width="0.2" height="15.0" fill="rgb(235,91,8)" rx="2" ry="2" />
<text  x="1099.78" y="495.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="302.0" y="277" width="0.7" height="15.0" fill="rgb(206,88,42)" rx="2" ry="2" />
<text  x="305.02" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="555.3" y="421" width="0.5" height="15.0" fill="rgb(252,216,44)" rx="2" ry="2" />
<text  x="558.34" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="212.0" y="261" width="0.9" height="15.0" fill="rgb(252,8,31)" rx="2" ry="2" />
<text  x="215.01" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (7 samples, 0.14%)</title><rect x="708.3" y="581" width="1.6" height="15.0" fill="rgb(254,50,10)" rx="2" ry="2" />
<text  x="711.33" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="329.5" y="421" width="0.7" height="15.0" fill="rgb(232,143,52)" rx="2" ry="2" />
<text  x="332.51" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%)</title><rect x="284.8" y="245" width="0.5" height="15.0" fill="rgb(216,142,15)" rx="2" ry="2" />
<text  x="287.84" y="255.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_ruleMemo (1 samples, 0.02%)</title><rect x="22.6" y="485" width="0.2" height="15.0" fill="rgb(220,82,8)" rx="2" ry="2" />
<text  x="25.60" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (10 samples, 0.19%)</title><rect x="83.1" y="613" width="2.3" height="15.0" fill="rgb(248,185,1)" rx="2" ry="2" />
<text  x="86.06" y="623.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="78.9" y="389" width="0.3" height="15.0" fill="rgb(233,35,16)" rx="2" ry="2" />
<text  x="81.94" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,719 samples, 91.60%)</title><rect x="87.2" y="677" width="1080.8" height="15.0" fill="rgb(241,46,25)" rx="2" ry="2" />
<text  x="90.19" y="687.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="135.5" y="549" width="0.2" height="15.0" fill="rgb(210,106,45)" rx="2" ry="2" />
<text  x="138.51" y="559.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1120.1" y="197" width="0.3" height="15.0" fill="rgb(230,97,30)" rx="2" ry="2" />
<text  x="1123.14" y="207.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="18.7" y="549" width="0.2" height="15.0" fill="rgb(239,161,28)" rx="2" ry="2" />
<text  x="21.70" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="57.2" y="437" width="0.2" height="15.0" fill="rgb(242,91,15)" rx="2" ry="2" />
<text  x="60.18" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="85.6" y="597" width="0.2" height="15.0" fill="rgb(208,214,5)" rx="2" ry="2" />
<text  x="88.58" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (2 samples, 0.04%)</title><rect x="82.6" y="709" width="0.5" height="15.0" fill="rgb(233,78,21)" rx="2" ry="2" />
<text  x="85.60" y="719.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (3 samples, 0.06%)</title><rect x="1133.0" y="245" width="0.7" height="15.0" fill="rgb(235,18,36)" rx="2" ry="2" />
<text  x="1135.97" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (4 samples, 0.08%)</title><rect x="116.3" y="565" width="0.9" height="15.0" fill="rgb(232,116,39)" rx="2" ry="2" />
<text  x="119.27" y="575.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%)</title><rect x="644.4" y="517" width="0.5" height="15.0" fill="rgb(252,126,48)" rx="2" ry="2" />
<text  x="647.43" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="643.7" y="501" width="0.7" height="15.0" fill="rgb(242,125,41)" rx="2" ry="2" />
<text  x="646.75" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="85.6" y="581" width="0.2" height="15.0" fill="rgb(225,121,32)" rx="2" ry="2" />
<text  x="88.58" y="591.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1074.8" y="389" width="0.7" height="15.0" fill="rgb(229,111,22)" rx="2" ry="2" />
<text  x="1077.79" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="642.8" y="533" width="0.3" height="15.0" fill="rgb(211,138,29)" rx="2" ry="2" />
<text  x="645.83" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1165.3" y="597" width="0.2" height="15.0" fill="rgb(238,36,6)" rx="2" ry="2" />
<text  x="1168.26" y="607.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%)</title><rect x="1078.9" y="437" width="0.2" height="15.0" fill="rgb(232,221,46)" rx="2" ry="2" />
<text  x="1081.92" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="389" width="0.3" height="15.0" fill="rgb(244,167,49)" rx="2" ry="2" />
<text  x="85.83" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="319.2" y="373" width="0.7" height="15.0" fill="rgb(248,48,39)" rx="2" ry="2" />
<text  x="322.20" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="500.6" y="373" width="0.2" height="15.0" fill="rgb(236,228,23)" rx="2" ry="2" />
<text  x="503.60" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1082.4" y="453" width="0.2" height="15.0" fill="rgb(206,74,9)" rx="2" ry="2" />
<text  x="1085.35" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (4 samples, 0.08%)</title><rect x="699.6" y="565" width="0.9" height="15.0" fill="rgb(248,226,50)" rx="2" ry="2" />
<text  x="702.63" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="419.5" y="277" width="0.2" height="15.0" fill="rgb(241,22,31)" rx="2" ry="2" />
<text  x="422.52" y="287.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1093.3" y="453" width="1.2" height="15.0" fill="rgb(205,134,50)" rx="2" ry="2" />
<text  x="1096.35" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (2 samples, 0.04%)</title><rect x="951.8" y="501" width="0.5" height="15.0" fill="rgb(243,27,8)" rx="2" ry="2" />
<text  x="954.80" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (16 samples, 0.31%)</title><rect x="836.1" y="453" width="3.7" height="15.0" fill="rgb(212,185,28)" rx="2" ry="2" />
<text  x="839.14" y="463.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (159 samples, 3.09%)</title><rect x="799.5" y="453" width="36.4" height="15.0" fill="rgb(219,225,51)" rx="2" ry="2" />
<text  x="802.49" y="463.5" >ser..</text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="272.9" y="245" width="0.7" height="15.0" fill="rgb(216,5,12)" rx="2" ry="2" />
<text  x="275.93" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (17 samples, 0.33%)</title><rect x="122.0" y="549" width="3.9" height="15.0" fill="rgb(235,167,32)" rx="2" ry="2" />
<text  x="125.00" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="857.0" y="485" width="0.2" height="15.0" fill="rgb(215,181,2)" rx="2" ry="2" />
<text  x="859.98" y="495.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (29 samples, 0.56%)</title><rect x="518.5" y="357" width="6.6" height="15.0" fill="rgb(227,92,14)" rx="2" ry="2" />
<text  x="521.46" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="727.3" y="581" width="0.3" height="15.0" fill="rgb(239,133,35)" rx="2" ry="2" />
<text  x="730.34" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%)</title><rect x="770.4" y="469" width="0.5" height="15.0" fill="rgb(236,196,0)" rx="2" ry="2" />
<text  x="773.40" y="479.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="597.7" y="421" width="1.4" height="15.0" fill="rgb(250,131,41)" rx="2" ry="2" />
<text  x="600.71" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.08%)</title><rect x="128.0" y="501" width="0.9" height="15.0" fill="rgb(234,149,21)" rx="2" ry="2" />
<text  x="130.95" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="826.5" y="309" width="0.2" height="15.0" fill="rgb(221,121,18)" rx="2" ry="2" />
<text  x="829.52" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="647.0" y="533" width="0.4" height="15.0" fill="rgb(233,16,5)" rx="2" ry="2" />
<text  x="649.95" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%)</title><rect x="666.2" y="581" width="0.9" height="15.0" fill="rgb(246,201,32)" rx="2" ry="2" />
<text  x="669.19" y="591.5" ></text>
</g>
<g >
<title>auth::resource::resource (14 samples, 0.27%)</title><rect x="793.3" y="485" width="3.2" height="15.0" fill="rgb(230,39,8)" rx="2" ry="2" />
<text  x="796.31" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (51 samples, 0.99%)</title><rect x="917.7" y="485" width="11.7" height="15.0" fill="rgb(241,57,20)" rx="2" ry="2" />
<text  x="920.67" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="852.2" y="501" width="0.2" height="15.0" fill="rgb(231,145,7)" rx="2" ry="2" />
<text  x="855.17" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1079.1" y="437" width="0.3" height="15.0" fill="rgb(234,224,15)" rx="2" ry="2" />
<text  x="1082.15" y="447.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="76.9" y="533" width="0.2" height="15.0" fill="rgb(215,229,36)" rx="2" ry="2" />
<text  x="79.88" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="49.4" y="373" width="0.2" height="15.0" fill="rgb(214,158,38)" rx="2" ry="2" />
<text  x="52.39" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="389.3" y="277" width="0.2" height="15.0" fill="rgb(238,122,54)" rx="2" ry="2" />
<text  x="392.29" y="287.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="703.8" y="549" width="0.6" height="15.0" fill="rgb(222,37,10)" rx="2" ry="2" />
<text  x="706.75" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (13 samples, 0.25%)</title><rect x="1024.6" y="325" width="3.0" height="15.0" fill="rgb(214,71,17)" rx="2" ry="2" />
<text  x="1027.64" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (20 samples, 0.39%)</title><rect x="702.4" y="581" width="4.6" height="15.0" fill="rgb(237,207,0)" rx="2" ry="2" />
<text  x="705.38" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="1164.8" y="597" width="0.2" height="15.0" fill="rgb(219,229,37)" rx="2" ry="2" />
<text  x="1167.81" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="685.9" y="549" width="0.4" height="15.0" fill="rgb(246,6,22)" rx="2" ry="2" />
<text  x="688.89" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (2 samples, 0.04%)</title><rect x="446.3" y="325" width="0.5" height="15.0" fill="rgb(241,128,25)" rx="2" ry="2" />
<text  x="449.32" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::response_wait (2 samples, 0.04%)</title><rect x="1127.9" y="357" width="0.5" height="15.0" fill="rgb(223,210,19)" rx="2" ry="2" />
<text  x="1130.93" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="308.4" y="341" width="0.3" height="15.0" fill="rgb(226,27,30)" rx="2" ry="2" />
<text  x="311.44" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="1011.1" y="309" width="0.9" height="15.0" fill="rgb(225,41,54)" rx="2" ry="2" />
<text  x="1014.12" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (57 samples, 1.11%)</title><rect x="26.0" y="405" width="13.1" height="15.0" fill="rgb(222,130,52)" rx="2" ry="2" />
<text  x="29.03" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::pending_endpoints_for (1 samples, 0.02%)</title><rect x="1134.1" y="293" width="0.2" height="15.0" fill="rgb(254,118,37)" rx="2" ry="2" />
<text  x="1137.11" y="303.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (13 samples, 0.25%)</title><rect x="1019.1" y="277" width="3.0" height="15.0" fill="rgb(222,91,30)" rx="2" ry="2" />
<text  x="1022.14" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (3 samples, 0.06%)</title><rect x="108.9" y="581" width="0.7" height="15.0" fill="rgb(220,211,16)" rx="2" ry="2" />
<text  x="111.94" y="591.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.1" y="661" width="0.2" height="15.0" fill="rgb(211,115,41)" rx="2" ry="2" />
<text  x="20.10" y="671.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="1102.3" y="501" width="2.7" height="15.0" fill="rgb(249,204,17)" rx="2" ry="2" />
<text  x="1105.28" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="55.1" y="309" width="0.5" height="15.0" fill="rgb(225,121,50)" rx="2" ry="2" />
<text  x="58.12" y="319.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="717.5" y="309" width="0.2" height="15.0" fill="rgb(250,116,40)" rx="2" ry="2" />
<text  x="720.50" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="549.8" y="421" width="0.3" height="15.0" fill="rgb(220,52,21)" rx="2" ry="2" />
<text  x="552.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="101" width="0.3" height="15.0" fill="rgb(241,220,53)" rx="2" ry="2" />
<text  x="56.75" y="111.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.9" y="469" width="0.2" height="15.0" fill="rgb(241,37,40)" rx="2" ry="2" />
<text  x="65.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="729.6" y="565" width="0.3" height="15.0" fill="rgb(231,55,49)" rx="2" ry="2" />
<text  x="732.64" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="84.0" y="437" width="0.2" height="15.0" fill="rgb(244,30,21)" rx="2" ry="2" />
<text  x="86.98" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%)</title><rect x="109.4" y="501" width="0.2" height="15.0" fill="rgb(207,95,52)" rx="2" ry="2" />
<text  x="112.40" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="680.4" y="533" width="0.2" height="15.0" fill="rgb(227,93,26)" rx="2" ry="2" />
<text  x="683.39" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%)</title><rect x="61.1" y="421" width="0.4" height="15.0" fill="rgb(212,83,35)" rx="2" ry="2" />
<text  x="64.08" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="82.8" y="421" width="0.3" height="15.0" fill="rgb(212,201,13)" rx="2" ry="2" />
<text  x="85.83" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="24.0" y="325" width="1.3" height="15.0" fill="rgb(252,212,26)" rx="2" ry="2" />
<text  x="26.97" y="335.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="566.3" y="357" width="1.2" height="15.0" fill="rgb(210,215,15)" rx="2" ry="2" />
<text  x="569.33" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="55.1" y="245" width="0.5" height="15.0" fill="rgb(217,209,15)" rx="2" ry="2" />
<text  x="58.12" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="746.8" y="357" width="0.2" height="15.0" fill="rgb(248,3,2)" rx="2" ry="2" />
<text  x="749.81" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="136.9" y="549" width="0.2" height="15.0" fill="rgb(223,77,18)" rx="2" ry="2" />
<text  x="139.89" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (504 samples, 9.78%)</title><rect x="349.4" y="421" width="115.5" height="15.0" fill="rgb(207,67,54)" rx="2" ry="2" />
<text  x="352.43" y="431.5" >seastar::inter..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="321.3" y="405" width="0.2" height="15.0" fill="rgb(244,46,41)" rx="2" ry="2" />
<text  x="324.26" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.23%)</title><rect x="837.1" y="437" width="2.7" height="15.0" fill="rgb(213,134,2)" rx="2" ry="2" />
<text  x="840.05" y="447.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="81.9" y="533" width="0.2" height="15.0" fill="rgb(214,65,23)" rx="2" ry="2" />
<text  x="84.92" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="735.1" y="533" width="0.7" height="15.0" fill="rgb(254,209,21)" rx="2" ry="2" />
<text  x="738.13" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="203.8" y="373" width="0.7" height="15.0" fill="rgb(252,152,52)" rx="2" ry="2" />
<text  x="206.77" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="51.0" y="389" width="0.2" height="15.0" fill="rgb(246,132,20)" rx="2" ry="2" />
<text  x="54.00" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="947.7" y="421" width="0.7" height="15.0" fill="rgb(225,191,28)" rx="2" ry="2" />
<text  x="950.68" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="883.5" y="437" width="0.3" height="15.0" fill="rgb(227,27,29)" rx="2" ry="2" />
<text  x="886.55" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::open_or_create_data (1 samples, 0.02%)</title><rect x="18.9" y="597" width="0.3" height="15.0" fill="rgb(236,21,5)" rx="2" ry="2" />
<text  x="21.93" y="607.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%)</title><rect x="11.1" y="693" width="0.3" height="15.0" fill="rgb(216,99,0)" rx="2" ry="2" />
<text  x="14.15" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="914.2" y="453" width="0.3" height="15.0" fill="rgb(252,53,38)" rx="2" ry="2" />
<text  x="917.24" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="53.1" y="341" width="0.2" height="15.0" fill="rgb(253,32,44)" rx="2" ry="2" />
<text  x="56.06" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="464.9" y="421" width="0.2" height="15.0" fill="rgb(235,75,42)" rx="2" ry="2" />
<text  x="467.87" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="201.5" y="357" width="0.4" height="15.0" fill="rgb(221,12,43)" rx="2" ry="2" />
<text  x="204.48" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (107 samples, 2.08%)</title><rect x="1140.3" y="597" width="24.5" height="15.0" fill="rgb(250,50,33)" rx="2" ry="2" />
<text  x="1143.30" y="607.5" >s..</text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="10.5" y="629" width="0.2" height="15.0" fill="rgb(249,187,1)" rx="2" ry="2" />
<text  x="13.46" y="639.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%)</title><rect x="84.9" y="405" width="0.2" height="15.0" fill="rgb(244,227,39)" rx="2" ry="2" />
<text  x="87.90" y="415.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="83.1" y="581" width="1.1" height="15.0" fill="rgb(220,2,54)" rx="2" ry="2" />
<text  x="86.06" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (4 samples, 0.08%)</title><rect x="59.9" y="389" width="0.9" height="15.0" fill="rgb(239,155,39)" rx="2" ry="2" />
<text  x="62.93" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="46.2" y="421" width="0.2" height="15.0" fill="rgb(223,80,10)" rx="2" ry="2" />
<text  x="49.19" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="54.9" y="149" width="0.2" height="15.0" fill="rgb(252,2,45)" rx="2" ry="2" />
<text  x="57.89" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="793.8" y="437" width="0.2" height="15.0" fill="rgb(229,205,2)" rx="2" ry="2" />
<text  x="796.77" y="447.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result_extra&lt;stat&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="661" width="0.2" height="15.0" fill="rgb(253,135,20)" rx="2" ry="2" />
<text  x="1192.77" y="671.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="445.9" y="325" width="0.2" height="15.0" fill="rgb(246,16,14)" rx="2" ry="2" />
<text  x="448.86" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="80.8" y="613" width="0.2" height="15.0" fill="rgb(230,122,45)" rx="2" ry="2" />
<text  x="83.77" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="857.0" y="501" width="2.3" height="15.0" fill="rgb(225,116,37)" rx="2" ry="2" />
<text  x="859.98" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="60.4" y="309" width="0.2" height="15.0" fill="rgb(250,9,2)" rx="2" ry="2" />
<text  x="63.39" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="56.5" y="373" width="0.2" height="15.0" fill="rgb(242,72,38)" rx="2" ry="2" />
<text  x="59.49" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="695.7" y="517" width="0.3" height="15.0" fill="rgb(215,90,6)" rx="2" ry="2" />
<text  x="698.74" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.14%)</title><rect x="534.3" y="357" width="1.6" height="15.0" fill="rgb(237,39,0)" rx="2" ry="2" />
<text  x="537.27" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="624.5" y="517" width="0.2" height="15.0" fill="rgb(220,139,49)" rx="2" ry="2" />
<text  x="627.51" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="878.7" y="597" width="0.3" height="15.0" fill="rgb(216,202,11)" rx="2" ry="2" />
<text  x="881.74" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="75.0" y="501" width="0.5" height="15.0" fill="rgb(237,10,17)" rx="2" ry="2" />
<text  x="78.05" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;do_io_check&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="665.0" y="517" width="0.3" height="15.0" fill="rgb(244,41,15)" rx="2" ry="2" />
<text  x="668.05" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="880.1" y="581" width="0.2" height="15.0" fill="rgb(247,7,39)" rx="2" ry="2" />
<text  x="883.11" y="591.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%)</title><rect x="535.0" y="341" width="0.4" height="15.0" fill="rgb(217,21,33)" rx="2" ry="2" />
<text  x="537.95" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (5 samples, 0.10%)</title><rect x="200.3" y="341" width="1.2" height="15.0" fill="rgb(244,199,27)" rx="2" ry="2" />
<text  x="203.33" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (623 samples, 12.09%)</title><rect x="182.2" y="437" width="142.7" height="15.0" fill="rgb(219,59,28)" rx="2" ry="2" />
<text  x="185.24" y="447.5" >mutation_fragment_..</text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="646.0" y="533" width="0.3" height="15.0" fill="rgb(224,39,34)" rx="2" ry="2" />
<text  x="649.04" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1097.0" y="485" width="0.2" height="15.0" fill="rgb(227,4,29)" rx="2" ry="2" />
<text  x="1100.01" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%)</title><rect x="901.0" y="501" width="1.1" height="15.0" fill="rgb(217,148,28)" rx="2" ry="2" />
<text  x="903.95" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="538.8" y="293" width="0.3" height="15.0" fill="rgb(236,108,25)" rx="2" ry="2" />
<text  x="541.85" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="309.4" y="325" width="0.2" height="15.0" fill="rgb(231,175,52)" rx="2" ry="2" />
<text  x="312.35" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (24 samples, 0.47%)</title><rect x="1089.5" y="501" width="5.4" height="15.0" fill="rgb(214,4,5)" rx="2" ry="2" />
<text  x="1092.45" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%)</title><rect x="871.9" y="501" width="0.4" height="15.0" fill="rgb(218,39,50)" rx="2" ry="2" />
<text  x="874.87" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (2 samples, 0.04%)</title><rect x="384.0" y="277" width="0.5" height="15.0" fill="rgb(250,195,12)" rx="2" ry="2" />
<text  x="387.02" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="10.5" y="597" width="0.2" height="15.0" fill="rgb(224,197,27)" rx="2" ry="2" />
<text  x="13.46" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.0" y="341" width="0.2" height="15.0" fill="rgb(222,16,47)" rx="2" ry="2" />
<text  x="62.01" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="757.1" y="501" width="0.5" height="15.0" fill="rgb(253,2,54)" rx="2" ry="2" />
<text  x="760.12" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="127.7" y="501" width="0.3" height="15.0" fill="rgb(246,139,9)" rx="2" ry="2" />
<text  x="130.73" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="717.5" y="485" width="0.2" height="15.0" fill="rgb(240,36,9)" rx="2" ry="2" />
<text  x="720.50" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.1" y="469" width="0.2" height="15.0" fill="rgb(219,80,27)" rx="2" ry="2" />
<text  x="69.11" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="54.7" y="309" width="0.4" height="15.0" fill="rgb(232,41,51)" rx="2" ry="2" />
<text  x="57.66" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="58.6" y="261" width="0.2" height="15.0" fill="rgb(238,159,4)" rx="2" ry="2" />
<text  x="61.56" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (2 samples, 0.04%)</title><rect x="294.0" y="341" width="0.5" height="15.0" fill="rgb(238,153,22)" rx="2" ry="2" />
<text  x="297.01" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="883.3" y="453" width="0.2" height="15.0" fill="rgb(246,12,35)" rx="2" ry="2" />
<text  x="886.32" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (4 samples, 0.08%)</title><rect x="460.3" y="341" width="0.9" height="15.0" fill="rgb(233,100,11)" rx="2" ry="2" />
<text  x="463.29" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.10%)</title><rect x="708.8" y="549" width="1.1" height="15.0" fill="rgb(208,73,32)" rx="2" ry="2" />
<text  x="711.79" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (428 samples, 8.31%)</title><rect x="473.3" y="485" width="98.1" height="15.0" fill="rgb(254,169,2)" rx="2" ry="2" />
<text  x="476.34" y="495.5" >std::functi..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="680.6" y="533" width="0.3" height="15.0" fill="rgb(226,48,43)" rx="2" ry="2" />
<text  x="683.62" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="501" width="0.3" height="15.0" fill="rgb(253,57,44)" rx="2" ry="2" />
<text  x="1169.64" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="929.4" y="485" width="0.4" height="15.0" fill="rgb(242,102,17)" rx="2" ry="2" />
<text  x="932.36" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="885.4" y="341" width="0.2" height="15.0" fill="rgb(229,187,30)" rx="2" ry="2" />
<text  x="888.38" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="782.8" y="437" width="0.9" height="15.0" fill="rgb(249,41,29)" rx="2" ry="2" />
<text  x="785.77" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="445.4" y="325" width="0.2" height="15.0" fill="rgb(226,221,27)" rx="2" ry="2" />
<text  x="448.40" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::untyped_constant (1 samples, 0.02%)</title><rect x="54.2" y="373" width="0.2" height="15.0" fill="rgb(209,137,8)" rx="2" ry="2" />
<text  x="57.20" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="289.4" y="325" width="0.3" height="15.0" fill="rgb(232,98,13)" rx="2" ry="2" />
<text  x="292.43" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="943.6" y="501" width="0.4" height="15.0" fill="rgb(205,64,18)" rx="2" ry="2" />
<text  x="946.56" y="511.5" ></text>
</g>
<g >
<title>db::filter_for_query (4 samples, 0.08%)</title><rect x="1049.1" y="437" width="1.0" height="15.0" fill="rgb(232,63,0)" rx="2" ry="2" />
<text  x="1052.14" y="447.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%)</title><rect x="110.3" y="549" width="0.5" height="15.0" fill="rgb(246,222,12)" rx="2" ry="2" />
<text  x="113.32" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (29 samples, 0.56%)</title><rect x="451.4" y="325" width="6.6" height="15.0" fill="rgb(208,89,30)" rx="2" ry="2" />
<text  x="454.35" y="335.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (3 samples, 0.06%)</title><rect x="110.8" y="501" width="0.7" height="15.0" fill="rgb(205,127,39)" rx="2" ry="2" />
<text  x="113.78" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="704.4" y="533" width="0.3" height="15.0" fill="rgb(216,58,13)" rx="2" ry="2" />
<text  x="707.44" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="654.5" y="533" width="0.2" height="15.0" fill="rgb(218,81,50)" rx="2" ry="2" />
<text  x="657.51" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="715.9" y="565" width="0.2" height="15.0" fill="rgb(249,118,5)" rx="2" ry="2" />
<text  x="718.89" y="575.5" ></text>
</g>
<g >
<title>sstables::sstable::write_toc (1 samples, 0.02%)</title><rect x="717.5" y="357" width="0.2" height="15.0" fill="rgb(210,94,20)" rx="2" ry="2" />
<text  x="720.50" y="367.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="885.4" y="325" width="0.2" height="15.0" fill="rgb(251,184,39)" rx="2" ry="2" />
<text  x="888.38" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="30.6" y="325" width="0.2" height="15.0" fill="rgb(239,186,10)" rx="2" ry="2" />
<text  x="33.61" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::future_state&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="887.2" y="485" width="0.2" height="15.0" fill="rgb(213,201,44)" rx="2" ry="2" />
<text  x="890.21" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="832.5" y="389" width="0.9" height="15.0" fill="rgb(253,33,5)" rx="2" ry="2" />
<text  x="835.47" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="30.8" y="325" width="0.3" height="15.0" fill="rgb(227,152,45)" rx="2" ry="2" />
<text  x="33.84" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (197 samples, 3.82%)</title><rect x="23.1" y="501" width="45.1" height="15.0" fill="rgb(247,159,16)" rx="2" ry="2" />
<text  x="26.06" y="511.5" >cql3..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="782.5" y="453" width="1.2" height="15.0" fill="rgb(252,121,1)" rx="2" ry="2" />
<text  x="785.54" y="463.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%)</title><rect x="633.9" y="501" width="0.5" height="15.0" fill="rgb(246,6,44)" rx="2" ry="2" />
<text  x="636.90" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%)</title><rect x="53.3" y="341" width="0.2" height="15.0" fill="rgb(228,54,30)" rx="2" ry="2" />
<text  x="56.29" y="351.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="1120.6" y="277" width="0.5" height="15.0" fill="rgb(253,205,23)" rx="2" ry="2" />
<text  x="1123.60" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="775.4" y="485" width="0.3" height="15.0" fill="rgb(236,185,33)" rx="2" ry="2" />
<text  x="778.44" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="776.4" y="501" width="0.4" height="15.0" fill="rgb(235,101,26)" rx="2" ry="2" />
<text  x="779.36" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="59.9" y="373" width="0.3" height="15.0" fill="rgb(210,130,16)" rx="2" ry="2" />
<text  x="62.93" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="646.3" y="533" width="0.2" height="15.0" fill="rgb(235,4,5)" rx="2" ry="2" />
<text  x="649.27" y="543.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="25.8" y="309" width="0.2" height="15.0" fill="rgb(218,139,10)" rx="2" ry="2" />
<text  x="28.80" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (15 samples, 0.29%)</title><rect x="709.9" y="581" width="3.5" height="15.0" fill="rgb(220,0,42)" rx="2" ry="2" />
<text  x="712.94" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="276.6" y="229" width="0.5" height="15.0" fill="rgb(228,226,13)" rx="2" ry="2" />
<text  x="279.60" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (36 samples, 0.70%)</title><rect x="127.0" y="517" width="8.3" height="15.0" fill="rgb(252,90,33)" rx="2" ry="2" />
<text  x="130.04" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (463 samples, 8.99%)</title><rect x="355.2" y="373" width="106.0" height="15.0" fill="rgb(220,94,4)" rx="2" ry="2" />
<text  x="358.16" y="383.5" >flat_mutatio..</text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%)</title><rect x="1075.0" y="373" width="0.5" height="15.0" fill="rgb(241,193,45)" rx="2" ry="2" />
<text  x="1078.02" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (7 samples, 0.14%)</title><rect x="824.5" y="229" width="1.6" height="15.0" fill="rgb(225,110,29)" rx="2" ry="2" />
<text  x="827.46" y="239.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (2 samples, 0.04%)</title><rect x="1123.6" y="325" width="0.4" height="15.0" fill="rgb(215,44,48)" rx="2" ry="2" />
<text  x="1126.58" y="335.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="661.2" y="581" width="0.2" height="15.0" fill="rgb(241,139,1)" rx="2" ry="2" />
<text  x="664.15" y="591.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1000.4" y="389" width="0.2" height="15.0" fill="rgb(217,18,51)" rx="2" ry="2" />
<text  x="1003.36" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.16%)</title><rect x="841.4" y="405" width="1.8" height="15.0" fill="rgb(238,145,4)" rx="2" ry="2" />
<text  x="844.41" y="415.5" ></text>
</g>
<g >
<title>auth::resource::parent (10 samples, 0.19%)</title><rect x="802.0" y="421" width="2.3" height="15.0" fill="rgb(205,105,22)" rx="2" ry="2" />
<text  x="805.01" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.25%)</title><rect x="828.1" y="357" width="3.0" height="15.0" fill="rgb(208,62,43)" rx="2" ry="2" />
<text  x="831.12" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (300 samples, 5.82%)</title><rect x="780.5" y="517" width="68.7" height="15.0" fill="rgb(249,153,21)" rx="2" ry="2" />
<text  x="783.48" y="527.5" >cql3::s..</text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%)</title><rect x="1160.9" y="581" width="0.2" height="15.0" fill="rgb(229,176,34)" rx="2" ry="2" />
<text  x="1163.91" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="657.9" y="533" width="0.3" height="15.0" fill="rgb(217,33,25)" rx="2" ry="2" />
<text  x="660.95" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="803.2" y="389" width="0.2" height="15.0" fill="rgb(230,58,22)" rx="2" ry="2" />
<text  x="806.16" y="399.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="524.9" y="309" width="0.2" height="15.0" fill="rgb(212,204,11)" rx="2" ry="2" />
<text  x="527.88" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="73.0" y="389" width="0.2" height="15.0" fill="rgb(236,206,38)" rx="2" ry="2" />
<text  x="75.99" y="399.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="18.7" y="517" width="0.2" height="15.0" fill="rgb(253,193,29)" rx="2" ry="2" />
<text  x="21.70" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="445.2" y="325" width="0.2" height="15.0" fill="rgb(221,0,53)" rx="2" ry="2" />
<text  x="448.17" y="335.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="1047.1" y="373" width="0.4" height="15.0" fill="rgb(220,78,50)" rx="2" ry="2" />
<text  x="1050.08" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (323 samples, 6.27%)</title><rect x="217.5" y="341" width="74.0" height="15.0" fill="rgb(212,199,14)" rx="2" ry="2" />
<text  x="220.51" y="351.5" >partitio..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.3" y="485" width="0.2" height="15.0" fill="rgb(238,164,52)" rx="2" ry="2" />
<text  x="70.26" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1028.5" y="341" width="2.1" height="15.0" fill="rgb(250,136,46)" rx="2" ry="2" />
<text  x="1031.53" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="876.0" y="533" width="0.4" height="15.0" fill="rgb(245,193,9)" rx="2" ry="2" />
<text  x="878.99" y="543.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="110.3" y="357" width="0.2" height="15.0" fill="rgb(224,4,13)" rx="2" ry="2" />
<text  x="113.32" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (4 samples, 0.08%)</title><rect x="51.5" y="357" width="0.9" height="15.0" fill="rgb(251,118,43)" rx="2" ry="2" />
<text  x="54.46" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="735.6" y="517" width="0.2" height="15.0" fill="rgb(226,58,14)" rx="2" ry="2" />
<text  x="738.59" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.10%)</title><rect x="956.4" y="485" width="1.1" height="15.0" fill="rgb(247,37,32)" rx="2" ry="2" />
<text  x="959.38" y="495.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="502.0" y="421" width="0.9" height="15.0" fill="rgb(221,6,28)" rx="2" ry="2" />
<text  x="504.97" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="757.6" y="485" width="0.2" height="15.0" fill="rgb(226,11,27)" rx="2" ry="2" />
<text  x="760.58" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1075.3" y="357" width="0.2" height="15.0" fill="rgb(231,3,24)" rx="2" ry="2" />
<text  x="1078.25" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="880.1" y="533" width="0.2" height="15.0" fill="rgb(234,9,0)" rx="2" ry="2" />
<text  x="883.11" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="84.0" y="453" width="0.2" height="15.0" fill="rgb(249,111,45)" rx="2" ry="2" />
<text  x="86.98" y="463.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1126.3" y="341" width="0.3" height="15.0" fill="rgb(250,102,29)" rx="2" ry="2" />
<text  x="1129.33" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (15 samples, 0.29%)</title><rect x="665.3" y="597" width="3.4" height="15.0" fill="rgb(216,95,30)" rx="2" ry="2" />
<text  x="668.28" y="607.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="708.3" y="565" width="0.5" height="15.0" fill="rgb(219,98,53)" rx="2" ry="2" />
<text  x="711.33" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,413 samples, 46.84%)</title><rect x="112.2" y="597" width="552.6" height="15.0" fill="rgb(210,70,49)" rx="2" ry="2" />
<text  x="115.15" y="607.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="863.9" y="469" width="3.4" height="15.0" fill="rgb(252,186,24)" rx="2" ry="2" />
<text  x="866.85" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="673.1" y="581" width="0.4" height="15.0" fill="rgb(222,127,46)" rx="2" ry="2" />
<text  x="676.06" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="1108.7" y="485" width="0.4" height="15.0" fill="rgb(245,144,54)" rx="2" ry="2" />
<text  x="1111.69" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="84.2" y="485" width="0.2" height="15.0" fill="rgb(212,163,39)" rx="2" ry="2" />
<text  x="87.21" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (7 samples, 0.14%)</title><rect x="764.4" y="485" width="1.7" height="15.0" fill="rgb(229,198,41)" rx="2" ry="2" />
<text  x="767.45" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (748 samples, 14.52%)</title><rect x="173.1" y="485" width="171.3" height="15.0" fill="rgb(244,20,44)" rx="2" ry="2" />
<text  x="176.07" y="495.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="43.9" y="405" width="0.2" height="15.0" fill="rgb(243,170,27)" rx="2" ry="2" />
<text  x="46.90" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1166.6" y="293" width="0.3" height="15.0" fill="rgb(222,49,27)" rx="2" ry="2" />
<text  x="1169.64" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::build (7 samples, 0.14%)</title><rect x="630.2" y="533" width="1.6" height="15.0" fill="rgb(232,68,24)" rx="2" ry="2" />
<text  x="633.23" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="717.7" y="469" width="0.3" height="15.0" fill="rgb(247,35,41)" rx="2" ry="2" />
<text  x="720.73" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.04%)</title><rect x="1189.5" y="693" width="0.5" height="15.0" fill="rgb(251,168,6)" rx="2" ry="2" />
<text  x="1192.54" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::file_accessible (1 samples, 0.02%)</title><rect x="717.5" y="325" width="0.2" height="15.0" fill="rgb(212,35,34)" rx="2" ry="2" />
<text  x="720.50" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%)</title><rect x="109.2" y="453" width="0.2" height="15.0" fill="rgb(205,229,4)" rx="2" ry="2" />
<text  x="112.17" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (11 samples, 0.21%)</title><rect x="297.4" y="309" width="2.6" height="15.0" fill="rgb(232,98,53)" rx="2" ry="2" />
<text  x="300.44" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="674.9" y="485" width="0.2" height="15.0" fill="rgb(219,117,54)" rx="2" ry="2" />
<text  x="677.90" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::consume (185 samples, 3.59%)</title><rect x="375.5" y="293" width="42.4" height="15.0" fill="rgb(227,16,45)" rx="2" ry="2" />
<text  x="378.54" y="303.5" >mut..</text>
</g>
<g >
<title>database::find_schema (8 samples, 0.16%)</title><rect x="781.9" y="485" width="1.8" height="15.0" fill="rgb(208,23,39)" rx="2" ry="2" />
<text  x="784.86" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="919.7" y="437" width="0.3" height="15.0" fill="rgb(216,56,24)" rx="2" ry="2" />
<text  x="922.74" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="132.3" y="469" width="0.5" height="15.0" fill="rgb(215,89,42)" rx="2" ry="2" />
<text  x="135.31" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1043.0" y="421" width="0.2" height="15.0" fill="rgb(205,166,15)" rx="2" ry="2" />
<text  x="1045.96" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="103.9" y="533" width="0.2" height="15.0" fill="rgb(246,9,36)" rx="2" ry="2" />
<text  x="106.91" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%)</title><rect x="778.2" y="469" width="0.7" height="15.0" fill="rgb(247,109,48)" rx="2" ry="2" />
<text  x="781.19" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%)</title><rect x="281.2" y="293" width="0.2" height="15.0" fill="rgb(232,137,38)" rx="2" ry="2" />
<text  x="284.18" y="303.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="84.9" y="421" width="0.2" height="15.0" fill="rgb(207,68,44)" rx="2" ry="2" />
<text  x="87.90" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;rows_entry, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="110.3" y="389" width="0.2" height="15.0" fill="rgb(234,19,16)" rx="2" ry="2" />
<text  x="113.32" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="733.1" y="549" width="0.2" height="15.0" fill="rgb(206,56,21)" rx="2" ry="2" />
<text  x="736.07" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="911.0" y="405" width="0.5" height="15.0" fill="rgb(210,109,15)" rx="2" ry="2" />
<text  x="914.03" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (27 samples, 0.52%)</title><rect x="881.3" y="517" width="6.1" height="15.0" fill="rgb(239,4,14)" rx="2" ry="2" />
<text  x="884.26" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (3 samples, 0.06%)</title><rect x="582.6" y="373" width="0.7" height="15.0" fill="rgb(230,187,7)" rx="2" ry="2" />
<text  x="585.59" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="54.4" y="261" width="0.3" height="15.0" fill="rgb(234,193,20)" rx="2" ry="2" />
<text  x="57.43" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="914.9" y="421" width="0.3" height="15.0" fill="rgb(206,60,15)" rx="2" ry="2" />
<text  x="917.93" y="431.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="718.6" y="309" width="0.3" height="15.0" fill="rgb(208,51,0)" rx="2" ry="2" />
<text  x="721.64" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="770.6" y="453" width="0.3" height="15.0" fill="rgb(232,110,45)" rx="2" ry="2" />
<text  x="773.63" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1042.5" y="437" width="0.2" height="15.0" fill="rgb(244,75,5)" rx="2" ry="2" />
<text  x="1045.50" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="993.7" y="373" width="0.2" height="15.0" fill="rgb(252,210,19)" rx="2" ry="2" />
<text  x="996.72" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="285.3" y="261" width="0.2" height="15.0" fill="rgb(225,197,15)" rx="2" ry="2" />
<text  x="288.30" y="271.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="82.6" y="661" width="0.5" height="15.0" fill="rgb(222,34,5)" rx="2" ry="2" />
<text  x="85.60" y="671.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (3 samples, 0.06%)</title><rect x="1126.3" y="373" width="0.7" height="15.0" fill="rgb(215,33,29)" rx="2" ry="2" />
<text  x="1129.33" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1108.2" y="469" width="0.5" height="15.0" fill="rgb(253,103,28)" rx="2" ry="2" />
<text  x="1111.23" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="530.1" y="373" width="0.5" height="15.0" fill="rgb(245,216,8)" rx="2" ry="2" />
<text  x="533.14" y="383.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="18.2" y="405" width="0.3" height="15.0" fill="rgb(243,115,19)" rx="2" ry="2" />
<text  x="21.25" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1022.6" y="293" width="0.4" height="15.0" fill="rgb(239,87,20)" rx="2" ry="2" />
<text  x="1025.57" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="21.7" y="373" width="0.2" height="15.0" fill="rgb(234,215,6)" rx="2" ry="2" />
<text  x="24.68" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (4 samples, 0.08%)</title><rect x="717.7" y="565" width="0.9" height="15.0" fill="rgb(247,223,18)" rx="2" ry="2" />
<text  x="720.73" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="718.2" y="453" width="0.4" height="15.0" fill="rgb(226,7,7)" rx="2" ry="2" />
<text  x="721.18" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="108.9" y="325" width="0.3" height="15.0" fill="rgb(231,62,22)" rx="2" ry="2" />
<text  x="111.94" y="335.5" ></text>
</g>
<g >
<title>sstables::seal_statistics (1 samples, 0.02%)</title><rect x="81.9" y="405" width="0.2" height="15.0" fill="rgb(215,124,17)" rx="2" ry="2" />
<text  x="84.92" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%)</title><rect x="79.6" y="309" width="0.3" height="15.0" fill="rgb(224,162,3)" rx="2" ry="2" />
<text  x="82.63" y="319.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="880.1" y="517" width="0.2" height="15.0" fill="rgb(243,69,5)" rx="2" ry="2" />
<text  x="883.11" y="527.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="196.9" y="341" width="0.5" height="15.0" fill="rgb(210,192,13)" rx="2" ry="2" />
<text  x="199.89" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1166.6" y="549" width="0.3" height="15.0" fill="rgb(231,83,10)" rx="2" ry="2" />
<text  x="1169.64" y="559.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%)</title><rect x="110.3" y="581" width="1.2" height="15.0" fill="rgb(230,86,40)" rx="2" ry="2" />
<text  x="113.32" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_initial_partition_key_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="309" width="0.3" height="15.0" fill="rgb(235,102,26)" rx="2" ry="2" />
<text  x="85.83" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="18.2" y="629" width="0.3" height="15.0" fill="rgb(237,116,40)" rx="2" ry="2" />
<text  x="21.25" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="668.0" y="565" width="0.5" height="15.0" fill="rgb(234,115,32)" rx="2" ry="2" />
<text  x="671.02" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="543.0" y="325" width="0.2" height="15.0" fill="rgb(213,13,45)" rx="2" ry="2" />
<text  x="545.97" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.6" y="613" width="0.2" height="15.0" fill="rgb(227,39,5)" rx="2" ry="2" />
<text  x="20.56" y="623.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (39 samples, 0.76%)</title><rect x="365.0" y="293" width="8.9" height="15.0" fill="rgb(229,214,18)" rx="2" ry="2" />
<text  x="368.01" y="303.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%)</title><rect x="717.7" y="485" width="0.3" height="15.0" fill="rgb(226,83,23)" rx="2" ry="2" />
<text  x="720.73" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="1135.3" y="357" width="1.1" height="15.0" fill="rgb(246,8,54)" rx="2" ry="2" />
<text  x="1138.26" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="969.4" y="469" width="0.3" height="15.0" fill="rgb(226,115,11)" rx="2" ry="2" />
<text  x="972.44" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="718.2" y="421" width="0.4" height="15.0" fill="rgb(210,145,17)" rx="2" ry="2" />
<text  x="721.18" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1124.3" y="261" width="0.4" height="15.0" fill="rgb(207,114,10)" rx="2" ry="2" />
<text  x="1127.27" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (3 samples, 0.06%)</title><rect x="77.3" y="565" width="0.7" height="15.0" fill="rgb(212,104,23)" rx="2" ry="2" />
<text  x="80.34" y="575.5" ></text>
</g>
<g >
<title>dht::minimum_token (2 samples, 0.04%)</title><rect x="483.0" y="421" width="0.4" height="15.0" fill="rgb(230,153,11)" rx="2" ry="2" />
<text  x="485.96" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.1" y="501" width="0.2" height="15.0" fill="rgb(223,213,3)" rx="2" ry="2" />
<text  x="80.11" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="60.8" y="373" width="0.3" height="15.0" fill="rgb(209,58,3)" rx="2" ry="2" />
<text  x="63.85" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1018.0" y="277" width="0.5" height="15.0" fill="rgb(241,164,41)" rx="2" ry="2" />
<text  x="1020.99" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="18.2" y="533" width="0.3" height="15.0" fill="rgb(224,143,28)" rx="2" ry="2" />
<text  x="21.25" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::has_partition_key_unrestricted_components (1 samples, 0.02%)</title><rect x="70.7" y="517" width="0.2" height="15.0" fill="rgb(248,47,50)" rx="2" ry="2" />
<text  x="73.69" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (9 samples, 0.17%)</title><rect x="713.8" y="565" width="2.1" height="15.0" fill="rgb(248,152,10)" rx="2" ry="2" />
<text  x="716.83" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%)</title><rect x="110.3" y="501" width="0.2" height="15.0" fill="rgb(230,131,38)" rx="2" ry="2" />
<text  x="113.32" y="511.5" ></text>
</g>
<g >
<title>__strlen_avx2 (13 samples, 0.25%)</title><rect x="1008.1" y="341" width="3.0" height="15.0" fill="rgb(238,0,1)" rx="2" ry="2" />
<text  x="1011.14" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="683.6" y="485" width="0.2" height="15.0" fill="rgb(214,178,52)" rx="2" ry="2" />
<text  x="686.60" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="408.1" y="261" width="0.2" height="15.0" fill="rgb(216,63,41)" rx="2" ry="2" />
<text  x="411.07" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1135.0" y="357" width="0.3" height="15.0" fill="rgb(245,162,30)" rx="2" ry="2" />
<text  x="1138.03" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (2 samples, 0.04%)</title><rect x="322.4" y="405" width="0.5" height="15.0" fill="rgb(232,172,17)" rx="2" ry="2" />
<text  x="325.41" y="415.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (8 samples, 0.16%)</title><rect x="1163.0" y="549" width="1.8" height="15.0" fill="rgb(209,77,17)" rx="2" ry="2" />
<text  x="1165.97" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="743.8" y="581" width="0.7" height="15.0" fill="rgb(212,198,22)" rx="2" ry="2" />
<text  x="746.84" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, sstables::sstable::update_info_for_opened_data (1 samples, 0.02%)</title><rect x="746.6" y="597" width="0.2" height="15.0" fill="rgb(233,194,16)" rx="2" ry="2" />
<text  x="749.58" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.9" y="373" width="0.2" height="15.0" fill="rgb(223,31,26)" rx="2" ry="2" />
<text  x="41.86" y="383.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (2 samples, 0.04%)</title><rect x="708.3" y="549" width="0.5" height="15.0" fill="rgb(223,219,19)" rx="2" ry="2" />
<text  x="711.33" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1136.9" y="581" width="0.4" height="15.0" fill="rgb(241,91,8)" rx="2" ry="2" />
<text  x="1139.86" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_group::update_maximal_rg (1 samples, 0.02%)</title><rect x="83.1" y="501" width="0.2" height="15.0" fill="rgb(227,40,51)" rx="2" ry="2" />
<text  x="86.06" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="68.6" y="533" width="0.3" height="15.0" fill="rgb(214,224,1)" rx="2" ry="2" />
<text  x="71.63" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (96 samples, 1.86%)</title><rect x="40.0" y="469" width="22.0" height="15.0" fill="rgb(218,191,2)" rx="2" ry="2" />
<text  x="43.00" y="479.5" >c..</text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (4 samples, 0.08%)</title><rect x="348.1" y="469" width="0.9" height="15.0" fill="rgb(245,182,1)" rx="2" ry="2" />
<text  x="351.06" y="479.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1049.4" y="421" width="0.2" height="15.0" fill="rgb(245,156,23)" rx="2" ry="2" />
<text  x="1052.37" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%)</title><rect x="845.5" y="405" width="0.7" height="15.0" fill="rgb(249,16,33)" rx="2" ry="2" />
<text  x="848.53" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="60.4" y="213" width="0.2" height="15.0" fill="rgb(253,80,10)" rx="2" ry="2" />
<text  x="63.39" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (16 samples, 0.31%)</title><rect x="851.7" y="533" width="3.7" height="15.0" fill="rgb(229,117,47)" rx="2" ry="2" />
<text  x="854.71" y="543.5" ></text>
</g>
<g >
<title>database::find_uuid (14 samples, 0.27%)</title><rect x="843.2" y="453" width="3.2" height="15.0" fill="rgb(213,50,34)" rx="2" ry="2" />
<text  x="846.24" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="816.2" y="293" width="0.2" height="15.0" fill="rgb(245,214,39)" rx="2" ry="2" />
<text  x="819.21" y="303.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="778.6" y="453" width="0.3" height="15.0" fill="rgb(247,144,50)" rx="2" ry="2" />
<text  x="781.65" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="133.0" y="469" width="0.2" height="15.0" fill="rgb(212,203,8)" rx="2" ry="2" />
<text  x="135.99" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="782.3" y="469" width="1.4" height="15.0" fill="rgb(205,227,2)" rx="2" ry="2" />
<text  x="785.31" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (21 samples, 0.41%)</title><rect x="51.0" y="405" width="4.8" height="15.0" fill="rgb(233,131,40)" rx="2" ry="2" />
<text  x="54.00" y="415.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="884.9" y="389" width="0.3" height="15.0" fill="rgb(207,88,4)" rx="2" ry="2" />
<text  x="887.92" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::syscall_result_extra&lt;stat&gt;  (1 samples, 0.02%)</title><rect x="1189.8" y="645" width="0.2" height="15.0" fill="rgb(212,81,18)" rx="2" ry="2" />
<text  x="1192.77" y="655.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.47%)</title><rect x="11.4" y="693" width="5.5" height="15.0" fill="rgb(215,133,4)" rx="2" ry="2" />
<text  x="14.37" y="703.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="900.7" y="501" width="0.3" height="15.0" fill="rgb(229,198,34)" rx="2" ry="2" />
<text  x="903.73" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="10.5" y="613" width="0.2" height="15.0" fill="rgb(244,65,25)" rx="2" ry="2" />
<text  x="13.46" y="623.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="562.2" y="357" width="0.5" height="15.0" fill="rgb(223,213,50)" rx="2" ry="2" />
<text  x="565.21" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="625.4" y="501" width="0.3" height="15.0" fill="rgb(224,75,20)" rx="2" ry="2" />
<text  x="628.42" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1162.5" y="549" width="0.5" height="15.0" fill="rgb(244,193,42)" rx="2" ry="2" />
<text  x="1165.52" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="875.3" y="517" width="0.7" height="15.0" fill="rgb(238,20,22)" rx="2" ry="2" />
<text  x="878.30" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="944.0" y="501" width="0.7" height="15.0" fill="rgb(250,191,32)" rx="2" ry="2" />
<text  x="947.01" y="511.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (2 samples, 0.04%)</title><rect x="81.2" y="597" width="0.5" height="15.0" fill="rgb(239,217,47)" rx="2" ry="2" />
<text  x="84.23" y="607.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="291.5" y="341" width="0.2" height="15.0" fill="rgb(231,175,46)" rx="2" ry="2" />
<text  x="294.49" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="70.5" y="437" width="0.2" height="15.0" fill="rgb(227,144,6)" rx="2" ry="2" />
<text  x="73.47" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (1 samples, 0.02%)</title><rect x="881.7" y="437" width="0.2" height="15.0" fill="rgb(226,84,13)" rx="2" ry="2" />
<text  x="884.72" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (5 samples, 0.10%)</title><rect x="805.7" y="389" width="1.1" height="15.0" fill="rgb(233,135,8)" rx="2" ry="2" />
<text  x="808.68" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="831.8" y="373" width="0.2" height="15.0" fill="rgb(219,207,4)" rx="2" ry="2" />
<text  x="834.79" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="718.6" y="405" width="0.3" height="15.0" fill="rgb(213,40,29)" rx="2" ry="2" />
<text  x="721.64" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="24.0" y="357" width="1.3" height="15.0" fill="rgb(247,72,21)" rx="2" ry="2" />
<text  x="26.97" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="766.1" y="485" width="0.2" height="15.0" fill="rgb(205,61,23)" rx="2" ry="2" />
<text  x="769.05" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (7 samples, 0.14%)</title><rect x="764.4" y="469" width="1.7" height="15.0" fill="rgb(250,37,51)" rx="2" ry="2" />
<text  x="767.45" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.4" y="373" width="0.2" height="15.0" fill="rgb(213,107,4)" rx="2" ry="2" />
<text  x="82.40" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (13 samples, 0.25%)</title><rect x="679.7" y="565" width="3.0" height="15.0" fill="rgb(250,144,36)" rx="2" ry="2" />
<text  x="682.70" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="1143.7" y="581" width="0.7" height="15.0" fill="rgb(239,171,33)" rx="2" ry="2" />
<text  x="1146.73" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="60.8" y="341" width="0.3" height="15.0" fill="rgb(218,60,13)" rx="2" ry="2" />
<text  x="63.85" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (15 samples, 0.29%)</title><rect x="337.1" y="389" width="3.4" height="15.0" fill="rgb(236,222,52)" rx="2" ry="2" />
<text  x="340.07" y="399.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%)</title><rect x="719.6" y="581" width="0.2" height="15.0" fill="rgb(241,148,24)" rx="2" ry="2" />
<text  x="722.56" y="591.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%)</title><rect x="592.0" y="437" width="0.2" height="15.0" fill="rgb(207,82,0)" rx="2" ry="2" />
<text  x="594.98" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="52.1" y="341" width="0.3" height="15.0" fill="rgb(208,165,28)" rx="2" ry="2" />
<text  x="55.14" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="1037.7" y="293" width="0.9" height="15.0" fill="rgb(216,224,47)" rx="2" ry="2" />
<text  x="1040.69" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="1127.9" y="405" width="3.0" height="15.0" fill="rgb(234,173,10)" rx="2" ry="2" />
<text  x="1130.93" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="569.8" y="405" width="0.4" height="15.0" fill="rgb(217,94,50)" rx="2" ry="2" />
<text  x="572.77" y="415.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="38.9" y="357" width="0.2" height="15.0" fill="rgb(234,223,17)" rx="2" ry="2" />
<text  x="41.86" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="816.4" y="309" width="0.5" height="15.0" fill="rgb(237,122,53)" rx="2" ry="2" />
<text  x="819.44" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="60.2" y="373" width="0.2" height="15.0" fill="rgb(214,141,25)" rx="2" ry="2" />
<text  x="63.16" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="800.9" y="389" width="0.9" height="15.0" fill="rgb(225,224,48)" rx="2" ry="2" />
<text  x="803.87" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="937.1" y="453" width="0.3" height="15.0" fill="rgb(248,153,32)" rx="2" ry="2" />
<text  x="940.14" y="463.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (17 samples, 0.33%)</title><rect x="757.1" y="533" width="3.9" height="15.0" fill="rgb(233,81,49)" rx="2" ry="2" />
<text  x="760.12" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.2" y="485" width="0.3" height="15.0" fill="rgb(208,12,43)" rx="2" ry="2" />
<text  x="21.25" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="55.1" y="197" width="0.2" height="15.0" fill="rgb(222,40,10)" rx="2" ry="2" />
<text  x="58.12" y="207.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;service::storage_service&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;database&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::gossiper&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, service::storage_service_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_manager&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;cdc::generation_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;repair_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::raft_group_registry&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::endpoint_lifecycle_notifier&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="277" width="0.2" height="15.0" fill="rgb(246,112,50)" rx="2" ry="2" />
<text  x="749.81" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1144.4" y="581" width="0.5" height="15.0" fill="rgb(211,65,44)" rx="2" ry="2" />
<text  x="1147.42" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="35.9" y="357" width="0.2" height="15.0" fill="rgb(240,143,41)" rx="2" ry="2" />
<text  x="38.88" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="936.2" y="421" width="0.9" height="15.0" fill="rgb(238,71,39)" rx="2" ry="2" />
<text  x="939.23" y="431.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="1137.6" y="357" width="0.2" height="15.0" fill="rgb(228,31,4)" rx="2" ry="2" />
<text  x="1140.55" y="367.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="599.8" y="373" width="0.4" height="15.0" fill="rgb(208,25,9)" rx="2" ry="2" />
<text  x="602.77" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%)</title><rect x="803.4" y="389" width="0.7" height="15.0" fill="rgb(235,70,32)" rx="2" ry="2" />
<text  x="806.39" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1154.7" y="565" width="0.3" height="15.0" fill="rgb(206,151,24)" rx="2" ry="2" />
<text  x="1157.73" y="575.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="17.3" y="613" width="0.3" height="15.0" fill="rgb(227,193,50)" rx="2" ry="2" />
<text  x="20.33" y="623.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.70%)</title><rect x="818.0" y="309" width="8.3" height="15.0" fill="rgb(208,54,10)" rx="2" ry="2" />
<text  x="821.04" y="319.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (2 samples, 0.04%)</title><rect x="109.9" y="325" width="0.4" height="15.0" fill="rgb(228,54,46)" rx="2" ry="2" />
<text  x="112.86" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (37 samples, 0.72%)</title><rect x="1127.9" y="453" width="8.5" height="15.0" fill="rgb(233,100,20)" rx="2" ry="2" />
<text  x="1130.93" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (9 samples, 0.17%)</title><rect x="869.8" y="485" width="2.1" height="15.0" fill="rgb(227,129,38)" rx="2" ry="2" />
<text  x="872.81" y="495.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="789.6" y="501" width="0.3" height="15.0" fill="rgb(210,145,50)" rx="2" ry="2" />
<text  x="792.64" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (13 samples, 0.25%)</title><rect x="497.6" y="373" width="3.0" height="15.0" fill="rgb(232,77,51)" rx="2" ry="2" />
<text  x="500.62" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (1 samples, 0.02%)</title><rect x="881.5" y="501" width="0.2" height="15.0" fill="rgb(225,48,39)" rx="2" ry="2" />
<text  x="884.49" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.14%)</title><rect x="40.9" y="453" width="1.6" height="15.0" fill="rgb(209,31,54)" rx="2" ry="2" />
<text  x="43.92" y="463.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="99.6" y="565" width="1.1" height="15.0" fill="rgb(235,202,7)" rx="2" ry="2" />
<text  x="102.55" y="575.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="1125.9" y="341" width="0.2" height="15.0" fill="rgb(253,63,12)" rx="2" ry="2" />
<text  x="1128.87" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="756.2" y="549" width="0.2" height="15.0" fill="rgb(208,110,19)" rx="2" ry="2" />
<text  x="759.20" y="559.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (3 samples, 0.06%)</title><rect x="258.3" y="181" width="0.7" height="15.0" fill="rgb(252,225,50)" rx="2" ry="2" />
<text  x="261.28" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (11 samples, 0.21%)</title><rect x="305.2" y="309" width="2.5" height="15.0" fill="rgb(217,142,37)" rx="2" ry="2" />
<text  x="308.23" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%)</title><rect x="1092.7" y="485" width="0.2" height="15.0" fill="rgb(208,159,15)" rx="2" ry="2" />
<text  x="1095.66" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="1083.7" y="501" width="0.9" height="15.0" fill="rgb(232,152,49)" rx="2" ry="2" />
<text  x="1086.73" y="511.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.6" y="373" width="0.3" height="15.0" fill="rgb(242,30,52)" rx="2" ry="2" />
<text  x="82.63" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (6 samples, 0.12%)</title><rect x="54.4" y="373" width="1.4" height="15.0" fill="rgb(217,219,25)" rx="2" ry="2" />
<text  x="57.43" y="383.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="862.9" y="501" width="0.7" height="15.0" fill="rgb(232,224,50)" rx="2" ry="2" />
<text  x="865.93" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1132.7" y="213" width="0.3" height="15.0" fill="rgb(223,185,8)" rx="2" ry="2" />
<text  x="1135.74" y="223.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="1125.0" y="261" width="0.2" height="15.0" fill="rgb(233,112,23)" rx="2" ry="2" />
<text  x="1127.95" y="271.5" ></text>
</g>
<g >
<title>from_hex (5 samples, 0.10%)</title><rect x="69.3" y="437" width="1.2" height="15.0" fill="rgb(215,88,45)" rx="2" ry="2" />
<text  x="72.32" y="447.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1124.7" y="277" width="0.3" height="15.0" fill="rgb(227,65,20)" rx="2" ry="2" />
<text  x="1127.72" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="54.4" y="197" width="0.3" height="15.0" fill="rgb(219,80,28)" rx="2" ry="2" />
<text  x="57.43" y="207.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="51.9" y="325" width="0.2" height="15.0" fill="rgb(217,107,16)" rx="2" ry="2" />
<text  x="54.91" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1121.5" y="309" width="0.2" height="15.0" fill="rgb(228,96,10)" rx="2" ry="2" />
<text  x="1124.52" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="217.3" y="325" width="0.2" height="15.0" fill="rgb(217,152,17)" rx="2" ry="2" />
<text  x="220.28" y="335.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="627.9" y="485" width="0.7" height="15.0" fill="rgb(213,72,31)" rx="2" ry="2" />
<text  x="630.94" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%)</title><rect x="1131.8" y="213" width="0.9" height="15.0" fill="rgb(228,73,26)" rx="2" ry="2" />
<text  x="1134.82" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="930.5" y="485" width="0.5" height="15.0" fill="rgb(250,50,35)" rx="2" ry="2" />
<text  x="933.50" y="495.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="109.6" y="421" width="0.7" height="15.0" fill="rgb(223,148,5)" rx="2" ry="2" />
<text  x="112.63" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="950.4" y="485" width="0.5" height="15.0" fill="rgb(228,175,35)" rx="2" ry="2" />
<text  x="953.43" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%)</title><rect x="360.4" y="325" width="0.3" height="15.0" fill="rgb(250,80,52)" rx="2" ry="2" />
<text  x="363.43" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="780.3" y="501" width="0.2" height="15.0" fill="rgb(209,37,48)" rx="2" ry="2" />
<text  x="783.25" y="511.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%)</title><rect x="213.8" y="309" width="1.9" height="15.0" fill="rgb(235,31,54)" rx="2" ry="2" />
<text  x="216.84" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1108.9" y="469" width="0.2" height="15.0" fill="rgb(226,38,26)" rx="2" ry="2" />
<text  x="1111.92" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="609.4" y="373" width="0.4" height="15.0" fill="rgb(241,176,33)" rx="2" ry="2" />
<text  x="612.39" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.3" y="341" width="0.2" height="15.0" fill="rgb(206,131,7)" rx="2" ry="2" />
<text  x="1037.25" y="351.5" ></text>
</g>
<g >
<title>__GI_____strtoll_l_internal (1 samples, 0.02%)</title><rect x="16.9" y="693" width="0.2" height="15.0" fill="rgb(235,156,44)" rx="2" ry="2" />
<text  x="19.87" y="703.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="156.1" y="533" width="0.5" height="15.0" fill="rgb(244,151,17)" rx="2" ry="2" />
<text  x="159.13" y="543.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%)</title><rect x="81.2" y="613" width="0.5" height="15.0" fill="rgb(226,192,43)" rx="2" ry="2" />
<text  x="84.23" y="623.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="562.2" y="373" width="0.5" height="15.0" fill="rgb(244,112,36)" rx="2" ry="2" />
<text  x="565.21" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="1112.6" y="501" width="0.4" height="15.0" fill="rgb(232,205,36)" rx="2" ry="2" />
<text  x="1115.59" y="511.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_line (1 samples, 0.02%)</title><rect x="26.0" y="373" width="0.3" height="15.0" fill="rgb(210,179,49)" rx="2" ry="2" />
<text  x="29.03" y="383.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="42.5" y="453" width="0.3" height="15.0" fill="rgb(232,194,31)" rx="2" ry="2" />
<text  x="45.52" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;__gnu_cxx::__normal_iterator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, keyspace::make_directory_for_column_family (1 samples, 0.02%)</title><rect x="82.6" y="501" width="0.2" height="15.0" fill="rgb(241,51,30)" rx="2" ry="2" />
<text  x="85.60" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="746.1" y="517" width="0.3" height="15.0" fill="rgb(227,101,26)" rx="2" ry="2" />
<text  x="749.13" y="527.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (4 samples, 0.08%)</title><rect x="658.2" y="517" width="0.9" height="15.0" fill="rgb(236,71,1)" rx="2" ry="2" />
<text  x="661.18" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="831.1" y="373" width="0.2" height="15.0" fill="rgb(238,54,6)" rx="2" ry="2" />
<text  x="834.10" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="21.2" y="453" width="0.3" height="15.0" fill="rgb(207,153,45)" rx="2" ry="2" />
<text  x="24.22" y="463.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (14 samples, 0.27%)</title><rect x="1121.7" y="341" width="3.3" height="15.0" fill="rgb(222,225,9)" rx="2" ry="2" />
<text  x="1124.75" y="351.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%)</title><rect x="77.3" y="549" width="0.3" height="15.0" fill="rgb(227,172,22)" rx="2" ry="2" />
<text  x="80.34" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="75.3" y="485" width="0.2" height="15.0" fill="rgb(242,197,52)" rx="2" ry="2" />
<text  x="78.28" y="495.5" ></text>
</g>
<g >
<title>auth::service::get_uncached_permissions (1 samples, 0.02%)</title><rect x="1166.6" y="437" width="0.3" height="15.0" fill="rgb(225,66,24)" rx="2" ry="2" />
<text  x="1169.64" y="447.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned int&gt;::the_value (1 samples, 0.02%)</title><rect x="1130.7" y="357" width="0.2" height="15.0" fill="rgb(242,117,11)" rx="2" ry="2" />
<text  x="1133.68" y="367.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%)</title><rect x="1001.7" y="373" width="0.3" height="15.0" fill="rgb(220,162,1)" rx="2" ry="2" />
<text  x="1004.73" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="1159.8" y="581" width="1.1" height="15.0" fill="rgb(232,72,3)" rx="2" ry="2" />
<text  x="1162.77" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="229" width="0.5" height="15.0" fill="rgb(227,127,27)" rx="2" ry="2" />
<text  x="56.52" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%)</title><rect x="599.3" y="405" width="0.9" height="15.0" fill="rgb(221,22,35)" rx="2" ry="2" />
<text  x="602.31" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="47.6" y="389" width="0.2" height="15.0" fill="rgb(240,169,2)" rx="2" ry="2" />
<text  x="50.56" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_startIndex (1 samples, 0.02%)</title><rect x="27.6" y="357" width="0.3" height="15.0" fill="rgb(223,3,44)" rx="2" ry="2" />
<text  x="30.64" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.9" y="693" width="0.2" height="15.0" fill="rgb(253,144,0)" rx="2" ry="2" />
<text  x="84.92" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.0" y="357" width="0.5" height="15.0" fill="rgb(251,84,40)" rx="2" ry="2" />
<text  x="48.04" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="47.6" y="309" width="0.2" height="15.0" fill="rgb(232,25,46)" rx="2" ry="2" />
<text  x="50.56" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="795.1" y="469" width="0.3" height="15.0" fill="rgb(214,125,0)" rx="2" ry="2" />
<text  x="798.14" y="479.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1039.3" y="405" width="0.2" height="15.0" fill="rgb(249,189,9)" rx="2" ry="2" />
<text  x="1042.29" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%)</title><rect x="185.7" y="405" width="0.4" height="15.0" fill="rgb(231,57,33)" rx="2" ry="2" />
<text  x="188.67" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (14 samples, 0.27%)</title><rect x="868.7" y="501" width="3.2" height="15.0" fill="rgb(215,154,10)" rx="2" ry="2" />
<text  x="871.66" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (2 samples, 0.04%)</title><rect x="641.2" y="533" width="0.5" height="15.0" fill="rgb(227,24,1)" rx="2" ry="2" />
<text  x="644.23" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (6 samples, 0.12%)</title><rect x="931.6" y="469" width="1.4" height="15.0" fill="rgb(253,228,13)" rx="2" ry="2" />
<text  x="934.65" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (519 samples, 10.07%)</title><rect x="755.3" y="565" width="118.9" height="15.0" fill="rgb(232,221,31)" rx="2" ry="2" />
<text  x="758.29" y="575.5" >single_node_cq..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="161.6" y="517" width="1.4" height="15.0" fill="rgb(210,27,4)" rx="2" ry="2" />
<text  x="164.62" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="671.0" y="565" width="0.2" height="15.0" fill="rgb(251,69,14)" rx="2" ry="2" />
<text  x="674.00" y="575.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a59683b929e6b30d9803453a6167c92c7df06c25] (1 samples, 0.02%)</title><rect x="195.5" y="341" width="0.2" height="15.0" fill="rgb(228,15,45)" rx="2" ry="2" />
<text  x="198.52" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="776.4" y="485" width="0.4" height="15.0" fill="rgb(221,212,32)" rx="2" ry="2" />
<text  x="779.36" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="320.1" y="389" width="0.2" height="15.0" fill="rgb(226,188,44)" rx="2" ry="2" />
<text  x="323.12" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="882.9" y="437" width="0.2" height="15.0" fill="rgb(236,122,14)" rx="2" ry="2" />
<text  x="885.86" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,706 samples, 91.34%)</title><rect x="88.8" y="613" width="1077.8" height="15.0" fill="rgb(205,33,21)" rx="2" ry="2" />
<text  x="91.79" y="623.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (2 samples, 0.04%)</title><rect x="206.7" y="357" width="0.5" height="15.0" fill="rgb(245,110,6)" rx="2" ry="2" />
<text  x="209.74" y="367.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (10 samples, 0.19%)</title><rect x="1155.2" y="565" width="2.3" height="15.0" fill="rgb(211,175,42)" rx="2" ry="2" />
<text  x="1158.19" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (7 samples, 0.14%)</title><rect x="946.8" y="453" width="1.6" height="15.0" fill="rgb(236,208,36)" rx="2" ry="2" />
<text  x="949.76" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="769.9" y="469" width="0.5" height="15.0" fill="rgb(228,215,30)" rx="2" ry="2" />
<text  x="772.95" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="923.2" y="453" width="0.4" height="15.0" fill="rgb(234,105,43)" rx="2" ry="2" />
<text  x="926.17" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (37 samples, 0.72%)</title><rect x="68.9" y="565" width="8.4" height="15.0" fill="rgb(225,58,44)" rx="2" ry="2" />
<text  x="71.86" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.02%)</title><rect x="25.8" y="277" width="0.2" height="15.0" fill="rgb(214,67,0)" rx="2" ry="2" />
<text  x="28.80" y="287.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="341" width="0.2" height="15.0" fill="rgb(228,57,20)" rx="2" ry="2" />
<text  x="82.17" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (190 samples, 3.69%)</title><rect x="23.3" y="485" width="43.5" height="15.0" fill="rgb(249,24,48)" rx="2" ry="2" />
<text  x="26.28" y="495.5" >cql3..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="40.9" y="421" width="0.7" height="15.0" fill="rgb(218,98,27)" rx="2" ry="2" />
<text  x="43.92" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="718.2" y="405" width="0.4" height="15.0" fill="rgb(245,127,24)" rx="2" ry="2" />
<text  x="721.18" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.12%)</title><rect x="865.9" y="421" width="1.4" height="15.0" fill="rgb(223,66,20)" rx="2" ry="2" />
<text  x="868.91" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="725.3" y="549" width="0.4" height="15.0" fill="rgb(213,197,23)" rx="2" ry="2" />
<text  x="728.28" y="559.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (8 samples, 0.16%)</title><rect x="808.4" y="357" width="1.9" height="15.0" fill="rgb(233,8,10)" rx="2" ry="2" />
<text  x="811.42" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.29%)</title><rect x="521.4" y="309" width="3.5" height="15.0" fill="rgb(237,86,46)" rx="2" ry="2" />
<text  x="524.44" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="21.0" y="485" width="0.5" height="15.0" fill="rgb(222,181,32)" rx="2" ry="2" />
<text  x="23.99" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.14%)</title><rect x="537.5" y="309" width="1.6" height="15.0" fill="rgb(227,54,0)" rx="2" ry="2" />
<text  x="540.47" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="629.8" y="485" width="0.4" height="15.0" fill="rgb(212,163,17)" rx="2" ry="2" />
<text  x="632.77" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%)</title><rect x="917.7" y="469" width="2.5" height="15.0" fill="rgb(231,132,1)" rx="2" ry="2" />
<text  x="920.67" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="585.6" y="501" width="0.2" height="15.0" fill="rgb(205,101,45)" rx="2" ry="2" />
<text  x="588.57" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="40.9" y="341" width="0.7" height="15.0" fill="rgb(254,204,32)" rx="2" ry="2" />
<text  x="43.92" y="351.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (24 samples, 0.47%)</title><rect x="496.2" y="405" width="5.5" height="15.0" fill="rgb(205,63,33)" rx="2" ry="2" />
<text  x="499.25" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (2 samples, 0.04%)</title><rect x="1133.2" y="213" width="0.5" height="15.0" fill="rgb(229,146,52)" rx="2" ry="2" />
<text  x="1136.20" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="683.6" y="501" width="0.2" height="15.0" fill="rgb(226,146,51)" rx="2" ry="2" />
<text  x="686.60" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1113.7" y="517" width="0.3" height="15.0" fill="rgb(243,99,28)" rx="2" ry="2" />
<text  x="1116.73" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (4 samples, 0.08%)</title><rect x="1017.8" y="293" width="0.9" height="15.0" fill="rgb(232,10,25)" rx="2" ry="2" />
<text  x="1020.76" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="173.8" y="469" width="0.2" height="15.0" fill="rgb(239,226,53)" rx="2" ry="2" />
<text  x="176.76" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="885.4" y="293" width="0.2" height="15.0" fill="rgb(216,136,37)" rx="2" ry="2" />
<text  x="888.38" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="56.5" y="405" width="0.2" height="15.0" fill="rgb(251,207,35)" rx="2" ry="2" />
<text  x="59.49" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="82.6" y="613" width="0.5" height="15.0" fill="rgb(210,125,25)" rx="2" ry="2" />
<text  x="85.60" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="467.8" y="469" width="0.3" height="15.0" fill="rgb(253,121,52)" rx="2" ry="2" />
<text  x="470.85" y="479.5" ></text>
</g>
<g >
<title>do_io_check&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="665.0" y="533" width="0.3" height="15.0" fill="rgb(225,207,45)" rx="2" ry="2" />
<text  x="668.05" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.6" y="597" width="0.2" height="15.0" fill="rgb(207,197,26)" rx="2" ry="2" />
<text  x="20.56" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="21.9" y="405" width="0.2" height="15.0" fill="rgb(221,225,49)" rx="2" ry="2" />
<text  x="24.91" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="81.9" y="501" width="0.2" height="15.0" fill="rgb(251,56,42)" rx="2" ry="2" />
<text  x="84.92" y="511.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="109.2" y="389" width="0.2" height="15.0" fill="rgb(245,193,14)" rx="2" ry="2" />
<text  x="112.17" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="216.4" y="325" width="0.2" height="15.0" fill="rgb(221,78,20)" rx="2" ry="2" />
<text  x="219.36" y="335.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="996.5" y="357" width="1.1" height="15.0" fill="rgb(227,163,42)" rx="2" ry="2" />
<text  x="999.46" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="999.2" y="389" width="0.2" height="15.0" fill="rgb(232,44,18)" rx="2" ry="2" />
<text  x="1002.21" y="399.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="42.3" y="293" width="0.2" height="15.0" fill="rgb(233,207,21)" rx="2" ry="2" />
<text  x="45.29" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="571.4" y="485" width="1.1" height="15.0" fill="rgb(205,190,51)" rx="2" ry="2" />
<text  x="574.37" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="746.8" y="469" width="0.2" height="15.0" fill="rgb(228,132,10)" rx="2" ry="2" />
<text  x="749.81" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1113.0" y="517" width="0.3" height="15.0" fill="rgb(246,11,0)" rx="2" ry="2" />
<text  x="1116.04" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="10.2" y="549" width="0.3" height="15.0" fill="rgb(228,72,54)" rx="2" ry="2" />
<text  x="13.23" y="559.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="37.3" y="325" width="0.4" height="15.0" fill="rgb(234,69,47)" rx="2" ry="2" />
<text  x="40.26" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="1120.4" y="245" width="0.2" height="15.0" fill="rgb(226,71,48)" rx="2" ry="2" />
<text  x="1123.37" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="567.9" y="437" width="1.0" height="15.0" fill="rgb(206,16,12)" rx="2" ry="2" />
<text  x="570.93" y="447.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="106.4" y="437" width="0.3" height="15.0" fill="rgb(240,157,0)" rx="2" ry="2" />
<text  x="109.42" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (6 samples, 0.12%)</title><rect x="160.0" y="501" width="1.4" height="15.0" fill="rgb(253,118,29)" rx="2" ry="2" />
<text  x="163.02" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="53.3" y="357" width="0.7" height="15.0" fill="rgb(248,200,23)" rx="2" ry="2" />
<text  x="56.29" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="44.6" y="373" width="0.4" height="15.0" fill="rgb(251,63,7)" rx="2" ry="2" />
<text  x="47.58" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1145.8" y="581" width="0.2" height="15.0" fill="rgb(225,123,19)" rx="2" ry="2" />
<text  x="1148.80" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="937.4" y="453" width="0.2" height="15.0" fill="rgb(223,37,14)" rx="2" ry="2" />
<text  x="940.37" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (172 samples, 3.34%)</title><rect x="1040.0" y="453" width="39.4" height="15.0" fill="rgb(231,175,32)" rx="2" ry="2" />
<text  x="1042.98" y="463.5" >ser..</text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="883.5" y="469" width="0.3" height="15.0" fill="rgb(252,191,38)" rx="2" ry="2" />
<text  x="886.55" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="36.1" y="341" width="0.2" height="15.0" fill="rgb(247,108,4)" rx="2" ry="2" />
<text  x="39.11" y="351.5" ></text>
</g>
<g >
<title>sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="18.9" y="581" width="0.3" height="15.0" fill="rgb(217,126,25)" rx="2" ry="2" />
<text  x="21.93" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="47.6" y="261" width="0.2" height="15.0" fill="rgb(220,185,23)" rx="2" ry="2" />
<text  x="50.56" y="271.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="69.1" y="517" width="0.2" height="15.0" fill="rgb(237,166,45)" rx="2" ry="2" />
<text  x="72.09" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1137.6" y="453" width="0.2" height="15.0" fill="rgb(229,95,22)" rx="2" ry="2" />
<text  x="1140.55" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="599.5" y="373" width="0.3" height="15.0" fill="rgb(248,114,29)" rx="2" ry="2" />
<text  x="602.54" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="45.0" y="389" width="0.5" height="15.0" fill="rgb(231,128,51)" rx="2" ry="2" />
<text  x="48.04" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="1057.4" y="437" width="0.2" height="15.0" fill="rgb(207,96,41)" rx="2" ry="2" />
<text  x="1060.39" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (6 samples, 0.12%)</title><rect x="727.6" y="581" width="1.3" height="15.0" fill="rgb(216,143,43)" rx="2" ry="2" />
<text  x="730.57" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="804.1" y="405" width="0.2" height="15.0" fill="rgb(248,155,29)" rx="2" ry="2" />
<text  x="807.07" y="415.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%)</title><rect x="717.5" y="405" width="0.2" height="15.0" fill="rgb(243,33,13)" rx="2" ry="2" />
<text  x="720.50" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="493.0" y="373" width="0.3" height="15.0" fill="rgb(220,216,21)" rx="2" ry="2" />
<text  x="496.04" y="383.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (15 samples, 0.29%)</title><rect x="1018.9" y="293" width="3.4" height="15.0" fill="rgb(250,224,24)" rx="2" ry="2" />
<text  x="1021.91" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="74.4" y="405" width="0.2" height="15.0" fill="rgb(240,30,30)" rx="2" ry="2" />
<text  x="77.36" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;bool&gt; (1 samples, 0.02%)</title><rect x="82.8" y="293" width="0.3" height="15.0" fill="rgb(225,73,20)" rx="2" ry="2" />
<text  x="85.83" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="599.3" y="373" width="0.2" height="15.0" fill="rgb(209,51,44)" rx="2" ry="2" />
<text  x="602.31" y="383.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.4" y="613" width="0.2" height="15.0" fill="rgb(246,212,25)" rx="2" ry="2" />
<text  x="88.35" y="623.5" ></text>
</g>
<g >
<title>seastar::writeable_eventfd::signal (1 samples, 0.02%)</title><rect x="10.2" y="645" width="0.3" height="15.0" fill="rgb(216,72,18)" rx="2" ry="2" />
<text  x="13.23" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="40.9" y="373" width="0.7" height="15.0" fill="rgb(241,228,46)" rx="2" ry="2" />
<text  x="43.92" y="383.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="17.1" y="645" width="0.2" height="15.0" fill="rgb(235,62,37)" rx="2" ry="2" />
<text  x="20.10" y="655.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="155.0" y="533" width="1.1" height="15.0" fill="rgb(205,124,48)" rx="2" ry="2" />
<text  x="157.98" y="543.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1164.1" y="517" width="0.2" height="15.0" fill="rgb(248,93,21)" rx="2" ry="2" />
<text  x="1167.12" y="527.5" ></text>
</g>
<g >
<title>database::do_apply (35 samples, 0.68%)</title><rect x="1119.5" y="437" width="8.0" height="15.0" fill="rgb(251,63,13)" rx="2" ry="2" />
<text  x="1122.46" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (8 samples, 0.16%)</title><rect x="1076.2" y="405" width="1.8" height="15.0" fill="rgb(207,165,48)" rx="2" ry="2" />
<text  x="1079.17" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.12%)</title><rect x="316.9" y="373" width="1.4" height="15.0" fill="rgb(207,87,34)" rx="2" ry="2" />
<text  x="319.91" y="383.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%)</title><rect x="759.6" y="389" width="0.7" height="15.0" fill="rgb(216,36,25)" rx="2" ry="2" />
<text  x="762.64" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="459.6" y="341" width="0.2" height="15.0" fill="rgb(224,95,17)" rx="2" ry="2" />
<text  x="462.60" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (19 samples, 0.37%)</title><rect x="308.7" y="357" width="4.3" height="15.0" fill="rgb(209,139,47)" rx="2" ry="2" />
<text  x="311.66" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="849.4" y="501" width="0.5" height="15.0" fill="rgb(238,185,54)" rx="2" ry="2" />
<text  x="852.42" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="365.7" y="261" width="0.2" height="15.0" fill="rgb(224,20,34)" rx="2" ry="2" />
<text  x="368.69" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (5 samples, 0.10%)</title><rect x="277.7" y="229" width="1.2" height="15.0" fill="rgb(253,19,31)" rx="2" ry="2" />
<text  x="280.74" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%)</title><rect x="898.7" y="517" width="0.2" height="15.0" fill="rgb(214,121,45)" rx="2" ry="2" />
<text  x="901.66" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="108.9" y="421" width="0.3" height="15.0" fill="rgb(239,8,38)" rx="2" ry="2" />
<text  x="111.94" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="18.2" y="613" width="0.3" height="15.0" fill="rgb(215,133,27)" rx="2" ry="2" />
<text  x="21.25" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="1136.2" y="293" width="0.2" height="15.0" fill="rgb(215,85,48)" rx="2" ry="2" />
<text  x="1139.18" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="130.7" y="485" width="0.2" height="15.0" fill="rgb(252,74,14)" rx="2" ry="2" />
<text  x="133.70" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (9 samples, 0.17%)</title><rect x="1131.8" y="309" width="2.1" height="15.0" fill="rgb(221,52,10)" rx="2" ry="2" />
<text  x="1134.82" y="319.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, clustering_key_prefix&gt; (1 samples, 0.02%)</title><rect x="1132.7" y="197" width="0.3" height="15.0" fill="rgb(246,169,39)" rx="2" ry="2" />
<text  x="1135.74" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%)</title><rect x="76.0" y="517" width="0.2" height="15.0" fill="rgb(212,39,2)" rx="2" ry="2" />
<text  x="78.96" y="527.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (8 samples, 0.16%)</title><rect x="286.7" y="325" width="1.8" height="15.0" fill="rgb(232,184,17)" rx="2" ry="2" />
<text  x="289.68" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (6 samples, 0.12%)</title><rect x="791.9" y="485" width="1.4" height="15.0" fill="rgb(236,8,47)" rx="2" ry="2" />
<text  x="794.93" y="495.5" ></text>
</g>
<g >
<title>make_combined_reader (79 samples, 1.53%)</title><rect x="483.9" y="421" width="18.1" height="15.0" fill="rgb(233,190,21)" rx="2" ry="2" />
<text  x="486.88" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="373.3" y="245" width="0.4" height="15.0" fill="rgb(243,184,7)" rx="2" ry="2" />
<text  x="376.25" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%)</title><rect x="43.4" y="437" width="0.3" height="15.0" fill="rgb(223,209,41)" rx="2" ry="2" />
<text  x="46.44" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="85.4" y="661" width="0.4" height="15.0" fill="rgb(234,206,40)" rx="2" ry="2" />
<text  x="88.35" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="109.6" y="357" width="0.7" height="15.0" fill="rgb(208,124,53)" rx="2" ry="2" />
<text  x="112.63" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="55.3" y="213" width="0.3" height="15.0" fill="rgb(248,10,26)" rx="2" ry="2" />
<text  x="58.35" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="746.8" y="421" width="0.2" height="15.0" fill="rgb(246,160,11)" rx="2" ry="2" />
<text  x="749.81" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%)</title><rect x="1134.6" y="293" width="0.2" height="15.0" fill="rgb(234,113,28)" rx="2" ry="2" />
<text  x="1137.57" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.10%)</title><rect x="48.2" y="341" width="1.2" height="15.0" fill="rgb(251,144,42)" rx="2" ry="2" />
<text  x="51.25" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="780.0" y="501" width="0.3" height="15.0" fill="rgb(236,9,15)" rx="2" ry="2" />
<text  x="783.02" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="324.7" y="421" width="0.2" height="15.0" fill="rgb(226,8,15)" rx="2" ry="2" />
<text  x="327.70" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%)</title><rect x="1032.4" y="373" width="0.9" height="15.0" fill="rgb(215,73,42)" rx="2" ry="2" />
<text  x="1035.42" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (3 samples, 0.06%)</title><rect x="881.7" y="485" width="0.7" height="15.0" fill="rgb(227,219,35)" rx="2" ry="2" />
<text  x="884.72" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (28 samples, 0.54%)</title><rect x="881.3" y="533" width="6.4" height="15.0" fill="rgb(219,182,9)" rx="2" ry="2" />
<text  x="884.26" y="543.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (9 samples, 0.17%)</title><rect x="637.8" y="533" width="2.1" height="15.0" fill="rgb(230,37,32)" rx="2" ry="2" />
<text  x="640.79" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%)</title><rect x="819.6" y="261" width="3.3" height="15.0" fill="rgb(210,181,38)" rx="2" ry="2" />
<text  x="822.65" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="620.8" y="453" width="0.3" height="15.0" fill="rgb(208,212,4)" rx="2" ry="2" />
<text  x="623.84" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="109.9" y="245" width="0.4" height="15.0" fill="rgb(217,26,42)" rx="2" ry="2" />
<text  x="112.86" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="74.6" y="437" width="0.2" height="15.0" fill="rgb(253,87,14)" rx="2" ry="2" />
<text  x="77.59" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%)</title><rect x="84.4" y="437" width="0.7" height="15.0" fill="rgb(247,108,48)" rx="2" ry="2" />
<text  x="87.44" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="886.5" y="405" width="0.3" height="15.0" fill="rgb(227,131,12)" rx="2" ry="2" />
<text  x="889.53" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="583.5" y="437" width="0.2" height="15.0" fill="rgb(233,0,33)" rx="2" ry="2" />
<text  x="586.51" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="324.9" y="437" width="0.5" height="15.0" fill="rgb(219,140,21)" rx="2" ry="2" />
<text  x="327.93" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (2 samples, 0.04%)</title><rect x="360.9" y="309" width="0.4" height="15.0" fill="rgb(223,89,22)" rx="2" ry="2" />
<text  x="363.89" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1090.1" y="453" width="0.3" height="15.0" fill="rgb(248,2,16)" rx="2" ry="2" />
<text  x="1093.14" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (24 samples, 0.47%)</title><rect x="519.6" y="325" width="5.5" height="15.0" fill="rgb(240,118,7)" rx="2" ry="2" />
<text  x="522.61" y="335.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (105 samples, 2.04%)</title><rect x="807.0" y="373" width="24.1" height="15.0" fill="rgb(239,63,25)" rx="2" ry="2" />
<text  x="810.05" y="383.5" >a..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="785.5" y="405" width="0.7" height="15.0" fill="rgb(251,203,8)" rx="2" ry="2" />
<text  x="788.52" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (16 samples, 0.31%)</title><rect x="650.6" y="517" width="3.7" height="15.0" fill="rgb(251,8,51)" rx="2" ry="2" />
<text  x="653.62" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="58.6" y="325" width="0.2" height="15.0" fill="rgb(225,180,25)" rx="2" ry="2" />
<text  x="61.56" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (22 samples, 0.43%)</title><rect x="281.6" y="325" width="5.1" height="15.0" fill="rgb(226,191,43)" rx="2" ry="2" />
<text  x="284.64" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (10 samples, 0.19%)</title><rect x="83.1" y="597" width="2.3" height="15.0" fill="rgb(248,98,7)" rx="2" ry="2" />
<text  x="86.06" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="54.4" y="325" width="0.3" height="15.0" fill="rgb(243,97,33)" rx="2" ry="2" />
<text  x="57.43" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="81.9" y="565" width="0.2" height="15.0" fill="rgb(245,227,40)" rx="2" ry="2" />
<text  x="84.92" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="746.4" y="565" width="0.2" height="15.0" fill="rgb(218,5,26)" rx="2" ry="2" />
<text  x="749.35" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (146 samples, 2.83%)</title><rect x="589.5" y="501" width="33.4" height="15.0" fill="rgb(252,163,49)" rx="2" ry="2" />
<text  x="592.46" y="511.5" >fl..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="54.4" y="245" width="0.3" height="15.0" fill="rgb(240,168,17)" rx="2" ry="2" />
<text  x="57.43" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="569.8" y="437" width="0.4" height="15.0" fill="rgb(233,72,31)" rx="2" ry="2" />
<text  x="572.77" y="447.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="369.8" y="261" width="0.5" height="15.0" fill="rgb(218,99,22)" rx="2" ry="2" />
<text  x="372.82" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="622.4" y="485" width="0.3" height="15.0" fill="rgb(233,23,31)" rx="2" ry="2" />
<text  x="625.45" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1038.6" y="373" width="0.2" height="15.0" fill="rgb(210,100,25)" rx="2" ry="2" />
<text  x="1041.61" y="383.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (5 samples, 0.10%)</title><rect x="267.0" y="213" width="1.1" height="15.0" fill="rgb(205,163,48)" rx="2" ry="2" />
<text  x="269.98" y="223.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="109.6" y="469" width="0.7" height="15.0" fill="rgb(214,29,53)" rx="2" ry="2" />
<text  x="112.63" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="564.0" y="389" width="0.5" height="15.0" fill="rgb(239,45,19)" rx="2" ry="2" />
<text  x="567.04" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="187.3" y="389" width="0.2" height="15.0" fill="rgb(228,60,54)" rx="2" ry="2" />
<text  x="190.27" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (201 samples, 3.90%)</title><rect x="993.9" y="437" width="46.1" height="15.0" fill="rgb(235,98,46)" rx="2" ry="2" />
<text  x="996.94" y="447.5" >serv..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="737.4" y="517" width="0.3" height="15.0" fill="rgb(247,36,4)" rx="2" ry="2" />
<text  x="740.42" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="330.2" y="453" width="0.5" height="15.0" fill="rgb(247,52,43)" rx="2" ry="2" />
<text  x="333.19" y="463.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%)</title><rect x="84.2" y="549" width="0.9" height="15.0" fill="rgb(244,227,21)" rx="2" ry="2" />
<text  x="87.21" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="62.4" y="469" width="0.3" height="15.0" fill="rgb(227,202,54)" rx="2" ry="2" />
<text  x="65.45" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="879.0" y="581" width="0.2" height="15.0" fill="rgb(235,192,19)" rx="2" ry="2" />
<text  x="881.97" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1129.5" y="229" width="0.3" height="15.0" fill="rgb(251,120,48)" rx="2" ry="2" />
<text  x="1132.53" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (10 samples, 0.19%)</title><rect x="83.1" y="661" width="2.3" height="15.0" fill="rgb(241,189,51)" rx="2" ry="2" />
<text  x="86.06" y="671.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="779.3" y="501" width="0.7" height="15.0" fill="rgb(220,34,2)" rx="2" ry="2" />
<text  x="782.34" y="511.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%)</title><rect x="29.0" y="357" width="0.7" height="15.0" fill="rgb(241,212,12)" rx="2" ry="2" />
<text  x="32.01" y="367.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="288.5" y="325" width="0.5" height="15.0" fill="rgb(248,42,5)" rx="2" ry="2" />
<text  x="291.51" y="335.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%)</title><rect x="72.1" y="389" width="0.2" height="15.0" fill="rgb(225,68,40)" rx="2" ry="2" />
<text  x="75.07" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="84.4" y="485" width="0.7" height="15.0" fill="rgb(232,34,11)" rx="2" ry="2" />
<text  x="87.44" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="517" width="8.0" height="15.0" fill="rgb(237,42,16)" rx="2" ry="2" />
<text  x="1122.46" y="527.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="957.5" y="501" width="2.8" height="15.0" fill="rgb(227,116,33)" rx="2" ry="2" />
<text  x="960.53" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.23%)</title><rect x="812.5" y="309" width="2.8" height="15.0" fill="rgb(212,115,7)" rx="2" ry="2" />
<text  x="815.55" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="881.0" y="565" width="0.3" height="15.0" fill="rgb(250,229,24)" rx="2" ry="2" />
<text  x="884.03" y="575.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="534.7" y="341" width="0.3" height="15.0" fill="rgb(236,199,29)" rx="2" ry="2" />
<text  x="537.72" y="351.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.06%)</title><rect x="1168.2" y="725" width="0.7" height="15.0" fill="rgb(232,28,49)" rx="2" ry="2" />
<text  x="1171.24" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;reconcilable_result&gt;::clear (1 samples, 0.02%)</title><rect x="135.7" y="549" width="0.3" height="15.0" fill="rgb(219,92,11)" rx="2" ry="2" />
<text  x="138.74" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.2" y="581" width="0.3" height="15.0" fill="rgb(239,184,52)" rx="2" ry="2" />
<text  x="13.23" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="507.0" y="405" width="0.2" height="15.0" fill="rgb(216,78,32)" rx="2" ry="2" />
<text  x="510.01" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="737.4" y="501" width="0.3" height="15.0" fill="rgb(232,89,13)" rx="2" ry="2" />
<text  x="740.42" y="511.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="537.5" y="293" width="1.3" height="15.0" fill="rgb(250,166,11)" rx="2" ry="2" />
<text  x="540.47" y="303.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="707.2" y="581" width="0.4" height="15.0" fill="rgb(236,186,11)" rx="2" ry="2" />
<text  x="710.19" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1051.0" y="405" width="0.9" height="15.0" fill="rgb(244,138,6)" rx="2" ry="2" />
<text  x="1053.97" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (7 samples, 0.14%)</title><rect x="674.7" y="581" width="1.6" height="15.0" fill="rgb(219,68,32)" rx="2" ry="2" />
<text  x="677.67" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.23%)</title><rect x="852.4" y="501" width="2.7" height="15.0" fill="rgb(225,49,50)" rx="2" ry="2" />
<text  x="855.40" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="45.7" y="277" width="0.5" height="15.0" fill="rgb(241,129,17)" rx="2" ry="2" />
<text  x="48.73" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1160.5" y="565" width="0.4" height="15.0" fill="rgb(227,85,52)" rx="2" ry="2" />
<text  x="1163.45" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="737.9" y="517" width="0.2" height="15.0" fill="rgb(251,173,3)" rx="2" ry="2" />
<text  x="740.88" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.5" y="661" width="0.2" height="15.0" fill="rgb(210,211,11)" rx="2" ry="2" />
<text  x="13.46" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="746.1" y="565" width="0.3" height="15.0" fill="rgb(229,122,33)" rx="2" ry="2" />
<text  x="749.13" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%)</title><rect x="114.9" y="565" width="0.5" height="15.0" fill="rgb(223,199,17)" rx="2" ry="2" />
<text  x="117.90" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="730.8" y="565" width="0.2" height="15.0" fill="rgb(240,47,44)" rx="2" ry="2" />
<text  x="733.78" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="471.5" y="501" width="0.5" height="15.0" fill="rgb(206,110,49)" rx="2" ry="2" />
<text  x="474.51" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="40.9" y="357" width="0.7" height="15.0" fill="rgb(229,30,28)" rx="2" ry="2" />
<text  x="43.92" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (375 samples, 7.28%)</title><rect x="207.7" y="357" width="85.8" height="15.0" fill="rgb(216,103,10)" rx="2" ry="2" />
<text  x="210.66" y="367.5" >partition_..</text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="968.8" y="469" width="0.2" height="15.0" fill="rgb(242,104,23)" rx="2" ry="2" />
<text  x="971.75" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_max_size (1 samples, 0.02%)</title><rect x="50.8" y="341" width="0.2" height="15.0" fill="rgb(206,145,12)" rx="2" ry="2" />
<text  x="53.77" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%)</title><rect x="746.8" y="133" width="0.2" height="15.0" fill="rgb(254,226,31)" rx="2" ry="2" />
<text  x="749.81" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="461.4" y="373" width="0.3" height="15.0" fill="rgb(220,216,35)" rx="2" ry="2" />
<text  x="464.43" y="383.5" ></text>
</g>
<g >
<title>row::row (157 samples, 3.05%)</title><rect x="228.0" y="245" width="36.0" height="15.0" fill="rgb(220,95,51)" rx="2" ry="2" />
<text  x="231.04" y="255.5" >row..</text>
</g>
<g >
<title>mutation_partition::apply_weak (3 samples, 0.06%)</title><rect x="110.8" y="421" width="0.7" height="15.0" fill="rgb(249,106,6)" rx="2" ry="2" />
<text  x="113.78" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="121.3" y="549" width="0.2" height="15.0" fill="rgb(243,62,5)" rx="2" ry="2" />
<text  x="124.31" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="204.7" y="373" width="0.2" height="15.0" fill="rgb(231,78,23)" rx="2" ry="2" />
<text  x="207.68" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1133.4" y="197" width="0.3" height="15.0" fill="rgb(222,93,25)" rx="2" ry="2" />
<text  x="1136.43" y="207.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%)</title><rect x="832.2" y="389" width="0.3" height="15.0" fill="rgb(236,222,15)" rx="2" ry="2" />
<text  x="835.24" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="886.8" y="437" width="0.2" height="15.0" fill="rgb(239,11,32)" rx="2" ry="2" />
<text  x="889.75" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="991.0" y="421" width="0.2" height="15.0" fill="rgb(228,167,15)" rx="2" ry="2" />
<text  x="993.97" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="665.7" y="581" width="0.5" height="15.0" fill="rgb(210,226,51)" rx="2" ry="2" />
<text  x="668.73" y="591.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::init_from_unsigned_long (1 samples, 0.02%)</title><rect x="75.7" y="437" width="0.3" height="15.0" fill="rgb(249,208,43)" rx="2" ry="2" />
<text  x="78.73" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="548.9" y="389" width="0.5" height="15.0" fill="rgb(244,227,20)" rx="2" ry="2" />
<text  x="551.92" y="399.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%)</title><rect x="1131.8" y="261" width="1.2" height="15.0" fill="rgb(225,95,7)" rx="2" ry="2" />
<text  x="1134.82" y="271.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.12%)</title><rect x="1119.9" y="325" width="1.4" height="15.0" fill="rgb(226,61,46)" rx="2" ry="2" />
<text  x="1122.91" y="335.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="1128.8" y="245" width="0.5" height="15.0" fill="rgb(230,102,22)" rx="2" ry="2" />
<text  x="1131.85" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="1037.2" y="325" width="1.4" height="15.0" fill="rgb(210,219,19)" rx="2" ry="2" />
<text  x="1040.23" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (8 samples, 0.16%)</title><rect x="992.1" y="389" width="1.8" height="15.0" fill="rgb(214,17,51)" rx="2" ry="2" />
<text  x="995.11" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_function_statement*, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="65.7" y="405" width="0.2" height="15.0" fill="rgb(212,174,44)" rx="2" ry="2" />
<text  x="68.66" y="415.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="725.7" y="533" width="0.3" height="15.0" fill="rgb(221,18,2)" rx="2" ry="2" />
<text  x="728.74" y="543.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="938.5" y="485" width="0.2" height="15.0" fill="rgb(243,229,17)" rx="2" ry="2" />
<text  x="941.52" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.0" y="725" width="0.2" height="15.0" fill="rgb(238,140,20)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>free (11 samples, 0.21%)</title><rect x="452.3" y="277" width="2.5" height="15.0" fill="rgb(207,3,47)" rx="2" ry="2" />
<text  x="455.27" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="537.5" y="277" width="1.3" height="15.0" fill="rgb(235,10,42)" rx="2" ry="2" />
<text  x="540.47" y="287.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1122.0" y="277" width="0.2" height="15.0" fill="rgb(213,86,26)" rx="2" ry="2" />
<text  x="1124.98" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="587.4" y="517" width="0.2" height="15.0" fill="rgb(224,172,13)" rx="2" ry="2" />
<text  x="590.40" y="527.5" ></text>
</g>
<g >
<title>tracing::add_table_name (1 samples, 0.02%)</title><rect x="1116.9" y="517" width="0.3" height="15.0" fill="rgb(250,220,6)" rx="2" ry="2" />
<text  x="1119.94" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="30.6" y="341" width="0.5" height="15.0" fill="rgb(229,114,15)" rx="2" ry="2" />
<text  x="33.61" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="990.3" y="405" width="0.7" height="15.0" fill="rgb(213,211,0)" rx="2" ry="2" />
<text  x="993.28" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="997.6" y="341" width="0.2" height="15.0" fill="rgb(239,134,19)" rx="2" ry="2" />
<text  x="1000.61" y="351.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (9 samples, 0.17%)</title><rect x="1131.8" y="277" width="2.1" height="15.0" fill="rgb(240,204,3)" rx="2" ry="2" />
<text  x="1134.82" y="287.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="37.7" y="325" width="0.2" height="15.0" fill="rgb(253,16,31)" rx="2" ry="2" />
<text  x="40.71" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="44.4" y="405" width="0.2" height="15.0" fill="rgb(234,34,39)" rx="2" ry="2" />
<text  x="47.36" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (20 samples, 0.39%)</title><rect x="868.0" y="533" width="4.6" height="15.0" fill="rgb(227,147,12)" rx="2" ry="2" />
<text  x="870.97" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.6" y="309" width="0.3" height="15.0" fill="rgb(212,51,34)" rx="2" ry="2" />
<text  x="112.63" y="319.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="304.1" y="261" width="0.2" height="15.0" fill="rgb(230,3,36)" rx="2" ry="2" />
<text  x="307.08" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (7 samples, 0.14%)</title><rect x="865.7" y="437" width="1.6" height="15.0" fill="rgb(223,222,41)" rx="2" ry="2" />
<text  x="868.68" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="533" width="8.0" height="15.0" fill="rgb(211,2,2)" rx="2" ry="2" />
<text  x="1122.46" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="51.9" y="277" width="0.2" height="15.0" fill="rgb(212,76,3)" rx="2" ry="2" />
<text  x="54.91" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="276.8" y="197" width="0.3" height="15.0" fill="rgb(217,78,28)" rx="2" ry="2" />
<text  x="279.83" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (2 samples, 0.04%)</title><rect x="1135.7" y="277" width="0.5" height="15.0" fill="rgb(242,3,13)" rx="2" ry="2" />
<text  x="1138.72" y="287.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (6 samples, 0.12%)</title><rect x="906.5" y="405" width="1.3" height="15.0" fill="rgb(243,18,49)" rx="2" ry="2" />
<text  x="909.45" y="415.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (5 samples, 0.10%)</title><rect x="663.7" y="581" width="1.1" height="15.0" fill="rgb(227,86,27)" rx="2" ry="2" />
<text  x="666.67" y="591.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%)</title><rect x="68.9" y="517" width="0.2" height="15.0" fill="rgb(254,183,0)" rx="2" ry="2" />
<text  x="71.86" y="527.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="885.2" y="389" width="0.4" height="15.0" fill="rgb(206,221,34)" rx="2" ry="2" />
<text  x="888.15" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="991.9" y="389" width="0.2" height="15.0" fill="rgb(236,40,48)" rx="2" ry="2" />
<text  x="994.88" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="673.5" y="581" width="0.5" height="15.0" fill="rgb(249,48,11)" rx="2" ry="2" />
<text  x="676.52" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1137.8" y="597" width="0.2" height="15.0" fill="rgb(245,216,32)" rx="2" ry="2" />
<text  x="1140.78" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.0" y="389" width="0.2" height="15.0" fill="rgb(217,125,11)" rx="2" ry="2" />
<text  x="45.98" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1160.0" y="565" width="0.5" height="15.0" fill="rgb(215,170,7)" rx="2" ry="2" />
<text  x="1163.00" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="185.4" y="389" width="0.3" height="15.0" fill="rgb(206,58,33)" rx="2" ry="2" />
<text  x="188.44" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="137.1" y="549" width="0.2" height="15.0" fill="rgb(248,155,17)" rx="2" ry="2" />
<text  x="140.12" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_base::shared_ptr_count_base (1 samples, 0.02%)</title><rect x="46.4" y="389" width="0.2" height="15.0" fill="rgb(225,99,44)" rx="2" ry="2" />
<text  x="49.42" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::functions (1 samples, 0.02%)</title><rect x="18.2" y="357" width="0.3" height="15.0" fill="rgb(213,32,18)" rx="2" ry="2" />
<text  x="21.25" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (9 samples, 0.17%)</title><rect x="607.1" y="373" width="2.1" height="15.0" fill="rgb(245,207,3)" rx="2" ry="2" />
<text  x="610.10" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="606.0" y="373" width="0.2" height="15.0" fill="rgb(220,128,16)" rx="2" ry="2" />
<text  x="608.95" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.12%)</title><rect x="133.9" y="501" width="1.4" height="15.0" fill="rgb(205,188,15)" rx="2" ry="2" />
<text  x="136.91" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%)</title><rect x="96.6" y="581" width="0.2" height="15.0" fill="rgb(215,71,42)" rx="2" ry="2" />
<text  x="99.58" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1166.6" y="389" width="0.3" height="15.0" fill="rgb(234,61,30)" rx="2" ry="2" />
<text  x="1169.64" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="42.3" y="325" width="0.2" height="15.0" fill="rgb(226,13,18)" rx="2" ry="2" />
<text  x="45.29" y="335.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="820.6" y="213" width="0.2" height="15.0" fill="rgb(253,60,12)" rx="2" ry="2" />
<text  x="823.56" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="716.1" y="581" width="0.7" height="15.0" fill="rgb(220,102,8)" rx="2" ry="2" />
<text  x="719.12" y="591.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.08%)</title><rect x="1011.1" y="341" width="0.9" height="15.0" fill="rgb(251,162,1)" rx="2" ry="2" />
<text  x="1014.12" y="351.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="760.3" y="389" width="0.5" height="15.0" fill="rgb(222,11,12)" rx="2" ry="2" />
<text  x="763.33" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1082.1" y="453" width="0.3" height="15.0" fill="rgb(208,179,44)" rx="2" ry="2" />
<text  x="1085.12" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (4 samples, 0.08%)</title><rect x="421.8" y="293" width="0.9" height="15.0" fill="rgb(234,37,50)" rx="2" ry="2" />
<text  x="424.81" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="450.7" y="341" width="0.2" height="15.0" fill="rgb(221,92,7)" rx="2" ry="2" />
<text  x="453.67" y="351.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="78.0" y="533" width="0.3" height="15.0" fill="rgb(241,155,36)" rx="2" ry="2" />
<text  x="81.02" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar15futurize_invokeIRPFNS_6futureIvEERKSt13unordered_mapINS_13basic_sstringIcjLj15ELb1EEENS_13lw_shared_ptrIK6schemaEESt4hashIS5_ESt8equal_toIS5_ESaISt4pairIKS5_S9_EEEOZZN19single_node_cql_env7do_withESt8functionIFS2_R12cql_test_envEE15cql_test_configENKUlvE_clEvEUlRT_E0_EJSK_SV_EEEDaOST_DpOT0_ (1 samples, 0.02%)</title><rect x="82.6" y="581" width="0.2" height="15.0" fill="rgb(222,14,12)" rx="2" ry="2" />
<text  x="85.60" y="591.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="82.1" y="709" width="0.3" height="15.0" fill="rgb(249,197,45)" rx="2" ry="2" />
<text  x="85.15" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="846.7" y="421" width="1.6" height="15.0" fill="rgb(247,128,53)" rx="2" ry="2" />
<text  x="849.67" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (11 samples, 0.21%)</title><rect x="565.0" y="373" width="2.5" height="15.0" fill="rgb(253,160,10)" rx="2" ry="2" />
<text  x="567.96" y="383.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="882.2" y="469" width="0.2" height="15.0" fill="rgb(240,71,49)" rx="2" ry="2" />
<text  x="885.17" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="796.3" y="453" width="0.2" height="15.0" fill="rgb(220,100,52)" rx="2" ry="2" />
<text  x="799.28" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%)</title><rect x="18.5" y="565" width="0.4" height="15.0" fill="rgb(245,36,52)" rx="2" ry="2" />
<text  x="21.47" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (3 samples, 0.06%)</title><rect x="285.8" y="293" width="0.6" height="15.0" fill="rgb(233,215,20)" rx="2" ry="2" />
<text  x="288.76" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="82.8" y="341" width="0.3" height="15.0" fill="rgb(243,190,53)" rx="2" ry="2" />
<text  x="85.83" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="54.4" y="293" width="0.3" height="15.0" fill="rgb(221,184,24)" rx="2" ry="2" />
<text  x="57.43" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%)</title><rect x="275.0" y="261" width="0.5" height="15.0" fill="rgb(219,4,44)" rx="2" ry="2" />
<text  x="278.00" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (5 samples, 0.10%)</title><rect x="759.6" y="405" width="1.2" height="15.0" fill="rgb(254,44,30)" rx="2" ry="2" />
<text  x="762.64" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="54.9" y="165" width="0.2" height="15.0" fill="rgb(220,14,52)" rx="2" ry="2" />
<text  x="57.89" y="175.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="74.4" y="421" width="0.2" height="15.0" fill="rgb(214,77,35)" rx="2" ry="2" />
<text  x="77.36" y="431.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="942.0" y="501" width="0.2" height="15.0" fill="rgb(227,7,51)" rx="2" ry="2" />
<text  x="944.95" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="745.0" y="565" width="0.2" height="15.0" fill="rgb(229,151,17)" rx="2" ry="2" />
<text  x="747.98" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (15 samples, 0.29%)</title><rect x="52.4" y="389" width="3.4" height="15.0" fill="rgb(247,172,47)" rx="2" ry="2" />
<text  x="55.37" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="674.7" y="501" width="0.2" height="15.0" fill="rgb(218,7,0)" rx="2" ry="2" />
<text  x="677.67" y="511.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="652.2" y="485" width="0.5" height="15.0" fill="rgb(244,64,52)" rx="2" ry="2" />
<text  x="655.22" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (35 samples, 0.68%)</title><rect x="1119.5" y="581" width="8.0" height="15.0" fill="rgb(217,226,31)" rx="2" ry="2" />
<text  x="1122.46" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (4 samples, 0.08%)</title><rect x="1135.5" y="325" width="0.9" height="15.0" fill="rgb(231,228,16)" rx="2" ry="2" />
<text  x="1138.49" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%)</title><rect x="779.1" y="501" width="0.2" height="15.0" fill="rgb(216,48,17)" rx="2" ry="2" />
<text  x="782.11" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (32 samples, 0.62%)</title><rect x="904.2" y="421" width="7.3" height="15.0" fill="rgb(248,229,19)" rx="2" ry="2" />
<text  x="907.16" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="854.7" y="469" width="0.2" height="15.0" fill="rgb(246,123,39)" rx="2" ry="2" />
<text  x="857.69" y="479.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="465.6" y="469" width="2.2" height="15.0" fill="rgb(211,42,43)" rx="2" ry="2" />
<text  x="468.56" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (2 samples, 0.04%)</title><rect x="728.3" y="565" width="0.4" height="15.0" fill="rgb(254,187,10)" rx="2" ry="2" />
<text  x="731.26" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="163.9" y="517" width="0.2" height="15.0" fill="rgb(210,11,28)" rx="2" ry="2" />
<text  x="166.91" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1051.7" y="389" width="0.2" height="15.0" fill="rgb(242,71,1)" rx="2" ry="2" />
<text  x="1054.66" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::maybe_reclaim (1 samples, 0.02%)</title><rect x="968.3" y="389" width="0.2" height="15.0" fill="rgb(215,38,28)" rx="2" ry="2" />
<text  x="971.29" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="1166.2" y="597" width="0.4" height="15.0" fill="rgb(254,154,12)" rx="2" ry="2" />
<text  x="1169.18" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1117.6" y="533" width="0.3" height="15.0" fill="rgb(252,225,22)" rx="2" ry="2" />
<text  x="1120.62" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="674.9" y="517" width="0.2" height="15.0" fill="rgb(239,112,41)" rx="2" ry="2" />
<text  x="677.90" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::compact_for_compaction (1 samples, 0.02%)</title><rect x="109.2" y="485" width="0.2" height="15.0" fill="rgb(220,188,24)" rx="2" ry="2" />
<text  x="112.17" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="887.0" y="485" width="0.2" height="15.0" fill="rgb(231,15,22)" rx="2" ry="2" />
<text  x="889.98" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="882.2" y="453" width="0.2" height="15.0" fill="rgb(229,53,15)" rx="2" ry="2" />
<text  x="885.17" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="110.3" y="325" width="0.2" height="15.0" fill="rgb(232,151,22)" rx="2" ry="2" />
<text  x="113.32" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="83.8" y="405" width="0.2" height="15.0" fill="rgb(243,218,13)" rx="2" ry="2" />
<text  x="86.75" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%)</title><rect x="625.7" y="501" width="0.4" height="15.0" fill="rgb(223,53,30)" rx="2" ry="2" />
<text  x="628.65" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%)</title><rect x="718.9" y="565" width="0.2" height="15.0" fill="rgb(232,46,8)" rx="2" ry="2" />
<text  x="721.87" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="554.0" y="421" width="0.4" height="15.0" fill="rgb(241,141,24)" rx="2" ry="2" />
<text  x="556.96" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="306.6" y="261" width="0.9" height="15.0" fill="rgb(230,195,9)" rx="2" ry="2" />
<text  x="309.60" y="271.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="20.5" y="565" width="0.3" height="15.0" fill="rgb(232,44,31)" rx="2" ry="2" />
<text  x="23.54" y="575.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (1 samples, 0.02%)</title><rect x="1133.2" y="181" width="0.2" height="15.0" fill="rgb(227,108,42)" rx="2" ry="2" />
<text  x="1136.20" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,719 samples, 91.60%)</title><rect x="87.2" y="645" width="1080.8" height="15.0" fill="rgb(248,23,4)" rx="2" ry="2" />
<text  x="90.19" y="655.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%)</title><rect x="874.6" y="565" width="0.2" height="15.0" fill="rgb(251,27,53)" rx="2" ry="2" />
<text  x="877.62" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="521.0" y="277" width="0.2" height="15.0" fill="rgb(231,53,38)" rx="2" ry="2" />
<text  x="523.98" y="287.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (14 samples, 0.27%)</title><rect x="13.7" y="677" width="3.2" height="15.0" fill="rgb(212,3,18)" rx="2" ry="2" />
<text  x="16.66" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="754.6" y="533" width="0.2" height="15.0" fill="rgb(229,56,10)" rx="2" ry="2" />
<text  x="757.60" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="717.5" y="293" width="0.2" height="15.0" fill="rgb(251,150,8)" rx="2" ry="2" />
<text  x="720.50" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="682.0" y="501" width="0.2" height="15.0" fill="rgb(212,211,5)" rx="2" ry="2" />
<text  x="685.00" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (6 samples, 0.12%)</title><rect x="279.3" y="277" width="1.4" height="15.0" fill="rgb(248,9,35)" rx="2" ry="2" />
<text  x="282.35" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (7 samples, 0.14%)</title><rect x="674.7" y="565" width="1.6" height="15.0" fill="rgb(243,60,42)" rx="2" ry="2" />
<text  x="677.67" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (4 samples, 0.08%)</title><rect x="51.5" y="389" width="0.9" height="15.0" fill="rgb(244,126,26)" rx="2" ry="2" />
<text  x="54.46" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1034.5" y="373" width="0.4" height="15.0" fill="rgb(230,55,18)" rx="2" ry="2" />
<text  x="1037.48" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="718.4" y="341" width="0.2" height="15.0" fill="rgb(243,211,54)" rx="2" ry="2" />
<text  x="721.41" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="675.1" y="485" width="0.3" height="15.0" fill="rgb(216,5,7)" rx="2" ry="2" />
<text  x="678.12" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (8 samples, 0.16%)</title><rect x="78.5" y="469" width="1.8" height="15.0" fill="rgb(213,5,15)" rx="2" ry="2" />
<text  x="81.48" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (92 samples, 1.79%)</title><rect x="422.7" y="293" width="21.1" height="15.0" fill="rgb(238,24,33)" rx="2" ry="2" />
<text  x="425.73" y="303.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="18.7" y="485" width="0.2" height="15.0" fill="rgb(246,187,2)" rx="2" ry="2" />
<text  x="21.70" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="725.7" y="549" width="0.3" height="15.0" fill="rgb(206,64,42)" rx="2" ry="2" />
<text  x="728.74" y="559.5" ></text>
</g>
<g >
<title>service::migration_manager::announce_new_column_family (1 samples, 0.02%)</title><rect x="718.6" y="453" width="0.3" height="15.0" fill="rgb(210,85,32)" rx="2" ry="2" />
<text  x="721.64" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="64.3" y="437" width="0.4" height="15.0" fill="rgb(245,218,49)" rx="2" ry="2" />
<text  x="67.28" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="587.6" y="517" width="0.7" height="15.0" fill="rgb(208,106,39)" rx="2" ry="2" />
<text  x="590.63" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (470 samples, 9.12%)</title><rect x="205.4" y="373" width="107.6" height="15.0" fill="rgb(239,164,2)" rx="2" ry="2" />
<text  x="208.37" y="383.5" >logalloc::all..</text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="736.0" y="533" width="0.3" height="15.0" fill="rgb(236,62,5)" rx="2" ry="2" />
<text  x="739.05" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="82.8" y="517" width="0.3" height="15.0" fill="rgb(207,147,11)" rx="2" ry="2" />
<text  x="85.83" y="527.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="228.5" y="229" width="0.2" height="15.0" fill="rgb(236,133,53)" rx="2" ry="2" />
<text  x="231.50" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="855.1" y="517" width="0.3" height="15.0" fill="rgb(254,119,10)" rx="2" ry="2" />
<text  x="858.15" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="718.9" y="549" width="0.2" height="15.0" fill="rgb(241,30,18)" rx="2" ry="2" />
<text  x="721.87" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="856.5" y="517" width="0.3" height="15.0" fill="rgb(230,129,4)" rx="2" ry="2" />
<text  x="859.52" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (43 samples, 0.83%)</title><rect x="678.6" y="581" width="9.8" height="15.0" fill="rgb(225,196,23)" rx="2" ry="2" />
<text  x="681.56" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (4 samples, 0.08%)</title><rect x="792.4" y="469" width="0.9" height="15.0" fill="rgb(232,174,7)" rx="2" ry="2" />
<text  x="795.39" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (189 samples, 3.67%)</title><rect x="796.5" y="485" width="43.3" height="15.0" fill="rgb(237,207,27)" rx="2" ry="2" />
<text  x="799.51" y="495.5" >std:..</text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%)</title><rect x="594.0" y="405" width="1.0" height="15.0" fill="rgb(252,113,44)" rx="2" ry="2" />
<text  x="597.05" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (4 samples, 0.08%)</title><rect x="691.4" y="581" width="0.9" height="15.0" fill="rgb(217,136,44)" rx="2" ry="2" />
<text  x="694.39" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="85" width="0.3" height="15.0" fill="rgb(214,32,4)" rx="2" ry="2" />
<text  x="56.75" y="95.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (3 samples, 0.06%)</title><rect x="609.2" y="389" width="0.6" height="15.0" fill="rgb(253,132,2)" rx="2" ry="2" />
<text  x="612.16" y="399.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (21 samples, 0.41%)</title><rect x="1051.9" y="421" width="4.8" height="15.0" fill="rgb(223,169,47)" rx="2" ry="2" />
<text  x="1054.89" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (5 samples, 0.10%)</title><rect x="73.9" y="485" width="1.1" height="15.0" fill="rgb(224,93,22)" rx="2" ry="2" />
<text  x="76.90" y="495.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (1 samples, 0.02%)</title><rect x="75.7" y="453" width="0.3" height="15.0" fill="rgb(239,86,36)" rx="2" ry="2" />
<text  x="78.73" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="469.9" y="517" width="0.2" height="15.0" fill="rgb(214,79,11)" rx="2" ry="2" />
<text  x="472.91" y="527.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (1 samples, 0.02%)</title><rect x="27.9" y="357" width="0.2" height="15.0" fill="rgb(251,153,10)" rx="2" ry="2" />
<text  x="30.86" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%)</title><rect x="925.7" y="453" width="0.7" height="15.0" fill="rgb(247,184,41)" rx="2" ry="2" />
<text  x="928.69" y="463.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="734.2" y="533" width="0.2" height="15.0" fill="rgb(243,20,16)" rx="2" ry="2" />
<text  x="737.22" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="1135.3" y="373" width="1.1" height="15.0" fill="rgb(221,211,23)" rx="2" ry="2" />
<text  x="1138.26" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="79.2" y="389" width="0.7" height="15.0" fill="rgb(240,148,34)" rx="2" ry="2" />
<text  x="82.17" y="399.5" ></text>
</g>
<g >
<title>posix_memalign (27 samples, 0.52%)</title><rect x="250.0" y="149" width="6.2" height="15.0" fill="rgb(213,59,2)" rx="2" ry="2" />
<text  x="253.03" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="830.6" y="309" width="0.3" height="15.0" fill="rgb(232,41,6)" rx="2" ry="2" />
<text  x="833.64" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="47.3" y="277" width="0.3" height="15.0" fill="rgb(218,95,0)" rx="2" ry="2" />
<text  x="50.33" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="20.5" y="581" width="0.3" height="15.0" fill="rgb(212,46,40)" rx="2" ry="2" />
<text  x="23.54" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="269.7" y="197" width="0.3" height="15.0" fill="rgb(241,15,18)" rx="2" ry="2" />
<text  x="272.73" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="287.1" y="309" width="0.7" height="15.0" fill="rgb(227,80,28)" rx="2" ry="2" />
<text  x="290.14" y="319.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="613.7" y="437" width="1.0" height="15.0" fill="rgb(240,54,19)" rx="2" ry="2" />
<text  x="616.74" y="447.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1126.6" y="341" width="0.4" height="15.0" fill="rgb(219,65,22)" rx="2" ry="2" />
<text  x="1129.56" y="351.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%)</title><rect x="474.7" y="453" width="0.2" height="15.0" fill="rgb(250,42,2)" rx="2" ry="2" />
<text  x="477.72" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (1 samples, 0.02%)</title><rect x="61.8" y="453" width="0.2" height="15.0" fill="rgb(240,19,13)" rx="2" ry="2" />
<text  x="64.76" y="463.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="999.0" y="389" width="0.2" height="15.0" fill="rgb(251,149,9)" rx="2" ry="2" />
<text  x="1001.98" y="399.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="867.7" y="549" width="0.3" height="15.0" fill="rgb(241,82,44)" rx="2" ry="2" />
<text  x="870.74" y="559.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%)</title><rect x="745.9" y="565" width="0.2" height="15.0" fill="rgb(243,101,31)" rx="2" ry="2" />
<text  x="748.90" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="106.4" y="517" width="0.3" height="15.0" fill="rgb(224,152,15)" rx="2" ry="2" />
<text  x="109.42" y="527.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%)</title><rect x="43.2" y="421" width="0.2" height="15.0" fill="rgb(219,131,10)" rx="2" ry="2" />
<text  x="46.21" y="431.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%)</title><rect x="18.2" y="341" width="0.3" height="15.0" fill="rgb(219,5,17)" rx="2" ry="2" />
<text  x="21.25" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (71 samples, 1.38%)</title><rect x="532.4" y="389" width="16.3" height="15.0" fill="rgb(240,221,12)" rx="2" ry="2" />
<text  x="535.43" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="997.4" y="293" width="0.2" height="15.0" fill="rgb(241,63,33)" rx="2" ry="2" />
<text  x="1000.38" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1143.5" y="565" width="0.2" height="15.0" fill="rgb(253,95,15)" rx="2" ry="2" />
<text  x="1146.51" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (14 samples, 0.27%)</title><rect x="1131.6" y="325" width="3.2" height="15.0" fill="rgb(253,27,22)" rx="2" ry="2" />
<text  x="1134.60" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="885.8" y="357" width="0.7" height="15.0" fill="rgb(238,142,6)" rx="2" ry="2" />
<text  x="888.84" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="769.7" y="469" width="0.2" height="15.0" fill="rgb(215,22,27)" rx="2" ry="2" />
<text  x="772.72" y="479.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="674.7" y="533" width="0.2" height="15.0" fill="rgb(209,192,1)" rx="2" ry="2" />
<text  x="677.67" y="543.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (737 samples, 14.31%)</title><rect x="175.4" y="469" width="168.8" height="15.0" fill="rgb(214,86,32)" rx="2" ry="2" />
<text  x="178.36" y="479.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="109.4" y="549" width="0.2" height="15.0" fill="rgb(234,48,2)" rx="2" ry="2" />
<text  x="112.40" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="493.3" y="357" width="0.2" height="15.0" fill="rgb(231,209,47)" rx="2" ry="2" />
<text  x="496.27" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="278.9" y="245" width="0.2" height="15.0" fill="rgb(214,10,9)" rx="2" ry="2" />
<text  x="281.89" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1126.6" y="325" width="0.2" height="15.0" fill="rgb(229,118,30)" rx="2" ry="2" />
<text  x="1129.56" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="45.7" y="261" width="0.5" height="15.0" fill="rgb(218,140,7)" rx="2" ry="2" />
<text  x="48.73" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="826.3" y="309" width="0.2" height="15.0" fill="rgb(249,61,36)" rx="2" ry="2" />
<text  x="829.29" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.0" y="373" width="0.2" height="15.0" fill="rgb(220,25,35)" rx="2" ry="2" />
<text  x="62.01" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1152.2" y="533" width="0.5" height="15.0" fill="rgb(231,77,35)" rx="2" ry="2" />
<text  x="1155.21" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (3 samples, 0.06%)</title><rect x="109.6" y="501" width="0.7" height="15.0" fill="rgb(232,120,42)" rx="2" ry="2" />
<text  x="112.63" y="511.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="110.3" y="373" width="0.2" height="15.0" fill="rgb(223,2,17)" rx="2" ry="2" />
<text  x="113.32" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="805.7" y="373" width="1.1" height="15.0" fill="rgb(211,121,10)" rx="2" ry="2" />
<text  x="808.68" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="58.6" y="357" width="0.2" height="15.0" fill="rgb(213,138,20)" rx="2" ry="2" />
<text  x="61.56" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="555.8" y="421" width="0.2" height="15.0" fill="rgb(250,206,24)" rx="2" ry="2" />
<text  x="558.80" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (3 samples, 0.06%)</title><rect x="757.1" y="517" width="0.7" height="15.0" fill="rgb(232,2,23)" rx="2" ry="2" />
<text  x="760.12" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="566.1" y="341" width="0.2" height="15.0" fill="rgb(248,67,18)" rx="2" ry="2" />
<text  x="569.10" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (16 samples, 0.31%)</title><rect x="71.4" y="501" width="3.6" height="15.0" fill="rgb(229,3,8)" rx="2" ry="2" />
<text  x="74.38" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="35.4" y="341" width="0.3" height="15.0" fill="rgb(218,70,2)" rx="2" ry="2" />
<text  x="38.42" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="863.4" y="469" width="0.2" height="15.0" fill="rgb(214,200,32)" rx="2" ry="2" />
<text  x="866.39" y="479.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1136.2" y="277" width="0.2" height="15.0" fill="rgb(222,85,42)" rx="2" ry="2" />
<text  x="1139.18" y="287.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%)</title><rect x="386.5" y="277" width="0.3" height="15.0" fill="rgb(231,212,25)" rx="2" ry="2" />
<text  x="389.54" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="949.7" y="485" width="0.3" height="15.0" fill="rgb(244,130,4)" rx="2" ry="2" />
<text  x="952.74" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (1 samples, 0.02%)</title><rect x="1134.8" y="325" width="0.2" height="15.0" fill="rgb(226,166,36)" rx="2" ry="2" />
<text  x="1137.80" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="772.7" y="389" width="0.7" height="15.0" fill="rgb(232,32,37)" rx="2" ry="2" />
<text  x="775.69" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="588.3" y="517" width="0.2" height="15.0" fill="rgb(227,26,16)" rx="2" ry="2" />
<text  x="591.32" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="554.2" y="405" width="0.2" height="15.0" fill="rgb(246,200,29)" rx="2" ry="2" />
<text  x="557.19" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.4" y="245" width="0.2" height="15.0" fill="rgb(225,35,11)" rx="2" ry="2" />
<text  x="63.39" y="255.5" ></text>
</g>
<g >
<title>query::result::result (3 samples, 0.06%)</title><rect x="631.1" y="517" width="0.7" height="15.0" fill="rgb(205,59,25)" rx="2" ry="2" />
<text  x="634.15" y="527.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (38 samples, 0.74%)</title><rect x="1127.7" y="501" width="8.7" height="15.0" fill="rgb(212,207,31)" rx="2" ry="2" />
<text  x="1130.70" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (2 samples, 0.04%)</title><rect x="552.4" y="405" width="0.4" height="15.0" fill="rgb(205,27,23)" rx="2" ry="2" />
<text  x="555.36" y="415.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1028.3" y="357" width="0.2" height="15.0" fill="rgb(245,116,26)" rx="2" ry="2" />
<text  x="1031.30" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="81.9" y="421" width="0.2" height="15.0" fill="rgb(245,174,20)" rx="2" ry="2" />
<text  x="84.92" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="49.6" y="309" width="0.3" height="15.0" fill="rgb(229,151,9)" rx="2" ry="2" />
<text  x="52.62" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="110.1" y="229" width="0.2" height="15.0" fill="rgb(240,14,47)" rx="2" ry="2" />
<text  x="113.09" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.08%)</title><rect x="623.6" y="517" width="0.9" height="15.0" fill="rgb(230,107,34)" rx="2" ry="2" />
<text  x="626.59" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (15 samples, 0.29%)</title><rect x="539.3" y="309" width="3.4" height="15.0" fill="rgb(207,203,16)" rx="2" ry="2" />
<text  x="542.31" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.9" y="389" width="0.2" height="15.0" fill="rgb(222,23,45)" rx="2" ry="2" />
<text  x="46.90" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="800.4" y="405" width="0.5" height="15.0" fill="rgb(238,57,30)" rx="2" ry="2" />
<text  x="803.41" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="335.2" y="389" width="0.5" height="15.0" fill="rgb(222,135,6)" rx="2" ry="2" />
<text  x="338.23" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="812.8" y="293" width="0.2" height="15.0" fill="rgb(231,129,40)" rx="2" ry="2" />
<text  x="815.78" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::file&gt;, seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="665.0" y="597" width="0.3" height="15.0" fill="rgb(226,104,18)" rx="2" ry="2" />
<text  x="668.05" y="607.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="520.1" y="309" width="1.3" height="15.0" fill="rgb(240,13,47)" rx="2" ry="2" />
<text  x="523.07" y="319.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (3 samples, 0.06%)</title><rect x="110.8" y="405" width="0.7" height="15.0" fill="rgb(212,28,32)" rx="2" ry="2" />
<text  x="113.78" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1073.9" y="389" width="0.2" height="15.0" fill="rgb(233,1,35)" rx="2" ry="2" />
<text  x="1076.88" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="586.0" y="485" width="0.7" height="15.0" fill="rgb(248,87,30)" rx="2" ry="2" />
<text  x="589.03" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="1011.1" y="325" width="0.9" height="15.0" fill="rgb(221,53,26)" rx="2" ry="2" />
<text  x="1014.12" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="542.1" y="261" width="0.4" height="15.0" fill="rgb(229,99,34)" rx="2" ry="2" />
<text  x="545.05" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="69.1" y="501" width="0.2" height="15.0" fill="rgb(230,28,41)" rx="2" ry="2" />
<text  x="72.09" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.6" y="341" width="0.2" height="15.0" fill="rgb(252,88,23)" rx="2" ry="2" />
<text  x="61.56" y="351.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.16%)</title><rect x="603.2" y="389" width="1.8" height="15.0" fill="rgb(220,211,50)" rx="2" ry="2" />
<text  x="606.21" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="772.7" y="405" width="0.7" height="15.0" fill="rgb(241,72,2)" rx="2" ry="2" />
<text  x="775.69" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="357.7" y="357" width="0.2" height="15.0" fill="rgb(254,40,15)" rx="2" ry="2" />
<text  x="360.68" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (972 samples, 18.87%)</title><rect x="895.0" y="533" width="222.6" height="15.0" fill="rgb(234,182,17)" rx="2" ry="2" />
<text  x="898.00" y="543.5" >cql3::statements::select_stat..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (37 samples, 0.72%)</title><rect x="431.7" y="261" width="8.4" height="15.0" fill="rgb(223,65,5)" rx="2" ry="2" />
<text  x="434.66" y="271.5" ></text>
</g>
<g >
<title>main (4,719 samples, 91.60%)</title><rect x="87.2" y="709" width="1080.8" height="15.0" fill="rgb(219,15,31)" rx="2" ry="2" />
<text  x="90.19" y="719.5" >main</text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (6 samples, 0.12%)</title><rect x="490.7" y="357" width="1.4" height="15.0" fill="rgb(234,63,42)" rx="2" ry="2" />
<text  x="493.75" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1049.6" y="421" width="0.5" height="15.0" fill="rgb(248,195,36)" rx="2" ry="2" />
<text  x="1052.60" y="431.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.02%)</title><rect x="10.9" y="693" width="0.2" height="15.0" fill="rgb(243,214,52)" rx="2" ry="2" />
<text  x="13.92" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5 samples, 0.10%)</title><rect x="323.1" y="421" width="1.1" height="15.0" fill="rgb(241,170,54)" rx="2" ry="2" />
<text  x="326.09" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="648.3" y="533" width="0.3" height="15.0" fill="rgb(223,26,30)" rx="2" ry="2" />
<text  x="651.33" y="543.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="110.3" y="469" width="0.2" height="15.0" fill="rgb(219,165,45)" rx="2" ry="2" />
<text  x="113.32" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (250 samples, 4.85%)</title><rect x="20.8" y="581" width="57.2" height="15.0" fill="rgb(243,193,13)" rx="2" ry="2" />
<text  x="23.76" y="591.5" >cql3::..</text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="626.3" y="501" width="1.0" height="15.0" fill="rgb(254,49,13)" rx="2" ry="2" />
<text  x="629.34" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="518.9" y="341" width="0.2" height="15.0" fill="rgb(209,181,12)" rx="2" ry="2" />
<text  x="521.92" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="55.3" y="229" width="0.3" height="15.0" fill="rgb(222,190,14)" rx="2" ry="2" />
<text  x="58.35" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1152.2" y="517" width="0.5" height="15.0" fill="rgb(251,227,33)" rx="2" ry="2" />
<text  x="1155.21" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="979.7" y="405" width="1.2" height="15.0" fill="rgb(205,63,45)" rx="2" ry="2" />
<text  x="982.74" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%)</title><rect x="768.6" y="405" width="1.1" height="15.0" fill="rgb(215,142,54)" rx="2" ry="2" />
<text  x="771.57" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="858.6" y="437" width="0.7" height="15.0" fill="rgb(228,218,8)" rx="2" ry="2" />
<text  x="861.58" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1125.6" y="341" width="0.3" height="15.0" fill="rgb(240,141,24)" rx="2" ry="2" />
<text  x="1128.64" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.12%)</title><rect x="226.7" y="245" width="1.3" height="15.0" fill="rgb(243,166,17)" rx="2" ry="2" />
<text  x="229.67" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="133.5" y="501" width="0.2" height="15.0" fill="rgb(219,114,41)" rx="2" ry="2" />
<text  x="136.45" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (26 samples, 0.50%)</title><rect x="1148.8" y="565" width="5.9" height="15.0" fill="rgb(243,181,13)" rx="2" ry="2" />
<text  x="1151.77" y="575.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%)</title><rect x="923.6" y="469" width="0.5" height="15.0" fill="rgb(222,205,52)" rx="2" ry="2" />
<text  x="926.63" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="885.2" y="357" width="0.2" height="15.0" fill="rgb(206,213,13)" rx="2" ry="2" />
<text  x="888.15" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="591.3" y="453" width="0.2" height="15.0" fill="rgb(232,30,4)" rx="2" ry="2" />
<text  x="594.30" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="881.7" y="405" width="0.2" height="15.0" fill="rgb(240,96,49)" rx="2" ry="2" />
<text  x="884.72" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="602.3" y="389" width="0.7" height="15.0" fill="rgb(226,14,16)" rx="2" ry="2" />
<text  x="605.29" y="399.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1 samples, 0.02%)</title><rect x="664.8" y="597" width="0.2" height="15.0" fill="rgb(219,201,27)" rx="2" ry="2" />
<text  x="667.82" y="607.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="17.1" y="613" width="0.2" height="15.0" fill="rgb(224,129,2)" rx="2" ry="2" />
<text  x="20.10" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="18.0" y="629" width="0.2" height="15.0" fill="rgb(252,21,51)" rx="2" ry="2" />
<text  x="21.02" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="88.3" y="613" width="0.3" height="15.0" fill="rgb(227,186,4)" rx="2" ry="2" />
<text  x="91.33" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%)</title><rect x="259.9" y="165" width="0.9" height="15.0" fill="rgb(211,192,53)" rx="2" ry="2" />
<text  x="262.88" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (6 samples, 0.12%)</title><rect x="78.7" y="453" width="1.4" height="15.0" fill="rgb(213,190,2)" rx="2" ry="2" />
<text  x="81.71" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (2 samples, 0.04%)</title><rect x="22.6" y="517" width="0.5" height="15.0" fill="rgb(254,37,45)" rx="2" ry="2" />
<text  x="25.60" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="497.4" y="357" width="0.2" height="15.0" fill="rgb(220,218,9)" rx="2" ry="2" />
<text  x="500.39" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="647.6" y="517" width="0.5" height="15.0" fill="rgb(223,222,12)" rx="2" ry="2" />
<text  x="650.64" y="527.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1021.9" y="261" width="0.2" height="15.0" fill="rgb(223,161,4)" rx="2" ry="2" />
<text  x="1024.89" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="646.5" y="533" width="0.5" height="15.0" fill="rgb(253,201,38)" rx="2" ry="2" />
<text  x="649.49" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="457.3" y="309" width="0.7" height="15.0" fill="rgb(251,5,14)" rx="2" ry="2" />
<text  x="460.31" y="319.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1127.2" y="405" width="0.3" height="15.0" fill="rgb(235,171,14)" rx="2" ry="2" />
<text  x="1130.24" y="415.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="18.7" y="533" width="0.2" height="15.0" fill="rgb(252,191,45)" rx="2" ry="2" />
<text  x="21.70" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1140.1" y="597" width="0.2" height="15.0" fill="rgb(205,55,50)" rx="2" ry="2" />
<text  x="1143.07" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="1103.9" y="469" width="1.1" height="15.0" fill="rgb(228,168,4)" rx="2" ry="2" />
<text  x="1106.88" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%)</title><rect x="1131.6" y="341" width="3.4" height="15.0" fill="rgb(245,131,13)" rx="2" ry="2" />
<text  x="1134.60" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="743.4" y="549" width="0.2" height="15.0" fill="rgb(231,158,23)" rx="2" ry="2" />
<text  x="746.38" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="75.7" y="517" width="0.3" height="15.0" fill="rgb(217,27,41)" rx="2" ry="2" />
<text  x="78.73" y="527.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="886.8" y="421" width="0.2" height="15.0" fill="rgb(210,124,38)" rx="2" ry="2" />
<text  x="889.75" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.4" y="469" width="0.3" height="15.0" fill="rgb(223,155,0)" rx="2" ry="2" />
<text  x="68.43" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="197" width="0.5" height="15.0" fill="rgb(233,160,38)" rx="2" ry="2" />
<text  x="56.52" y="207.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (11 samples, 0.21%)</title><rect x="197.4" y="341" width="2.5" height="15.0" fill="rgb(209,195,8)" rx="2" ry="2" />
<text  x="200.35" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="45.5" y="373" width="0.7" height="15.0" fill="rgb(249,147,27)" rx="2" ry="2" />
<text  x="48.50" y="383.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.6" y="261" width="0.2" height="15.0" fill="rgb(230,145,37)" rx="2" ry="2" />
<text  x="1126.58" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (15 samples, 0.29%)</title><rect x="282.3" y="293" width="3.5" height="15.0" fill="rgb(221,80,36)" rx="2" ry="2" />
<text  x="285.33" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="158.4" y="469" width="1.6" height="15.0" fill="rgb(220,130,3)" rx="2" ry="2" />
<text  x="161.42" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="374.6" y="309" width="0.3" height="15.0" fill="rgb(236,67,7)" rx="2" ry="2" />
<text  x="377.63" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="343.7" y="453" width="0.2" height="15.0" fill="rgb(230,70,17)" rx="2" ry="2" />
<text  x="346.71" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1130.9" y="389" width="0.2" height="15.0" fill="rgb(212,170,50)" rx="2" ry="2" />
<text  x="1133.91" y="399.5" ></text>
</g>
<g >
<title>seastar::do_recursive_touch_directory (1 samples, 0.02%)</title><rect x="82.6" y="469" width="0.2" height="15.0" fill="rgb(222,109,21)" rx="2" ry="2" />
<text  x="85.60" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.1" y="309" width="0.5" height="15.0" fill="rgb(240,146,2)" rx="2" ry="2" />
<text  x="50.10" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="647.4" y="533" width="0.7" height="15.0" fill="rgb(236,130,6)" rx="2" ry="2" />
<text  x="650.41" y="543.5" ></text>
</g>
<g >
<title>sstring_hash::operator (7 samples, 0.14%)</title><rect x="865.7" y="453" width="1.6" height="15.0" fill="rgb(245,88,7)" rx="2" ry="2" />
<text  x="868.68" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="838.9" y="373" width="0.4" height="15.0" fill="rgb(242,24,20)" rx="2" ry="2" />
<text  x="841.89" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="84.4" y="469" width="0.7" height="15.0" fill="rgb(244,73,34)" rx="2" ry="2" />
<text  x="87.44" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.8" y="373" width="0.2" height="15.0" fill="rgb(221,149,9)" rx="2" ry="2" />
<text  x="53.77" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="131.8" y="485" width="0.3" height="15.0" fill="rgb(251,213,19)" rx="2" ry="2" />
<text  x="134.85" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%)</title><rect x="38.6" y="373" width="0.3" height="15.0" fill="rgb(234,146,42)" rx="2" ry="2" />
<text  x="41.63" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1152.2" y="549" width="0.5" height="15.0" fill="rgb(252,169,25)" rx="2" ry="2" />
<text  x="1155.21" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="515.7" y="373" width="0.5" height="15.0" fill="rgb(214,29,7)" rx="2" ry="2" />
<text  x="518.71" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1130.0" y="341" width="0.2" height="15.0" fill="rgb(243,206,45)" rx="2" ry="2" />
<text  x="1132.99" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="82.8" y="533" width="0.3" height="15.0" fill="rgb(208,183,50)" rx="2" ry="2" />
<text  x="85.83" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (2 samples, 0.04%)</title><rect x="108.9" y="501" width="0.5" height="15.0" fill="rgb(252,128,52)" rx="2" ry="2" />
<text  x="111.94" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="56.5" y="389" width="0.2" height="15.0" fill="rgb(222,102,43)" rx="2" ry="2" />
<text  x="59.49" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="114.7" y="565" width="0.2" height="15.0" fill="rgb(246,52,46)" rx="2" ry="2" />
<text  x="117.67" y="575.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%)</title><rect x="571.1" y="469" width="0.3" height="15.0" fill="rgb(206,34,43)" rx="2" ry="2" />
<text  x="574.14" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1139.8" y="597" width="0.3" height="15.0" fill="rgb(215,152,50)" rx="2" ry="2" />
<text  x="1142.84" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="526.0" y="421" width="0.2" height="15.0" fill="rgb(240,182,8)" rx="2" ry="2" />
<text  x="529.02" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (18 samples, 0.35%)</title><rect x="626.1" y="517" width="4.1" height="15.0" fill="rgb(213,108,54)" rx="2" ry="2" />
<text  x="629.11" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="487.8" y="357" width="0.2" height="15.0" fill="rgb(238,229,15)" rx="2" ry="2" />
<text  x="490.77" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="783.2" y="421" width="0.5" height="15.0" fill="rgb(232,177,38)" rx="2" ry="2" />
<text  x="786.23" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="657.0" y="469" width="0.3" height="15.0" fill="rgb(232,151,3)" rx="2" ry="2" />
<text  x="660.03" y="479.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="43.9" y="421" width="0.2" height="15.0" fill="rgb(237,45,7)" rx="2" ry="2" />
<text  x="46.90" y="431.5" ></text>
</g>
<g >
<title>table::as_mutation_source (6 samples, 0.12%)</title><rect x="658.2" y="533" width="1.3" height="15.0" fill="rgb(223,161,20)" rx="2" ry="2" />
<text  x="661.18" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="563.1" y="405" width="0.3" height="15.0" fill="rgb(212,68,23)" rx="2" ry="2" />
<text  x="566.12" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="658.2" y="485" width="0.2" height="15.0" fill="rgb(218,1,48)" rx="2" ry="2" />
<text  x="661.18" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="741.3" y="549" width="0.2" height="15.0" fill="rgb(238,162,45)" rx="2" ry="2" />
<text  x="744.32" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (3 samples, 0.06%)</title><rect x="110.8" y="485" width="0.7" height="15.0" fill="rgb(220,25,18)" rx="2" ry="2" />
<text  x="113.78" y="495.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (10 samples, 0.19%)</title><rect x="78.3" y="501" width="2.2" height="15.0" fill="rgb(233,140,17)" rx="2" ry="2" />
<text  x="81.25" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="754.8" y="549" width="0.3" height="15.0" fill="rgb(243,51,53)" rx="2" ry="2" />
<text  x="757.83" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1131.6" y="389" width="3.7" height="15.0" fill="rgb(243,74,23)" rx="2" ry="2" />
<text  x="1134.60" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="745.9" y="485" width="0.2" height="15.0" fill="rgb(222,118,47)" rx="2" ry="2" />
<text  x="748.90" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="850.6" y="517" width="0.9" height="15.0" fill="rgb(230,18,29)" rx="2" ry="2" />
<text  x="853.57" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1023.3" y="293" width="0.2" height="15.0" fill="rgb(228,94,1)" rx="2" ry="2" />
<text  x="1026.26" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (36 samples, 0.70%)</title><rect x="507.9" y="405" width="8.3" height="15.0" fill="rgb(205,194,1)" rx="2" ry="2" />
<text  x="510.93" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (4 samples, 0.08%)</title><rect x="381.7" y="277" width="0.9" height="15.0" fill="rgb(225,42,14)" rx="2" ry="2" />
<text  x="384.73" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;sstables::file_writer&gt;, sstables::sstable::make_component_file_writer (1 samples, 0.02%)</title><rect x="717.5" y="597" width="0.2" height="15.0" fill="rgb(231,197,27)" rx="2" ry="2" />
<text  x="720.50" y="607.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="718.9" y="517" width="0.2" height="15.0" fill="rgb(238,28,31)" rx="2" ry="2" />
<text  x="721.87" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.2" y="389" width="0.3" height="15.0" fill="rgb(221,72,44)" rx="2" ry="2" />
<text  x="43.23" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="460.1" y="341" width="0.2" height="15.0" fill="rgb(221,21,20)" rx="2" ry="2" />
<text  x="463.06" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.10%)</title><rect x="48.2" y="405" width="1.2" height="15.0" fill="rgb(223,50,28)" rx="2" ry="2" />
<text  x="51.25" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="77.1" y="533" width="0.2" height="15.0" fill="rgb(220,209,8)" rx="2" ry="2" />
<text  x="80.11" y="543.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="1164.8" y="581" width="0.2" height="15.0" fill="rgb(243,205,52)" rx="2" ry="2" />
<text  x="1167.81" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="691.8" y="565" width="0.5" height="15.0" fill="rgb(208,9,13)" rx="2" ry="2" />
<text  x="694.84" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="108.9" y="341" width="0.3" height="15.0" fill="rgb(250,116,10)" rx="2" ry="2" />
<text  x="111.94" y="351.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="966.2" y="469" width="2.3" height="15.0" fill="rgb(224,135,51)" rx="2" ry="2" />
<text  x="969.23" y="479.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.16%)</title><rect x="741.5" y="549" width="1.9" height="15.0" fill="rgb(223,206,4)" rx="2" ry="2" />
<text  x="744.55" y="559.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%)</title><rect x="364.8" y="293" width="0.2" height="15.0" fill="rgb(251,112,53)" rx="2" ry="2" />
<text  x="367.78" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%)</title><rect x="75.7" y="485" width="0.3" height="15.0" fill="rgb(219,74,35)" rx="2" ry="2" />
<text  x="78.73" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="335.0" y="405" width="0.7" height="15.0" fill="rgb(222,221,49)" rx="2" ry="2" />
<text  x="338.00" y="415.5" ></text>
</g>
<g >
<title>antlr3::RuleReturnValue&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::RuleReturnValue (1 samples, 0.02%)</title><rect x="42.8" y="453" width="0.2" height="15.0" fill="rgb(242,225,28)" rx="2" ry="2" />
<text  x="45.75" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="989.8" y="437" width="0.3" height="15.0" fill="rgb(247,196,3)" rx="2" ry="2" />
<text  x="992.82" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.17%)</title><rect x="441.0" y="261" width="2.1" height="15.0" fill="rgb(230,146,0)" rx="2" ry="2" />
<text  x="444.05" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="304.3" y="293" width="0.5" height="15.0" fill="rgb(250,229,18)" rx="2" ry="2" />
<text  x="307.31" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="318.5" y="373" width="0.7" height="15.0" fill="rgb(224,16,24)" rx="2" ry="2" />
<text  x="321.51" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.6" y="389" width="0.5" height="15.0" fill="rgb(211,55,32)" rx="2" ry="2" />
<text  x="44.61" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (3 samples, 0.06%)</title><rect x="108.9" y="597" width="0.7" height="15.0" fill="rgb(208,35,28)" rx="2" ry="2" />
<text  x="111.94" y="607.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(252,48,45)" rx="2" ry="2" />
<text  x="13.69" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;sstables::sstable::update_info_for_opened_data (1 samples, 0.02%)</title><rect x="746.6" y="565" width="0.2" height="15.0" fill="rgb(220,61,28)" rx="2" ry="2" />
<text  x="749.58" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1133.9" y="261" width="0.2" height="15.0" fill="rgb(236,195,46)" rx="2" ry="2" />
<text  x="1136.89" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="753.2" y="517" width="1.2" height="15.0" fill="rgb(227,198,35)" rx="2" ry="2" />
<text  x="756.23" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="205.8" y="357" width="0.3" height="15.0" fill="rgb(243,186,48)" rx="2" ry="2" />
<text  x="208.83" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="453" width="0.2" height="15.0" fill="rgb(227,197,43)" rx="2" ry="2" />
<text  x="83.09" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="291.3" y="325" width="0.2" height="15.0" fill="rgb(242,200,45)" rx="2" ry="2" />
<text  x="294.26" y="335.5" ></text>
</g>
<g >
<title>all (5,152 samples, 100%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(245,223,30)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="839.3" y="373" width="0.5" height="15.0" fill="rgb(253,30,7)" rx="2" ry="2" />
<text  x="842.34" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (11 samples, 0.21%)</title><rect x="767.2" y="453" width="2.5" height="15.0" fill="rgb(237,151,53)" rx="2" ry="2" />
<text  x="770.20" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.19%)</title><rect x="415.6" y="261" width="2.3" height="15.0" fill="rgb(230,154,1)" rx="2" ry="2" />
<text  x="418.62" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.1" y="485" width="0.2" height="15.0" fill="rgb(208,123,36)" rx="2" ry="2" />
<text  x="80.11" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="81.9" y="469" width="0.2" height="15.0" fill="rgb(253,128,4)" rx="2" ry="2" />
<text  x="84.92" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="18.2" y="245" width="0.3" height="15.0" fill="rgb(247,131,13)" rx="2" ry="2" />
<text  x="21.25" y="255.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1119.7" y="341" width="0.2" height="15.0" fill="rgb(227,41,15)" rx="2" ry="2" />
<text  x="1122.69" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.10%)</title><rect x="188.4" y="373" width="1.2" height="15.0" fill="rgb(245,66,24)" rx="2" ry="2" />
<text  x="191.42" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (209 samples, 4.06%)</title><rect x="21.0" y="565" width="47.9" height="15.0" fill="rgb(217,200,50)" rx="2" ry="2" />
<text  x="23.99" y="575.5" >cql3..</text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1082.6" y="469" width="0.2" height="15.0" fill="rgb(253,184,47)" rx="2" ry="2" />
<text  x="1085.58" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (6 samples, 0.12%)</title><rect x="882.4" y="485" width="1.4" height="15.0" fill="rgb(206,206,44)" rx="2" ry="2" />
<text  x="885.40" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="58.6" y="373" width="0.2" height="15.0" fill="rgb(226,214,38)" rx="2" ry="2" />
<text  x="61.56" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%)</title><rect x="370.3" y="261" width="0.9" height="15.0" fill="rgb(247,118,26)" rx="2" ry="2" />
<text  x="373.28" y="271.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (2 samples, 0.04%)</title><rect x="109.9" y="293" width="0.4" height="15.0" fill="rgb(249,105,2)" rx="2" ry="2" />
<text  x="112.86" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="808.9" y="341" width="0.2" height="15.0" fill="rgb(237,117,10)" rx="2" ry="2" />
<text  x="811.88" y="351.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="616.0" y="453" width="1.4" height="15.0" fill="rgb(222,193,44)" rx="2" ry="2" />
<text  x="619.03" y="463.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (3 samples, 0.06%)</title><rect x="21.5" y="437" width="0.6" height="15.0" fill="rgb(243,32,39)" rx="2" ry="2" />
<text  x="24.45" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="556.9" y="437" width="0.3" height="15.0" fill="rgb(240,142,2)" rx="2" ry="2" />
<text  x="559.94" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="801.8" y="389" width="0.2" height="15.0" fill="rgb(229,169,13)" rx="2" ry="2" />
<text  x="804.78" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="121.8" y="549" width="0.2" height="15.0" fill="rgb(208,59,20)" rx="2" ry="2" />
<text  x="124.77" y="559.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="651.5" y="501" width="0.3" height="15.0" fill="rgb(231,107,32)" rx="2" ry="2" />
<text  x="654.53" y="511.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1018.5" y="277" width="0.2" height="15.0" fill="rgb(240,65,45)" rx="2" ry="2" />
<text  x="1021.45" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (3 samples, 0.06%)</title><rect x="353.3" y="389" width="0.7" height="15.0" fill="rgb(229,49,34)" rx="2" ry="2" />
<text  x="356.33" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="792.8" y="437" width="0.5" height="15.0" fill="rgb(245,5,24)" rx="2" ry="2" />
<text  x="795.85" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (5 samples, 0.10%)</title><rect x="1135.3" y="421" width="1.1" height="15.0" fill="rgb(239,62,0)" rx="2" ry="2" />
<text  x="1138.26" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (16 samples, 0.31%)</title><rect x="672.6" y="597" width="3.7" height="15.0" fill="rgb(253,87,39)" rx="2" ry="2" />
<text  x="675.60" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="1114.0" y="517" width="2.5" height="15.0" fill="rgb(241,48,48)" rx="2" ry="2" />
<text  x="1116.96" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="44.4" y="389" width="0.2" height="15.0" fill="rgb(252,131,37)" rx="2" ry="2" />
<text  x="47.36" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.2" y="677" width="0.3" height="15.0" fill="rgb(210,91,45)" rx="2" ry="2" />
<text  x="13.23" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (7 samples, 0.14%)</title><rect x="103.4" y="565" width="1.7" height="15.0" fill="rgb(218,205,5)" rx="2" ry="2" />
<text  x="106.45" y="575.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.10%)</title><rect x="1128.8" y="341" width="1.2" height="15.0" fill="rgb(224,163,54)" rx="2" ry="2" />
<text  x="1131.85" y="351.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="886.8" y="405" width="0.2" height="15.0" fill="rgb(217,78,52)" rx="2" ry="2" />
<text  x="889.75" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="870.3" y="469" width="0.2" height="15.0" fill="rgb(237,66,2)" rx="2" ry="2" />
<text  x="873.26" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="84.4" y="453" width="0.7" height="15.0" fill="rgb(238,200,47)" rx="2" ry="2" />
<text  x="87.44" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="651.1" y="501" width="0.2" height="15.0" fill="rgb(230,0,15)" rx="2" ry="2" />
<text  x="654.08" y="511.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;clustering_key_prefix&gt; (1 samples, 0.02%)</title><rect x="1132.7" y="181" width="0.3" height="15.0" fill="rgb(250,97,47)" rx="2" ry="2" />
<text  x="1135.74" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="279.1" y="245" width="0.2" height="15.0" fill="rgb(210,168,7)" rx="2" ry="2" />
<text  x="282.12" y="255.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1038.8" y="373" width="0.3" height="15.0" fill="rgb(239,29,40)" rx="2" ry="2" />
<text  x="1041.84" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_service&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;database&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::gossiper&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, service::storage_service_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_manager&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;cdc::generation_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;repair_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::raft_group_registry&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;service::endpoint_lifecycle_notifier&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="389" width="0.2" height="15.0" fill="rgb(211,7,25)" rx="2" ry="2" />
<text  x="749.81" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="45.7" y="293" width="0.5" height="15.0" fill="rgb(245,203,9)" rx="2" ry="2" />
<text  x="48.73" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (1 samples, 0.02%)</title><rect x="766.3" y="485" width="0.2" height="15.0" fill="rgb(229,16,11)" rx="2" ry="2" />
<text  x="769.28" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.1" y="389" width="0.5" height="15.0" fill="rgb(209,159,6)" rx="2" ry="2" />
<text  x="50.10" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="20.3" y="581" width="0.2" height="15.0" fill="rgb(213,24,19)" rx="2" ry="2" />
<text  x="23.31" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (8 samples, 0.16%)</title><rect x="1146.3" y="549" width="1.8" height="15.0" fill="rgb(212,115,51)" rx="2" ry="2" />
<text  x="1149.25" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.10%)</title><rect x="1153.6" y="549" width="1.1" height="15.0" fill="rgb(219,227,24)" rx="2" ry="2" />
<text  x="1156.58" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="998.1" y="405" width="0.2" height="15.0" fill="rgb(226,182,25)" rx="2" ry="2" />
<text  x="1001.07" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (12 samples, 0.23%)</title><rect x="713.4" y="581" width="2.7" height="15.0" fill="rgb(220,137,14)" rx="2" ry="2" />
<text  x="716.37" y="591.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.10%)</title><rect x="1074.3" y="405" width="1.2" height="15.0" fill="rgb(240,125,12)" rx="2" ry="2" />
<text  x="1077.34" y="415.5" ></text>
</g>
<g >
<title>seastar::async&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="746.8" y="485" width="0.2" height="15.0" fill="rgb(205,43,14)" rx="2" ry="2" />
<text  x="749.81" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="132.1" y="485" width="0.7" height="15.0" fill="rgb(228,177,54)" rx="2" ry="2" />
<text  x="135.08" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.12%)</title><rect x="133.9" y="485" width="1.4" height="15.0" fill="rgb(234,126,41)" rx="2" ry="2" />
<text  x="136.91" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="670.3" y="581" width="0.9" height="15.0" fill="rgb(239,125,38)" rx="2" ry="2" />
<text  x="673.31" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (2 samples, 0.04%)</title><rect x="22.6" y="501" width="0.5" height="15.0" fill="rgb(245,147,31)" rx="2" ry="2" />
<text  x="25.60" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="846.7" y="437" width="1.6" height="15.0" fill="rgb(244,59,49)" rx="2" ry="2" />
<text  x="849.67" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="25.8" y="293" width="0.2" height="15.0" fill="rgb(229,115,50)" rx="2" ry="2" />
<text  x="28.80" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (10 samples, 0.19%)</title><rect x="83.1" y="645" width="2.3" height="15.0" fill="rgb(247,34,35)" rx="2" ry="2" />
<text  x="86.06" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="469.4" y="501" width="0.5" height="15.0" fill="rgb(235,81,13)" rx="2" ry="2" />
<text  x="472.45" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (17 samples, 0.33%)</title><rect x="309.1" y="341" width="3.9" height="15.0" fill="rgb(241,134,41)" rx="2" ry="2" />
<text  x="312.12" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (406 samples, 7.88%)</title><rect x="357.9" y="357" width="93.0" height="15.0" fill="rgb(230,192,20)" rx="2" ry="2" />
<text  x="360.91" y="367.5" >mutation_fr..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.2" y="549" width="0.2" height="15.0" fill="rgb(228,82,37)" rx="2" ry="2" />
<text  x="142.18" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="986.4" y="373" width="1.1" height="15.0" fill="rgb(232,1,6)" rx="2" ry="2" />
<text  x="989.39" y="383.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (49 samples, 0.95%)</title><rect x="764.2" y="501" width="11.2" height="15.0" fill="rgb(248,69,30)" rx="2" ry="2" />
<text  x="767.22" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="573.2" y="501" width="0.2" height="15.0" fill="rgb(214,56,11)" rx="2" ry="2" />
<text  x="576.20" y="511.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="18.2" y="469" width="0.3" height="15.0" fill="rgb(208,141,35)" rx="2" ry="2" />
<text  x="21.25" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="43.2" y="405" width="0.2" height="15.0" fill="rgb(240,162,26)" rx="2" ry="2" />
<text  x="46.21" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="721.6" y="565" width="0.2" height="15.0" fill="rgb(228,42,24)" rx="2" ry="2" />
<text  x="724.62" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="746.1" y="501" width="0.3" height="15.0" fill="rgb(209,108,15)" rx="2" ry="2" />
<text  x="749.13" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="136.0" y="549" width="0.7" height="15.0" fill="rgb(218,217,21)" rx="2" ry="2" />
<text  x="138.97" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="186.1" y="405" width="0.5" height="15.0" fill="rgb(223,184,28)" rx="2" ry="2" />
<text  x="189.13" y="415.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="18.5" y="549" width="0.2" height="15.0" fill="rgb(220,104,21)" rx="2" ry="2" />
<text  x="21.47" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="533.1" y="357" width="0.5" height="15.0" fill="rgb(215,150,54)" rx="2" ry="2" />
<text  x="536.12" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (2 samples, 0.04%)</title><rect x="73.0" y="437" width="0.4" height="15.0" fill="rgb(233,8,4)" rx="2" ry="2" />
<text  x="75.99" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1018.5" y="261" width="0.2" height="15.0" fill="rgb(236,139,40)" rx="2" ry="2" />
<text  x="1021.45" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="98.6" y="581" width="0.5" height="15.0" fill="rgb(249,44,44)" rx="2" ry="2" />
<text  x="101.64" y="591.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%)</title><rect x="110.8" y="517" width="0.7" height="15.0" fill="rgb(242,146,9)" rx="2" ry="2" />
<text  x="113.78" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="1027.6" y="341" width="0.2" height="15.0" fill="rgb(219,123,26)" rx="2" ry="2" />
<text  x="1030.61" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="673.3" y="565" width="0.2" height="15.0" fill="rgb(214,48,29)" rx="2" ry="2" />
<text  x="676.29" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (2 samples, 0.04%)</title><rect x="132.8" y="485" width="0.4" height="15.0" fill="rgb(215,175,51)" rx="2" ry="2" />
<text  x="135.76" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="755.1" y="565" width="0.2" height="15.0" fill="rgb(249,164,16)" rx="2" ry="2" />
<text  x="758.06" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (9 samples, 0.17%)</title><rect x="543.4" y="325" width="2.1" height="15.0" fill="rgb(220,112,53)" rx="2" ry="2" />
<text  x="546.43" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="875.1" y="565" width="1.3" height="15.0" fill="rgb(217,153,29)" rx="2" ry="2" />
<text  x="878.07" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="24.0" y="293" width="0.2" height="15.0" fill="rgb(238,76,15)" rx="2" ry="2" />
<text  x="26.97" y="303.5" ></text>
</g>
<g >
<title>auth::collect_roles (1 samples, 0.02%)</title><rect x="1166.6" y="373" width="0.3" height="15.0" fill="rgb(212,52,34)" rx="2" ry="2" />
<text  x="1169.64" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="69" width="0.3" height="15.0" fill="rgb(209,166,41)" rx="2" ry="2" />
<text  x="56.75" y="79.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (263 samples, 5.10%)</title><rect x="20.5" y="613" width="60.3" height="15.0" fill="rgb(228,180,17)" rx="2" ry="2" />
<text  x="23.54" y="623.5" >single..</text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="791.9" y="469" width="0.5" height="15.0" fill="rgb(216,44,34)" rx="2" ry="2" />
<text  x="794.93" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="449.1" y="309" width="0.2" height="15.0" fill="rgb(233,140,36)" rx="2" ry="2" />
<text  x="452.06" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.3" y="469" width="0.3" height="15.0" fill="rgb(222,108,14)" rx="2" ry="2" />
<text  x="69.34" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="813.0" y="293" width="2.3" height="15.0" fill="rgb(218,63,42)" rx="2" ry="2" />
<text  x="816.00" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="605.3" y="373" width="0.7" height="15.0" fill="rgb(238,157,11)" rx="2" ry="2" />
<text  x="608.27" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (21 samples, 0.41%)</title><rect x="1105.0" y="501" width="4.8" height="15.0" fill="rgb(210,164,47)" rx="2" ry="2" />
<text  x="1108.03" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="1135.5" y="293" width="0.7" height="15.0" fill="rgb(253,180,35)" rx="2" ry="2" />
<text  x="1138.49" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%)</title><rect x="18.9" y="629" width="0.3" height="15.0" fill="rgb(222,180,18)" rx="2" ry="2" />
<text  x="21.93" y="639.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="998.8" y="389" width="0.2" height="15.0" fill="rgb(216,72,28)" rx="2" ry="2" />
<text  x="1001.75" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%)</title><rect x="210.2" y="309" width="1.1" height="15.0" fill="rgb(205,78,4)" rx="2" ry="2" />
<text  x="213.18" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT (1 samples, 0.02%)</title><rect x="35.9" y="341" width="0.2" height="15.0" fill="rgb(221,7,25)" rx="2" ry="2" />
<text  x="38.88" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%)</title><rect x="215.7" y="309" width="0.4" height="15.0" fill="rgb(221,179,3)" rx="2" ry="2" />
<text  x="218.68" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="782.5" y="437" width="0.3" height="15.0" fill="rgb(226,25,31)" rx="2" ry="2" />
<text  x="785.54" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="674.4" y="581" width="0.3" height="15.0" fill="rgb(253,164,44)" rx="2" ry="2" />
<text  x="677.44" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.2" y="373" width="0.3" height="15.0" fill="rgb(240,205,22)" rx="2" ry="2" />
<text  x="43.23" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="59.5" y="341" width="0.2" height="15.0" fill="rgb(212,14,37)" rx="2" ry="2" />
<text  x="62.47" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="956.8" y="453" width="0.5" height="15.0" fill="rgb(241,199,7)" rx="2" ry="2" />
<text  x="959.84" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="886.8" y="325" width="0.2" height="15.0" fill="rgb(216,101,41)" rx="2" ry="2" />
<text  x="889.75" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="98.2" y="581" width="0.4" height="15.0" fill="rgb(205,166,38)" rx="2" ry="2" />
<text  x="101.18" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="629.5" y="485" width="0.3" height="15.0" fill="rgb(221,223,35)" rx="2" ry="2" />
<text  x="632.55" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1097.7" y="501" width="0.2" height="15.0" fill="rgb(254,98,2)" rx="2" ry="2" />
<text  x="1100.70" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,388 samples, 46.35%)</title><rect x="114.2" y="581" width="547.0" height="15.0" fill="rgb(222,228,43)" rx="2" ry="2" />
<text  x="117.21" y="591.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%)</title><rect x="26.7" y="373" width="0.2" height="15.0" fill="rgb(220,8,28)" rx="2" ry="2" />
<text  x="29.72" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (95 samples, 1.84%)</title><rect x="917.0" y="501" width="21.7" height="15.0" fill="rgb(238,134,30)" rx="2" ry="2" />
<text  x="919.99" y="511.5" >c..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%)</title><rect x="342.6" y="453" width="0.4" height="15.0" fill="rgb(214,200,33)" rx="2" ry="2" />
<text  x="345.56" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (14 samples, 0.27%)</title><rect x="883.8" y="469" width="3.2" height="15.0" fill="rgb(218,218,13)" rx="2" ry="2" />
<text  x="886.78" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="133.2" y="501" width="0.3" height="15.0" fill="rgb(237,16,12)" rx="2" ry="2" />
<text  x="136.22" y="511.5" ></text>
</g>
<g >
<title>database::has_keyspace (10 samples, 0.19%)</title><rect x="857.0" y="517" width="2.3" height="15.0" fill="rgb(214,97,4)" rx="2" ry="2" />
<text  x="859.98" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.4" y="325" width="0.2" height="15.0" fill="rgb(232,219,43)" rx="2" ry="2" />
<text  x="63.39" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="1132.7" y="229" width="0.3" height="15.0" fill="rgb(207,97,42)" rx="2" ry="2" />
<text  x="1135.74" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="495.8" y="405" width="0.4" height="15.0" fill="rgb(254,54,52)" rx="2" ry="2" />
<text  x="498.79" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="57.6" y="245" width="0.3" height="15.0" fill="rgb(246,66,3)" rx="2" ry="2" />
<text  x="60.64" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="293" width="0.5" height="15.0" fill="rgb(244,165,1)" rx="2" ry="2" />
<text  x="56.52" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="865.2" y="421" width="0.3" height="15.0" fill="rgb(215,35,39)" rx="2" ry="2" />
<text  x="868.23" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="942.6" y="501" width="0.3" height="15.0" fill="rgb(219,106,23)" rx="2" ry="2" />
<text  x="945.64" y="511.5" ></text>
</g>
<g >
<title>create_partitions (273 samples, 5.30%)</title><rect x="19.2" y="629" width="62.5" height="15.0" fill="rgb(208,126,40)" rx="2" ry="2" />
<text  x="22.16" y="639.5" >create..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="103.2" y="549" width="0.2" height="15.0" fill="rgb(218,205,40)" rx="2" ry="2" />
<text  x="106.22" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="562.7" y="373" width="0.2" height="15.0" fill="rgb(231,146,16)" rx="2" ry="2" />
<text  x="565.67" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (2 samples, 0.04%)</title><rect x="981.6" y="453" width="0.4" height="15.0" fill="rgb(218,221,21)" rx="2" ry="2" />
<text  x="984.58" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(221,213,52)" rx="2" ry="2" />
<text  x="13.69" y="703.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%)</title><rect x="554.4" y="421" width="0.9" height="15.0" fill="rgb(224,56,37)" rx="2" ry="2" />
<text  x="557.42" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="684.5" y="565" width="0.7" height="15.0" fill="rgb(242,188,50)" rx="2" ry="2" />
<text  x="687.51" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="68.4" y="533" width="0.2" height="15.0" fill="rgb(207,215,48)" rx="2" ry="2" />
<text  x="71.40" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%)</title><rect x="1166.6" y="597" width="0.3" height="15.0" fill="rgb(230,41,15)" rx="2" ry="2" />
<text  x="1169.64" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1137.6" y="261" width="0.2" height="15.0" fill="rgb(238,143,15)" rx="2" ry="2" />
<text  x="1140.55" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (6 samples, 0.12%)</title><rect x="1026.2" y="309" width="1.4" height="15.0" fill="rgb(243,101,49)" rx="2" ry="2" />
<text  x="1029.24" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4 samples, 0.08%)</title><rect x="1152.7" y="549" width="0.9" height="15.0" fill="rgb(213,135,16)" rx="2" ry="2" />
<text  x="1155.67" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="59.2" y="389" width="0.5" height="15.0" fill="rgb(230,226,26)" rx="2" ry="2" />
<text  x="62.24" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="21.2" y="469" width="0.3" height="15.0" fill="rgb(249,95,15)" rx="2" ry="2" />
<text  x="24.22" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="211.1" y="293" width="0.2" height="15.0" fill="rgb(230,99,2)" rx="2" ry="2" />
<text  x="214.09" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="223.2" y="293" width="0.3" height="15.0" fill="rgb(209,9,50)" rx="2" ry="2" />
<text  x="226.23" y="303.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="642.6" y="533" width="0.2" height="15.0" fill="rgb(239,149,30)" rx="2" ry="2" />
<text  x="645.60" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="54.4" y="165" width="0.3" height="15.0" fill="rgb(220,159,50)" rx="2" ry="2" />
<text  x="57.43" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="728.5" y="549" width="0.2" height="15.0" fill="rgb(207,164,0)" rx="2" ry="2" />
<text  x="731.49" y="559.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1137.6" y="485" width="0.2" height="15.0" fill="rgb(243,52,27)" rx="2" ry="2" />
<text  x="1140.55" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.10%)</title><rect x="821.7" y="229" width="1.2" height="15.0" fill="rgb(209,146,28)" rx="2" ry="2" />
<text  x="824.71" y="239.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="636.4" y="501" width="0.2" height="15.0" fill="rgb(218,102,23)" rx="2" ry="2" />
<text  x="639.42" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.5" y="373" width="0.2" height="15.0" fill="rgb(207,126,29)" rx="2" ry="2" />
<text  x="62.47" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%)</title><rect x="110.3" y="533" width="0.5" height="15.0" fill="rgb(221,104,29)" rx="2" ry="2" />
<text  x="113.32" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="480.7" y="437" width="0.2" height="15.0" fill="rgb(205,70,50)" rx="2" ry="2" />
<text  x="483.67" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="440.1" y="261" width="0.7" height="15.0" fill="rgb(221,94,48)" rx="2" ry="2" />
<text  x="443.13" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="717.5" y="501" width="0.2" height="15.0" fill="rgb(241,36,12)" rx="2" ry="2" />
<text  x="720.50" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1025.6" y="277" width="0.6" height="15.0" fill="rgb(207,118,9)" rx="2" ry="2" />
<text  x="1028.55" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="40.0" y="437" width="0.5" height="15.0" fill="rgb(237,57,2)" rx="2" ry="2" />
<text  x="43.00" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="674.7" y="485" width="0.2" height="15.0" fill="rgb(208,92,16)" rx="2" ry="2" />
<text  x="677.67" y="495.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%)</title><rect x="101.4" y="533" width="0.2" height="15.0" fill="rgb(219,162,2)" rx="2" ry="2" />
<text  x="104.39" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="859.3" y="501" width="2.5" height="15.0" fill="rgb(221,3,6)" rx="2" ry="2" />
<text  x="862.27" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="826.1" y="245" width="0.2" height="15.0" fill="rgb(219,97,54)" rx="2" ry="2" />
<text  x="829.06" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="450.2" y="309" width="0.2" height="15.0" fill="rgb(206,103,11)" rx="2" ry="2" />
<text  x="453.21" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="454.8" y="277" width="0.2" height="15.0" fill="rgb(217,121,45)" rx="2" ry="2" />
<text  x="457.79" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="309" width="0.2" height="15.0" fill="rgb(234,94,26)" rx="2" ry="2" />
<text  x="60.87" y="319.5" ></text>
</g>
<g >
<title>memtable::add_flushed_memory (1 samples, 0.02%)</title><rect x="83.5" y="437" width="0.3" height="15.0" fill="rgb(233,123,10)" rx="2" ry="2" />
<text  x="86.52" y="447.5" ></text>
</g>
<g >
<title>syscall-0 (2 samples, 0.04%)</title><rect x="1189.5" y="741" width="0.5" height="15.0" fill="rgb(229,97,14)" rx="2" ry="2" />
<text  x="1192.54" y="751.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="656.8" y="485" width="0.5" height="15.0" fill="rgb(247,36,24)" rx="2" ry="2" />
<text  x="659.80" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="47.1" y="357" width="0.5" height="15.0" fill="rgb(239,135,33)" rx="2" ry="2" />
<text  x="50.10" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%)</title><rect x="774.8" y="357" width="0.6" height="15.0" fill="rgb(241,108,42)" rx="2" ry="2" />
<text  x="777.76" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="553.5" y="405" width="0.5" height="15.0" fill="rgb(217,152,2)" rx="2" ry="2" />
<text  x="556.51" y="415.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="581.0" y="437" width="2.5" height="15.0" fill="rgb(229,210,14)" rx="2" ry="2" />
<text  x="583.99" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.27%)</title><rect x="458.0" y="357" width="3.2" height="15.0" fill="rgb(218,148,38)" rx="2" ry="2" />
<text  x="461.00" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%)</title><rect x="484.8" y="405" width="0.5" height="15.0" fill="rgb(216,27,28)" rx="2" ry="2" />
<text  x="487.79" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="121.1" y="533" width="0.2" height="15.0" fill="rgb(211,87,7)" rx="2" ry="2" />
<text  x="124.08" y="543.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="20.5" y="533" width="0.3" height="15.0" fill="rgb(237,161,9)" rx="2" ry="2" />
<text  x="23.54" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="18.2" y="277" width="0.3" height="15.0" fill="rgb(246,50,3)" rx="2" ry="2" />
<text  x="21.25" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="17.8" y="565" width="0.2" height="15.0" fill="rgb(217,114,22)" rx="2" ry="2" />
<text  x="20.79" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.8" y="469" width="0.3" height="15.0" fill="rgb(215,106,32)" rx="2" ry="2" />
<text  x="66.82" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (10 samples, 0.19%)</title><rect x="758.5" y="453" width="2.3" height="15.0" fill="rgb(253,98,44)" rx="2" ry="2" />
<text  x="761.49" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="55.1" y="165" width="0.2" height="15.0" fill="rgb(230,24,6)" rx="2" ry="2" />
<text  x="58.12" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="214.5" y="277" width="1.2" height="15.0" fill="rgb(233,157,37)" rx="2" ry="2" />
<text  x="217.53" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1167.1" y="549" width="0.2" height="15.0" fill="rgb(236,167,18)" rx="2" ry="2" />
<text  x="1170.10" y="559.5" ></text>
</g>
<g >
<title>seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%)</title><rect x="665.0" y="581" width="0.3" height="15.0" fill="rgb(240,17,15)" rx="2" ry="2" />
<text  x="668.05" y="591.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.16%)</title><rect x="1065.4" y="325" width="1.8" height="15.0" fill="rgb(250,19,42)" rx="2" ry="2" />
<text  x="1068.40" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1139.4" y="597" width="0.4" height="15.0" fill="rgb(242,120,39)" rx="2" ry="2" />
<text  x="1142.38" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="985.2" y="437" width="2.8" height="15.0" fill="rgb(238,148,10)" rx="2" ry="2" />
<text  x="988.24" y="447.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (2 samples, 0.04%)</title><rect x="1075.7" y="405" width="0.5" height="15.0" fill="rgb(214,228,46)" rx="2" ry="2" />
<text  x="1078.71" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.10%)</title><rect x="48.2" y="389" width="1.2" height="15.0" fill="rgb(232,29,41)" rx="2" ry="2" />
<text  x="51.25" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::dispose (1 samples, 0.02%)</title><rect x="746.1" y="549" width="0.3" height="15.0" fill="rgb(205,129,39)" rx="2" ry="2" />
<text  x="749.13" y="559.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%)</title><rect x="364.5" y="293" width="0.3" height="15.0" fill="rgb(241,140,46)" rx="2" ry="2" />
<text  x="367.55" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.9" y="277" width="0.2" height="15.0" fill="rgb(233,141,0)" rx="2" ry="2" />
<text  x="57.89" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%)</title><rect x="493.7" y="405" width="2.1" height="15.0" fill="rgb(225,212,33)" rx="2" ry="2" />
<text  x="496.73" y="415.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (1 samples, 0.02%)</title><rect x="289.0" y="325" width="0.2" height="15.0" fill="rgb(209,104,22)" rx="2" ry="2" />
<text  x="291.97" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.54%)</title><rect x="881.3" y="565" width="6.4" height="15.0" fill="rgb(243,80,34)" rx="2" ry="2" />
<text  x="884.26" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="82.8" y="437" width="0.3" height="15.0" fill="rgb(236,34,3)" rx="2" ry="2" />
<text  x="85.83" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="844.8" y="389" width="0.7" height="15.0" fill="rgb(238,149,13)" rx="2" ry="2" />
<text  x="847.84" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="121.5" y="549" width="0.3" height="15.0" fill="rgb(209,214,39)" rx="2" ry="2" />
<text  x="124.54" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="957.5" y="485" width="2.8" height="15.0" fill="rgb(240,204,1)" rx="2" ry="2" />
<text  x="960.53" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="715.4" y="549" width="0.5" height="15.0" fill="rgb(251,207,43)" rx="2" ry="2" />
<text  x="718.43" y="559.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (2 samples, 0.04%)</title><rect x="1167.3" y="565" width="0.5" height="15.0" fill="rgb(223,196,53)" rx="2" ry="2" />
<text  x="1170.33" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="216.1" y="309" width="0.3" height="15.0" fill="rgb(254,18,44)" rx="2" ry="2" />
<text  x="219.13" y="319.5" ></text>
</g>
<g >
<title>sstables::write (1 samples, 0.02%)</title><rect x="10.2" y="437" width="0.3" height="15.0" fill="rgb(232,18,42)" rx="2" ry="2" />
<text  x="13.23" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="108.7" y="581" width="0.2" height="15.0" fill="rgb(243,149,23)" rx="2" ry="2" />
<text  x="111.72" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="106.4" y="485" width="0.3" height="15.0" fill="rgb(250,206,21)" rx="2" ry="2" />
<text  x="109.42" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="565" width="0.3" height="15.0" fill="rgb(233,77,28)" rx="2" ry="2" />
<text  x="1169.64" y="575.5" ></text>
</g>
<g >
<title>auth::service::has_superuser (1 samples, 0.02%)</title><rect x="1166.6" y="421" width="0.3" height="15.0" fill="rgb(231,197,16)" rx="2" ry="2" />
<text  x="1169.64" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.10%)</title><rect x="447.7" y="325" width="1.1" height="15.0" fill="rgb(208,102,44)" rx="2" ry="2" />
<text  x="450.69" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="40.9" y="277" width="0.7" height="15.0" fill="rgb(232,207,32)" rx="2" ry="2" />
<text  x="43.92" y="287.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="886.8" y="389" width="0.2" height="15.0" fill="rgb(225,83,42)" rx="2" ry="2" />
<text  x="889.75" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="44.8" y="229" width="0.2" height="15.0" fill="rgb(216,35,2)" rx="2" ry="2" />
<text  x="47.81" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="342.3" y="421" width="0.3" height="15.0" fill="rgb(243,10,34)" rx="2" ry="2" />
<text  x="345.33" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (43 samples, 0.83%)</title><rect x="575.7" y="501" width="9.9" height="15.0" fill="rgb(235,110,12)" rx="2" ry="2" />
<text  x="578.72" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="40.5" y="453" width="0.2" height="15.0" fill="rgb(237,157,17)" rx="2" ry="2" />
<text  x="43.46" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="96.6" y="565" width="0.2" height="15.0" fill="rgb(234,115,1)" rx="2" ry="2" />
<text  x="99.58" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="54.4" y="213" width="0.3" height="15.0" fill="rgb(239,6,26)" rx="2" ry="2" />
<text  x="57.43" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="956.8" y="469" width="0.5" height="15.0" fill="rgb(206,219,36)" rx="2" ry="2" />
<text  x="959.84" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="85.6" y="501" width="0.2" height="15.0" fill="rgb(253,36,45)" rx="2" ry="2" />
<text  x="88.58" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="811.6" y="325" width="0.5" height="15.0" fill="rgb(217,222,38)" rx="2" ry="2" />
<text  x="814.63" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.10%)</title><rect x="1128.8" y="293" width="1.2" height="15.0" fill="rgb(241,31,31)" rx="2" ry="2" />
<text  x="1131.85" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1056.5" y="405" width="0.2" height="15.0" fill="rgb(231,189,19)" rx="2" ry="2" />
<text  x="1059.47" y="415.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (2 samples, 0.04%)</title><rect x="1120.1" y="261" width="0.5" height="15.0" fill="rgb(254,34,47)" rx="2" ry="2" />
<text  x="1123.14" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="111.2" y="389" width="0.3" height="15.0" fill="rgb(240,43,42)" rx="2" ry="2" />
<text  x="114.23" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%)</title><rect x="210.2" y="293" width="0.9" height="15.0" fill="rgb(210,54,1)" rx="2" ry="2" />
<text  x="213.18" y="303.5" ></text>
</g>
<g >
<title>database::query (90 samples, 1.75%)</title><rect x="1007.7" y="357" width="20.6" height="15.0" fill="rgb(253,90,5)" rx="2" ry="2" />
<text  x="1010.69" y="367.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::file_data_sink_impl (1 samples, 0.02%)</title><rect x="717.5" y="533" width="0.2" height="15.0" fill="rgb(215,22,27)" rx="2" ry="2" />
<text  x="720.50" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="1137.6" y="437" width="0.2" height="15.0" fill="rgb(208,125,23)" rx="2" ry="2" />
<text  x="1140.55" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="839.8" y="469" width="0.9" height="15.0" fill="rgb(217,151,42)" rx="2" ry="2" />
<text  x="842.80" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (3 samples, 0.06%)</title><rect x="229.0" y="229" width="0.6" height="15.0" fill="rgb(216,19,20)" rx="2" ry="2" />
<text  x="231.96" y="239.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="655.4" y="533" width="0.3" height="15.0" fill="rgb(251,212,39)" rx="2" ry="2" />
<text  x="658.43" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="264.0" y="245" width="0.2" height="15.0" fill="rgb(237,66,39)" rx="2" ry="2" />
<text  x="267.00" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="44.6" y="229" width="0.2" height="15.0" fill="rgb(209,107,19)" rx="2" ry="2" />
<text  x="47.58" y="239.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%)</title><rect x="80.5" y="581" width="0.3" height="15.0" fill="rgb(233,86,18)" rx="2" ry="2" />
<text  x="83.54" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="52.6" y="357" width="0.5" height="15.0" fill="rgb(254,50,4)" rx="2" ry="2" />
<text  x="55.60" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (9 samples, 0.17%)</title><rect x="24.0" y="405" width="2.0" height="15.0" fill="rgb(208,106,47)" rx="2" ry="2" />
<text  x="26.97" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (9 samples, 0.17%)</title><rect x="841.2" y="453" width="2.0" height="15.0" fill="rgb(254,197,34)" rx="2" ry="2" />
<text  x="844.18" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1126.6" y="309" width="0.2" height="15.0" fill="rgb(254,207,47)" rx="2" ry="2" />
<text  x="1129.56" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (4 samples, 0.08%)</title><rect x="102.3" y="501" width="0.9" height="15.0" fill="rgb(223,202,40)" rx="2" ry="2" />
<text  x="105.30" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (31 samples, 0.60%)</title><rect x="450.9" y="357" width="7.1" height="15.0" fill="rgb(222,216,6)" rx="2" ry="2" />
<text  x="453.90" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="794.0" y="437" width="0.9" height="15.0" fill="rgb(244,49,20)" rx="2" ry="2" />
<text  x="796.99" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="289.7" y="325" width="0.2" height="15.0" fill="rgb(248,70,41)" rx="2" ry="2" />
<text  x="292.65" y="335.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1039.8" y="421" width="0.2" height="15.0" fill="rgb(237,121,44)" rx="2" ry="2" />
<text  x="1042.75" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (5 samples, 0.10%)</title><rect x="372.6" y="261" width="1.1" height="15.0" fill="rgb(239,38,43)" rx="2" ry="2" />
<text  x="375.57" y="271.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="77.1" y="469" width="0.2" height="15.0" fill="rgb(229,132,24)" rx="2" ry="2" />
<text  x="80.11" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (4 samples, 0.08%)</title><rect x="383.1" y="277" width="0.9" height="15.0" fill="rgb(253,6,7)" rx="2" ry="2" />
<text  x="386.10" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.17%)</title><rect x="661.4" y="581" width="2.0" height="15.0" fill="rgb(245,187,18)" rx="2" ry="2" />
<text  x="664.38" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (38 samples, 0.74%)</title><rect x="126.6" y="533" width="8.7" height="15.0" fill="rgb(245,149,38)" rx="2" ry="2" />
<text  x="129.58" y="543.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%)</title><rect x="1120.1" y="245" width="0.3" height="15.0" fill="rgb(236,139,40)" rx="2" ry="2" />
<text  x="1123.14" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="462.3" y="389" width="0.3" height="15.0" fill="rgb(249,9,5)" rx="2" ry="2" />
<text  x="465.35" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="786.4" y="405" width="0.3" height="15.0" fill="rgb(207,72,18)" rx="2" ry="2" />
<text  x="789.44" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="541.8" y="293" width="0.7" height="15.0" fill="rgb(222,211,45)" rx="2" ry="2" />
<text  x="544.82" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="910.8" y="405" width="0.2" height="15.0" fill="rgb(252,25,1)" rx="2" ry="2" />
<text  x="913.80" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::scylla_metadata_type, std::pair&lt;sstables::scylla_metadata_type const, seastar::shared_ptr&lt;sstables::single_tagged_union_member_serdes&lt;sstables::disk_set_of_tagged_union&lt;sstables::scylla_metadata_type, sstables::disk_tagged_union_member&lt;sstables::scylla_metadata_type,  (4 samples, 0.08%)</title><rect x="86.3" y="693" width="0.9" height="15.0" fill="rgb(229,218,52)" rx="2" ry="2" />
<text  x="89.27" y="703.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (11 samples, 0.21%)</title><rect x="560.4" y="405" width="2.5" height="15.0" fill="rgb(214,173,20)" rx="2" ry="2" />
<text  x="563.38" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (4 samples, 0.08%)</title><rect x="1135.5" y="309" width="0.9" height="15.0" fill="rgb(251,123,7)" rx="2" ry="2" />
<text  x="1138.49" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="943.6" y="453" width="0.4" height="15.0" fill="rgb(231,15,11)" rx="2" ry="2" />
<text  x="946.56" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.3" y="325" width="0.2" height="15.0" fill="rgb(207,36,13)" rx="2" ry="2" />
<text  x="1037.25" y="335.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::make_empty (2 samples, 0.04%)</title><rect x="883.8" y="437" width="0.4" height="15.0" fill="rgb(227,187,18)" rx="2" ry="2" />
<text  x="886.78" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="468.3" y="453" width="0.2" height="15.0" fill="rgb(230,47,32)" rx="2" ry="2" />
<text  x="471.30" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.9" y="245" width="0.2" height="15.0" fill="rgb(218,119,40)" rx="2" ry="2" />
<text  x="57.89" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.50%)</title><rect x="1067.9" y="357" width="6.0" height="15.0" fill="rgb(243,136,51)" rx="2" ry="2" />
<text  x="1070.92" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="18.7" y="437" width="0.2" height="15.0" fill="rgb(220,128,34)" rx="2" ry="2" />
<text  x="21.70" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_service_level_statement&gt;, void&gt; (2 samples, 0.04%)</title><rect x="64.3" y="469" width="0.4" height="15.0" fill="rgb(228,109,4)" rx="2" ry="2" />
<text  x="67.28" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%)</title><rect x="1133.0" y="261" width="0.7" height="15.0" fill="rgb(213,150,43)" rx="2" ry="2" />
<text  x="1135.97" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="60.8" y="357" width="0.3" height="15.0" fill="rgb(239,153,5)" rx="2" ry="2" />
<text  x="63.85" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="228.7" y="229" width="0.3" height="15.0" fill="rgb(225,37,35)" rx="2" ry="2" />
<text  x="231.73" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1166.6" y="517" width="0.3" height="15.0" fill="rgb(227,93,9)" rx="2" ry="2" />
<text  x="1169.64" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="941.7" y="485" width="0.3" height="15.0" fill="rgb(207,32,23)" rx="2" ry="2" />
<text  x="944.72" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="658.4" y="485" width="0.2" height="15.0" fill="rgb(244,146,50)" rx="2" ry="2" />
<text  x="661.40" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="495.1" y="373" width="0.2" height="15.0" fill="rgb(218,178,9)" rx="2" ry="2" />
<text  x="498.10" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="613.3" y="437" width="0.2" height="15.0" fill="rgb(227,6,39)" rx="2" ry="2" />
<text  x="616.28" y="447.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="108.9" y="469" width="0.3" height="15.0" fill="rgb(228,198,17)" rx="2" ry="2" />
<text  x="111.94" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="59.7" y="373" width="0.2" height="15.0" fill="rgb(250,144,33)" rx="2" ry="2" />
<text  x="62.70" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,719 samples, 91.60%)</title><rect x="87.2" y="629" width="1080.8" height="15.0" fill="rgb(254,83,51)" rx="2" ry="2" />
<text  x="90.19" y="639.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="628.6" y="469" width="0.3" height="15.0" fill="rgb(248,172,11)" rx="2" ry="2" />
<text  x="631.63" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="1124.3" y="293" width="0.4" height="15.0" fill="rgb(219,6,12)" rx="2" ry="2" />
<text  x="1127.27" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="25.8" y="341" width="0.2" height="15.0" fill="rgb(237,198,54)" rx="2" ry="2" />
<text  x="28.80" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (5 samples, 0.10%)</title><rect x="768.6" y="421" width="1.1" height="15.0" fill="rgb(205,54,39)" rx="2" ry="2" />
<text  x="771.57" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (28 samples, 0.54%)</title><rect x="156.6" y="533" width="6.4" height="15.0" fill="rgb(251,45,21)" rx="2" ry="2" />
<text  x="159.58" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="54.7" y="341" width="0.9" height="15.0" fill="rgb(236,219,6)" rx="2" ry="2" />
<text  x="57.66" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="696.7" y="517" width="1.1" height="15.0" fill="rgb(214,100,40)" rx="2" ry="2" />
<text  x="699.65" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="880.1" y="389" width="0.2" height="15.0" fill="rgb(237,94,7)" rx="2" ry="2" />
<text  x="883.11" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="61.5" y="453" width="0.3" height="15.0" fill="rgb(230,66,52)" rx="2" ry="2" />
<text  x="64.53" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (3 samples, 0.06%)</title><rect x="109.6" y="597" width="0.7" height="15.0" fill="rgb(226,78,41)" rx="2" ry="2" />
<text  x="112.63" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.14%)</title><rect x="101.6" y="533" width="1.6" height="15.0" fill="rgb(236,166,52)" rx="2" ry="2" />
<text  x="104.61" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="1023.9" y="309" width="0.3" height="15.0" fill="rgb(214,183,35)" rx="2" ry="2" />
<text  x="1026.95" y="319.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="824.7" y="197" width="0.7" height="15.0" fill="rgb(209,112,37)" rx="2" ry="2" />
<text  x="827.69" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="46.6" y="389" width="0.3" height="15.0" fill="rgb(223,81,24)" rx="2" ry="2" />
<text  x="49.65" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="1137.6" y="405" width="0.2" height="15.0" fill="rgb(206,144,39)" rx="2" ry="2" />
<text  x="1140.55" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="81.9" y="453" width="0.2" height="15.0" fill="rgb(211,46,0)" rx="2" ry="2" />
<text  x="84.92" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="794.9" y="437" width="0.2" height="15.0" fill="rgb(249,122,4)" rx="2" ry="2" />
<text  x="797.91" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%)</title><rect x="293.5" y="357" width="0.3" height="15.0" fill="rgb(221,67,7)" rx="2" ry="2" />
<text  x="296.55" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="1166.6" y="309" width="0.3" height="15.0" fill="rgb(254,100,42)" rx="2" ry="2" />
<text  x="1169.64" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="373.7" y="261" width="0.2" height="15.0" fill="rgb(214,186,22)" rx="2" ry="2" />
<text  x="376.71" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="22.8" y="437" width="0.3" height="15.0" fill="rgb(231,87,10)" rx="2" ry="2" />
<text  x="25.83" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="772.0" y="405" width="0.5" height="15.0" fill="rgb(239,122,51)" rx="2" ry="2" />
<text  x="775.01" y="415.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="986.2" y="389" width="1.6" height="15.0" fill="rgb(242,147,53)" rx="2" ry="2" />
<text  x="989.16" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1056.7" y="421" width="0.2" height="15.0" fill="rgb(229,93,15)" rx="2" ry="2" />
<text  x="1059.70" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="52.6" y="261" width="0.2" height="15.0" fill="rgb(254,154,4)" rx="2" ry="2" />
<text  x="55.60" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="204.5" y="373" width="0.2" height="15.0" fill="rgb(205,209,51)" rx="2" ry="2" />
<text  x="207.45" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="690.5" y="581" width="0.9" height="15.0" fill="rgb(214,179,44)" rx="2" ry="2" />
<text  x="693.47" y="591.5" ></text>
</g>
<g >
<title>sstables::seal_statistics (1 samples, 0.02%)</title><rect x="10.2" y="485" width="0.3" height="15.0" fill="rgb(253,5,43)" rx="2" ry="2" />
<text  x="13.23" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (13 samples, 0.25%)</title><rect x="907.8" y="405" width="3.0" height="15.0" fill="rgb(236,155,17)" rx="2" ry="2" />
<text  x="910.83" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="110.3" y="405" width="0.2" height="15.0" fill="rgb(238,150,14)" rx="2" ry="2" />
<text  x="113.32" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="651.8" y="501" width="0.2" height="15.0" fill="rgb(210,76,12)" rx="2" ry="2" />
<text  x="654.76" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="1123.1" y="293" width="0.3" height="15.0" fill="rgb(219,185,6)" rx="2" ry="2" />
<text  x="1126.12" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="321.5" y="405" width="0.4" height="15.0" fill="rgb(249,23,54)" rx="2" ry="2" />
<text  x="324.49" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="346.7" y="485" width="0.2" height="15.0" fill="rgb(236,215,12)" rx="2" ry="2" />
<text  x="349.68" y="495.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (5 samples, 0.10%)</title><rect x="71.6" y="485" width="1.2" height="15.0" fill="rgb(241,15,20)" rx="2" ry="2" />
<text  x="74.61" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="803.6" y="373" width="0.5" height="15.0" fill="rgb(221,133,42)" rx="2" ry="2" />
<text  x="806.61" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%)</title><rect x="1167.1" y="597" width="0.9" height="15.0" fill="rgb(224,77,15)" rx="2" ry="2" />
<text  x="1170.10" y="607.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="1132.5" y="197" width="0.2" height="15.0" fill="rgb(237,112,20)" rx="2" ry="2" />
<text  x="1135.51" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="671.5" y="565" width="0.2" height="15.0" fill="rgb(216,154,29)" rx="2" ry="2" />
<text  x="674.46" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1132.7" y="165" width="0.3" height="15.0" fill="rgb(253,29,4)" rx="2" ry="2" />
<text  x="1135.74" y="175.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="45.0" y="245" width="0.3" height="15.0" fill="rgb(221,183,51)" rx="2" ry="2" />
<text  x="48.04" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%)</title><rect x="981.3" y="453" width="0.3" height="15.0" fill="rgb(250,62,38)" rx="2" ry="2" />
<text  x="984.35" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="106.4" y="405" width="0.3" height="15.0" fill="rgb(234,210,13)" rx="2" ry="2" />
<text  x="109.42" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="58.6" y="229" width="0.2" height="15.0" fill="rgb(243,192,36)" rx="2" ry="2" />
<text  x="61.56" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="47.6" y="341" width="0.2" height="15.0" fill="rgb(243,127,23)" rx="2" ry="2" />
<text  x="50.56" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1131.6" y="405" width="3.7" height="15.0" fill="rgb(224,131,14)" rx="2" ry="2" />
<text  x="1134.60" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="20.5" y="517" width="0.3" height="15.0" fill="rgb(206,142,42)" rx="2" ry="2" />
<text  x="23.54" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="850.6" y="501" width="0.9" height="15.0" fill="rgb(207,149,18)" rx="2" ry="2" />
<text  x="853.57" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (5 samples, 0.10%)</title><rect x="1135.3" y="405" width="1.1" height="15.0" fill="rgb(227,127,7)" rx="2" ry="2" />
<text  x="1138.26" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (249 samples, 4.83%)</title><rect x="983.0" y="453" width="57.0" height="15.0" fill="rgb(248,183,10)" rx="2" ry="2" />
<text  x="985.95" y="463.5" >servic..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="203.5" y="357" width="0.3" height="15.0" fill="rgb(221,194,19)" rx="2" ry="2" />
<text  x="206.54" y="367.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (3 samples, 0.06%)</title><rect x="109.6" y="453" width="0.7" height="15.0" fill="rgb(254,163,23)" rx="2" ry="2" />
<text  x="112.63" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (15 samples, 0.29%)</title><rect x="129.8" y="501" width="3.4" height="15.0" fill="rgb(243,128,36)" rx="2" ry="2" />
<text  x="132.79" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.62%)</title><rect x="819.0" y="293" width="7.3" height="15.0" fill="rgb(244,22,52)" rx="2" ry="2" />
<text  x="821.96" y="303.5" ></text>
</g>
<g >
<title>do_with_cql_env_thread (1 samples, 0.02%)</title><rect x="746.8" y="517" width="0.2" height="15.0" fill="rgb(216,24,31)" rx="2" ry="2" />
<text  x="749.81" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="13.2" y="677" width="0.5" height="15.0" fill="rgb(239,61,53)" rx="2" ry="2" />
<text  x="16.21" y="687.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (2 samples, 0.04%)</title><rect x="717.0" y="581" width="0.5" height="15.0" fill="rgb(214,170,13)" rx="2" ry="2" />
<text  x="720.04" y="591.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="109.6" y="437" width="0.7" height="15.0" fill="rgb(226,11,52)" rx="2" ry="2" />
<text  x="112.63" y="447.5" ></text>
</g>
<g >
<title>std::move&lt;std::allocator&lt;char&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="21.9" y="389" width="0.2" height="15.0" fill="rgb(231,29,21)" rx="2" ry="2" />
<text  x="24.91" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (18 samples, 0.35%)</title><rect x="721.8" y="565" width="4.2" height="15.0" fill="rgb(232,45,41)" rx="2" ry="2" />
<text  x="724.85" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="84.4" y="389" width="0.3" height="15.0" fill="rgb(213,137,54)" rx="2" ry="2" />
<text  x="87.44" y="399.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="1099.8" y="517" width="1.1" height="15.0" fill="rgb(214,5,3)" rx="2" ry="2" />
<text  x="1102.76" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (5 samples, 0.10%)</title><rect x="21.5" y="517" width="1.1" height="15.0" fill="rgb(231,164,16)" rx="2" ry="2" />
<text  x="24.45" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="49.4" y="357" width="0.2" height="15.0" fill="rgb(244,11,34)" rx="2" ry="2" />
<text  x="52.39" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="131.4" y="485" width="0.4" height="15.0" fill="rgb(218,66,8)" rx="2" ry="2" />
<text  x="134.39" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="929.1" y="437" width="0.3" height="15.0" fill="rgb(216,7,34)" rx="2" ry="2" />
<text  x="932.13" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="42.1" y="421" width="0.4" height="15.0" fill="rgb(251,181,51)" rx="2" ry="2" />
<text  x="45.07" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="942.9" y="501" width="0.7" height="15.0" fill="rgb(222,145,10)" rx="2" ry="2" />
<text  x="945.87" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (1 samples, 0.02%)</title><rect x="885.6" y="373" width="0.2" height="15.0" fill="rgb(253,210,24)" rx="2" ry="2" />
<text  x="888.61" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (2 samples, 0.04%)</title><rect x="1167.3" y="549" width="0.5" height="15.0" fill="rgb(254,177,21)" rx="2" ry="2" />
<text  x="1170.33" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="56.7" y="421" width="0.3" height="15.0" fill="rgb(235,166,40)" rx="2" ry="2" />
<text  x="59.72" y="431.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="293" width="0.2" height="15.0" fill="rgb(254,111,51)" rx="2" ry="2" />
<text  x="1126.35" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="108.3" y="581" width="0.4" height="15.0" fill="rgb(213,214,3)" rx="2" ry="2" />
<text  x="111.26" y="591.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%)</title><rect x="18.9" y="501" width="0.3" height="15.0" fill="rgb(206,104,24)" rx="2" ry="2" />
<text  x="21.93" y="511.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="822.4" y="213" width="0.5" height="15.0" fill="rgb(241,91,19)" rx="2" ry="2" />
<text  x="825.40" y="223.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="82.6" y="645" width="0.5" height="15.0" fill="rgb(210,24,49)" rx="2" ry="2" />
<text  x="85.60" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="719.6" y="549" width="0.2" height="15.0" fill="rgb(244,4,41)" rx="2" ry="2" />
<text  x="722.56" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (6 samples, 0.12%)</title><rect x="1142.4" y="581" width="1.3" height="15.0" fill="rgb(237,85,10)" rx="2" ry="2" />
<text  x="1145.36" y="591.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (2 samples, 0.04%)</title><rect x="916.1" y="469" width="0.4" height="15.0" fill="rgb(211,36,42)" rx="2" ry="2" />
<text  x="919.07" y="479.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="745.9" y="549" width="0.2" height="15.0" fill="rgb(233,228,0)" rx="2" ry="2" />
<text  x="748.90" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.54%)</title><rect x="881.3" y="549" width="6.4" height="15.0" fill="rgb(206,121,50)" rx="2" ry="2" />
<text  x="884.26" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="563.4" y="405" width="1.1" height="15.0" fill="rgb(243,23,6)" rx="2" ry="2" />
<text  x="566.35" y="415.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="108.9" y="357" width="0.3" height="15.0" fill="rgb(215,212,5)" rx="2" ry="2" />
<text  x="111.94" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (6 samples, 0.12%)</title><rect x="745.2" y="597" width="1.4" height="15.0" fill="rgb(232,105,43)" rx="2" ry="2" />
<text  x="748.21" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (473 samples, 9.18%)</title><rect x="204.9" y="405" width="108.3" height="15.0" fill="rgb(239,224,1)" rx="2" ry="2" />
<text  x="207.91" y="415.5" >partition_sna..</text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="335.7" y="405" width="0.2" height="15.0" fill="rgb(245,50,12)" rx="2" ry="2" />
<text  x="338.69" y="415.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="956.2" y="485" width="0.2" height="15.0" fill="rgb(254,156,26)" rx="2" ry="2" />
<text  x="959.15" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (17 samples, 0.33%)</title><rect x="703.1" y="565" width="3.9" height="15.0" fill="rgb(231,81,35)" rx="2" ry="2" />
<text  x="706.07" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.4" y="277" width="0.3" height="15.0" fill="rgb(251,78,32)" rx="2" ry="2" />
<text  x="57.43" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="843.0" y="389" width="0.2" height="15.0" fill="rgb(227,71,38)" rx="2" ry="2" />
<text  x="846.01" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (7 samples, 0.14%)</title><rect x="372.3" y="277" width="1.6" height="15.0" fill="rgb(230,149,49)" rx="2" ry="2" />
<text  x="375.34" y="287.5" ></text>
</g>
<g >
<title>database::find_keyspace (20 samples, 0.39%)</title><rect x="1044.1" y="437" width="4.6" height="15.0" fill="rgb(210,184,21)" rx="2" ry="2" />
<text  x="1047.10" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="525.6" y="421" width="0.4" height="15.0" fill="rgb(209,56,42)" rx="2" ry="2" />
<text  x="528.56" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="117" width="0.3" height="15.0" fill="rgb(242,128,48)" rx="2" ry="2" />
<text  x="56.75" y="127.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_sstables.cc (1 samples, 0.02%)</title><rect x="86.0" y="709" width="0.3" height="15.0" fill="rgb(234,66,33)" rx="2" ry="2" />
<text  x="89.04" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="718.0" y="469" width="0.2" height="15.0" fill="rgb(236,14,38)" rx="2" ry="2" />
<text  x="720.95" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (2 samples, 0.04%)</title><rect x="444.7" y="309" width="0.5" height="15.0" fill="rgb(219,105,7)" rx="2" ry="2" />
<text  x="447.71" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_tokenSource (1 samples, 0.02%)</title><rect x="39.3" y="421" width="0.2" height="15.0" fill="rgb(235,104,0)" rx="2" ry="2" />
<text  x="42.32" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="744.5" y="581" width="0.3" height="15.0" fill="rgb(244,63,27)" rx="2" ry="2" />
<text  x="747.52" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="81.9" y="437" width="0.2" height="15.0" fill="rgb(246,165,50)" rx="2" ry="2" />
<text  x="84.92" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.0" y="357" width="0.3" height="15.0" fill="rgb(218,201,43)" rx="2" ry="2" />
<text  x="1037.03" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="659.5" y="533" width="0.3" height="15.0" fill="rgb(245,101,53)" rx="2" ry="2" />
<text  x="662.55" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.6" y="469" width="0.2" height="15.0" fill="rgb(253,53,27)" rx="2" ry="2" />
<text  x="69.57" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="502.9" y="421" width="0.7" height="15.0" fill="rgb(231,132,36)" rx="2" ry="2" />
<text  x="505.89" y="431.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="169.0" y="517" width="0.2" height="15.0" fill="rgb(213,105,50)" rx="2" ry="2" />
<text  x="171.95" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="292.9" y="341" width="0.6" height="15.0" fill="rgb(225,30,35)" rx="2" ry="2" />
<text  x="295.86" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (16 samples, 0.31%)</title><rect x="398.7" y="261" width="3.6" height="15.0" fill="rgb(205,19,38)" rx="2" ry="2" />
<text  x="401.68" y="271.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="852.6" y="485" width="0.5" height="15.0" fill="rgb(242,149,40)" rx="2" ry="2" />
<text  x="855.63" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%)</title><rect x="1167.3" y="581" width="0.7" height="15.0" fill="rgb(247,89,11)" rx="2" ry="2" />
<text  x="1170.33" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="848.7" y="501" width="0.5" height="15.0" fill="rgb(246,99,2)" rx="2" ry="2" />
<text  x="851.73" y="511.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="106.4" y="549" width="0.3" height="15.0" fill="rgb(221,195,34)" rx="2" ry="2" />
<text  x="109.42" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="644.9" y="533" width="0.2" height="15.0" fill="rgb(216,162,6)" rx="2" ry="2" />
<text  x="647.89" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1085.8" y="485" width="0.7" height="15.0" fill="rgb(254,75,49)" rx="2" ry="2" />
<text  x="1088.79" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="982.0" y="453" width="0.3" height="15.0" fill="rgb(226,211,32)" rx="2" ry="2" />
<text  x="985.03" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (263 samples, 5.10%)</title><rect x="221.2" y="309" width="60.2" height="15.0" fill="rgb(223,61,52)" rx="2" ry="2" />
<text  x="224.17" y="319.5" >logall..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.10%)</title><rect x="988.7" y="437" width="1.1" height="15.0" fill="rgb(217,229,23)" rx="2" ry="2" />
<text  x="991.68" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (2 samples, 0.04%)</title><rect x="483.4" y="421" width="0.5" height="15.0" fill="rgb(250,123,46)" rx="2" ry="2" />
<text  x="486.42" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="55.3" y="149" width="0.3" height="15.0" fill="rgb(253,96,34)" rx="2" ry="2" />
<text  x="58.35" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1131.1" y="405" width="0.3" height="15.0" fill="rgb(219,152,35)" rx="2" ry="2" />
<text  x="1134.14" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="547.6" y="357" width="0.2" height="15.0" fill="rgb(238,94,14)" rx="2" ry="2" />
<text  x="550.55" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (55 samples, 1.07%)</title><rect x="731.0" y="565" width="12.6" height="15.0" fill="rgb(240,67,3)" rx="2" ry="2" />
<text  x="734.01" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (10 samples, 0.19%)</title><rect x="680.2" y="549" width="2.3" height="15.0" fill="rgb(246,218,14)" rx="2" ry="2" />
<text  x="683.16" y="559.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="85.6" y="549" width="0.2" height="15.0" fill="rgb(233,154,39)" rx="2" ry="2" />
<text  x="88.58" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="496.9" y="373" width="0.7" height="15.0" fill="rgb(217,4,20)" rx="2" ry="2" />
<text  x="499.93" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (3 samples, 0.06%)</title><rect x="311.2" y="309" width="0.7" height="15.0" fill="rgb(243,108,14)" rx="2" ry="2" />
<text  x="314.18" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="350.1" y="389" width="0.2" height="15.0" fill="rgb(245,141,53)" rx="2" ry="2" />
<text  x="353.12" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="374.9" y="309" width="0.2" height="15.0" fill="rgb(212,116,13)" rx="2" ry="2" />
<text  x="377.86" y="319.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="492.6" y="373" width="0.4" height="15.0" fill="rgb(226,77,29)" rx="2" ry="2" />
<text  x="495.58" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="487.3" y="357" width="0.5" height="15.0" fill="rgb(248,182,26)" rx="2" ry="2" />
<text  x="490.31" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (9 samples, 0.17%)</title><rect x="1092.9" y="485" width="2.0" height="15.0" fill="rgb(222,38,12)" rx="2" ry="2" />
<text  x="1095.89" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="566.3" y="341" width="1.2" height="15.0" fill="rgb(239,111,54)" rx="2" ry="2" />
<text  x="569.33" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="465.8" y="453" width="0.2" height="15.0" fill="rgb(209,78,46)" rx="2" ry="2" />
<text  x="468.78" y="463.5" ></text>
</g>
<g >
<title>table::query (2,268 samples, 44.02%)</title><rect x="140.6" y="549" width="519.4" height="15.0" fill="rgb(207,53,21)" rx="2" ry="2" />
<text  x="143.55" y="559.5" >table::query</text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="450.0" y="293" width="0.2" height="15.0" fill="rgb(241,151,49)" rx="2" ry="2" />
<text  x="452.98" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="108.9" y="453" width="0.3" height="15.0" fill="rgb(223,88,4)" rx="2" ry="2" />
<text  x="111.94" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="1091.3" y="469" width="0.7" height="15.0" fill="rgb(224,101,16)" rx="2" ry="2" />
<text  x="1094.28" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="319.9" y="373" width="0.2" height="15.0" fill="rgb(254,16,44)" rx="2" ry="2" />
<text  x="322.89" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="1037.7" y="309" width="0.9" height="15.0" fill="rgb(228,185,8)" rx="2" ry="2" />
<text  x="1040.69" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (3 samples, 0.06%)</title><rect x="687.7" y="549" width="0.7" height="15.0" fill="rgb(222,162,38)" rx="2" ry="2" />
<text  x="690.72" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="1047.5" y="405" width="0.3" height="15.0" fill="rgb(225,113,44)" rx="2" ry="2" />
<text  x="1050.54" y="415.5" ></text>
</g>
<g >
<title>summarize.isra.0 (1 samples, 0.02%)</title><rect x="85.8" y="709" width="0.2" height="15.0" fill="rgb(220,151,46)" rx="2" ry="2" />
<text  x="88.81" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="48.2" y="357" width="1.2" height="15.0" fill="rgb(217,172,32)" rx="2" ry="2" />
<text  x="51.25" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1127.7" y="549" width="8.7" height="15.0" fill="rgb(212,65,23)" rx="2" ry="2" />
<text  x="1130.70" y="559.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (6 samples, 0.12%)</title><rect x="1111.2" y="485" width="1.4" height="15.0" fill="rgb(222,26,53)" rx="2" ry="2" />
<text  x="1114.21" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="57.6" y="357" width="0.5" height="15.0" fill="rgb(222,84,34)" rx="2" ry="2" />
<text  x="60.64" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%)</title><rect x="1020.5" y="229" width="0.5" height="15.0" fill="rgb(217,189,16)" rx="2" ry="2" />
<text  x="1023.51" y="239.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="631.8" y="533" width="0.3" height="15.0" fill="rgb(207,197,37)" rx="2" ry="2" />
<text  x="634.84" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%)</title><rect x="109.2" y="469" width="0.2" height="15.0" fill="rgb(235,118,27)" rx="2" ry="2" />
<text  x="112.17" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="654.3" y="517" width="0.2" height="15.0" fill="rgb(226,183,11)" rx="2" ry="2" />
<text  x="657.28" y="527.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="1047.8" y="405" width="0.4" height="15.0" fill="rgb(233,207,27)" rx="2" ry="2" />
<text  x="1050.77" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="18.2" y="581" width="0.3" height="15.0" fill="rgb(248,72,1)" rx="2" ry="2" />
<text  x="21.25" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="712.9" y="565" width="0.5" height="15.0" fill="rgb(209,21,3)" rx="2" ry="2" />
<text  x="715.92" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_tokens (1 samples, 0.02%)</title><rect x="82.8" y="501" width="0.3" height="15.0" fill="rgb(223,81,24)" rx="2" ry="2" />
<text  x="85.83" y="511.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (5 samples, 0.10%)</title><rect x="577.1" y="485" width="1.1" height="15.0" fill="rgb(225,26,47)" rx="2" ry="2" />
<text  x="580.10" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="81.9" y="485" width="0.2" height="15.0" fill="rgb(223,159,39)" rx="2" ry="2" />
<text  x="84.92" y="495.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1122.0" y="325" width="0.4" height="15.0" fill="rgb(251,55,31)" rx="2" ry="2" />
<text  x="1124.98" y="335.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="371.9" y="277" width="0.2" height="15.0" fill="rgb(214,183,24)" rx="2" ry="2" />
<text  x="374.88" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (78 samples, 1.51%)</title><rect x="1057.6" y="421" width="17.9" height="15.0" fill="rgb(237,27,31)" rx="2" ry="2" />
<text  x="1060.62" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.9" y="485" width="0.3" height="15.0" fill="rgb(225,62,29)" rx="2" ry="2" />
<text  x="70.95" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="609.6" y="357" width="0.2" height="15.0" fill="rgb(245,92,12)" rx="2" ry="2" />
<text  x="612.62" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="39.1" y="389" width="0.2" height="15.0" fill="rgb(219,181,29)" rx="2" ry="2" />
<text  x="42.09" y="399.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (4 samples, 0.08%)</title><rect x="19.6" y="613" width="0.9" height="15.0" fill="rgb(246,209,4)" rx="2" ry="2" />
<text  x="22.62" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="206.7" y="341" width="0.5" height="15.0" fill="rgb(219,144,46)" rx="2" ry="2" />
<text  x="209.74" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="997.8" y="373" width="0.3" height="15.0" fill="rgb(234,101,24)" rx="2" ry="2" />
<text  x="1000.84" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="45.5" y="341" width="0.7" height="15.0" fill="rgb(232,214,48)" rx="2" ry="2" />
<text  x="48.50" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="85.1" y="581" width="0.3" height="15.0" fill="rgb(235,152,13)" rx="2" ry="2" />
<text  x="88.12" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="625.9" y="485" width="0.2" height="15.0" fill="rgb(246,1,44)" rx="2" ry="2" />
<text  x="628.88" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="101.4" y="517" width="0.2" height="15.0" fill="rgb(222,133,11)" rx="2" ry="2" />
<text  x="104.39" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (611 samples, 11.86%)</title><rect x="182.9" y="421" width="140.0" height="15.0" fill="rgb(207,168,2)" rx="2" ry="2" />
<text  x="185.92" y="431.5" >mutation_reader_m..</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="730.1" y="565" width="0.2" height="15.0" fill="rgb(237,69,26)" rx="2" ry="2" />
<text  x="733.09" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="273.9" y="229" width="0.2" height="15.0" fill="rgb(229,8,16)" rx="2" ry="2" />
<text  x="276.85" y="239.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="1047.1" y="389" width="0.4" height="15.0" fill="rgb(249,100,36)" rx="2" ry="2" />
<text  x="1050.08" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.14%)</title><rect x="448.8" y="325" width="1.6" height="15.0" fill="rgb(228,220,21)" rx="2" ry="2" />
<text  x="451.84" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="357.7" y="341" width="0.2" height="15.0" fill="rgb(207,190,5)" rx="2" ry="2" />
<text  x="360.68" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (471 samples, 9.14%)</title><rect x="354.0" y="389" width="107.9" height="15.0" fill="rgb(249,12,45)" rx="2" ry="2" />
<text  x="357.01" y="399.5" >seastar::repe..</text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::index (1 samples, 0.02%)</title><rect x="29.5" y="325" width="0.2" height="15.0" fill="rgb(221,28,28)" rx="2" ry="2" />
<text  x="32.47" y="335.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::live_cell_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="261" width="0.2" height="15.0" fill="rgb(239,136,24)" rx="2" ry="2" />
<text  x="1126.35" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%)</title><rect x="287.8" y="309" width="0.7" height="15.0" fill="rgb(226,200,4)" rx="2" ry="2" />
<text  x="290.82" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (3 samples, 0.06%)</title><rect x="21.5" y="501" width="0.6" height="15.0" fill="rgb(206,160,14)" rx="2" ry="2" />
<text  x="24.45" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="47.6" y="213" width="0.2" height="15.0" fill="rgb(245,96,37)" rx="2" ry="2" />
<text  x="50.56" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (8 samples, 0.16%)</title><rect x="1093.1" y="469" width="1.8" height="15.0" fill="rgb(229,99,52)" rx="2" ry="2" />
<text  x="1096.12" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (1 samples, 0.02%)</title><rect x="372.1" y="277" width="0.2" height="15.0" fill="rgb(219,105,50)" rx="2" ry="2" />
<text  x="375.11" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="76.4" y="485" width="0.2" height="15.0" fill="rgb(212,32,43)" rx="2" ry="2" />
<text  x="79.42" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1101.1" y="517" width="0.3" height="15.0" fill="rgb(232,26,5)" rx="2" ry="2" />
<text  x="1104.13" y="527.5" ></text>
</g>
<g >
<title>seastar::file_exists (1 samples, 0.02%)</title><rect x="717.5" y="341" width="0.2" height="15.0" fill="rgb(253,91,5)" rx="2" ry="2" />
<text  x="720.50" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="612.6" y="469" width="2.1" height="15.0" fill="rgb(247,102,42)" rx="2" ry="2" />
<text  x="615.60" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="772.9" y="373" width="0.5" height="15.0" fill="rgb(241,68,37)" rx="2" ry="2" />
<text  x="775.92" y="383.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="38.2" y="341" width="0.2" height="15.0" fill="rgb(215,224,7)" rx="2" ry="2" />
<text  x="41.17" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="104.4" y="549" width="0.7" height="15.0" fill="rgb(230,187,9)" rx="2" ry="2" />
<text  x="107.36" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (27 samples, 0.52%)</title><rect x="313.9" y="389" width="6.2" height="15.0" fill="rgb(233,19,30)" rx="2" ry="2" />
<text  x="316.93" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (9 samples, 0.17%)</title><rect x="193.0" y="341" width="2.1" height="15.0" fill="rgb(249,179,38)" rx="2" ry="2" />
<text  x="196.00" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.2" y="309" width="0.2" height="15.0" fill="rgb(215,150,53)" rx="2" ry="2" />
<text  x="82.17" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1094.0" y="421" width="0.5" height="15.0" fill="rgb(230,70,46)" rx="2" ry="2" />
<text  x="1097.03" y="431.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.19%)</title><rect x="884.5" y="421" width="2.3" height="15.0" fill="rgb(249,69,16)" rx="2" ry="2" />
<text  x="887.46" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="945.8" y="453" width="0.3" height="15.0" fill="rgb(247,58,20)" rx="2" ry="2" />
<text  x="948.85" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="951.6" y="485" width="0.2" height="15.0" fill="rgb(223,218,47)" rx="2" ry="2" />
<text  x="954.57" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="666.9" y="565" width="0.2" height="15.0" fill="rgb(224,63,16)" rx="2" ry="2" />
<text  x="669.88" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="57.0" y="437" width="0.2" height="15.0" fill="rgb(217,191,54)" rx="2" ry="2" />
<text  x="59.95" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="366.4" y="261" width="0.2" height="15.0" fill="rgb(217,81,22)" rx="2" ry="2" />
<text  x="369.38" y="271.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%)</title><rect x="1099.1" y="517" width="0.2" height="15.0" fill="rgb(207,143,6)" rx="2" ry="2" />
<text  x="1102.07" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="52.6" y="245" width="0.2" height="15.0" fill="rgb(224,29,40)" rx="2" ry="2" />
<text  x="55.60" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1124.7" y="325" width="0.3" height="15.0" fill="rgb(213,184,44)" rx="2" ry="2" />
<text  x="1127.72" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="47.1" y="405" width="0.7" height="15.0" fill="rgb(226,212,5)" rx="2" ry="2" />
<text  x="50.10" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="40.9" y="389" width="0.7" height="15.0" fill="rgb(226,216,31)" rx="2" ry="2" />
<text  x="43.92" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (8 samples, 0.16%)</title><rect x="101.4" y="549" width="1.8" height="15.0" fill="rgb(242,10,47)" rx="2" ry="2" />
<text  x="104.39" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (3 samples, 0.06%)</title><rect x="48.7" y="229" width="0.7" height="15.0" fill="rgb(209,77,17)" rx="2" ry="2" />
<text  x="51.71" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="816.0" y="309" width="0.2" height="15.0" fill="rgb(250,183,34)" rx="2" ry="2" />
<text  x="818.98" y="319.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.10%)</title><rect x="1126.1" y="405" width="1.1" height="15.0" fill="rgb(246,217,44)" rx="2" ry="2" />
<text  x="1129.10" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="994.9" y="421" width="0.2" height="15.0" fill="rgb(206,222,15)" rx="2" ry="2" />
<text  x="997.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="527.6" y="405" width="0.9" height="15.0" fill="rgb(221,14,16)" rx="2" ry="2" />
<text  x="530.62" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="573.7" y="517" width="0.2" height="15.0" fill="rgb(235,162,53)" rx="2" ry="2" />
<text  x="576.66" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (8 samples, 0.16%)</title><rect x="11.4" y="677" width="1.8" height="15.0" fill="rgb(241,65,35)" rx="2" ry="2" />
<text  x="14.37" y="687.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%)</title><rect x="115.4" y="565" width="0.2" height="15.0" fill="rgb(252,211,4)" rx="2" ry="2" />
<text  x="118.36" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (26 samples, 0.50%)</title><rect x="868.0" y="549" width="5.9" height="15.0" fill="rgb(209,136,45)" rx="2" ry="2" />
<text  x="870.97" y="559.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (256 samples, 4.97%)</title><rect x="789.9" y="501" width="58.6" height="15.0" fill="rgb(238,125,35)" rx="2" ry="2" />
<text  x="792.87" y="511.5" >servic..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="937.8" y="485" width="0.7" height="15.0" fill="rgb(207,68,3)" rx="2" ry="2" />
<text  x="940.83" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="350.8" y="389" width="0.5" height="15.0" fill="rgb(219,130,35)" rx="2" ry="2" />
<text  x="353.81" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="651.5" y="485" width="0.3" height="15.0" fill="rgb(229,100,49)" rx="2" ry="2" />
<text  x="654.53" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (11 samples, 0.21%)</title><rect x="32.9" y="341" width="2.5" height="15.0" fill="rgb(240,172,11)" rx="2" ry="2" />
<text  x="35.90" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (18 samples, 0.35%)</title><rect x="57.4" y="437" width="4.1" height="15.0" fill="rgb(221,126,9)" rx="2" ry="2" />
<text  x="60.41" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="628.9" y="485" width="0.6" height="15.0" fill="rgb(225,28,36)" rx="2" ry="2" />
<text  x="631.86" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="113.5" y="581" width="0.7" height="15.0" fill="rgb(226,53,10)" rx="2" ry="2" />
<text  x="116.52" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="1137.6" y="229" width="0.2" height="15.0" fill="rgb(212,45,18)" rx="2" ry="2" />
<text  x="1140.55" y="239.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="53.5" y="341" width="0.5" height="15.0" fill="rgb(229,208,13)" rx="2" ry="2" />
<text  x="56.52" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="885.8" y="341" width="0.3" height="15.0" fill="rgb(217,209,29)" rx="2" ry="2" />
<text  x="888.84" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="610.5" y="405" width="0.3" height="15.0" fill="rgb(240,127,27)" rx="2" ry="2" />
<text  x="613.54" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="105.5" y="565" width="0.2" height="15.0" fill="rgb(209,82,23)" rx="2" ry="2" />
<text  x="108.51" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (659 samples, 12.79%)</title><rect x="179.3" y="453" width="150.9" height="15.0" fill="rgb(234,229,18)" rx="2" ry="2" />
<text  x="182.26" y="463.5" >mutation_fragment_m..</text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="18.5" y="533" width="0.2" height="15.0" fill="rgb(244,54,8)" rx="2" ry="2" />
<text  x="21.47" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="52.6" y="213" width="0.2" height="15.0" fill="rgb(222,186,52)" rx="2" ry="2" />
<text  x="55.60" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="402.3" y="261" width="0.3" height="15.0" fill="rgb(242,15,14)" rx="2" ry="2" />
<text  x="405.34" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="104.6" y="533" width="0.5" height="15.0" fill="rgb(245,148,14)" rx="2" ry="2" />
<text  x="107.59" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (14 samples, 0.27%)</title><rect x="213.2" y="325" width="3.2" height="15.0" fill="rgb(253,191,29)" rx="2" ry="2" />
<text  x="216.16" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (3 samples, 0.06%)</title><rect x="862.9" y="517" width="0.7" height="15.0" fill="rgb(220,89,19)" rx="2" ry="2" />
<text  x="865.93" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="30.8" y="309" width="0.3" height="15.0" fill="rgb(230,171,52)" rx="2" ry="2" />
<text  x="33.84" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (1 samples, 0.02%)</title><rect x="11.1" y="677" width="0.3" height="15.0" fill="rgb(223,123,37)" rx="2" ry="2" />
<text  x="14.15" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="39.8" y="469" width="0.2" height="15.0" fill="rgb(228,25,0)" rx="2" ry="2" />
<text  x="42.77" y="479.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%)</title><rect x="894.8" y="533" width="0.2" height="15.0" fill="rgb(214,151,25)" rx="2" ry="2" />
<text  x="897.77" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (3 samples, 0.06%)</title><rect x="656.8" y="517" width="0.7" height="15.0" fill="rgb(216,193,4)" rx="2" ry="2" />
<text  x="659.80" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="57.6" y="389" width="0.5" height="15.0" fill="rgb(235,88,10)" rx="2" ry="2" />
<text  x="60.64" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (12 samples, 0.23%)</title><rect x="1053.3" y="405" width="2.7" height="15.0" fill="rgb(233,7,30)" rx="2" ry="2" />
<text  x="1056.26" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (127 samples, 2.47%)</title><rect x="804.5" y="421" width="29.1" height="15.0" fill="rgb(205,37,34)" rx="2" ry="2" />
<text  x="807.53" y="431.5" >st..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::map_reduce&lt;std::_Rb_tree_const_iterator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, db::schema_tables::read_schema_for_keyspaces (1 samples, 0.02%)</title><rect x="719.8" y="597" width="0.2" height="15.0" fill="rgb(236,86,38)" rx="2" ry="2" />
<text  x="722.79" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::grant_role_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.7" y="485" width="0.2" height="15.0" fill="rgb(205,51,27)" rx="2" ry="2" />
<text  x="70.72" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="858.6" y="453" width="0.7" height="15.0" fill="rgb(234,211,3)" rx="2" ry="2" />
<text  x="861.58" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (6 samples, 0.12%)</title><rect x="638.5" y="517" width="1.4" height="15.0" fill="rgb(214,117,18)" rx="2" ry="2" />
<text  x="641.48" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.16%)</title><rect x="1150.4" y="549" width="1.8" height="15.0" fill="rgb(216,111,49)" rx="2" ry="2" />
<text  x="1153.38" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="911.5" y="453" width="0.2" height="15.0" fill="rgb(239,2,15)" rx="2" ry="2" />
<text  x="914.49" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (9 samples, 0.17%)</title><rect x="58.8" y="405" width="2.0" height="15.0" fill="rgb(212,182,33)" rx="2" ry="2" />
<text  x="61.78" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="82.8" y="469" width="0.3" height="15.0" fill="rgb(236,5,15)" rx="2" ry="2" />
<text  x="85.83" y="479.5" ></text>
</g>
<g >
<title>__isoc99_sscanf (1 samples, 0.02%)</title><rect x="16.9" y="709" width="0.2" height="15.0" fill="rgb(210,156,38)" rx="2" ry="2" />
<text  x="19.87" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (6 samples, 0.12%)</title><rect x="823.1" y="229" width="1.4" height="15.0" fill="rgb(238,39,40)" rx="2" ry="2" />
<text  x="826.08" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="874.2" y="565" width="0.4" height="15.0" fill="rgb(233,93,48)" rx="2" ry="2" />
<text  x="877.16" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="830.0" y="325" width="0.4" height="15.0" fill="rgb(214,81,27)" rx="2" ry="2" />
<text  x="832.95" y="335.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (2 samples, 0.04%)</title><rect x="386.8" y="277" width="0.4" height="15.0" fill="rgb(245,138,25)" rx="2" ry="2" />
<text  x="389.77" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (10 samples, 0.19%)</title><rect x="83.1" y="709" width="2.3" height="15.0" fill="rgb(244,49,21)" rx="2" ry="2" />
<text  x="86.06" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="702.8" y="565" width="0.3" height="15.0" fill="rgb(235,226,20)" rx="2" ry="2" />
<text  x="705.84" y="575.5" ></text>
</g>
<g >
<title>validation::validate_column_family (31 samples, 0.60%)</title><rect x="841.2" y="485" width="7.1" height="15.0" fill="rgb(250,66,22)" rx="2" ry="2" />
<text  x="844.18" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (31 samples, 0.60%)</title><rect x="880.6" y="581" width="7.1" height="15.0" fill="rgb(240,216,9)" rx="2" ry="2" />
<text  x="883.57" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1137.6" y="533" width="0.2" height="15.0" fill="rgb(246,78,48)" rx="2" ry="2" />
<text  x="1140.55" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="549.4" y="405" width="0.4" height="15.0" fill="rgb(217,69,38)" rx="2" ry="2" />
<text  x="552.38" y="415.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (39 samples, 0.76%)</title><rect x="1127.5" y="581" width="8.9" height="15.0" fill="rgb(222,39,51)" rx="2" ry="2" />
<text  x="1130.47" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="157.7" y="517" width="3.7" height="15.0" fill="rgb(220,191,49)" rx="2" ry="2" />
<text  x="160.73" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::statement_restrictions, false&gt;::make&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="82.8" y="373" width="0.3" height="15.0" fill="rgb(228,137,22)" rx="2" ry="2" />
<text  x="85.83" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (31 samples, 0.60%)</title><rect x="1017.1" y="325" width="7.1" height="15.0" fill="rgb(240,137,42)" rx="2" ry="2" />
<text  x="1020.08" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (18 samples, 0.35%)</title><rect x="57.4" y="453" width="4.1" height="15.0" fill="rgb(216,130,24)" rx="2" ry="2" />
<text  x="60.41" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="653.1" y="469" width="0.3" height="15.0" fill="rgb(241,172,12)" rx="2" ry="2" />
<text  x="656.14" y="479.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="108.9" y="293" width="0.3" height="15.0" fill="rgb(219,90,0)" rx="2" ry="2" />
<text  x="111.94" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="880.1" y="469" width="0.2" height="15.0" fill="rgb(236,109,12)" rx="2" ry="2" />
<text  x="883.11" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.0" y="293" width="0.2" height="15.0" fill="rgb(244,199,21)" rx="2" ry="2" />
<text  x="62.01" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="58.3" y="405" width="0.3" height="15.0" fill="rgb(215,206,32)" rx="2" ry="2" />
<text  x="61.33" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="871.6" y="453" width="0.3" height="15.0" fill="rgb(223,27,32)" rx="2" ry="2" />
<text  x="874.64" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (3 samples, 0.06%)</title><rect x="125.9" y="533" width="0.7" height="15.0" fill="rgb(239,223,9)" rx="2" ry="2" />
<text  x="128.89" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.0" y="325" width="0.2" height="15.0" fill="rgb(221,91,1)" rx="2" ry="2" />
<text  x="62.01" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (2 samples, 0.04%)</title><rect x="117.2" y="565" width="0.4" height="15.0" fill="rgb(210,151,49)" rx="2" ry="2" />
<text  x="120.19" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="48.2" y="325" width="1.2" height="15.0" fill="rgb(232,56,22)" rx="2" ry="2" />
<text  x="51.25" y="335.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="716.8" y="581" width="0.2" height="15.0" fill="rgb(236,212,17)" rx="2" ry="2" />
<text  x="719.81" y="591.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="838.4" y="405" width="0.3" height="15.0" fill="rgb(235,82,50)" rx="2" ry="2" />
<text  x="841.43" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (1 samples, 0.02%)</title><rect x="655.7" y="533" width="0.2" height="15.0" fill="rgb(240,118,18)" rx="2" ry="2" />
<text  x="658.66" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="51.9" y="293" width="0.2" height="15.0" fill="rgb(229,118,3)" rx="2" ry="2" />
<text  x="54.91" y="303.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="505.4" y="421" width="0.2" height="15.0" fill="rgb(235,56,3)" rx="2" ry="2" />
<text  x="508.41" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="1130.2" y="341" width="0.5" height="15.0" fill="rgb(210,211,2)" rx="2" ry="2" />
<text  x="1133.22" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="932.8" y="437" width="0.2" height="15.0" fill="rgb(207,91,52)" rx="2" ry="2" />
<text  x="935.79" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (8 samples, 0.16%)</title><rect x="419.1" y="293" width="1.8" height="15.0" fill="rgb(254,183,21)" rx="2" ry="2" />
<text  x="422.06" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="610.3" y="389" width="0.2" height="15.0" fill="rgb(212,22,41)" rx="2" ry="2" />
<text  x="613.31" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.5" y="165" width="0.5" height="15.0" fill="rgb(249,186,48)" rx="2" ry="2" />
<text  x="56.52" y="175.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="524.4" y="293" width="0.5" height="15.0" fill="rgb(216,184,27)" rx="2" ry="2" />
<text  x="527.42" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.6" y="357" width="0.2" height="15.0" fill="rgb(218,119,49)" rx="2" ry="2" />
<text  x="50.56" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="746.8" y="501" width="0.2" height="15.0" fill="rgb(240,32,41)" rx="2" ry="2" />
<text  x="749.81" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="21.0" y="469" width="0.2" height="15.0" fill="rgb(240,226,46)" rx="2" ry="2" />
<text  x="23.99" y="479.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="445.6" y="325" width="0.3" height="15.0" fill="rgb(234,139,4)" rx="2" ry="2" />
<text  x="448.63" y="335.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="106.4" y="533" width="0.3" height="15.0" fill="rgb(244,117,20)" rx="2" ry="2" />
<text  x="109.42" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="572.5" y="501" width="0.7" height="15.0" fill="rgb(226,63,29)" rx="2" ry="2" />
<text  x="575.52" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="670.1" y="565" width="0.2" height="15.0" fill="rgb(235,39,15)" rx="2" ry="2" />
<text  x="673.09" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="726.2" y="581" width="1.1" height="15.0" fill="rgb(241,59,27)" rx="2" ry="2" />
<text  x="729.20" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (61 samples, 1.18%)</title><rect x="294.5" y="341" width="13.9" height="15.0" fill="rgb(206,95,4)" rx="2" ry="2" />
<text  x="297.46" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="580.1" y="453" width="0.9" height="15.0" fill="rgb(252,73,39)" rx="2" ry="2" />
<text  x="583.07" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::memory_usage (1 samples, 0.02%)</title><rect x="17.8" y="645" width="0.2" height="15.0" fill="rgb(217,64,40)" rx="2" ry="2" />
<text  x="20.79" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="40.7" y="453" width="0.2" height="15.0" fill="rgb(205,168,28)" rx="2" ry="2" />
<text  x="43.69" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1093.3" y="437" width="1.2" height="15.0" fill="rgb(224,89,2)" rx="2" ry="2" />
<text  x="1096.35" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="461.2" y="373" width="0.2" height="15.0" fill="rgb(209,140,13)" rx="2" ry="2" />
<text  x="464.20" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.2" y="517" width="0.3" height="15.0" fill="rgb(211,153,50)" rx="2" ry="2" />
<text  x="13.23" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="997.6" y="357" width="0.2" height="15.0" fill="rgb(239,68,50)" rx="2" ry="2" />
<text  x="1000.61" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="785.7" y="389" width="0.5" height="15.0" fill="rgb(216,115,19)" rx="2" ry="2" />
<text  x="788.75" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="495.1" y="389" width="0.2" height="15.0" fill="rgb(223,166,29)" rx="2" ry="2" />
<text  x="498.10" y="399.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="718.6" y="421" width="0.3" height="15.0" fill="rgb(223,115,17)" rx="2" ry="2" />
<text  x="721.64" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_type_statement*, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.2" y="453" width="0.2" height="15.0" fill="rgb(210,144,35)" rx="2" ry="2" />
<text  x="68.20" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::storage_service, true&gt;::make&lt;seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;database&gt;, seastar::internal::either_sharded_or_local&lt;gms::gossiper&gt;, seastar::internal::either_sharded_or_local&lt;db::system_distributed_keyspace&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, service::storage_service_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_manager&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;netw::messaging_service&gt;, seastar::internal::either_sharded_or_local&lt;cdc::generation_service&gt;, seastar::internal::either_sharded_or_local&lt;repair_service&gt;, seastar::internal::either_sharded_or_local&lt;service::raft_group_registry&gt;, seastar::internal::either_sharded_or_local&lt;service::endpoint_lifecycle_notifier&gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="229" width="0.2" height="15.0" fill="rgb(253,13,8)" rx="2" ry="2" />
<text  x="749.81" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="635.5" y="453" width="0.7" height="15.0" fill="rgb(221,134,29)" rx="2" ry="2" />
<text  x="638.50" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.2" y="405" width="0.2" height="15.0" fill="rgb(247,73,43)" rx="2" ry="2" />
<text  x="112.17" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="1120.1" y="229" width="0.3" height="15.0" fill="rgb(224,191,3)" rx="2" ry="2" />
<text  x="1123.14" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="256.2" y="149" width="0.2" height="15.0" fill="rgb(234,156,11)" rx="2" ry="2" />
<text  x="259.22" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (17 samples, 0.33%)</title><rect x="668.7" y="597" width="3.9" height="15.0" fill="rgb(254,40,6)" rx="2" ry="2" />
<text  x="671.71" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.9" y="501" width="0.2" height="15.0" fill="rgb(249,39,21)" rx="2" ry="2" />
<text  x="677.90" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="382.6" y="277" width="0.5" height="15.0" fill="rgb(212,84,38)" rx="2" ry="2" />
<text  x="385.64" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="57.6" y="405" width="0.5" height="15.0" fill="rgb(241,83,5)" rx="2" ry="2" />
<text  x="60.64" y="415.5" ></text>
</g>
<g >
<title>log_heap_options::bucket_of (1 samples, 0.02%)</title><rect x="1137.6" y="181" width="0.2" height="15.0" fill="rgb(212,35,18)" rx="2" ry="2" />
<text  x="1140.55" y="191.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (166 samples, 3.22%)</title><rect x="226.0" y="261" width="38.0" height="15.0" fill="rgb(240,164,17)" rx="2" ry="2" />
<text  x="228.98" y="271.5" >clu..</text>
</g>
<g >
<title>service::client_state::get_timestamp (3 samples, 0.06%)</title><rect x="1110.1" y="517" width="0.7" height="15.0" fill="rgb(228,96,46)" rx="2" ry="2" />
<text  x="1113.07" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="46.2" y="405" width="0.2" height="15.0" fill="rgb(207,112,18)" rx="2" ry="2" />
<text  x="49.19" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="817.1" y="293" width="0.9" height="15.0" fill="rgb(234,94,26)" rx="2" ry="2" />
<text  x="820.13" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="21.5" y="389" width="0.2" height="15.0" fill="rgb(212,116,13)" rx="2" ry="2" />
<text  x="24.45" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="694.4" y="581" width="0.7" height="15.0" fill="rgb(243,154,6)" rx="2" ry="2" />
<text  x="697.36" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (3 samples, 0.06%)</title><rect x="108.9" y="565" width="0.7" height="15.0" fill="rgb(229,34,47)" rx="2" ry="2" />
<text  x="111.94" y="575.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="942.2" y="501" width="0.2" height="15.0" fill="rgb(236,123,28)" rx="2" ry="2" />
<text  x="945.18" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="1136.4" y="581" width="0.5" height="15.0" fill="rgb(223,2,27)" rx="2" ry="2" />
<text  x="1139.41" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.0" y="325" width="0.3" height="15.0" fill="rgb(254,90,35)" rx="2" ry="2" />
<text  x="48.04" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="813.2" y="277" width="2.1" height="15.0" fill="rgb(220,60,31)" rx="2" ry="2" />
<text  x="816.23" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.16%)</title><rect x="1150.4" y="517" width="1.8" height="15.0" fill="rgb(235,37,5)" rx="2" ry="2" />
<text  x="1153.38" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="75.7" y="501" width="0.3" height="15.0" fill="rgb(243,204,16)" rx="2" ry="2" />
<text  x="78.73" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1163.0" y="533" width="0.2" height="15.0" fill="rgb(233,142,2)" rx="2" ry="2" />
<text  x="1165.97" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="1138.2" y="597" width="0.3" height="15.0" fill="rgb(221,79,13)" rx="2" ry="2" />
<text  x="1141.24" y="607.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (2 samples, 0.04%)</title><rect x="82.6" y="597" width="0.5" height="15.0" fill="rgb(253,0,22)" rx="2" ry="2" />
<text  x="85.60" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (2 samples, 0.04%)</title><rect x="73.0" y="453" width="0.4" height="15.0" fill="rgb(252,160,22)" rx="2" ry="2" />
<text  x="75.99" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (757 samples, 14.69%)</title><rect x="171.9" y="501" width="173.4" height="15.0" fill="rgb(206,82,43)" rx="2" ry="2" />
<text  x="174.93" y="511.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="85.4" y="597" width="0.2" height="15.0" fill="rgb(207,86,24)" rx="2" ry="2" />
<text  x="88.35" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (7 samples, 0.14%)</title><rect x="277.3" y="245" width="1.6" height="15.0" fill="rgb(208,146,44)" rx="2" ry="2" />
<text  x="280.29" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_response_handler (1 samples, 0.02%)</title><rect x="1134.6" y="277" width="0.2" height="15.0" fill="rgb(217,149,45)" rx="2" ry="2" />
<text  x="1137.57" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="438.1" y="229" width="2.0" height="15.0" fill="rgb(220,91,31)" rx="2" ry="2" />
<text  x="441.07" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="50.8" y="357" width="0.2" height="15.0" fill="rgb(241,188,49)" rx="2" ry="2" />
<text  x="53.77" y="367.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="82.8" y="581" width="0.3" height="15.0" fill="rgb(243,67,10)" rx="2" ry="2" />
<text  x="85.83" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="857.2" y="485" width="2.1" height="15.0" fill="rgb(208,219,9)" rx="2" ry="2" />
<text  x="860.21" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_service&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="746.8" y="373" width="0.2" height="15.0" fill="rgb(247,159,12)" rx="2" ry="2" />
<text  x="749.81" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1081.7" y="469" width="0.2" height="15.0" fill="rgb(223,144,46)" rx="2" ry="2" />
<text  x="1084.67" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="717.5" y="437" width="0.2" height="15.0" fill="rgb(235,163,33)" rx="2" ry="2" />
<text  x="720.50" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="401.4" y="245" width="0.9" height="15.0" fill="rgb(219,108,53)" rx="2" ry="2" />
<text  x="404.42" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="1073.4" y="341" width="0.5" height="15.0" fill="rgb(237,63,44)" rx="2" ry="2" />
<text  x="1076.42" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (20 samples, 0.39%)</title><rect x="736.3" y="533" width="4.6" height="15.0" fill="rgb(227,189,36)" rx="2" ry="2" />
<text  x="739.28" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1080.7" y="437" width="0.3" height="15.0" fill="rgb(252,87,51)" rx="2" ry="2" />
<text  x="1083.75" y="447.5" ></text>
</g>
<g >
<title>memtable::apply (28 samples, 0.54%)</title><rect x="1119.7" y="357" width="6.4" height="15.0" fill="rgb(217,74,43)" rx="2" ry="2" />
<text  x="1122.69" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (67 samples, 1.30%)</title><rect x="241.1" y="197" width="15.3" height="15.0" fill="rgb(245,192,15)" rx="2" ry="2" />
<text  x="244.10" y="207.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="18.2" y="293" width="0.3" height="15.0" fill="rgb(208,41,51)" rx="2" ry="2" />
<text  x="21.25" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="801.1" y="373" width="0.7" height="15.0" fill="rgb(212,167,22)" rx="2" ry="2" />
<text  x="804.09" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="990.1" y="421" width="0.9" height="15.0" fill="rgb(241,65,50)" rx="2" ry="2" />
<text  x="993.05" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.12%)</title><rect x="561.5" y="389" width="1.4" height="15.0" fill="rgb(243,57,2)" rx="2" ry="2" />
<text  x="564.52" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="844.4" y="405" width="1.1" height="15.0" fill="rgb(247,13,11)" rx="2" ry="2" />
<text  x="847.38" y="415.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%)</title><rect x="43.2" y="437" width="0.2" height="15.0" fill="rgb(228,64,44)" rx="2" ry="2" />
<text  x="46.21" y="447.5" ></text>
</g>
<g >
<title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="82.4" y="709" width="0.2" height="15.0" fill="rgb(209,37,26)" rx="2" ry="2" />
<text  x="85.38" y="719.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="458.2" y="341" width="1.4" height="15.0" fill="rgb(249,110,0)" rx="2" ry="2" />
<text  x="461.23" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (3 samples, 0.06%)</title><rect x="40.9" y="245" width="0.7" height="15.0" fill="rgb(225,96,10)" rx="2" ry="2" />
<text  x="43.92" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (537 samples, 10.42%)</title><rect x="960.7" y="501" width="123.0" height="15.0" fill="rgb(243,79,38)" rx="2" ry="2" />
<text  x="963.73" y="511.5" >service::storag..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="952.3" y="501" width="0.2" height="15.0" fill="rgb(230,157,38)" rx="2" ry="2" />
<text  x="955.26" y="511.5" ></text>
</g>
<g >
<title>sstables::sstable::update_info_for_opened_data (1 samples, 0.02%)</title><rect x="746.6" y="581" width="0.2" height="15.0" fill="rgb(214,102,18)" rx="2" ry="2" />
<text  x="749.58" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="930.3" y="469" width="0.2" height="15.0" fill="rgb(220,175,48)" rx="2" ry="2" />
<text  x="933.27" y="479.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.10%)</title><rect x="1128.8" y="325" width="1.2" height="15.0" fill="rgb(219,89,33)" rx="2" ry="2" />
<text  x="1131.85" y="335.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (38 samples, 0.74%)</title><rect x="264.0" y="261" width="8.7" height="15.0" fill="rgb(224,188,18)" rx="2" ry="2" />
<text  x="267.00" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="198.7" y="309" width="0.3" height="15.0" fill="rgb(240,56,10)" rx="2" ry="2" />
<text  x="201.73" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%)</title><rect x="1061.3" y="341" width="1.1" height="15.0" fill="rgb(236,101,50)" rx="2" ry="2" />
<text  x="1064.28" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_service&gt;::create_local_service&lt;seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;database&gt;, seastar::internal::either_sharded_or_local&lt;gms::gossiper&gt;, seastar::internal::either_sharded_or_local&lt;db::system_distributed_keyspace&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, service::storage_service_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_manager&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;netw::messaging_service&gt;, seastar::internal::either_sharded_or_local&lt;cdc::generation_service&gt;, seastar::internal::either_sharded_or_local&lt;repair_service&gt;, seastar::internal::either_sharded_or_local&lt;service::raft_group_registry&gt;, seastar::internal::either_sharded_or_local&lt;service::endpoint_lifecycle_notifier&gt; &gt; (1 samples, 0.02%)</title><rect x="746.8" y="245" width="0.2" height="15.0" fill="rgb(214,31,54)" rx="2" ry="2" />
<text  x="749.81" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="124.5" y="517" width="0.2" height="15.0" fill="rgb(223,169,38)" rx="2" ry="2" />
<text  x="127.52" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="1148.1" y="549" width="0.7" height="15.0" fill="rgb(233,177,39)" rx="2" ry="2" />
<text  x="1151.09" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1137.6" y="309" width="0.2" height="15.0" fill="rgb(253,83,46)" rx="2" ry="2" />
<text  x="1140.55" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="466.5" y="421" width="0.9" height="15.0" fill="rgb(237,108,51)" rx="2" ry="2" />
<text  x="469.47" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.12%)</title><rect x="298.6" y="261" width="1.4" height="15.0" fill="rgb(225,87,42)" rx="2" ry="2" />
<text  x="301.59" y="271.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="64.5" y="421" width="0.2" height="15.0" fill="rgb(234,193,22)" rx="2" ry="2" />
<text  x="67.51" y="431.5" ></text>
</g>
<g >
<title>__start_context (10 samples, 0.19%)</title><rect x="83.1" y="693" width="2.3" height="15.0" fill="rgb(209,171,25)" rx="2" ry="2" />
<text  x="86.06" y="703.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="81.9" y="677" width="0.2" height="15.0" fill="rgb(231,227,18)" rx="2" ry="2" />
<text  x="84.92" y="687.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%)</title><rect x="487.1" y="373" width="0.9" height="15.0" fill="rgb(213,160,17)" rx="2" ry="2" />
<text  x="490.08" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="659.1" y="517" width="0.2" height="15.0" fill="rgb(211,55,23)" rx="2" ry="2" />
<text  x="662.09" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="464.6" y="357" width="0.3" height="15.0" fill="rgb(218,121,25)" rx="2" ry="2" />
<text  x="467.64" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="52.6" y="181" width="0.2" height="15.0" fill="rgb(240,214,47)" rx="2" ry="2" />
<text  x="55.60" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="55.1" y="277" width="0.5" height="15.0" fill="rgb(254,6,18)" rx="2" ry="2" />
<text  x="58.12" y="287.5" ></text>
</g>
<g >
<title>clustering_key_prefix::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="884.0" y="421" width="0.2" height="15.0" fill="rgb(245,93,0)" rx="2" ry="2" />
<text  x="887.01" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (19 samples, 0.37%)</title><rect x="933.2" y="469" width="4.4" height="15.0" fill="rgb(214,220,35)" rx="2" ry="2" />
<text  x="936.25" y="479.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;sstables::commitlog_interval, 131072ul&gt;::chunked_vector (1 samples, 0.02%)</title><rect x="81.9" y="389" width="0.2" height="15.0" fill="rgb(232,40,46)" rx="2" ry="2" />
<text  x="84.92" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (31 samples, 0.60%)</title><rect x="536.1" y="341" width="7.1" height="15.0" fill="rgb(247,134,32)" rx="2" ry="2" />
<text  x="539.10" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.08%)</title><rect x="262.6" y="197" width="0.9" height="15.0" fill="rgb(205,197,47)" rx="2" ry="2" />
<text  x="265.63" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="275.2" y="229" width="0.3" height="15.0" fill="rgb(206,107,6)" rx="2" ry="2" />
<text  x="278.23" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="727.8" y="565" width="0.2" height="15.0" fill="rgb(208,58,17)" rx="2" ry="2" />
<text  x="730.80" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="300.0" y="293" width="0.4" height="15.0" fill="rgb(236,60,37)" rx="2" ry="2" />
<text  x="302.96" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="357.0" y="357" width="0.7" height="15.0" fill="rgb(213,84,19)" rx="2" ry="2" />
<text  x="359.99" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="469.2" y="501" width="0.2" height="15.0" fill="rgb(222,67,11)" rx="2" ry="2" />
<text  x="472.22" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="201.0" y="325" width="0.5" height="15.0" fill="rgb(250,15,19)" rx="2" ry="2" />
<text  x="204.02" y="335.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="18.9" y="549" width="0.3" height="15.0" fill="rgb(232,80,4)" rx="2" ry="2" />
<text  x="21.93" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="937.8" y="469" width="0.7" height="15.0" fill="rgb(241,40,46)" rx="2" ry="2" />
<text  x="940.83" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="737.2" y="517" width="0.2" height="15.0" fill="rgb(238,161,50)" rx="2" ry="2" />
<text  x="740.19" y="527.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="828.1" y="341" width="1.2" height="15.0" fill="rgb(244,186,43)" rx="2" ry="2" />
<text  x="831.12" y="351.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="108.9" y="485" width="0.3" height="15.0" fill="rgb(242,181,10)" rx="2" ry="2" />
<text  x="111.94" y="495.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (2 samples, 0.04%)</title><rect x="557.4" y="437" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="560.40" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (80 samples, 1.55%)</title><rect x="186.6" y="405" width="18.3" height="15.0" fill="rgb(236,136,47)" rx="2" ry="2" />
<text  x="189.59" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%)</title><rect x="1021.0" y="245" width="0.4" height="15.0" fill="rgb(238,221,19)" rx="2" ry="2" />
<text  x="1023.97" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="1162.1" y="549" width="0.4" height="15.0" fill="rgb(209,115,7)" rx="2" ry="2" />
<text  x="1165.06" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="107.8" y="581" width="0.2" height="15.0" fill="rgb(221,41,14)" rx="2" ry="2" />
<text  x="110.80" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::register_metrics (1 samples, 0.02%)</title><rect x="746.8" y="197" width="0.2" height="15.0" fill="rgb(207,85,11)" rx="2" ry="2" />
<text  x="749.81" y="207.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::deletable_row_view&gt;::doit&lt;seastar::simple_memory_input_stream, utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt; (2 samples, 0.04%)</title><rect x="1123.6" y="293" width="0.4" height="15.0" fill="rgb(226,17,5)" rx="2" ry="2" />
<text  x="1126.58" y="303.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="740.6" y="501" width="0.3" height="15.0" fill="rgb(246,168,2)" rx="2" ry="2" />
<text  x="743.63" y="511.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="53.5" y="325" width="0.5" height="15.0" fill="rgb(211,72,8)" rx="2" ry="2" />
<text  x="56.52" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="59.9" y="357" width="0.3" height="15.0" fill="rgb(220,135,15)" rx="2" ry="2" />
<text  x="62.93" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (4 samples, 0.08%)</title><rect x="992.8" y="373" width="0.9" height="15.0" fill="rgb(244,64,40)" rx="2" ry="2" />
<text  x="995.80" y="383.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (4 samples, 0.08%)</title><rect x="360.7" y="325" width="0.9" height="15.0" fill="rgb(233,49,35)" rx="2" ry="2" />
<text  x="363.66" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="664.1" y="565" width="0.3" height="15.0" fill="rgb(214,152,41)" rx="2" ry="2" />
<text  x="667.13" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (5 samples, 0.10%)</title><rect x="540.0" y="293" width="1.1" height="15.0" fill="rgb(236,98,45)" rx="2" ry="2" />
<text  x="542.99" y="303.5" ></text>
</g>
<g >
<title>database::find_keyspace (4 samples, 0.08%)</title><rect x="974.2" y="453" width="1.0" height="15.0" fill="rgb(248,74,27)" rx="2" ry="2" />
<text  x="977.25" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="885.8" y="373" width="0.7" height="15.0" fill="rgb(206,141,13)" rx="2" ry="2" />
<text  x="888.84" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="417.9" y="293" width="0.9" height="15.0" fill="rgb(241,125,34)" rx="2" ry="2" />
<text  x="420.92" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="40.2" y="341" width="0.3" height="15.0" fill="rgb(207,40,3)" rx="2" ry="2" />
<text  x="43.23" y="351.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="304.8" y="309" width="0.4" height="15.0" fill="rgb(234,126,49)" rx="2" ry="2" />
<text  x="307.77" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%)</title><rect x="759.0" y="421" width="0.2" height="15.0" fill="rgb(240,91,54)" rx="2" ry="2" />
<text  x="761.95" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (5 samples, 0.10%)</title><rect x="882.4" y="469" width="1.1" height="15.0" fill="rgb(227,7,35)" rx="2" ry="2" />
<text  x="885.40" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="96.8" y="581" width="0.9" height="15.0" fill="rgb(250,227,20)" rx="2" ry="2" />
<text  x="99.81" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.17%)</title><rect x="921.1" y="453" width="2.1" height="15.0" fill="rgb(230,97,21)" rx="2" ry="2" />
<text  x="924.11" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="42.3" y="373" width="0.2" height="15.0" fill="rgb(237,6,44)" rx="2" ry="2" />
<text  x="45.29" y="383.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%)</title><rect x="950.7" y="437" width="0.2" height="15.0" fill="rgb(241,35,25)" rx="2" ry="2" />
<text  x="953.66" y="447.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%)</title><rect x="128.9" y="501" width="0.9" height="15.0" fill="rgb(219,28,11)" rx="2" ry="2" />
<text  x="131.87" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%)</title><rect x="44.1" y="437" width="0.3" height="15.0" fill="rgb(240,29,54)" rx="2" ry="2" />
<text  x="47.13" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="52.6" y="197" width="0.2" height="15.0" fill="rgb(233,212,12)" rx="2" ry="2" />
<text  x="55.60" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="208.6" y="341" width="0.2" height="15.0" fill="rgb(228,213,39)" rx="2" ry="2" />
<text  x="211.58" y="351.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (3 samples, 0.06%)</title><rect x="1138.5" y="597" width="0.7" height="15.0" fill="rgb(243,52,19)" rx="2" ry="2" />
<text  x="1141.47" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%)</title><rect x="1119.5" y="549" width="8.0" height="15.0" fill="rgb(215,9,19)" rx="2" ry="2" />
<text  x="1122.46" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="272.7" y="261" width="0.2" height="15.0" fill="rgb(219,206,22)" rx="2" ry="2" />
<text  x="275.71" y="271.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="337.8" y="373" width="2.0" height="15.0" fill="rgb(228,178,47)" rx="2" ry="2" />
<text  x="340.75" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="700.5" y="565" width="0.5" height="15.0" fill="rgb(214,189,42)" rx="2" ry="2" />
<text  x="703.55" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="303.9" y="277" width="0.4" height="15.0" fill="rgb(225,92,37)" rx="2" ry="2" />
<text  x="306.85" y="287.5" ></text>
</g>
<g >
<title>dirty_memory_manager::account_potentially_cleaned_up_memory (1 samples, 0.02%)</title><rect x="83.1" y="533" width="0.2" height="15.0" fill="rgb(233,14,27)" rx="2" ry="2" />
<text  x="86.06" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="885.2" y="341" width="0.2" height="15.0" fill="rgb(210,73,18)" rx="2" ry="2" />
<text  x="888.15" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1139.2" y="597" width="0.2" height="15.0" fill="rgb(208,1,50)" rx="2" ry="2" />
<text  x="1142.15" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="52.6" y="341" width="0.2" height="15.0" fill="rgb(220,195,8)" rx="2" ry="2" />
<text  x="55.60" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="72.5" y="453" width="0.3" height="15.0" fill="rgb(212,99,44)" rx="2" ry="2" />
<text  x="75.53" y="463.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="109.6" y="341" width="0.3" height="15.0" fill="rgb(242,56,9)" rx="2" ry="2" />
<text  x="112.63" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1036.5" y="341" width="0.3" height="15.0" fill="rgb(249,49,40)" rx="2" ry="2" />
<text  x="1039.55" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="800.4" y="389" width="0.5" height="15.0" fill="rgb(251,105,7)" rx="2" ry="2" />
<text  x="803.41" y="399.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%)</title><rect x="124.1" y="501" width="0.4" height="15.0" fill="rgb(230,83,41)" rx="2" ry="2" />
<text  x="127.06" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%)</title><rect x="463.0" y="373" width="0.7" height="15.0" fill="rgb(242,45,44)" rx="2" ry="2" />
<text  x="466.04" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="890.6" y="549" width="0.3" height="15.0" fill="rgb(251,144,34)" rx="2" ry="2" />
<text  x="893.65" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="595.0" y="405" width="0.4" height="15.0" fill="rgb(234,142,45)" rx="2" ry="2" />
<text  x="597.96" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%)</title><rect x="18.9" y="485" width="0.3" height="15.0" fill="rgb(254,31,52)" rx="2" ry="2" />
<text  x="21.93" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="565.4" y="341" width="0.7" height="15.0" fill="rgb(226,14,27)" rx="2" ry="2" />
<text  x="568.42" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1011.8" y="293" width="0.2" height="15.0" fill="rgb(219,30,39)" rx="2" ry="2" />
<text  x="1014.81" y="303.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="86.0" y="693" width="0.3" height="15.0" fill="rgb(219,157,30)" rx="2" ry="2" />
<text  x="89.04" y="703.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (11 samples, 0.21%)</title><rect x="991.4" y="405" width="2.5" height="15.0" fill="rgb(207,101,29)" rx="2" ry="2" />
<text  x="994.42" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="493.3" y="373" width="0.2" height="15.0" fill="rgb(217,96,11)" rx="2" ry="2" />
<text  x="496.27" y="383.5" ></text>
</g>
<g >
<title>__mmap (1 samples, 0.02%)</title><rect x="1168.0" y="725" width="0.2" height="15.0" fill="rgb(221,183,30)" rx="2" ry="2" />
<text  x="1171.01" y="735.5" ></text>
</g>
</g>
</svg>
