<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1014.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="997" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="997" > </text>
<g id="frames">
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="683.4" y="757" width="0.2" height="15.0" fill="rgb(235,172,40)" rx="2" ry="2" />
<text  x="686.37" y="767.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="289.5" y="485" width="0.6" height="15.0" fill="rgb(229,214,8)" rx="2" ry="2" />
<text  x="292.45" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="1119.9" y="517" width="0.6" height="15.0" fill="rgb(221,225,51)" rx="2" ry="2" />
<text  x="1122.86" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (2 samples, 0.04%)</title><rect x="19.7" y="709" width="0.4" height="15.0" fill="rgb(242,200,4)" rx="2" ry="2" />
<text  x="22.70" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="53.5" y="661" width="0.2" height="15.0" fill="rgb(238,118,44)" rx="2" ry="2" />
<text  x="56.45" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="202.1" y="565" width="0.2" height="15.0" fill="rgb(205,143,26)" rx="2" ry="2" />
<text  x="205.11" y="575.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="880.1" y="613" width="0.2" height="15.0" fill="rgb(221,144,9)" rx="2" ry="2" />
<text  x="883.11" y="623.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;partition, 131072ul&gt;::chunked_vector (1 samples, 0.02%)</title><rect x="101.8" y="533" width="0.2" height="15.0" fill="rgb(254,170,24)" rx="2" ry="2" />
<text  x="104.75" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="980.2" y="613" width="1.4" height="15.0" fill="rgb(215,49,38)" rx="2" ry="2" />
<text  x="983.25" y="623.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="1124.5" y="549" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1127.49" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; &gt;, std::allocator&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="17.5" y="629" width="0.2" height="15.0" fill="rgb(248,33,28)" rx="2" ry="2" />
<text  x="20.50" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (512 samples, 9.57%)</title><rect x="462.8" y="693" width="112.9" height="15.0" fill="rgb(232,95,15)" rx="2" ry="2" />
<text  x="465.81" y="703.5" >std::function..</text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="571.5" y="565" width="0.7" height="15.0" fill="rgb(230,97,52)" rx="2" ry="2" />
<text  x="574.55" y="575.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (2 samples, 0.04%)</title><rect x="1080.8" y="613" width="0.5" height="15.0" fill="rgb(242,27,8)" rx="2" ry="2" />
<text  x="1083.82" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.3" y="645" width="0.2" height="15.0" fill="rgb(220,52,8)" rx="2" ry="2" />
<text  x="20.28" y="655.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%)</title><rect x="1119.2" y="453" width="0.2" height="15.0" fill="rgb(230,139,42)" rx="2" ry="2" />
<text  x="1122.20" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="22.4" y="501" width="0.2" height="15.0" fill="rgb(217,209,18)" rx="2" ry="2" />
<text  x="25.35" y="511.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="1122.7" y="453" width="0.2" height="15.0" fill="rgb(220,162,35)" rx="2" ry="2" />
<text  x="1125.73" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="594.7" y="613" width="0.2" height="15.0" fill="rgb(228,204,49)" rx="2" ry="2" />
<text  x="597.71" y="623.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.1" y="533" width="0.2" height="15.0" fill="rgb(227,67,51)" rx="2" ry="2" />
<text  x="881.13" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%)</title><rect x="60.9" y="581" width="0.3" height="15.0" fill="rgb(245,110,0)" rx="2" ry="2" />
<text  x="63.95" y="591.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="916.3" y="645" width="0.2" height="15.0" fill="rgb(250,225,48)" rx="2" ry="2" />
<text  x="919.28" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="220.2" y="517" width="0.2" height="15.0" fill="rgb(208,119,1)" rx="2" ry="2" />
<text  x="223.19" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%)</title><rect x="743.8" y="613" width="0.7" height="15.0" fill="rgb(253,148,13)" rx="2" ry="2" />
<text  x="746.81" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="582.4" y="645" width="0.4" height="15.0" fill="rgb(210,92,23)" rx="2" ry="2" />
<text  x="585.36" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.17%)</title><rect x="952.0" y="677" width="2.0" height="15.0" fill="rgb(218,105,19)" rx="2" ry="2" />
<text  x="955.01" y="687.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="814.4" y="389" width="0.2" height="15.0" fill="rgb(243,216,40)" rx="2" ry="2" />
<text  x="817.39" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.3" y="725" width="0.2" height="15.0" fill="rgb(249,153,47)" rx="2" ry="2" />
<text  x="20.28" y="735.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (2 samples, 0.04%)</title><rect x="18.6" y="805" width="0.4" height="15.0" fill="rgb(228,14,54)" rx="2" ry="2" />
<text  x="21.60" y="815.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1073.1" y="581" width="0.2" height="15.0" fill="rgb(227,130,35)" rx="2" ry="2" />
<text  x="1076.10" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="216.0" y="517" width="0.2" height="15.0" fill="rgb(250,103,14)" rx="2" ry="2" />
<text  x="219.00" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (6 samples, 0.11%)</title><rect x="535.2" y="581" width="1.3" height="15.0" fill="rgb(211,59,46)" rx="2" ry="2" />
<text  x="538.16" y="591.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (14 samples, 0.26%)</title><rect x="903.1" y="613" width="3.0" height="15.0" fill="rgb(212,165,51)" rx="2" ry="2" />
<text  x="906.05" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="77.9" y="773" width="0.3" height="15.0" fill="rgb(215,109,14)" rx="2" ry="2" />
<text  x="80.93" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="821.9" y="613" width="0.4" height="15.0" fill="rgb(237,121,28)" rx="2" ry="2" />
<text  x="824.88" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="632.2" y="693" width="0.2" height="15.0" fill="rgb(232,160,23)" rx="2" ry="2" />
<text  x="635.20" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="851.0" y="693" width="0.4" height="15.0" fill="rgb(246,3,2)" rx="2" ry="2" />
<text  x="854.00" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="1167.1" y="757" width="0.2" height="15.0" fill="rgb(227,165,30)" rx="2" ry="2" />
<text  x="1170.06" y="767.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="34.9" y="437" width="0.2" height="15.0" fill="rgb(223,5,27)" rx="2" ry="2" />
<text  x="37.92" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.09%)</title><rect x="675.0" y="709" width="1.1" height="15.0" fill="rgb(225,114,16)" rx="2" ry="2" />
<text  x="677.99" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1019.3" y="453" width="0.4" height="15.0" fill="rgb(243,181,9)" rx="2" ry="2" />
<text  x="1022.29" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="476.9" y="581" width="0.2" height="15.0" fill="rgb(239,179,12)" rx="2" ry="2" />
<text  x="479.93" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (48 samples, 0.90%)</title><rect x="56.1" y="741" width="10.6" height="15.0" fill="rgb(247,171,33)" rx="2" ry="2" />
<text  x="59.10" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="48.8" y="581" width="0.2" height="15.0" fill="rgb(233,76,41)" rx="2" ry="2" />
<text  x="51.82" y="591.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (5 samples, 0.09%)</title><rect x="994.8" y="581" width="1.1" height="15.0" fill="rgb(251,129,46)" rx="2" ry="2" />
<text  x="997.80" y="591.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (310 samples, 5.79%)</title><rect x="493.9" y="645" width="68.4" height="15.0" fill="rgb(219,49,2)" rx="2" ry="2" />
<text  x="496.91" y="655.5" >memtabl..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="817.7" y="549" width="0.2" height="15.0" fill="rgb(211,53,50)" rx="2" ry="2" />
<text  x="820.69" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (4 samples, 0.07%)</title><rect x="984.2" y="565" width="0.9" height="15.0" fill="rgb(223,5,41)" rx="2" ry="2" />
<text  x="987.22" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1034.3" y="581" width="0.2" height="15.0" fill="rgb(249,72,10)" rx="2" ry="2" />
<text  x="1037.28" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.07%)</title><rect x="201.4" y="613" width="95.3" height="15.0" fill="rgb(226,172,24)" rx="2" ry="2" />
<text  x="204.45" y="623.5" >partition_s..</text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="39.1" y="629" width="0.2" height="15.0" fill="rgb(249,115,33)" rx="2" ry="2" />
<text  x="42.11" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="809.1" y="421" width="0.4" height="15.0" fill="rgb(220,206,48)" rx="2" ry="2" />
<text  x="812.09" y="431.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="325" width="0.2" height="15.0" fill="rgb(213,61,37)" rx="2" ry="2" />
<text  x="104.97" y="335.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="72.2" y="757" width="0.4" height="15.0" fill="rgb(220,108,9)" rx="2" ry="2" />
<text  x="75.20" y="767.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="40.0" y="581" width="0.2" height="15.0" fill="rgb(254,83,33)" rx="2" ry="2" />
<text  x="43.00" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="22.1" y="469" width="0.3" height="15.0" fill="rgb(242,159,43)" rx="2" ry="2" />
<text  x="25.13" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%)</title><rect x="874.6" y="629" width="0.4" height="15.0" fill="rgb(213,170,5)" rx="2" ry="2" />
<text  x="877.60" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="948.5" y="709" width="0.2" height="15.0" fill="rgb(205,63,44)" rx="2" ry="2" />
<text  x="951.49" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="48.8" y="469" width="0.2" height="15.0" fill="rgb(210,27,33)" rx="2" ry="2" />
<text  x="51.82" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="57.9" y="629" width="0.2" height="15.0" fill="rgb(251,226,1)" rx="2" ry="2" />
<text  x="60.86" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.9" y="517" width="0.2" height="15.0" fill="rgb(246,135,30)" rx="2" ry="2" />
<text  x="52.92" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="40.0" y="469" width="0.2" height="15.0" fill="rgb(238,61,39)" rx="2" ry="2" />
<text  x="43.00" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="640.4" y="741" width="0.2" height="15.0" fill="rgb(206,85,30)" rx="2" ry="2" />
<text  x="643.36" y="751.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="30.7" y="533" width="0.3" height="15.0" fill="rgb(210,172,37)" rx="2" ry="2" />
<text  x="33.73" y="543.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1125.2" y="565" width="0.2" height="15.0" fill="rgb(244,160,24)" rx="2" ry="2" />
<text  x="1128.16" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="96.5" y="741" width="0.2" height="15.0" fill="rgb(205,177,17)" rx="2" ry="2" />
<text  x="99.46" y="751.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (1 samples, 0.02%)</title><rect x="1134.4" y="501" width="0.2" height="15.0" fill="rgb(251,72,36)" rx="2" ry="2" />
<text  x="1137.42" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.09%)</title><rect x="1050.6" y="565" width="1.1" height="15.0" fill="rgb(227,68,11)" rx="2" ry="2" />
<text  x="1053.61" y="575.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (64 samples, 1.20%)</title><rect x="801.4" y="549" width="14.1" height="15.0" fill="rgb(211,202,26)" rx="2" ry="2" />
<text  x="804.37" y="559.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="64.3" y="709" width="0.2" height="15.0" fill="rgb(211,178,29)" rx="2" ry="2" />
<text  x="67.26" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (7 samples, 0.13%)</title><rect x="60.9" y="661" width="1.6" height="15.0" fill="rgb(214,0,27)" rx="2" ry="2" />
<text  x="63.95" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="330.3" y="693" width="0.2" height="15.0" fill="rgb(233,29,1)" rx="2" ry="2" />
<text  x="333.25" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="277.3" y="437" width="0.2" height="15.0" fill="rgb(246,97,26)" rx="2" ry="2" />
<text  x="280.32" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.07%)</title><rect x="756.2" y="677" width="0.8" height="15.0" fill="rgb(219,122,19)" rx="2" ry="2" />
<text  x="759.16" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="34.7" y="469" width="0.7" height="15.0" fill="rgb(231,228,16)" rx="2" ry="2" />
<text  x="37.70" y="479.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%)</title><rect x="60.3" y="613" width="0.2" height="15.0" fill="rgb(215,9,17)" rx="2" ry="2" />
<text  x="63.29" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (22 samples, 0.41%)</title><rect x="59.2" y="709" width="4.8" height="15.0" fill="rgb(252,170,52)" rx="2" ry="2" />
<text  x="62.19" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (2 samples, 0.04%)</title><rect x="23.9" y="549" width="0.4" height="15.0" fill="rgb(214,67,28)" rx="2" ry="2" />
<text  x="26.90" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.9" y="661" width="0.4" height="15.0" fill="rgb(233,72,13)" rx="2" ry="2" />
<text  x="54.91" y="671.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="77.1" y="629" width="0.2" height="15.0" fill="rgb(229,38,15)" rx="2" ry="2" />
<text  x="80.05" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="363.1" y="501" width="0.2" height="15.0" fill="rgb(241,191,25)" rx="2" ry="2" />
<text  x="366.12" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="72.2" y="661" width="0.2" height="15.0" fill="rgb(211,67,14)" rx="2" ry="2" />
<text  x="75.20" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (40 samples, 0.75%)</title><rect x="871.5" y="773" width="8.8" height="15.0" fill="rgb(213,145,39)" rx="2" ry="2" />
<text  x="874.51" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="851.2" y="677" width="0.2" height="15.0" fill="rgb(233,108,24)" rx="2" ry="2" />
<text  x="854.22" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (5 samples, 0.09%)</title><rect x="871.5" y="709" width="1.1" height="15.0" fill="rgb(214,62,1)" rx="2" ry="2" />
<text  x="874.51" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="815.9" y="549" width="0.2" height="15.0" fill="rgb(228,220,36)" rx="2" ry="2" />
<text  x="818.93" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="799.6" y="533" width="0.4" height="15.0" fill="rgb(244,38,24)" rx="2" ry="2" />
<text  x="802.61" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (5 samples, 0.09%)</title><rect x="729.7" y="805" width="1.1" height="15.0" fill="rgb(234,38,8)" rx="2" ry="2" />
<text  x="732.69" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="72.6" y="789" width="0.3" height="15.0" fill="rgb(229,102,41)" rx="2" ry="2" />
<text  x="75.64" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="71.1" y="597" width="0.2" height="15.0" fill="rgb(231,182,50)" rx="2" ry="2" />
<text  x="74.10" y="607.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%)</title><rect x="103.1" y="757" width="0.4" height="15.0" fill="rgb(247,213,30)" rx="2" ry="2" />
<text  x="106.08" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="36.9" y="581" width="0.7" height="15.0" fill="rgb(212,173,43)" rx="2" ry="2" />
<text  x="39.91" y="591.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="864.2" y="741" width="1.8" height="15.0" fill="rgb(231,54,27)" rx="2" ry="2" />
<text  x="867.23" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="52.3" y="661" width="0.3" height="15.0" fill="rgb(218,165,28)" rx="2" ry="2" />
<text  x="55.35" y="671.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="75.1" y="757" width="0.2" height="15.0" fill="rgb(206,32,52)" rx="2" ry="2" />
<text  x="78.07" y="767.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (3 samples, 0.06%)</title><rect x="50.8" y="629" width="0.7" height="15.0" fill="rgb(218,184,28)" rx="2" ry="2" />
<text  x="53.80" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="690.2" y="773" width="0.2" height="15.0" fill="rgb(219,205,45)" rx="2" ry="2" />
<text  x="693.21" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="72.0" y="645" width="0.2" height="15.0" fill="rgb(251,110,39)" rx="2" ry="2" />
<text  x="74.98" y="655.5" ></text>
</g>
<g >
<title>ser::row_view::columns (2 samples, 0.04%)</title><rect x="1123.4" y="533" width="0.4" height="15.0" fill="rgb(237,107,18)" rx="2" ry="2" />
<text  x="1126.39" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="49.3" y="613" width="0.2" height="15.0" fill="rgb(235,227,43)" rx="2" ry="2" />
<text  x="52.26" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.04%)</title><rect x="1189.6" y="901" width="0.4" height="15.0" fill="rgb(245,95,54)" rx="2" ry="2" />
<text  x="1192.56" y="911.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="46.2" y="501" width="0.6" height="15.0" fill="rgb(240,44,39)" rx="2" ry="2" />
<text  x="49.17" y="511.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="18.6" y="789" width="0.2" height="15.0" fill="rgb(236,60,40)" rx="2" ry="2" />
<text  x="21.60" y="799.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%)</title><rect x="1061.2" y="581" width="0.4" height="15.0" fill="rgb(208,28,54)" rx="2" ry="2" />
<text  x="1064.19" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (3 samples, 0.06%)</title><rect x="911.2" y="645" width="0.7" height="15.0" fill="rgb(206,204,9)" rx="2" ry="2" />
<text  x="914.21" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (2 samples, 0.04%)</title><rect x="810.9" y="469" width="0.4" height="15.0" fill="rgb(216,175,48)" rx="2" ry="2" />
<text  x="813.86" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (42 samples, 0.79%)</title><rect x="1171.3" y="933" width="9.2" height="15.0" fill="rgb(238,13,22)" rx="2" ry="2" />
<text  x="1174.25" y="943.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="43.5" y="517" width="0.7" height="15.0" fill="rgb(220,103,51)" rx="2" ry="2" />
<text  x="46.53" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="818.6" y="565" width="0.2" height="15.0" fill="rgb(209,27,7)" rx="2" ry="2" />
<text  x="821.58" y="575.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.13%)</title><rect x="401.9" y="453" width="1.6" height="15.0" fill="rgb(207,25,37)" rx="2" ry="2" />
<text  x="404.94" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_service_level_statement, std::default_delete&lt;cql3::statements::drop_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="53.7" y="677" width="0.2" height="15.0" fill="rgb(215,168,16)" rx="2" ry="2" />
<text  x="56.67" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="639.0" y="725" width="0.3" height="15.0" fill="rgb(228,42,35)" rx="2" ry="2" />
<text  x="642.04" y="735.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="319.2" y="613" width="0.2" height="15.0" fill="rgb(237,82,11)" rx="2" ry="2" />
<text  x="322.23" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.11%)</title><rect x="75.5" y="725" width="1.3" height="15.0" fill="rgb(209,179,5)" rx="2" ry="2" />
<text  x="78.51" y="735.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="837.1" y="693" width="0.2" height="15.0" fill="rgb(237,127,16)" rx="2" ry="2" />
<text  x="840.10" y="703.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (1 samples, 0.02%)</title><rect x="1023.9" y="517" width="0.2" height="15.0" fill="rgb(221,129,24)" rx="2" ry="2" />
<text  x="1026.92" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1087.2" y="677" width="0.2" height="15.0" fill="rgb(252,132,35)" rx="2" ry="2" />
<text  x="1090.22" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1039.6" y="597" width="0.2" height="15.0" fill="rgb(247,111,7)" rx="2" ry="2" />
<text  x="1042.58" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="712.7" y="757" width="0.2" height="15.0" fill="rgb(250,137,4)" rx="2" ry="2" />
<text  x="715.71" y="767.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (12 samples, 0.22%)</title><rect x="629.8" y="709" width="2.6" height="15.0" fill="rgb(236,182,34)" rx="2" ry="2" />
<text  x="632.78" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="801.4" y="533" width="0.2" height="15.0" fill="rgb(237,228,0)" rx="2" ry="2" />
<text  x="804.37" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="668.4" y="741" width="0.2" height="15.0" fill="rgb(236,225,38)" rx="2" ry="2" />
<text  x="671.37" y="751.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (34 samples, 0.64%)</title><rect x="578.2" y="709" width="7.5" height="15.0" fill="rgb(240,114,53)" rx="2" ry="2" />
<text  x="581.16" y="719.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="872.4" y="645" width="0.2" height="15.0" fill="rgb(222,8,19)" rx="2" ry="2" />
<text  x="875.39" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="1016.0" y="469" width="0.6" height="15.0" fill="rgb(212,47,28)" rx="2" ry="2" />
<text  x="1018.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="358.7" y="485" width="0.4" height="15.0" fill="rgb(207,32,24)" rx="2" ry="2" />
<text  x="361.71" y="495.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1035.6" y="581" width="0.2" height="15.0" fill="rgb(228,61,49)" rx="2" ry="2" />
<text  x="1038.61" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="819.0" y="565" width="0.2" height="15.0" fill="rgb(217,190,33)" rx="2" ry="2" />
<text  x="822.02" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.07%)</title><rect x="312.8" y="629" width="0.9" height="15.0" fill="rgb(234,213,27)" rx="2" ry="2" />
<text  x="315.83" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (5 samples, 0.09%)</title><rect x="101.3" y="741" width="1.1" height="15.0" fill="rgb(228,149,34)" rx="2" ry="2" />
<text  x="104.31" y="751.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="242.0" y="389" width="0.3" height="15.0" fill="rgb(242,81,2)" rx="2" ry="2" />
<text  x="245.03" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.1" y="501" width="0.2" height="15.0" fill="rgb(217,121,27)" rx="2" ry="2" />
<text  x="881.13" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (4 samples, 0.07%)</title><rect x="123.4" y="741" width="0.9" height="15.0" fill="rgb(228,171,36)" rx="2" ry="2" />
<text  x="126.37" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="37.8" y="597" width="0.4" height="15.0" fill="rgb(248,146,42)" rx="2" ry="2" />
<text  x="40.79" y="607.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="1134.2" y="389" width="0.2" height="15.0" fill="rgb(234,56,42)" rx="2" ry="2" />
<text  x="1137.20" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7" y="581" width="0.2" height="15.0" fill="rgb(253,149,15)" rx="2" ry="2" />
<text  x="50.72" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="763.7" y="709" width="0.2" height="15.0" fill="rgb(242,8,48)" rx="2" ry="2" />
<text  x="766.66" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="483.1" y="597" width="0.2" height="15.0" fill="rgb(210,225,30)" rx="2" ry="2" />
<text  x="486.10" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1168.2" y="757" width="0.2" height="15.0" fill="rgb(217,81,4)" rx="2" ry="2" />
<text  x="1171.16" y="767.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="678.5" y="773" width="0.5" height="15.0" fill="rgb(247,21,7)" rx="2" ry="2" />
<text  x="681.52" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="706.3" y="789" width="0.2" height="15.0" fill="rgb(243,12,3)" rx="2" ry="2" />
<text  x="709.31" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="75.3" y="741" width="1.5" height="15.0" fill="rgb(212,92,27)" rx="2" ry="2" />
<text  x="78.29" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1024.1" y="517" width="0.5" height="15.0" fill="rgb(207,106,52)" rx="2" ry="2" />
<text  x="1027.14" y="527.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="1104.4" y="725" width="1.1" height="15.0" fill="rgb(249,206,2)" rx="2" ry="2" />
<text  x="1107.42" y="735.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="444.5" y="485" width="0.2" height="15.0" fill="rgb(237,79,42)" rx="2" ry="2" />
<text  x="447.50" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (6 samples, 0.11%)</title><rect x="607.3" y="677" width="1.3" height="15.0" fill="rgb(233,95,0)" rx="2" ry="2" />
<text  x="610.28" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="80.6" y="821" width="0.2" height="15.0" fill="rgb(226,88,35)" rx="2" ry="2" />
<text  x="83.58" y="831.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="438.8" y="533" width="0.6" height="15.0" fill="rgb(241,23,38)" rx="2" ry="2" />
<text  x="441.77" y="543.5" ></text>
</g>
<g >
<title>schema::clustering_key_columns (1 samples, 0.02%)</title><rect x="64.5" y="709" width="0.2" height="15.0" fill="rgb(212,186,12)" rx="2" ry="2" />
<text  x="67.48" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1034.9" y="565" width="0.5" height="15.0" fill="rgb(228,121,41)" rx="2" ry="2" />
<text  x="1037.95" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.3" y="549" width="0.3" height="15.0" fill="rgb(216,14,4)" rx="2" ry="2" />
<text  x="42.33" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_proxy&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.5" y="789" width="0.2" height="15.0" fill="rgb(209,158,31)" rx="2" ry="2" />
<text  x="20.50" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="619.6" y="725" width="0.7" height="15.0" fill="rgb(215,60,28)" rx="2" ry="2" />
<text  x="622.63" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="17.3" y="789" width="0.2" height="15.0" fill="rgb(234,108,18)" rx="2" ry="2" />
<text  x="20.28" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="139.7" y="693" width="0.2" height="15.0" fill="rgb(236,146,48)" rx="2" ry="2" />
<text  x="142.69" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%)</title><rect x="198.4" y="533" width="0.4" height="15.0" fill="rgb(214,218,29)" rx="2" ry="2" />
<text  x="201.36" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="842.0" y="661" width="0.2" height="15.0" fill="rgb(213,138,14)" rx="2" ry="2" />
<text  x="844.96" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="576.8" y="709" width="0.3" height="15.0" fill="rgb(205,117,27)" rx="2" ry="2" />
<text  x="579.84" y="719.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%)</title><rect x="17.7" y="853" width="0.2" height="15.0" fill="rgb(245,48,7)" rx="2" ry="2" />
<text  x="20.72" y="863.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="290.8" y="469" width="0.2" height="15.0" fill="rgb(218,129,39)" rx="2" ry="2" />
<text  x="293.77" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="990.8" y="597" width="0.5" height="15.0" fill="rgb(253,159,8)" rx="2" ry="2" />
<text  x="993.83" y="607.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (66 samples, 1.23%)</title><rect x="750.4" y="725" width="14.6" height="15.0" fill="rgb(248,169,42)" rx="2" ry="2" />
<text  x="753.42" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="545.5" y="501" width="0.2" height="15.0" fill="rgb(226,202,33)" rx="2" ry="2" />
<text  x="548.52" y="511.5" ></text>
</g>
<g >
<title>cdc::cdc_service::needs_cdc_augmentation (3 samples, 0.06%)</title><rect x="871.5" y="661" width="0.7" height="15.0" fill="rgb(247,5,47)" rx="2" ry="2" />
<text  x="874.51" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="618.3" y="677" width="0.2" height="15.0" fill="rgb(206,154,43)" rx="2" ry="2" />
<text  x="621.31" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="62.1" y="549" width="0.2" height="15.0" fill="rgb(205,44,28)" rx="2" ry="2" />
<text  x="65.05" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="257.5" y="437" width="0.6" height="15.0" fill="rgb(210,40,50)" rx="2" ry="2" />
<text  x="260.47" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="755.9" y="629" width="0.3" height="15.0" fill="rgb(209,35,17)" rx="2" ry="2" />
<text  x="758.94" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="587.9" y="725" width="0.2" height="15.0" fill="rgb(235,209,17)" rx="2" ry="2" />
<text  x="590.87" y="735.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="67.6" y="693" width="0.2" height="15.0" fill="rgb(213,62,22)" rx="2" ry="2" />
<text  x="70.57" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="784.8" y="661" width="0.5" height="15.0" fill="rgb(243,162,36)" rx="2" ry="2" />
<text  x="787.83" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="46.0" y="517" width="0.2" height="15.0" fill="rgb(241,143,3)" rx="2" ry="2" />
<text  x="48.95" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="39.3" y="533" width="0.3" height="15.0" fill="rgb(254,90,38)" rx="2" ry="2" />
<text  x="42.33" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="38.5" y="485" width="0.4" height="15.0" fill="rgb(239,25,8)" rx="2" ry="2" />
<text  x="41.45" y="495.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="1122.5" y="517" width="0.2" height="15.0" fill="rgb(231,108,15)" rx="2" ry="2" />
<text  x="1125.51" y="527.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="880.1" y="565" width="0.2" height="15.0" fill="rgb(225,92,47)" rx="2" ry="2" />
<text  x="883.11" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1114.6" y="725" width="0.2" height="15.0" fill="rgb(247,163,22)" rx="2" ry="2" />
<text  x="1117.57" y="735.5" ></text>
</g>
<g >
<title>[unknown] (19 samples, 0.36%)</title><rect x="11.1" y="901" width="4.2" height="15.0" fill="rgb(254,95,18)" rx="2" ry="2" />
<text  x="14.10" y="911.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (27 samples, 0.50%)</title><rect x="1130.0" y="581" width="6.0" height="15.0" fill="rgb(233,221,37)" rx="2" ry="2" />
<text  x="1133.01" y="591.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4 samples, 0.07%)</title><rect x="649.0" y="709" width="0.8" height="15.0" fill="rgb(217,119,6)" rx="2" ry="2" />
<text  x="651.96" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="607.7" y="645" width="0.5" height="15.0" fill="rgb(222,181,3)" rx="2" ry="2" />
<text  x="610.72" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="213" width="0.3" height="15.0" fill="rgb(207,122,15)" rx="2" ry="2" />
<text  x="104.53" y="223.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (10 samples, 0.19%)</title><rect x="1127.4" y="581" width="2.2" height="15.0" fill="rgb(208,81,3)" rx="2" ry="2" />
<text  x="1130.36" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.11%)</title><rect x="1093.6" y="677" width="1.3" height="15.0" fill="rgb(226,120,16)" rx="2" ry="2" />
<text  x="1096.61" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="193.7" y="533" width="0.2" height="15.0" fill="rgb(227,143,15)" rx="2" ry="2" />
<text  x="196.73" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1035.2" y="533" width="0.2" height="15.0" fill="rgb(251,163,3)" rx="2" ry="2" />
<text  x="1038.17" y="543.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (5 samples, 0.09%)</title><rect x="1169.3" y="933" width="1.1" height="15.0" fill="rgb(232,14,13)" rx="2" ry="2" />
<text  x="1172.27" y="943.5" ></text>
</g>
<g >
<title>tracing::add_table_name (4 samples, 0.07%)</title><rect x="1115.9" y="725" width="0.9" height="15.0" fill="rgb(224,130,6)" rx="2" ry="2" />
<text  x="1118.89" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.39%)</title><rect x="759.0" y="661" width="4.7" height="15.0" fill="rgb(234,97,20)" rx="2" ry="2" />
<text  x="762.02" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="788.8" y="645" width="0.2" height="15.0" fill="rgb(214,182,11)" rx="2" ry="2" />
<text  x="791.80" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="791.0" y="597" width="0.7" height="15.0" fill="rgb(232,150,19)" rx="2" ry="2" />
<text  x="794.01" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="1130.2" y="453" width="0.2" height="15.0" fill="rgb(243,100,3)" rx="2" ry="2" />
<text  x="1133.23" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (5 samples, 0.09%)</title><rect x="871.5" y="677" width="1.1" height="15.0" fill="rgb(237,41,44)" rx="2" ry="2" />
<text  x="874.51" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="697.7" y="773" width="0.2" height="15.0" fill="rgb(228,112,6)" rx="2" ry="2" />
<text  x="700.71" y="783.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="23.2" y="565" width="0.7" height="15.0" fill="rgb(238,186,42)" rx="2" ry="2" />
<text  x="26.23" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="843.9" y="741" width="0.7" height="15.0" fill="rgb(232,149,21)" rx="2" ry="2" />
<text  x="846.94" y="751.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="18.6" y="757" width="0.2" height="15.0" fill="rgb(219,223,9)" rx="2" ry="2" />
<text  x="21.60" y="767.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="102.6" y="565" width="0.3" height="15.0" fill="rgb(206,152,38)" rx="2" ry="2" />
<text  x="105.64" y="575.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (19 samples, 0.36%)</title><rect x="11.1" y="917" width="4.2" height="15.0" fill="rgb(235,46,6)" rx="2" ry="2" />
<text  x="14.10" y="927.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (31 samples, 0.58%)</title><rect x="157.1" y="741" width="6.9" height="15.0" fill="rgb(226,116,44)" rx="2" ry="2" />
<text  x="160.11" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="39.1" y="613" width="0.2" height="15.0" fill="rgb(218,183,15)" rx="2" ry="2" />
<text  x="42.11" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.11%)</title><rect x="1146.8" y="725" width="1.3" height="15.0" fill="rgb(209,174,5)" rx="2" ry="2" />
<text  x="1149.77" y="735.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%)</title><rect x="139.5" y="533" width="0.2" height="15.0" fill="rgb(210,127,1)" rx="2" ry="2" />
<text  x="142.47" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (28 samples, 0.52%)</title><rect x="267.0" y="485" width="6.1" height="15.0" fill="rgb(254,112,47)" rx="2" ry="2" />
<text  x="269.95" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::ensure_static_row_is_written_if_needed (1 samples, 0.02%)</title><rect x="76.8" y="725" width="0.3" height="15.0" fill="rgb(243,12,22)" rx="2" ry="2" />
<text  x="79.83" y="735.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="293.0" y="485" width="0.2" height="15.0" fill="rgb(226,227,18)" rx="2" ry="2" />
<text  x="295.98" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (1 samples, 0.02%)</title><rect x="71.5" y="501" width="0.3" height="15.0" fill="rgb(244,189,32)" rx="2" ry="2" />
<text  x="74.54" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (6 samples, 0.11%)</title><rect x="87.6" y="789" width="1.4" height="15.0" fill="rgb(224,131,14)" rx="2" ry="2" />
<text  x="90.64" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="315.7" y="645" width="0.2" height="15.0" fill="rgb(245,111,15)" rx="2" ry="2" />
<text  x="318.70" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (8 samples, 0.15%)</title><rect x="23.2" y="581" width="1.8" height="15.0" fill="rgb(231,209,35)" rx="2" ry="2" />
<text  x="26.23" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1169.0" y="805" width="0.3" height="15.0" fill="rgb(245,121,11)" rx="2" ry="2" />
<text  x="1172.05" y="815.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%)</title><rect x="350.3" y="517" width="0.2" height="15.0" fill="rgb(229,112,46)" rx="2" ry="2" />
<text  x="353.33" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="1048.0" y="613" width="0.2" height="15.0" fill="rgb(252,74,40)" rx="2" ry="2" />
<text  x="1050.96" y="623.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1124.9" y="565" width="0.3" height="15.0" fill="rgb(239,58,28)" rx="2" ry="2" />
<text  x="1127.93" y="575.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="716.7" y="757" width="0.2" height="15.0" fill="rgb(221,14,36)" rx="2" ry="2" />
<text  x="719.68" y="767.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="514.6" y="533" width="0.5" height="15.0" fill="rgb(226,1,48)" rx="2" ry="2" />
<text  x="517.64" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.07%)</title><rect x="425.1" y="437" width="0.9" height="15.0" fill="rgb(225,166,43)" rx="2" ry="2" />
<text  x="428.10" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="48.2" y="645" width="0.2" height="15.0" fill="rgb(232,22,38)" rx="2" ry="2" />
<text  x="51.16" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="662.9" y="773" width="0.2" height="15.0" fill="rgb(212,89,27)" rx="2" ry="2" />
<text  x="665.86" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1109.7" y="693" width="0.5" height="15.0" fill="rgb(221,179,3)" rx="2" ry="2" />
<text  x="1112.72" y="703.5" ></text>
</g>
<g >
<title>cql3::relation::to_column_definition (1 samples, 0.02%)</title><rect x="59.8" y="661" width="0.3" height="15.0" fill="rgb(246,137,11)" rx="2" ry="2" />
<text  x="62.85" y="671.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="40.0" y="453" width="0.2" height="15.0" fill="rgb(230,78,21)" rx="2" ry="2" />
<text  x="43.00" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="842.4" y="741" width="0.2" height="15.0" fill="rgb(217,93,53)" rx="2" ry="2" />
<text  x="845.40" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (3 samples, 0.06%)</title><rect x="411.6" y="485" width="0.7" height="15.0" fill="rgb(222,135,20)" rx="2" ry="2" />
<text  x="414.64" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="43.5" y="437" width="0.2" height="15.0" fill="rgb(249,185,13)" rx="2" ry="2" />
<text  x="46.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.7" y="693" width="0.2" height="15.0" fill="rgb(254,48,46)" rx="2" ry="2" />
<text  x="670.71" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1022.8" y="501" width="0.2" height="15.0" fill="rgb(252,160,20)" rx="2" ry="2" />
<text  x="1025.81" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="44.2" y="565" width="0.2" height="15.0" fill="rgb(254,172,1)" rx="2" ry="2" />
<text  x="47.19" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="35.6" y="613" width="0.2" height="15.0" fill="rgb(249,146,30)" rx="2" ry="2" />
<text  x="38.59" y="623.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (5 samples, 0.09%)</title><rect x="497.2" y="629" width="1.1" height="15.0" fill="rgb(227,79,37)" rx="2" ry="2" />
<text  x="500.22" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (15 samples, 0.28%)</title><rect x="157.6" y="725" width="3.3" height="15.0" fill="rgb(233,228,19)" rx="2" ry="2" />
<text  x="160.56" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1163.5" y="757" width="0.3" height="15.0" fill="rgb(226,40,23)" rx="2" ry="2" />
<text  x="1166.53" y="767.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.07%)</title><rect x="253.9" y="421" width="0.9" height="15.0" fill="rgb(237,124,18)" rx="2" ry="2" />
<text  x="256.94" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (11 samples, 0.21%)</title><rect x="26.8" y="565" width="2.4" height="15.0" fill="rgb(246,192,9)" rx="2" ry="2" />
<text  x="29.76" y="575.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="59.8" y="645" width="0.3" height="15.0" fill="rgb(225,120,34)" rx="2" ry="2" />
<text  x="62.85" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="49.5" y="549" width="0.2" height="15.0" fill="rgb(246,72,40)" rx="2" ry="2" />
<text  x="52.48" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (3 samples, 0.06%)</title><rect x="360.5" y="485" width="0.6" height="15.0" fill="rgb(233,90,30)" rx="2" ry="2" />
<text  x="363.47" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="433.7" y="549" width="0.2" height="15.0" fill="rgb(223,41,16)" rx="2" ry="2" />
<text  x="436.70" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.3" y="741" width="0.2" height="15.0" fill="rgb(207,63,17)" rx="2" ry="2" />
<text  x="20.28" y="751.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1132.7" y="405" width="0.2" height="15.0" fill="rgb(233,221,22)" rx="2" ry="2" />
<text  x="1135.65" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%)</title><rect x="286.6" y="501" width="0.6" height="15.0" fill="rgb(209,155,26)" rx="2" ry="2" />
<text  x="289.58" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.24%)</title><rect x="1049.1" y="613" width="2.8" height="15.0" fill="rgb(226,218,33)" rx="2" ry="2" />
<text  x="1052.06" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="866.0" y="725" width="0.4" height="15.0" fill="rgb(254,177,12)" rx="2" ry="2" />
<text  x="869.00" y="735.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (5 samples, 0.09%)</title><rect x="20.1" y="677" width="1.1" height="15.0" fill="rgb(218,170,4)" rx="2" ry="2" />
<text  x="23.15" y="687.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (366 samples, 6.84%)</title><rect x="351.0" y="533" width="80.7" height="15.0" fill="rgb(243,171,16)" rx="2" ry="2" />
<text  x="353.99" y="543.5" >compact_m..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="822.5" y="629" width="0.3" height="15.0" fill="rgb(247,101,1)" rx="2" ry="2" />
<text  x="825.55" y="639.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1133.5" y="421" width="0.3" height="15.0" fill="rgb(244,64,50)" rx="2" ry="2" />
<text  x="1136.54" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="42.2" y="501" width="0.4" height="15.0" fill="rgb(246,31,38)" rx="2" ry="2" />
<text  x="45.20" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="675.9" y="693" width="0.2" height="15.0" fill="rgb(206,74,29)" rx="2" ry="2" />
<text  x="678.87" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.07%)</title><rect x="203.4" y="549" width="0.9" height="15.0" fill="rgb(242,153,51)" rx="2" ry="2" />
<text  x="206.43" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="667.1" y="789" width="0.4" height="15.0" fill="rgb(236,55,32)" rx="2" ry="2" />
<text  x="670.05" y="799.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (2 samples, 0.04%)</title><rect x="36.0" y="645" width="0.5" height="15.0" fill="rgb(253,139,18)" rx="2" ry="2" />
<text  x="39.03" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::value_at_index (1 samples, 0.02%)</title><rect x="1121.0" y="501" width="0.2" height="15.0" fill="rgb(241,134,28)" rx="2" ry="2" />
<text  x="1123.96" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="68.4" y="693" width="0.3" height="15.0" fill="rgb(225,3,8)" rx="2" ry="2" />
<text  x="71.45" y="703.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1124.9" y="549" width="0.3" height="15.0" fill="rgb(230,104,35)" rx="2" ry="2" />
<text  x="1127.93" y="559.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (5 samples, 0.09%)</title><rect x="878.3" y="597" width="1.2" height="15.0" fill="rgb(233,15,9)" rx="2" ry="2" />
<text  x="881.35" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="282.2" y="533" width="0.2" height="15.0" fill="rgb(240,165,52)" rx="2" ry="2" />
<text  x="285.17" y="543.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="874.2" y="677" width="0.2" height="15.0" fill="rgb(207,205,54)" rx="2" ry="2" />
<text  x="877.16" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="77.1" y="661" width="0.6" height="15.0" fill="rgb(223,204,15)" rx="2" ry="2" />
<text  x="80.05" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (5 samples, 0.09%)</title><rect x="705.2" y="789" width="1.1" height="15.0" fill="rgb(207,179,11)" rx="2" ry="2" />
<text  x="708.21" y="799.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.07%)</title><rect x="28.3" y="549" width="0.9" height="15.0" fill="rgb(245,119,6)" rx="2" ry="2" />
<text  x="31.31" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="21.9" y="613" width="0.2" height="15.0" fill="rgb(236,221,19)" rx="2" ry="2" />
<text  x="24.91" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="49.0" y="581" width="0.3" height="15.0" fill="rgb(219,83,15)" rx="2" ry="2" />
<text  x="52.04" y="591.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (5 samples, 0.09%)</title><rect x="1081.5" y="613" width="1.1" height="15.0" fill="rgb(211,213,51)" rx="2" ry="2" />
<text  x="1084.48" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="728.4" y="757" width="0.2" height="15.0" fill="rgb(239,190,22)" rx="2" ry="2" />
<text  x="731.37" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.1" y="613" width="0.3" height="15.0" fill="rgb(219,142,19)" rx="2" ry="2" />
<text  x="25.13" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="639.3" y="725" width="0.4" height="15.0" fill="rgb(215,7,45)" rx="2" ry="2" />
<text  x="642.26" y="735.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::prepare (1 samples, 0.02%)</title><rect x="55.4" y="741" width="0.3" height="15.0" fill="rgb(207,133,18)" rx="2" ry="2" />
<text  x="58.44" y="751.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="75.1" y="741" width="0.2" height="15.0" fill="rgb(220,204,39)" rx="2" ry="2" />
<text  x="78.07" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="938.8" y="661" width="0.9" height="15.0" fill="rgb(230,57,0)" rx="2" ry="2" />
<text  x="941.78" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="641.5" y="741" width="0.6" height="15.0" fill="rgb(214,156,32)" rx="2" ry="2" />
<text  x="644.47" y="751.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="780.2" y="677" width="0.7" height="15.0" fill="rgb(218,152,50)" rx="2" ry="2" />
<text  x="783.20" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="674.3" y="693" width="0.2" height="15.0" fill="rgb(212,208,27)" rx="2" ry="2" />
<text  x="677.33" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="646.1" y="661" width="0.4" height="15.0" fill="rgb(209,34,24)" rx="2" ry="2" />
<text  x="649.10" y="671.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%)</title><rect x="363.6" y="517" width="0.2" height="15.0" fill="rgb(252,153,1)" rx="2" ry="2" />
<text  x="366.56" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (2 samples, 0.04%)</title><rect x="1151.4" y="741" width="0.4" height="15.0" fill="rgb(239,111,10)" rx="2" ry="2" />
<text  x="1154.40" y="751.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="49.5" y="469" width="0.2" height="15.0" fill="rgb(227,132,49)" rx="2" ry="2" />
<text  x="52.48" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.9" y="645" width="0.3" height="15.0" fill="rgb(212,70,53)" rx="2" ry="2" />
<text  x="670.93" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unimplemented::cause, std::pair&lt;unimplemented::cause const, bool&gt;, std::allocator&lt;std::pair&lt;unimplemented::cause const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unimplemented::cause&gt;, std::hash&lt;unimplemented::cause&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="72.9" y="773" width="0.4" height="15.0" fill="rgb(212,11,24)" rx="2" ry="2" />
<text  x="75.86" y="783.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="880.1" y="645" width="0.2" height="15.0" fill="rgb(241,170,52)" rx="2" ry="2" />
<text  x="883.11" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="1152.3" y="677" width="0.9" height="15.0" fill="rgb(226,181,14)" rx="2" ry="2" />
<text  x="1155.28" y="687.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%)</title><rect x="916.7" y="677" width="2.2" height="15.0" fill="rgb(241,167,3)" rx="2" ry="2" />
<text  x="919.73" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="1023.9" y="501" width="0.2" height="15.0" fill="rgb(226,33,3)" rx="2" ry="2" />
<text  x="1026.92" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (34 samples, 0.64%)</title><rect x="899.5" y="629" width="7.5" height="15.0" fill="rgb(206,122,40)" rx="2" ry="2" />
<text  x="902.52" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="35.6" y="645" width="0.2" height="15.0" fill="rgb(227,2,37)" rx="2" ry="2" />
<text  x="38.59" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.07%)</title><rect x="593.2" y="613" width="0.8" height="15.0" fill="rgb(225,111,0)" rx="2" ry="2" />
<text  x="596.16" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="291.0" y="501" width="0.7" height="15.0" fill="rgb(238,154,6)" rx="2" ry="2" />
<text  x="293.99" y="511.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="533" width="0.2" height="15.0" fill="rgb(206,151,16)" rx="2" ry="2" />
<text  x="104.97" y="543.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.9" y="501" width="0.4" height="15.0" fill="rgb(252,139,29)" rx="2" ry="2" />
<text  x="45.86" y="511.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%)</title><rect x="1103.8" y="725" width="0.2" height="15.0" fill="rgb(225,175,30)" rx="2" ry="2" />
<text  x="1106.76" y="735.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="103.5" y="725" width="0.2" height="15.0" fill="rgb(205,24,52)" rx="2" ry="2" />
<text  x="106.52" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="35.6" y="469" width="0.2" height="15.0" fill="rgb(216,129,41)" rx="2" ry="2" />
<text  x="38.59" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="652.5" y="725" width="0.7" height="15.0" fill="rgb(212,206,12)" rx="2" ry="2" />
<text  x="655.49" y="735.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="74.6" y="917" width="0.2" height="15.0" fill="rgb(221,21,35)" rx="2" ry="2" />
<text  x="77.62" y="927.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="50.1" y="565" width="0.3" height="15.0" fill="rgb(219,106,26)" rx="2" ry="2" />
<text  x="53.14" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="990.2" y="565" width="0.2" height="15.0" fill="rgb(222,132,5)" rx="2" ry="2" />
<text  x="993.17" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="46.2" y="533" width="0.6" height="15.0" fill="rgb(217,168,14)" rx="2" ry="2" />
<text  x="49.17" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;bool&gt;::get0 (1 samples, 0.02%)</title><rect x="16.4" y="869" width="0.2" height="15.0" fill="rgb(250,46,40)" rx="2" ry="2" />
<text  x="19.40" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (6 samples, 0.11%)</title><rect x="487.7" y="565" width="1.4" height="15.0" fill="rgb(251,71,7)" rx="2" ry="2" />
<text  x="490.73" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="317.7" y="597" width="0.2" height="15.0" fill="rgb(223,216,46)" rx="2" ry="2" />
<text  x="320.68" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (1 samples, 0.02%)</title><rect x="62.7" y="629" width="0.2" height="15.0" fill="rgb(233,140,13)" rx="2" ry="2" />
<text  x="65.71" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="664.2" y="773" width="0.2" height="15.0" fill="rgb(236,28,37)" rx="2" ry="2" />
<text  x="667.18" y="783.5" ></text>
</g>
<g >
<title>database::find_uuid (28 samples, 0.52%)</title><rect x="771.8" y="693" width="6.2" height="15.0" fill="rgb(232,190,40)" rx="2" ry="2" />
<text  x="774.82" y="703.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="480.5" y="581" width="0.4" height="15.0" fill="rgb(241,120,2)" rx="2" ry="2" />
<text  x="483.46" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="77.9" y="741" width="0.3" height="15.0" fill="rgb(225,58,37)" rx="2" ry="2" />
<text  x="80.93" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1168.2" y="773" width="0.2" height="15.0" fill="rgb(250,108,25)" rx="2" ry="2" />
<text  x="1171.16" y="783.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (9 samples, 0.17%)</title><rect x="566.3" y="597" width="1.9" height="15.0" fill="rgb(213,154,26)" rx="2" ry="2" />
<text  x="569.25" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1036.3" y="565" width="0.2" height="15.0" fill="rgb(208,215,8)" rx="2" ry="2" />
<text  x="1039.27" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="458.6" y="677" width="0.2" height="15.0" fill="rgb(229,198,39)" rx="2" ry="2" />
<text  x="461.62" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.39%)</title><rect x="759.0" y="645" width="4.7" height="15.0" fill="rgb(211,79,25)" rx="2" ry="2" />
<text  x="762.02" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="621.4" y="709" width="0.2" height="15.0" fill="rgb(230,22,7)" rx="2" ry="2" />
<text  x="624.39" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.11%)</title><rect x="743.1" y="645" width="1.4" height="15.0" fill="rgb(234,183,47)" rx="2" ry="2" />
<text  x="746.14" y="655.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (8 samples, 0.15%)</title><rect x="928.4" y="693" width="1.8" height="15.0" fill="rgb(218,154,40)" rx="2" ry="2" />
<text  x="931.41" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.07%)</title><rect x="34.7" y="549" width="0.9" height="15.0" fill="rgb(253,9,39)" rx="2" ry="2" />
<text  x="37.70" y="559.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="322.1" y="581" width="2.4" height="15.0" fill="rgb(253,136,36)" rx="2" ry="2" />
<text  x="325.09" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (1 samples, 0.02%)</title><rect x="1077.7" y="597" width="0.3" height="15.0" fill="rgb(253,58,10)" rx="2" ry="2" />
<text  x="1080.73" y="607.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="424.7" y="453" width="1.3" height="15.0" fill="rgb(235,196,54)" rx="2" ry="2" />
<text  x="427.65" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1139.5" y="805" width="0.2" height="15.0" fill="rgb(220,45,6)" rx="2" ry="2" />
<text  x="1142.49" y="815.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="915.0" y="693" width="0.2" height="15.0" fill="rgb(245,150,45)" rx="2" ry="2" />
<text  x="917.96" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="101.5" y="165" width="0.3" height="15.0" fill="rgb(218,208,35)" rx="2" ry="2" />
<text  x="104.53" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (5 samples, 0.09%)</title><rect x="359.4" y="485" width="1.1" height="15.0" fill="rgb(212,109,30)" rx="2" ry="2" />
<text  x="362.37" y="495.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="67.6" y="709" width="0.2" height="15.0" fill="rgb(237,150,21)" rx="2" ry="2" />
<text  x="70.57" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="76.2" y="629" width="0.4" height="15.0" fill="rgb(251,29,43)" rx="2" ry="2" />
<text  x="79.17" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.07%)</title><rect x="1152.3" y="709" width="0.9" height="15.0" fill="rgb(205,102,0)" rx="2" ry="2" />
<text  x="1155.28" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="730.1" y="677" width="0.3" height="15.0" fill="rgb(235,109,21)" rx="2" ry="2" />
<text  x="733.13" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="59.8" y="629" width="0.3" height="15.0" fill="rgb(221,163,25)" rx="2" ry="2" />
<text  x="62.85" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="1127.4" y="613" width="2.4" height="15.0" fill="rgb(234,210,42)" rx="2" ry="2" />
<text  x="1130.36" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="23.2" y="453" width="0.3" height="15.0" fill="rgb(246,61,52)" rx="2" ry="2" />
<text  x="26.23" y="463.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="103.1" y="741" width="0.4" height="15.0" fill="rgb(237,48,42)" rx="2" ry="2" />
<text  x="106.08" y="751.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (44 samples, 0.82%)</title><rect x="473.6" y="613" width="9.7" height="15.0" fill="rgb(215,22,43)" rx="2" ry="2" />
<text  x="476.62" y="623.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%)</title><rect x="10.9" y="901" width="0.2" height="15.0" fill="rgb(232,85,39)" rx="2" ry="2" />
<text  x="13.88" y="911.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (6 samples, 0.11%)</title><rect x="928.6" y="677" width="1.4" height="15.0" fill="rgb(210,186,27)" rx="2" ry="2" />
<text  x="931.64" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4 samples, 0.07%)</title><rect x="453.1" y="661" width="0.9" height="15.0" fill="rgb(211,4,34)" rx="2" ry="2" />
<text  x="456.11" y="671.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (2 samples, 0.04%)</title><rect x="877.9" y="581" width="0.4" height="15.0" fill="rgb(226,115,46)" rx="2" ry="2" />
<text  x="880.91" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (3 samples, 0.06%)</title><rect x="19.0" y="757" width="0.7" height="15.0" fill="rgb(244,42,10)" rx="2" ry="2" />
<text  x="22.04" y="767.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="77.9" y="789" width="0.3" height="15.0" fill="rgb(254,68,6)" rx="2" ry="2" />
<text  x="80.93" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot::touch (1 samples, 0.02%)</title><rect x="15.5" y="613" width="0.2" height="15.0" fill="rgb(239,199,8)" rx="2" ry="2" />
<text  x="18.51" y="623.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="847.7" y="725" width="2.0" height="15.0" fill="rgb(207,141,2)" rx="2" ry="2" />
<text  x="850.69" y="735.5" ></text>
</g>
<g >
<title>deletable_row::apply (1 samples, 0.02%)</title><rect x="1121.8" y="533" width="0.3" height="15.0" fill="rgb(251,176,51)" rx="2" ry="2" />
<text  x="1124.85" y="543.5" ></text>
</g>
<g >
<title>logalloc::segment::occupancy (1 samples, 0.02%)</title><rect x="77.9" y="661" width="0.3" height="15.0" fill="rgb(254,96,25)" rx="2" ry="2" />
<text  x="80.93" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="631.3" y="661" width="0.7" height="15.0" fill="rgb(254,164,22)" rx="2" ry="2" />
<text  x="634.32" y="671.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="103.3" y="629" width="0.2" height="15.0" fill="rgb(209,216,39)" rx="2" ry="2" />
<text  x="106.30" y="639.5" ></text>
</g>
<g >
<title>db::prepare_tokens (1 samples, 0.02%)</title><rect x="17.7" y="741" width="0.2" height="15.0" fill="rgb(235,75,30)" rx="2" ry="2" />
<text  x="20.72" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="482.2" y="565" width="0.2" height="15.0" fill="rgb(210,10,44)" rx="2" ry="2" />
<text  x="485.22" y="575.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (11 samples, 0.21%)</title><rect x="1163.8" y="757" width="2.4" height="15.0" fill="rgb(227,208,14)" rx="2" ry="2" />
<text  x="1166.75" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="47.3" y="485" width="0.4" height="15.0" fill="rgb(252,227,0)" rx="2" ry="2" />
<text  x="50.27" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1022.4" y="469" width="0.2" height="15.0" fill="rgb(223,188,11)" rx="2" ry="2" />
<text  x="1025.37" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="698.4" y="789" width="0.4" height="15.0" fill="rgb(239,106,8)" rx="2" ry="2" />
<text  x="701.37" y="799.5" ></text>
</g>
<g >
<title>query::result::builder::build (2 samples, 0.04%)</title><rect x="626.0" y="741" width="0.5" height="15.0" fill="rgb(231,161,22)" rx="2" ry="2" />
<text  x="629.03" y="751.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="29.6" y="565" width="0.3" height="15.0" fill="rgb(234,135,28)" rx="2" ry="2" />
<text  x="32.63" y="575.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="36.2" y="629" width="0.3" height="15.0" fill="rgb(217,45,31)" rx="2" ry="2" />
<text  x="39.25" y="639.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (6 samples, 0.11%)</title><rect x="809.5" y="421" width="1.4" height="15.0" fill="rgb(253,177,53)" rx="2" ry="2" />
<text  x="812.53" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (9 samples, 0.17%)</title><rect x="304.9" y="629" width="2.0" height="15.0" fill="rgb(233,215,49)" rx="2" ry="2" />
<text  x="307.89" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="791.4" y="565" width="0.3" height="15.0" fill="rgb(227,184,16)" rx="2" ry="2" />
<text  x="794.45" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="768.9" y="709" width="0.3" height="15.0" fill="rgb(217,8,2)" rx="2" ry="2" />
<text  x="771.95" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="760.1" y="597" width="0.2" height="15.0" fill="rgb(236,178,7)" rx="2" ry="2" />
<text  x="763.13" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unimplemented::cause, std::pair&lt;unimplemented::cause const, bool&gt;, std::allocator&lt;std::pair&lt;unimplemented::cause const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unimplemented::cause&gt;, std::hash&lt;unimplemented::cause&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="73.1" y="757" width="0.2" height="15.0" fill="rgb(210,76,10)" rx="2" ry="2" />
<text  x="76.08" y="767.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="553.0" y="581" width="0.2" height="15.0" fill="rgb(234,58,12)" rx="2" ry="2" />
<text  x="556.02" y="591.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (17 samples, 0.32%)</title><rect x="505.6" y="581" width="3.7" height="15.0" fill="rgb(239,124,12)" rx="2" ry="2" />
<text  x="508.60" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="54.3" y="661" width="0.3" height="15.0" fill="rgb(213,182,43)" rx="2" ry="2" />
<text  x="57.33" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="448.9" y="597" width="0.2" height="15.0" fill="rgb(227,206,2)" rx="2" ry="2" />
<text  x="451.92" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="729.2" y="789" width="0.3" height="15.0" fill="rgb(216,115,27)" rx="2" ry="2" />
<text  x="732.25" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.07%)</title><rect x="33.8" y="597" width="0.9" height="15.0" fill="rgb(224,111,39)" rx="2" ry="2" />
<text  x="36.82" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="363.3" y="517" width="0.3" height="15.0" fill="rgb(247,154,34)" rx="2" ry="2" />
<text  x="366.34" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="373.9" y="469" width="0.2" height="15.0" fill="rgb(250,122,8)" rx="2" ry="2" />
<text  x="376.93" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (7 samples, 0.13%)</title><rect x="773.1" y="645" width="1.6" height="15.0" fill="rgb(219,40,32)" rx="2" ry="2" />
<text  x="776.14" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%)</title><rect x="61.8" y="533" width="0.3" height="15.0" fill="rgb(212,228,36)" rx="2" ry="2" />
<text  x="64.83" y="543.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="533" width="0.5" height="15.0" fill="rgb(248,45,27)" rx="2" ry="2" />
<text  x="104.31" y="543.5" ></text>
</g>
<g >
<title>main (4,941 samples, 92.36%)</title><rect x="79.5" y="917" width="1089.8" height="15.0" fill="rgb(246,177,43)" rx="2" ry="2" />
<text  x="82.48" y="927.5" >main</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (96 samples, 1.79%)</title><rect x="534.1" y="597" width="21.1" height="15.0" fill="rgb(242,128,47)" rx="2" ry="2" />
<text  x="537.05" y="607.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="69.3" y="645" width="0.3" height="15.0" fill="rgb(216,179,22)" rx="2" ry="2" />
<text  x="72.33" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="1162.9" y="757" width="0.6" height="15.0" fill="rgb(224,136,28)" rx="2" ry="2" />
<text  x="1165.87" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1089.0" y="677" width="0.2" height="15.0" fill="rgb(213,118,48)" rx="2" ry="2" />
<text  x="1091.98" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="32.7" y="581" width="0.2" height="15.0" fill="rgb(246,68,51)" rx="2" ry="2" />
<text  x="35.72" y="591.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="482.9" y="597" width="0.2" height="15.0" fill="rgb(217,137,46)" rx="2" ry="2" />
<text  x="485.88" y="607.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (1 samples, 0.02%)</title><rect x="1134.6" y="469" width="0.3" height="15.0" fill="rgb(228,89,13)" rx="2" ry="2" />
<text  x="1137.64" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (6 samples, 0.11%)</title><rect x="635.3" y="741" width="1.3" height="15.0" fill="rgb(236,31,27)" rx="2" ry="2" />
<text  x="638.29" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (4 samples, 0.07%)</title><rect x="451.8" y="565" width="0.9" height="15.0" fill="rgb(252,56,27)" rx="2" ry="2" />
<text  x="454.78" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="679.6" y="741" width="0.2" height="15.0" fill="rgb(211,180,42)" rx="2" ry="2" />
<text  x="682.62" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="93.4" y="725" width="0.6" height="15.0" fill="rgb(223,9,25)" rx="2" ry="2" />
<text  x="96.37" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="685.4" y="789" width="0.2" height="15.0" fill="rgb(221,120,26)" rx="2" ry="2" />
<text  x="688.36" y="799.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (8 samples, 0.15%)</title><rect x="1078.4" y="613" width="1.8" height="15.0" fill="rgb(214,215,37)" rx="2" ry="2" />
<text  x="1081.40" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="957.3" y="709" width="0.2" height="15.0" fill="rgb(224,220,14)" rx="2" ry="2" />
<text  x="960.31" y="719.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (16 samples, 0.30%)</title><rect x="856.3" y="741" width="3.5" height="15.0" fill="rgb(208,101,10)" rx="2" ry="2" />
<text  x="859.29" y="751.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (6 samples, 0.11%)</title><rect x="746.2" y="597" width="1.4" height="15.0" fill="rgb(206,107,36)" rx="2" ry="2" />
<text  x="749.23" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="49.9" y="469" width="0.2" height="15.0" fill="rgb(218,116,50)" rx="2" ry="2" />
<text  x="52.92" y="479.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%)</title><rect x="15.5" y="917" width="0.2" height="15.0" fill="rgb(243,123,33)" rx="2" ry="2" />
<text  x="18.51" y="927.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="676.3" y="757" width="0.2" height="15.0" fill="rgb(253,47,33)" rx="2" ry="2" />
<text  x="679.31" y="767.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%)</title><rect x="697.9" y="789" width="0.2" height="15.0" fill="rgb(218,58,30)" rx="2" ry="2" />
<text  x="700.93" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="588.1" y="725" width="0.2" height="15.0" fill="rgb(213,184,39)" rx="2" ry="2" />
<text  x="591.09" y="735.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1022.2" y="437" width="0.2" height="15.0" fill="rgb(233,13,16)" rx="2" ry="2" />
<text  x="1025.15" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="53.9" y="661" width="0.2" height="15.0" fill="rgb(251,98,37)" rx="2" ry="2" />
<text  x="56.89" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="1167.1" y="661" width="0.2" height="15.0" fill="rgb(237,184,28)" rx="2" ry="2" />
<text  x="1170.06" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (255 samples, 4.77%)</title><rect x="17.9" y="869" width="56.3" height="15.0" fill="rgb(244,178,8)" rx="2" ry="2" />
<text  x="20.94" y="879.5" >std::..</text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (3 samples, 0.06%)</title><rect x="1168.2" y="805" width="0.6" height="15.0" fill="rgb(224,124,50)" rx="2" ry="2" />
<text  x="1171.16" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="604.9" y="597" width="0.2" height="15.0" fill="rgb(216,135,12)" rx="2" ry="2" />
<text  x="607.85" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="66.5" y="725" width="0.2" height="15.0" fill="rgb(216,93,15)" rx="2" ry="2" />
<text  x="69.46" y="735.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="17.3" y="837" width="0.2" height="15.0" fill="rgb(242,193,13)" rx="2" ry="2" />
<text  x="20.28" y="847.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (35 samples, 0.65%)</title><rect x="502.3" y="597" width="7.7" height="15.0" fill="rgb(230,71,24)" rx="2" ry="2" />
<text  x="505.29" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%)</title><rect x="637.3" y="741" width="0.2" height="15.0" fill="rgb(223,88,53)" rx="2" ry="2" />
<text  x="640.27" y="751.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%)</title><rect x="101.3" y="437" width="0.5" height="15.0" fill="rgb(238,105,23)" rx="2" ry="2" />
<text  x="104.31" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (1 samples, 0.02%)</title><rect x="10.9" y="885" width="0.2" height="15.0" fill="rgb(240,165,25)" rx="2" ry="2" />
<text  x="13.88" y="895.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (583 samples, 10.90%)</title><rect x="330.5" y="693" width="128.6" height="15.0" fill="rgb(207,138,20)" rx="2" ry="2" />
<text  x="333.47" y="703.5" >query::consume_p..</text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (186 samples, 3.48%)</title><rect x="1042.2" y="661" width="41.0" height="15.0" fill="rgb(226,61,8)" rx="2" ry="2" />
<text  x="1045.22" y="671.5" >ser..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="210.9" y="501" width="0.3" height="15.0" fill="rgb(230,66,31)" rx="2" ry="2" />
<text  x="213.93" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.07%)</title><rect x="33.8" y="581" width="0.9" height="15.0" fill="rgb(220,47,1)" rx="2" ry="2" />
<text  x="36.82" y="591.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::flush (1 samples, 0.02%)</title><rect x="707.4" y="485" width="0.2" height="15.0" fill="rgb(237,54,27)" rx="2" ry="2" />
<text  x="710.41" y="495.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.09%)</title><rect x="1124.9" y="597" width="1.1" height="15.0" fill="rgb(241,128,25)" rx="2" ry="2" />
<text  x="1127.93" y="607.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="854.3" y="645" width="0.2" height="15.0" fill="rgb(220,145,12)" rx="2" ry="2" />
<text  x="857.31" y="655.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="158.9" y="693" width="0.6" height="15.0" fill="rgb(207,104,40)" rx="2" ry="2" />
<text  x="161.88" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="364.0" y="501" width="0.4" height="15.0" fill="rgb(247,198,5)" rx="2" ry="2" />
<text  x="367.00" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (3 samples, 0.06%)</title><rect x="445.6" y="517" width="0.7" height="15.0" fill="rgb(252,61,12)" rx="2" ry="2" />
<text  x="448.61" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="46.8" y="485" width="0.3" height="15.0" fill="rgb(228,125,33)" rx="2" ry="2" />
<text  x="49.83" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (2 samples, 0.04%)</title><rect x="908.1" y="661" width="0.5" height="15.0" fill="rgb(236,100,50)" rx="2" ry="2" />
<text  x="911.12" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="679.6" y="757" width="0.2" height="15.0" fill="rgb(208,158,33)" rx="2" ry="2" />
<text  x="682.62" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.39%)</title><rect x="274.2" y="517" width="4.7" height="15.0" fill="rgb(207,196,27)" rx="2" ry="2" />
<text  x="277.23" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="65.1" y="709" width="0.7" height="15.0" fill="rgb(210,37,18)" rx="2" ry="2" />
<text  x="68.14" y="719.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="38.5" y="469" width="0.4" height="15.0" fill="rgb(249,38,7)" rx="2" ry="2" />
<text  x="41.45" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%)</title><rect x="1135.3" y="485" width="0.2" height="15.0" fill="rgb(248,204,13)" rx="2" ry="2" />
<text  x="1138.30" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="845.3" y="709" width="2.4" height="15.0" fill="rgb(248,91,34)" rx="2" ry="2" />
<text  x="848.26" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%)</title><rect x="60.3" y="661" width="0.2" height="15.0" fill="rgb(253,5,7)" rx="2" ry="2" />
<text  x="63.29" y="671.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%)</title><rect x="707.6" y="597" width="0.3" height="15.0" fill="rgb(245,181,36)" rx="2" ry="2" />
<text  x="710.63" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="80.4" y="821" width="0.2" height="15.0" fill="rgb(211,73,30)" rx="2" ry="2" />
<text  x="83.36" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (3 samples, 0.06%)</title><rect x="645.9" y="693" width="0.6" height="15.0" fill="rgb(226,192,35)" rx="2" ry="2" />
<text  x="648.88" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="193.9" y="533" width="0.3" height="15.0" fill="rgb(221,79,31)" rx="2" ry="2" />
<text  x="196.95" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%)</title><rect x="51.2" y="581" width="0.3" height="15.0" fill="rgb(250,157,22)" rx="2" ry="2" />
<text  x="54.24" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="68.7" y="677" width="0.2" height="15.0" fill="rgb(224,219,8)" rx="2" ry="2" />
<text  x="71.67" y="687.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="15.5" y="789" width="0.2" height="15.0" fill="rgb(249,104,4)" rx="2" ry="2" />
<text  x="18.51" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%)</title><rect x="870.0" y="661" width="0.6" height="15.0" fill="rgb(220,96,19)" rx="2" ry="2" />
<text  x="872.97" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="571.5" y="549" width="0.7" height="15.0" fill="rgb(228,182,26)" rx="2" ry="2" />
<text  x="574.55" y="559.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="817.3" y="549" width="0.4" height="15.0" fill="rgb(210,95,6)" rx="2" ry="2" />
<text  x="820.25" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%)</title><rect x="71.5" y="517" width="0.3" height="15.0" fill="rgb(224,187,37)" rx="2" ry="2" />
<text  x="74.54" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (12 samples, 0.22%)</title><rect x="121.6" y="757" width="2.7" height="15.0" fill="rgb(214,158,19)" rx="2" ry="2" />
<text  x="124.60" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="874.2" y="661" width="0.2" height="15.0" fill="rgb(253,53,54)" rx="2" ry="2" />
<text  x="877.16" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="49.5" y="501" width="0.2" height="15.0" fill="rgb(232,158,45)" rx="2" ry="2" />
<text  x="52.48" y="511.5" ></text>
</g>
<g >
<title>database::find_keyspace (24 samples, 0.45%)</title><rect x="1047.7" y="645" width="5.3" height="15.0" fill="rgb(244,69,47)" rx="2" ry="2" />
<text  x="1050.74" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="732.3" y="805" width="0.3" height="15.0" fill="rgb(237,174,1)" rx="2" ry="2" />
<text  x="735.34" y="815.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.9" y="421" width="0.2" height="15.0" fill="rgb(225,23,46)" rx="2" ry="2" />
<text  x="43.88" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="99.8" y="789" width="0.2" height="15.0" fill="rgb(209,202,22)" rx="2" ry="2" />
<text  x="102.77" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (27 samples, 0.50%)</title><rect x="1130.0" y="613" width="6.0" height="15.0" fill="rgb(223,137,9)" rx="2" ry="2" />
<text  x="1133.01" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="60.9" y="565" width="0.3" height="15.0" fill="rgb(236,77,25)" rx="2" ry="2" />
<text  x="63.95" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="990.4" y="613" width="0.2" height="15.0" fill="rgb(216,93,35)" rx="2" ry="2" />
<text  x="993.39" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (40 samples, 0.75%)</title><rect x="39.3" y="645" width="8.9" height="15.0" fill="rgb(247,173,28)" rx="2" ry="2" />
<text  x="42.33" y="655.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (6 samples, 0.11%)</title><rect x="866.4" y="757" width="1.4" height="15.0" fill="rgb(233,113,13)" rx="2" ry="2" />
<text  x="869.44" y="767.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (9 samples, 0.17%)</title><rect x="435.5" y="533" width="1.9" height="15.0" fill="rgb(254,142,31)" rx="2" ry="2" />
<text  x="438.46" y="543.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (3 samples, 0.06%)</title><rect x="766.5" y="661" width="0.7" height="15.0" fill="rgb(237,217,13)" rx="2" ry="2" />
<text  x="769.52" y="671.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="211.8" y="485" width="0.5" height="15.0" fill="rgb(216,160,43)" rx="2" ry="2" />
<text  x="214.81" y="495.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (26 samples, 0.49%)</title><rect x="319.4" y="613" width="5.8" height="15.0" fill="rgb(210,70,7)" rx="2" ry="2" />
<text  x="322.45" y="623.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%)</title><rect x="1121.4" y="533" width="0.2" height="15.0" fill="rgb(206,108,37)" rx="2" ry="2" />
<text  x="1124.41" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="831.6" y="629" width="0.4" height="15.0" fill="rgb(253,42,53)" rx="2" ry="2" />
<text  x="834.59" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_expression (7 samples, 0.13%)</title><rect x="56.8" y="709" width="1.5" height="15.0" fill="rgb(244,208,42)" rx="2" ry="2" />
<text  x="59.76" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1032.3" y="565" width="0.2" height="15.0" fill="rgb(231,118,0)" rx="2" ry="2" />
<text  x="1035.30" y="575.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="875.9" y="629" width="0.5" height="15.0" fill="rgb(235,27,43)" rx="2" ry="2" />
<text  x="878.92" y="639.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="17.3" y="853" width="0.2" height="15.0" fill="rgb(228,178,26)" rx="2" ry="2" />
<text  x="20.28" y="863.5" ></text>
</g>
<g >
<title>_setjmp (1 samples, 0.02%)</title><rect x="658.9" y="789" width="0.2" height="15.0" fill="rgb(249,132,30)" rx="2" ry="2" />
<text  x="661.89" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="339.7" y="597" width="0.3" height="15.0" fill="rgb(240,109,15)" rx="2" ry="2" />
<text  x="342.74" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="741" width="0.5" height="15.0" fill="rgb(242,67,26)" rx="2" ry="2" />
<text  x="710.63" y="751.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="74.6" y="741" width="0.2" height="15.0" fill="rgb(240,203,50)" rx="2" ry="2" />
<text  x="77.62" y="751.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="877.9" y="549" width="0.4" height="15.0" fill="rgb(245,97,9)" rx="2" ry="2" />
<text  x="880.91" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="48.8" y="565" width="0.2" height="15.0" fill="rgb(237,106,16)" rx="2" ry="2" />
<text  x="51.82" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (2 samples, 0.04%)</title><rect x="1135.1" y="517" width="0.4" height="15.0" fill="rgb(215,200,7)" rx="2" ry="2" />
<text  x="1138.08" y="527.5" ></text>
</g>
<g >
<title>posix_memalign (4 samples, 0.07%)</title><rect x="253.1" y="389" width="0.8" height="15.0" fill="rgb(244,23,34)" rx="2" ry="2" />
<text  x="256.06" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (6 samples, 0.11%)</title><rect x="574.4" y="645" width="1.3" height="15.0" fill="rgb(251,21,23)" rx="2" ry="2" />
<text  x="577.41" y="655.5" ></text>
</g>
<g >
<title>table::mutation_query (2 samples, 0.04%)</title><rect x="139.5" y="757" width="0.4" height="15.0" fill="rgb(244,13,20)" rx="2" ry="2" />
<text  x="142.47" y="767.5" ></text>
</g>
<g >
<title>make_combined_reader (2 samples, 0.04%)</title><rect x="463.7" y="661" width="0.4" height="15.0" fill="rgb(206,12,5)" rx="2" ry="2" />
<text  x="466.69" y="671.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (17 samples, 0.32%)</title><rect x="195.1" y="565" width="3.7" height="15.0" fill="rgb(247,205,26)" rx="2" ry="2" />
<text  x="198.05" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="660.7" y="789" width="0.2" height="15.0" fill="rgb(238,96,53)" rx="2" ry="2" />
<text  x="663.65" y="799.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (9 samples, 0.17%)</title><rect x="393.1" y="469" width="2.0" height="15.0" fill="rgb(225,26,8)" rx="2" ry="2" />
<text  x="396.11" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="879.7" y="533" width="0.2" height="15.0" fill="rgb(253,131,53)" rx="2" ry="2" />
<text  x="882.67" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.07%)</title><rect x="597.4" y="597" width="0.8" height="15.0" fill="rgb(234,216,21)" rx="2" ry="2" />
<text  x="600.35" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="76.2" y="517" width="0.2" height="15.0" fill="rgb(221,6,52)" rx="2" ry="2" />
<text  x="79.17" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="154.7" y="741" width="0.4" height="15.0" fill="rgb(208,136,54)" rx="2" ry="2" />
<text  x="157.69" y="751.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="600.2" y="581" width="1.1" height="15.0" fill="rgb(237,119,14)" rx="2" ry="2" />
<text  x="603.22" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="125.1" y="741" width="0.3" height="15.0" fill="rgb(242,53,17)" rx="2" ry="2" />
<text  x="128.13" y="751.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.07%)</title><rect x="34.7" y="661" width="0.9" height="15.0" fill="rgb(253,17,51)" rx="2" ry="2" />
<text  x="37.70" y="671.5" ></text>
</g>
<g >
<title>compaction_backlog_manager::backlog (1 samples, 0.02%)</title><rect x="1168.4" y="709" width="0.2" height="15.0" fill="rgb(208,178,24)" rx="2" ry="2" />
<text  x="1171.39" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="619.2" y="725" width="0.4" height="15.0" fill="rgb(211,154,20)" rx="2" ry="2" />
<text  x="622.19" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1116.8" y="725" width="0.2" height="15.0" fill="rgb(241,216,51)" rx="2" ry="2" />
<text  x="1119.77" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="39.6" y="565" width="0.2" height="15.0" fill="rgb(214,205,9)" rx="2" ry="2" />
<text  x="42.56" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%)</title><rect x="308.4" y="645" width="0.5" height="15.0" fill="rgb(239,178,49)" rx="2" ry="2" />
<text  x="311.42" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="559.2" y="613" width="0.2" height="15.0" fill="rgb(242,102,48)" rx="2" ry="2" />
<text  x="562.20" y="623.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="565.4" y="613" width="0.2" height="15.0" fill="rgb(239,63,1)" rx="2" ry="2" />
<text  x="568.37" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="101.8" y="581" width="0.6" height="15.0" fill="rgb(219,121,37)" rx="2" ry="2" />
<text  x="104.75" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="840.4" y="725" width="0.2" height="15.0" fill="rgb(218,25,49)" rx="2" ry="2" />
<text  x="843.41" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="22.4" y="565" width="0.2" height="15.0" fill="rgb(238,80,17)" rx="2" ry="2" />
<text  x="25.35" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="604.0" y="597" width="0.2" height="15.0" fill="rgb(214,193,46)" rx="2" ry="2" />
<text  x="606.97" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="800.0" y="549" width="0.7" height="15.0" fill="rgb(254,52,18)" rx="2" ry="2" />
<text  x="803.05" y="559.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (41 samples, 0.77%)</title><rect x="513.8" y="565" width="9.0" height="15.0" fill="rgb(218,11,4)" rx="2" ry="2" />
<text  x="516.76" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.0" y="517" width="0.3" height="15.0" fill="rgb(231,229,40)" rx="2" ry="2" />
<text  x="52.04" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="76.4" y="549" width="0.2" height="15.0" fill="rgb(242,43,8)" rx="2" ry="2" />
<text  x="79.39" y="559.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (36 samples, 0.67%)</title><rect x="1118.3" y="789" width="8.0" height="15.0" fill="rgb(224,60,7)" rx="2" ry="2" />
<text  x="1121.32" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="49.7" y="581" width="0.2" height="15.0" fill="rgb(236,66,30)" rx="2" ry="2" />
<text  x="52.70" y="591.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.11%)</title><rect x="770.5" y="693" width="1.3" height="15.0" fill="rgb(207,77,27)" rx="2" ry="2" />
<text  x="773.49" y="703.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.09%)</title><rect x="700.4" y="773" width="1.1" height="15.0" fill="rgb(206,167,32)" rx="2" ry="2" />
<text  x="703.36" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (9 samples, 0.17%)</title><rect x="252.0" y="421" width="1.9" height="15.0" fill="rgb(241,84,19)" rx="2" ry="2" />
<text  x="254.96" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (52 samples, 0.97%)</title><rect x="511.8" y="581" width="11.4" height="15.0" fill="rgb(233,109,16)" rx="2" ry="2" />
<text  x="514.78" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (1 samples, 0.02%)</title><rect x="562.7" y="645" width="0.2" height="15.0" fill="rgb(214,169,8)" rx="2" ry="2" />
<text  x="565.73" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="757.5" y="661" width="0.4" height="15.0" fill="rgb(226,39,6)" rx="2" ry="2" />
<text  x="760.48" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="74.6" y="677" width="0.2" height="15.0" fill="rgb(222,176,9)" rx="2" ry="2" />
<text  x="77.62" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.07%)</title><rect x="33.8" y="613" width="0.9" height="15.0" fill="rgb(243,69,30)" rx="2" ry="2" />
<text  x="36.82" y="623.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="721.3" y="757" width="0.2" height="15.0" fill="rgb(251,50,45)" rx="2" ry="2" />
<text  x="724.31" y="767.5" ></text>
</g>
<g >
<title>secondary_index::secondary_index_manager::list_indexes (1 samples, 0.02%)</title><rect x="60.5" y="661" width="0.2" height="15.0" fill="rgb(229,96,33)" rx="2" ry="2" />
<text  x="63.51" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="448.0" y="533" width="0.3" height="15.0" fill="rgb(217,203,16)" rx="2" ry="2" />
<text  x="451.03" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="73.5" y="773" width="0.2" height="15.0" fill="rgb(243,51,33)" rx="2" ry="2" />
<text  x="76.52" y="783.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="961.7" y="677" width="0.2" height="15.0" fill="rgb(231,124,7)" rx="2" ry="2" />
<text  x="964.72" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="978.3" y="629" width="0.2" height="15.0" fill="rgb(228,20,41)" rx="2" ry="2" />
<text  x="981.26" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%)</title><rect x="190.4" y="581" width="0.5" height="15.0" fill="rgb(209,43,25)" rx="2" ry="2" />
<text  x="193.42" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="559.4" y="613" width="0.7" height="15.0" fill="rgb(253,229,45)" rx="2" ry="2" />
<text  x="562.42" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="128.9" y="693" width="0.6" height="15.0" fill="rgb(247,164,14)" rx="2" ry="2" />
<text  x="131.88" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="667.9" y="741" width="0.3" height="15.0" fill="rgb(236,35,33)" rx="2" ry="2" />
<text  x="670.93" y="751.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (5 samples, 0.09%)</title><rect x="101.3" y="773" width="1.1" height="15.0" fill="rgb(211,228,3)" rx="2" ry="2" />
<text  x="104.31" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="691.5" y="789" width="0.5" height="15.0" fill="rgb(244,89,17)" rx="2" ry="2" />
<text  x="694.53" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="575.7" y="693" width="0.9" height="15.0" fill="rgb(252,213,16)" rx="2" ry="2" />
<text  x="578.74" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (44 samples, 0.82%)</title><rect x="190.9" y="581" width="9.7" height="15.0" fill="rgb(229,147,33)" rx="2" ry="2" />
<text  x="193.86" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="552.1" y="549" width="0.3" height="15.0" fill="rgb(238,108,39)" rx="2" ry="2" />
<text  x="555.14" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%)</title><rect x="376.8" y="485" width="0.2" height="15.0" fill="rgb(230,192,49)" rx="2" ry="2" />
<text  x="379.79" y="495.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="103.5" y="741" width="0.2" height="15.0" fill="rgb(250,209,14)" rx="2" ry="2" />
<text  x="106.52" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="999.4" y="581" width="0.3" height="15.0" fill="rgb(211,219,27)" rx="2" ry="2" />
<text  x="1002.44" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (7 samples, 0.13%)</title><rect x="1158.0" y="773" width="1.6" height="15.0" fill="rgb(229,146,3)" rx="2" ry="2" />
<text  x="1161.02" y="783.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="69.1" y="661" width="0.2" height="15.0" fill="rgb(247,119,15)" rx="2" ry="2" />
<text  x="72.11" y="671.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1119.4" y="485" width="0.2" height="15.0" fill="rgb(239,127,30)" rx="2" ry="2" />
<text  x="1122.42" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="39.3" y="453" width="0.3" height="15.0" fill="rgb(242,13,52)" rx="2" ry="2" />
<text  x="42.33" y="463.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="637.7" y="741" width="0.2" height="15.0" fill="rgb(226,133,34)" rx="2" ry="2" />
<text  x="640.72" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1064.5" y="629" width="0.2" height="15.0" fill="rgb(236,118,34)" rx="2" ry="2" />
<text  x="1067.50" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="918.3" y="629" width="0.4" height="15.0" fill="rgb(236,179,3)" rx="2" ry="2" />
<text  x="921.27" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.09%)</title><rect x="132.6" y="677" width="1.1" height="15.0" fill="rgb(211,10,42)" rx="2" ry="2" />
<text  x="135.63" y="687.5" ></text>
</g>
<g >
<title>schema::partition_key_size (2 samples, 0.04%)</title><rect x="678.1" y="773" width="0.4" height="15.0" fill="rgb(249,16,39)" rx="2" ry="2" />
<text  x="681.08" y="783.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="101.1" y="789" width="0.2" height="15.0" fill="rgb(241,77,17)" rx="2" ry="2" />
<text  x="104.09" y="799.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%)</title><rect x="17.5" y="837" width="0.2" height="15.0" fill="rgb(208,15,18)" rx="2" ry="2" />
<text  x="20.50" y="847.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="102.0" y="389" width="0.2" height="15.0" fill="rgb(205,212,10)" rx="2" ry="2" />
<text  x="104.97" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="704.5" y="757" width="0.3" height="15.0" fill="rgb(229,194,27)" rx="2" ry="2" />
<text  x="707.55" y="767.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="104.0" y="789" width="0.2" height="15.0" fill="rgb(245,186,38)" rx="2" ry="2" />
<text  x="106.96" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="877.9" y="485" width="0.2" height="15.0" fill="rgb(254,25,20)" rx="2" ry="2" />
<text  x="880.91" y="495.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="730.1" y="661" width="0.3" height="15.0" fill="rgb(233,223,2)" rx="2" ry="2" />
<text  x="733.13" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="265.6" y="437" width="0.3" height="15.0" fill="rgb(229,228,40)" rx="2" ry="2" />
<text  x="268.63" y="447.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="876.8" y="677" width="0.2" height="15.0" fill="rgb(235,133,53)" rx="2" ry="2" />
<text  x="879.80" y="687.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="701.2" y="741" width="0.3" height="15.0" fill="rgb(212,55,2)" rx="2" ry="2" />
<text  x="704.24" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="805.1" y="517" width="0.2" height="15.0" fill="rgb(236,195,4)" rx="2" ry="2" />
<text  x="808.12" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="940.8" y="693" width="0.2" height="15.0" fill="rgb(247,161,52)" rx="2" ry="2" />
<text  x="943.77" y="703.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result_extra&lt;stat&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="869" width="0.2" height="15.0" fill="rgb(243,216,24)" rx="2" ry="2" />
<text  x="1192.78" y="879.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (35 samples, 0.65%)</title><rect x="515.1" y="533" width="7.7" height="15.0" fill="rgb(232,202,15)" rx="2" ry="2" />
<text  x="518.08" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,455 samples, 45.89%)</title><rect x="113.0" y="773" width="541.5" height="15.0" fill="rgb(235,91,2)" rx="2" ry="2" />
<text  x="116.00" y="783.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1051.7" y="565" width="0.2" height="15.0" fill="rgb(213,89,21)" rx="2" ry="2" />
<text  x="1054.71" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (2 samples, 0.04%)</title><rect x="16.8" y="853" width="0.5" height="15.0" fill="rgb(232,125,33)" rx="2" ry="2" />
<text  x="19.84" y="863.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1136.0" y="565" width="0.2" height="15.0" fill="rgb(220,65,37)" rx="2" ry="2" />
<text  x="1138.96" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (13 samples, 0.24%)</title><rect x="275.3" y="485" width="2.9" height="15.0" fill="rgb(238,119,8)" rx="2" ry="2" />
<text  x="278.33" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="22.6" y="677" width="0.2" height="15.0" fill="rgb(211,115,50)" rx="2" ry="2" />
<text  x="25.57" y="687.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="536.9" y="565" width="0.7" height="15.0" fill="rgb(205,118,8)" rx="2" ry="2" />
<text  x="539.92" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (2 samples, 0.04%)</title><rect x="18.2" y="821" width="0.4" height="15.0" fill="rgb(243,83,50)" rx="2" ry="2" />
<text  x="21.16" y="831.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (525 samples, 9.81%)</title><rect x="740.1" y="757" width="115.8" height="15.0" fill="rgb(251,3,39)" rx="2" ry="2" />
<text  x="743.06" y="767.5" >single_node_cq..</text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="537.6" y="549" width="0.2" height="15.0" fill="rgb(205,100,19)" rx="2" ry="2" />
<text  x="540.58" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1115.2" y="725" width="0.7" height="15.0" fill="rgb(209,24,17)" rx="2" ry="2" />
<text  x="1118.23" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="33.8" y="533" width="0.2" height="15.0" fill="rgb(241,69,54)" rx="2" ry="2" />
<text  x="36.82" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="741.6" y="709" width="0.2" height="15.0" fill="rgb(241,199,14)" rx="2" ry="2" />
<text  x="744.60" y="719.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="15.5" y="853" width="0.2" height="15.0" fill="rgb(253,228,14)" rx="2" ry="2" />
<text  x="18.51" y="863.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="62.5" y="661" width="0.2" height="15.0" fill="rgb(234,174,36)" rx="2" ry="2" />
<text  x="65.49" y="671.5" ></text>
</g>
<g >
<title>abstract_type::is_collection (1 samples, 0.02%)</title><rect x="57.4" y="677" width="0.2" height="15.0" fill="rgb(216,94,53)" rx="2" ry="2" />
<text  x="60.42" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="40.2" y="453" width="0.2" height="15.0" fill="rgb(214,81,46)" rx="2" ry="2" />
<text  x="43.22" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="101.3" y="597" width="0.5" height="15.0" fill="rgb(238,194,29)" rx="2" ry="2" />
<text  x="104.31" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="154.2" y="741" width="0.3" height="15.0" fill="rgb(208,78,39)" rx="2" ry="2" />
<text  x="157.25" y="751.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="671.9" y="773" width="0.4" height="15.0" fill="rgb(240,58,49)" rx="2" ry="2" />
<text  x="674.90" y="783.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="1166.8" y="805" width="0.3" height="15.0" fill="rgb(215,37,50)" rx="2" ry="2" />
<text  x="1169.84" y="815.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%)</title><rect x="648.3" y="725" width="0.7" height="15.0" fill="rgb(226,163,31)" rx="2" ry="2" />
<text  x="651.30" y="735.5" ></text>
</g>
<g >
<title>unimplemented::warn (2 samples, 0.04%)</title><rect x="72.9" y="789" width="0.4" height="15.0" fill="rgb(207,64,12)" rx="2" ry="2" />
<text  x="75.86" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="53.0" y="661" width="0.2" height="15.0" fill="rgb(227,72,17)" rx="2" ry="2" />
<text  x="56.01" y="671.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (5 samples, 0.09%)</title><rect x="101.3" y="661" width="1.1" height="15.0" fill="rgb(241,25,1)" rx="2" ry="2" />
<text  x="104.31" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="39.3" y="629" width="0.3" height="15.0" fill="rgb(211,23,14)" rx="2" ry="2" />
<text  x="42.33" y="639.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%)</title><rect x="1135.3" y="453" width="0.2" height="15.0" fill="rgb(229,175,6)" rx="2" ry="2" />
<text  x="1138.30" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (7 samples, 0.13%)</title><rect x="60.9" y="629" width="1.6" height="15.0" fill="rgb(225,98,50)" rx="2" ry="2" />
<text  x="63.95" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="941.0" y="677" width="0.2" height="15.0" fill="rgb(229,68,34)" rx="2" ry="2" />
<text  x="943.99" y="687.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="651.2" y="693" width="0.4" height="15.0" fill="rgb(217,51,16)" rx="2" ry="2" />
<text  x="654.17" y="703.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="24.6" y="549" width="0.2" height="15.0" fill="rgb(242,200,48)" rx="2" ry="2" />
<text  x="27.56" y="559.5" ></text>
</g>
<g >
<title>all (5,350 samples, 100%)</title><rect x="10.0" y="965" width="1180.0" height="15.0" fill="rgb(242,7,41)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="37.1" y="469" width="0.5" height="15.0" fill="rgb(232,23,29)" rx="2" ry="2" />
<text  x="40.13" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.07%)</title><rect x="34.7" y="629" width="0.9" height="15.0" fill="rgb(244,32,20)" rx="2" ry="2" />
<text  x="37.70" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="80.8" y="821" width="0.2" height="15.0" fill="rgb(238,45,13)" rx="2" ry="2" />
<text  x="83.80" y="831.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (25 samples, 0.47%)</title><rect x="943.0" y="709" width="5.5" height="15.0" fill="rgb(220,22,44)" rx="2" ry="2" />
<text  x="945.97" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (376 samples, 7.03%)</title><rect x="350.8" y="549" width="82.9" height="15.0" fill="rgb(217,141,28)" rx="2" ry="2" />
<text  x="353.77" y="559.5" >flat_muta..</text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="16.2" y="837" width="0.2" height="15.0" fill="rgb(234,168,27)" rx="2" ry="2" />
<text  x="19.18" y="847.5" ></text>
</g>
<g >
<title>posix_memalign (15 samples, 0.28%)</title><rect x="244.9" y="357" width="3.3" height="15.0" fill="rgb(219,7,35)" rx="2" ry="2" />
<text  x="247.90" y="367.5" ></text>
</g>
<g >
<title>row::row (147 samples, 2.75%)</title><rect x="226.1" y="453" width="32.5" height="15.0" fill="rgb(230,9,31)" rx="2" ry="2" />
<text  x="229.15" y="463.5" >ro..</text>
</g>
<g >
<title>__setcontext (1 samples, 0.02%)</title><rect x="708.1" y="725" width="0.2" height="15.0" fill="rgb(207,199,6)" rx="2" ry="2" />
<text  x="711.07" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.80%)</title><rect x="1126.7" y="725" width="9.5" height="15.0" fill="rgb(233,198,27)" rx="2" ry="2" />
<text  x="1129.70" y="735.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1052.4" y="629" width="0.6" height="15.0" fill="rgb(213,198,47)" rx="2" ry="2" />
<text  x="1055.37" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="101.3" y="421" width="0.5" height="15.0" fill="rgb(214,40,7)" rx="2" ry="2" />
<text  x="104.31" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="613.9" y="661" width="0.2" height="15.0" fill="rgb(234,93,25)" rx="2" ry="2" />
<text  x="616.90" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="1146.3" y="741" width="1.8" height="15.0" fill="rgb(230,59,48)" rx="2" ry="2" />
<text  x="1149.33" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1094.9" y="677" width="0.3" height="15.0" fill="rgb(214,4,43)" rx="2" ry="2" />
<text  x="1097.94" y="687.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="61.4" y="597" width="0.7" height="15.0" fill="rgb(249,207,34)" rx="2" ry="2" />
<text  x="64.39" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (8 samples, 0.15%)</title><rect x="726.4" y="741" width="1.7" height="15.0" fill="rgb(221,183,15)" rx="2" ry="2" />
<text  x="729.38" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (4 samples, 0.07%)</title><rect x="782.6" y="661" width="0.9" height="15.0" fill="rgb(227,4,11)" rx="2" ry="2" />
<text  x="785.62" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.65%)</title><rect x="1118.5" y="677" width="7.8" height="15.0" fill="rgb(236,8,15)" rx="2" ry="2" />
<text  x="1121.54" y="687.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.11%)</title><rect x="1015.3" y="485" width="1.3" height="15.0" fill="rgb(223,209,20)" rx="2" ry="2" />
<text  x="1018.32" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.11%)</title><rect x="258.6" y="453" width="1.3" height="15.0" fill="rgb(254,121,50)" rx="2" ry="2" />
<text  x="261.57" y="463.5" ></text>
</g>
<g >
<title>ser::start_frame&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1125.2" y="549" width="0.2" height="15.0" fill="rgb(253,17,52)" rx="2" ry="2" />
<text  x="1128.16" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,940 samples, 92.34%)</title><rect x="79.5" y="853" width="1089.5" height="15.0" fill="rgb(232,209,30)" rx="2" ry="2" />
<text  x="82.48" y="863.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="60.1" y="597" width="0.2" height="15.0" fill="rgb(240,119,38)" rx="2" ry="2" />
<text  x="63.07" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="47.9" y="565" width="0.3" height="15.0" fill="rgb(242,135,51)" rx="2" ry="2" />
<text  x="50.94" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="999.0" y="581" width="0.4" height="15.0" fill="rgb(226,191,6)" rx="2" ry="2" />
<text  x="1001.99" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (13 samples, 0.24%)</title><rect x="581.9" y="693" width="2.9" height="15.0" fill="rgb(229,180,0)" rx="2" ry="2" />
<text  x="584.91" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_keyspace_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="53.2" y="677" width="0.3" height="15.0" fill="rgb(216,227,50)" rx="2" ry="2" />
<text  x="56.23" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%)</title><rect x="74.6" y="613" width="0.2" height="15.0" fill="rgb(226,79,25)" rx="2" ry="2" />
<text  x="77.62" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (8 samples, 0.15%)</title><rect x="289.2" y="501" width="1.8" height="15.0" fill="rgb(219,174,31)" rx="2" ry="2" />
<text  x="292.23" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%)</title><rect x="981.6" y="597" width="0.6" height="15.0" fill="rgb(205,9,45)" rx="2" ry="2" />
<text  x="984.57" y="607.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (2 samples, 0.04%)</title><rect x="879.0" y="533" width="0.5" height="15.0" fill="rgb(206,92,21)" rx="2" ry="2" />
<text  x="882.01" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="101.1" y="725" width="0.2" height="15.0" fill="rgb(253,229,46)" rx="2" ry="2" />
<text  x="104.09" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="918.7" y="661" width="0.2" height="15.0" fill="rgb(240,141,20)" rx="2" ry="2" />
<text  x="921.71" y="671.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="328.9" y="709" width="0.3" height="15.0" fill="rgb(216,185,16)" rx="2" ry="2" />
<text  x="331.93" y="719.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="623.8" y="693" width="1.3" height="15.0" fill="rgb(236,73,28)" rx="2" ry="2" />
<text  x="626.82" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="283.3" y="549" width="0.2" height="15.0" fill="rgb(238,208,30)" rx="2" ry="2" />
<text  x="286.27" y="559.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="1152.3" y="693" width="0.9" height="15.0" fill="rgb(234,124,16)" rx="2" ry="2" />
<text  x="1155.28" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (9 samples, 0.17%)</title><rect x="812.6" y="453" width="2.0" height="15.0" fill="rgb(233,144,32)" rx="2" ry="2" />
<text  x="815.62" y="463.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.3" y="533" width="0.2" height="15.0" fill="rgb(235,91,39)" rx="2" ry="2" />
<text  x="46.30" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="574.2" y="645" width="0.2" height="15.0" fill="rgb(243,213,4)" rx="2" ry="2" />
<text  x="577.19" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1132.7" y="389" width="0.2" height="15.0" fill="rgb(250,136,38)" rx="2" ry="2" />
<text  x="1135.65" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="22.4" y="645" width="0.2" height="15.0" fill="rgb(222,64,22)" rx="2" ry="2" />
<text  x="25.35" y="655.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="1133.5" y="437" width="0.3" height="15.0" fill="rgb(239,103,50)" rx="2" ry="2" />
<text  x="1136.54" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::constant::constant (1 samples, 0.02%)</title><rect x="57.6" y="677" width="0.3" height="15.0" fill="rgb(253,35,49)" rx="2" ry="2" />
<text  x="60.64" y="687.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.09%)</title><rect x="1060.5" y="597" width="1.1" height="15.0" fill="rgb(236,87,14)" rx="2" ry="2" />
<text  x="1063.53" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="847.7" y="709" width="2.0" height="15.0" fill="rgb(235,181,21)" rx="2" ry="2" />
<text  x="850.69" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="613.9" y="645" width="0.2" height="15.0" fill="rgb(254,81,24)" rx="2" ry="2" />
<text  x="616.90" y="655.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="229" width="0.3" height="15.0" fill="rgb(224,51,52)" rx="2" ry="2" />
<text  x="104.53" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1089.0" y="693" width="0.2" height="15.0" fill="rgb(222,206,26)" rx="2" ry="2" />
<text  x="1091.98" y="703.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1065.8" y="613" width="0.5" height="15.0" fill="rgb(208,155,54)" rx="2" ry="2" />
<text  x="1068.82" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="37.6" y="629" width="0.2" height="15.0" fill="rgb(222,178,9)" rx="2" ry="2" />
<text  x="40.57" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.0" y="517" width="0.2" height="15.0" fill="rgb(218,186,44)" rx="2" ry="2" />
<text  x="43.00" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (27 samples, 0.50%)</title><rect x="242.3" y="389" width="5.9" height="15.0" fill="rgb(218,72,53)" rx="2" ry="2" />
<text  x="245.25" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (75 samples, 1.40%)</title><rect x="590.3" y="677" width="16.5" height="15.0" fill="rgb(208,105,31)" rx="2" ry="2" />
<text  x="593.30" y="687.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1169.0" y="853" width="0.3" height="15.0" fill="rgb(234,145,11)" rx="2" ry="2" />
<text  x="1172.05" y="863.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="139.5" y="725" width="0.2" height="15.0" fill="rgb(254,193,42)" rx="2" ry="2" />
<text  x="142.47" y="735.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="48.8" y="485" width="0.2" height="15.0" fill="rgb(240,137,38)" rx="2" ry="2" />
<text  x="51.82" y="495.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (3 samples, 0.06%)</title><rect x="1128.2" y="549" width="0.7" height="15.0" fill="rgb(235,52,4)" rx="2" ry="2" />
<text  x="1131.24" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (77 samples, 1.44%)</title><rect x="413.0" y="501" width="16.9" height="15.0" fill="rgb(216,22,10)" rx="2" ry="2" />
<text  x="415.96" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (1 samples, 0.02%)</title><rect x="32.9" y="629" width="0.3" height="15.0" fill="rgb(248,163,45)" rx="2" ry="2" />
<text  x="35.94" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="33.8" y="501" width="0.2" height="15.0" fill="rgb(234,88,0)" rx="2" ry="2" />
<text  x="36.82" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1047.7" y="613" width="0.3" height="15.0" fill="rgb(206,163,54)" rx="2" ry="2" />
<text  x="1050.74" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="805.8" y="501" width="0.2" height="15.0" fill="rgb(244,180,22)" rx="2" ry="2" />
<text  x="808.78" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="650.1" y="741" width="0.2" height="15.0" fill="rgb(242,128,43)" rx="2" ry="2" />
<text  x="653.07" y="751.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="185.3" y="565" width="0.5" height="15.0" fill="rgb(210,65,23)" rx="2" ry="2" />
<text  x="188.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="726.2" y="757" width="0.2" height="15.0" fill="rgb(216,102,25)" rx="2" ry="2" />
<text  x="729.16" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="265.0" y="421" width="0.2" height="15.0" fill="rgb(211,111,30)" rx="2" ry="2" />
<text  x="267.97" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="103.7" y="741" width="0.3" height="15.0" fill="rgb(235,81,20)" rx="2" ry="2" />
<text  x="106.74" y="751.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (9 samples, 0.17%)</title><rect x="632.9" y="741" width="1.9" height="15.0" fill="rgb(207,131,1)" rx="2" ry="2" />
<text  x="635.86" y="751.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="708.5" y="789" width="0.7" height="15.0" fill="rgb(227,222,9)" rx="2" ry="2" />
<text  x="711.52" y="799.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (88 samples, 1.64%)</title><rect x="668.8" y="805" width="19.4" height="15.0" fill="rgb(239,169,36)" rx="2" ry="2" />
<text  x="671.81" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="632.0" y="677" width="0.2" height="15.0" fill="rgb(247,206,32)" rx="2" ry="2" />
<text  x="634.98" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="679.0" y="773" width="0.2" height="15.0" fill="rgb(245,145,3)" rx="2" ry="2" />
<text  x="681.96" y="783.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%)</title><rect x="913.0" y="693" width="0.4" height="15.0" fill="rgb(234,90,25)" rx="2" ry="2" />
<text  x="915.98" y="703.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%)</title><rect x="17.5" y="709" width="0.2" height="15.0" fill="rgb(221,70,0)" rx="2" ry="2" />
<text  x="20.50" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="575.5" y="629" width="0.2" height="15.0" fill="rgb(243,184,8)" rx="2" ry="2" />
<text  x="578.52" y="639.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="16.6" y="853" width="0.2" height="15.0" fill="rgb(214,153,21)" rx="2" ry="2" />
<text  x="19.62" y="863.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1127.8" y="549" width="0.2" height="15.0" fill="rgb(221,75,42)" rx="2" ry="2" />
<text  x="1130.80" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="15.5" y="629" width="0.2" height="15.0" fill="rgb(209,136,38)" rx="2" ry="2" />
<text  x="18.51" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%)</title><rect x="870.0" y="757" width="0.6" height="15.0" fill="rgb(253,120,18)" rx="2" ry="2" />
<text  x="872.97" y="767.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (6 samples, 0.11%)</title><rect x="270.5" y="453" width="1.3" height="15.0" fill="rgb(249,210,0)" rx="2" ry="2" />
<text  x="273.48" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="35.6" y="597" width="0.2" height="15.0" fill="rgb(246,218,53)" rx="2" ry="2" />
<text  x="38.59" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="101.5" y="149" width="0.3" height="15.0" fill="rgb(207,49,39)" rx="2" ry="2" />
<text  x="104.53" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (81 samples, 1.51%)</title><rect x="1064.9" y="645" width="17.9" height="15.0" fill="rgb(235,42,11)" rx="2" ry="2" />
<text  x="1067.94" y="655.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="32.5" y="613" width="0.4" height="15.0" fill="rgb(205,67,51)" rx="2" ry="2" />
<text  x="35.50" y="623.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (16 samples, 0.30%)</title><rect x="433.9" y="549" width="3.5" height="15.0" fill="rgb(207,197,17)" rx="2" ry="2" />
<text  x="436.92" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="978.0" y="597" width="0.3" height="15.0" fill="rgb(252,128,27)" rx="2" ry="2" />
<text  x="981.04" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (24 samples, 0.45%)</title><rect x="742.5" y="709" width="5.3" height="15.0" fill="rgb(240,64,51)" rx="2" ry="2" />
<text  x="745.48" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.3" y="661" width="0.2" height="15.0" fill="rgb(207,65,17)" rx="2" ry="2" />
<text  x="20.28" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="128.7" y="693" width="0.2" height="15.0" fill="rgb(240,54,36)" rx="2" ry="2" />
<text  x="131.66" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1137.1" y="789" width="0.2" height="15.0" fill="rgb(247,18,15)" rx="2" ry="2" />
<text  x="1140.07" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (4 samples, 0.07%)</title><rect x="489.7" y="565" width="0.9" height="15.0" fill="rgb(237,149,54)" rx="2" ry="2" />
<text  x="492.72" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume (4 samples, 0.07%)</title><rect x="434.6" y="533" width="0.9" height="15.0" fill="rgb(254,135,42)" rx="2" ry="2" />
<text  x="437.58" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="1101.6" y="709" width="0.6" height="15.0" fill="rgb(223,30,14)" rx="2" ry="2" />
<text  x="1104.56" y="719.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1 samples, 0.02%)</title><rect x="659.6" y="805" width="0.2" height="15.0" fill="rgb(227,186,11)" rx="2" ry="2" />
<text  x="662.55" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="730.1" y="693" width="0.3" height="15.0" fill="rgb(251,130,29)" rx="2" ry="2" />
<text  x="733.13" y="703.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="664.4" y="789" width="0.2" height="15.0" fill="rgb(231,33,13)" rx="2" ry="2" />
<text  x="667.40" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="49.7" y="533" width="0.2" height="15.0" fill="rgb(229,130,45)" rx="2" ry="2" />
<text  x="52.70" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (7 samples, 0.13%)</title><rect x="477.8" y="565" width="1.6" height="15.0" fill="rgb(209,78,20)" rx="2" ry="2" />
<text  x="480.81" y="575.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1133.3" y="437" width="0.2" height="15.0" fill="rgb(246,218,4)" rx="2" ry="2" />
<text  x="1136.32" y="447.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="544.4" y="501" width="0.9" height="15.0" fill="rgb(245,64,10)" rx="2" ry="2" />
<text  x="547.42" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="156.5" y="725" width="0.4" height="15.0" fill="rgb(231,144,3)" rx="2" ry="2" />
<text  x="159.45" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="52.1" y="645" width="0.2" height="15.0" fill="rgb(248,214,3)" rx="2" ry="2" />
<text  x="55.13" y="655.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1053.5" y="645" width="0.2" height="15.0" fill="rgb(250,223,30)" rx="2" ry="2" />
<text  x="1056.47" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="448.5" y="581" width="0.2" height="15.0" fill="rgb(212,162,21)" rx="2" ry="2" />
<text  x="451.47" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="63.2" y="677" width="0.2" height="15.0" fill="rgb(245,222,18)" rx="2" ry="2" />
<text  x="66.16" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="254.8" y="421" width="0.2" height="15.0" fill="rgb(223,187,14)" rx="2" ry="2" />
<text  x="257.82" y="431.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (13 samples, 0.24%)</title><rect x="542.9" y="533" width="2.8" height="15.0" fill="rgb(243,117,24)" rx="2" ry="2" />
<text  x="545.87" y="543.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (3 samples, 0.06%)</title><rect x="372.4" y="485" width="0.6" height="15.0" fill="rgb(232,52,23)" rx="2" ry="2" />
<text  x="375.38" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%)</title><rect x="1118.8" y="485" width="0.6" height="15.0" fill="rgb(213,161,24)" rx="2" ry="2" />
<text  x="1121.76" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (3 samples, 0.06%)</title><rect x="621.6" y="709" width="0.7" height="15.0" fill="rgb(214,57,24)" rx="2" ry="2" />
<text  x="624.61" y="719.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (5 samples, 0.09%)</title><rect x="101.3" y="613" width="1.1" height="15.0" fill="rgb(224,200,45)" rx="2" ry="2" />
<text  x="104.31" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="1167.9" y="789" width="0.3" height="15.0" fill="rgb(246,52,48)" rx="2" ry="2" />
<text  x="1170.94" y="799.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="654.7" y="789" width="0.2" height="15.0" fill="rgb(213,34,11)" rx="2" ry="2" />
<text  x="657.70" y="799.5" ></text>
</g>
<g >
<title>query::querier_base::close (140 samples, 2.62%)</title><rect x="588.3" y="741" width="30.9" height="15.0" fill="rgb(219,208,37)" rx="2" ry="2" />
<text  x="591.31" y="751.5" >qu..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="65.8" y="709" width="0.2" height="15.0" fill="rgb(220,112,44)" rx="2" ry="2" />
<text  x="68.80" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="87.4" y="789" width="0.2" height="15.0" fill="rgb(227,127,43)" rx="2" ry="2" />
<text  x="90.42" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="727.7" y="725" width="0.4" height="15.0" fill="rgb(245,200,18)" rx="2" ry="2" />
<text  x="730.70" y="735.5" ></text>
</g>
<g >
<title>seastar::thread_context::setup (1 samples, 0.02%)</title><rect x="708.1" y="741" width="0.2" height="15.0" fill="rgb(226,151,15)" rx="2" ry="2" />
<text  x="711.07" y="751.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (11 samples, 0.21%)</title><rect x="745.3" y="629" width="2.5" height="15.0" fill="rgb(241,208,12)" rx="2" ry="2" />
<text  x="748.35" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="211.4" y="469" width="0.4" height="15.0" fill="rgb(219,55,18)" rx="2" ry="2" />
<text  x="214.37" y="479.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (3 samples, 0.06%)</title><rect x="375.7" y="485" width="0.7" height="15.0" fill="rgb(235,52,11)" rx="2" ry="2" />
<text  x="378.69" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.21%)</title><rect x="161.5" y="725" width="2.5" height="15.0" fill="rgb(226,74,0)" rx="2" ry="2" />
<text  x="164.53" y="735.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%)</title><rect x="26.5" y="565" width="0.3" height="15.0" fill="rgb(225,36,5)" rx="2" ry="2" />
<text  x="29.54" y="575.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="29.6" y="549" width="0.3" height="15.0" fill="rgb(207,185,27)" rx="2" ry="2" />
<text  x="32.63" y="559.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="1167.1" y="789" width="0.2" height="15.0" fill="rgb(211,224,12)" rx="2" ry="2" />
<text  x="1170.06" y="799.5" ></text>
</g>
<g >
<title>table::as_mutation_source (11 samples, 0.21%)</title><rect x="650.7" y="741" width="2.5" height="15.0" fill="rgb(219,167,1)" rx="2" ry="2" />
<text  x="653.73" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="730.8" y="629" width="0.2" height="15.0" fill="rgb(211,95,16)" rx="2" ry="2" />
<text  x="733.79" y="639.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="102.2" y="533" width="0.2" height="15.0" fill="rgb(242,71,34)" rx="2" ry="2" />
<text  x="105.19" y="543.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="814.2" y="421" width="0.4" height="15.0" fill="rgb(220,213,12)" rx="2" ry="2" />
<text  x="817.16" y="431.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.11%)</title><rect x="75.5" y="709" width="1.3" height="15.0" fill="rgb(216,117,47)" rx="2" ry="2" />
<text  x="78.51" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (3 samples, 0.06%)</title><rect x="1137.3" y="789" width="0.6" height="15.0" fill="rgb(212,155,12)" rx="2" ry="2" />
<text  x="1140.29" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%)</title><rect x="1097.6" y="629" width="1.1" height="15.0" fill="rgb(207,141,34)" rx="2" ry="2" />
<text  x="1100.59" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="802.9" y="517" width="2.2" height="15.0" fill="rgb(235,87,27)" rx="2" ry="2" />
<text  x="805.92" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="36.0" y="517" width="0.2" height="15.0" fill="rgb(238,119,43)" rx="2" ry="2" />
<text  x="39.03" y="527.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (2 samples, 0.04%)</title><rect x="730.1" y="725" width="0.5" height="15.0" fill="rgb(243,46,35)" rx="2" ry="2" />
<text  x="733.13" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1036.9" y="533" width="0.7" height="15.0" fill="rgb(243,149,9)" rx="2" ry="2" />
<text  x="1039.93" y="543.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="17.5" y="581" width="0.2" height="15.0" fill="rgb(228,43,25)" rx="2" ry="2" />
<text  x="20.50" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,079 samples, 20.17%)</title><rect x="880.3" y="789" width="238.0" height="15.0" fill="rgb(231,164,21)" rx="2" ry="2" />
<text  x="883.33" y="799.5" >seastar::concrete_execution_sta..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="738.1" y="757" width="0.2" height="15.0" fill="rgb(253,103,36)" rx="2" ry="2" />
<text  x="741.07" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.07%)</title><rect x="443.2" y="469" width="0.9" height="15.0" fill="rgb(209,109,1)" rx="2" ry="2" />
<text  x="446.18" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (3 samples, 0.06%)</title><rect x="205.9" y="549" width="0.6" height="15.0" fill="rgb(225,7,50)" rx="2" ry="2" />
<text  x="208.86" y="559.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (15 samples, 0.28%)</title><rect x="1019.1" y="469" width="3.3" height="15.0" fill="rgb(221,38,15)" rx="2" ry="2" />
<text  x="1022.07" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="870.0" y="725" width="0.6" height="15.0" fill="rgb(248,94,39)" rx="2" ry="2" />
<text  x="872.97" y="735.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="213.4" y="517" width="2.4" height="15.0" fill="rgb(214,35,39)" rx="2" ry="2" />
<text  x="216.36" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="818.4" y="549" width="0.2" height="15.0" fill="rgb(249,55,15)" rx="2" ry="2" />
<text  x="821.36" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="94.7" y="693" width="0.4" height="15.0" fill="rgb(209,74,22)" rx="2" ry="2" />
<text  x="97.70" y="703.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="730.8" y="613" width="0.2" height="15.0" fill="rgb(240,49,9)" rx="2" ry="2" />
<text  x="733.79" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="695.5" y="741" width="0.2" height="15.0" fill="rgb(249,73,15)" rx="2" ry="2" />
<text  x="698.50" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (2 samples, 0.04%)</title><rect x="135.9" y="757" width="0.5" height="15.0" fill="rgb(225,97,9)" rx="2" ry="2" />
<text  x="138.94" y="767.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (72 samples, 1.35%)</title><rect x="591.0" y="661" width="15.8" height="15.0" fill="rgb(233,93,26)" rx="2" ry="2" />
<text  x="593.96" y="671.5" ></text>
</g>
<g >
<title>row::compact_and_expire (80 samples, 1.50%)</title><rect x="412.3" y="517" width="17.6" height="15.0" fill="rgb(240,160,8)" rx="2" ry="2" />
<text  x="415.30" y="527.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="877.9" y="565" width="0.4" height="15.0" fill="rgb(251,227,14)" rx="2" ry="2" />
<text  x="880.91" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1141.5" y="773" width="0.4" height="15.0" fill="rgb(222,217,25)" rx="2" ry="2" />
<text  x="1144.48" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;sstables::file_writer&gt;, sstables::sstable::make_component_file_writer (1 samples, 0.02%)</title><rect x="707.4" y="805" width="0.2" height="15.0" fill="rgb(234,199,10)" rx="2" ry="2" />
<text  x="710.41" y="815.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::indexes (1 samples, 0.02%)</title><rect x="17.3" y="565" width="0.2" height="15.0" fill="rgb(216,44,22)" rx="2" ry="2" />
<text  x="20.28" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="679.2" y="773" width="0.2" height="15.0" fill="rgb(244,164,43)" rx="2" ry="2" />
<text  x="682.18" y="783.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="24.1" y="501" width="0.2" height="15.0" fill="rgb(222,180,40)" rx="2" ry="2" />
<text  x="27.12" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.9" y="501" width="0.2" height="15.0" fill="rgb(245,61,11)" rx="2" ry="2" />
<text  x="41.89" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (13 samples, 0.24%)</title><rect x="245.3" y="341" width="2.9" height="15.0" fill="rgb(251,133,47)" rx="2" ry="2" />
<text  x="248.34" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%)</title><rect x="1136.0" y="613" width="0.2" height="15.0" fill="rgb(236,50,27)" rx="2" ry="2" />
<text  x="1138.96" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="49.5" y="597" width="0.2" height="15.0" fill="rgb(231,39,29)" rx="2" ry="2" />
<text  x="52.48" y="607.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="325" width="0.3" height="15.0" fill="rgb(214,139,16)" rx="2" ry="2" />
<text  x="104.53" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (12 samples, 0.22%)</title><rect x="745.1" y="645" width="2.7" height="15.0" fill="rgb(214,189,29)" rx="2" ry="2" />
<text  x="748.13" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (6 samples, 0.11%)</title><rect x="645.7" y="709" width="1.3" height="15.0" fill="rgb(240,56,44)" rx="2" ry="2" />
<text  x="648.66" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="49.5" y="613" width="0.2" height="15.0" fill="rgb(234,196,6)" rx="2" ry="2" />
<text  x="52.48" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (2 samples, 0.04%)</title><rect x="540.0" y="565" width="0.4" height="15.0" fill="rgb(213,168,50)" rx="2" ry="2" />
<text  x="543.01" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="800.0" y="533" width="0.3" height="15.0" fill="rgb(208,82,39)" rx="2" ry="2" />
<text  x="803.05" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (40 samples, 0.75%)</title><rect x="284.6" y="533" width="8.8" height="15.0" fill="rgb(210,85,3)" rx="2" ry="2" />
<text  x="287.60" y="543.5" ></text>
</g>
<g >
<title>create_partitions (255 samples, 4.77%)</title><rect x="17.9" y="837" width="56.3" height="15.0" fill="rgb(243,96,24)" rx="2" ry="2" />
<text  x="20.94" y="847.5" >creat..</text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="905.9" y="581" width="0.2" height="15.0" fill="rgb(222,146,3)" rx="2" ry="2" />
<text  x="908.92" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%)</title><rect x="173.0" y="677" width="0.7" height="15.0" fill="rgb(205,16,37)" rx="2" ry="2" />
<text  x="175.99" y="687.5" ></text>
</g>
<g >
<title>seastar::gate::enter (2 samples, 0.04%)</title><rect x="1028.8" y="549" width="0.4" height="15.0" fill="rgb(251,5,23)" rx="2" ry="2" />
<text  x="1031.77" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (2 samples, 0.04%)</title><rect x="45.3" y="549" width="0.4" height="15.0" fill="rgb(251,107,51)" rx="2" ry="2" />
<text  x="48.29" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="286.6" y="517" width="0.6" height="15.0" fill="rgb(220,130,23)" rx="2" ry="2" />
<text  x="289.58" y="527.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="1119.2" y="437" width="0.2" height="15.0" fill="rgb(238,207,9)" rx="2" ry="2" />
<text  x="1122.20" y="447.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="870.2" y="581" width="0.4" height="15.0" fill="rgb(235,9,36)" rx="2" ry="2" />
<text  x="873.19" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (8 samples, 0.15%)</title><rect x="23.2" y="597" width="1.8" height="15.0" fill="rgb(206,81,4)" rx="2" ry="2" />
<text  x="26.23" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%)</title><rect x="1104.0" y="725" width="0.4" height="15.0" fill="rgb(222,93,38)" rx="2" ry="2" />
<text  x="1106.98" y="735.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="721.3" y="741" width="0.2" height="15.0" fill="rgb(250,126,18)" rx="2" ry="2" />
<text  x="724.31" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="432.8" y="533" width="0.2" height="15.0" fill="rgb(206,194,28)" rx="2" ry="2" />
<text  x="435.81" y="543.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="103.5" y="757" width="0.2" height="15.0" fill="rgb(250,216,31)" rx="2" ry="2" />
<text  x="106.52" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="840.6" y="725" width="1.8" height="15.0" fill="rgb(246,155,7)" rx="2" ry="2" />
<text  x="843.63" y="735.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (14 samples, 0.26%)</title><rect x="1120.7" y="549" width="3.1" height="15.0" fill="rgb(239,82,25)" rx="2" ry="2" />
<text  x="1123.74" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="677.4" y="677" width="0.2" height="15.0" fill="rgb(216,52,5)" rx="2" ry="2" />
<text  x="680.42" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="615.0" y="677" width="0.2" height="15.0" fill="rgb(246,62,14)" rx="2" ry="2" />
<text  x="618.00" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="56.5" y="693" width="0.3" height="15.0" fill="rgb(234,14,36)" rx="2" ry="2" />
<text  x="59.54" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="57.6" y="645" width="0.3" height="15.0" fill="rgb(217,86,21)" rx="2" ry="2" />
<text  x="60.64" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,059 samples, 19.79%)</title><rect x="884.7" y="773" width="233.6" height="15.0" fill="rgb(211,153,17)" rx="2" ry="2" />
<text  x="887.74" y="783.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="135.5" y="757" width="0.2" height="15.0" fill="rgb(215,191,5)" rx="2" ry="2" />
<text  x="138.50" y="767.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::column_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.4" y="485" width="0.2" height="15.0" fill="rgb(248,8,22)" rx="2" ry="2" />
<text  x="1126.39" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (8 samples, 0.15%)</title><rect x="41.8" y="613" width="1.7" height="15.0" fill="rgb(211,181,31)" rx="2" ry="2" />
<text  x="44.76" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (2 samples, 0.04%)</title><rect x="66.0" y="677" width="0.5" height="15.0" fill="rgb(249,3,23)" rx="2" ry="2" />
<text  x="69.02" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.0" y="485" width="0.3" height="15.0" fill="rgb(224,137,18)" rx="2" ry="2" />
<text  x="52.04" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%)</title><rect x="813.5" y="421" width="0.4" height="15.0" fill="rgb(226,89,50)" rx="2" ry="2" />
<text  x="816.50" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="77.9" y="901" width="0.3" height="15.0" fill="rgb(231,46,24)" rx="2" ry="2" />
<text  x="80.93" y="911.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%)</title><rect x="101.5" y="261" width="0.3" height="15.0" fill="rgb(227,196,47)" rx="2" ry="2" />
<text  x="104.53" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.09%)</title><rect x="449.1" y="597" width="1.1" height="15.0" fill="rgb(229,3,14)" rx="2" ry="2" />
<text  x="452.14" y="607.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (5 samples, 0.09%)</title><rect x="1021.1" y="453" width="1.1" height="15.0" fill="rgb(253,222,44)" rx="2" ry="2" />
<text  x="1024.05" y="463.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.41%)</title><rect x="1007.6" y="549" width="4.8" height="15.0" fill="rgb(207,201,23)" rx="2" ry="2" />
<text  x="1010.60" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1102.4" y="709" width="0.5" height="15.0" fill="rgb(238,174,29)" rx="2" ry="2" />
<text  x="1105.44" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="744.5" y="645" width="0.6" height="15.0" fill="rgb(206,101,20)" rx="2" ry="2" />
<text  x="747.47" y="655.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="77.9" y="837" width="0.3" height="15.0" fill="rgb(225,26,13)" rx="2" ry="2" />
<text  x="80.93" y="847.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%)</title><rect x="1046.2" y="645" width="1.5" height="15.0" fill="rgb(225,152,13)" rx="2" ry="2" />
<text  x="1049.19" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="684.9" y="789" width="0.5" height="15.0" fill="rgb(205,137,51)" rx="2" ry="2" />
<text  x="687.92" y="799.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::file_data_sink_impl (1 samples, 0.02%)</title><rect x="707.4" y="741" width="0.2" height="15.0" fill="rgb(242,84,14)" rx="2" ry="2" />
<text  x="710.41" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="605.3" y="613" width="0.2" height="15.0" fill="rgb(212,128,29)" rx="2" ry="2" />
<text  x="608.29" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.07%)</title><rect x="23.9" y="565" width="0.9" height="15.0" fill="rgb(232,185,1)" rx="2" ry="2" />
<text  x="26.90" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="883.6" y="757" width="0.3" height="15.0" fill="rgb(232,3,52)" rx="2" ry="2" />
<text  x="886.64" y="767.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="101.5" y="69" width="0.3" height="15.0" fill="rgb(213,32,24)" rx="2" ry="2" />
<text  x="104.53" y="79.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (152 samples, 2.84%)</title><rect x="999.7" y="581" width="33.5" height="15.0" fill="rgb(213,0,35)" rx="2" ry="2" />
<text  x="1002.66" y="591.5" >se..</text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="643.7" y="725" width="1.3" height="15.0" fill="rgb(228,26,8)" rx="2" ry="2" />
<text  x="646.67" y="735.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1132.2" y="405" width="0.2" height="15.0" fill="rgb(230,131,52)" rx="2" ry="2" />
<text  x="1135.21" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::~storage_proxy (1 samples, 0.02%)</title><rect x="17.5" y="661" width="0.2" height="15.0" fill="rgb(221,86,40)" rx="2" ry="2" />
<text  x="20.50" y="671.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (15 samples, 0.28%)</title><rect x="1130.4" y="469" width="3.4" height="15.0" fill="rgb(214,55,22)" rx="2" ry="2" />
<text  x="1133.45" y="479.5" ></text>
</g>
<g >
<title>from_hex (3 samples, 0.06%)</title><rect x="56.8" y="645" width="0.6" height="15.0" fill="rgb(225,199,39)" rx="2" ry="2" />
<text  x="59.76" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (3 samples, 0.06%)</title><rect x="850.8" y="725" width="0.6" height="15.0" fill="rgb(208,142,36)" rx="2" ry="2" />
<text  x="853.78" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.07%)</title><rect x="1153.4" y="709" width="0.9" height="15.0" fill="rgb(217,75,21)" rx="2" ry="2" />
<text  x="1156.39" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="446.0" y="485" width="0.3" height="15.0" fill="rgb(205,196,12)" rx="2" ry="2" />
<text  x="449.05" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="456.9" y="677" width="0.4" height="15.0" fill="rgb(240,171,18)" rx="2" ry="2" />
<text  x="459.86" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::release (1 samples, 0.02%)</title><rect x="54.6" y="677" width="0.2" height="15.0" fill="rgb(227,207,54)" rx="2" ry="2" />
<text  x="57.55" y="687.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%)</title><rect x="654.3" y="741" width="0.2" height="15.0" fill="rgb(214,6,8)" rx="2" ry="2" />
<text  x="657.26" y="751.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="1030.1" y="565" width="1.5" height="15.0" fill="rgb(205,223,23)" rx="2" ry="2" />
<text  x="1033.09" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%)</title><rect x="673.0" y="709" width="1.8" height="15.0" fill="rgb(241,92,4)" rx="2" ry="2" />
<text  x="676.01" y="719.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="445.8" y="501" width="0.5" height="15.0" fill="rgb(239,122,27)" rx="2" ry="2" />
<text  x="448.83" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.6" y="901" width="0.2" height="15.0" fill="rgb(235,124,40)" rx="2" ry="2" />
<text  x="77.62" y="911.5" ></text>
</g>
<g >
<title>std::vector&lt;secondary_index::index, std::allocator&lt;secondary_index::index&gt; &gt;::_M_range_initialize&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, secondary_index::index, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="60.5" y="629" width="0.2" height="15.0" fill="rgb(242,81,39)" rx="2" ry="2" />
<text  x="63.51" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (8 samples, 0.15%)</title><rect x="1146.3" y="757" width="1.8" height="15.0" fill="rgb(230,169,1)" rx="2" ry="2" />
<text  x="1149.33" y="767.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%)</title><rect x="332.9" y="677" width="0.7" height="15.0" fill="rgb(252,19,7)" rx="2" ry="2" />
<text  x="335.90" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="17.5" y="469" width="0.2" height="15.0" fill="rgb(239,9,8)" rx="2" ry="2" />
<text  x="20.50" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="667.7" y="581" width="0.2" height="15.0" fill="rgb(211,40,22)" rx="2" ry="2" />
<text  x="670.71" y="591.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (2 samples, 0.04%)</title><rect x="609.7" y="661" width="0.4" height="15.0" fill="rgb(243,91,40)" rx="2" ry="2" />
<text  x="612.70" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="194.4" y="549" width="0.4" height="15.0" fill="rgb(221,43,10)" rx="2" ry="2" />
<text  x="197.39" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.39%)</title><rect x="743.1" y="661" width="4.7" height="15.0" fill="rgb(245,179,8)" rx="2" ry="2" />
<text  x="746.14" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (23 samples, 0.43%)</title><rect x="517.7" y="517" width="5.1" height="15.0" fill="rgb(226,228,3)" rx="2" ry="2" />
<text  x="520.73" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (15 samples, 0.28%)</title><rect x="944.1" y="677" width="3.3" height="15.0" fill="rgb(240,137,5)" rx="2" ry="2" />
<text  x="947.07" y="687.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="1099.3" y="709" width="0.3" height="15.0" fill="rgb(216,81,9)" rx="2" ry="2" />
<text  x="1102.35" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="658.0" y="789" width="0.2" height="15.0" fill="rgb(224,55,8)" rx="2" ry="2" />
<text  x="661.01" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="677.2" y="661" width="0.2" height="15.0" fill="rgb(225,98,46)" rx="2" ry="2" />
<text  x="680.20" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="737.4" y="725" width="0.5" height="15.0" fill="rgb(207,67,22)" rx="2" ry="2" />
<text  x="740.41" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="978.5" y="645" width="0.2" height="15.0" fill="rgb(208,29,27)" rx="2" ry="2" />
<text  x="981.48" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="38.2" y="597" width="0.3" height="15.0" fill="rgb(248,141,41)" rx="2" ry="2" />
<text  x="41.23" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="884.1" y="773" width="0.6" height="15.0" fill="rgb(214,124,44)" rx="2" ry="2" />
<text  x="887.08" y="783.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.07%)</title><rect x="1170.4" y="933" width="0.9" height="15.0" fill="rgb(249,179,30)" rx="2" ry="2" />
<text  x="1173.37" y="943.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%)</title><rect x="725.1" y="725" width="0.2" height="15.0" fill="rgb(232,144,46)" rx="2" ry="2" />
<text  x="728.06" y="735.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="280.6" y="517" width="0.5" height="15.0" fill="rgb(247,61,14)" rx="2" ry="2" />
<text  x="283.63" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="499.9" y="597" width="0.2" height="15.0" fill="rgb(234,216,13)" rx="2" ry="2" />
<text  x="502.87" y="607.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (16 samples, 0.30%)</title><rect x="505.8" y="565" width="3.5" height="15.0" fill="rgb(242,75,29)" rx="2" ry="2" />
<text  x="508.82" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::has_supporting_index (1 samples, 0.02%)</title><rect x="60.5" y="693" width="0.2" height="15.0" fill="rgb(217,187,13)" rx="2" ry="2" />
<text  x="63.51" y="703.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="723.3" y="725" width="0.2" height="15.0" fill="rgb(215,83,3)" rx="2" ry="2" />
<text  x="726.29" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="537.6" y="565" width="0.2" height="15.0" fill="rgb(224,45,45)" rx="2" ry="2" />
<text  x="540.58" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="17.3" y="613" width="0.2" height="15.0" fill="rgb(250,223,48)" rx="2" ry="2" />
<text  x="20.28" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="531.6" y="613" width="0.2" height="15.0" fill="rgb(213,207,37)" rx="2" ry="2" />
<text  x="534.63" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="101.5" y="133" width="0.3" height="15.0" fill="rgb(208,52,47)" rx="2" ry="2" />
<text  x="104.53" y="143.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="681.8" y="789" width="0.7" height="15.0" fill="rgb(251,81,1)" rx="2" ry="2" />
<text  x="684.83" y="799.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.09%)</title><rect x="102.6" y="789" width="1.1" height="15.0" fill="rgb(250,98,25)" rx="2" ry="2" />
<text  x="105.64" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.13%)</title><rect x="340.0" y="597" width="1.5" height="15.0" fill="rgb(221,112,2)" rx="2" ry="2" />
<text  x="342.96" y="607.5" ></text>
</g>
<g >
<title>schema::get_column_definition (4 samples, 0.07%)</title><rect x="65.1" y="725" width="0.9" height="15.0" fill="rgb(227,219,18)" rx="2" ry="2" />
<text  x="68.14" y="735.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1072.9" y="565" width="0.2" height="15.0" fill="rgb(219,77,5)" rx="2" ry="2" />
<text  x="1075.88" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1054.6" y="645" width="0.2" height="15.0" fill="rgb(224,207,32)" rx="2" ry="2" />
<text  x="1057.58" y="655.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="15.3" y="917" width="0.2" height="15.0" fill="rgb(234,109,35)" rx="2" ry="2" />
<text  x="18.29" y="927.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="131.1" y="709" width="0.2" height="15.0" fill="rgb(224,225,26)" rx="2" ry="2" />
<text  x="134.09" y="719.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::writer_of_column (1 samples, 0.02%)</title><rect x="1133.1" y="421" width="0.2" height="15.0" fill="rgb(206,155,40)" rx="2" ry="2" />
<text  x="1136.10" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::get_allocator (1 samples, 0.02%)</title><rect x="51.9" y="645" width="0.2" height="15.0" fill="rgb(215,78,27)" rx="2" ry="2" />
<text  x="54.91" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="47.7" y="613" width="0.2" height="15.0" fill="rgb(221,226,11)" rx="2" ry="2" />
<text  x="50.72" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="667.7" y="725" width="0.2" height="15.0" fill="rgb(213,128,0)" rx="2" ry="2" />
<text  x="670.71" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="570.2" y="581" width="0.2" height="15.0" fill="rgb(214,164,43)" rx="2" ry="2" />
<text  x="573.22" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (25 samples, 0.47%)</title><rect x="609.5" y="677" width="5.5" height="15.0" fill="rgb(235,213,39)" rx="2" ry="2" />
<text  x="612.48" y="687.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (161 samples, 3.01%)</title><rect x="19.7" y="757" width="35.5" height="15.0" fill="rgb(207,44,35)" rx="2" ry="2" />
<text  x="22.70" y="767.5" >cql..</text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="747.6" y="597" width="0.2" height="15.0" fill="rgb(235,197,53)" rx="2" ry="2" />
<text  x="750.56" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="40.0" y="629" width="0.4" height="15.0" fill="rgb(220,50,6)" rx="2" ry="2" />
<text  x="43.00" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="431.1" y="501" width="0.6" height="15.0" fill="rgb(208,161,15)" rx="2" ry="2" />
<text  x="434.05" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (13 samples, 0.24%)</title><rect x="347.9" y="549" width="2.9" height="15.0" fill="rgb(222,89,52)" rx="2" ry="2" />
<text  x="350.90" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="873.3" y="629" width="0.2" height="15.0" fill="rgb(232,192,28)" rx="2" ry="2" />
<text  x="876.27" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%)</title><rect x="491.7" y="629" width="0.2" height="15.0" fill="rgb(226,97,33)" rx="2" ry="2" />
<text  x="494.70" y="639.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="598.2" y="597" width="0.5" height="15.0" fill="rgb(246,32,26)" rx="2" ry="2" />
<text  x="601.24" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="584.6" y="565" width="0.2" height="15.0" fill="rgb(244,43,7)" rx="2" ry="2" />
<text  x="587.56" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="17.3" y="805" width="0.2" height="15.0" fill="rgb(241,98,13)" rx="2" ry="2" />
<text  x="20.28" y="815.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="54.8" y="677" width="0.2" height="15.0" fill="rgb(253,4,12)" rx="2" ry="2" />
<text  x="57.77" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="606.2" y="629" width="0.2" height="15.0" fill="rgb(253,154,30)" rx="2" ry="2" />
<text  x="609.18" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::constant&gt; (1 samples, 0.02%)</title><rect x="57.9" y="677" width="0.2" height="15.0" fill="rgb(230,62,9)" rx="2" ry="2" />
<text  x="60.86" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1102.9" y="709" width="0.2" height="15.0" fill="rgb(236,212,22)" rx="2" ry="2" />
<text  x="1105.88" y="719.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="650.9" y="709" width="0.7" height="15.0" fill="rgb(215,15,37)" rx="2" ry="2" />
<text  x="653.95" y="719.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="54.3" y="629" width="0.3" height="15.0" fill="rgb(228,132,48)" rx="2" ry="2" />
<text  x="57.33" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (1 samples, 0.02%)</title><rect x="872.8" y="661" width="0.3" height="15.0" fill="rgb(219,113,2)" rx="2" ry="2" />
<text  x="875.83" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="77.9" y="709" width="0.3" height="15.0" fill="rgb(244,132,5)" rx="2" ry="2" />
<text  x="80.93" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;clustering_key_prefix&gt;::empty (1 samples, 0.02%)</title><rect x="60.7" y="693" width="0.2" height="15.0" fill="rgb(249,196,17)" rx="2" ry="2" />
<text  x="63.73" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1061.6" y="597" width="0.5" height="15.0" fill="rgb(241,185,16)" rx="2" ry="2" />
<text  x="1064.63" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="596.3" y="581" width="0.2" height="15.0" fill="rgb(240,58,18)" rx="2" ry="2" />
<text  x="599.25" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (46 samples, 0.86%)</title><rect x="238.1" y="405" width="10.1" height="15.0" fill="rgb(249,146,27)" rx="2" ry="2" />
<text  x="241.06" y="415.5" ></text>
</g>
<g >
<title>table::flush (1 samples, 0.02%)</title><rect x="102.4" y="613" width="0.2" height="15.0" fill="rgb(206,139,34)" rx="2" ry="2" />
<text  x="105.41" y="623.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (38 samples, 0.71%)</title><rect x="578.2" y="725" width="8.3" height="15.0" fill="rgb(221,137,35)" rx="2" ry="2" />
<text  x="581.16" y="735.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="935.5" y="709" width="2.0" height="15.0" fill="rgb(219,14,2)" rx="2" ry="2" />
<text  x="938.47" y="719.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="1134.0" y="405" width="0.4" height="15.0" fill="rgb(232,189,49)" rx="2" ry="2" />
<text  x="1136.98" y="415.5" ></text>
</g>
<g >
<title>seastar::gate::enter (2 samples, 0.04%)</title><rect x="1028.3" y="485" width="0.5" height="15.0" fill="rgb(225,207,23)" rx="2" ry="2" />
<text  x="1031.33" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (10 samples, 0.19%)</title><rect x="808.7" y="437" width="2.2" height="15.0" fill="rgb(254,11,52)" rx="2" ry="2" />
<text  x="811.65" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.6" y="629" width="0.2" height="15.0" fill="rgb(214,104,19)" rx="2" ry="2" />
<text  x="38.59" y="639.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%)</title><rect x="921.8" y="661" width="0.7" height="15.0" fill="rgb(237,78,47)" rx="2" ry="2" />
<text  x="924.80" y="671.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1123.2" y="501" width="0.2" height="15.0" fill="rgb(233,218,23)" rx="2" ry="2" />
<text  x="1126.17" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (3 samples, 0.06%)</title><rect x="870.0" y="677" width="0.6" height="15.0" fill="rgb(250,145,19)" rx="2" ry="2" />
<text  x="872.97" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::make_file_impl (1 samples, 0.02%)</title><rect x="697.9" y="805" width="0.2" height="15.0" fill="rgb(205,119,6)" rx="2" ry="2" />
<text  x="700.93" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="49.3" y="597" width="0.2" height="15.0" fill="rgb(208,32,43)" rx="2" ry="2" />
<text  x="52.26" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (54 samples, 1.01%)</title><rect x="540.4" y="565" width="12.0" height="15.0" fill="rgb(238,31,41)" rx="2" ry="2" />
<text  x="543.45" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="48.4" y="645" width="0.2" height="15.0" fill="rgb(230,219,43)" rx="2" ry="2" />
<text  x="51.38" y="655.5" ></text>
</g>
<g >
<title>query_state::query_state (25 samples, 0.47%)</title><rect x="626.9" y="741" width="5.5" height="15.0" fill="rgb(246,48,42)" rx="2" ry="2" />
<text  x="629.91" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (31 samples, 0.58%)</title><rect x="941.9" y="725" width="6.8" height="15.0" fill="rgb(228,9,47)" rx="2" ry="2" />
<text  x="944.87" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.07%)</title><rect x="34.7" y="597" width="0.9" height="15.0" fill="rgb(208,158,45)" rx="2" ry="2" />
<text  x="37.70" y="607.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (1 samples, 0.02%)</title><rect x="139.5" y="501" width="0.2" height="15.0" fill="rgb(207,24,41)" rx="2" ry="2" />
<text  x="142.47" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume (213 samples, 3.98%)</title><rect x="363.8" y="517" width="47.0" height="15.0" fill="rgb(205,27,44)" rx="2" ry="2" />
<text  x="366.78" y="527.5" >quer..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.11%)</title><rect x="37.8" y="629" width="1.3" height="15.0" fill="rgb(234,164,0)" rx="2" ry="2" />
<text  x="40.79" y="639.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="74.0" y="789" width="0.2" height="15.0" fill="rgb(208,31,3)" rx="2" ry="2" />
<text  x="76.96" y="799.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (76 samples, 1.42%)</title><rect x="590.3" y="693" width="16.8" height="15.0" fill="rgb(210,145,5)" rx="2" ry="2" />
<text  x="593.30" y="703.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.5" y="757" width="0.2" height="15.0" fill="rgb(243,74,42)" rx="2" ry="2" />
<text  x="20.50" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="647.9" y="725" width="0.2" height="15.0" fill="rgb(212,188,36)" rx="2" ry="2" />
<text  x="650.86" y="735.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="34.7" y="485" width="0.7" height="15.0" fill="rgb(247,132,38)" rx="2" ry="2" />
<text  x="37.70" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (120 samples, 2.24%)</title><rect x="795.0" y="629" width="26.4" height="15.0" fill="rgb(240,156,19)" rx="2" ry="2" />
<text  x="797.98" y="639.5" >s..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1123.8" y="533" width="0.3" height="15.0" fill="rgb(246,33,46)" rx="2" ry="2" />
<text  x="1126.83" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1166.0" y="741" width="0.2" height="15.0" fill="rgb(216,58,42)" rx="2" ry="2" />
<text  x="1168.96" y="751.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="16.8" y="821" width="0.3" height="15.0" fill="rgb(221,34,6)" rx="2" ry="2" />
<text  x="19.84" y="831.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%)</title><rect x="102.6" y="725" width="0.5" height="15.0" fill="rgb(243,73,0)" rx="2" ry="2" />
<text  x="105.64" y="735.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="558.3" y="629" width="1.1" height="15.0" fill="rgb(245,184,20)" rx="2" ry="2" />
<text  x="561.31" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (7 samples, 0.13%)</title><rect x="832.0" y="613" width="1.6" height="15.0" fill="rgb(248,142,45)" rx="2" ry="2" />
<text  x="835.03" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.1" y="421" width="0.2" height="15.0" fill="rgb(250,217,29)" rx="2" ry="2" />
<text  x="44.10" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="834.9" y="677" width="0.2" height="15.0" fill="rgb(230,193,39)" rx="2" ry="2" />
<text  x="837.90" y="687.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1121.0" y="517" width="0.4" height="15.0" fill="rgb(213,228,26)" rx="2" ry="2" />
<text  x="1123.96" y="527.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (36 samples, 0.67%)</title><rect x="1118.3" y="709" width="8.0" height="15.0" fill="rgb(241,84,43)" rx="2" ry="2" />
<text  x="1121.32" y="719.5" ></text>
</g>
<g >
<title>table::query (2,333 samples, 43.61%)</title><rect x="139.9" y="757" width="514.6" height="15.0" fill="rgb(253,124,31)" rx="2" ry="2" />
<text  x="142.91" y="767.5" >table::query</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="595.8" y="597" width="0.2" height="15.0" fill="rgb(249,4,13)" rx="2" ry="2" />
<text  x="598.81" y="607.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (19 samples, 0.36%)</title><rect x="1130.2" y="485" width="4.2" height="15.0" fill="rgb(222,202,9)" rx="2" ry="2" />
<text  x="1133.23" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="835.6" y="629" width="0.2" height="15.0" fill="rgb(226,132,5)" rx="2" ry="2" />
<text  x="838.56" y="639.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="730.8" y="661" width="0.2" height="15.0" fill="rgb(212,17,20)" rx="2" ry="2" />
<text  x="733.79" y="671.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="76.2" y="565" width="0.2" height="15.0" fill="rgb(225,46,32)" rx="2" ry="2" />
<text  x="79.17" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flush_accounter::operator (2 samples, 0.04%)</title><rect x="75.7" y="645" width="0.5" height="15.0" fill="rgb(248,215,21)" rx="2" ry="2" />
<text  x="78.73" y="655.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%)</title><rect x="870.2" y="597" width="0.4" height="15.0" fill="rgb(219,51,5)" rx="2" ry="2" />
<text  x="873.19" y="607.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::close (1 samples, 0.02%)</title><rect x="707.4" y="501" width="0.2" height="15.0" fill="rgb(241,56,45)" rx="2" ry="2" />
<text  x="710.41" y="511.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_stream (1 samples, 0.02%)</title><rect x="101.8" y="565" width="0.2" height="15.0" fill="rgb(251,90,30)" rx="2" ry="2" />
<text  x="104.75" y="575.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (3 samples, 0.06%)</title><rect x="68.9" y="741" width="0.7" height="15.0" fill="rgb(212,167,42)" rx="2" ry="2" />
<text  x="71.89" y="751.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.07%)</title><rect x="340.4" y="581" width="0.9" height="15.0" fill="rgb(227,151,4)" rx="2" ry="2" />
<text  x="343.40" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="741.8" y="693" width="0.7" height="15.0" fill="rgb(246,88,29)" rx="2" ry="2" />
<text  x="744.82" y="703.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="718.2" y="773" width="0.2" height="15.0" fill="rgb(221,29,31)" rx="2" ry="2" />
<text  x="721.22" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="802.9" y="501" width="2.2" height="15.0" fill="rgb(221,113,36)" rx="2" ry="2" />
<text  x="805.92" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="313.7" y="645" width="0.5" height="15.0" fill="rgb(221,94,52)" rx="2" ry="2" />
<text  x="316.71" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="601.1" y="565" width="0.2" height="15.0" fill="rgb(248,128,17)" rx="2" ry="2" />
<text  x="604.10" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="65.1" y="693" width="0.7" height="15.0" fill="rgb(215,133,37)" rx="2" ry="2" />
<text  x="68.14" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="647.0" y="725" width="0.2" height="15.0" fill="rgb(224,10,2)" rx="2" ry="2" />
<text  x="649.98" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="962.8" y="677" width="0.2" height="15.0" fill="rgb(225,78,16)" rx="2" ry="2" />
<text  x="965.82" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="845.3" y="693" width="2.4" height="15.0" fill="rgb(242,165,45)" rx="2" ry="2" />
<text  x="848.26" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1166.2" y="805" width="0.4" height="15.0" fill="rgb(216,174,37)" rx="2" ry="2" />
<text  x="1169.18" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (27 samples, 0.50%)</title><rect x="642.1" y="741" width="6.0" height="15.0" fill="rgb(227,223,21)" rx="2" ry="2" />
<text  x="645.13" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="826.3" y="581" width="0.2" height="15.0" fill="rgb(248,65,0)" rx="2" ry="2" />
<text  x="829.30" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="761.0" y="565" width="0.2" height="15.0" fill="rgb(232,130,51)" rx="2" ry="2" />
<text  x="764.01" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.5" y="533" width="0.2" height="15.0" fill="rgb(232,165,5)" rx="2" ry="2" />
<text  x="52.48" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%)</title><rect x="1046.2" y="629" width="1.5" height="15.0" fill="rgb(205,71,41)" rx="2" ry="2" />
<text  x="1049.19" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="182.5" y="597" width="0.2" height="15.0" fill="rgb(232,48,37)" rx="2" ry="2" />
<text  x="185.48" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="677" width="0.2" height="15.0" fill="rgb(219,48,23)" rx="2" ry="2" />
<text  x="142.47" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (5 samples, 0.09%)</title><rect x="20.1" y="725" width="1.1" height="15.0" fill="rgb(218,205,20)" rx="2" ry="2" />
<text  x="23.15" y="735.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="95.1" y="757" width="0.5" height="15.0" fill="rgb(253,179,46)" rx="2" ry="2" />
<text  x="98.14" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="815.3" y="501" width="0.2" height="15.0" fill="rgb(229,109,9)" rx="2" ry="2" />
<text  x="818.27" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="112.6" y="773" width="0.4" height="15.0" fill="rgb(222,152,29)" rx="2" ry="2" />
<text  x="115.56" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%)</title><rect x="447.6" y="549" width="0.7" height="15.0" fill="rgb(254,157,50)" rx="2" ry="2" />
<text  x="450.59" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%)</title><rect x="73.5" y="805" width="0.2" height="15.0" fill="rgb(237,22,45)" rx="2" ry="2" />
<text  x="76.52" y="815.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (3 samples, 0.06%)</title><rect x="277.5" y="469" width="0.7" height="15.0" fill="rgb(216,7,4)" rx="2" ry="2" />
<text  x="280.54" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="730.8" y="757" width="0.2" height="15.0" fill="rgb(208,11,37)" rx="2" ry="2" />
<text  x="733.79" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="273.3" y="501" width="0.3" height="15.0" fill="rgb(243,213,9)" rx="2" ry="2" />
<text  x="276.35" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="99.1" y="789" width="0.2" height="15.0" fill="rgb(237,101,38)" rx="2" ry="2" />
<text  x="102.11" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (48 samples, 0.90%)</title><rect x="283.9" y="565" width="10.6" height="15.0" fill="rgb(236,63,17)" rx="2" ry="2" />
<text  x="286.94" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.3" y="693" width="0.2" height="15.0" fill="rgb(247,219,19)" rx="2" ry="2" />
<text  x="20.28" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="853.6" y="677" width="1.4" height="15.0" fill="rgb(223,129,41)" rx="2" ry="2" />
<text  x="856.64" y="687.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="68.4" y="709" width="0.3" height="15.0" fill="rgb(231,122,36)" rx="2" ry="2" />
<text  x="71.45" y="719.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1167.1" y="805" width="0.2" height="15.0" fill="rgb(219,180,52)" rx="2" ry="2" />
<text  x="1170.06" y="815.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%)</title><rect x="351.9" y="501" width="0.2" height="15.0" fill="rgb(226,44,1)" rx="2" ry="2" />
<text  x="354.87" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="548.2" y="501" width="0.4" height="15.0" fill="rgb(251,125,3)" rx="2" ry="2" />
<text  x="551.17" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (360 samples, 6.73%)</title><rect x="204.3" y="565" width="79.4" height="15.0" fill="rgb(213,91,23)" rx="2" ry="2" />
<text  x="207.31" y="575.5" >partition..</text>
</g>
<g >
<title>compound_type&lt; (13 samples, 0.24%)</title><rect x="931.3" y="661" width="2.8" height="15.0" fill="rgb(223,158,6)" rx="2" ry="2" />
<text  x="934.28" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="431.3" y="485" width="0.4" height="15.0" fill="rgb(248,6,33)" rx="2" ry="2" />
<text  x="434.27" y="495.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (55 samples, 1.03%)</title><rect x="1066.3" y="613" width="12.1" height="15.0" fill="rgb(238,143,5)" rx="2" ry="2" />
<text  x="1069.27" y="623.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%)</title><rect x="10.7" y="901" width="0.2" height="15.0" fill="rgb(230,85,2)" rx="2" ry="2" />
<text  x="13.66" y="911.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="1168.8" y="837" width="0.2" height="15.0" fill="rgb(245,75,48)" rx="2" ry="2" />
<text  x="1171.83" y="847.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (9 samples, 0.17%)</title><rect x="131.7" y="709" width="2.0" height="15.0" fill="rgb(244,53,30)" rx="2" ry="2" />
<text  x="134.75" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="38.2" y="501" width="0.3" height="15.0" fill="rgb(231,195,47)" rx="2" ry="2" />
<text  x="41.23" y="511.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%)</title><rect x="74.0" y="805" width="0.2" height="15.0" fill="rgb(244,217,30)" rx="2" ry="2" />
<text  x="76.96" y="815.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1162.7" y="757" width="0.2" height="15.0" fill="rgb(218,165,50)" rx="2" ry="2" />
<text  x="1165.65" y="767.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="904.2" y="597" width="0.4" height="15.0" fill="rgb(220,69,49)" rx="2" ry="2" />
<text  x="907.15" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.11%)</title><rect x="754.8" y="645" width="1.4" height="15.0" fill="rgb(246,130,41)" rx="2" ry="2" />
<text  x="757.83" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="91.8" y="757" width="0.2" height="15.0" fill="rgb(229,202,10)" rx="2" ry="2" />
<text  x="94.83" y="767.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (2 samples, 0.04%)</title><rect x="591.2" y="645" width="0.4" height="15.0" fill="rgb(238,47,11)" rx="2" ry="2" />
<text  x="594.18" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.9" y="533" width="0.4" height="15.0" fill="rgb(211,202,44)" rx="2" ry="2" />
<text  x="43.88" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="44.8" y="549" width="0.3" height="15.0" fill="rgb(218,49,0)" rx="2" ry="2" />
<text  x="47.85" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (32 samples, 0.60%)</title><rect x="855.9" y="757" width="7.0" height="15.0" fill="rgb(226,135,5)" rx="2" ry="2" />
<text  x="858.85" y="767.5" ></text>
</g>
<g >
<title>database::apply_in_memory (28 samples, 0.52%)</title><rect x="1118.8" y="597" width="6.1" height="15.0" fill="rgb(249,31,38)" rx="2" ry="2" />
<text  x="1121.76" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1125.4" y="565" width="0.2" height="15.0" fill="rgb(240,47,13)" rx="2" ry="2" />
<text  x="1128.38" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::operator= (1 samples, 0.02%)</title><rect x="17.5" y="693" width="0.2" height="15.0" fill="rgb(240,57,24)" rx="2" ry="2" />
<text  x="20.50" y="703.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.9" y="533" width="0.4" height="15.0" fill="rgb(234,11,53)" rx="2" ry="2" />
<text  x="45.86" y="543.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (47 samples, 0.88%)</title><rect x="352.8" y="501" width="10.3" height="15.0" fill="rgb(218,180,3)" rx="2" ry="2" />
<text  x="355.75" y="511.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="692.4" y="773" width="1.1" height="15.0" fill="rgb(226,31,27)" rx="2" ry="2" />
<text  x="695.41" y="783.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%)</title><rect x="110.8" y="773" width="1.3" height="15.0" fill="rgb(212,106,28)" rx="2" ry="2" />
<text  x="113.80" y="783.5" ></text>
</g>
<g >
<title>db::system_keyspace::update_tokens (1 samples, 0.02%)</title><rect x="17.7" y="757" width="0.2" height="15.0" fill="rgb(214,121,38)" rx="2" ry="2" />
<text  x="20.72" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="577.9" y="725" width="0.3" height="15.0" fill="rgb(228,120,33)" rx="2" ry="2" />
<text  x="580.94" y="735.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (13 samples, 0.24%)</title><rect x="69.8" y="789" width="2.8" height="15.0" fill="rgb(244,186,17)" rx="2" ry="2" />
<text  x="72.77" y="799.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="814.2" y="389" width="0.2" height="15.0" fill="rgb(222,101,4)" rx="2" ry="2" />
<text  x="817.16" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="45.7" y="549" width="0.3" height="15.0" fill="rgb(212,64,15)" rx="2" ry="2" />
<text  x="48.73" y="559.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="357" width="0.2" height="15.0" fill="rgb(214,112,12)" rx="2" ry="2" />
<text  x="104.97" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.0" y="533" width="0.3" height="15.0" fill="rgb(226,182,7)" rx="2" ry="2" />
<text  x="52.04" y="543.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="876.8" y="645" width="0.2" height="15.0" fill="rgb(207,134,16)" rx="2" ry="2" />
<text  x="879.80" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="676.8" y="693" width="0.2" height="15.0" fill="rgb(229,145,32)" rx="2" ry="2" />
<text  x="679.76" y="703.5" ></text>
</g>
<g >
<title>boost::range_detail::transformed_range&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="730.4" y="709" width="0.2" height="15.0" fill="rgb(235,161,43)" rx="2" ry="2" />
<text  x="733.35" y="719.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1120.3" y="469" width="0.2" height="15.0" fill="rgb(249,186,11)" rx="2" ry="2" />
<text  x="1123.30" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="663.1" y="789" width="0.2" height="15.0" fill="rgb(218,137,27)" rx="2" ry="2" />
<text  x="666.08" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="45.1" y="469" width="0.2" height="15.0" fill="rgb(218,223,43)" rx="2" ry="2" />
<text  x="48.07" y="479.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (5 samples, 0.09%)</title><rect x="101.3" y="629" width="1.1" height="15.0" fill="rgb(218,103,47)" rx="2" ry="2" />
<text  x="104.31" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="698.8" y="789" width="0.2" height="15.0" fill="rgb(238,12,31)" rx="2" ry="2" />
<text  x="701.81" y="799.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="124.7" y="757" width="0.2" height="15.0" fill="rgb(251,191,7)" rx="2" ry="2" />
<text  x="127.69" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="459.5" y="709" width="0.2" height="15.0" fill="rgb(212,186,43)" rx="2" ry="2" />
<text  x="462.50" y="719.5" ></text>
</g>
<g >
<title>dht::tri_compare (10 samples, 0.19%)</title><rect x="1070.7" y="533" width="2.2" height="15.0" fill="rgb(230,200,18)" rx="2" ry="2" />
<text  x="1073.68" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="842.6" y="741" width="0.5" height="15.0" fill="rgb(247,154,16)" rx="2" ry="2" />
<text  x="845.62" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="34.0" y="549" width="0.7" height="15.0" fill="rgb(244,49,16)" rx="2" ry="2" />
<text  x="37.04" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1085.0" y="645" width="0.5" height="15.0" fill="rgb(221,212,32)" rx="2" ry="2" />
<text  x="1088.01" y="655.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.3" y="677" width="0.2" height="15.0" fill="rgb(208,175,10)" rx="2" ry="2" />
<text  x="20.28" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (219 samples, 4.09%)</title><rect x="893.6" y="725" width="48.3" height="15.0" fill="rgb(229,25,38)" rx="2" ry="2" />
<text  x="896.57" y="735.5" >cql3..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="364.4" y="501" width="0.3" height="15.0" fill="rgb(237,193,9)" rx="2" ry="2" />
<text  x="367.44" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;, seastar::bool_class&lt;continuous_tag&gt; &gt; (1 samples, 0.02%)</title><rect x="16.8" y="837" width="0.3" height="15.0" fill="rgb(230,36,48)" rx="2" ry="2" />
<text  x="19.84" y="847.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (9 samples, 0.17%)</title><rect x="632.9" y="725" width="1.9" height="15.0" fill="rgb(220,210,44)" rx="2" ry="2" />
<text  x="635.86" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="371.5" y="485" width="0.4" height="15.0" fill="rgb(231,102,11)" rx="2" ry="2" />
<text  x="374.50" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="826.3" y="597" width="0.2" height="15.0" fill="rgb(223,29,34)" rx="2" ry="2" />
<text  x="829.30" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.07%)</title><rect x="268.9" y="453" width="0.9" height="15.0" fill="rgb(224,199,22)" rx="2" ry="2" />
<text  x="271.94" y="463.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%)</title><rect x="639.7" y="725" width="0.4" height="15.0" fill="rgb(209,49,48)" rx="2" ry="2" />
<text  x="642.70" y="735.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%)</title><rect x="17.5" y="533" width="0.2" height="15.0" fill="rgb(251,225,49)" rx="2" ry="2" />
<text  x="20.50" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="736.5" y="709" width="0.9" height="15.0" fill="rgb(251,30,18)" rx="2" ry="2" />
<text  x="739.53" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%)</title><rect x="23.2" y="517" width="0.5" height="15.0" fill="rgb(239,182,0)" rx="2" ry="2" />
<text  x="26.23" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="21.9" y="565" width="0.2" height="15.0" fill="rgb(227,2,27)" rx="2" ry="2" />
<text  x="24.91" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="456.9" y="661" width="0.4" height="15.0" fill="rgb(217,25,1)" rx="2" ry="2" />
<text  x="459.86" y="671.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1073.3" y="565" width="0.2" height="15.0" fill="rgb(238,140,32)" rx="2" ry="2" />
<text  x="1076.32" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="193.5" y="549" width="0.7" height="15.0" fill="rgb(247,164,27)" rx="2" ry="2" />
<text  x="196.51" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (556 samples, 10.39%)</title><rect x="963.3" y="677" width="122.6" height="15.0" fill="rgb(248,142,49)" rx="2" ry="2" />
<text  x="966.26" y="687.5" >service::storag..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="1122.7" y="485" width="0.2" height="15.0" fill="rgb(212,104,35)" rx="2" ry="2" />
<text  x="1125.73" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.0" y="453" width="0.3" height="15.0" fill="rgb(253,99,25)" rx="2" ry="2" />
<text  x="52.04" y="463.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="527.4" y="597" width="0.5" height="15.0" fill="rgb(213,155,17)" rx="2" ry="2" />
<text  x="530.44" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="967.0" y="645" width="0.9" height="15.0" fill="rgb(239,164,46)" rx="2" ry="2" />
<text  x="970.01" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="49.0" y="501" width="0.3" height="15.0" fill="rgb(247,92,6)" rx="2" ry="2" />
<text  x="52.04" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="26.5" y="549" width="0.3" height="15.0" fill="rgb(238,64,47)" rx="2" ry="2" />
<text  x="29.54" y="559.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="17.3" y="869" width="0.6" height="15.0" fill="rgb(226,94,41)" rx="2" ry="2" />
<text  x="20.28" y="879.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="77.9" y="725" width="0.3" height="15.0" fill="rgb(224,69,2)" rx="2" ry="2" />
<text  x="80.93" y="735.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="1131.8" y="405" width="0.4" height="15.0" fill="rgb(232,209,25)" rx="2" ry="2" />
<text  x="1134.77" y="415.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%)</title><rect x="867.8" y="789" width="0.2" height="15.0" fill="rgb(234,37,30)" rx="2" ry="2" />
<text  x="870.76" y="799.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (23 samples, 0.43%)</title><rect x="297.4" y="597" width="5.1" height="15.0" fill="rgb(241,48,46)" rx="2" ry="2" />
<text  x="300.39" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="772.0" y="661" width="0.3" height="15.0" fill="rgb(225,226,3)" rx="2" ry="2" />
<text  x="775.04" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="808.4" y="453" width="0.3" height="15.0" fill="rgb(234,211,4)" rx="2" ry="2" />
<text  x="811.43" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="39.3" y="565" width="0.3" height="15.0" fill="rgb(252,123,3)" rx="2" ry="2" />
<text  x="42.33" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (21 samples, 0.39%)</title><rect x="1047.7" y="629" width="4.7" height="15.0" fill="rgb(245,155,29)" rx="2" ry="2" />
<text  x="1050.74" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%)</title><rect x="66.0" y="709" width="0.5" height="15.0" fill="rgb(205,96,27)" rx="2" ry="2" />
<text  x="69.02" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (3 samples, 0.06%)</title><rect x="1021.5" y="437" width="0.7" height="15.0" fill="rgb(245,174,4)" rx="2" ry="2" />
<text  x="1024.49" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="212.7" y="501" width="0.4" height="15.0" fill="rgb(223,140,22)" rx="2" ry="2" />
<text  x="215.70" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="102.6" y="645" width="0.3" height="15.0" fill="rgb(227,171,12)" rx="2" ry="2" />
<text  x="105.64" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="47.5" y="357" width="0.2" height="15.0" fill="rgb(224,50,8)" rx="2" ry="2" />
<text  x="50.50" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="879.9" y="661" width="0.2" height="15.0" fill="rgb(217,192,3)" rx="2" ry="2" />
<text  x="882.89" y="671.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="39.6" y="549" width="0.2" height="15.0" fill="rgb(235,96,8)" rx="2" ry="2" />
<text  x="42.56" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (2 samples, 0.04%)</title><rect x="207.8" y="549" width="0.5" height="15.0" fill="rgb(250,226,38)" rx="2" ry="2" />
<text  x="210.84" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="763.4" y="629" width="0.3" height="15.0" fill="rgb(229,137,3)" rx="2" ry="2" />
<text  x="766.44" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="792.1" y="613" width="0.2" height="15.0" fill="rgb(208,131,5)" rx="2" ry="2" />
<text  x="795.11" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1168.6" y="757" width="0.2" height="15.0" fill="rgb(212,114,0)" rx="2" ry="2" />
<text  x="1171.61" y="767.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="409.9" y="501" width="0.4" height="15.0" fill="rgb(238,106,15)" rx="2" ry="2" />
<text  x="412.88" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%)</title><rect x="713.4" y="757" width="0.2" height="15.0" fill="rgb(252,130,33)" rx="2" ry="2" />
<text  x="716.37" y="767.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="33.8" y="485" width="0.2" height="15.0" fill="rgb(241,179,13)" rx="2" ry="2" />
<text  x="36.82" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="16.6" y="805" width="0.2" height="15.0" fill="rgb(243,196,24)" rx="2" ry="2" />
<text  x="19.62" y="815.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1167.7" y="805" width="0.2" height="15.0" fill="rgb(244,127,48)" rx="2" ry="2" />
<text  x="1170.72" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="1107.1" y="693" width="1.3" height="15.0" fill="rgb(229,99,35)" rx="2" ry="2" />
<text  x="1110.07" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%)</title><rect x="1189.8" y="885" width="0.2" height="15.0" fill="rgb(214,88,4)" rx="2" ry="2" />
<text  x="1192.78" y="895.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1029.9" y="565" width="0.2" height="15.0" fill="rgb(252,3,28)" rx="2" ry="2" />
<text  x="1032.87" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="48.8" y="597" width="0.5" height="15.0" fill="rgb(225,120,6)" rx="2" ry="2" />
<text  x="51.82" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="17.7" y="805" width="0.2" height="15.0" fill="rgb(252,210,12)" rx="2" ry="2" />
<text  x="20.72" y="815.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="707.9" y="597" width="0.2" height="15.0" fill="rgb(249,100,21)" rx="2" ry="2" />
<text  x="710.85" y="607.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="1167.1" y="741" width="0.2" height="15.0" fill="rgb(219,116,31)" rx="2" ry="2" />
<text  x="1170.06" y="751.5" ></text>
</g>
<g >
<title>database::has_keyspace (11 samples, 0.21%)</title><rect x="845.3" y="725" width="2.4" height="15.0" fill="rgb(235,21,12)" rx="2" ry="2" />
<text  x="848.26" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="637.1" y="741" width="0.2" height="15.0" fill="rgb(227,188,8)" rx="2" ry="2" />
<text  x="640.05" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1129.1" y="549" width="0.2" height="15.0" fill="rgb(246,116,22)" rx="2" ry="2" />
<text  x="1132.13" y="559.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (5 samples, 0.09%)</title><rect x="101.3" y="805" width="1.1" height="15.0" fill="rgb(240,145,50)" rx="2" ry="2" />
<text  x="104.31" y="815.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="421" width="0.2" height="15.0" fill="rgb(221,120,17)" rx="2" ry="2" />
<text  x="104.97" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (75 samples, 1.40%)</title><rect x="897.3" y="709" width="16.6" height="15.0" fill="rgb(243,201,11)" rx="2" ry="2" />
<text  x="900.32" y="719.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="517" width="0.5" height="15.0" fill="rgb(218,21,54)" rx="2" ry="2" />
<text  x="104.31" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="50.4" y="565" width="0.2" height="15.0" fill="rgb(212,181,1)" rx="2" ry="2" />
<text  x="53.36" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (17 samples, 0.32%)</title><rect x="622.3" y="725" width="3.7" height="15.0" fill="rgb(221,87,14)" rx="2" ry="2" />
<text  x="625.28" y="735.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.09%)</title><rect x="892.0" y="725" width="1.1" height="15.0" fill="rgb(250,182,22)" rx="2" ry="2" />
<text  x="895.02" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (152 samples, 2.84%)</title><rect x="21.5" y="725" width="33.5" height="15.0" fill="rgb(222,207,24)" rx="2" ry="2" />
<text  x="24.47" y="735.5" >se..</text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="751.7" y="693" width="0.3" height="15.0" fill="rgb(221,179,27)" rx="2" ry="2" />
<text  x="754.75" y="703.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="156.9" y="741" width="0.2" height="15.0" fill="rgb(243,158,28)" rx="2" ry="2" />
<text  x="159.89" y="751.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (14 samples, 0.26%)</title><rect x="663.3" y="805" width="3.1" height="15.0" fill="rgb(231,214,49)" rx="2" ry="2" />
<text  x="666.30" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="876.6" y="661" width="0.2" height="15.0" fill="rgb(245,191,5)" rx="2" ry="2" />
<text  x="879.58" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (44 samples, 0.82%)</title><rect x="718.9" y="773" width="9.7" height="15.0" fill="rgb(227,218,53)" rx="2" ry="2" />
<text  x="721.88" y="783.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::make_empty (1 samples, 0.02%)</title><rect x="877.5" y="645" width="0.2" height="15.0" fill="rgb(213,175,28)" rx="2" ry="2" />
<text  x="880.47" y="655.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="1126.0" y="645" width="0.3" height="15.0" fill="rgb(209,152,32)" rx="2" ry="2" />
<text  x="1129.04" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="39.1" y="597" width="0.2" height="15.0" fill="rgb(232,122,3)" rx="2" ry="2" />
<text  x="42.11" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="953.6" y="645" width="0.2" height="15.0" fill="rgb(209,160,2)" rx="2" ry="2" />
<text  x="956.56" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1064.3" y="629" width="0.2" height="15.0" fill="rgb(209,90,49)" rx="2" ry="2" />
<text  x="1067.28" y="639.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="71.5" y="485" width="0.3" height="15.0" fill="rgb(227,116,19)" rx="2" ry="2" />
<text  x="74.54" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="17.5" y="517" width="0.2" height="15.0" fill="rgb(241,20,29)" rx="2" ry="2" />
<text  x="20.50" y="527.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="629.6" y="709" width="0.2" height="15.0" fill="rgb(240,165,19)" rx="2" ry="2" />
<text  x="632.56" y="719.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="576.6" y="709" width="0.2" height="15.0" fill="rgb(238,189,17)" rx="2" ry="2" />
<text  x="579.62" y="719.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_clone_visitor&gt; (1 samples, 0.02%)</title><rect x="62.7" y="581" width="0.2" height="15.0" fill="rgb(230,162,49)" rx="2" ry="2" />
<text  x="65.71" y="591.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="112.1" y="773" width="0.2" height="15.0" fill="rgb(244,65,29)" rx="2" ry="2" />
<text  x="115.12" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.3" y="469" width="0.4" height="15.0" fill="rgb(254,193,51)" rx="2" ry="2" />
<text  x="50.27" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%)</title><rect x="220.0" y="533" width="0.4" height="15.0" fill="rgb(221,196,41)" rx="2" ry="2" />
<text  x="222.97" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.28%)</title><rect x="385.8" y="469" width="3.3" height="15.0" fill="rgb(238,54,53)" rx="2" ry="2" />
<text  x="388.84" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="15.5" y="645" width="0.2" height="15.0" fill="rgb(230,55,5)" rx="2" ry="2" />
<text  x="18.51" y="655.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="102.2" y="517" width="0.2" height="15.0" fill="rgb(237,125,20)" rx="2" ry="2" />
<text  x="105.19" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="37.8" y="565" width="0.4" height="15.0" fill="rgb(251,100,52)" rx="2" ry="2" />
<text  x="40.79" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="800.7" y="565" width="0.5" height="15.0" fill="rgb(205,95,50)" rx="2" ry="2" />
<text  x="803.71" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="774.5" y="629" width="0.2" height="15.0" fill="rgb(252,190,15)" rx="2" ry="2" />
<text  x="777.46" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="783.7" y="645" width="0.2" height="15.0" fill="rgb(243,147,43)" rx="2" ry="2" />
<text  x="786.73" y="655.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="857.0" y="693" width="0.2" height="15.0" fill="rgb(232,208,4)" rx="2" ry="2" />
<text  x="859.95" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="880.1" y="661" width="0.2" height="15.0" fill="rgb(222,15,50)" rx="2" ry="2" />
<text  x="883.11" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="667.7" y="645" width="0.2" height="15.0" fill="rgb(249,99,34)" rx="2" ry="2" />
<text  x="670.71" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="737.2" y="693" width="0.2" height="15.0" fill="rgb(254,50,50)" rx="2" ry="2" />
<text  x="740.19" y="703.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="842.2" y="677" width="0.2" height="15.0" fill="rgb(233,132,19)" rx="2" ry="2" />
<text  x="845.18" y="687.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.11%)</title><rect x="915.4" y="677" width="1.3" height="15.0" fill="rgb(246,95,25)" rx="2" ry="2" />
<text  x="918.40" y="687.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (2 samples, 0.04%)</title><rect x="1168.4" y="789" width="0.4" height="15.0" fill="rgb(232,79,13)" rx="2" ry="2" />
<text  x="1171.39" y="799.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1095.2" y="677" width="0.2" height="15.0" fill="rgb(245,120,37)" rx="2" ry="2" />
<text  x="1098.16" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="818.6" y="549" width="0.2" height="15.0" fill="rgb(249,15,35)" rx="2" ry="2" />
<text  x="821.58" y="559.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (24 samples, 0.45%)</title><rect x="742.5" y="693" width="5.3" height="15.0" fill="rgb(214,205,26)" rx="2" ry="2" />
<text  x="745.48" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="820.8" y="565" width="0.2" height="15.0" fill="rgb(220,20,3)" rx="2" ry="2" />
<text  x="823.78" y="575.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (2 samples, 0.04%)</title><rect x="127.6" y="709" width="0.4" height="15.0" fill="rgb(214,93,44)" rx="2" ry="2" />
<text  x="130.56" y="719.5" ></text>
</g>
<g >
<title>auth::get_permissions (115 samples, 2.15%)</title><rect x="795.6" y="613" width="25.4" height="15.0" fill="rgb(207,29,8)" rx="2" ry="2" />
<text  x="798.64" y="623.5" >a..</text>
</g>
<g >
<title>__libc_start_main (4,941 samples, 92.36%)</title><rect x="79.5" y="933" width="1089.8" height="15.0" fill="rgb(212,166,15)" rx="2" ry="2" />
<text  x="82.48" y="943.5" >__libc_start_main</text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="102.0" y="373" width="0.2" height="15.0" fill="rgb(220,74,11)" rx="2" ry="2" />
<text  x="104.97" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (9 samples, 0.17%)</title><rect x="1164.0" y="741" width="2.0" height="15.0" fill="rgb(228,224,18)" rx="2" ry="2" />
<text  x="1166.97" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="530.7" y="581" width="0.3" height="15.0" fill="rgb(245,9,6)" rx="2" ry="2" />
<text  x="533.74" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="572.4" y="645" width="0.5" height="15.0" fill="rgb(227,126,44)" rx="2" ry="2" />
<text  x="575.43" y="655.5" ></text>
</g>
<g >
<title>service::client_state::has_access (184 samples, 3.44%)</title><rect x="786.2" y="677" width="40.5" height="15.0" fill="rgb(224,144,30)" rx="2" ry="2" />
<text  x="789.15" y="687.5" >ser..</text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="772.3" y="661" width="0.2" height="15.0" fill="rgb(236,118,7)" rx="2" ry="2" />
<text  x="775.26" y="671.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="820.1" y="581" width="0.5" height="15.0" fill="rgb(234,6,4)" rx="2" ry="2" />
<text  x="823.12" y="591.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (18 samples, 0.34%)</title><rect x="930.2" y="693" width="3.9" height="15.0" fill="rgb(216,166,13)" rx="2" ry="2" />
<text  x="933.18" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="135.1" y="757" width="0.2" height="15.0" fill="rgb(248,160,49)" rx="2" ry="2" />
<text  x="138.06" y="767.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (15 samples, 0.28%)</title><rect x="1059.4" y="613" width="3.3" height="15.0" fill="rgb(221,117,53)" rx="2" ry="2" />
<text  x="1062.43" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="547.1" y="485" width="0.4" height="15.0" fill="rgb(235,1,38)" rx="2" ry="2" />
<text  x="550.07" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1063.2" y="597" width="0.2" height="15.0" fill="rgb(208,192,28)" rx="2" ry="2" />
<text  x="1066.18" y="607.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="72.4" y="741" width="0.2" height="15.0" fill="rgb(219,138,22)" rx="2" ry="2" />
<text  x="75.42" y="751.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="875.9" y="645" width="0.5" height="15.0" fill="rgb(226,74,24)" rx="2" ry="2" />
<text  x="878.92" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1110.2" y="725" width="0.4" height="15.0" fill="rgb(231,198,42)" rx="2" ry="2" />
<text  x="1113.16" y="735.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (1 samples, 0.02%)</title><rect x="74.2" y="917" width="0.2" height="15.0" fill="rgb(223,102,12)" rx="2" ry="2" />
<text  x="77.18" y="927.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="328.7" y="693" width="0.2" height="15.0" fill="rgb(232,17,22)" rx="2" ry="2" />
<text  x="331.71" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="651.6" y="677" width="0.7" height="15.0" fill="rgb(215,98,38)" rx="2" ry="2" />
<text  x="654.61" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="95.1" y="741" width="0.3" height="15.0" fill="rgb(229,5,26)" rx="2" ry="2" />
<text  x="98.14" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="431.7" y="533" width="0.7" height="15.0" fill="rgb(242,200,12)" rx="2" ry="2" />
<text  x="434.71" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,938 samples, 92.30%)</title><rect x="79.7" y="837" width="1089.1" height="15.0" fill="rgb(251,196,7)" rx="2" ry="2" />
<text  x="82.70" y="847.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="42.2" y="469" width="0.2" height="15.0" fill="rgb(238,191,5)" rx="2" ry="2" />
<text  x="45.20" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (1 samples, 0.02%)</title><rect x="473.2" y="613" width="0.2" height="15.0" fill="rgb(216,16,31)" rx="2" ry="2" />
<text  x="476.18" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="120.5" y="757" width="0.4" height="15.0" fill="rgb(220,58,6)" rx="2" ry="2" />
<text  x="123.50" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="36.0" y="581" width="0.2" height="15.0" fill="rgb(231,141,21)" rx="2" ry="2" />
<text  x="39.03" y="591.5" ></text>
</g>
<g >
<title>database::do_apply (33 samples, 0.62%)</title><rect x="1118.8" y="645" width="7.2" height="15.0" fill="rgb(240,185,45)" rx="2" ry="2" />
<text  x="1121.76" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="22.4" y="549" width="0.2" height="15.0" fill="rgb(210,206,17)" rx="2" ry="2" />
<text  x="25.35" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (4 samples, 0.07%)</title><rect x="287.5" y="501" width="0.8" height="15.0" fill="rgb(252,161,12)" rx="2" ry="2" />
<text  x="290.47" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.2" y="773" width="0.2" height="15.0" fill="rgb(228,143,50)" rx="2" ry="2" />
<text  x="13.22" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.07%)</title><rect x="1037.6" y="501" width="0.9" height="15.0" fill="rgb(246,229,26)" rx="2" ry="2" />
<text  x="1040.59" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.80%)</title><rect x="1126.7" y="693" width="9.5" height="15.0" fill="rgb(222,168,28)" rx="2" ry="2" />
<text  x="1129.70" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (2 samples, 0.04%)</title><rect x="802.3" y="533" width="0.4" height="15.0" fill="rgb(212,192,37)" rx="2" ry="2" />
<text  x="805.25" y="543.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (5 samples, 0.09%)</title><rect x="919.2" y="677" width="1.1" height="15.0" fill="rgb(235,178,46)" rx="2" ry="2" />
<text  x="922.15" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="43.5" y="533" width="0.7" height="15.0" fill="rgb(250,15,23)" rx="2" ry="2" />
<text  x="46.53" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="1167.1" y="677" width="0.2" height="15.0" fill="rgb(207,195,2)" rx="2" ry="2" />
<text  x="1170.06" y="687.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%)</title><rect x="855.6" y="741" width="0.3" height="15.0" fill="rgb(205,110,16)" rx="2" ry="2" />
<text  x="858.63" y="751.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="854.5" y="645" width="0.2" height="15.0" fill="rgb(214,31,24)" rx="2" ry="2" />
<text  x="857.53" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="815.3" y="485" width="0.2" height="15.0" fill="rgb(254,52,49)" rx="2" ry="2" />
<text  x="818.27" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="646.5" y="677" width="0.5" height="15.0" fill="rgb(238,171,47)" rx="2" ry="2" />
<text  x="649.54" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="491.3" y="581" width="0.4" height="15.0" fill="rgb(215,150,23)" rx="2" ry="2" />
<text  x="494.26" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="1023.7" y="517" width="0.2" height="15.0" fill="rgb(208,117,8)" rx="2" ry="2" />
<text  x="1026.70" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="46.4" y="389" width="0.4" height="15.0" fill="rgb(240,74,54)" rx="2" ry="2" />
<text  x="49.39" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="52.6" y="677" width="0.2" height="15.0" fill="rgb(216,73,53)" rx="2" ry="2" />
<text  x="55.57" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="36.0" y="549" width="0.2" height="15.0" fill="rgb(233,153,29)" rx="2" ry="2" />
<text  x="39.03" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="22.1" y="517" width="0.3" height="15.0" fill="rgb(222,36,25)" rx="2" ry="2" />
<text  x="25.13" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.1" y="645" width="0.3" height="15.0" fill="rgb(233,218,45)" rx="2" ry="2" />
<text  x="25.13" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="939.7" y="709" width="1.1" height="15.0" fill="rgb(212,2,29)" rx="2" ry="2" />
<text  x="942.66" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1136.0" y="629" width="0.2" height="15.0" fill="rgb(229,104,54)" rx="2" ry="2" />
<text  x="1138.96" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (25 samples, 0.47%)</title><rect x="440.1" y="517" width="5.5" height="15.0" fill="rgb(231,155,50)" rx="2" ry="2" />
<text  x="443.09" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (13 samples, 0.24%)</title><rect x="877.5" y="677" width="2.8" height="15.0" fill="rgb(250,201,28)" rx="2" ry="2" />
<text  x="880.47" y="687.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="565" width="0.5" height="15.0" fill="rgb(249,4,15)" rx="2" ry="2" />
<text  x="104.31" y="575.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="120.9" y="757" width="0.3" height="15.0" fill="rgb(220,222,26)" rx="2" ry="2" />
<text  x="123.94" y="767.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="37.6" y="613" width="0.2" height="15.0" fill="rgb(231,217,44)" rx="2" ry="2" />
<text  x="40.57" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.22%)</title><rect x="450.5" y="597" width="2.6" height="15.0" fill="rgb(210,198,45)" rx="2" ry="2" />
<text  x="453.46" y="607.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="725.5" y="709" width="0.2" height="15.0" fill="rgb(211,8,30)" rx="2" ry="2" />
<text  x="728.50" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (13 samples, 0.24%)</title><rect x="877.5" y="693" width="2.8" height="15.0" fill="rgb(252,89,3)" rx="2" ry="2" />
<text  x="880.47" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="934.8" y="709" width="0.2" height="15.0" fill="rgb(229,216,31)" rx="2" ry="2" />
<text  x="937.81" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%)</title><rect x="17.5" y="725" width="0.2" height="15.0" fill="rgb(205,30,41)" rx="2" ry="2" />
<text  x="20.50" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%)</title><rect x="29.2" y="565" width="0.2" height="15.0" fill="rgb(243,100,30)" rx="2" ry="2" />
<text  x="32.19" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1102.2" y="709" width="0.2" height="15.0" fill="rgb(221,94,21)" rx="2" ry="2" />
<text  x="1105.22" y="719.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="69.6" y="709" width="0.2" height="15.0" fill="rgb(211,85,54)" rx="2" ry="2" />
<text  x="72.55" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="667.3" y="773" width="0.2" height="15.0" fill="rgb(230,50,28)" rx="2" ry="2" />
<text  x="670.27" y="783.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (9 samples, 0.17%)</title><rect x="210.3" y="517" width="2.0" height="15.0" fill="rgb(253,36,21)" rx="2" ry="2" />
<text  x="213.27" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="565" width="0.2" height="15.0" fill="rgb(225,117,28)" rx="2" ry="2" />
<text  x="142.47" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (10 samples, 0.19%)</title><rect x="623.4" y="709" width="2.2" height="15.0" fill="rgb(206,107,33)" rx="2" ry="2" />
<text  x="626.38" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (511 samples, 9.55%)</title><rect x="463.0" y="677" width="112.7" height="15.0" fill="rgb(249,167,36)" rx="2" ry="2" />
<text  x="466.03" y="687.5" >std::_Functio..</text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="707.4" y="677" width="0.2" height="15.0" fill="rgb(225,146,43)" rx="2" ry="2" />
<text  x="710.41" y="687.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="855.2" y="709" width="0.2" height="15.0" fill="rgb(247,225,20)" rx="2" ry="2" />
<text  x="858.19" y="719.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="480.0" y="581" width="0.5" height="15.0" fill="rgb(220,133,6)" rx="2" ry="2" />
<text  x="483.01" y="591.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="327.6" y="677" width="0.2" height="15.0" fill="rgb(217,208,15)" rx="2" ry="2" />
<text  x="330.61" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (4 samples, 0.07%)</title><rect x="741.6" y="725" width="0.9" height="15.0" fill="rgb(218,28,29)" rx="2" ry="2" />
<text  x="744.60" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (44 samples, 0.82%)</title><rect x="284.4" y="549" width="9.7" height="15.0" fill="rgb(230,208,38)" rx="2" ry="2" />
<text  x="287.38" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.9" y="405" width="0.2" height="15.0" fill="rgb(214,69,2)" rx="2" ry="2" />
<text  x="43.88" y="415.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.75%)</title><rect x="1180.7" y="933" width="8.9" height="15.0" fill="rgb(232,128,18)" rx="2" ry="2" />
<text  x="1183.74" y="943.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="274.9" y="485" width="0.2" height="15.0" fill="rgb(231,62,23)" rx="2" ry="2" />
<text  x="277.89" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="36.9" y="565" width="0.7" height="15.0" fill="rgb(241,138,0)" rx="2" ry="2" />
<text  x="39.91" y="575.5" ></text>
</g>
<g >
<title>schema::cdc_options (2 samples, 0.04%)</title><rect x="871.5" y="645" width="0.5" height="15.0" fill="rgb(224,7,12)" rx="2" ry="2" />
<text  x="874.51" y="655.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="37.8" y="453" width="0.4" height="15.0" fill="rgb(218,10,48)" rx="2" ry="2" />
<text  x="40.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.07%)</title><rect x="255.9" y="405" width="0.9" height="15.0" fill="rgb(247,173,52)" rx="2" ry="2" />
<text  x="258.93" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="54.3" y="677" width="0.3" height="15.0" fill="rgb(245,155,48)" rx="2" ry="2" />
<text  x="57.33" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (9 samples, 0.17%)</title><rect x="754.2" y="661" width="2.0" height="15.0" fill="rgb(228,217,37)" rx="2" ry="2" />
<text  x="757.17" y="671.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (3 samples, 0.06%)</title><rect x="530.5" y="613" width="0.7" height="15.0" fill="rgb(212,58,4)" rx="2" ry="2" />
<text  x="533.52" y="623.5" ></text>
</g>
<g >
<title>seastar::execution_stage::~execution_stage (1 samples, 0.02%)</title><rect x="17.5" y="613" width="0.2" height="15.0" fill="rgb(245,38,34)" rx="2" ry="2" />
<text  x="20.50" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (2 samples, 0.04%)</title><rect x="606.4" y="645" width="0.4" height="15.0" fill="rgb(238,213,29)" rx="2" ry="2" />
<text  x="609.40" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="985.1" y="565" width="0.2" height="15.0" fill="rgb(248,6,23)" rx="2" ry="2" />
<text  x="988.10" y="575.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (1 samples, 0.02%)</title><rect x="1134.6" y="501" width="0.3" height="15.0" fill="rgb(222,96,26)" rx="2" ry="2" />
<text  x="1137.64" y="511.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.07%)</title><rect x="1118.8" y="533" width="0.8" height="15.0" fill="rgb(242,175,41)" rx="2" ry="2" />
<text  x="1121.76" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.1" y="661" width="0.3" height="15.0" fill="rgb(224,71,20)" rx="2" ry="2" />
<text  x="25.13" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="667.7" y="709" width="0.2" height="15.0" fill="rgb(215,169,41)" rx="2" ry="2" />
<text  x="670.71" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.0" y="533" width="0.2" height="15.0" fill="rgb(209,156,32)" rx="2" ry="2" />
<text  x="43.00" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="909.2" y="661" width="0.2" height="15.0" fill="rgb(254,18,26)" rx="2" ry="2" />
<text  x="912.23" y="671.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="927.8" y="693" width="0.4" height="15.0" fill="rgb(221,119,2)" rx="2" ry="2" />
<text  x="930.75" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (5 samples, 0.09%)</title><rect x="287.2" y="517" width="1.1" height="15.0" fill="rgb(240,160,7)" rx="2" ry="2" />
<text  x="290.24" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="797.4" y="549" width="0.4" height="15.0" fill="rgb(218,37,16)" rx="2" ry="2" />
<text  x="800.40" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (9 samples, 0.17%)</title><rect x="60.9" y="693" width="2.0" height="15.0" fill="rgb(242,136,14)" rx="2" ry="2" />
<text  x="63.95" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="104.4" y="805" width="0.2" height="15.0" fill="rgb(230,93,49)" rx="2" ry="2" />
<text  x="107.40" y="815.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="51.7" y="661" width="0.2" height="15.0" fill="rgb(215,120,26)" rx="2" ry="2" />
<text  x="54.69" y="671.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (9 samples, 0.17%)</title><rect x="74.8" y="789" width="2.0" height="15.0" fill="rgb(207,23,18)" rx="2" ry="2" />
<text  x="77.84" y="799.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (14 samples, 0.26%)</title><rect x="354.3" y="485" width="3.1" height="15.0" fill="rgb(244,99,29)" rx="2" ry="2" />
<text  x="357.30" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1024.8" y="533" width="0.4" height="15.0" fill="rgb(219,57,24)" rx="2" ry="2" />
<text  x="1027.80" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%)</title><rect x="583.7" y="613" width="1.1" height="15.0" fill="rgb(206,13,44)" rx="2" ry="2" />
<text  x="586.68" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="119.2" y="757" width="0.2" height="15.0" fill="rgb(219,225,19)" rx="2" ry="2" />
<text  x="122.18" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="676.1" y="757" width="0.2" height="15.0" fill="rgb(253,172,30)" rx="2" ry="2" />
<text  x="679.09" y="767.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1135.1" y="485" width="0.2" height="15.0" fill="rgb(242,183,35)" rx="2" ry="2" />
<text  x="1138.08" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="139.5" y="405" width="0.2" height="15.0" fill="rgb(245,189,43)" rx="2" ry="2" />
<text  x="142.47" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="569.6" y="597" width="0.2" height="15.0" fill="rgb(239,194,16)" rx="2" ry="2" />
<text  x="572.56" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="17.3" y="821" width="0.2" height="15.0" fill="rgb(206,225,30)" rx="2" ry="2" />
<text  x="20.28" y="831.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="677.6" y="709" width="0.3" height="15.0" fill="rgb(235,164,47)" rx="2" ry="2" />
<text  x="680.64" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="622.1" y="693" width="0.2" height="15.0" fill="rgb(239,16,7)" rx="2" ry="2" />
<text  x="625.06" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="202.3" y="565" width="0.2" height="15.0" fill="rgb(213,98,19)" rx="2" ry="2" />
<text  x="205.33" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (2 samples, 0.04%)</title><rect x="1085.5" y="661" width="0.4" height="15.0" fill="rgb(239,112,45)" rx="2" ry="2" />
<text  x="1088.45" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="51.2" y="613" width="0.3" height="15.0" fill="rgb(236,86,50)" rx="2" ry="2" />
<text  x="54.24" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.11%)</title><rect x="1151.8" y="741" width="1.4" height="15.0" fill="rgb(254,196,45)" rx="2" ry="2" />
<text  x="1154.84" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="1122.7" y="469" width="0.2" height="15.0" fill="rgb(229,117,48)" rx="2" ry="2" />
<text  x="1125.73" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="102.4" y="773" width="0.2" height="15.0" fill="rgb(245,171,31)" rx="2" ry="2" />
<text  x="105.41" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.26%)</title><rect x="807.8" y="469" width="3.1" height="15.0" fill="rgb(225,58,44)" rx="2" ry="2" />
<text  x="810.77" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%)</title><rect x="962.4" y="677" width="0.2" height="15.0" fill="rgb(225,180,22)" rx="2" ry="2" />
<text  x="965.38" y="687.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (2 samples, 0.04%)</title><rect x="873.1" y="661" width="0.4" height="15.0" fill="rgb(232,196,54)" rx="2" ry="2" />
<text  x="876.05" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="622.7" y="709" width="0.7" height="15.0" fill="rgb(209,120,2)" rx="2" ry="2" />
<text  x="625.72" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%)</title><rect x="1098.7" y="661" width="0.6" height="15.0" fill="rgb(211,103,3)" rx="2" ry="2" />
<text  x="1101.69" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="760.6" y="613" width="0.2" height="15.0" fill="rgb(228,12,22)" rx="2" ry="2" />
<text  x="763.57" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1162.0" y="757" width="0.2" height="15.0" fill="rgb(219,71,7)" rx="2" ry="2" />
<text  x="1164.99" y="767.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (145 samples, 2.71%)</title><rect x="22.8" y="693" width="32.0" height="15.0" fill="rgb(236,74,5)" rx="2" ry="2" />
<text  x="25.79" y="703.5" >cq..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="102.2" y="501" width="0.2" height="15.0" fill="rgb(245,197,20)" rx="2" ry="2" />
<text  x="105.19" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (4 samples, 0.07%)</title><rect x="524.3" y="629" width="0.9" height="15.0" fill="rgb(231,72,10)" rx="2" ry="2" />
<text  x="527.35" y="639.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (4 samples, 0.07%)</title><rect x="137.7" y="757" width="0.9" height="15.0" fill="rgb(205,207,40)" rx="2" ry="2" />
<text  x="140.70" y="767.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (2 samples, 0.04%)</title><rect x="879.0" y="517" width="0.5" height="15.0" fill="rgb(212,133,16)" rx="2" ry="2" />
<text  x="882.01" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (7 samples, 0.13%)</title><rect x="676.5" y="757" width="1.6" height="15.0" fill="rgb(248,143,49)" rx="2" ry="2" />
<text  x="679.53" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="477.1" y="565" width="0.5" height="15.0" fill="rgb(237,51,54)" rx="2" ry="2" />
<text  x="480.15" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (42 samples, 0.79%)</title><rect x="500.7" y="613" width="9.3" height="15.0" fill="rgb(208,68,31)" rx="2" ry="2" />
<text  x="503.75" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="709.6" y="757" width="0.2" height="15.0" fill="rgb(251,50,1)" rx="2" ry="2" />
<text  x="712.62" y="767.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%)</title><rect x="21.2" y="693" width="0.3" height="15.0" fill="rgb(230,185,44)" rx="2" ry="2" />
<text  x="24.25" y="703.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="61.4" y="581" width="0.2" height="15.0" fill="rgb(243,1,24)" rx="2" ry="2" />
<text  x="64.39" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="47.3" y="453" width="0.4" height="15.0" fill="rgb(216,2,35)" rx="2" ry="2" />
<text  x="50.27" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="100.2" y="773" width="0.2" height="15.0" fill="rgb(212,97,16)" rx="2" ry="2" />
<text  x="103.21" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (418 samples, 7.81%)</title><rect x="345.7" y="565" width="92.2" height="15.0" fill="rgb(250,55,27)" rx="2" ry="2" />
<text  x="348.69" y="575.5" >mutation_fr..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="19.0" y="709" width="0.3" height="15.0" fill="rgb(220,65,14)" rx="2" ry="2" />
<text  x="22.04" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="22.4" y="661" width="0.2" height="15.0" fill="rgb(213,36,29)" rx="2" ry="2" />
<text  x="25.35" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="40.0" y="437" width="0.2" height="15.0" fill="rgb(237,120,35)" rx="2" ry="2" />
<text  x="43.00" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="266.5" y="453" width="0.2" height="15.0" fill="rgb(237,28,46)" rx="2" ry="2" />
<text  x="269.51" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_base::complete_one (2 samples, 0.04%)</title><rect x="870.6" y="805" width="0.5" height="15.0" fill="rgb(234,73,45)" rx="2" ry="2" />
<text  x="873.63" y="815.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (2 samples, 0.04%)</title><rect x="522.8" y="565" width="0.4" height="15.0" fill="rgb(213,134,11)" rx="2" ry="2" />
<text  x="525.80" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="46.4" y="373" width="0.4" height="15.0" fill="rgb(225,35,8)" rx="2" ry="2" />
<text  x="49.39" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="863.6" y="773" width="0.2" height="15.0" fill="rgb(215,95,45)" rx="2" ry="2" />
<text  x="866.57" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (5 samples, 0.09%)</title><rect x="811.5" y="437" width="1.1" height="15.0" fill="rgb(230,89,51)" rx="2" ry="2" />
<text  x="814.52" y="447.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="10.2" y="837" width="0.2" height="15.0" fill="rgb(206,126,54)" rx="2" ry="2" />
<text  x="13.22" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="977.8" y="565" width="0.2" height="15.0" fill="rgb(228,139,36)" rx="2" ry="2" />
<text  x="980.82" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="73.5" y="789" width="0.2" height="15.0" fill="rgb(227,77,3)" rx="2" ry="2" />
<text  x="76.52" y="799.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (17 samples, 0.32%)</title><rect x="545.7" y="533" width="3.8" height="15.0" fill="rgb(234,212,34)" rx="2" ry="2" />
<text  x="548.74" y="543.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1131.1" y="437" width="0.2" height="15.0" fill="rgb(252,64,12)" rx="2" ry="2" />
<text  x="1134.11" y="447.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%)</title><rect x="640.6" y="741" width="0.2" height="15.0" fill="rgb(217,31,41)" rx="2" ry="2" />
<text  x="643.58" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (29 samples, 0.54%)</title><rect x="58.7" y="725" width="6.4" height="15.0" fill="rgb(231,68,45)" rx="2" ry="2" />
<text  x="61.74" y="735.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="870.2" y="549" width="0.2" height="15.0" fill="rgb(241,121,2)" rx="2" ry="2" />
<text  x="873.19" y="559.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1132.0" y="389" width="0.2" height="15.0" fill="rgb(217,221,20)" rx="2" ry="2" />
<text  x="1134.99" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="794.1" y="613" width="0.2" height="15.0" fill="rgb(238,69,30)" rx="2" ry="2" />
<text  x="797.09" y="623.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%)</title><rect x="352.5" y="501" width="0.3" height="15.0" fill="rgb(226,182,52)" rx="2" ry="2" />
<text  x="355.53" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="707.4" y="661" width="0.2" height="15.0" fill="rgb(219,30,18)" rx="2" ry="2" />
<text  x="710.41" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="555.0" y="581" width="0.2" height="15.0" fill="rgb(240,100,21)" rx="2" ry="2" />
<text  x="558.01" y="591.5" ></text>
</g>
<g >
<title>make_combined_reader (115 samples, 2.15%)</title><rect x="468.5" y="645" width="25.4" height="15.0" fill="rgb(242,54,53)" rx="2" ry="2" />
<text  x="471.55" y="655.5" >m..</text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, void&gt; (2 samples, 0.04%)</title><rect x="64.7" y="709" width="0.4" height="15.0" fill="rgb(205,226,45)" rx="2" ry="2" />
<text  x="67.70" y="719.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (253 samples, 4.73%)</title><rect x="986.2" y="645" width="55.8" height="15.0" fill="rgb(219,3,52)" rx="2" ry="2" />
<text  x="989.20" y="655.5" >servi..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.8" y="373" width="0.3" height="15.0" fill="rgb(236,169,24)" rx="2" ry="2" />
<text  x="49.83" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="89.0" y="789" width="0.4" height="15.0" fill="rgb(242,53,30)" rx="2" ry="2" />
<text  x="91.96" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="302.7" y="597" width="0.2" height="15.0" fill="rgb(242,1,15)" rx="2" ry="2" />
<text  x="305.68" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="792.8" y="597" width="0.2" height="15.0" fill="rgb(211,46,8)" rx="2" ry="2" />
<text  x="795.77" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1132.0" y="373" width="0.2" height="15.0" fill="rgb(209,92,38)" rx="2" ry="2" />
<text  x="1134.99" y="383.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (7 samples, 0.13%)</title><rect x="56.8" y="725" width="1.5" height="15.0" fill="rgb(216,79,51)" rx="2" ry="2" />
<text  x="59.76" y="735.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="728.8" y="773" width="0.2" height="15.0" fill="rgb(212,171,50)" rx="2" ry="2" />
<text  x="731.81" y="783.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="290.1" y="485" width="0.2" height="15.0" fill="rgb(251,199,2)" rx="2" ry="2" />
<text  x="293.11" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="986.9" y="629" width="0.2" height="15.0" fill="rgb(229,228,37)" rx="2" ry="2" />
<text  x="989.86" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1120.5" y="549" width="0.2" height="15.0" fill="rgb(253,133,18)" rx="2" ry="2" />
<text  x="1123.52" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (9 samples, 0.17%)</title><rect x="645.0" y="725" width="2.0" height="15.0" fill="rgb(206,214,50)" rx="2" ry="2" />
<text  x="647.99" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="720.9" y="757" width="0.2" height="15.0" fill="rgb(243,29,34)" rx="2" ry="2" />
<text  x="723.87" y="767.5" ></text>
</g>
<g >
<title>database::has_keyspace (3 samples, 0.06%)</title><rect x="68.9" y="725" width="0.7" height="15.0" fill="rgb(237,101,8)" rx="2" ry="2" />
<text  x="71.89" y="735.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl::copy (1 samples, 0.02%)</title><rect x="10.4" y="901" width="0.3" height="15.0" fill="rgb(225,127,30)" rx="2" ry="2" />
<text  x="13.44" y="911.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (2 samples, 0.04%)</title><rect x="16.0" y="869" width="0.4" height="15.0" fill="rgb(235,147,16)" rx="2" ry="2" />
<text  x="18.96" y="879.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="946.5" y="613" width="0.2" height="15.0" fill="rgb(250,6,39)" rx="2" ry="2" />
<text  x="949.50" y="623.5" ></text>
</g>
<g >
<title>db::system_keyspace::force_blocking_flush (1 samples, 0.02%)</title><rect x="102.4" y="789" width="0.2" height="15.0" fill="rgb(234,229,7)" rx="2" ry="2" />
<text  x="105.41" y="799.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%)</title><rect x="591.6" y="645" width="0.7" height="15.0" fill="rgb(241,219,3)" rx="2" ry="2" />
<text  x="594.62" y="655.5" ></text>
</g>
<g >
<title>sstables::file_writer::close (1 samples, 0.02%)</title><rect x="707.4" y="517" width="0.2" height="15.0" fill="rgb(218,213,49)" rx="2" ry="2" />
<text  x="710.41" y="527.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1001.0" y="565" width="0.2" height="15.0" fill="rgb(210,86,13)" rx="2" ry="2" />
<text  x="1003.98" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="639.3" y="709" width="0.4" height="15.0" fill="rgb(233,191,42)" rx="2" ry="2" />
<text  x="642.26" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="194.8" y="565" width="0.3" height="15.0" fill="rgb(254,145,12)" rx="2" ry="2" />
<text  x="197.83" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="357.2" y="469" width="0.2" height="15.0" fill="rgb(240,167,49)" rx="2" ry="2" />
<text  x="360.16" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.2" y="565" width="0.2" height="15.0" fill="rgb(225,74,13)" rx="2" ry="2" />
<text  x="43.22" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (3 samples, 0.06%)</title><rect x="849.7" y="725" width="0.6" height="15.0" fill="rgb(234,208,44)" rx="2" ry="2" />
<text  x="852.67" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="69.8" y="725" width="0.2" height="15.0" fill="rgb(253,99,11)" rx="2" ry="2" />
<text  x="72.77" y="735.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="880.1" y="629" width="0.2" height="15.0" fill="rgb(238,66,14)" rx="2" ry="2" />
<text  x="883.11" y="639.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="77.9" y="821" width="0.3" height="15.0" fill="rgb(216,122,54)" rx="2" ry="2" />
<text  x="80.93" y="831.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (2 samples, 0.04%)</title><rect x="826.7" y="677" width="0.5" height="15.0" fill="rgb(242,164,3)" rx="2" ry="2" />
<text  x="829.74" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="36.0" y="501" width="0.2" height="15.0" fill="rgb(227,122,39)" rx="2" ry="2" />
<text  x="39.03" y="511.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="119.4" y="757" width="1.1" height="15.0" fill="rgb(206,204,1)" rx="2" ry="2" />
<text  x="122.40" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1034.5" y="581" width="0.2" height="15.0" fill="rgb(208,77,15)" rx="2" ry="2" />
<text  x="1037.50" y="591.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="139.5" y="485" width="0.2" height="15.0" fill="rgb(212,173,36)" rx="2" ry="2" />
<text  x="142.47" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="863.8" y="757" width="0.4" height="15.0" fill="rgb(225,23,36)" rx="2" ry="2" />
<text  x="866.79" y="767.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (485 samples, 9.07%)</title><rect x="341.9" y="597" width="107.0" height="15.0" fill="rgb(250,189,15)" rx="2" ry="2" />
<text  x="344.94" y="607.5" >seastar::repe..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="294.1" y="549" width="0.4" height="15.0" fill="rgb(229,15,45)" rx="2" ry="2" />
<text  x="297.08" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%)</title><rect x="646.5" y="693" width="0.5" height="15.0" fill="rgb(246,121,49)" rx="2" ry="2" />
<text  x="649.54" y="703.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="954.4" y="677" width="0.3" height="15.0" fill="rgb(240,33,16)" rx="2" ry="2" />
<text  x="957.44" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="22.1" y="501" width="0.3" height="15.0" fill="rgb(208,89,6)" rx="2" ry="2" />
<text  x="25.13" y="511.5" ></text>
</g>
<g >
<title>auth::resource::resource (7 samples, 0.13%)</title><rect x="782.4" y="677" width="1.5" height="15.0" fill="rgb(228,219,6)" rx="2" ry="2" />
<text  x="785.40" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (15 samples, 0.28%)</title><rect x="48.4" y="661" width="3.3" height="15.0" fill="rgb(208,26,20)" rx="2" ry="2" />
<text  x="51.38" y="671.5" ></text>
</g>
<g >
<title>row::external_memory_usage (2 samples, 0.04%)</title><rect x="75.7" y="613" width="0.5" height="15.0" fill="rgb(232,211,45)" rx="2" ry="2" />
<text  x="78.73" y="623.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="932.6" y="645" width="0.2" height="15.0" fill="rgb(236,181,49)" rx="2" ry="2" />
<text  x="935.61" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="718.7" y="773" width="0.2" height="15.0" fill="rgb(214,106,4)" rx="2" ry="2" />
<text  x="721.66" y="783.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="814.4" y="405" width="0.2" height="15.0" fill="rgb(214,3,1)" rx="2" ry="2" />
<text  x="817.39" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.28%)</title><rect x="1025.5" y="533" width="3.3" height="15.0" fill="rgb(229,105,36)" rx="2" ry="2" />
<text  x="1028.46" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (8 samples, 0.15%)</title><rect x="679.8" y="757" width="1.8" height="15.0" fill="rgb(214,129,1)" rx="2" ry="2" />
<text  x="682.84" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="43.7" y="469" width="0.5" height="15.0" fill="rgb(226,200,22)" rx="2" ry="2" />
<text  x="46.75" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="293.9" y="533" width="0.2" height="15.0" fill="rgb(220,2,0)" rx="2" ry="2" />
<text  x="296.86" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="868.9" y="805" width="0.2" height="15.0" fill="rgb(218,194,47)" rx="2" ry="2" />
<text  x="871.86" y="815.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.1" y="517" width="0.2" height="15.0" fill="rgb(219,129,8)" rx="2" ry="2" />
<text  x="881.13" y="527.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (49 samples, 0.92%)</title><rect x="1066.7" y="597" width="10.8" height="15.0" fill="rgb(248,134,4)" rx="2" ry="2" />
<text  x="1069.71" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (4 samples, 0.07%)</title><rect x="584.8" y="693" width="0.9" height="15.0" fill="rgb(253,15,25)" rx="2" ry="2" />
<text  x="587.78" y="703.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (2 samples, 0.04%)</title><rect x="437.4" y="549" width="0.5" height="15.0" fill="rgb(216,130,45)" rx="2" ry="2" />
<text  x="440.45" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="59.8" y="597" width="0.3" height="15.0" fill="rgb(248,220,13)" rx="2" ry="2" />
<text  x="62.85" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (5 samples, 0.09%)</title><rect x="75.7" y="677" width="1.1" height="15.0" fill="rgb(239,124,14)" rx="2" ry="2" />
<text  x="78.73" y="687.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (4 samples, 0.07%)</title><rect x="1019.9" y="453" width="0.9" height="15.0" fill="rgb(219,93,12)" rx="2" ry="2" />
<text  x="1022.95" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.1" y="517" width="0.2" height="15.0" fill="rgb(218,142,18)" rx="2" ry="2" />
<text  x="1125.07" y="527.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="429.9" y="517" width="0.3" height="15.0" fill="rgb(214,69,12)" rx="2" ry="2" />
<text  x="432.95" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="74.6" y="501" width="0.2" height="15.0" fill="rgb(233,131,25)" rx="2" ry="2" />
<text  x="77.62" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (39 samples, 0.73%)</title><rect x="208.3" y="549" width="8.6" height="15.0" fill="rgb(237,44,0)" rx="2" ry="2" />
<text  x="211.28" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="22.4" y="581" width="0.2" height="15.0" fill="rgb(235,12,18)" rx="2" ry="2" />
<text  x="25.35" y="591.5" ></text>
</g>
<g >
<title>seastar::data_sink::put (1 samples, 0.02%)</title><rect x="707.4" y="453" width="0.2" height="15.0" fill="rgb(242,36,21)" rx="2" ry="2" />
<text  x="710.41" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="777.8" y="677" width="0.2" height="15.0" fill="rgb(220,200,25)" rx="2" ry="2" />
<text  x="780.77" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="798.1" y="597" width="0.2" height="15.0" fill="rgb(239,214,28)" rx="2" ry="2" />
<text  x="801.06" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;seastar::shared_ptr&lt;cql3::relation&gt; const*, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::relation&gt;*&gt; (1 samples, 0.02%)</title><rect x="66.5" y="709" width="0.2" height="15.0" fill="rgb(208,125,17)" rx="2" ry="2" />
<text  x="69.46" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (36 samples, 0.67%)</title><rect x="541.6" y="549" width="7.9" height="15.0" fill="rgb(251,74,28)" rx="2" ry="2" />
<text  x="544.55" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="15.5" y="885" width="0.2" height="15.0" fill="rgb(249,177,36)" rx="2" ry="2" />
<text  x="18.51" y="895.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="759.9" y="581" width="0.2" height="15.0" fill="rgb(212,190,37)" rx="2" ry="2" />
<text  x="762.91" y="591.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1120.3" y="485" width="0.2" height="15.0" fill="rgb(242,86,14)" rx="2" ry="2" />
<text  x="1123.30" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="490.6" y="581" width="0.2" height="15.0" fill="rgb(221,39,36)" rx="2" ry="2" />
<text  x="493.60" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (3 samples, 0.06%)</title><rect x="1093.8" y="661" width="0.7" height="15.0" fill="rgb(243,141,24)" rx="2" ry="2" />
<text  x="1096.84" y="671.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="1077.1" y="549" width="0.4" height="15.0" fill="rgb(205,103,20)" rx="2" ry="2" />
<text  x="1080.07" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="796.7" y="581" width="1.1" height="15.0" fill="rgb(221,50,13)" rx="2" ry="2" />
<text  x="799.74" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="80.1" y="821" width="0.3" height="15.0" fill="rgb(221,118,39)" rx="2" ry="2" />
<text  x="83.14" y="831.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%)</title><rect x="870.0" y="645" width="0.6" height="15.0" fill="rgb(247,204,10)" rx="2" ry="2" />
<text  x="872.97" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (246 samples, 4.60%)</title><rect x="19.0" y="805" width="54.3" height="15.0" fill="rgb(237,70,39)" rx="2" ry="2" />
<text  x="22.04" y="815.5" >cql3:..</text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="707.6" y="565" width="0.3" height="15.0" fill="rgb(243,214,48)" rx="2" ry="2" />
<text  x="710.63" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1027.7" y="485" width="0.2" height="15.0" fill="rgb(241,180,33)" rx="2" ry="2" />
<text  x="1030.67" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (310 samples, 5.79%)</title><rect x="769.8" y="725" width="68.4" height="15.0" fill="rgb(241,191,33)" rx="2" ry="2" />
<text  x="772.83" y="735.5" >cql3::s..</text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="681.2" y="741" width="0.2" height="15.0" fill="rgb(209,127,36)" rx="2" ry="2" />
<text  x="684.17" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="158.2" y="709" width="0.7" height="15.0" fill="rgb(244,202,43)" rx="2" ry="2" />
<text  x="161.22" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="812.0" y="421" width="0.6" height="15.0" fill="rgb(241,108,50)" rx="2" ry="2" />
<text  x="814.96" y="431.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="698.1" y="789" width="0.3" height="15.0" fill="rgb(223,68,53)" rx="2" ry="2" />
<text  x="701.15" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="962.6" y="677" width="0.2" height="15.0" fill="rgb(233,21,22)" rx="2" ry="2" />
<text  x="965.60" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="439.4" y="533" width="0.3" height="15.0" fill="rgb(226,117,34)" rx="2" ry="2" />
<text  x="442.43" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="444.7" y="501" width="0.5" height="15.0" fill="rgb(215,159,47)" rx="2" ry="2" />
<text  x="447.73" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="136.4" y="757" width="0.2" height="15.0" fill="rgb(249,152,52)" rx="2" ry="2" />
<text  x="139.38" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="907.2" y="661" width="0.3" height="15.0" fill="rgb(226,55,6)" rx="2" ry="2" />
<text  x="910.24" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (4 samples, 0.07%)</title><rect x="1152.3" y="725" width="0.9" height="15.0" fill="rgb(244,124,33)" rx="2" ry="2" />
<text  x="1155.28" y="735.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1077.5" y="597" width="0.2" height="15.0" fill="rgb(222,15,5)" rx="2" ry="2" />
<text  x="1080.51" y="607.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="539.6" y="533" width="0.4" height="15.0" fill="rgb(230,138,10)" rx="2" ry="2" />
<text  x="542.57" y="543.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1033.0" y="565" width="0.2" height="15.0" fill="rgb(246,119,21)" rx="2" ry="2" />
<text  x="1035.96" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="49.5" y="581" width="0.2" height="15.0" fill="rgb(252,189,25)" rx="2" ry="2" />
<text  x="52.48" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (4 samples, 0.07%)</title><rect x="306.9" y="629" width="0.9" height="15.0" fill="rgb(209,107,11)" rx="2" ry="2" />
<text  x="309.87" y="639.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%)</title><rect x="26.1" y="565" width="0.2" height="15.0" fill="rgb(205,138,6)" rx="2" ry="2" />
<text  x="29.10" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1166.6" y="805" width="0.2" height="15.0" fill="rgb(223,167,27)" rx="2" ry="2" />
<text  x="1169.62" y="815.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="872.0" y="645" width="0.2" height="15.0" fill="rgb(227,220,36)" rx="2" ry="2" />
<text  x="874.95" y="655.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="76.6" y="645" width="0.2" height="15.0" fill="rgb(236,79,4)" rx="2" ry="2" />
<text  x="79.61" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="879.7" y="549" width="0.2" height="15.0" fill="rgb(214,145,38)" rx="2" ry="2" />
<text  x="882.67" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.8" y="661" width="0.2" height="15.0" fill="rgb(242,71,6)" rx="2" ry="2" />
<text  x="57.77" y="671.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%)</title><rect x="1138.4" y="805" width="0.2" height="15.0" fill="rgb(230,193,4)" rx="2" ry="2" />
<text  x="1141.39" y="815.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="38.7" y="437" width="0.2" height="15.0" fill="rgb(227,68,25)" rx="2" ry="2" />
<text  x="41.67" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1165.7" y="725" width="0.3" height="15.0" fill="rgb(254,190,51)" rx="2" ry="2" />
<text  x="1168.74" y="735.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="946.7" y="629" width="0.2" height="15.0" fill="rgb(207,147,17)" rx="2" ry="2" />
<text  x="949.72" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (27 samples, 0.50%)</title><rect x="709.4" y="789" width="6.0" height="15.0" fill="rgb(223,165,39)" rx="2" ry="2" />
<text  x="712.40" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="93.2" y="709" width="0.2" height="15.0" fill="rgb(206,85,46)" rx="2" ry="2" />
<text  x="96.15" y="719.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (2 samples, 0.04%)</title><rect x="396.6" y="469" width="0.5" height="15.0" fill="rgb(211,161,46)" rx="2" ry="2" />
<text  x="399.64" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="694.4" y="773" width="0.2" height="15.0" fill="rgb(254,12,5)" rx="2" ry="2" />
<text  x="697.40" y="783.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%)</title><rect x="130.2" y="677" width="0.4" height="15.0" fill="rgb(238,109,50)" rx="2" ry="2" />
<text  x="133.21" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (535 samples, 10.00%)</title><rect x="335.1" y="629" width="118.0" height="15.0" fill="rgb(225,170,16)" rx="2" ry="2" />
<text  x="338.11" y="639.5" >seastar::inter..</text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="61.8" y="517" width="0.3" height="15.0" fill="rgb(214,106,52)" rx="2" ry="2" />
<text  x="64.83" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (232 samples, 4.34%)</title><rect x="222.2" y="501" width="51.1" height="15.0" fill="rgb(233,160,10)" rx="2" ry="2" />
<text  x="225.18" y="511.5" >parti..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1138.2" y="805" width="0.2" height="15.0" fill="rgb(227,137,6)" rx="2" ry="2" />
<text  x="1141.17" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%)</title><rect x="199.7" y="565" width="0.2" height="15.0" fill="rgb(241,105,22)" rx="2" ry="2" />
<text  x="202.68" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (7 samples, 0.13%)</title><rect x="988.8" y="597" width="1.6" height="15.0" fill="rgb(246,106,38)" rx="2" ry="2" />
<text  x="991.85" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="1141.9" y="789" width="0.2" height="15.0" fill="rgb(207,198,41)" rx="2" ry="2" />
<text  x="1144.92" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1169.0" y="837" width="0.3" height="15.0" fill="rgb(252,32,17)" rx="2" ry="2" />
<text  x="1172.05" y="847.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="645.7" y="693" width="0.2" height="15.0" fill="rgb(220,210,15)" rx="2" ry="2" />
<text  x="648.66" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="648.1" y="741" width="0.2" height="15.0" fill="rgb(214,95,16)" rx="2" ry="2" />
<text  x="651.08" y="751.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (58 samples, 1.08%)</title><rect x="802.7" y="533" width="12.8" height="15.0" fill="rgb(237,138,22)" rx="2" ry="2" />
<text  x="805.70" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="17.3" y="773" width="0.2" height="15.0" fill="rgb(251,127,6)" rx="2" ry="2" />
<text  x="20.28" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (2 samples, 0.04%)</title><rect x="1103.1" y="725" width="0.4" height="15.0" fill="rgb(215,155,10)" rx="2" ry="2" />
<text  x="1106.10" y="735.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%)</title><rect x="1028.3" y="501" width="0.5" height="15.0" fill="rgb(236,190,35)" rx="2" ry="2" />
<text  x="1031.33" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="62.1" y="581" width="0.2" height="15.0" fill="rgb(242,163,26)" rx="2" ry="2" />
<text  x="65.05" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="568.9" y="613" width="0.2" height="15.0" fill="rgb(209,140,41)" rx="2" ry="2" />
<text  x="571.90" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="625.6" y="709" width="0.4" height="15.0" fill="rgb(206,172,48)" rx="2" ry="2" />
<text  x="628.59" y="719.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="662.6" y="773" width="0.3" height="15.0" fill="rgb(211,62,4)" rx="2" ry="2" />
<text  x="665.64" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="763.9" y="709" width="0.2" height="15.0" fill="rgb(213,189,54)" rx="2" ry="2" />
<text  x="766.88" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="20.8" y="597" width="0.2" height="15.0" fill="rgb(212,115,19)" rx="2" ry="2" />
<text  x="23.81" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="609.5" y="661" width="0.2" height="15.0" fill="rgb(226,219,13)" rx="2" ry="2" />
<text  x="612.48" y="671.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="16.8" y="805" width="0.3" height="15.0" fill="rgb(234,74,33)" rx="2" ry="2" />
<text  x="19.84" y="815.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (11 samples, 0.21%)</title><rect x="877.5" y="661" width="2.4" height="15.0" fill="rgb(223,10,50)" rx="2" ry="2" />
<text  x="880.47" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (119 samples, 2.22%)</title><rect x="1139.9" y="805" width="26.3" height="15.0" fill="rgb(208,83,19)" rx="2" ry="2" />
<text  x="1142.93" y="815.5" >s..</text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.5" y="421" width="0.2" height="15.0" fill="rgb(206,196,25)" rx="2" ry="2" />
<text  x="52.48" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (4 samples, 0.07%)</title><rect x="752.8" y="693" width="0.9" height="15.0" fill="rgb(236,216,30)" rx="2" ry="2" />
<text  x="755.85" y="703.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="525.5" y="613" width="0.6" height="15.0" fill="rgb(209,156,21)" rx="2" ry="2" />
<text  x="528.45" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.2" y="421" width="0.2" height="15.0" fill="rgb(222,42,36)" rx="2" ry="2" />
<text  x="49.17" y="431.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.15%)</title><rect x="70.4" y="725" width="1.8" height="15.0" fill="rgb(250,84,13)" rx="2" ry="2" />
<text  x="73.43" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%)</title><rect x="202.8" y="565" width="1.5" height="15.0" fill="rgb(250,175,48)" rx="2" ry="2" />
<text  x="205.77" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.07%)</title><rect x="34.7" y="613" width="0.9" height="15.0" fill="rgb(216,182,21)" rx="2" ry="2" />
<text  x="37.70" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.07%)</title><rect x="816.4" y="549" width="0.9" height="15.0" fill="rgb(253,93,48)" rx="2" ry="2" />
<text  x="819.37" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="451.3" y="581" width="1.8" height="15.0" fill="rgb(218,53,27)" rx="2" ry="2" />
<text  x="454.34" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="870.2" y="533" width="0.2" height="15.0" fill="rgb(205,209,2)" rx="2" ry="2" />
<text  x="873.19" y="543.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%)</title><rect x="102.0" y="517" width="0.2" height="15.0" fill="rgb(252,97,23)" rx="2" ry="2" />
<text  x="104.97" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="613.7" y="629" width="0.2" height="15.0" fill="rgb(212,20,4)" rx="2" ry="2" />
<text  x="616.67" y="639.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (1 samples, 0.02%)</title><rect x="737.9" y="757" width="0.2" height="15.0" fill="rgb(207,53,32)" rx="2" ry="2" />
<text  x="740.85" y="767.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (52 samples, 0.97%)</title><rect x="351.9" y="517" width="11.4" height="15.0" fill="rgb(242,143,0)" rx="2" ry="2" />
<text  x="354.87" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (50 samples, 0.93%)</title><rect x="594.9" y="629" width="11.1" height="15.0" fill="rgb(231,42,50)" rx="2" ry="2" />
<text  x="597.93" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="293.6" y="533" width="0.3" height="15.0" fill="rgb(222,117,50)" rx="2" ry="2" />
<text  x="296.64" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%)</title><rect x="824.3" y="629" width="2.2" height="15.0" fill="rgb(221,186,24)" rx="2" ry="2" />
<text  x="827.31" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1124.1" y="533" width="0.2" height="15.0" fill="rgb(210,158,19)" rx="2" ry="2" />
<text  x="1127.05" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="77.9" y="853" width="0.3" height="15.0" fill="rgb(205,206,7)" rx="2" ry="2" />
<text  x="80.93" y="863.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="102.6" y="613" width="0.3" height="15.0" fill="rgb(231,140,12)" rx="2" ry="2" />
<text  x="105.64" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="21.2" y="645" width="0.3" height="15.0" fill="rgb(222,122,9)" rx="2" ry="2" />
<text  x="24.25" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="707.6" y="725" width="0.5" height="15.0" fill="rgb(249,68,50)" rx="2" ry="2" />
<text  x="710.63" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1120.3" y="501" width="0.2" height="15.0" fill="rgb(213,104,9)" rx="2" ry="2" />
<text  x="1123.30" y="511.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%)</title><rect x="1168.4" y="773" width="0.2" height="15.0" fill="rgb(216,63,52)" rx="2" ry="2" />
<text  x="1171.39" y="783.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (16 samples, 0.30%)</title><rect x="403.5" y="469" width="3.5" height="15.0" fill="rgb(250,47,53)" rx="2" ry="2" />
<text  x="406.48" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="457.3" y="677" width="0.4" height="15.0" fill="rgb(230,159,38)" rx="2" ry="2" />
<text  x="460.30" y="687.5" ></text>
</g>
<g >
<title>abstract_type::from_string (3 samples, 0.06%)</title><rect x="56.8" y="677" width="0.6" height="15.0" fill="rgb(210,168,44)" rx="2" ry="2" />
<text  x="59.76" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="47.5" y="373" width="0.2" height="15.0" fill="rgb(231,24,25)" rx="2" ry="2" />
<text  x="50.50" y="383.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (16 samples, 0.30%)</title><rect x="968.1" y="645" width="3.5" height="15.0" fill="rgb(224,16,24)" rx="2" ry="2" />
<text  x="971.12" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="46.8" y="469" width="0.3" height="15.0" fill="rgb(236,90,7)" rx="2" ry="2" />
<text  x="49.83" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.07%)</title><rect x="833.8" y="597" width="0.9" height="15.0" fill="rgb(212,10,32)" rx="2" ry="2" />
<text  x="836.79" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (12 samples, 0.22%)</title><rect x="952.0" y="709" width="2.7" height="15.0" fill="rgb(217,90,42)" rx="2" ry="2" />
<text  x="955.01" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="59.4" y="677" width="0.2" height="15.0" fill="rgb(221,92,31)" rx="2" ry="2" />
<text  x="62.41" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="615.4" y="677" width="0.3" height="15.0" fill="rgb(223,199,43)" rx="2" ry="2" />
<text  x="618.44" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="256.8" y="421" width="0.7" height="15.0" fill="rgb(233,44,35)" rx="2" ry="2" />
<text  x="259.81" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="478.0" y="533" width="1.4" height="15.0" fill="rgb(233,167,40)" rx="2" ry="2" />
<text  x="481.03" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (3 samples, 0.06%)</title><rect x="603.3" y="597" width="0.7" height="15.0" fill="rgb(227,53,36)" rx="2" ry="2" />
<text  x="606.31" y="607.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (5 samples, 0.09%)</title><rect x="796.7" y="597" width="1.1" height="15.0" fill="rgb(219,120,17)" rx="2" ry="2" />
<text  x="799.74" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.11%)</title><rect x="841.1" y="709" width="1.3" height="15.0" fill="rgb(215,171,29)" rx="2" ry="2" />
<text  x="844.07" y="719.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (7 samples, 0.13%)</title><rect x="736.3" y="741" width="1.6" height="15.0" fill="rgb(245,6,2)" rx="2" ry="2" />
<text  x="739.31" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="282.0" y="517" width="0.2" height="15.0" fill="rgb(235,47,11)" rx="2" ry="2" />
<text  x="284.95" y="527.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="549" width="0.2" height="15.0" fill="rgb(252,103,21)" rx="2" ry="2" />
<text  x="104.97" y="559.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (9 samples, 0.17%)</title><rect x="570.2" y="613" width="2.0" height="15.0" fill="rgb(212,94,3)" rx="2" ry="2" />
<text  x="573.22" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (49 samples, 0.92%)</title><rect x="315.9" y="645" width="10.8" height="15.0" fill="rgb(247,75,17)" rx="2" ry="2" />
<text  x="318.92" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="723.7" y="725" width="0.3" height="15.0" fill="rgb(247,170,34)" rx="2" ry="2" />
<text  x="726.73" y="735.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1082.6" y="613" width="0.2" height="15.0" fill="rgb(213,93,2)" rx="2" ry="2" />
<text  x="1085.59" y="623.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (4 samples, 0.07%)</title><rect x="593.2" y="629" width="0.8" height="15.0" fill="rgb(230,210,34)" rx="2" ry="2" />
<text  x="596.16" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="130.6" y="693" width="0.3" height="15.0" fill="rgb(226,218,38)" rx="2" ry="2" />
<text  x="133.65" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (12 samples, 0.22%)</title><rect x="1080.2" y="629" width="2.6" height="15.0" fill="rgb(228,95,25)" rx="2" ry="2" />
<text  x="1083.16" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="102.4" y="709" width="0.2" height="15.0" fill="rgb(218,208,33)" rx="2" ry="2" />
<text  x="105.41" y="719.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="49.9" y="453" width="0.2" height="15.0" fill="rgb(229,203,11)" rx="2" ry="2" />
<text  x="52.92" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="225.5" y="453" width="0.2" height="15.0" fill="rgb(225,194,3)" rx="2" ry="2" />
<text  x="228.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="771.6" y="677" width="0.2" height="15.0" fill="rgb(232,34,54)" rx="2" ry="2" />
<text  x="774.60" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1148.5" y="725" width="0.5" height="15.0" fill="rgb(245,178,54)" rx="2" ry="2" />
<text  x="1151.53" y="735.5" ></text>
</g>
<g >
<title>database::find_schema (36 samples, 0.67%)</title><rect x="770.1" y="709" width="7.9" height="15.0" fill="rgb(238,219,6)" rx="2" ry="2" />
<text  x="773.05" y="719.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="877.2" y="677" width="0.3" height="15.0" fill="rgb(216,142,54)" rx="2" ry="2" />
<text  x="880.24" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (44 samples, 0.82%)</title><rect x="1014.0" y="517" width="9.7" height="15.0" fill="rgb(221,69,4)" rx="2" ry="2" />
<text  x="1016.99" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="22.4" y="613" width="0.2" height="15.0" fill="rgb(211,95,36)" rx="2" ry="2" />
<text  x="25.35" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="977.6" y="581" width="0.4" height="15.0" fill="rgb(251,38,40)" rx="2" ry="2" />
<text  x="980.60" y="591.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_currentLine (1 samples, 0.02%)</title><rect x="26.1" y="549" width="0.2" height="15.0" fill="rgb(237,223,51)" rx="2" ry="2" />
<text  x="29.10" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="732.8" y="805" width="0.2" height="15.0" fill="rgb(215,195,13)" rx="2" ry="2" />
<text  x="735.78" y="815.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="934.4" y="693" width="0.4" height="15.0" fill="rgb(209,125,3)" rx="2" ry="2" />
<text  x="937.37" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (4 samples, 0.07%)</title><rect x="207.0" y="533" width="0.8" height="15.0" fill="rgb(251,28,16)" rx="2" ry="2" />
<text  x="209.96" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="102.6" y="661" width="0.3" height="15.0" fill="rgb(241,19,38)" rx="2" ry="2" />
<text  x="105.64" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="668.4" y="757" width="0.2" height="15.0" fill="rgb(251,225,17)" rx="2" ry="2" />
<text  x="671.37" y="767.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.09%)</title><rect x="1124.9" y="613" width="1.1" height="15.0" fill="rgb(236,115,4)" rx="2" ry="2" />
<text  x="1127.93" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="37.1" y="501" width="0.5" height="15.0" fill="rgb(231,203,17)" rx="2" ry="2" />
<text  x="40.13" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="139.5" y="453" width="0.2" height="15.0" fill="rgb(237,219,51)" rx="2" ry="2" />
<text  x="142.47" y="463.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="123.1" y="725" width="0.3" height="15.0" fill="rgb(243,95,19)" rx="2" ry="2" />
<text  x="126.15" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="667.9" y="677" width="0.3" height="15.0" fill="rgb(217,155,9)" rx="2" ry="2" />
<text  x="670.93" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="201.7" y="581" width="0.2" height="15.0" fill="rgb(228,226,7)" rx="2" ry="2" />
<text  x="204.67" y="591.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="72.4" y="725" width="0.2" height="15.0" fill="rgb(246,13,8)" rx="2" ry="2" />
<text  x="75.42" y="735.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="961.9" y="677" width="0.5" height="15.0" fill="rgb(243,86,11)" rx="2" ry="2" />
<text  x="964.94" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (56 samples, 1.05%)</title><rect x="55.4" y="757" width="12.4" height="15.0" fill="rgb(243,38,29)" rx="2" ry="2" />
<text  x="58.44" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="596.9" y="597" width="0.5" height="15.0" fill="rgb(206,82,31)" rx="2" ry="2" />
<text  x="599.91" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="557.9" y="581" width="0.4" height="15.0" fill="rgb(248,153,1)" rx="2" ry="2" />
<text  x="560.87" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="17.3" y="629" width="0.2" height="15.0" fill="rgb(214,222,50)" rx="2" ry="2" />
<text  x="20.28" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (42 samples, 0.79%)</title><rect x="698.1" y="805" width="9.3" height="15.0" fill="rgb(229,119,49)" rx="2" ry="2" />
<text  x="701.15" y="815.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (8 samples, 0.15%)</title><rect x="580.1" y="693" width="1.8" height="15.0" fill="rgb(243,188,18)" rx="2" ry="2" />
<text  x="583.15" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="315.0" y="645" width="0.3" height="15.0" fill="rgb(232,23,51)" rx="2" ry="2" />
<text  x="318.04" y="655.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.07%)</title><rect x="594.0" y="629" width="0.9" height="15.0" fill="rgb(216,81,0)" rx="2" ry="2" />
<text  x="597.04" y="639.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="729.9" y="741" width="0.2" height="15.0" fill="rgb(249,87,53)" rx="2" ry="2" />
<text  x="732.91" y="751.5" ></text>
</g>
<g >
<title>sstables::sstable::write_digest (1 samples, 0.02%)</title><rect x="707.4" y="533" width="0.2" height="15.0" fill="rgb(246,168,8)" rx="2" ry="2" />
<text  x="710.41" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (242 samples, 4.52%)</title><rect x="220.4" y="517" width="53.4" height="15.0" fill="rgb(216,34,37)" rx="2" ry="2" />
<text  x="223.41" y="527.5" >logal..</text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (11 samples, 0.21%)</title><rect x="1110.8" y="709" width="2.4" height="15.0" fill="rgb(207,187,24)" rx="2" ry="2" />
<text  x="1113.82" y="719.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="606.8" y="677" width="0.3" height="15.0" fill="rgb(224,23,32)" rx="2" ry="2" />
<text  x="609.84" y="687.5" ></text>
</g>
<g >
<title>dht::token::to_sstring (1 samples, 0.02%)</title><rect x="17.7" y="725" width="0.2" height="15.0" fill="rgb(224,192,7)" rx="2" ry="2" />
<text  x="20.72" y="735.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,941 samples, 92.36%)</title><rect x="79.5" y="901" width="1089.8" height="15.0" fill="rgb(246,61,43)" rx="2" ry="2" />
<text  x="82.48" y="911.5" >seastar::app_template::run</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1128.7" y="469" width="0.2" height="15.0" fill="rgb(218,71,53)" rx="2" ry="2" />
<text  x="1131.68" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="74.8" y="805" width="3.1" height="15.0" fill="rgb(240,58,48)" rx="2" ry="2" />
<text  x="77.84" y="815.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (4 samples, 0.07%)</title><rect x="70.9" y="629" width="0.9" height="15.0" fill="rgb(209,155,49)" rx="2" ry="2" />
<text  x="73.87" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (11 samples, 0.21%)</title><rect x="760.8" y="581" width="2.4" height="15.0" fill="rgb(231,0,33)" rx="2" ry="2" />
<text  x="763.79" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="36.0" y="597" width="0.2" height="15.0" fill="rgb(229,60,21)" rx="2" ry="2" />
<text  x="39.03" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="596.0" y="597" width="0.3" height="15.0" fill="rgb(248,65,38)" rx="2" ry="2" />
<text  x="599.03" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.07%)</title><rect x="1164.9" y="725" width="0.8" height="15.0" fill="rgb(246,45,39)" rx="2" ry="2" />
<text  x="1167.86" y="735.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.07%)</title><rect x="1141.0" y="789" width="0.9" height="15.0" fill="rgb(217,45,18)" rx="2" ry="2" />
<text  x="1144.04" y="799.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%)</title><rect x="36.2" y="613" width="0.3" height="15.0" fill="rgb(210,4,32)" rx="2" ry="2" />
<text  x="39.25" y="623.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="15.5" y="837" width="0.2" height="15.0" fill="rgb(246,213,47)" rx="2" ry="2" />
<text  x="18.51" y="847.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (66 samples, 1.23%)</title><rect x="415.2" y="485" width="14.5" height="15.0" fill="rgb(240,124,40)" rx="2" ry="2" />
<text  x="418.17" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (1 samples, 0.02%)</title><rect x="1117.4" y="741" width="0.3" height="15.0" fill="rgb(246,216,29)" rx="2" ry="2" />
<text  x="1120.44" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="40.0" y="597" width="0.2" height="15.0" fill="rgb(235,171,10)" rx="2" ry="2" />
<text  x="43.00" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="718.4" y="773" width="0.3" height="15.0" fill="rgb(240,4,32)" rx="2" ry="2" />
<text  x="721.44" y="783.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (27 samples, 0.50%)</title><rect x="1057.9" y="629" width="5.9" height="15.0" fill="rgb(252,108,11)" rx="2" ry="2" />
<text  x="1060.88" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="45.3" y="501" width="0.2" height="15.0" fill="rgb(222,193,31)" rx="2" ry="2" />
<text  x="48.29" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="695.3" y="757" width="0.2" height="15.0" fill="rgb(252,16,7)" rx="2" ry="2" />
<text  x="698.28" y="767.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (532 samples, 9.94%)</title><rect x="460.6" y="725" width="117.3" height="15.0" fill="rgb(211,51,9)" rx="2" ry="2" />
<text  x="463.61" y="735.5" >query::querier..</text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="966.4" y="661" width="0.2" height="15.0" fill="rgb(248,65,45)" rx="2" ry="2" />
<text  x="969.35" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (5 samples, 0.09%)</title><rect x="101.3" y="789" width="1.1" height="15.0" fill="rgb(215,22,53)" rx="2" ry="2" />
<text  x="104.31" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="49.9" y="581" width="0.2" height="15.0" fill="rgb(236,158,12)" rx="2" ry="2" />
<text  x="52.92" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1 samples, 0.02%)</title><rect x="659.3" y="805" width="0.3" height="15.0" fill="rgb(244,196,39)" rx="2" ry="2" />
<text  x="662.33" y="815.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="766.1" y="677" width="0.2" height="15.0" fill="rgb(209,152,25)" rx="2" ry="2" />
<text  x="769.08" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (8 samples, 0.15%)</title><rect x="294.7" y="549" width="1.8" height="15.0" fill="rgb(229,142,47)" rx="2" ry="2" />
<text  x="297.74" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.3" y="437" width="0.3" height="15.0" fill="rgb(210,67,25)" rx="2" ry="2" />
<text  x="42.33" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1023.3" y="501" width="0.2" height="15.0" fill="rgb(237,42,2)" rx="2" ry="2" />
<text  x="1026.26" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="605.1" y="613" width="0.2" height="15.0" fill="rgb(215,101,5)" rx="2" ry="2" />
<text  x="608.07" y="623.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.26%)</title><rect x="995.9" y="581" width="3.1" height="15.0" fill="rgb(245,96,51)" rx="2" ry="2" />
<text  x="998.91" y="591.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (18 samples, 0.34%)</title><rect x="923.3" y="645" width="4.0" height="15.0" fill="rgb(239,128,27)" rx="2" ry="2" />
<text  x="926.34" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="953.1" y="629" width="0.2" height="15.0" fill="rgb(220,100,44)" rx="2" ry="2" />
<text  x="956.12" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="816.6" y="533" width="0.2" height="15.0" fill="rgb(209,144,25)" rx="2" ry="2" />
<text  x="819.59" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="733.2" y="805" width="0.2" height="15.0" fill="rgb(227,18,0)" rx="2" ry="2" />
<text  x="736.22" y="815.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="667.5" y="789" width="0.2" height="15.0" fill="rgb(247,203,39)" rx="2" ry="2" />
<text  x="670.49" y="799.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1034.3" y="565" width="0.2" height="15.0" fill="rgb(240,46,4)" rx="2" ry="2" />
<text  x="1037.28" y="575.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="823.6" y="645" width="0.3" height="15.0" fill="rgb(213,229,8)" rx="2" ry="2" />
<text  x="826.65" y="655.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (31 samples, 0.58%)</title><rect x="619.2" y="741" width="6.8" height="15.0" fill="rgb(234,160,45)" rx="2" ry="2" />
<text  x="622.19" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1139.7" y="805" width="0.2" height="15.0" fill="rgb(208,99,38)" rx="2" ry="2" />
<text  x="1142.71" y="815.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (147 samples, 2.75%)</title><rect x="377.0" y="485" width="32.4" height="15.0" fill="rgb(232,66,46)" rx="2" ry="2" />
<text  x="380.01" y="495.5" >wr..</text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="533.4" y="597" width="0.7" height="15.0" fill="rgb(239,111,33)" rx="2" ry="2" />
<text  x="536.39" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1113.2" y="709" width="0.3" height="15.0" fill="rgb(212,100,48)" rx="2" ry="2" />
<text  x="1116.24" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (52 samples, 0.97%)</title><rect x="315.3" y="661" width="11.4" height="15.0" fill="rgb(209,153,15)" rx="2" ry="2" />
<text  x="318.26" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="411.6" y="501" width="0.7" height="15.0" fill="rgb(239,185,20)" rx="2" ry="2" />
<text  x="414.64" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (7 samples, 0.13%)</title><rect x="1050.4" y="581" width="1.5" height="15.0" fill="rgb(209,52,12)" rx="2" ry="2" />
<text  x="1053.39" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="59.8" y="613" width="0.3" height="15.0" fill="rgb(244,121,2)" rx="2" ry="2" />
<text  x="62.85" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (43 samples, 0.80%)</title><rect x="1126.7" y="661" width="9.5" height="15.0" fill="rgb(237,34,8)" rx="2" ry="2" />
<text  x="1129.70" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="947.4" y="693" width="0.2" height="15.0" fill="rgb(234,229,30)" rx="2" ry="2" />
<text  x="950.38" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (3 samples, 0.06%)</title><rect x="160.9" y="725" width="0.6" height="15.0" fill="rgb(251,82,34)" rx="2" ry="2" />
<text  x="163.86" y="735.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1016.9" y="501" width="0.2" height="15.0" fill="rgb(233,181,39)" rx="2" ry="2" />
<text  x="1019.86" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="49.7" y="597" width="0.4" height="15.0" fill="rgb(224,209,17)" rx="2" ry="2" />
<text  x="52.70" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="819.0" y="581" width="0.2" height="15.0" fill="rgb(223,59,23)" rx="2" ry="2" />
<text  x="822.02" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (10 samples, 0.19%)</title><rect x="877.7" y="645" width="2.2" height="15.0" fill="rgb(249,80,14)" rx="2" ry="2" />
<text  x="880.69" y="655.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (5 samples, 0.09%)</title><rect x="633.1" y="709" width="1.1" height="15.0" fill="rgb(244,154,16)" rx="2" ry="2" />
<text  x="636.08" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%)</title><rect x="51.5" y="629" width="0.2" height="15.0" fill="rgb(225,164,7)" rx="2" ry="2" />
<text  x="54.47" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="69.1" y="677" width="0.5" height="15.0" fill="rgb(245,15,42)" rx="2" ry="2" />
<text  x="72.11" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="452.9" y="565" width="0.2" height="15.0" fill="rgb(244,222,6)" rx="2" ry="2" />
<text  x="455.89" y="575.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (63 samples, 1.18%)</title><rect x="510.0" y="613" width="13.9" height="15.0" fill="rgb(233,2,15)" rx="2" ry="2" />
<text  x="513.01" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="182.3" y="613" width="0.4" height="15.0" fill="rgb(251,120,36)" rx="2" ry="2" />
<text  x="185.26" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="683.6" y="757" width="0.2" height="15.0" fill="rgb(213,226,2)" rx="2" ry="2" />
<text  x="686.59" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="757" width="0.5" height="15.0" fill="rgb(214,32,26)" rx="2" ry="2" />
<text  x="710.63" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="941.2" y="661" width="0.7" height="15.0" fill="rgb(245,187,6)" rx="2" ry="2" />
<text  x="944.21" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1087.9" y="709" width="0.2" height="15.0" fill="rgb(245,1,4)" rx="2" ry="2" />
<text  x="1090.88" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="31.0" y="533" width="0.2" height="15.0" fill="rgb(238,215,14)" rx="2" ry="2" />
<text  x="33.95" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="780.2" y="661" width="0.7" height="15.0" fill="rgb(212,73,2)" rx="2" ry="2" />
<text  x="783.20" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="840.9" y="709" width="0.2" height="15.0" fill="rgb(250,127,42)" rx="2" ry="2" />
<text  x="843.85" y="719.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (8 samples, 0.15%)</title><rect x="226.6" y="437" width="1.8" height="15.0" fill="rgb(224,43,51)" rx="2" ry="2" />
<text  x="229.59" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="821.2" y="613" width="0.2" height="15.0" fill="rgb(248,42,21)" rx="2" ry="2" />
<text  x="824.22" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="1128.7" y="501" width="0.2" height="15.0" fill="rgb(248,160,18)" rx="2" ry="2" />
<text  x="1131.68" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="99.5" y="789" width="0.3" height="15.0" fill="rgb(227,2,30)" rx="2" ry="2" />
<text  x="102.55" y="799.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="1095.4" y="693" width="0.2" height="15.0" fill="rgb(228,32,9)" rx="2" ry="2" />
<text  x="1098.38" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%)</title><rect x="933.0" y="629" width="1.1" height="15.0" fill="rgb(243,31,28)" rx="2" ry="2" />
<text  x="936.05" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="982.2" y="597" width="0.3" height="15.0" fill="rgb(246,48,20)" rx="2" ry="2" />
<text  x="985.23" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="729.0" y="789" width="0.2" height="15.0" fill="rgb(249,152,5)" rx="2" ry="2" />
<text  x="732.03" y="799.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="928.2" y="693" width="0.2" height="15.0" fill="rgb(251,4,52)" rx="2" ry="2" />
<text  x="931.19" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="985.1" y="549" width="0.2" height="15.0" fill="rgb(249,119,5)" rx="2" ry="2" />
<text  x="988.10" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.11%)</title><rect x="909.4" y="661" width="1.4" height="15.0" fill="rgb(231,20,36)" rx="2" ry="2" />
<text  x="912.45" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%)</title><rect x="17.5" y="805" width="0.2" height="15.0" fill="rgb(216,111,52)" rx="2" ry="2" />
<text  x="20.50" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="38.5" y="501" width="0.4" height="15.0" fill="rgb(232,225,8)" rx="2" ry="2" />
<text  x="41.45" y="511.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1117.0" y="741" width="0.2" height="15.0" fill="rgb(221,91,35)" rx="2" ry="2" />
<text  x="1119.99" y="751.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="40.9" y="453" width="0.4" height="15.0" fill="rgb(232,34,20)" rx="2" ry="2" />
<text  x="43.88" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.09%)</title><rect x="1159.6" y="789" width="1.1" height="15.0" fill="rgb(244,150,29)" rx="2" ry="2" />
<text  x="1162.56" y="799.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%)</title><rect x="355.6" y="469" width="0.5" height="15.0" fill="rgb(232,171,34)" rx="2" ry="2" />
<text  x="358.62" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="840.2" y="709" width="0.2" height="15.0" fill="rgb(240,92,11)" rx="2" ry="2" />
<text  x="843.19" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1115.7" y="709" width="0.2" height="15.0" fill="rgb(210,153,48)" rx="2" ry="2" />
<text  x="1118.67" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="587.2" y="709" width="0.2" height="15.0" fill="rgb(244,148,9)" rx="2" ry="2" />
<text  x="590.21" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="684.7" y="789" width="0.2" height="15.0" fill="rgb(244,26,41)" rx="2" ry="2" />
<text  x="687.70" y="799.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="309" width="0.3" height="15.0" fill="rgb(229,68,2)" rx="2" ry="2" />
<text  x="104.53" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="277.3" y="405" width="0.2" height="15.0" fill="rgb(210,222,27)" rx="2" ry="2" />
<text  x="280.32" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="568.0" y="581" width="0.2" height="15.0" fill="rgb(223,20,38)" rx="2" ry="2" />
<text  x="571.02" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="49.7" y="453" width="0.2" height="15.0" fill="rgb(239,49,33)" rx="2" ry="2" />
<text  x="52.70" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, std::function&lt;void  (1 samples, 0.02%)</title><rect x="730.8" y="805" width="0.2" height="15.0" fill="rgb(248,86,2)" rx="2" ry="2" />
<text  x="733.79" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.5" y="517" width="0.2" height="15.0" fill="rgb(222,172,10)" rx="2" ry="2" />
<text  x="52.48" y="527.5" ></text>
</g>
<g >
<title>reconcilable_result::reconcilable_result (1 samples, 0.02%)</title><rect x="101.8" y="549" width="0.2" height="15.0" fill="rgb(234,146,4)" rx="2" ry="2" />
<text  x="104.75" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.39%)</title><rect x="274.2" y="501" width="4.7" height="15.0" fill="rgb(242,131,36)" rx="2" ry="2" />
<text  x="277.23" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="682.3" y="773" width="0.2" height="15.0" fill="rgb(214,85,2)" rx="2" ry="2" />
<text  x="685.27" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (45 samples, 0.84%)</title><rect x="23.0" y="629" width="9.9" height="15.0" fill="rgb(213,103,42)" rx="2" ry="2" />
<text  x="26.01" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="39.6" y="597" width="0.2" height="15.0" fill="rgb(249,174,1)" rx="2" ry="2" />
<text  x="42.56" y="607.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::components (1 samples, 0.02%)</title><rect x="139.5" y="421" width="0.2" height="15.0" fill="rgb(207,12,5)" rx="2" ry="2" />
<text  x="142.47" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.28%)</title><rect x="811.3" y="469" width="3.3" height="15.0" fill="rgb(248,42,33)" rx="2" ry="2" />
<text  x="814.30" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.5" y="437" width="0.2" height="15.0" fill="rgb(205,129,25)" rx="2" ry="2" />
<text  x="52.48" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (1 samples, 0.02%)</title><rect x="62.7" y="661" width="0.2" height="15.0" fill="rgb(244,154,12)" rx="2" ry="2" />
<text  x="65.71" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (7 samples, 0.13%)</title><rect x="648.3" y="741" width="1.5" height="15.0" fill="rgb(230,28,53)" rx="2" ry="2" />
<text  x="651.30" y="751.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="568.2" y="613" width="0.5" height="15.0" fill="rgb(236,188,42)" rx="2" ry="2" />
<text  x="571.24" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1150.5" y="757" width="0.2" height="15.0" fill="rgb(242,45,22)" rx="2" ry="2" />
<text  x="1153.52" y="767.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="70.0" y="757" width="0.2" height="15.0" fill="rgb(251,117,5)" rx="2" ry="2" />
<text  x="72.99" y="767.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (1 samples, 0.02%)</title><rect x="21.2" y="677" width="0.3" height="15.0" fill="rgb(233,177,16)" rx="2" ry="2" />
<text  x="24.25" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="101.5" y="373" width="0.3" height="15.0" fill="rgb(252,132,7)" rx="2" ry="2" />
<text  x="104.53" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="17.1" y="789" width="0.2" height="15.0" fill="rgb(252,62,50)" rx="2" ry="2" />
<text  x="20.06" y="799.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="39.3" y="485" width="0.3" height="15.0" fill="rgb(254,220,35)" rx="2" ry="2" />
<text  x="42.33" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;reconcilable_result&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="613" width="0.2" height="15.0" fill="rgb(218,103,24)" rx="2" ry="2" />
<text  x="142.47" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="597.6" y="581" width="0.6" height="15.0" fill="rgb(221,169,35)" rx="2" ry="2" />
<text  x="600.57" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="43.5" y="421" width="0.2" height="15.0" fill="rgb(241,34,25)" rx="2" ry="2" />
<text  x="46.53" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="760.3" y="597" width="0.3" height="15.0" fill="rgb(250,6,9)" rx="2" ry="2" />
<text  x="763.35" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="44.8" y="581" width="0.3" height="15.0" fill="rgb(238,88,44)" rx="2" ry="2" />
<text  x="47.85" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="1134.0" y="421" width="0.4" height="15.0" fill="rgb(221,86,41)" rx="2" ry="2" />
<text  x="1136.98" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="1157.8" y="757" width="0.2" height="15.0" fill="rgb(208,143,44)" rx="2" ry="2" />
<text  x="1160.80" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="46.2" y="485" width="0.6" height="15.0" fill="rgb(244,194,9)" rx="2" ry="2" />
<text  x="49.17" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="650.3" y="741" width="0.4" height="15.0" fill="rgb(207,201,45)" rx="2" ry="2" />
<text  x="653.29" y="751.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.2" y="789" width="0.2" height="15.0" fill="rgb(213,81,3)" rx="2" ry="2" />
<text  x="13.22" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="459.9" y="709" width="0.5" height="15.0" fill="rgb(230,59,46)" rx="2" ry="2" />
<text  x="462.94" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="803.1" y="485" width="0.5" height="15.0" fill="rgb(239,146,47)" rx="2" ry="2" />
<text  x="806.14" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="103.7" y="773" width="0.3" height="15.0" fill="rgb(206,187,24)" rx="2" ry="2" />
<text  x="106.74" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (634 samples, 11.85%)</title><rect x="949.4" y="725" width="139.8" height="15.0" fill="rgb(232,44,46)" rx="2" ry="2" />
<text  x="952.37" y="735.5" >cql3::statements:..</text>
</g>
<g >
<title>position_in_partition::position_in_partition (2 samples, 0.04%)</title><rect x="282.4" y="549" width="0.4" height="15.0" fill="rgb(220,131,22)" rx="2" ry="2" />
<text  x="285.39" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (11 samples, 0.21%)</title><rect x="760.8" y="597" width="2.4" height="15.0" fill="rgb(244,64,16)" rx="2" ry="2" />
<text  x="763.79" y="607.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (24 samples, 0.45%)</title><rect x="1067.6" y="549" width="5.3" height="15.0" fill="rgb(222,113,19)" rx="2" ry="2" />
<text  x="1070.59" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.21%)</title><rect x="775.1" y="629" width="2.5" height="15.0" fill="rgb(242,34,9)" rx="2" ry="2" />
<text  x="778.13" y="639.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="626.7" y="741" width="0.2" height="15.0" fill="rgb(227,72,44)" rx="2" ry="2" />
<text  x="629.69" y="751.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%)</title><rect x="199.9" y="565" width="0.2" height="15.0" fill="rgb(218,73,4)" rx="2" ry="2" />
<text  x="202.90" y="575.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (3 samples, 0.06%)</title><rect x="741.8" y="709" width="0.7" height="15.0" fill="rgb(240,145,54)" rx="2" ry="2" />
<text  x="744.82" y="719.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (3 samples, 0.06%)</title><rect x="1133.8" y="437" width="0.6" height="15.0" fill="rgb(239,54,26)" rx="2" ry="2" />
<text  x="1136.76" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_16ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_17ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_18ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_19EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (7 samples, 0.13%)</title><rect x="56.8" y="693" width="1.5" height="15.0" fill="rgb(232,47,46)" rx="2" ry="2" />
<text  x="59.76" y="703.5" ></text>
</g>
<g >
<title>table::make_reader (505 samples, 9.44%)</title><rect x="464.4" y="661" width="111.3" height="15.0" fill="rgb(235,99,45)" rx="2" ry="2" />
<text  x="467.36" y="671.5" >table::make_r..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="47.3" y="389" width="0.4" height="15.0" fill="rgb(254,121,33)" rx="2" ry="2" />
<text  x="50.27" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.19%)</title><rect x="310.6" y="629" width="2.2" height="15.0" fill="rgb(236,126,33)" rx="2" ry="2" />
<text  x="313.62" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="40.9" y="501" width="0.4" height="15.0" fill="rgb(208,214,20)" rx="2" ry="2" />
<text  x="43.88" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (4 samples, 0.07%)</title><rect x="1148.1" y="757" width="0.9" height="15.0" fill="rgb(236,208,21)" rx="2" ry="2" />
<text  x="1151.09" y="767.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (9 samples, 0.17%)</title><rect x="1093.4" y="693" width="2.0" height="15.0" fill="rgb(220,173,45)" rx="2" ry="2" />
<text  x="1096.39" y="703.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="521.9" y="485" width="0.2" height="15.0" fill="rgb(225,170,53)" rx="2" ry="2" />
<text  x="524.92" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="67.3" y="741" width="0.5" height="15.0" fill="rgb(229,112,1)" rx="2" ry="2" />
<text  x="70.35" y="751.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%)</title><rect x="51.2" y="597" width="0.3" height="15.0" fill="rgb(241,180,3)" rx="2" ry="2" />
<text  x="54.24" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1047.3" y="597" width="0.4" height="15.0" fill="rgb(208,146,10)" rx="2" ry="2" />
<text  x="1050.30" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="855.4" y="741" width="0.2" height="15.0" fill="rgb(250,185,14)" rx="2" ry="2" />
<text  x="858.41" y="751.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="1167.1" y="773" width="0.2" height="15.0" fill="rgb(236,166,34)" rx="2" ry="2" />
<text  x="1170.06" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="50.8" y="613" width="0.2" height="15.0" fill="rgb(232,140,38)" rx="2" ry="2" />
<text  x="53.80" y="623.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (4 samples, 0.07%)</title><rect x="471.2" y="629" width="0.9" height="15.0" fill="rgb(221,144,3)" rx="2" ry="2" />
<text  x="474.19" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="17.7" y="837" width="0.2" height="15.0" fill="rgb(247,53,2)" rx="2" ry="2" />
<text  x="20.72" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="37.1" y="517" width="0.5" height="15.0" fill="rgb(210,50,29)" rx="2" ry="2" />
<text  x="40.13" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="409.4" y="501" width="0.3" height="15.0" fill="rgb(214,163,38)" rx="2" ry="2" />
<text  x="412.44" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (17 samples, 0.32%)</title><rect x="261.2" y="421" width="3.8" height="15.0" fill="rgb(235,133,41)" rx="2" ry="2" />
<text  x="264.22" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (11 samples, 0.21%)</title><rect x="629.8" y="693" width="2.4" height="15.0" fill="rgb(212,0,49)" rx="2" ry="2" />
<text  x="632.78" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1063.8" y="629" width="0.3" height="15.0" fill="rgb(240,145,8)" rx="2" ry="2" />
<text  x="1066.84" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="640.1" y="741" width="0.3" height="15.0" fill="rgb(215,146,48)" rx="2" ry="2" />
<text  x="643.14" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="912.5" y="677" width="0.5" height="15.0" fill="rgb(216,32,37)" rx="2" ry="2" />
<text  x="915.53" y="687.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="46.2" y="549" width="1.5" height="15.0" fill="rgb(221,77,5)" rx="2" ry="2" />
<text  x="49.17" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="17.7" y="693" width="0.2" height="15.0" fill="rgb(231,44,45)" rx="2" ry="2" />
<text  x="20.72" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (548 samples, 10.24%)</title><rect x="333.6" y="677" width="120.8" height="15.0" fill="rgb(246,174,26)" rx="2" ry="2" />
<text  x="336.56" y="687.5" >flat_mutation_r..</text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (563 samples, 10.52%)</title><rect x="739.0" y="773" width="124.1" height="15.0" fill="rgb(254,48,44)" rx="2" ry="2" />
<text  x="741.95" y="783.5" >single_node_cql..</text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="271.4" y="405" width="0.2" height="15.0" fill="rgb(234,64,49)" rx="2" ry="2" />
<text  x="274.36" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="34.7" y="533" width="0.7" height="15.0" fill="rgb(205,156,41)" rx="2" ry="2" />
<text  x="37.70" y="543.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (18 samples, 0.34%)</title><rect x="851.4" y="725" width="4.0" height="15.0" fill="rgb(207,195,43)" rx="2" ry="2" />
<text  x="854.44" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.80%)</title><rect x="1126.7" y="741" width="9.5" height="15.0" fill="rgb(231,35,3)" rx="2" ry="2" />
<text  x="1129.70" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="45.3" y="469" width="0.2" height="15.0" fill="rgb(209,176,36)" rx="2" ry="2" />
<text  x="48.29" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="37.8" y="517" width="0.4" height="15.0" fill="rgb(220,114,12)" rx="2" ry="2" />
<text  x="40.79" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.2" y="517" width="0.2" height="15.0" fill="rgb(233,184,0)" rx="2" ry="2" />
<text  x="43.22" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="651.2" y="677" width="0.4" height="15.0" fill="rgb(235,30,46)" rx="2" ry="2" />
<text  x="654.17" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1146.1" y="757" width="0.2" height="15.0" fill="rgb(244,84,52)" rx="2" ry="2" />
<text  x="1149.11" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="791.0" y="581" width="0.7" height="15.0" fill="rgb(223,128,10)" rx="2" ry="2" />
<text  x="794.01" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="981.1" y="597" width="0.5" height="15.0" fill="rgb(225,219,5)" rx="2" ry="2" />
<text  x="984.13" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="48.8" y="533" width="0.2" height="15.0" fill="rgb(225,211,12)" rx="2" ry="2" />
<text  x="51.82" y="543.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1180.5" y="933" width="0.2" height="15.0" fill="rgb(217,84,21)" rx="2" ry="2" />
<text  x="1183.52" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="321.2" y="597" width="0.2" height="15.0" fill="rgb(219,160,16)" rx="2" ry="2" />
<text  x="324.21" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="608.2" y="645" width="0.4" height="15.0" fill="rgb(223,32,21)" rx="2" ry="2" />
<text  x="611.16" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="44.2" y="581" width="0.2" height="15.0" fill="rgb(250,144,32)" rx="2" ry="2" />
<text  x="47.19" y="591.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="527.9" y="629" width="0.2" height="15.0" fill="rgb(209,216,19)" rx="2" ry="2" />
<text  x="530.88" y="639.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,941 samples, 92.36%)</title><rect x="79.5" y="869" width="1089.8" height="15.0" fill="rgb(231,212,40)" rx="2" ry="2" />
<text  x="82.48" y="879.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::deferred_action&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.5" y="853" width="0.2" height="15.0" fill="rgb(236,177,4)" rx="2" ry="2" />
<text  x="20.50" y="863.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%)</title><rect x="596.5" y="581" width="0.4" height="15.0" fill="rgb(226,10,7)" rx="2" ry="2" />
<text  x="599.47" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (14 samples, 0.26%)</title><rect x="74.8" y="869" width="3.1" height="15.0" fill="rgb(238,50,33)" rx="2" ry="2" />
<text  x="77.84" y="879.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (1 samples, 0.02%)</title><rect x="58.1" y="677" width="0.2" height="15.0" fill="rgb(224,201,1)" rx="2" ry="2" />
<text  x="61.08" y="687.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="982.5" y="597" width="0.2" height="15.0" fill="rgb(218,130,46)" rx="2" ry="2" />
<text  x="985.45" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="794.5" y="629" width="0.3" height="15.0" fill="rgb(239,123,23)" rx="2" ry="2" />
<text  x="797.53" y="639.5" ></text>
</g>
<g >
<title>query::digester::digester (4 samples, 0.07%)</title><rect x="628.7" y="709" width="0.9" height="15.0" fill="rgb(210,182,33)" rx="2" ry="2" />
<text  x="631.67" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (8 samples, 0.15%)</title><rect x="676.3" y="773" width="1.8" height="15.0" fill="rgb(238,140,11)" rx="2" ry="2" />
<text  x="679.31" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.13%)</title><rect x="938.1" y="709" width="1.6" height="15.0" fill="rgb(216,163,46)" rx="2" ry="2" />
<text  x="941.12" y="719.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (4 samples, 0.07%)</title><rect x="729.9" y="773" width="0.9" height="15.0" fill="rgb(243,137,33)" rx="2" ry="2" />
<text  x="732.91" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.15%)</title><rect x="1036.7" y="565" width="1.8" height="15.0" fill="rgb(214,125,10)" rx="2" ry="2" />
<text  x="1039.71" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1144.1" y="789" width="0.2" height="15.0" fill="rgb(224,73,30)" rx="2" ry="2" />
<text  x="1147.12" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="790.3" y="597" width="0.7" height="15.0" fill="rgb(213,76,49)" rx="2" ry="2" />
<text  x="793.34" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (1 samples, 0.02%)</title><rect x="1168.6" y="773" width="0.2" height="15.0" fill="rgb(226,138,33)" rx="2" ry="2" />
<text  x="1171.61" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.07%)</title><rect x="756.2" y="661" width="0.8" height="15.0" fill="rgb(243,173,26)" rx="2" ry="2" />
<text  x="759.16" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="844.6" y="725" width="0.7" height="15.0" fill="rgb(229,144,50)" rx="2" ry="2" />
<text  x="847.60" y="735.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (4 samples, 0.07%)</title><rect x="824.8" y="613" width="0.8" height="15.0" fill="rgb(229,113,42)" rx="2" ry="2" />
<text  x="827.75" y="623.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%)</title><rect x="103.1" y="661" width="0.4" height="15.0" fill="rgb(244,36,11)" rx="2" ry="2" />
<text  x="106.08" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, data_value&gt; (1 samples, 0.02%)</title><rect x="103.3" y="597" width="0.2" height="15.0" fill="rgb(244,189,37)" rx="2" ry="2" />
<text  x="106.30" y="607.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (40 samples, 0.75%)</title><rect x="871.5" y="789" width="8.8" height="15.0" fill="rgb(244,38,32)" rx="2" ry="2" />
<text  x="874.51" y="799.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (5 samples, 0.09%)</title><rect x="101.3" y="645" width="1.1" height="15.0" fill="rgb(243,170,15)" rx="2" ry="2" />
<text  x="104.31" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (10 samples, 0.19%)</title><rect x="874.6" y="677" width="2.2" height="15.0" fill="rgb(251,174,52)" rx="2" ry="2" />
<text  x="877.60" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="74.6" y="645" width="0.2" height="15.0" fill="rgb(217,13,26)" rx="2" ry="2" />
<text  x="77.62" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="1024.6" y="517" width="0.2" height="15.0" fill="rgb(224,73,10)" rx="2" ry="2" />
<text  x="1027.58" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="345.0" y="565" width="0.3" height="15.0" fill="rgb(207,171,33)" rx="2" ry="2" />
<text  x="348.03" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="273.1" y="469" width="0.2" height="15.0" fill="rgb(219,47,47)" rx="2" ry="2" />
<text  x="276.13" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (3 samples, 0.06%)</title><rect x="364.7" y="501" width="0.6" height="15.0" fill="rgb(239,124,34)" rx="2" ry="2" />
<text  x="367.66" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="21.9" y="549" width="0.2" height="15.0" fill="rgb(217,100,2)" rx="2" ry="2" />
<text  x="24.91" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="871.1" y="805" width="0.2" height="15.0" fill="rgb(248,226,35)" rx="2" ry="2" />
<text  x="874.07" y="815.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="574.6" y="629" width="0.7" height="15.0" fill="rgb(224,51,18)" rx="2" ry="2" />
<text  x="577.64" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%)</title><rect x="467.4" y="645" width="0.7" height="15.0" fill="rgb(207,88,30)" rx="2" ry="2" />
<text  x="470.44" y="655.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1137.9" y="789" width="0.3" height="15.0" fill="rgb(220,197,2)" rx="2" ry="2" />
<text  x="1140.95" y="799.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="137.5" y="757" width="0.2" height="15.0" fill="rgb(246,199,4)" rx="2" ry="2" />
<text  x="140.48" y="767.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="790.3" y="613" width="0.7" height="15.0" fill="rgb(208,17,25)" rx="2" ry="2" />
<text  x="793.34" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="851.0" y="709" width="0.4" height="15.0" fill="rgb(243,47,8)" rx="2" ry="2" />
<text  x="854.00" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_aggregate_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="53.0" y="677" width="0.2" height="15.0" fill="rgb(229,66,3)" rx="2" ry="2" />
<text  x="56.01" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="857.2" y="677" width="0.2" height="15.0" fill="rgb(231,138,27)" rx="2" ry="2" />
<text  x="860.17" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="1105.5" y="725" width="0.7" height="15.0" fill="rgb(217,198,40)" rx="2" ry="2" />
<text  x="1108.53" y="735.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.09%)</title><rect x="129.5" y="693" width="1.1" height="15.0" fill="rgb(248,217,46)" rx="2" ry="2" />
<text  x="132.54" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="199.2" y="565" width="0.5" height="15.0" fill="rgb(224,35,34)" rx="2" ry="2" />
<text  x="202.24" y="575.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="453" width="0.2" height="15.0" fill="rgb(212,37,49)" rx="2" ry="2" />
<text  x="104.97" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="101.1" y="805" width="0.2" height="15.0" fill="rgb(227,17,49)" rx="2" ry="2" />
<text  x="104.09" y="815.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="803.6" y="453" width="0.2" height="15.0" fill="rgb(252,160,15)" rx="2" ry="2" />
<text  x="806.58" y="463.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (2 samples, 0.04%)</title><rect x="103.1" y="677" width="0.4" height="15.0" fill="rgb(252,220,26)" rx="2" ry="2" />
<text  x="106.08" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.07%)</title><rect x="136.6" y="757" width="0.9" height="15.0" fill="rgb(238,159,19)" rx="2" ry="2" />
<text  x="139.60" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="337.3" y="565" width="0.2" height="15.0" fill="rgb(231,131,25)" rx="2" ry="2" />
<text  x="340.31" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%)</title><rect x="101.5" y="357" width="0.3" height="15.0" fill="rgb(214,199,43)" rx="2" ry="2" />
<text  x="104.53" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="860.0" y="725" width="2.2" height="15.0" fill="rgb(235,209,28)" rx="2" ry="2" />
<text  x="863.04" y="735.5" ></text>
</g>
<g >
<title>ser::column_view::c (2 samples, 0.04%)</title><rect x="1122.9" y="533" width="0.5" height="15.0" fill="rgb(231,209,16)" rx="2" ry="2" />
<text  x="1125.95" y="543.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="836.4" y="597" width="0.5" height="15.0" fill="rgb(214,185,8)" rx="2" ry="2" />
<text  x="839.44" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="707.4" y="709" width="0.2" height="15.0" fill="rgb(235,147,35)" rx="2" ry="2" />
<text  x="710.41" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="295.2" y="517" width="0.2" height="15.0" fill="rgb(246,56,11)" rx="2" ry="2" />
<text  x="298.19" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;float  (1 samples, 0.02%)</title><rect x="1168.4" y="725" width="0.2" height="15.0" fill="rgb(233,178,11)" rx="2" ry="2" />
<text  x="1171.39" y="735.5" ></text>
</g>
<g >
<title>sstables::mc::writer::close_data_writer (1 samples, 0.02%)</title><rect x="707.4" y="549" width="0.2" height="15.0" fill="rgb(226,104,41)" rx="2" ry="2" />
<text  x="710.41" y="559.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%)</title><rect x="103.1" y="645" width="0.4" height="15.0" fill="rgb(254,199,38)" rx="2" ry="2" />
<text  x="106.08" y="655.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="879.5" y="533" width="0.2" height="15.0" fill="rgb(207,210,39)" rx="2" ry="2" />
<text  x="882.45" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (4 samples, 0.07%)</title><rect x="941.0" y="693" width="0.9" height="15.0" fill="rgb(218,125,14)" rx="2" ry="2" />
<text  x="943.99" y="703.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="847.5" y="645" width="0.2" height="15.0" fill="rgb(240,187,9)" rx="2" ry="2" />
<text  x="850.47" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="135.7" y="757" width="0.2" height="15.0" fill="rgb(254,90,38)" rx="2" ry="2" />
<text  x="138.72" y="767.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%)</title><rect x="526.1" y="613" width="0.5" height="15.0" fill="rgb(219,57,12)" rx="2" ry="2" />
<text  x="529.11" y="623.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="467.0" y="645" width="0.2" height="15.0" fill="rgb(208,201,16)" rx="2" ry="2" />
<text  x="470.00" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="361.1" y="485" width="0.5" height="15.0" fill="rgb(214,172,26)" rx="2" ry="2" />
<text  x="364.13" y="495.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="55.7" y="741" width="0.2" height="15.0" fill="rgb(223,93,18)" rx="2" ry="2" />
<text  x="58.66" y="751.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="43.5" y="453" width="0.2" height="15.0" fill="rgb(209,103,48)" rx="2" ry="2" />
<text  x="46.53" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="49.7" y="437" width="0.2" height="15.0" fill="rgb(208,187,31)" rx="2" ry="2" />
<text  x="52.70" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (1 samples, 0.02%)</title><rect x="1042.0" y="661" width="0.2" height="15.0" fill="rgb(252,206,49)" rx="2" ry="2" />
<text  x="1045.00" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="101.5" y="181" width="0.3" height="15.0" fill="rgb(220,66,30)" rx="2" ry="2" />
<text  x="104.53" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="874.8" y="613" width="0.2" height="15.0" fill="rgb(240,173,48)" rx="2" ry="2" />
<text  x="877.82" y="623.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="76.6" y="629" width="0.2" height="15.0" fill="rgb(247,8,49)" rx="2" ry="2" />
<text  x="79.61" y="639.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (2 samples, 0.04%)</title><rect x="629.1" y="693" width="0.5" height="15.0" fill="rgb(225,18,49)" rx="2" ry="2" />
<text  x="632.11" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (31 samples, 0.58%)</title><rect x="807.8" y="501" width="6.8" height="15.0" fill="rgb(254,170,45)" rx="2" ry="2" />
<text  x="810.77" y="511.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="53.5" y="645" width="0.2" height="15.0" fill="rgb(231,20,6)" rx="2" ry="2" />
<text  x="56.45" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="45.5" y="485" width="0.2" height="15.0" fill="rgb(211,44,49)" rx="2" ry="2" />
<text  x="48.51" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%)</title><rect x="17.3" y="581" width="0.2" height="15.0" fill="rgb(211,228,21)" rx="2" ry="2" />
<text  x="20.28" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="47.1" y="533" width="0.6" height="15.0" fill="rgb(251,19,9)" rx="2" ry="2" />
<text  x="50.05" y="543.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (6 samples, 0.11%)</title><rect x="336.2" y="613" width="1.3" height="15.0" fill="rgb(214,115,16)" rx="2" ry="2" />
<text  x="339.21" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="37.8" y="485" width="0.4" height="15.0" fill="rgb(229,56,2)" rx="2" ry="2" />
<text  x="40.79" y="495.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.13%)</title><rect x="395.1" y="469" width="1.5" height="15.0" fill="rgb(234,104,43)" rx="2" ry="2" />
<text  x="398.10" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="943.6" y="661" width="0.3" height="15.0" fill="rgb(209,216,20)" rx="2" ry="2" />
<text  x="946.63" y="671.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.02%)</title><rect x="79.3" y="933" width="0.2" height="15.0" fill="rgb(232,91,51)" rx="2" ry="2" />
<text  x="82.26" y="943.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="729.5" y="789" width="0.2" height="15.0" fill="rgb(229,74,22)" rx="2" ry="2" />
<text  x="732.47" y="799.5" ></text>
</g>
<g >
<title>backlog_controller::adjust (1 samples, 0.02%)</title><rect x="1168.4" y="741" width="0.2" height="15.0" fill="rgb(238,156,23)" rx="2" ry="2" />
<text  x="1171.39" y="751.5" ></text>
</g>
<g >
<title>memtable_list::flush (1 samples, 0.02%)</title><rect x="104.2" y="805" width="0.2" height="15.0" fill="rgb(231,19,47)" rx="2" ry="2" />
<text  x="107.18" y="815.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="194.2" y="549" width="0.2" height="15.0" fill="rgb(207,154,23)" rx="2" ry="2" />
<text  x="197.17" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="92.3" y="725" width="0.2" height="15.0" fill="rgb(244,29,42)" rx="2" ry="2" />
<text  x="95.27" y="735.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="582.4" y="661" width="0.4" height="15.0" fill="rgb(247,190,45)" rx="2" ry="2" />
<text  x="585.36" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.09%)</title><rect x="686.9" y="757" width="1.1" height="15.0" fill="rgb(213,120,50)" rx="2" ry="2" />
<text  x="689.90" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="22.1" y="485" width="0.3" height="15.0" fill="rgb(244,82,2)" rx="2" ry="2" />
<text  x="25.13" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="15.5" y="677" width="0.2" height="15.0" fill="rgb(217,202,25)" rx="2" ry="2" />
<text  x="18.51" y="687.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="31.2" y="549" width="0.2" height="15.0" fill="rgb(238,96,4)" rx="2" ry="2" />
<text  x="34.17" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="278.2" y="485" width="0.2" height="15.0" fill="rgb(251,41,7)" rx="2" ry="2" />
<text  x="281.20" y="495.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1081.0" y="597" width="0.3" height="15.0" fill="rgb(239,178,48)" rx="2" ry="2" />
<text  x="1084.04" y="607.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="930.0" y="677" width="0.2" height="15.0" fill="rgb(237,139,39)" rx="2" ry="2" />
<text  x="932.96" y="687.5" ></text>
</g>
<g >
<title>sstables::mc::writer::drain_tombstones (1 samples, 0.02%)</title><rect x="76.8" y="741" width="0.3" height="15.0" fill="rgb(207,111,36)" rx="2" ry="2" />
<text  x="79.83" y="751.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="847.2" y="677" width="0.5" height="15.0" fill="rgb(241,128,24)" rx="2" ry="2" />
<text  x="850.25" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="43.5" y="549" width="0.7" height="15.0" fill="rgb(245,216,32)" rx="2" ry="2" />
<text  x="46.53" y="559.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (160 samples, 2.99%)</title><rect x="19.7" y="741" width="35.3" height="15.0" fill="rgb(208,109,38)" rx="2" ry="2" />
<text  x="22.70" y="751.5" >cq..</text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="857.6" y="661" width="1.6" height="15.0" fill="rgb(238,132,33)" rx="2" ry="2" />
<text  x="860.61" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="77.1" y="677" width="0.6" height="15.0" fill="rgb(242,218,34)" rx="2" ry="2" />
<text  x="80.05" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="783.9" y="677" width="1.8" height="15.0" fill="rgb(205,118,46)" rx="2" ry="2" />
<text  x="786.95" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="57.6" y="661" width="0.3" height="15.0" fill="rgb(240,6,16)" rx="2" ry="2" />
<text  x="60.64" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1129.8" y="613" width="0.2" height="15.0" fill="rgb(212,150,30)" rx="2" ry="2" />
<text  x="1132.79" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="828.1" y="661" width="0.4" height="15.0" fill="rgb(236,10,31)" rx="2" ry="2" />
<text  x="831.06" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1032.5" y="565" width="0.2" height="15.0" fill="rgb(250,162,39)" rx="2" ry="2" />
<text  x="1035.52" y="575.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%)</title><rect x="560.1" y="629" width="0.4" height="15.0" fill="rgb(224,166,22)" rx="2" ry="2" />
<text  x="563.08" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="1050.2" y="597" width="1.7" height="15.0" fill="rgb(205,6,9)" rx="2" ry="2" />
<text  x="1053.16" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (15 samples, 0.28%)</title><rect x="823.2" y="661" width="3.3" height="15.0" fill="rgb(249,36,12)" rx="2" ry="2" />
<text  x="826.21" y="671.5" ></text>
</g>
<g >
<title>service::write_response_handler::waited_for (1 samples, 0.02%)</title><rect x="730.6" y="757" width="0.2" height="15.0" fill="rgb(246,41,51)" rx="2" ry="2" />
<text  x="733.57" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (2 samples, 0.04%)</title><rect x="584.3" y="597" width="0.5" height="15.0" fill="rgb(214,223,41)" rx="2" ry="2" />
<text  x="587.34" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="74.6" y="629" width="0.2" height="15.0" fill="rgb(225,189,16)" rx="2" ry="2" />
<text  x="77.62" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="60.3" y="597" width="0.2" height="15.0" fill="rgb(247,226,25)" rx="2" ry="2" />
<text  x="63.29" y="607.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (33 samples, 0.62%)</title><rect x="418.7" y="469" width="7.3" height="15.0" fill="rgb(246,22,44)" rx="2" ry="2" />
<text  x="421.70" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (8 samples, 0.15%)</title><rect x="188.7" y="581" width="1.7" height="15.0" fill="rgb(213,14,27)" rx="2" ry="2" />
<text  x="191.65" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (4 samples, 0.07%)</title><rect x="689.3" y="773" width="0.9" height="15.0" fill="rgb(233,154,54)" rx="2" ry="2" />
<text  x="692.33" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (7 samples, 0.13%)</title><rect x="620.7" y="725" width="1.6" height="15.0" fill="rgb(239,108,12)" rx="2" ry="2" />
<text  x="623.73" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::base (1 samples, 0.02%)</title><rect x="41.8" y="597" width="0.2" height="15.0" fill="rgb(230,169,22)" rx="2" ry="2" />
<text  x="44.76" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="47.7" y="597" width="0.2" height="15.0" fill="rgb(205,51,39)" rx="2" ry="2" />
<text  x="50.72" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="732.6" y="805" width="0.2" height="15.0" fill="rgb(227,41,29)" rx="2" ry="2" />
<text  x="735.56" y="815.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%)</title><rect x="317.7" y="613" width="1.5" height="15.0" fill="rgb(228,5,16)" rx="2" ry="2" />
<text  x="320.68" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="63.2" y="661" width="0.2" height="15.0" fill="rgb(250,163,38)" rx="2" ry="2" />
<text  x="66.16" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%)</title><rect x="20.4" y="629" width="0.4" height="15.0" fill="rgb(236,8,52)" rx="2" ry="2" />
<text  x="23.37" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.11%)</title><rect x="37.8" y="613" width="1.3" height="15.0" fill="rgb(211,175,8)" rx="2" ry="2" />
<text  x="40.79" y="623.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="376.4" y="485" width="0.4" height="15.0" fill="rgb(210,144,33)" rx="2" ry="2" />
<text  x="379.35" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="741.6" y="693" width="0.2" height="15.0" fill="rgb(208,217,20)" rx="2" ry="2" />
<text  x="744.60" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="800.3" y="533" width="0.4" height="15.0" fill="rgb(206,35,35)" rx="2" ry="2" />
<text  x="803.27" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="707.4" y="693" width="0.2" height="15.0" fill="rgb(212,39,45)" rx="2" ry="2" />
<text  x="710.41" y="703.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="620.3" y="725" width="0.2" height="15.0" fill="rgb(238,137,42)" rx="2" ry="2" />
<text  x="623.29" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.13%)</title><rect x="400.4" y="453" width="1.5" height="15.0" fill="rgb(245,178,33)" rx="2" ry="2" />
<text  x="403.39" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="96.0" y="757" width="0.7" height="15.0" fill="rgb(208,57,18)" rx="2" ry="2" />
<text  x="99.02" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (7 samples, 0.13%)</title><rect x="95.1" y="773" width="1.6" height="15.0" fill="rgb(227,5,23)" rx="2" ry="2" />
<text  x="98.14" y="783.5" ></text>
</g>
<g >
<title>database::query (130 samples, 2.43%)</title><rect x="1001.2" y="565" width="28.7" height="15.0" fill="rgb(243,84,21)" rx="2" ry="2" />
<text  x="1004.20" y="575.5" >da..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (40 samples, 0.75%)</title><rect x="871.5" y="757" width="8.8" height="15.0" fill="rgb(242,138,19)" rx="2" ry="2" />
<text  x="874.51" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.07%)</title><rect x="279.7" y="501" width="0.9" height="15.0" fill="rgb(222,172,8)" rx="2" ry="2" />
<text  x="282.75" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="948.0" y="693" width="0.5" height="15.0" fill="rgb(226,2,34)" rx="2" ry="2" />
<text  x="951.04" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.13%)</title><rect x="193.3" y="565" width="1.5" height="15.0" fill="rgb(221,68,17)" rx="2" ry="2" />
<text  x="196.29" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (31 samples, 0.58%)</title><rect x="25.2" y="581" width="6.9" height="15.0" fill="rgb(245,11,14)" rx="2" ry="2" />
<text  x="28.22" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="1153.2" y="757" width="1.3" height="15.0" fill="rgb(241,96,28)" rx="2" ry="2" />
<text  x="1156.17" y="767.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="814.6" y="501" width="0.4" height="15.0" fill="rgb(226,222,44)" rx="2" ry="2" />
<text  x="817.61" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (27 samples, 0.50%)</title><rect x="1066.9" y="565" width="6.0" height="15.0" fill="rgb(240,67,12)" rx="2" ry="2" />
<text  x="1069.93" y="575.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="74.4" y="917" width="0.2" height="15.0" fill="rgb(235,85,37)" rx="2" ry="2" />
<text  x="77.40" y="927.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="817.9" y="549" width="0.5" height="15.0" fill="rgb(220,84,10)" rx="2" ry="2" />
<text  x="820.91" y="559.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (14 samples, 0.26%)</title><rect x="760.3" y="629" width="3.1" height="15.0" fill="rgb(220,20,48)" rx="2" ry="2" />
<text  x="763.35" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="35.6" y="549" width="0.2" height="15.0" fill="rgb(233,181,16)" rx="2" ry="2" />
<text  x="38.59" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%)</title><rect x="292.8" y="485" width="0.2" height="15.0" fill="rgb(215,52,20)" rx="2" ry="2" />
<text  x="295.76" y="495.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%)</title><rect x="69.6" y="741" width="0.2" height="15.0" fill="rgb(211,37,7)" rx="2" ry="2" />
<text  x="72.55" y="751.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%)</title><rect x="39.6" y="629" width="0.4" height="15.0" fill="rgb(221,84,15)" rx="2" ry="2" />
<text  x="42.56" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (2 samples, 0.04%)</title><rect x="552.4" y="581" width="0.4" height="15.0" fill="rgb(207,49,31)" rx="2" ry="2" />
<text  x="555.36" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="804.7" y="437" width="0.4" height="15.0" fill="rgb(253,165,43)" rx="2" ry="2" />
<text  x="807.68" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (2 samples, 0.04%)</title><rect x="908.8" y="661" width="0.4" height="15.0" fill="rgb(220,56,53)" rx="2" ry="2" />
<text  x="911.79" y="671.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (6 samples, 0.11%)</title><rect x="331.6" y="677" width="1.3" height="15.0" fill="rgb(235,182,24)" rx="2" ry="2" />
<text  x="334.58" y="687.5" ></text>
</g>
<g >
<title>siglongjmp@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="659.1" y="789" width="0.2" height="15.0" fill="rgb(209,179,0)" rx="2" ry="2" />
<text  x="662.11" y="799.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (6 samples, 0.11%)</title><rect x="928.6" y="661" width="1.4" height="15.0" fill="rgb(253,66,4)" rx="2" ry="2" />
<text  x="931.64" y="671.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="875.7" y="597" width="0.2" height="15.0" fill="rgb(225,92,21)" rx="2" ry="2" />
<text  x="878.70" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.17%)</title><rect x="1131.3" y="437" width="2.0" height="15.0" fill="rgb(232,37,5)" rx="2" ry="2" />
<text  x="1134.33" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::expr::expression const*, cql3::expr::expression*&gt; (1 samples, 0.02%)</title><rect x="60.9" y="549" width="0.3" height="15.0" fill="rgb(252,219,10)" rx="2" ry="2" />
<text  x="63.95" y="559.5" ></text>
</g>
<g >
<title>__errno_location (1 samples, 0.02%)</title><rect x="1189.8" y="853" width="0.2" height="15.0" fill="rgb(212,189,15)" rx="2" ry="2" />
<text  x="1192.78" y="863.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="36.0" y="485" width="0.2" height="15.0" fill="rgb(243,112,27)" rx="2" ry="2" />
<text  x="39.03" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.5" y="773" width="0.2" height="15.0" fill="rgb(211,25,9)" rx="2" ry="2" />
<text  x="20.50" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="937.7" y="709" width="0.2" height="15.0" fill="rgb(243,140,33)" rx="2" ry="2" />
<text  x="940.68" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="835.6" y="645" width="1.5" height="15.0" fill="rgb(216,63,45)" rx="2" ry="2" />
<text  x="838.56" y="655.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_partition (1 samples, 0.02%)</title><rect x="103.1" y="629" width="0.2" height="15.0" fill="rgb(223,115,32)" rx="2" ry="2" />
<text  x="106.08" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="99.3" y="789" width="0.2" height="15.0" fill="rgb(245,48,22)" rx="2" ry="2" />
<text  x="102.33" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="31.4" y="565" width="0.2" height="15.0" fill="rgb(234,78,0)" rx="2" ry="2" />
<text  x="34.39" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (6 samples, 0.11%)</title><rect x="989.1" y="581" width="1.3" height="15.0" fill="rgb(241,157,51)" rx="2" ry="2" />
<text  x="992.07" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="943.6" y="677" width="0.3" height="15.0" fill="rgb(207,45,26)" rx="2" ry="2" />
<text  x="946.63" y="687.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::concrete_execution_stage (1 samples, 0.02%)</title><rect x="74.6" y="565" width="0.2" height="15.0" fill="rgb(240,123,52)" rx="2" ry="2" />
<text  x="77.62" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::expiring_fifo&lt;seastar::promise&lt;void&gt;, seastar::promise_expiry&lt;&gt;, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;seastar::promise&lt;void&gt;, seastar::promise_expiry&lt;&gt;, seastar::lowres_clock&gt;::entry&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="102.4" y="549" width="0.2" height="15.0" fill="rgb(207,142,26)" rx="2" ry="2" />
<text  x="105.41" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.11%)</title><rect x="674.8" y="725" width="1.3" height="15.0" fill="rgb(216,95,47)" rx="2" ry="2" />
<text  x="677.77" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.13%)</title><rect x="997.5" y="549" width="1.5" height="15.0" fill="rgb(239,69,40)" rx="2" ry="2" />
<text  x="1000.45" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%)</title><rect x="557.7" y="597" width="0.6" height="15.0" fill="rgb(217,58,37)" rx="2" ry="2" />
<text  x="560.65" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="26.5" y="533" width="0.3" height="15.0" fill="rgb(228,4,15)" rx="2" ry="2" />
<text  x="29.54" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="61.2" y="581" width="0.2" height="15.0" fill="rgb(217,78,37)" rx="2" ry="2" />
<text  x="64.17" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="457.7" y="677" width="0.3" height="15.0" fill="rgb(219,225,29)" rx="2" ry="2" />
<text  x="460.74" y="687.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%)</title><rect x="20.8" y="629" width="0.2" height="15.0" fill="rgb(239,109,20)" rx="2" ry="2" />
<text  x="23.81" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="607.5" y="661" width="0.2" height="15.0" fill="rgb(236,218,26)" rx="2" ry="2" />
<text  x="610.50" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="731.5" y="805" width="0.2" height="15.0" fill="rgb(248,196,25)" rx="2" ry="2" />
<text  x="734.45" y="815.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.80%)</title><rect x="1126.7" y="677" width="9.5" height="15.0" fill="rgb(223,97,25)" rx="2" ry="2" />
<text  x="1129.70" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.07%)</title><rect x="1037.6" y="517" width="0.9" height="15.0" fill="rgb(231,109,1)" rx="2" ry="2" />
<text  x="1040.59" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="908.6" y="661" width="0.2" height="15.0" fill="rgb(222,200,39)" rx="2" ry="2" />
<text  x="911.56" y="671.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (7 samples, 0.13%)</title><rect x="790.3" y="629" width="1.6" height="15.0" fill="rgb(214,72,18)" rx="2" ry="2" />
<text  x="793.34" y="639.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="16.6" y="789" width="0.2" height="15.0" fill="rgb(206,18,13)" rx="2" ry="2" />
<text  x="19.62" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="874.8" y="597" width="0.2" height="15.0" fill="rgb(222,229,13)" rx="2" ry="2" />
<text  x="877.82" y="607.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="290.3" y="485" width="0.7" height="15.0" fill="rgb(246,122,16)" rx="2" ry="2" />
<text  x="293.33" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.07%)</title><rect x="764.1" y="709" width="0.9" height="15.0" fill="rgb(223,186,33)" rx="2" ry="2" />
<text  x="767.10" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (2 samples, 0.04%)</title><rect x="712.3" y="757" width="0.4" height="15.0" fill="rgb(218,60,8)" rx="2" ry="2" />
<text  x="715.27" y="767.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="448.3" y="581" width="0.2" height="15.0" fill="rgb(225,107,43)" rx="2" ry="2" />
<text  x="451.25" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (53 samples, 0.99%)</title><rect x="670.1" y="789" width="11.7" height="15.0" fill="rgb(232,41,21)" rx="2" ry="2" />
<text  x="673.14" y="799.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="67.6" y="661" width="0.2" height="15.0" fill="rgb(220,125,23)" rx="2" ry="2" />
<text  x="70.57" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (3 samples, 0.06%)</title><rect x="878.8" y="581" width="0.7" height="15.0" fill="rgb(236,160,46)" rx="2" ry="2" />
<text  x="881.79" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="574.9" y="613" width="0.4" height="15.0" fill="rgb(230,86,39)" rx="2" ry="2" />
<text  x="577.86" y="623.5" ></text>
</g>
<g >
<title>db::system_keyspace::set_local_host_id (1 samples, 0.02%)</title><rect x="102.4" y="805" width="0.2" height="15.0" fill="rgb(241,184,18)" rx="2" ry="2" />
<text  x="105.41" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (23 samples, 0.43%)</title><rect x="260.3" y="437" width="5.1" height="15.0" fill="rgb(238,137,14)" rx="2" ry="2" />
<text  x="263.34" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="870.0" y="741" width="0.6" height="15.0" fill="rgb(213,48,34)" rx="2" ry="2" />
<text  x="872.97" y="751.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1039.8" y="597" width="0.2" height="15.0" fill="rgb(241,41,46)" rx="2" ry="2" />
<text  x="1042.80" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="72.4" y="693" width="0.2" height="15.0" fill="rgb(215,66,10)" rx="2" ry="2" />
<text  x="75.42" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="48.8" y="501" width="0.2" height="15.0" fill="rgb(223,100,27)" rx="2" ry="2" />
<text  x="51.82" y="511.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="522.1" y="501" width="0.7" height="15.0" fill="rgb(209,43,35)" rx="2" ry="2" />
<text  x="525.14" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.11%)</title><rect x="526.6" y="613" width="1.3" height="15.0" fill="rgb(248,10,36)" rx="2" ry="2" />
<text  x="529.55" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="46.2" y="437" width="0.6" height="15.0" fill="rgb(210,95,29)" rx="2" ry="2" />
<text  x="49.17" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="801.8" y="533" width="0.2" height="15.0" fill="rgb(246,118,37)" rx="2" ry="2" />
<text  x="804.81" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="103.3" y="581" width="0.2" height="15.0" fill="rgb(248,123,43)" rx="2" ry="2" />
<text  x="106.30" y="591.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (4 samples, 0.07%)</title><rect x="974.1" y="661" width="0.9" height="15.0" fill="rgb(250,155,44)" rx="2" ry="2" />
<text  x="977.07" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="682.5" y="789" width="0.7" height="15.0" fill="rgb(209,54,25)" rx="2" ry="2" />
<text  x="685.49" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (3 samples, 0.06%)</title><rect x="683.2" y="789" width="0.6" height="15.0" fill="rgb(240,185,15)" rx="2" ry="2" />
<text  x="686.15" y="799.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="516.2" y="517" width="1.5" height="15.0" fill="rgb(242,0,7)" rx="2" ry="2" />
<text  x="519.19" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="266.5" y="469" width="0.2" height="15.0" fill="rgb(227,193,44)" rx="2" ry="2" />
<text  x="269.51" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="865.3" y="709" width="0.7" height="15.0" fill="rgb(216,65,31)" rx="2" ry="2" />
<text  x="868.33" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="70.0" y="693" width="0.2" height="15.0" fill="rgb(248,139,46)" rx="2" ry="2" />
<text  x="72.99" y="703.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="874.2" y="645" width="0.2" height="15.0" fill="rgb(216,126,40)" rx="2" ry="2" />
<text  x="877.16" y="655.5" ></text>
</g>
<g >
<title>auth::resource::parent (10 samples, 0.19%)</title><rect x="792.1" y="629" width="2.2" height="15.0" fill="rgb(226,184,25)" rx="2" ry="2" />
<text  x="795.11" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="659.8" y="789" width="0.2" height="15.0" fill="rgb(229,5,29)" rx="2" ry="2" />
<text  x="662.77" y="799.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="12.4" y="885" width="0.2" height="15.0" fill="rgb(215,65,23)" rx="2" ry="2" />
<text  x="15.43" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (5 samples, 0.09%)</title><rect x="615.7" y="677" width="1.1" height="15.0" fill="rgb(251,55,26)" rx="2" ry="2" />
<text  x="618.66" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="300.3" y="581" width="0.2" height="15.0" fill="rgb(216,96,11)" rx="2" ry="2" />
<text  x="303.26" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="688.0" y="789" width="0.2" height="15.0" fill="rgb(238,125,34)" rx="2" ry="2" />
<text  x="691.00" y="799.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (31 samples, 0.58%)</title><rect x="807.8" y="485" width="6.8" height="15.0" fill="rgb(254,229,52)" rx="2" ry="2" />
<text  x="810.77" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="23.2" y="549" width="0.7" height="15.0" fill="rgb(243,107,21)" rx="2" ry="2" />
<text  x="26.23" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1085.9" y="677" width="0.4" height="15.0" fill="rgb(213,195,33)" rx="2" ry="2" />
<text  x="1088.90" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (7 samples, 0.13%)</title><rect x="1167.3" y="821" width="1.5" height="15.0" fill="rgb(211,38,48)" rx="2" ry="2" />
<text  x="1170.28" y="831.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="38.5" y="565" width="0.6" height="15.0" fill="rgb(252,216,15)" rx="2" ry="2" />
<text  x="41.45" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="49.3" y="565" width="0.2" height="15.0" fill="rgb(211,217,26)" rx="2" ry="2" />
<text  x="52.26" y="575.5" ></text>
</g>
<g >
<title>memtable::apply (27 samples, 0.50%)</title><rect x="1118.8" y="565" width="5.9" height="15.0" fill="rgb(237,144,54)" rx="2" ry="2" />
<text  x="1121.76" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (3 samples, 0.06%)</title><rect x="873.5" y="677" width="0.7" height="15.0" fill="rgb(251,106,27)" rx="2" ry="2" />
<text  x="876.50" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%)</title><rect x="602.9" y="581" width="0.4" height="15.0" fill="rgb(230,133,43)" rx="2" ry="2" />
<text  x="605.87" y="591.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (3 samples, 0.06%)</title><rect x="1119.9" y="549" width="0.6" height="15.0" fill="rgb(217,93,9)" rx="2" ry="2" />
<text  x="1122.86" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="48.8" y="613" width="0.5" height="15.0" fill="rgb(239,80,27)" rx="2" ry="2" />
<text  x="51.82" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (39 samples, 0.73%)</title><rect x="437.9" y="565" width="8.6" height="15.0" fill="rgb(209,209,22)" rx="2" ry="2" />
<text  x="440.89" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="832.7" y="581" width="0.2" height="15.0" fill="rgb(211,199,43)" rx="2" ry="2" />
<text  x="835.69" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (2 samples, 0.04%)</title><rect x="1135.5" y="517" width="0.5" height="15.0" fill="rgb(212,23,18)" rx="2" ry="2" />
<text  x="1138.52" y="527.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%)</title><rect x="1130.2" y="469" width="0.2" height="15.0" fill="rgb(222,47,21)" rx="2" ry="2" />
<text  x="1133.23" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (536 samples, 10.02%)</title><rect x="334.9" y="645" width="118.2" height="15.0" fill="rgb(225,17,32)" rx="2" ry="2" />
<text  x="337.89" y="655.5" >seastar::futur..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%)</title><rect x="868.0" y="789" width="0.4" height="15.0" fill="rgb(250,197,28)" rx="2" ry="2" />
<text  x="870.98" y="799.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="832.9" y="597" width="0.7" height="15.0" fill="rgb(205,195,35)" rx="2" ry="2" />
<text  x="835.91" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.32%)</title><rect x="930.4" y="677" width="3.7" height="15.0" fill="rgb(248,167,29)" rx="2" ry="2" />
<text  x="933.40" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="48.4" y="629" width="0.2" height="15.0" fill="rgb(229,221,46)" rx="2" ry="2" />
<text  x="51.38" y="639.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="49.3" y="549" width="0.2" height="15.0" fill="rgb(218,209,28)" rx="2" ry="2" />
<text  x="52.26" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (9 samples, 0.17%)</title><rect x="857.4" y="677" width="2.0" height="15.0" fill="rgb(207,106,27)" rx="2" ry="2" />
<text  x="860.39" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="35.4" y="533" width="0.2" height="15.0" fill="rgb(209,192,27)" rx="2" ry="2" />
<text  x="38.36" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.7" y="629" width="0.2" height="15.0" fill="rgb(251,49,44)" rx="2" ry="2" />
<text  x="670.71" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (4 samples, 0.07%)</title><rect x="545.7" y="517" width="0.9" height="15.0" fill="rgb(242,221,11)" rx="2" ry="2" />
<text  x="548.74" y="527.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="1056.8" y="629" width="1.1" height="15.0" fill="rgb(240,179,33)" rx="2" ry="2" />
<text  x="1059.78" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="43.1" y="485" width="0.2" height="15.0" fill="rgb(207,57,18)" rx="2" ry="2" />
<text  x="46.08" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (22 samples, 0.41%)</title><rect x="274.0" y="533" width="4.9" height="15.0" fill="rgb(218,128,40)" rx="2" ry="2" />
<text  x="277.01" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="269.6" y="437" width="0.2" height="15.0" fill="rgb(223,206,32)" rx="2" ry="2" />
<text  x="272.60" y="447.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (5 samples, 0.09%)</title><rect x="1156.9" y="773" width="1.1" height="15.0" fill="rgb(227,57,31)" rx="2" ry="2" />
<text  x="1159.92" y="783.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_receivers (1 samples, 0.02%)</title><rect x="60.1" y="661" width="0.2" height="15.0" fill="rgb(208,224,13)" rx="2" ry="2" />
<text  x="63.07" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.41%)</title><rect x="1007.6" y="533" width="4.8" height="15.0" fill="rgb(230,148,51)" rx="2" ry="2" />
<text  x="1010.60" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%)</title><rect x="283.5" y="549" width="0.2" height="15.0" fill="rgb(250,17,50)" rx="2" ry="2" />
<text  x="286.50" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="555.7" y="597" width="0.2" height="15.0" fill="rgb(209,109,17)" rx="2" ry="2" />
<text  x="558.67" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.07%)</title><rect x="896.4" y="709" width="0.9" height="15.0" fill="rgb(228,19,26)" rx="2" ry="2" />
<text  x="899.43" y="719.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.06%)</title><rect x="631.3" y="677" width="0.7" height="15.0" fill="rgb(235,200,53)" rx="2" ry="2" />
<text  x="634.32" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="174.8" y="677" width="0.2" height="15.0" fill="rgb(237,53,33)" rx="2" ry="2" />
<text  x="177.76" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;(anonymous namespace)::remote_fill_buffer_result&gt; &gt;::invoke&lt;(anonymous namespace)::shard_reader::do_fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="501" width="0.2" height="15.0" fill="rgb(248,177,43)" rx="2" ry="2" />
<text  x="104.97" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1101.1" y="693" width="0.5" height="15.0" fill="rgb(216,1,21)" rx="2" ry="2" />
<text  x="1104.11" y="703.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (1 samples, 0.02%)</title><rect x="821.0" y="613" width="0.2" height="15.0" fill="rgb(205,137,21)" rx="2" ry="2" />
<text  x="824.00" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="547.1" y="501" width="0.4" height="15.0" fill="rgb(225,191,18)" rx="2" ry="2" />
<text  x="550.07" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="69.6" y="725" width="0.2" height="15.0" fill="rgb(250,203,43)" rx="2" ry="2" />
<text  x="72.55" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="816.8" y="533" width="0.5" height="15.0" fill="rgb(214,136,15)" rx="2" ry="2" />
<text  x="819.81" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="841.5" y="693" width="0.2" height="15.0" fill="rgb(234,215,25)" rx="2" ry="2" />
<text  x="844.51" y="703.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="462.8" y="677" width="0.2" height="15.0" fill="rgb(251,46,49)" rx="2" ry="2" />
<text  x="465.81" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="667.9" y="709" width="0.3" height="15.0" fill="rgb(217,177,54)" rx="2" ry="2" />
<text  x="670.93" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="450.2" y="597" width="0.3" height="15.0" fill="rgb(251,106,7)" rx="2" ry="2" />
<text  x="453.24" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="44.0" y="437" width="0.2" height="15.0" fill="rgb(230,48,46)" rx="2" ry="2" />
<text  x="46.97" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="828.5" y="661" width="0.4" height="15.0" fill="rgb(206,183,44)" rx="2" ry="2" />
<text  x="831.50" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="708.3" y="805" width="0.2" height="15.0" fill="rgb(211,27,14)" rx="2" ry="2" />
<text  x="711.30" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.5" y="565" width="0.2" height="15.0" fill="rgb(246,22,39)" rx="2" ry="2" />
<text  x="52.48" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="752.0" y="677" width="0.6" height="15.0" fill="rgb(217,227,2)" rx="2" ry="2" />
<text  x="754.97" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="24.1" y="517" width="0.2" height="15.0" fill="rgb(249,19,32)" rx="2" ry="2" />
<text  x="27.12" y="527.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="10.0" y="901" width="0.2" height="15.0" fill="rgb(225,115,18)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (27 samples, 0.50%)</title><rect x="1130.0" y="549" width="6.0" height="15.0" fill="rgb(241,217,29)" rx="2" ry="2" />
<text  x="1133.01" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="17.3" y="517" width="0.2" height="15.0" fill="rgb(205,125,4)" rx="2" ry="2" />
<text  x="20.28" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (33 samples, 0.62%)</title><rect x="25.0" y="613" width="7.3" height="15.0" fill="rgb(224,132,22)" rx="2" ry="2" />
<text  x="28.00" y="623.5" ></text>
</g>
<g >
<title>mutation_querier::consume (200 samples, 3.74%)</title><rect x="365.3" y="501" width="44.1" height="15.0" fill="rgb(246,120,12)" rx="2" ry="2" />
<text  x="368.32" y="511.5" >muta..</text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (6 samples, 0.11%)</title><rect x="279.3" y="517" width="1.3" height="15.0" fill="rgb(223,81,16)" rx="2" ry="2" />
<text  x="282.30" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="121.2" y="757" width="0.2" height="15.0" fill="rgb(233,175,30)" rx="2" ry="2" />
<text  x="124.16" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (16 samples, 0.30%)</title><rect x="943.9" y="693" width="3.5" height="15.0" fill="rgb(224,137,40)" rx="2" ry="2" />
<text  x="946.85" y="703.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1 samples, 0.02%)</title><rect x="70.2" y="741" width="0.2" height="15.0" fill="rgb(222,228,6)" rx="2" ry="2" />
<text  x="73.21" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1169.0" y="821" width="0.3" height="15.0" fill="rgb(210,21,19)" rx="2" ry="2" />
<text  x="1172.05" y="831.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%)</title><rect x="826.5" y="661" width="0.2" height="15.0" fill="rgb(228,124,44)" rx="2" ry="2" />
<text  x="829.52" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="556.1" y="629" width="0.2" height="15.0" fill="rgb(220,174,26)" rx="2" ry="2" />
<text  x="559.11" y="639.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="50.6" y="549" width="0.2" height="15.0" fill="rgb(235,72,48)" rx="2" ry="2" />
<text  x="53.58" y="559.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.09%)</title><rect x="10.0" y="917" width="1.1" height="15.0" fill="rgb(245,158,4)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="516.4" y="501" width="1.3" height="15.0" fill="rgb(230,84,43)" rx="2" ry="2" />
<text  x="519.41" y="511.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="62.7" y="597" width="0.2" height="15.0" fill="rgb(211,88,25)" rx="2" ry="2" />
<text  x="65.71" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="839.1" y="725" width="0.2" height="15.0" fill="rgb(223,45,44)" rx="2" ry="2" />
<text  x="842.09" y="735.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::~keyspace_element_name (1 samples, 0.02%)</title><rect x="35.8" y="645" width="0.2" height="15.0" fill="rgb(216,143,38)" rx="2" ry="2" />
<text  x="38.81" y="655.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="76.2" y="581" width="0.2" height="15.0" fill="rgb(247,173,44)" rx="2" ry="2" />
<text  x="79.17" y="591.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="375.0" y="485" width="0.7" height="15.0" fill="rgb(240,158,6)" rx="2" ry="2" />
<text  x="378.03" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.24%)</title><rect x="774.7" y="645" width="2.9" height="15.0" fill="rgb(240,153,34)" rx="2" ry="2" />
<text  x="777.68" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="47.1" y="517" width="0.6" height="15.0" fill="rgb(212,138,6)" rx="2" ry="2" />
<text  x="50.05" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.09%)</title><rect x="211.2" y="501" width="1.1" height="15.0" fill="rgb(253,108,49)" rx="2" ry="2" />
<text  x="214.15" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="769.2" y="709" width="0.6" height="15.0" fill="rgb(246,171,11)" rx="2" ry="2" />
<text  x="772.17" y="719.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1119.2" y="469" width="0.2" height="15.0" fill="rgb(254,30,21)" rx="2" ry="2" />
<text  x="1122.20" y="479.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.65%)</title><rect x="807.3" y="517" width="7.7" height="15.0" fill="rgb(234,209,3)" rx="2" ry="2" />
<text  x="810.33" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="840.0" y="725" width="0.4" height="15.0" fill="rgb(206,208,37)" rx="2" ry="2" />
<text  x="842.97" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (6 samples, 0.11%)</title><rect x="295.0" y="533" width="1.3" height="15.0" fill="rgb(237,184,33)" rx="2" ry="2" />
<text  x="297.96" y="543.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="101.5" y="53" width="0.3" height="15.0" fill="rgb(226,129,28)" rx="2" ry="2" />
<text  x="104.53" y="63.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (54 samples, 1.01%)</title><rect x="36.5" y="661" width="11.9" height="15.0" fill="rgb(215,201,48)" rx="2" ry="2" />
<text  x="39.47" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%)</title><rect x="265.4" y="437" width="0.2" height="15.0" fill="rgb(242,24,6)" rx="2" ry="2" />
<text  x="268.41" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;table&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, table::config, db::commitlog&amp;, compaction_manager&amp;, cell_locker_stats&amp;, cache_tracker&amp;&gt; (1 samples, 0.02%)</title><rect x="103.5" y="773" width="0.2" height="15.0" fill="rgb(218,55,27)" rx="2" ry="2" />
<text  x="106.52" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="56.5" y="709" width="0.3" height="15.0" fill="rgb(212,51,51)" rx="2" ry="2" />
<text  x="59.54" y="719.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="473.4" y="613" width="0.2" height="15.0" fill="rgb(236,183,6)" rx="2" ry="2" />
<text  x="476.40" y="623.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (5 samples, 0.09%)</title><rect x="1118.8" y="549" width="1.1" height="15.0" fill="rgb(254,43,46)" rx="2" ry="2" />
<text  x="1121.76" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="71.8" y="629" width="0.2" height="15.0" fill="rgb(212,44,29)" rx="2" ry="2" />
<text  x="74.76" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.3" y="501" width="0.2" height="15.0" fill="rgb(240,125,21)" rx="2" ry="2" />
<text  x="1125.29" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="59.0" y="709" width="0.2" height="15.0" fill="rgb(227,196,53)" rx="2" ry="2" />
<text  x="61.96" y="719.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="69.8" y="757" width="0.2" height="15.0" fill="rgb(250,190,11)" rx="2" ry="2" />
<text  x="72.77" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (4 samples, 0.07%)</title><rect x="757.0" y="677" width="0.9" height="15.0" fill="rgb(220,98,36)" rx="2" ry="2" />
<text  x="760.04" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="38.5" y="517" width="0.6" height="15.0" fill="rgb(230,112,2)" rx="2" ry="2" />
<text  x="41.45" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="705.6" y="741" width="0.7" height="15.0" fill="rgb(206,139,37)" rx="2" ry="2" />
<text  x="708.65" y="751.5" ></text>
</g>
<g >
<title>__cxa_atexit (1 samples, 0.02%)</title><rect x="79.3" y="917" width="0.2" height="15.0" fill="rgb(218,212,44)" rx="2" ry="2" />
<text  x="82.26" y="927.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (26 samples, 0.49%)</title><rect x="1130.2" y="533" width="5.8" height="15.0" fill="rgb(219,36,19)" rx="2" ry="2" />
<text  x="1133.23" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="490.8" y="581" width="0.5" height="15.0" fill="rgb(249,214,25)" rx="2" ry="2" />
<text  x="493.82" y="591.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%)</title><rect x="103.1" y="725" width="0.4" height="15.0" fill="rgb(223,113,40)" rx="2" ry="2" />
<text  x="106.08" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (2 samples, 0.04%)</title><rect x="479.4" y="565" width="0.4" height="15.0" fill="rgb(254,20,10)" rx="2" ry="2" />
<text  x="482.35" y="575.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="139.5" y="517" width="0.2" height="15.0" fill="rgb(245,134,20)" rx="2" ry="2" />
<text  x="142.47" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="555.2" y="597" width="0.5" height="15.0" fill="rgb(235,48,19)" rx="2" ry="2" />
<text  x="558.23" y="607.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (4 samples, 0.07%)</title><rect x="747.8" y="709" width="0.9" height="15.0" fill="rgb(222,41,11)" rx="2" ry="2" />
<text  x="750.78" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1038.3" y="485" width="0.2" height="15.0" fill="rgb(229,116,28)" rx="2" ry="2" />
<text  x="1041.25" y="495.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="296.1" y="517" width="0.2" height="15.0" fill="rgb(247,108,13)" rx="2" ry="2" />
<text  x="299.07" y="527.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (1 samples, 0.02%)</title><rect x="1118.5" y="645" width="0.3" height="15.0" fill="rgb(233,173,45)" rx="2" ry="2" />
<text  x="1121.54" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="324.5" y="581" width="0.5" height="15.0" fill="rgb(250,10,18)" rx="2" ry="2" />
<text  x="327.52" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.67%)</title><rect x="1118.3" y="693" width="8.0" height="15.0" fill="rgb(212,117,40)" rx="2" ry="2" />
<text  x="1121.32" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="49.7" y="469" width="0.2" height="15.0" fill="rgb(250,55,10)" rx="2" ry="2" />
<text  x="52.70" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="337.8" y="613" width="0.2" height="15.0" fill="rgb(236,13,43)" rx="2" ry="2" />
<text  x="340.75" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="989.1" y="565" width="1.1" height="15.0" fill="rgb(209,153,49)" rx="2" ry="2" />
<text  x="992.07" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_future&lt;&gt;::shared_state::get_future (1 samples, 0.02%)</title><rect x="102.4" y="581" width="0.2" height="15.0" fill="rgb(246,134,42)" rx="2" ry="2" />
<text  x="105.41" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (7 samples, 0.13%)</title><rect x="70.7" y="661" width="1.5" height="15.0" fill="rgb(231,87,34)" rx="2" ry="2" />
<text  x="73.65" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="41.3" y="613" width="0.5" height="15.0" fill="rgb(224,25,6)" rx="2" ry="2" />
<text  x="44.32" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.0" y="565" width="0.3" height="15.0" fill="rgb(235,196,45)" rx="2" ry="2" />
<text  x="52.04" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (1 samples, 0.02%)</title><rect x="130.9" y="693" width="0.2" height="15.0" fill="rgb(205,63,6)" rx="2" ry="2" />
<text  x="133.87" y="703.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1016.6" y="501" width="0.3" height="15.0" fill="rgb(221,209,28)" rx="2" ry="2" />
<text  x="1019.64" y="511.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1007.4" y="549" width="0.2" height="15.0" fill="rgb(232,144,29)" rx="2" ry="2" />
<text  x="1010.38" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="102.4" y="661" width="0.2" height="15.0" fill="rgb(240,97,21)" rx="2" ry="2" />
<text  x="105.41" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="760.3" y="613" width="0.3" height="15.0" fill="rgb(248,71,24)" rx="2" ry="2" />
<text  x="763.35" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="74.6" y="725" width="0.2" height="15.0" fill="rgb(210,143,4)" rx="2" ry="2" />
<text  x="77.62" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="198.8" y="565" width="0.4" height="15.0" fill="rgb(229,36,25)" rx="2" ry="2" />
<text  x="201.80" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="785.7" y="693" width="0.2" height="15.0" fill="rgb(227,185,31)" rx="2" ry="2" />
<text  x="788.71" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="649.4" y="693" width="0.4" height="15.0" fill="rgb(223,44,24)" rx="2" ry="2" />
<text  x="652.41" y="703.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%)</title><rect x="409.7" y="501" width="0.2" height="15.0" fill="rgb(220,164,4)" rx="2" ry="2" />
<text  x="412.66" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_Vector_impl_data::_M_copy_data (1 samples, 0.02%)</title><rect x="52.1" y="629" width="0.2" height="15.0" fill="rgb(254,151,34)" rx="2" ry="2" />
<text  x="55.13" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%)</title><rect x="755.7" y="629" width="0.2" height="15.0" fill="rgb(221,220,1)" rx="2" ry="2" />
<text  x="758.72" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="45.5" y="501" width="0.2" height="15.0" fill="rgb(214,210,38)" rx="2" ry="2" />
<text  x="48.51" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (2 samples, 0.04%)</title><rect x="877.0" y="693" width="0.5" height="15.0" fill="rgb(207,30,41)" rx="2" ry="2" />
<text  x="880.02" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%)</title><rect x="182.7" y="613" width="0.7" height="15.0" fill="rgb(239,100,5)" rx="2" ry="2" />
<text  x="185.70" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="100.4" y="789" width="0.5" height="15.0" fill="rgb(216,28,35)" rx="2" ry="2" />
<text  x="103.43" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (42 samples, 0.79%)</title><rect x="1126.7" y="645" width="9.3" height="15.0" fill="rgb(222,187,19)" rx="2" ry="2" />
<text  x="1129.70" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (5 samples, 0.09%)</title><rect x="909.7" y="645" width="1.1" height="15.0" fill="rgb(230,83,6)" rx="2" ry="2" />
<text  x="912.67" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="841.3" y="693" width="0.2" height="15.0" fill="rgb(205,7,52)" rx="2" ry="2" />
<text  x="844.29" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (216 samples, 4.04%)</title><rect x="991.9" y="597" width="47.7" height="15.0" fill="rgb(207,34,2)" rx="2" ry="2" />
<text  x="994.94" y="607.5" >serv..</text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (614 samples, 11.48%)</title><rect x="733.4" y="805" width="135.5" height="15.0" fill="rgb(233,28,50)" rx="2" ry="2" />
<text  x="736.44" y="815.5" >seastar::internal..</text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="709.8" y="773" width="0.3" height="15.0" fill="rgb(235,123,28)" rx="2" ry="2" />
<text  x="712.84" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="39.3" y="597" width="0.3" height="15.0" fill="rgb(231,147,40)" rx="2" ry="2" />
<text  x="42.33" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.07%)</title><rect x="832.0" y="597" width="0.9" height="15.0" fill="rgb(252,1,9)" rx="2" ry="2" />
<text  x="835.03" y="607.5" ></text>
</g>
<g >
<title>freeze (19 samples, 0.36%)</title><rect x="1130.2" y="501" width="4.2" height="15.0" fill="rgb(252,227,6)" rx="2" ry="2" />
<text  x="1133.23" y="511.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="626.2" y="725" width="0.3" height="15.0" fill="rgb(217,59,36)" rx="2" ry="2" />
<text  x="629.25" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.24%)</title><rect x="944.3" y="661" width="2.9" height="15.0" fill="rgb(217,205,4)" rx="2" ry="2" />
<text  x="947.30" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1161.5" y="773" width="0.7" height="15.0" fill="rgb(233,42,14)" rx="2" ry="2" />
<text  x="1164.55" y="783.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%)</title><rect x="617.4" y="693" width="1.1" height="15.0" fill="rgb(238,198,36)" rx="2" ry="2" />
<text  x="620.42" y="703.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%)</title><rect x="133.7" y="725" width="0.3" height="15.0" fill="rgb(206,52,26)" rx="2" ry="2" />
<text  x="136.73" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="40.0" y="565" width="0.2" height="15.0" fill="rgb(225,94,27)" rx="2" ry="2" />
<text  x="43.00" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="604.2" y="597" width="0.2" height="15.0" fill="rgb(226,127,7)" rx="2" ry="2" />
<text  x="607.19" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="284.4" y="533" width="0.2" height="15.0" fill="rgb(241,65,50)" rx="2" ry="2" />
<text  x="287.38" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="90.9" y="773" width="0.5" height="15.0" fill="rgb(225,161,2)" rx="2" ry="2" />
<text  x="93.95" y="783.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (3 samples, 0.06%)</title><rect x="1133.8" y="453" width="0.6" height="15.0" fill="rgb(241,29,11)" rx="2" ry="2" />
<text  x="1136.76" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="19.9" y="677" width="0.2" height="15.0" fill="rgb(235,181,6)" rx="2" ry="2" />
<text  x="22.93" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1086.6" y="661" width="0.2" height="15.0" fill="rgb(234,88,24)" rx="2" ry="2" />
<text  x="1089.56" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="47.9" y="613" width="0.3" height="15.0" fill="rgb(235,68,54)" rx="2" ry="2" />
<text  x="50.94" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (3 samples, 0.06%)</title><rect x="687.3" y="741" width="0.7" height="15.0" fill="rgb(254,214,6)" rx="2" ry="2" />
<text  x="690.34" y="751.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="876.4" y="661" width="0.2" height="15.0" fill="rgb(239,168,10)" rx="2" ry="2" />
<text  x="879.36" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (1 samples, 0.02%)</title><rect x="197.5" y="549" width="0.2" height="15.0" fill="rgb(251,55,27)" rx="2" ry="2" />
<text  x="200.48" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.09%)</title><rect x="566.9" y="565" width="1.1" height="15.0" fill="rgb(228,119,53)" rx="2" ry="2" />
<text  x="569.92" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (130 samples, 2.43%)</title><rect x="228.8" y="437" width="28.7" height="15.0" fill="rgb(216,122,11)" rx="2" ry="2" />
<text  x="231.80" y="447.5" >co..</text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%)</title><rect x="951.8" y="709" width="0.2" height="15.0" fill="rgb(237,11,0)" rx="2" ry="2" />
<text  x="954.79" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="777.6" y="661" width="0.2" height="15.0" fill="rgb(211,60,48)" rx="2" ry="2" />
<text  x="780.55" y="671.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="730.1" y="709" width="0.3" height="15.0" fill="rgb(248,134,36)" rx="2" ry="2" />
<text  x="733.13" y="719.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (3 samples, 0.06%)</title><rect x="1029.2" y="549" width="0.7" height="15.0" fill="rgb(219,169,33)" rx="2" ry="2" />
<text  x="1032.21" y="559.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="814.2" y="405" width="0.2" height="15.0" fill="rgb(247,199,35)" rx="2" ry="2" />
<text  x="817.16" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="707.4" y="581" width="0.2" height="15.0" fill="rgb(236,205,11)" rx="2" ry="2" />
<text  x="710.41" y="591.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="1167.1" y="725" width="0.2" height="15.0" fill="rgb(231,182,19)" rx="2" ry="2" />
<text  x="1170.06" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="16.2" y="805" width="0.2" height="15.0" fill="rgb(216,169,1)" rx="2" ry="2" />
<text  x="19.18" y="815.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%)</title><rect x="430.2" y="517" width="0.4" height="15.0" fill="rgb(254,13,2)" rx="2" ry="2" />
<text  x="433.17" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="821.4" y="613" width="0.5" height="15.0" fill="rgb(238,211,12)" rx="2" ry="2" />
<text  x="824.44" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (15 samples, 0.28%)</title><rect x="672.8" y="757" width="3.3" height="15.0" fill="rgb(236,159,24)" rx="2" ry="2" />
<text  x="675.79" y="767.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="543.8" y="517" width="0.4" height="15.0" fill="rgb(205,22,18)" rx="2" ry="2" />
<text  x="546.76" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="54.3" y="645" width="0.3" height="15.0" fill="rgb(216,46,45)" rx="2" ry="2" />
<text  x="57.33" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="606.0" y="629" width="0.2" height="15.0" fill="rgb(212,5,13)" rx="2" ry="2" />
<text  x="608.96" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="330.0" y="693" width="0.3" height="15.0" fill="rgb(252,10,0)" rx="2" ry="2" />
<text  x="333.03" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="68.9" y="709" width="0.7" height="15.0" fill="rgb(240,47,31)" rx="2" ry="2" />
<text  x="71.89" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="846.6" y="661" width="0.4" height="15.0" fill="rgb(247,14,30)" rx="2" ry="2" />
<text  x="849.59" y="671.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (429 samples, 8.02%)</title><rect x="201.9" y="581" width="94.6" height="15.0" fill="rgb(233,3,27)" rx="2" ry="2" />
<text  x="204.89" y="591.5" >logalloc::a..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="269.6" y="421" width="0.2" height="15.0" fill="rgb(214,10,4)" rx="2" ry="2" />
<text  x="272.60" y="431.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.07%)</title><rect x="325.8" y="597" width="0.9" height="15.0" fill="rgb(241,219,35)" rx="2" ry="2" />
<text  x="328.84" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (5 samples, 0.09%)</title><rect x="101.3" y="757" width="1.1" height="15.0" fill="rgb(223,79,14)" rx="2" ry="2" />
<text  x="104.31" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="644.8" y="709" width="0.2" height="15.0" fill="rgb(216,95,40)" rx="2" ry="2" />
<text  x="647.77" y="719.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="45.1" y="533" width="0.2" height="15.0" fill="rgb(239,154,6)" rx="2" ry="2" />
<text  x="48.07" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="23.2" y="469" width="0.3" height="15.0" fill="rgb(223,37,28)" rx="2" ry="2" />
<text  x="26.23" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (15 samples, 0.28%)</title><rect x="982.7" y="597" width="3.3" height="15.0" fill="rgb(244,46,38)" rx="2" ry="2" />
<text  x="985.67" y="607.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (3 samples, 0.06%)</title><rect x="1113.5" y="709" width="0.6" height="15.0" fill="rgb(212,160,10)" rx="2" ry="2" />
<text  x="1116.47" y="719.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.07%)</title><rect x="338.9" y="597" width="0.8" height="15.0" fill="rgb(206,196,44)" rx="2" ry="2" />
<text  x="341.86" y="607.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="694.6" y="757" width="0.7" height="15.0" fill="rgb(214,95,8)" rx="2" ry="2" />
<text  x="697.62" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="21.0" y="629" width="0.2" height="15.0" fill="rgb(228,62,27)" rx="2" ry="2" />
<text  x="24.03" y="639.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (56 samples, 1.05%)</title><rect x="751.3" y="709" width="12.4" height="15.0" fill="rgb(220,205,24)" rx="2" ry="2" />
<text  x="754.30" y="719.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="836.4" y="613" width="0.7" height="15.0" fill="rgb(226,69,28)" rx="2" ry="2" />
<text  x="839.44" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="657.6" y="789" width="0.4" height="15.0" fill="rgb(242,95,21)" rx="2" ry="2" />
<text  x="660.57" y="799.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="730.8" y="677" width="0.2" height="15.0" fill="rgb(223,77,28)" rx="2" ry="2" />
<text  x="733.79" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="947.6" y="693" width="0.2" height="15.0" fill="rgb(215,202,35)" rx="2" ry="2" />
<text  x="950.60" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (40 samples, 0.75%)</title><rect x="871.5" y="741" width="8.8" height="15.0" fill="rgb(229,42,19)" rx="2" ry="2" />
<text  x="874.51" y="751.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%)</title><rect x="139.5" y="437" width="0.2" height="15.0" fill="rgb(248,17,24)" rx="2" ry="2" />
<text  x="142.47" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%)</title><rect x="1135.3" y="501" width="0.2" height="15.0" fill="rgb(208,112,20)" rx="2" ry="2" />
<text  x="1138.30" y="511.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="548.8" y="517" width="0.5" height="15.0" fill="rgb(239,47,22)" rx="2" ry="2" />
<text  x="551.83" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="75.9" y="581" width="0.3" height="15.0" fill="rgb(249,89,53)" rx="2" ry="2" />
<text  x="78.95" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="225.7" y="453" width="0.4" height="15.0" fill="rgb(228,166,30)" rx="2" ry="2" />
<text  x="228.71" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.2" y="869" width="0.2" height="15.0" fill="rgb(205,94,47)" rx="2" ry="2" />
<text  x="13.22" y="879.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="551.9" y="533" width="0.2" height="15.0" fill="rgb(212,177,50)" rx="2" ry="2" />
<text  x="554.92" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="910.5" y="613" width="0.3" height="15.0" fill="rgb(227,85,24)" rx="2" ry="2" />
<text  x="913.55" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (2 samples, 0.04%)</title><rect x="602.9" y="565" width="0.4" height="15.0" fill="rgb(240,163,49)" rx="2" ry="2" />
<text  x="605.87" y="575.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (1 samples, 0.02%)</title><rect x="1103.5" y="725" width="0.3" height="15.0" fill="rgb(222,113,36)" rx="2" ry="2" />
<text  x="1106.54" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="65.4" y="661" width="0.2" height="15.0" fill="rgb(207,163,8)" rx="2" ry="2" />
<text  x="68.36" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="228.6" y="437" width="0.2" height="15.0" fill="rgb(238,101,39)" rx="2" ry="2" />
<text  x="231.58" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%)</title><rect x="748.0" y="693" width="0.7" height="15.0" fill="rgb(251,61,40)" rx="2" ry="2" />
<text  x="751.00" y="703.5" ></text>
</g>
<g >
<title>partition_key::partition_key (1 samples, 0.02%)</title><rect x="1119.6" y="533" width="0.3" height="15.0" fill="rgb(244,186,49)" rx="2" ry="2" />
<text  x="1122.64" y="543.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="634.2" y="709" width="0.6" height="15.0" fill="rgb(230,100,10)" rx="2" ry="2" />
<text  x="637.19" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+= (1 samples, 0.02%)</title><rect x="74.0" y="757" width="0.2" height="15.0" fill="rgb(239,129,50)" rx="2" ry="2" />
<text  x="76.96" y="767.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="102.6" y="677" width="0.3" height="15.0" fill="rgb(208,208,7)" rx="2" ry="2" />
<text  x="105.64" y="687.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (42 samples, 0.79%)</title><rect x="124.9" y="757" width="9.3" height="15.0" fill="rgb(215,65,26)" rx="2" ry="2" />
<text  x="127.91" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.36%)</title><rect x="448.9" y="613" width="4.2" height="15.0" fill="rgb(235,134,48)" rx="2" ry="2" />
<text  x="451.92" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="312.6" y="613" width="0.2" height="15.0" fill="rgb(233,18,20)" rx="2" ry="2" />
<text  x="315.61" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="989.7" y="533" width="0.5" height="15.0" fill="rgb(219,80,41)" rx="2" ry="2" />
<text  x="992.73" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="46.8" y="501" width="0.3" height="15.0" fill="rgb(252,14,9)" rx="2" ry="2" />
<text  x="49.83" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.07%)</title><rect x="36.7" y="613" width="0.9" height="15.0" fill="rgb(254,175,24)" rx="2" ry="2" />
<text  x="39.69" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="122.5" y="725" width="0.2" height="15.0" fill="rgb(242,76,35)" rx="2" ry="2" />
<text  x="125.49" y="735.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="103.7" y="789" width="0.3" height="15.0" fill="rgb(233,90,52)" rx="2" ry="2" />
<text  x="106.74" y="799.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="841.7" y="677" width="0.5" height="15.0" fill="rgb(207,213,14)" rx="2" ry="2" />
<text  x="844.73" y="687.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="875.5" y="613" width="0.2" height="15.0" fill="rgb(250,125,47)" rx="2" ry="2" />
<text  x="878.48" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="783.3" y="629" width="0.2" height="15.0" fill="rgb(205,91,11)" rx="2" ry="2" />
<text  x="786.29" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="705.0" y="741" width="0.2" height="15.0" fill="rgb(240,116,47)" rx="2" ry="2" />
<text  x="707.99" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="611.5" y="645" width="0.2" height="15.0" fill="rgb(214,156,50)" rx="2" ry="2" />
<text  x="614.47" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="827.2" y="677" width="0.2" height="15.0" fill="rgb(228,37,36)" rx="2" ry="2" />
<text  x="830.18" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1086.8" y="661" width="0.2" height="15.0" fill="rgb(217,14,21)" rx="2" ry="2" />
<text  x="1089.78" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="21.7" y="677" width="0.4" height="15.0" fill="rgb(210,218,15)" rx="2" ry="2" />
<text  x="24.69" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (44 samples, 0.82%)</title><rect x="1126.5" y="757" width="9.7" height="15.0" fill="rgb(254,99,47)" rx="2" ry="2" />
<text  x="1129.48" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (46 samples, 0.86%)</title><rect x="316.6" y="629" width="10.1" height="15.0" fill="rgb(216,85,13)" rx="2" ry="2" />
<text  x="319.58" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::operator= (1 samples, 0.02%)</title><rect x="17.5" y="677" width="0.2" height="15.0" fill="rgb(207,18,28)" rx="2" ry="2" />
<text  x="20.50" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="304.0" y="613" width="0.4" height="15.0" fill="rgb(224,111,5)" rx="2" ry="2" />
<text  x="307.01" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="291.7" y="517" width="0.2" height="15.0" fill="rgb(238,146,38)" rx="2" ry="2" />
<text  x="294.66" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="690.4" y="773" width="0.3" height="15.0" fill="rgb(247,68,48)" rx="2" ry="2" />
<text  x="693.43" y="783.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="70.0" y="741" width="0.2" height="15.0" fill="rgb(208,42,30)" rx="2" ry="2" />
<text  x="72.99" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="460.4" y="709" width="0.2" height="15.0" fill="rgb(248,168,33)" rx="2" ry="2" />
<text  x="463.39" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="531.4" y="613" width="0.2" height="15.0" fill="rgb(218,40,45)" rx="2" ry="2" />
<text  x="534.41" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="962.2" y="645" width="0.2" height="15.0" fill="rgb(244,15,51)" rx="2" ry="2" />
<text  x="965.16" y="655.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%)</title><rect x="19.0" y="725" width="0.7" height="15.0" fill="rgb(249,52,2)" rx="2" ry="2" />
<text  x="22.04" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="770.9" y="645" width="0.7" height="15.0" fill="rgb(243,154,37)" rx="2" ry="2" />
<text  x="773.93" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="896.9" y="693" width="0.4" height="15.0" fill="rgb(225,25,30)" rx="2" ry="2" />
<text  x="899.87" y="703.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (18 samples, 0.34%)</title><rect x="389.1" y="469" width="4.0" height="15.0" fill="rgb(254,156,36)" rx="2" ry="2" />
<text  x="392.14" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.11%)</title><rect x="674.8" y="741" width="1.3" height="15.0" fill="rgb(238,56,44)" rx="2" ry="2" />
<text  x="677.77" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="715.4" y="789" width="0.2" height="15.0" fill="rgb(221,1,48)" rx="2" ry="2" />
<text  x="718.35" y="799.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%)</title><rect x="1153.2" y="741" width="1.1" height="15.0" fill="rgb(232,18,13)" rx="2" ry="2" />
<text  x="1156.17" y="751.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="33.2" y="629" width="0.2" height="15.0" fill="rgb(231,107,11)" rx="2" ry="2" />
<text  x="36.16" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;sstables::option [], utils::chunked_vector_free_deleter&gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="15.5" y="805" width="0.2" height="15.0" fill="rgb(208,224,36)" rx="2" ry="2" />
<text  x="18.51" y="815.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (3 samples, 0.06%)</title><rect x="724.2" y="725" width="0.6" height="15.0" fill="rgb(242,177,7)" rx="2" ry="2" />
<text  x="727.18" y="735.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1130.2" y="437" width="0.2" height="15.0" fill="rgb(239,107,31)" rx="2" ry="2" />
<text  x="1133.23" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="444.1" y="485" width="0.4" height="15.0" fill="rgb(207,40,19)" rx="2" ry="2" />
<text  x="447.06" y="495.5" ></text>
</g>
<g >
<title>schema_registry::get (18 samples, 0.34%)</title><rect x="967.9" y="661" width="4.0" height="15.0" fill="rgb(220,91,24)" rx="2" ry="2" />
<text  x="970.90" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="725.7" y="741" width="0.2" height="15.0" fill="rgb(212,37,2)" rx="2" ry="2" />
<text  x="728.72" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.07%)</title><rect x="34.7" y="645" width="0.9" height="15.0" fill="rgb(225,67,6)" rx="2" ry="2" />
<text  x="37.70" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="906.4" y="613" width="0.2" height="15.0" fill="rgb(230,196,41)" rx="2" ry="2" />
<text  x="909.36" y="623.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (3 samples, 0.06%)</title><rect x="658.2" y="789" width="0.7" height="15.0" fill="rgb(236,159,40)" rx="2" ry="2" />
<text  x="661.23" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,922 samples, 92.00%)</title><rect x="81.7" y="821" width="1085.6" height="15.0" fill="rgb(209,110,36)" rx="2" ry="2" />
<text  x="84.68" y="831.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%)</title><rect x="483.3" y="613" width="2.0" height="15.0" fill="rgb(253,83,36)" rx="2" ry="2" />
<text  x="486.32" y="623.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="258.1" y="437" width="0.5" height="15.0" fill="rgb(215,140,21)" rx="2" ry="2" />
<text  x="261.13" y="447.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%)</title><rect x="708.1" y="773" width="0.2" height="15.0" fill="rgb(241,208,45)" rx="2" ry="2" />
<text  x="711.07" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%)</title><rect x="67.1" y="741" width="0.2" height="15.0" fill="rgb(253,215,17)" rx="2" ry="2" />
<text  x="70.13" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="59.2" y="693" width="0.4" height="15.0" fill="rgb(242,213,37)" rx="2" ry="2" />
<text  x="62.19" y="703.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="46.2" y="517" width="0.6" height="15.0" fill="rgb(225,152,4)" rx="2" ry="2" />
<text  x="49.17" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="216.2" y="517" width="0.2" height="15.0" fill="rgb(236,195,52)" rx="2" ry="2" />
<text  x="219.22" y="527.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1130.9" y="437" width="0.2" height="15.0" fill="rgb(236,51,28)" rx="2" ry="2" />
<text  x="1133.89" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="556.3" y="629" width="0.5" height="15.0" fill="rgb(212,163,9)" rx="2" ry="2" />
<text  x="559.33" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="638.4" y="741" width="0.2" height="15.0" fill="rgb(228,60,32)" rx="2" ry="2" />
<text  x="641.38" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1115.5" y="709" width="0.2" height="15.0" fill="rgb(251,52,52)" rx="2" ry="2" />
<text  x="1118.45" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="202.5" y="565" width="0.3" height="15.0" fill="rgb(221,147,22)" rx="2" ry="2" />
<text  x="205.55" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="485.5" y="613" width="0.2" height="15.0" fill="rgb(248,130,11)" rx="2" ry="2" />
<text  x="488.53" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (40 samples, 0.75%)</title><rect x="708.5" y="805" width="8.8" height="15.0" fill="rgb(216,130,36)" rx="2" ry="2" />
<text  x="711.52" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="872.8" y="613" width="0.3" height="15.0" fill="rgb(236,126,44)" rx="2" ry="2" />
<text  x="875.83" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="697.0" y="757" width="0.7" height="15.0" fill="rgb(216,174,32)" rx="2" ry="2" />
<text  x="700.05" y="767.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (22 samples, 0.41%)</title><rect x="765.0" y="725" width="4.8" height="15.0" fill="rgb(254,4,19)" rx="2" ry="2" />
<text  x="767.98" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="46.4" y="421" width="0.4" height="15.0" fill="rgb(205,129,34)" rx="2" ry="2" />
<text  x="49.39" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="53.9" y="677" width="0.2" height="15.0" fill="rgb(228,45,23)" rx="2" ry="2" />
<text  x="56.89" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="743.8" y="597" width="0.2" height="15.0" fill="rgb(206,38,9)" rx="2" ry="2" />
<text  x="746.81" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="40.2" y="597" width="0.2" height="15.0" fill="rgb(233,167,36)" rx="2" ry="2" />
<text  x="43.22" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="707.4" y="389" width="0.2" height="15.0" fill="rgb(232,29,46)" rx="2" ry="2" />
<text  x="710.41" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="561.8" y="629" width="0.5" height="15.0" fill="rgb(223,52,5)" rx="2" ry="2" />
<text  x="564.84" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="42.0" y="581" width="0.2" height="15.0" fill="rgb(253,188,14)" rx="2" ry="2" />
<text  x="44.98" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (7 samples, 0.13%)</title><rect x="410.8" y="517" width="1.5" height="15.0" fill="rgb(231,36,6)" rx="2" ry="2" />
<text  x="413.76" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="819.5" y="581" width="0.2" height="15.0" fill="rgb(209,85,16)" rx="2" ry="2" />
<text  x="822.46" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="48.8" y="549" width="0.2" height="15.0" fill="rgb(250,37,44)" rx="2" ry="2" />
<text  x="51.82" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="47.9" y="581" width="0.3" height="15.0" fill="rgb(227,71,16)" rx="2" ry="2" />
<text  x="50.94" y="591.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="966.1" y="661" width="0.3" height="15.0" fill="rgb(254,79,18)" rx="2" ry="2" />
<text  x="969.13" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="45.3" y="485" width="0.2" height="15.0" fill="rgb(210,210,5)" rx="2" ry="2" />
<text  x="48.29" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="796.7" y="565" width="1.1" height="15.0" fill="rgb(241,18,47)" rx="2" ry="2" />
<text  x="799.74" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="455.3" y="629" width="0.9" height="15.0" fill="rgb(245,124,13)" rx="2" ry="2" />
<text  x="458.31" y="639.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="71.3" y="597" width="0.5" height="15.0" fill="rgb(236,201,24)" rx="2" ry="2" />
<text  x="74.32" y="607.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (1 samples, 0.02%)</title><rect x="39.1" y="581" width="0.2" height="15.0" fill="rgb(220,58,32)" rx="2" ry="2" />
<text  x="42.11" y="591.5" ></text>
</g>
<g >
<title>free (12 samples, 0.22%)</title><rect x="441.4" y="485" width="2.7" height="15.0" fill="rgb(209,10,1)" rx="2" ry="2" />
<text  x="444.42" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%)</title><rect x="212.5" y="517" width="0.6" height="15.0" fill="rgb(239,209,24)" rx="2" ry="2" />
<text  x="215.47" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="68.9" y="693" width="0.7" height="15.0" fill="rgb(206,122,29)" rx="2" ry="2" />
<text  x="71.89" y="703.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="68.2" y="725" width="0.2" height="15.0" fill="rgb(234,51,34)" rx="2" ry="2" />
<text  x="71.23" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="686.5" y="789" width="1.5" height="15.0" fill="rgb(241,104,39)" rx="2" ry="2" />
<text  x="689.46" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="983.8" y="565" width="0.4" height="15.0" fill="rgb(208,185,42)" rx="2" ry="2" />
<text  x="986.78" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.65%)</title><rect x="1118.5" y="661" width="7.8" height="15.0" fill="rgb(247,186,42)" rx="2" ry="2" />
<text  x="1121.54" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%)</title><rect x="705.6" y="773" width="0.7" height="15.0" fill="rgb(235,134,2)" rx="2" ry="2" />
<text  x="708.65" y="783.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="65.6" y="661" width="0.2" height="15.0" fill="rgb(221,175,6)" rx="2" ry="2" />
<text  x="68.58" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.2" y="853" width="0.2" height="15.0" fill="rgb(249,5,1)" rx="2" ry="2" />
<text  x="13.22" y="863.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.3" y="485" width="0.2" height="15.0" fill="rgb(205,82,42)" rx="2" ry="2" />
<text  x="1125.29" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="322.3" y="565" width="2.2" height="15.0" fill="rgb(229,187,41)" rx="2" ry="2" />
<text  x="325.31" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="97.6" y="789" width="0.4" height="15.0" fill="rgb(217,178,24)" rx="2" ry="2" />
<text  x="100.56" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="667.7" y="661" width="0.2" height="15.0" fill="rgb(225,35,37)" rx="2" ry="2" />
<text  x="670.71" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="759.9" y="597" width="0.2" height="15.0" fill="rgb(247,156,37)" rx="2" ry="2" />
<text  x="762.91" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="75.1" y="709" width="0.2" height="15.0" fill="rgb(238,176,20)" rx="2" ry="2" />
<text  x="78.07" y="719.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%)</title><rect x="477.1" y="581" width="0.5" height="15.0" fill="rgb(254,172,6)" rx="2" ry="2" />
<text  x="480.15" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="581.7" y="661" width="0.2" height="15.0" fill="rgb(251,44,27)" rx="2" ry="2" />
<text  x="584.69" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%)</title><rect x="60.3" y="629" width="0.2" height="15.0" fill="rgb(253,68,15)" rx="2" ry="2" />
<text  x="63.29" y="639.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.6" y="885" width="0.2" height="15.0" fill="rgb(254,145,30)" rx="2" ry="2" />
<text  x="77.62" y="895.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (9 samples, 0.17%)</title><rect x="754.2" y="677" width="2.0" height="15.0" fill="rgb(215,90,47)" rx="2" ry="2" />
<text  x="757.17" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="277.3" y="421" width="0.2" height="15.0" fill="rgb(207,23,41)" rx="2" ry="2" />
<text  x="280.32" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="1144.6" y="789" width="0.4" height="15.0" fill="rgb(253,69,54)" rx="2" ry="2" />
<text  x="1147.56" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (583 samples, 10.90%)</title><rect x="179.6" y="645" width="128.6" height="15.0" fill="rgb(233,189,15)" rx="2" ry="2" />
<text  x="182.61" y="655.5" >mutation_fragmen..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator&lt; (1 samples, 0.02%)</title><rect x="17.5" y="485" width="0.2" height="15.0" fill="rgb(251,12,12)" rx="2" ry="2" />
<text  x="20.50" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (46 samples, 0.86%)</title><rect x="607.1" y="693" width="10.1" height="15.0" fill="rgb(211,119,19)" rx="2" ry="2" />
<text  x="610.06" y="703.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="1122.3" y="517" width="0.2" height="15.0" fill="rgb(227,58,41)" rx="2" ry="2" />
<text  x="1125.29" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="979.1" y="645" width="0.3" height="15.0" fill="rgb(218,63,16)" rx="2" ry="2" />
<text  x="982.14" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="37.1" y="485" width="0.5" height="15.0" fill="rgb(211,42,11)" rx="2" ry="2" />
<text  x="40.13" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="722.4" y="741" width="0.2" height="15.0" fill="rgb(218,88,44)" rx="2" ry="2" />
<text  x="725.41" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="40.7" y="613" width="0.2" height="15.0" fill="rgb(216,205,43)" rx="2" ry="2" />
<text  x="43.66" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%)</title><rect x="60.3" y="645" width="0.2" height="15.0" fill="rgb(217,88,42)" rx="2" ry="2" />
<text  x="63.29" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="1145.0" y="789" width="0.7" height="15.0" fill="rgb(245,212,27)" rx="2" ry="2" />
<text  x="1148.01" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (4 samples, 0.07%)</title><rect x="327.8" y="693" width="0.9" height="15.0" fill="rgb(248,33,1)" rx="2" ry="2" />
<text  x="330.83" y="703.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (12 samples, 0.22%)</title><rect x="856.7" y="709" width="2.7" height="15.0" fill="rgb(225,128,5)" rx="2" ry="2" />
<text  x="859.73" y="719.5" ></text>
</g>
<g >
<title>schema::~schema (1 samples, 0.02%)</title><rect x="17.3" y="533" width="0.2" height="15.0" fill="rgb(221,216,46)" rx="2" ry="2" />
<text  x="20.28" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="932.2" y="645" width="0.2" height="15.0" fill="rgb(220,192,13)" rx="2" ry="2" />
<text  x="935.16" y="655.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="991.5" y="597" width="0.4" height="15.0" fill="rgb(228,126,27)" rx="2" ry="2" />
<text  x="994.50" y="607.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%)</title><rect x="770.9" y="677" width="0.7" height="15.0" fill="rgb(221,141,33)" rx="2" ry="2" />
<text  x="773.93" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;int&gt;  (1 samples, 0.02%)</title><rect x="730.8" y="773" width="0.2" height="15.0" fill="rgb(230,135,46)" rx="2" ry="2" />
<text  x="733.79" y="783.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (3 samples, 0.06%)</title><rect x="551.3" y="533" width="0.6" height="15.0" fill="rgb(229,151,49)" rx="2" ry="2" />
<text  x="554.26" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="973.9" y="661" width="0.2" height="15.0" fill="rgb(228,47,52)" rx="2" ry="2" />
<text  x="976.85" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (3 samples, 0.06%)</title><rect x="731.7" y="805" width="0.6" height="15.0" fill="rgb(229,61,0)" rx="2" ry="2" />
<text  x="734.67" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="767.2" y="693" width="1.7" height="15.0" fill="rgb(215,182,10)" rx="2" ry="2" />
<text  x="770.19" y="703.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1123.4" y="517" width="0.4" height="15.0" fill="rgb(222,95,10)" rx="2" ry="2" />
<text  x="1126.39" y="527.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="69.6" y="677" width="0.2" height="15.0" fill="rgb(234,16,19)" rx="2" ry="2" />
<text  x="72.55" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="957.1" y="709" width="0.2" height="15.0" fill="rgb(223,223,26)" rx="2" ry="2" />
<text  x="960.09" y="719.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="522.6" y="485" width="0.2" height="15.0" fill="rgb(222,132,6)" rx="2" ry="2" />
<text  x="525.58" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="665.5" y="773" width="0.2" height="15.0" fill="rgb(213,54,46)" rx="2" ry="2" />
<text  x="668.51" y="783.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (8 samples, 0.15%)</title><rect x="570.4" y="581" width="1.8" height="15.0" fill="rgb(217,36,31)" rx="2" ry="2" />
<text  x="573.44" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="36.9" y="597" width="0.7" height="15.0" fill="rgb(252,92,52)" rx="2" ry="2" />
<text  x="39.91" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="71.8" y="613" width="0.2" height="15.0" fill="rgb(213,29,25)" rx="2" ry="2" />
<text  x="74.76" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%)</title><rect x="122.0" y="741" width="1.4" height="15.0" fill="rgb(230,220,12)" rx="2" ry="2" />
<text  x="125.04" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="629" width="0.2" height="15.0" fill="rgb(212,226,5)" rx="2" ry="2" />
<text  x="142.47" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="102.6" y="597" width="0.3" height="15.0" fill="rgb(208,152,40)" rx="2" ry="2" />
<text  x="105.64" y="607.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="74.6" y="805" width="0.2" height="15.0" fill="rgb(253,42,0)" rx="2" ry="2" />
<text  x="77.62" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (8 samples, 0.15%)</title><rect x="23.2" y="613" width="1.8" height="15.0" fill="rgb(253,59,54)" rx="2" ry="2" />
<text  x="26.23" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="272.9" y="469" width="0.2" height="15.0" fill="rgb(228,211,23)" rx="2" ry="2" />
<text  x="275.91" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="593.8" y="597" width="0.2" height="15.0" fill="rgb(217,57,34)" rx="2" ry="2" />
<text  x="596.82" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="255.0" y="421" width="0.5" height="15.0" fill="rgb(243,79,28)" rx="2" ry="2" />
<text  x="258.04" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="906.1" y="613" width="0.3" height="15.0" fill="rgb(211,181,0)" rx="2" ry="2" />
<text  x="909.14" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="22.4" y="517" width="0.2" height="15.0" fill="rgb(208,157,28)" rx="2" ry="2" />
<text  x="25.35" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="982.7" y="581" width="0.2" height="15.0" fill="rgb(209,1,18)" rx="2" ry="2" />
<text  x="985.67" y="591.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="663.7" y="789" width="0.7" height="15.0" fill="rgb(207,16,45)" rx="2" ry="2" />
<text  x="666.74" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%)</title><rect x="42.9" y="549" width="0.6" height="15.0" fill="rgb(220,129,24)" rx="2" ry="2" />
<text  x="45.86" y="559.5" ></text>
</g>
<g >
<title>seastar::jmp_buf_link::switch_out (1 samples, 0.02%)</title><rect x="18.4" y="805" width="0.2" height="15.0" fill="rgb(243,192,32)" rx="2" ry="2" />
<text  x="21.38" y="815.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (5 samples, 0.09%)</title><rect x="101.3" y="677" width="1.1" height="15.0" fill="rgb(234,211,39)" rx="2" ry="2" />
<text  x="104.31" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,041 samples, 19.46%)</title><rect x="887.4" y="741" width="229.6" height="15.0" fill="rgb(237,144,44)" rx="2" ry="2" />
<text  x="890.39" y="751.5" >cql3::statements::select_state..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (47 samples, 0.88%)</title><rect x="23.0" y="661" width="10.4" height="15.0" fill="rgb(253,142,22)" rx="2" ry="2" />
<text  x="26.01" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="603.5" y="581" width="0.5" height="15.0" fill="rgb(253,74,39)" rx="2" ry="2" />
<text  x="606.53" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3 samples, 0.06%)</title><rect x="647.2" y="725" width="0.7" height="15.0" fill="rgb(243,156,35)" rx="2" ry="2" />
<text  x="650.20" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="71.3" y="565" width="0.5" height="15.0" fill="rgb(235,203,47)" rx="2" ry="2" />
<text  x="74.32" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (10 samples, 0.19%)</title><rect x="611.7" y="661" width="2.2" height="15.0" fill="rgb(244,46,9)" rx="2" ry="2" />
<text  x="614.69" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (40 samples, 0.75%)</title><rect x="871.5" y="725" width="8.8" height="15.0" fill="rgb(234,30,41)" rx="2" ry="2" />
<text  x="874.51" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="304.7" y="629" width="0.2" height="15.0" fill="rgb(227,111,4)" rx="2" ry="2" />
<text  x="307.67" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="549.3" y="517" width="0.2" height="15.0" fill="rgb(220,63,2)" rx="2" ry="2" />
<text  x="552.27" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (97 samples, 1.81%)</title><rect x="798.3" y="597" width="21.4" height="15.0" fill="rgb(249,119,22)" rx="2" ry="2" />
<text  x="801.28" y="607.5" >s..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.09%)</title><rect x="676.8" y="725" width="1.1" height="15.0" fill="rgb(217,184,44)" rx="2" ry="2" />
<text  x="679.76" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%)</title><rect x="673.0" y="725" width="1.8" height="15.0" fill="rgb(226,148,40)" rx="2" ry="2" />
<text  x="676.01" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="1064.7" y="645" width="0.2" height="15.0" fill="rgb(229,16,20)" rx="2" ry="2" />
<text  x="1067.72" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (1 samples, 0.02%)</title><rect x="1167.5" y="805" width="0.2" height="15.0" fill="rgb(210,113,6)" rx="2" ry="2" />
<text  x="1170.50" y="815.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (7 samples, 0.13%)</title><rect x="901.5" y="613" width="1.6" height="15.0" fill="rgb(216,209,4)" rx="2" ry="2" />
<text  x="904.51" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (6 samples, 0.11%)</title><rect x="875.0" y="661" width="1.4" height="15.0" fill="rgb(208,185,1)" rx="2" ry="2" />
<text  x="878.04" y="671.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%)</title><rect x="1147.7" y="709" width="0.4" height="15.0" fill="rgb(225,216,18)" rx="2" ry="2" />
<text  x="1150.65" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="185.8" y="597" width="0.2" height="15.0" fill="rgb(250,114,26)" rx="2" ry="2" />
<text  x="188.79" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="74.6" y="757" width="0.2" height="15.0" fill="rgb(218,34,37)" rx="2" ry="2" />
<text  x="77.62" y="767.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="838.2" y="725" width="0.2" height="15.0" fill="rgb(253,127,13)" rx="2" ry="2" />
<text  x="841.21" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="39.3" y="517" width="0.3" height="15.0" fill="rgb(231,185,34)" rx="2" ry="2" />
<text  x="42.33" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (6 samples, 0.11%)</title><rect x="780.9" y="677" width="1.3" height="15.0" fill="rgb(240,51,15)" rx="2" ry="2" />
<text  x="783.86" y="687.5" ></text>
</g>
<g >
<title>seastar::execution_stage::execution_stage (1 samples, 0.02%)</title><rect x="74.6" y="549" width="0.2" height="15.0" fill="rgb(244,91,30)" rx="2" ry="2" />
<text  x="77.62" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (3 samples, 0.06%)</title><rect x="948.7" y="725" width="0.7" height="15.0" fill="rgb(219,0,45)" rx="2" ry="2" />
<text  x="951.71" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1022.6" y="453" width="0.2" height="15.0" fill="rgb(245,146,45)" rx="2" ry="2" />
<text  x="1025.59" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="17.9" y="821" width="0.3" height="15.0" fill="rgb(243,134,35)" rx="2" ry="2" />
<text  x="20.94" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (16 samples, 0.30%)</title><rect x="1162.7" y="773" width="3.5" height="15.0" fill="rgb(250,109,52)" rx="2" ry="2" />
<text  x="1165.65" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="595.4" y="613" width="0.2" height="15.0" fill="rgb(211,148,26)" rx="2" ry="2" />
<text  x="598.37" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1117.9" y="741" width="0.4" height="15.0" fill="rgb(253,229,27)" rx="2" ry="2" />
<text  x="1120.88" y="751.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.09%)</title><rect x="373.0" y="485" width="1.1" height="15.0" fill="rgb(248,97,23)" rx="2" ry="2" />
<text  x="376.04" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="22.4" y="485" width="0.2" height="15.0" fill="rgb(247,110,4)" rx="2" ry="2" />
<text  x="25.35" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::cf_name&gt;::_M_reset (1 samples, 0.02%)</title><rect x="51.7" y="629" width="0.2" height="15.0" fill="rgb(218,204,6)" rx="2" ry="2" />
<text  x="54.69" y="639.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.09%)</title><rect x="102.6" y="805" width="1.1" height="15.0" fill="rgb(238,209,48)" rx="2" ry="2" />
<text  x="105.64" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1114.1" y="725" width="0.2" height="15.0" fill="rgb(248,54,39)" rx="2" ry="2" />
<text  x="1117.13" y="735.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="139.5" y="549" width="0.2" height="15.0" fill="rgb(205,114,20)" rx="2" ry="2" />
<text  x="142.47" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="569.8" y="597" width="0.4" height="15.0" fill="rgb(210,93,7)" rx="2" ry="2" />
<text  x="572.78" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="40.9" y="613" width="0.4" height="15.0" fill="rgb(236,105,13)" rx="2" ry="2" />
<text  x="43.88" y="623.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="836.2" y="613" width="0.2" height="15.0" fill="rgb(248,157,18)" rx="2" ry="2" />
<text  x="839.22" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="22.1" y="693" width="0.7" height="15.0" fill="rgb(235,14,20)" rx="2" ry="2" />
<text  x="25.13" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="458.0" y="677" width="0.2" height="15.0" fill="rgb(245,83,47)" rx="2" ry="2" />
<text  x="460.96" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (4 samples, 0.07%)</title><rect x="754.8" y="629" width="0.9" height="15.0" fill="rgb(233,184,47)" rx="2" ry="2" />
<text  x="757.83" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (6 samples, 0.11%)</title><rect x="715.6" y="789" width="1.3" height="15.0" fill="rgb(231,16,12)" rx="2" ry="2" />
<text  x="718.57" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="77.9" y="917" width="0.3" height="15.0" fill="rgb(209,211,42)" rx="2" ry="2" />
<text  x="80.93" y="927.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1019.7" y="453" width="0.2" height="15.0" fill="rgb(211,105,54)" rx="2" ry="2" />
<text  x="1022.73" y="463.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (21 samples, 0.39%)</title><rect x="1130.2" y="517" width="4.7" height="15.0" fill="rgb(250,100,51)" rx="2" ry="2" />
<text  x="1133.23" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (266 samples, 4.97%)</title><rect x="778.7" y="709" width="58.6" height="15.0" fill="rgb(214,114,8)" rx="2" ry="2" />
<text  x="781.65" y="719.5" >servic..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.67%)</title><rect x="1118.3" y="725" width="8.0" height="15.0" fill="rgb(214,56,44)" rx="2" ry="2" />
<text  x="1121.32" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="485.3" y="613" width="0.2" height="15.0" fill="rgb(232,158,28)" rx="2" ry="2" />
<text  x="488.31" y="623.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.07%)</title><rect x="70.9" y="613" width="0.9" height="15.0" fill="rgb(218,35,10)" rx="2" ry="2" />
<text  x="73.87" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="861.8" y="709" width="0.4" height="15.0" fill="rgb(221,38,8)" rx="2" ry="2" />
<text  x="864.81" y="719.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (67 samples, 1.25%)</title><rect x="233.4" y="421" width="14.8" height="15.0" fill="rgb(208,182,0)" rx="2" ry="2" />
<text  x="236.43" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%)</title><rect x="71.3" y="533" width="0.2" height="15.0" fill="rgb(205,47,35)" rx="2" ry="2" />
<text  x="74.32" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (3 samples, 0.06%)</title><rect x="59.8" y="677" width="0.7" height="15.0" fill="rgb(230,55,12)" rx="2" ry="2" />
<text  x="62.85" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="40.0" y="485" width="0.2" height="15.0" fill="rgb(227,169,8)" rx="2" ry="2" />
<text  x="43.00" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="768.5" y="677" width="0.4" height="15.0" fill="rgb(223,117,11)" rx="2" ry="2" />
<text  x="771.51" y="687.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (4 samples, 0.07%)</title><rect x="76.8" y="789" width="0.9" height="15.0" fill="rgb(219,10,44)" rx="2" ry="2" />
<text  x="79.83" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.24%)</title><rect x="996.1" y="565" width="2.9" height="15.0" fill="rgb(226,88,6)" rx="2" ry="2" />
<text  x="999.13" y="575.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="1106.2" y="725" width="0.2" height="15.0" fill="rgb(243,143,20)" rx="2" ry="2" />
<text  x="1109.19" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1141.9" y="773" width="0.2" height="15.0" fill="rgb(248,8,25)" rx="2" ry="2" />
<text  x="1144.92" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="480.2" y="565" width="0.3" height="15.0" fill="rgb(217,171,37)" rx="2" ry="2" />
<text  x="483.24" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1031.4" y="533" width="0.2" height="15.0" fill="rgb(215,18,8)" rx="2" ry="2" />
<text  x="1034.42" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="72.2" y="709" width="0.2" height="15.0" fill="rgb(226,58,27)" rx="2" ry="2" />
<text  x="75.20" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%)</title><rect x="51.7" y="645" width="0.2" height="15.0" fill="rgb(224,155,5)" rx="2" ry="2" />
<text  x="54.69" y="655.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1034.1" y="581" width="0.2" height="15.0" fill="rgb(208,64,51)" rx="2" ry="2" />
<text  x="1037.06" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="328.3" y="677" width="0.4" height="15.0" fill="rgb(222,78,2)" rx="2" ry="2" />
<text  x="331.27" y="687.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="271.6" y="421" width="0.2" height="15.0" fill="rgb(217,49,25)" rx="2" ry="2" />
<text  x="274.59" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="74.6" y="661" width="0.2" height="15.0" fill="rgb(206,49,45)" rx="2" ry="2" />
<text  x="77.62" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="200.6" y="581" width="0.2" height="15.0" fill="rgb(226,28,41)" rx="2" ry="2" />
<text  x="203.56" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="40.7" y="597" width="0.2" height="15.0" fill="rgb(233,92,44)" rx="2" ry="2" />
<text  x="43.66" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%)</title><rect x="42.2" y="517" width="0.4" height="15.0" fill="rgb(242,77,23)" rx="2" ry="2" />
<text  x="45.20" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="594.9" y="613" width="0.5" height="15.0" fill="rgb(218,114,33)" rx="2" ry="2" />
<text  x="597.93" y="623.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="904.6" y="597" width="1.5" height="15.0" fill="rgb(254,220,42)" rx="2" ry="2" />
<text  x="907.59" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="868.4" y="789" width="0.5" height="15.0" fill="rgb(239,185,22)" rx="2" ry="2" />
<text  x="871.42" y="799.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%)</title><rect x="918.9" y="677" width="0.3" height="15.0" fill="rgb(251,206,5)" rx="2" ry="2" />
<text  x="921.93" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="286.4" y="517" width="0.2" height="15.0" fill="rgb(253,155,42)" rx="2" ry="2" />
<text  x="289.36" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="696.6" y="725" width="0.4" height="15.0" fill="rgb(212,165,23)" rx="2" ry="2" />
<text  x="699.61" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.9" y="549" width="0.2" height="15.0" fill="rgb(243,187,38)" rx="2" ry="2" />
<text  x="52.92" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="138.8" y="757" width="0.2" height="15.0" fill="rgb(249,169,8)" rx="2" ry="2" />
<text  x="141.81" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="46.0" y="501" width="0.2" height="15.0" fill="rgb(247,43,23)" rx="2" ry="2" />
<text  x="48.95" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.21%)</title><rect x="1150.7" y="757" width="2.5" height="15.0" fill="rgb(217,23,52)" rx="2" ry="2" />
<text  x="1153.74" y="767.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.07%)</title><rect x="1118.8" y="501" width="0.8" height="15.0" fill="rgb(236,36,35)" rx="2" ry="2" />
<text  x="1121.76" y="511.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (2 samples, 0.04%)</title><rect x="155.1" y="741" width="0.5" height="15.0" fill="rgb(241,27,54)" rx="2" ry="2" />
<text  x="158.13" y="751.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (92 samples, 1.72%)</title><rect x="798.5" y="581" width="20.3" height="15.0" fill="rgb(226,197,5)" rx="2" ry="2" />
<text  x="801.50" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="859.4" y="725" width="0.2" height="15.0" fill="rgb(245,215,23)" rx="2" ry="2" />
<text  x="862.38" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="877.9" y="533" width="0.2" height="15.0" fill="rgb(249,28,38)" rx="2" ry="2" />
<text  x="880.91" y="543.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1096.3" y="661" width="2.4" height="15.0" fill="rgb(228,13,28)" rx="2" ry="2" />
<text  x="1099.26" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="1036.5" y="565" width="0.2" height="15.0" fill="rgb(230,75,12)" rx="2" ry="2" />
<text  x="1039.49" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%)</title><rect x="283.7" y="565" width="0.2" height="15.0" fill="rgb(230,169,51)" rx="2" ry="2" />
<text  x="286.72" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="1167.1" y="629" width="0.2" height="15.0" fill="rgb(226,6,9)" rx="2" ry="2" />
<text  x="1170.06" y="639.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.52%)</title><rect x="1118.8" y="613" width="6.1" height="15.0" fill="rgb(230,7,35)" rx="2" ry="2" />
<text  x="1121.76" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="547.7" y="485" width="0.5" height="15.0" fill="rgb(243,158,43)" rx="2" ry="2" />
<text  x="550.73" y="495.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="580.1" y="677" width="1.8" height="15.0" fill="rgb(206,143,2)" rx="2" ry="2" />
<text  x="583.15" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (3 samples, 0.06%)</title><rect x="19.0" y="773" width="0.7" height="15.0" fill="rgb(209,90,12)" rx="2" ry="2" />
<text  x="22.04" y="783.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="23.7" y="533" width="0.2" height="15.0" fill="rgb(238,79,37)" rx="2" ry="2" />
<text  x="26.67" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (12 samples, 0.22%)</title><rect x="92.5" y="741" width="2.6" height="15.0" fill="rgb(220,189,36)" rx="2" ry="2" />
<text  x="95.49" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="823.0" y="661" width="0.2" height="15.0" fill="rgb(209,113,25)" rx="2" ry="2" />
<text  x="825.99" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1167.1" y="613" width="0.2" height="15.0" fill="rgb(241,65,33)" rx="2" ry="2" />
<text  x="1170.06" y="623.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="547.5" y="501" width="0.7" height="15.0" fill="rgb(243,13,23)" rx="2" ry="2" />
<text  x="550.51" y="511.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%)</title><rect x="102.6" y="757" width="0.5" height="15.0" fill="rgb(233,117,14)" rx="2" ry="2" />
<text  x="105.64" y="767.5" ></text>
</g>
<g >
<title>do_with_cql_env_thread (1 samples, 0.02%)</title><rect x="730.8" y="725" width="0.2" height="15.0" fill="rgb(207,171,44)" rx="2" ry="2" />
<text  x="733.79" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="392.9" y="453" width="0.2" height="15.0" fill="rgb(217,196,50)" rx="2" ry="2" />
<text  x="395.89" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;reconcilable_result&gt;  (1 samples, 0.02%)</title><rect x="139.5" y="645" width="0.2" height="15.0" fill="rgb(248,10,9)" rx="2" ry="2" />
<text  x="142.47" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.07%)</title><rect x="34.7" y="565" width="0.9" height="15.0" fill="rgb(208,204,39)" rx="2" ry="2" />
<text  x="37.70" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="58.5" y="677" width="0.2" height="15.0" fill="rgb(240,181,29)" rx="2" ry="2" />
<text  x="61.52" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="72.2" y="741" width="0.2" height="15.0" fill="rgb(210,75,13)" rx="2" ry="2" />
<text  x="75.20" y="751.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="877.9" y="501" width="0.2" height="15.0" fill="rgb(228,135,47)" rx="2" ry="2" />
<text  x="880.91" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="206.5" y="549" width="0.2" height="15.0" fill="rgb(206,27,28)" rx="2" ry="2" />
<text  x="209.52" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="752.6" y="693" width="0.2" height="15.0" fill="rgb(208,200,51)" rx="2" ry="2" />
<text  x="755.63" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="708.1" y="757" width="0.2" height="15.0" fill="rgb(208,39,12)" rx="2" ry="2" />
<text  x="711.07" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="21.9" y="581" width="0.2" height="15.0" fill="rgb(236,175,31)" rx="2" ry="2" />
<text  x="24.91" y="591.5" ></text>
</g>
<g >
<title>perf_simple_que (5,348 samples, 99.96%)</title><rect x="10.0" y="949" width="1179.6" height="15.0" fill="rgb(220,223,27)" rx="2" ry="2" />
<text  x="13.00" y="959.5" >perf_simple_que</text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="1052.1" y="613" width="0.3" height="15.0" fill="rgb(205,9,44)" rx="2" ry="2" />
<text  x="1055.15" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.9" y="501" width="0.2" height="15.0" fill="rgb(250,160,21)" rx="2" ry="2" />
<text  x="52.92" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="326.9" y="661" width="0.3" height="15.0" fill="rgb(237,58,11)" rx="2" ry="2" />
<text  x="329.95" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="304.4" y="613" width="0.3" height="15.0" fill="rgb(252,208,4)" rx="2" ry="2" />
<text  x="307.45" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="215.8" y="517" width="0.2" height="15.0" fill="rgb(245,159,33)" rx="2" ry="2" />
<text  x="218.78" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="451.1" y="581" width="0.2" height="15.0" fill="rgb(226,1,41)" rx="2" ry="2" />
<text  x="454.12" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="32.5" y="597" width="0.4" height="15.0" fill="rgb(248,145,9)" rx="2" ry="2" />
<text  x="35.50" y="607.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (60 samples, 1.12%)</title><rect x="510.7" y="597" width="13.2" height="15.0" fill="rgb(211,198,14)" rx="2" ry="2" />
<text  x="513.67" y="607.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1036.9" y="549" width="0.7" height="15.0" fill="rgb(247,61,38)" rx="2" ry="2" />
<text  x="1039.93" y="559.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="244.5" y="373" width="0.2" height="15.0" fill="rgb(236,14,1)" rx="2" ry="2" />
<text  x="247.46" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (2 samples, 0.04%)</title><rect x="371.9" y="485" width="0.5" height="15.0" fill="rgb(249,115,36)" rx="2" ry="2" />
<text  x="374.94" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="437" width="0.2" height="15.0" fill="rgb(247,27,26)" rx="2" ry="2" />
<text  x="104.97" y="447.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="871.5" y="629" width="0.2" height="15.0" fill="rgb(214,134,43)" rx="2" ry="2" />
<text  x="874.51" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="947.2" y="661" width="0.2" height="15.0" fill="rgb(234,212,8)" rx="2" ry="2" />
<text  x="950.16" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (27 samples, 0.50%)</title><rect x="1130.0" y="565" width="6.0" height="15.0" fill="rgb(211,166,48)" rx="2" ry="2" />
<text  x="1133.01" y="575.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="598.7" y="597" width="1.3" height="15.0" fill="rgb(215,43,49)" rx="2" ry="2" />
<text  x="601.68" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="806.7" y="469" width="0.6" height="15.0" fill="rgb(222,9,0)" rx="2" ry="2" />
<text  x="809.67" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="46.8" y="405" width="0.3" height="15.0" fill="rgb(210,6,52)" rx="2" ry="2" />
<text  x="49.83" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="667.7" y="613" width="0.2" height="15.0" fill="rgb(236,60,31)" rx="2" ry="2" />
<text  x="670.71" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (22 samples, 0.41%)</title><rect x="208.3" y="533" width="4.8" height="15.0" fill="rgb(217,173,10)" rx="2" ry="2" />
<text  x="211.28" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="909.9" y="629" width="0.6" height="15.0" fill="rgb(253,131,8)" rx="2" ry="2" />
<text  x="912.89" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="61.8" y="549" width="0.3" height="15.0" fill="rgb(235,138,38)" rx="2" ry="2" />
<text  x="64.83" y="559.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (6 samples, 0.11%)</title><rect x="765.9" y="693" width="1.3" height="15.0" fill="rgb(217,96,28)" rx="2" ry="2" />
<text  x="768.86" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (2 samples, 0.04%)</title><rect x="75.7" y="661" width="0.5" height="15.0" fill="rgb(252,140,9)" rx="2" ry="2" />
<text  x="78.73" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.09%)</title><rect x="970.5" y="613" width="1.1" height="15.0" fill="rgb(214,99,30)" rx="2" ry="2" />
<text  x="973.54" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (4 samples, 0.07%)</title><rect x="766.3" y="677" width="0.9" height="15.0" fill="rgb(225,198,34)" rx="2" ry="2" />
<text  x="769.30" y="687.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (4 samples, 0.07%)</title><rect x="243.6" y="357" width="0.9" height="15.0" fill="rgb(249,209,37)" rx="2" ry="2" />
<text  x="246.57" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="49.7" y="613" width="0.4" height="15.0" fill="rgb(228,98,44)" rx="2" ry="2" />
<text  x="52.70" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::single_column_relation&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="51.0" y="613" width="0.2" height="15.0" fill="rgb(234,120,36)" rx="2" ry="2" />
<text  x="54.02" y="623.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="75.9" y="565" width="0.3" height="15.0" fill="rgb(240,174,16)" rx="2" ry="2" />
<text  x="78.95" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="36.0" y="565" width="0.2" height="15.0" fill="rgb(219,96,33)" rx="2" ry="2" />
<text  x="39.03" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="916.1" y="661" width="0.4" height="15.0" fill="rgb(216,21,18)" rx="2" ry="2" />
<text  x="919.06" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1130.9" y="453" width="0.2" height="15.0" fill="rgb(243,164,38)" rx="2" ry="2" />
<text  x="1133.89" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.21%)</title><rect x="702.1" y="757" width="2.4" height="15.0" fill="rgb(215,213,24)" rx="2" ry="2" />
<text  x="705.12" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="50.1" y="597" width="0.5" height="15.0" fill="rgb(205,202,37)" rx="2" ry="2" />
<text  x="53.14" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="17.7" y="821" width="0.2" height="15.0" fill="rgb(216,228,1)" rx="2" ry="2" />
<text  x="20.72" y="831.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="77.9" y="869" width="0.3" height="15.0" fill="rgb(249,98,15)" rx="2" ry="2" />
<text  x="80.93" y="879.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="18.8" y="789" width="0.2" height="15.0" fill="rgb(223,138,53)" rx="2" ry="2" />
<text  x="21.82" y="799.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="46.0" y="533" width="0.2" height="15.0" fill="rgb(231,197,40)" rx="2" ry="2" />
<text  x="48.95" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="35.6" y="501" width="0.2" height="15.0" fill="rgb(220,114,19)" rx="2" ry="2" />
<text  x="38.59" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="730.8" y="645" width="0.2" height="15.0" fill="rgb(229,35,8)" rx="2" ry="2" />
<text  x="733.79" y="655.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (704 samples, 13.16%)</title><rect x="172.6" y="693" width="155.2" height="15.0" fill="rgb(237,165,47)" rx="2" ry="2" />
<text  x="175.55" y="703.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="953.8" y="645" width="0.2" height="15.0" fill="rgb(208,2,35)" rx="2" ry="2" />
<text  x="956.78" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="1143.9" y="789" width="0.2" height="15.0" fill="rgb(242,129,40)" rx="2" ry="2" />
<text  x="1146.90" y="799.5" ></text>
</g>
<g >
<title>sstables::file_writer::make (1 samples, 0.02%)</title><rect x="707.4" y="789" width="0.2" height="15.0" fill="rgb(237,172,47)" rx="2" ry="2" />
<text  x="710.41" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (2 samples, 0.04%)</title><rect x="42.2" y="533" width="0.4" height="15.0" fill="rgb(210,131,47)" rx="2" ry="2" />
<text  x="45.20" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="221.3" y="501" width="0.2" height="15.0" fill="rgb(222,190,49)" rx="2" ry="2" />
<text  x="224.30" y="511.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%)</title><rect x="19.0" y="741" width="0.7" height="15.0" fill="rgb(230,205,20)" rx="2" ry="2" />
<text  x="22.04" y="751.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (4 samples, 0.07%)</title><rect x="35.6" y="661" width="0.9" height="15.0" fill="rgb(206,211,31)" rx="2" ry="2" />
<text  x="38.59" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.4" y="629" width="0.2" height="15.0" fill="rgb(249,138,34)" rx="2" ry="2" />
<text  x="25.35" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="572.2" y="613" width="0.2" height="15.0" fill="rgb(232,228,26)" rx="2" ry="2" />
<text  x="575.21" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="1105.5" y="709" width="0.7" height="15.0" fill="rgb(210,208,33)" rx="2" ry="2" />
<text  x="1108.53" y="719.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="24.8" y="565" width="0.2" height="15.0" fill="rgb(254,141,6)" rx="2" ry="2" />
<text  x="27.78" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="693.7" y="773" width="0.5" height="15.0" fill="rgb(241,195,37)" rx="2" ry="2" />
<text  x="696.74" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="34.7" y="517" width="0.7" height="15.0" fill="rgb(223,149,8)" rx="2" ry="2" />
<text  x="37.70" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (54 samples, 1.01%)</title><rect x="1012.9" y="533" width="11.9" height="15.0" fill="rgb(243,167,26)" rx="2" ry="2" />
<text  x="1015.89" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="907.5" y="661" width="0.6" height="15.0" fill="rgb(214,85,22)" rx="2" ry="2" />
<text  x="910.46" y="671.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (514 samples, 9.61%)</title><rect x="462.4" y="709" width="113.3" height="15.0" fill="rgb(224,185,21)" rx="2" ry="2" />
<text  x="465.37" y="719.5" >mutation_sourc..</text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="657.3" y="789" width="0.3" height="15.0" fill="rgb(220,50,20)" rx="2" ry="2" />
<text  x="660.35" y="799.5" ></text>
</g>
<g >
<title>__strlen_avx2 (5 samples, 0.09%)</title><rect x="1004.9" y="549" width="1.2" height="15.0" fill="rgb(243,211,26)" rx="2" ry="2" />
<text  x="1007.95" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="794.8" y="629" width="0.2" height="15.0" fill="rgb(235,97,34)" rx="2" ry="2" />
<text  x="797.76" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1088.5" y="693" width="0.5" height="15.0" fill="rgb(216,136,46)" rx="2" ry="2" />
<text  x="1091.54" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1138.4" y="773" width="0.2" height="15.0" fill="rgb(239,66,43)" rx="2" ry="2" />
<text  x="1141.39" y="783.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="667.7" y="741" width="0.2" height="15.0" fill="rgb(238,19,3)" rx="2" ry="2" />
<text  x="670.71" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="102.4" y="693" width="0.2" height="15.0" fill="rgb(210,107,21)" rx="2" ry="2" />
<text  x="105.41" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="1138.8" y="805" width="0.5" height="15.0" fill="rgb(233,213,37)" rx="2" ry="2" />
<text  x="1141.83" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::stats (7 samples, 0.13%)</title><rect x="538.5" y="549" width="1.5" height="15.0" fill="rgb(245,172,12)" rx="2" ry="2" />
<text  x="541.46" y="559.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (1 samples, 0.02%)</title><rect x="70.4" y="693" width="0.3" height="15.0" fill="rgb(213,46,48)" rx="2" ry="2" />
<text  x="73.43" y="703.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (13 samples, 0.24%)</title><rect x="856.5" y="725" width="2.9" height="15.0" fill="rgb(226,189,52)" rx="2" ry="2" />
<text  x="859.51" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="38.5" y="533" width="0.6" height="15.0" fill="rgb(224,223,8)" rx="2" ry="2" />
<text  x="41.45" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="905.5" y="581" width="0.4" height="15.0" fill="rgb(220,100,31)" rx="2" ry="2" />
<text  x="908.48" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (3 samples, 0.06%)</title><rect x="50.1" y="613" width="0.7" height="15.0" fill="rgb(233,212,13)" rx="2" ry="2" />
<text  x="53.14" y="623.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="763.0" y="565" width="0.2" height="15.0" fill="rgb(249,196,12)" rx="2" ry="2" />
<text  x="765.99" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="423.3" y="453" width="1.4" height="15.0" fill="rgb(245,18,7)" rx="2" ry="2" />
<text  x="426.33" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.09%)</title><rect x="94.0" y="725" width="1.1" height="15.0" fill="rgb(215,72,6)" rx="2" ry="2" />
<text  x="97.03" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.07%)</title><rect x="1037.6" y="549" width="0.9" height="15.0" fill="rgb(233,124,46)" rx="2" ry="2" />
<text  x="1040.59" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.07%)</title><rect x="676.8" y="709" width="0.8" height="15.0" fill="rgb(220,138,18)" rx="2" ry="2" />
<text  x="679.76" y="719.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (9 samples, 0.17%)</title><rect x="835.1" y="677" width="2.0" height="15.0" fill="rgb(237,227,39)" rx="2" ry="2" />
<text  x="838.12" y="687.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="290.1" y="469" width="0.2" height="15.0" fill="rgb(215,16,15)" rx="2" ry="2" />
<text  x="293.11" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="862.2" y="741" width="0.7" height="15.0" fill="rgb(249,66,13)" rx="2" ry="2" />
<text  x="865.25" y="751.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="707.4" y="437" width="0.2" height="15.0" fill="rgb(234,96,6)" rx="2" ry="2" />
<text  x="710.41" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (6 samples, 0.11%)</title><rect x="976.9" y="613" width="1.4" height="15.0" fill="rgb(218,204,32)" rx="2" ry="2" />
<text  x="979.94" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="724.6" y="709" width="0.2" height="15.0" fill="rgb(220,196,31)" rx="2" ry="2" />
<text  x="727.62" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (71 samples, 1.33%)</title><rect x="536.7" y="581" width="15.7" height="15.0" fill="rgb(243,31,23)" rx="2" ry="2" />
<text  x="539.70" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (9 samples, 0.17%)</title><rect x="1099.6" y="709" width="2.0" height="15.0" fill="rgb(211,22,15)" rx="2" ry="2" />
<text  x="1102.57" y="719.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_prepare_expr.cc (4 samples, 0.07%)</title><rect x="78.4" y="933" width="0.9" height="15.0" fill="rgb(236,153,49)" rx="2" ry="2" />
<text  x="81.37" y="943.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="77.7" y="789" width="0.2" height="15.0" fill="rgb(221,160,29)" rx="2" ry="2" />
<text  x="80.71" y="799.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1128.7" y="485" width="0.2" height="15.0" fill="rgb(253,229,12)" rx="2" ry="2" />
<text  x="1131.68" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="48.8" y="629" width="0.5" height="15.0" fill="rgb(238,145,52)" rx="2" ry="2" />
<text  x="51.82" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="941.2" y="629" width="0.7" height="15.0" fill="rgb(244,3,51)" rx="2" ry="2" />
<text  x="944.21" y="639.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="677" width="0.5" height="15.0" fill="rgb(213,89,41)" rx="2" ry="2" />
<text  x="710.63" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="945.6" y="645" width="0.2" height="15.0" fill="rgb(223,65,53)" rx="2" ry="2" />
<text  x="948.62" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="67.6" y="613" width="0.2" height="15.0" fill="rgb(208,220,47)" rx="2" ry="2" />
<text  x="70.57" y="623.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="15.7" y="837" width="0.3" height="15.0" fill="rgb(207,117,7)" rx="2" ry="2" />
<text  x="18.73" y="847.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (8 samples, 0.15%)</title><rect x="1111.5" y="693" width="1.7" height="15.0" fill="rgb(246,183,39)" rx="2" ry="2" />
<text  x="1114.48" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.07%)</title><rect x="614.1" y="661" width="0.9" height="15.0" fill="rgb(208,85,24)" rx="2" ry="2" />
<text  x="617.12" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="827.4" y="677" width="1.5" height="15.0" fill="rgb(232,190,17)" rx="2" ry="2" />
<text  x="830.40" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1048.2" y="613" width="0.2" height="15.0" fill="rgb(214,49,0)" rx="2" ry="2" />
<text  x="1051.18" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.32%)</title><rect x="91.4" y="773" width="3.7" height="15.0" fill="rgb(253,218,48)" rx="2" ry="2" />
<text  x="94.39" y="783.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%)</title><rect x="74.0" y="821" width="0.2" height="15.0" fill="rgb(249,51,38)" rx="2" ry="2" />
<text  x="76.96" y="831.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (4 samples, 0.07%)</title><rect x="649.0" y="725" width="0.8" height="15.0" fill="rgb(224,201,21)" rx="2" ry="2" />
<text  x="651.96" y="735.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="722.2" y="725" width="0.2" height="15.0" fill="rgb(215,29,45)" rx="2" ry="2" />
<text  x="725.19" y="735.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (2 samples, 0.04%)</title><rect x="101.3" y="549" width="0.5" height="15.0" fill="rgb(227,173,49)" rx="2" ry="2" />
<text  x="104.31" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="72.4" y="709" width="0.2" height="15.0" fill="rgb(206,23,39)" rx="2" ry="2" />
<text  x="75.42" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.07%)</title><rect x="1037.6" y="533" width="0.9" height="15.0" fill="rgb(219,188,27)" rx="2" ry="2" />
<text  x="1040.59" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (6 samples, 0.11%)</title><rect x="695.7" y="741" width="1.3" height="15.0" fill="rgb(245,221,52)" rx="2" ry="2" />
<text  x="698.72" y="751.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (1 samples, 0.02%)</title><rect x="1135.3" y="469" width="0.2" height="15.0" fill="rgb(254,156,5)" rx="2" ry="2" />
<text  x="1138.30" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="245" width="0.3" height="15.0" fill="rgb(221,113,12)" rx="2" ry="2" />
<text  x="104.53" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="485" width="0.5" height="15.0" fill="rgb(215,176,10)" rx="2" ry="2" />
<text  x="104.31" y="495.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::column_view&gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.4" y="501" width="0.2" height="15.0" fill="rgb(220,165,8)" rx="2" ry="2" />
<text  x="1126.39" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="42.4" y="485" width="0.2" height="15.0" fill="rgb(223,206,52)" rx="2" ry="2" />
<text  x="45.42" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="302.5" y="597" width="0.2" height="15.0" fill="rgb(242,48,9)" rx="2" ry="2" />
<text  x="305.46" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::recreate_current_row (1 samples, 0.02%)</title><rect x="17.1" y="837" width="0.2" height="15.0" fill="rgb(235,196,10)" rx="2" ry="2" />
<text  x="20.06" y="847.5" ></text>
</g>
<g >
<title>executor&lt;test_read (604 samples, 11.29%)</title><rect x="734.5" y="789" width="133.3" height="15.0" fill="rgb(238,99,39)" rx="2" ry="2" />
<text  x="737.54" y="799.5" >executor&lt;test_read</text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="103.7" y="757" width="0.3" height="15.0" fill="rgb(230,66,6)" rx="2" ry="2" />
<text  x="106.74" y="767.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1050.2" y="581" width="0.2" height="15.0" fill="rgb(205,58,28)" rx="2" ry="2" />
<text  x="1053.16" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="940.5" y="693" width="0.3" height="15.0" fill="rgb(244,114,11)" rx="2" ry="2" />
<text  x="943.55" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="730.8" y="789" width="0.2" height="15.0" fill="rgb(233,146,17)" rx="2" ry="2" />
<text  x="733.79" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="43.5" y="581" width="0.7" height="15.0" fill="rgb(236,68,50)" rx="2" ry="2" />
<text  x="46.53" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (2 samples, 0.04%)</title><rect x="19.7" y="725" width="0.4" height="15.0" fill="rgb(219,149,6)" rx="2" ry="2" />
<text  x="22.70" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.07%)</title><rect x="33.8" y="629" width="0.9" height="15.0" fill="rgb(219,170,19)" rx="2" ry="2" />
<text  x="36.82" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="39.3" y="501" width="0.3" height="15.0" fill="rgb(235,229,17)" rx="2" ry="2" />
<text  x="42.33" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="32.3" y="613" width="0.2" height="15.0" fill="rgb(235,169,17)" rx="2" ry="2" />
<text  x="35.28" y="623.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="18.6" y="773" width="0.2" height="15.0" fill="rgb(248,127,54)" rx="2" ry="2" />
<text  x="21.60" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="967.7" y="629" width="0.2" height="15.0" fill="rgb(252,136,30)" rx="2" ry="2" />
<text  x="970.67" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="273.6" y="501" width="0.2" height="15.0" fill="rgb(216,59,22)" rx="2" ry="2" />
<text  x="276.57" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="874.6" y="613" width="0.2" height="15.0" fill="rgb(210,126,37)" rx="2" ry="2" />
<text  x="877.60" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="36.0" y="437" width="0.2" height="15.0" fill="rgb(253,186,50)" rx="2" ry="2" />
<text  x="39.03" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="46.4" y="405" width="0.4" height="15.0" fill="rgb(206,62,53)" rx="2" ry="2" />
<text  x="49.39" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="46.2" y="453" width="0.6" height="15.0" fill="rgb(239,174,39)" rx="2" ry="2" />
<text  x="49.17" y="463.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1122.9" y="517" width="0.5" height="15.0" fill="rgb(207,49,23)" rx="2" ry="2" />
<text  x="1125.95" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="584.6" y="581" width="0.2" height="15.0" fill="rgb(246,116,52)" rx="2" ry="2" />
<text  x="587.56" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="533.4" y="581" width="0.7" height="15.0" fill="rgb(205,186,16)" rx="2" ry="2" />
<text  x="536.39" y="591.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="951.6" y="709" width="0.2" height="15.0" fill="rgb(229,126,40)" rx="2" ry="2" />
<text  x="954.57" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="531.0" y="597" width="0.2" height="15.0" fill="rgb(218,202,28)" rx="2" ry="2" />
<text  x="533.96" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.09%)</title><rect x="821.4" y="629" width="1.1" height="15.0" fill="rgb(214,172,28)" rx="2" ry="2" />
<text  x="824.44" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="37.8" y="469" width="0.4" height="15.0" fill="rgb(237,151,29)" rx="2" ry="2" />
<text  x="40.79" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="212.3" y="517" width="0.2" height="15.0" fill="rgb(225,61,4)" rx="2" ry="2" />
<text  x="215.25" y="527.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (2 samples, 0.04%)</title><rect x="913.4" y="693" width="0.5" height="15.0" fill="rgb(212,86,13)" rx="2" ry="2" />
<text  x="916.42" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%)</title><rect x="426.0" y="469" width="1.1" height="15.0" fill="rgb(227,202,2)" rx="2" ry="2" />
<text  x="428.98" y="479.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (29 samples, 0.54%)</title><rect x="1066.7" y="581" width="6.4" height="15.0" fill="rgb(238,115,37)" rx="2" ry="2" />
<text  x="1069.71" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (20 samples, 0.37%)</title><rect x="693.5" y="789" width="4.4" height="15.0" fill="rgb(207,30,37)" rx="2" ry="2" />
<text  x="696.52" y="799.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="876.1" y="613" width="0.3" height="15.0" fill="rgb(237,168,42)" rx="2" ry="2" />
<text  x="879.14" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="660.9" y="789" width="0.6" height="15.0" fill="rgb(254,149,49)" rx="2" ry="2" />
<text  x="663.87" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (3 samples, 0.06%)</title><rect x="295.4" y="517" width="0.7" height="15.0" fill="rgb(231,157,6)" rx="2" ry="2" />
<text  x="298.41" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="16.6" y="773" width="0.2" height="15.0" fill="rgb(251,115,29)" rx="2" ry="2" />
<text  x="19.62" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%)</title><rect x="16.4" y="853" width="0.2" height="15.0" fill="rgb(232,31,10)" rx="2" ry="2" />
<text  x="19.40" y="863.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="46.8" y="517" width="0.3" height="15.0" fill="rgb(213,111,2)" rx="2" ry="2" />
<text  x="49.83" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (2 samples, 0.04%)</title><rect x="60.9" y="597" width="0.5" height="15.0" fill="rgb(211,164,53)" rx="2" ry="2" />
<text  x="63.95" y="607.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="953.3" y="629" width="0.3" height="15.0" fill="rgb(217,33,43)" rx="2" ry="2" />
<text  x="956.34" y="639.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="76.4" y="581" width="0.2" height="15.0" fill="rgb(220,62,43)" rx="2" ry="2" />
<text  x="79.39" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="654.5" y="773" width="0.2" height="15.0" fill="rgb(230,108,19)" rx="2" ry="2" />
<text  x="657.48" y="783.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="871.1" y="789" width="0.2" height="15.0" fill="rgb(221,95,50)" rx="2" ry="2" />
<text  x="874.07" y="799.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="825.6" y="613" width="0.3" height="15.0" fill="rgb(215,44,27)" rx="2" ry="2" />
<text  x="828.63" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.02%)</title><rect x="23.5" y="501" width="0.2" height="15.0" fill="rgb(237,104,50)" rx="2" ry="2" />
<text  x="26.45" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="38.2" y="549" width="0.3" height="15.0" fill="rgb(241,49,34)" rx="2" ry="2" />
<text  x="41.23" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1139.3" y="805" width="0.2" height="15.0" fill="rgb(245,178,38)" rx="2" ry="2" />
<text  x="1142.27" y="815.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (4 samples, 0.07%)</title><rect x="59.6" y="693" width="0.9" height="15.0" fill="rgb(205,29,25)" rx="2" ry="2" />
<text  x="62.63" y="703.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%)</title><rect x="16.0" y="853" width="0.4" height="15.0" fill="rgb(214,74,45)" rx="2" ry="2" />
<text  x="18.96" y="863.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="437.0" y="501" width="0.2" height="15.0" fill="rgb(245,84,25)" rx="2" ry="2" />
<text  x="440.01" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="822.3" y="613" width="0.2" height="15.0" fill="rgb(230,23,51)" rx="2" ry="2" />
<text  x="825.33" y="623.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="906.8" y="613" width="0.2" height="15.0" fill="rgb(221,218,40)" rx="2" ry="2" />
<text  x="909.80" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (1 samples, 0.02%)</title><rect x="1167.9" y="805" width="0.3" height="15.0" fill="rgb(216,14,29)" rx="2" ry="2" />
<text  x="1170.94" y="815.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="77.1" y="693" width="0.6" height="15.0" fill="rgb(220,118,5)" rx="2" ry="2" />
<text  x="80.05" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1054.8" y="645" width="0.2" height="15.0" fill="rgb(215,197,22)" rx="2" ry="2" />
<text  x="1057.80" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (591 samples, 11.05%)</title><rect x="329.2" y="709" width="130.3" height="15.0" fill="rgb(221,34,40)" rx="2" ry="2" />
<text  x="332.15" y="719.5" >seastar::future&lt;..</text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (2 samples, 0.04%)</title><rect x="18.6" y="821" width="0.4" height="15.0" fill="rgb(251,136,48)" rx="2" ry="2" />
<text  x="21.60" y="831.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.04%)</title><rect x="1189.6" y="933" width="0.4" height="15.0" fill="rgb(244,197,33)" rx="2" ry="2" />
<text  x="1192.56" y="943.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="469" width="0.5" height="15.0" fill="rgb(252,184,45)" rx="2" ry="2" />
<text  x="104.31" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="265.2" y="421" width="0.2" height="15.0" fill="rgb(247,19,53)" rx="2" ry="2" />
<text  x="268.19" y="431.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_error (1 samples, 0.02%)</title><rect x="25.0" y="581" width="0.2" height="15.0" fill="rgb(246,95,48)" rx="2" ry="2" />
<text  x="28.00" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="1167.1" y="645" width="0.2" height="15.0" fill="rgb(248,60,18)" rx="2" ry="2" />
<text  x="1170.06" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%)</title><rect x="870.0" y="629" width="0.6" height="15.0" fill="rgb(242,93,8)" rx="2" ry="2" />
<text  x="872.97" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1036.7" y="549" width="0.2" height="15.0" fill="rgb(254,147,29)" rx="2" ry="2" />
<text  x="1039.71" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="793.7" y="581" width="0.4" height="15.0" fill="rgb(246,94,54)" rx="2" ry="2" />
<text  x="796.65" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (132 samples, 2.47%)</title><rect x="590.1" y="725" width="29.1" height="15.0" fill="rgb(243,69,37)" rx="2" ry="2" />
<text  x="593.07" y="735.5" >st..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="370.6" y="485" width="0.2" height="15.0" fill="rgb(208,127,24)" rx="2" ry="2" />
<text  x="373.62" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1163.8" y="741" width="0.2" height="15.0" fill="rgb(219,201,10)" rx="2" ry="2" />
<text  x="1166.75" y="751.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (161 samples, 3.01%)</title><rect x="19.7" y="773" width="35.5" height="15.0" fill="rgb(250,182,5)" rx="2" ry="2" />
<text  x="22.70" y="783.5" >cql..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="41.5" y="565" width="0.3" height="15.0" fill="rgb(254,14,22)" rx="2" ry="2" />
<text  x="44.54" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="870.0" y="805" width="0.6" height="15.0" fill="rgb(217,188,37)" rx="2" ry="2" />
<text  x="872.97" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="68.7" y="693" width="0.2" height="15.0" fill="rgb(237,197,13)" rx="2" ry="2" />
<text  x="71.67" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%)</title><rect x="636.6" y="741" width="0.5" height="15.0" fill="rgb(242,152,25)" rx="2" ry="2" />
<text  x="639.61" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_range_initialize&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; const*&gt; (1 samples, 0.02%)</title><rect x="60.1" y="629" width="0.2" height="15.0" fill="rgb(213,137,46)" rx="2" ry="2" />
<text  x="63.07" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%)</title><rect x="985.3" y="581" width="0.7" height="15.0" fill="rgb(234,130,42)" rx="2" ry="2" />
<text  x="988.32" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%)</title><rect x="778.0" y="709" width="0.4" height="15.0" fill="rgb(242,203,29)" rx="2" ry="2" />
<text  x="780.99" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="677.0" y="693" width="0.6" height="15.0" fill="rgb(206,11,46)" rx="2" ry="2" />
<text  x="679.98" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="750.0" y="725" width="0.2" height="15.0" fill="rgb(225,22,36)" rx="2" ry="2" />
<text  x="752.98" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="75.1" y="693" width="0.2" height="15.0" fill="rgb(233,196,44)" rx="2" ry="2" />
<text  x="78.07" y="703.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%)</title><rect x="32.1" y="581" width="0.2" height="15.0" fill="rgb(240,154,46)" rx="2" ry="2" />
<text  x="35.06" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="969.4" y="629" width="0.3" height="15.0" fill="rgb(205,59,52)" rx="2" ry="2" />
<text  x="972.44" y="639.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%)</title><rect x="77.1" y="645" width="0.6" height="15.0" fill="rgb(233,93,36)" rx="2" ry="2" />
<text  x="80.05" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="50.6" y="581" width="0.2" height="15.0" fill="rgb(232,2,33)" rx="2" ry="2" />
<text  x="53.58" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="102.6" y="629" width="0.3" height="15.0" fill="rgb(224,26,50)" rx="2" ry="2" />
<text  x="105.64" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%)</title><rect x="296.5" y="581" width="0.2" height="15.0" fill="rgb(206,86,33)" rx="2" ry="2" />
<text  x="299.51" y="591.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="562.3" y="645" width="0.4" height="15.0" fill="rgb(227,129,24)" rx="2" ry="2" />
<text  x="565.28" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="37.8" y="533" width="0.4" height="15.0" fill="rgb(251,88,26)" rx="2" ry="2" />
<text  x="40.79" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="752.0" y="693" width="0.6" height="15.0" fill="rgb(205,36,34)" rx="2" ry="2" />
<text  x="754.97" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (27 samples, 0.50%)</title><rect x="771.8" y="677" width="6.0" height="15.0" fill="rgb(239,225,52)" rx="2" ry="2" />
<text  x="774.82" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="39.3" y="469" width="0.3" height="15.0" fill="rgb(214,159,46)" rx="2" ry="2" />
<text  x="42.33" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="947.8" y="693" width="0.2" height="15.0" fill="rgb(210,47,22)" rx="2" ry="2" />
<text  x="950.82" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (7 samples, 0.13%)</title><rect x="872.8" y="693" width="1.6" height="15.0" fill="rgb(222,60,23)" rx="2" ry="2" />
<text  x="875.83" y="703.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (9 samples, 0.17%)</title><rect x="348.8" y="533" width="2.0" height="15.0" fill="rgb(207,15,53)" rx="2" ry="2" />
<text  x="351.78" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.11%)</title><rect x="572.9" y="645" width="1.3" height="15.0" fill="rgb(247,187,38)" rx="2" ry="2" />
<text  x="575.87" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="561.6" y="629" width="0.2" height="15.0" fill="rgb(232,202,28)" rx="2" ry="2" />
<text  x="564.62" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="859.2" y="661" width="0.2" height="15.0" fill="rgb(236,171,44)" rx="2" ry="2" />
<text  x="862.16" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="40.2" y="501" width="0.2" height="15.0" fill="rgb(207,121,24)" rx="2" ry="2" />
<text  x="43.22" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="77.9" y="885" width="0.3" height="15.0" fill="rgb(244,121,24)" rx="2" ry="2" />
<text  x="80.93" y="895.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="299.6" y="581" width="0.4" height="15.0" fill="rgb(242,169,8)" rx="2" ry="2" />
<text  x="302.60" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (5 samples, 0.09%)</title><rect x="871.5" y="693" width="1.1" height="15.0" fill="rgb(208,208,28)" rx="2" ry="2" />
<text  x="874.51" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="677.2" y="677" width="0.2" height="15.0" fill="rgb(244,115,1)" rx="2" ry="2" />
<text  x="680.20" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="873.7" y="661" width="0.5" height="15.0" fill="rgb(210,39,19)" rx="2" ry="2" />
<text  x="876.72" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%)</title><rect x="602.2" y="581" width="0.7" height="15.0" fill="rgb(238,211,42)" rx="2" ry="2" />
<text  x="605.21" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (2 samples, 0.04%)</title><rect x="850.3" y="725" width="0.5" height="15.0" fill="rgb(236,206,28)" rx="2" ry="2" />
<text  x="853.34" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="879.5" y="581" width="0.4" height="15.0" fill="rgb(233,44,50)" rx="2" ry="2" />
<text  x="882.45" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="608.2" y="661" width="0.4" height="15.0" fill="rgb(231,145,48)" rx="2" ry="2" />
<text  x="611.16" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="586.5" y="725" width="0.3" height="15.0" fill="rgb(242,23,22)" rx="2" ry="2" />
<text  x="589.55" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%)</title><rect x="262.3" y="405" width="0.7" height="15.0" fill="rgb(243,48,8)" rx="2" ry="2" />
<text  x="265.32" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%)</title><rect x="1133.8" y="469" width="0.6" height="15.0" fill="rgb(236,64,40)" rx="2" ry="2" />
<text  x="1136.76" y="479.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%)</title><rect x="15.5" y="709" width="0.2" height="15.0" fill="rgb(206,94,16)" rx="2" ry="2" />
<text  x="18.51" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="52.8" y="677" width="0.2" height="15.0" fill="rgb(241,95,4)" rx="2" ry="2" />
<text  x="55.79" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1023.5" y="501" width="0.2" height="15.0" fill="rgb(225,216,11)" rx="2" ry="2" />
<text  x="1026.48" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1025.9" y="501" width="2.0" height="15.0" fill="rgb(215,175,46)" rx="2" ry="2" />
<text  x="1028.90" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="325.2" y="613" width="0.2" height="15.0" fill="rgb(226,41,30)" rx="2" ry="2" />
<text  x="328.18" y="623.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (2 samples, 0.04%)</title><rect x="447.6" y="533" width="0.4" height="15.0" fill="rgb(254,184,37)" rx="2" ry="2" />
<text  x="450.59" y="543.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (159 samples, 2.97%)</title><rect x="787.7" y="661" width="35.1" height="15.0" fill="rgb(225,217,11)" rx="2" ry="2" />
<text  x="790.70" y="671.5" >se..</text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1119.0" y="469" width="0.2" height="15.0" fill="rgb(226,183,50)" rx="2" ry="2" />
<text  x="1121.98" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="482.4" y="597" width="0.5" height="15.0" fill="rgb(226,163,46)" rx="2" ry="2" />
<text  x="485.44" y="607.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="918.3" y="645" width="0.4" height="15.0" fill="rgb(206,191,37)" rx="2" ry="2" />
<text  x="921.27" y="655.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="700.8" y="757" width="0.7" height="15.0" fill="rgb(232,95,20)" rx="2" ry="2" />
<text  x="703.80" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="63.2" y="645" width="0.2" height="15.0" fill="rgb(206,26,9)" rx="2" ry="2" />
<text  x="66.16" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (618 samples, 11.55%)</title><rect x="177.8" y="661" width="136.4" height="15.0" fill="rgb(242,196,47)" rx="2" ry="2" />
<text  x="180.85" y="671.5" >mutation_fragment..</text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="17.3" y="757" width="0.2" height="15.0" fill="rgb(206,134,45)" rx="2" ry="2" />
<text  x="20.28" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="22.1" y="597" width="0.3" height="15.0" fill="rgb(221,179,18)" rx="2" ry="2" />
<text  x="25.13" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="681.4" y="741" width="0.2" height="15.0" fill="rgb(238,137,54)" rx="2" ry="2" />
<text  x="684.39" y="751.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (2 samples, 0.04%)</title><rect x="831.1" y="629" width="0.5" height="15.0" fill="rgb(235,184,33)" rx="2" ry="2" />
<text  x="834.15" y="639.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="581" width="0.5" height="15.0" fill="rgb(250,176,0)" rx="2" ry="2" />
<text  x="104.31" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="654.7" y="773" width="0.2" height="15.0" fill="rgb(252,85,9)" rx="2" ry="2" />
<text  x="657.70" y="783.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1025.9" y="517" width="2.0" height="15.0" fill="rgb(250,54,41)" rx="2" ry="2" />
<text  x="1028.90" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (20 samples, 0.37%)</title><rect x="981.6" y="629" width="4.4" height="15.0" fill="rgb(218,43,35)" rx="2" ry="2" />
<text  x="984.57" y="639.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.11%)</title><rect x="325.4" y="613" width="1.3" height="15.0" fill="rgb(246,115,53)" rx="2" ry="2" />
<text  x="328.40" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.2" y="405" width="0.2" height="15.0" fill="rgb(218,61,29)" rx="2" ry="2" />
<text  x="49.17" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="70.0" y="725" width="0.2" height="15.0" fill="rgb(253,68,8)" rx="2" ry="2" />
<text  x="72.99" y="735.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (3 samples, 0.06%)</title><rect x="374.4" y="485" width="0.6" height="15.0" fill="rgb(218,161,49)" rx="2" ry="2" />
<text  x="377.37" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.07%)</title><rect x="685.6" y="789" width="0.9" height="15.0" fill="rgb(222,140,22)" rx="2" ry="2" />
<text  x="688.58" y="799.5" ></text>
</g>
<g >
<title>auth::get_permissions (1 samples, 0.02%)</title><rect x="791.9" y="629" width="0.2" height="15.0" fill="rgb(208,33,18)" rx="2" ry="2" />
<text  x="794.89" y="639.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (2 samples, 0.04%)</title><rect x="877.9" y="597" width="0.4" height="15.0" fill="rgb(231,118,46)" rx="2" ry="2" />
<text  x="880.91" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.07%)</title><rect x="33.8" y="661" width="0.9" height="15.0" fill="rgb(222,117,34)" rx="2" ry="2" />
<text  x="36.82" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.11%)</title><rect x="1006.1" y="533" width="1.3" height="15.0" fill="rgb(236,224,54)" rx="2" ry="2" />
<text  x="1009.05" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="451.3" y="565" width="0.5" height="15.0" fill="rgb(245,181,54)" rx="2" ry="2" />
<text  x="454.34" y="575.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="414.9" y="485" width="0.3" height="15.0" fill="rgb(231,20,5)" rx="2" ry="2" />
<text  x="417.95" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (31 samples, 0.58%)</title><rect x="439.7" y="533" width="6.8" height="15.0" fill="rgb(233,121,7)" rx="2" ry="2" />
<text  x="442.65" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="987.1" y="629" width="0.2" height="15.0" fill="rgb(251,147,34)" rx="2" ry="2" />
<text  x="990.08" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="991.3" y="597" width="0.2" height="15.0" fill="rgb(206,176,49)" rx="2" ry="2" />
<text  x="994.27" y="607.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (13 samples, 0.24%)</title><rect x="69.8" y="773" width="2.8" height="15.0" fill="rgb(253,135,19)" rx="2" ry="2" />
<text  x="72.77" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.22%)</title><rect x="823.9" y="645" width="2.6" height="15.0" fill="rgb(209,210,39)" rx="2" ry="2" />
<text  x="826.87" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%)</title><rect x="272.5" y="437" width="0.4" height="15.0" fill="rgb(242,173,16)" rx="2" ry="2" />
<text  x="275.47" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (304 samples, 5.68%)</title><rect x="975.0" y="661" width="67.0" height="15.0" fill="rgb(232,111,44)" rx="2" ry="2" />
<text  x="977.95" y="671.5" >service..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="69.3" y="661" width="0.3" height="15.0" fill="rgb(237,124,29)" rx="2" ry="2" />
<text  x="72.33" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="854.3" y="661" width="0.2" height="15.0" fill="rgb(207,64,6)" rx="2" ry="2" />
<text  x="857.31" y="671.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="67.6" y="629" width="0.2" height="15.0" fill="rgb(206,11,46)" rx="2" ry="2" />
<text  x="70.57" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.07%)</title><rect x="36.7" y="629" width="0.9" height="15.0" fill="rgb(220,141,13)" rx="2" ry="2" />
<text  x="39.69" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="47.3" y="421" width="0.4" height="15.0" fill="rgb(224,68,11)" rx="2" ry="2" />
<text  x="50.27" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="690.7" y="789" width="0.4" height="15.0" fill="rgb(249,192,32)" rx="2" ry="2" />
<text  x="693.65" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (11 samples, 0.21%)</title><rect x="654.9" y="789" width="2.4" height="15.0" fill="rgb(230,161,54)" rx="2" ry="2" />
<text  x="657.92" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (31 samples, 0.58%)</title><rect x="598.2" y="613" width="6.9" height="15.0" fill="rgb(237,110,3)" rx="2" ry="2" />
<text  x="601.24" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1138.4" y="789" width="0.2" height="15.0" fill="rgb(247,180,47)" rx="2" ry="2" />
<text  x="1141.39" y="799.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="958.6" y="693" width="0.3" height="15.0" fill="rgb(234,120,18)" rx="2" ry="2" />
<text  x="961.63" y="703.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (5 samples, 0.09%)</title><rect x="30.1" y="549" width="1.1" height="15.0" fill="rgb(209,174,42)" rx="2" ry="2" />
<text  x="33.07" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="40.9" y="549" width="0.4" height="15.0" fill="rgb(221,228,0)" rx="2" ry="2" />
<text  x="43.88" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, unsigned long&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1125.8" y="581" width="0.2" height="15.0" fill="rgb(211,226,14)" rx="2" ry="2" />
<text  x="1128.82" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="102.0" y="565" width="0.4" height="15.0" fill="rgb(237,203,52)" rx="2" ry="2" />
<text  x="104.97" y="575.5" ></text>
</g>
<g >
<title>[unknown] (310 samples, 5.79%)</title><rect x="10.0" y="933" width="68.4" height="15.0" fill="rgb(228,200,26)" rx="2" ry="2" />
<text  x="13.00" y="943.5" >[unknown]</text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="103.3" y="565" width="0.2" height="15.0" fill="rgb(245,226,53)" rx="2" ry="2" />
<text  x="106.30" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.7" y="549" width="0.2" height="15.0" fill="rgb(205,9,42)" rx="2" ry="2" />
<text  x="670.71" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.7" y="725" width="0.2" height="15.0" fill="rgb(207,82,19)" rx="2" ry="2" />
<text  x="142.69" y="735.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="15.5" y="693" width="0.2" height="15.0" fill="rgb(217,119,24)" rx="2" ry="2" />
<text  x="18.51" y="703.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="100.9" y="789" width="0.2" height="15.0" fill="rgb(251,62,53)" rx="2" ry="2" />
<text  x="103.87" y="799.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (8 samples, 0.15%)</title><rect x="1014.9" y="501" width="1.7" height="15.0" fill="rgb(222,186,4)" rx="2" ry="2" />
<text  x="1017.87" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1037.4" y="517" width="0.2" height="15.0" fill="rgb(252,143,0)" rx="2" ry="2" />
<text  x="1040.37" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="40.0" y="613" width="0.4" height="15.0" fill="rgb(251,13,28)" rx="2" ry="2" />
<text  x="43.00" y="623.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%)</title><rect x="74.6" y="693" width="0.2" height="15.0" fill="rgb(219,113,23)" rx="2" ry="2" />
<text  x="77.62" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="617.2" y="693" width="0.2" height="15.0" fill="rgb(253,13,37)" rx="2" ry="2" />
<text  x="620.20" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="499.4" y="613" width="0.7" height="15.0" fill="rgb(225,222,33)" rx="2" ry="2" />
<text  x="502.42" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%)</title><rect x="467.2" y="645" width="0.2" height="15.0" fill="rgb(207,22,13)" rx="2" ry="2" />
<text  x="470.22" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator (1 samples, 0.02%)</title><rect x="17.5" y="501" width="0.2" height="15.0" fill="rgb(213,147,48)" rx="2" ry="2" />
<text  x="20.50" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="23.9" y="533" width="0.2" height="15.0" fill="rgb(208,137,50)" rx="2" ry="2" />
<text  x="26.90" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="63.2" y="629" width="0.2" height="15.0" fill="rgb(230,14,3)" rx="2" ry="2" />
<text  x="66.16" y="639.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="282.8" y="549" width="0.5" height="15.0" fill="rgb(231,37,47)" rx="2" ry="2" />
<text  x="285.83" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.1" y="581" width="0.3" height="15.0" fill="rgb(250,13,22)" rx="2" ry="2" />
<text  x="25.13" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="878.8" y="549" width="0.7" height="15.0" fill="rgb(219,18,38)" rx="2" ry="2" />
<text  x="881.79" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1127.6" y="565" width="0.2" height="15.0" fill="rgb(248,93,7)" rx="2" ry="2" />
<text  x="1130.58" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%)</title><rect x="432.4" y="533" width="0.4" height="15.0" fill="rgb(239,106,8)" rx="2" ry="2" />
<text  x="435.37" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="866.0" y="741" width="0.4" height="15.0" fill="rgb(221,219,17)" rx="2" ry="2" />
<text  x="869.00" y="751.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (3 samples, 0.06%)</title><rect x="1040.0" y="597" width="0.7" height="15.0" fill="rgb(241,81,2)" rx="2" ry="2" />
<text  x="1043.02" y="607.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="954.7" y="709" width="2.4" height="15.0" fill="rgb(206,137,50)" rx="2" ry="2" />
<text  x="957.66" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.07%)</title><rect x="1152.3" y="661" width="0.9" height="15.0" fill="rgb(216,39,17)" rx="2" ry="2" />
<text  x="1155.28" y="671.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (6 samples, 0.11%)</title><rect x="498.8" y="629" width="1.3" height="15.0" fill="rgb(239,162,46)" rx="2" ry="2" />
<text  x="501.76" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;partition [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::operator= (1 samples, 0.02%)</title><rect x="101.1" y="629" width="0.2" height="15.0" fill="rgb(245,155,27)" rx="2" ry="2" />
<text  x="104.09" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="679.2" y="741" width="0.2" height="15.0" fill="rgb(234,44,11)" rx="2" ry="2" />
<text  x="682.18" y="751.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1029.7" y="533" width="0.2" height="15.0" fill="rgb(238,226,34)" rx="2" ry="2" />
<text  x="1032.65" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="897.1" y="677" width="0.2" height="15.0" fill="rgb(215,19,15)" rx="2" ry="2" />
<text  x="900.10" y="687.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (12 samples, 0.22%)</title><rect x="760.8" y="613" width="2.6" height="15.0" fill="rgb(238,161,53)" rx="2" ry="2" />
<text  x="763.79" y="623.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%)</title><rect x="1054.4" y="645" width="0.2" height="15.0" fill="rgb(249,20,35)" rx="2" ry="2" />
<text  x="1057.36" y="655.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (8 samples, 0.15%)</title><rect x="278.9" y="533" width="1.7" height="15.0" fill="rgb(221,72,20)" rx="2" ry="2" />
<text  x="281.86" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (4 samples, 0.07%)</title><rect x="1027.9" y="517" width="0.9" height="15.0" fill="rgb(228,39,9)" rx="2" ry="2" />
<text  x="1030.89" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="62.3" y="613" width="0.2" height="15.0" fill="rgb(235,27,54)" rx="2" ry="2" />
<text  x="65.27" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (7 samples, 0.13%)</title><rect x="300.7" y="581" width="1.5" height="15.0" fill="rgb(210,133,54)" rx="2" ry="2" />
<text  x="303.70" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="102.4" y="757" width="0.2" height="15.0" fill="rgb(230,106,39)" rx="2" ry="2" />
<text  x="105.41" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="733.0" y="805" width="0.2" height="15.0" fill="rgb(248,211,2)" rx="2" ry="2" />
<text  x="736.00" y="815.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3 samples, 0.06%)</title><rect x="870.0" y="693" width="0.6" height="15.0" fill="rgb(228,41,0)" rx="2" ry="2" />
<text  x="872.97" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (11 samples, 0.21%)</title><rect x="702.1" y="773" width="2.4" height="15.0" fill="rgb(206,166,26)" rx="2" ry="2" />
<text  x="705.12" y="783.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%)</title><rect x="863.3" y="773" width="0.3" height="15.0" fill="rgb(246,61,47)" rx="2" ry="2" />
<text  x="866.35" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="38.5" y="581" width="0.6" height="15.0" fill="rgb(228,175,6)" rx="2" ry="2" />
<text  x="41.45" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="134.6" y="757" width="0.2" height="15.0" fill="rgb(233,201,5)" rx="2" ry="2" />
<text  x="137.62" y="767.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="716.9" y="789" width="0.4" height="15.0" fill="rgb(231,13,21)" rx="2" ry="2" />
<text  x="719.90" y="799.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (1 samples, 0.02%)</title><rect x="708.3" y="773" width="0.2" height="15.0" fill="rgb(224,125,8)" rx="2" ry="2" />
<text  x="711.30" y="783.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="1053.0" y="645" width="0.5" height="15.0" fill="rgb(220,135,1)" rx="2" ry="2" />
<text  x="1056.03" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="62.7" y="645" width="0.2" height="15.0" fill="rgb(223,165,50)" rx="2" ry="2" />
<text  x="65.71" y="655.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="824.1" y="629" width="0.2" height="15.0" fill="rgb(252,46,2)" rx="2" ry="2" />
<text  x="827.09" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%)</title><rect x="743.8" y="629" width="0.7" height="15.0" fill="rgb(245,123,37)" rx="2" ry="2" />
<text  x="746.81" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.07%)</title><rect x="956.2" y="677" width="0.9" height="15.0" fill="rgb(252,163,15)" rx="2" ry="2" />
<text  x="959.21" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (13 samples, 0.24%)</title><rect x="581.9" y="677" width="2.9" height="15.0" fill="rgb(215,48,33)" rx="2" ry="2" />
<text  x="584.91" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.0" y="501" width="0.2" height="15.0" fill="rgb(222,47,28)" rx="2" ry="2" />
<text  x="43.00" y="511.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="102.9" y="677" width="0.2" height="15.0" fill="rgb(209,130,38)" rx="2" ry="2" />
<text  x="105.86" y="687.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="75.3" y="757" width="1.5" height="15.0" fill="rgb(206,169,53)" rx="2" ry="2" />
<text  x="78.29" y="767.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="25.2" y="565" width="0.2" height="15.0" fill="rgb(236,115,34)" rx="2" ry="2" />
<text  x="28.22" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="707.4" y="597" width="0.2" height="15.0" fill="rgb(218,156,53)" rx="2" ry="2" />
<text  x="710.41" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1082.8" y="645" width="0.2" height="15.0" fill="rgb(223,69,38)" rx="2" ry="2" />
<text  x="1085.81" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="684.3" y="789" width="0.4" height="15.0" fill="rgb(221,62,49)" rx="2" ry="2" />
<text  x="687.25" y="799.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.5" y="645" width="0.2" height="15.0" fill="rgb(253,24,40)" rx="2" ry="2" />
<text  x="919.50" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (5 samples, 0.09%)</title><rect x="101.3" y="709" width="1.1" height="15.0" fill="rgb(231,72,42)" rx="2" ry="2" />
<text  x="104.31" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="76.2" y="549" width="0.2" height="15.0" fill="rgb(226,81,39)" rx="2" ry="2" />
<text  x="79.17" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="544.4" y="485" width="0.9" height="15.0" fill="rgb(242,81,39)" rx="2" ry="2" />
<text  x="547.42" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="658.4" y="773" width="0.3" height="15.0" fill="rgb(241,208,10)" rx="2" ry="2" />
<text  x="661.45" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="46.8" y="453" width="0.3" height="15.0" fill="rgb(228,158,43)" rx="2" ry="2" />
<text  x="49.83" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="748.7" y="741" width="0.2" height="15.0" fill="rgb(222,191,27)" rx="2" ry="2" />
<text  x="751.66" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (30 samples, 0.56%)</title><rect x="90.9" y="789" width="6.7" height="15.0" fill="rgb(251,7,5)" rx="2" ry="2" />
<text  x="93.95" y="799.5" ></text>
</g>
<g >
<title>db::filter_for_query (3 samples, 0.06%)</title><rect x="1053.7" y="645" width="0.7" height="15.0" fill="rgb(227,58,32)" rx="2" ry="2" />
<text  x="1056.69" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="49.5" y="485" width="0.2" height="15.0" fill="rgb(222,183,2)" rx="2" ry="2" />
<text  x="52.48" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="724.0" y="725" width="0.2" height="15.0" fill="rgb(242,157,42)" rx="2" ry="2" />
<text  x="726.96" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="44.6" y="581" width="0.2" height="15.0" fill="rgb(237,123,1)" rx="2" ry="2" />
<text  x="47.63" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (4 samples, 0.07%)</title><rect x="601.3" y="581" width="0.9" height="15.0" fill="rgb(251,82,31)" rx="2" ry="2" />
<text  x="604.32" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="75.1" y="661" width="0.2" height="15.0" fill="rgb(252,25,9)" rx="2" ry="2" />
<text  x="78.07" y="671.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (9 samples, 0.17%)</title><rect x="70.2" y="757" width="2.0" height="15.0" fill="rgb(214,115,33)" rx="2" ry="2" />
<text  x="73.21" y="767.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="550.2" y="533" width="0.2" height="15.0" fill="rgb(231,26,44)" rx="2" ry="2" />
<text  x="553.15" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="101.3" y="453" width="0.5" height="15.0" fill="rgb(235,58,37)" rx="2" ry="2" />
<text  x="104.31" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="308.2" y="645" width="0.2" height="15.0" fill="rgb(210,197,35)" rx="2" ry="2" />
<text  x="311.20" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="712.7" y="741" width="0.2" height="15.0" fill="rgb(233,38,15)" rx="2" ry="2" />
<text  x="715.71" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1159.3" y="757" width="0.3" height="15.0" fill="rgb(249,144,27)" rx="2" ry="2" />
<text  x="1162.34" y="767.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;seastar::promise&lt;void&gt;, seastar::promise_expiry&lt;&gt;, seastar::lowres_clock&gt;::push_back (1 samples, 0.02%)</title><rect x="102.4" y="565" width="0.2" height="15.0" fill="rgb(238,142,21)" rx="2" ry="2" />
<text  x="105.41" y="575.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="72.2" y="725" width="0.2" height="15.0" fill="rgb(233,16,21)" rx="2" ry="2" />
<text  x="75.20" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (19 samples, 0.36%)</title><rect x="1073.3" y="581" width="4.2" height="15.0" fill="rgb(241,221,11)" rx="2" ry="2" />
<text  x="1076.32" y="591.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%)</title><rect x="1083.0" y="645" width="0.2" height="15.0" fill="rgb(246,141,18)" rx="2" ry="2" />
<text  x="1086.03" y="655.5" ></text>
</g>
<g >
<title>reader_permit::max_result_size (1 samples, 0.02%)</title><rect x="632.4" y="741" width="0.2" height="15.0" fill="rgb(240,224,8)" rx="2" ry="2" />
<text  x="635.42" y="751.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (8 samples, 0.15%)</title><rect x="242.7" y="373" width="1.8" height="15.0" fill="rgb(245,8,8)" rx="2" ry="2" />
<text  x="245.69" y="383.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,210 samples, 22.62%)</title><rect x="871.3" y="805" width="266.9" height="15.0" fill="rgb(245,66,21)" rx="2" ry="2" />
<text  x="874.29" y="815.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="201.0" y="581" width="0.4" height="15.0" fill="rgb(225,78,40)" rx="2" ry="2" />
<text  x="204.01" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%)</title><rect x="819.7" y="597" width="0.2" height="15.0" fill="rgb(229,69,51)" rx="2" ry="2" />
<text  x="822.68" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="67.8" y="757" width="0.2" height="15.0" fill="rgb(252,73,24)" rx="2" ry="2" />
<text  x="70.79" y="767.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1120.3" y="453" width="0.2" height="15.0" fill="rgb(233,110,45)" rx="2" ry="2" />
<text  x="1123.30" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1117.7" y="741" width="0.2" height="15.0" fill="rgb(245,67,28)" rx="2" ry="2" />
<text  x="1120.66" y="751.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="271.6" y="405" width="0.2" height="15.0" fill="rgb(242,106,37)" rx="2" ry="2" />
<text  x="274.59" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="738.3" y="773" width="0.7" height="15.0" fill="rgb(254,218,9)" rx="2" ry="2" />
<text  x="741.29" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="69.6" y="693" width="0.2" height="15.0" fill="rgb(233,26,14)" rx="2" ry="2" />
<text  x="72.55" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="429.3" y="453" width="0.4" height="15.0" fill="rgb(207,59,39)" rx="2" ry="2" />
<text  x="432.29" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="1123.6" y="501" width="0.2" height="15.0" fill="rgb(253,65,11)" rx="2" ry="2" />
<text  x="1126.61" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.34%)</title><rect x="1073.5" y="565" width="4.0" height="15.0" fill="rgb(214,89,6)" rx="2" ry="2" />
<text  x="1076.54" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="1034.7" y="581" width="0.7" height="15.0" fill="rgb(206,216,53)" rx="2" ry="2" />
<text  x="1037.73" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="816.8" y="517" width="0.5" height="15.0" fill="rgb(211,134,35)" rx="2" ry="2" />
<text  x="819.81" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (40 samples, 0.75%)</title><rect x="1127.1" y="629" width="8.9" height="15.0" fill="rgb(209,215,12)" rx="2" ry="2" />
<text  x="1130.14" y="639.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.32%)</title><rect x="831.1" y="661" width="3.8" height="15.0" fill="rgb(221,124,16)" rx="2" ry="2" />
<text  x="834.15" y="671.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_output_stream (1 samples, 0.02%)</title><rect x="707.4" y="773" width="0.2" height="15.0" fill="rgb(226,161,45)" rx="2" ry="2" />
<text  x="710.41" y="783.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="523.2" y="581" width="0.7" height="15.0" fill="rgb(216,104,42)" rx="2" ry="2" />
<text  x="526.24" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="10.2" y="805" width="0.2" height="15.0" fill="rgb(254,60,2)" rx="2" ry="2" />
<text  x="13.22" y="815.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (3 samples, 0.06%)</title><rect x="101.8" y="597" width="0.6" height="15.0" fill="rgb(235,129,50)" rx="2" ry="2" />
<text  x="104.75" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (265 samples, 4.95%)</title><rect x="15.7" y="885" width="58.5" height="15.0" fill="rgb(229,196,36)" rx="2" ry="2" />
<text  x="18.73" y="895.5" >seasta..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="46.8" y="421" width="0.3" height="15.0" fill="rgb(251,47,13)" rx="2" ry="2" />
<text  x="49.83" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (25 samples, 0.47%)</title><rect x="485.7" y="597" width="5.6" height="15.0" fill="rgb(237,212,29)" rx="2" ry="2" />
<text  x="488.75" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="35.6" y="565" width="0.2" height="15.0" fill="rgb(232,164,2)" rx="2" ry="2" />
<text  x="38.59" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="688.9" y="773" width="0.4" height="15.0" fill="rgb(228,185,30)" rx="2" ry="2" />
<text  x="691.89" y="783.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="139.7" y="709" width="0.2" height="15.0" fill="rgb(238,62,35)" rx="2" ry="2" />
<text  x="142.69" y="719.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%)</title><rect x="1079.9" y="565" width="0.3" height="15.0" fill="rgb(246,124,32)" rx="2" ry="2" />
<text  x="1082.94" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1035.2" y="549" width="0.2" height="15.0" fill="rgb(224,57,14)" rx="2" ry="2" />
<text  x="1038.17" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="987.3" y="629" width="0.4" height="15.0" fill="rgb(210,23,3)" rx="2" ry="2" />
<text  x="990.30" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="412.1" y="469" width="0.2" height="15.0" fill="rgb(247,0,15)" rx="2" ry="2" />
<text  x="415.08" y="479.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (6 samples, 0.11%)</title><rect x="866.4" y="773" width="1.4" height="15.0" fill="rgb(234,229,37)" rx="2" ry="2" />
<text  x="869.44" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.9" y="565" width="0.4" height="15.0" fill="rgb(219,63,19)" rx="2" ry="2" />
<text  x="43.88" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (20 samples, 0.37%)</title><rect x="440.3" y="501" width="4.4" height="15.0" fill="rgb(230,160,51)" rx="2" ry="2" />
<text  x="443.31" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (4 samples, 0.07%)</title><rect x="911.0" y="661" width="0.9" height="15.0" fill="rgb(234,47,3)" rx="2" ry="2" />
<text  x="913.99" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.11%)</title><rect x="317.9" y="597" width="1.3" height="15.0" fill="rgb(250,31,32)" rx="2" ry="2" />
<text  x="320.90" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%)</title><rect x="917.2" y="661" width="1.5" height="15.0" fill="rgb(247,20,38)" rx="2" ry="2" />
<text  x="920.17" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="759.9" y="613" width="0.4" height="15.0" fill="rgb(229,138,18)" rx="2" ry="2" />
<text  x="762.91" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1121.2" y="485" width="0.2" height="15.0" fill="rgb(233,91,46)" rx="2" ry="2" />
<text  x="1124.19" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="79.9" y="821" width="0.2" height="15.0" fill="rgb(221,50,24)" rx="2" ry="2" />
<text  x="82.92" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="34.3" y="485" width="0.2" height="15.0" fill="rgb(231,120,24)" rx="2" ry="2" />
<text  x="37.26" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="34.5" y="485" width="0.2" height="15.0" fill="rgb(249,25,16)" rx="2" ry="2" />
<text  x="37.48" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%)</title><rect x="100.0" y="789" width="0.4" height="15.0" fill="rgb(235,88,35)" rx="2" ry="2" />
<text  x="102.99" y="799.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%)</title><rect x="208.7" y="517" width="1.6" height="15.0" fill="rgb(245,41,35)" rx="2" ry="2" />
<text  x="211.73" y="527.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%)</title><rect x="822.8" y="661" width="0.2" height="15.0" fill="rgb(225,125,42)" rx="2" ry="2" />
<text  x="825.77" y="671.5" ></text>
</g>
<g >
<title>clustering_row::minimal_external_memory_usage (2 samples, 0.04%)</title><rect x="75.7" y="629" width="0.5" height="15.0" fill="rgb(242,23,8)" rx="2" ry="2" />
<text  x="78.73" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%)</title><rect x="273.1" y="485" width="0.2" height="15.0" fill="rgb(244,144,4)" rx="2" ry="2" />
<text  x="276.13" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="660.0" y="789" width="0.7" height="15.0" fill="rgb(225,2,50)" rx="2" ry="2" />
<text  x="662.99" y="799.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="620.7" y="709" width="0.5" height="15.0" fill="rgb(236,197,49)" rx="2" ry="2" />
<text  x="623.73" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (16 samples, 0.30%)</title><rect x="659.8" y="805" width="3.5" height="15.0" fill="rgb(212,56,28)" rx="2" ry="2" />
<text  x="662.77" y="815.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (5 samples, 0.09%)</title><rect x="353.2" y="485" width="1.1" height="15.0" fill="rgb(231,126,52)" rx="2" ry="2" />
<text  x="356.19" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="74.8" y="837" width="3.1" height="15.0" fill="rgb(207,187,31)" rx="2" ry="2" />
<text  x="77.84" y="847.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="687.8" y="725" width="0.2" height="15.0" fill="rgb(241,127,38)" rx="2" ry="2" />
<text  x="690.78" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="31.8" y="565" width="0.3" height="15.0" fill="rgb(223,136,45)" rx="2" ry="2" />
<text  x="34.84" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (1 samples, 0.02%)</title><rect x="64.0" y="709" width="0.3" height="15.0" fill="rgb(237,9,8)" rx="2" ry="2" />
<text  x="67.04" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="820.6" y="581" width="0.2" height="15.0" fill="rgb(210,18,33)" rx="2" ry="2" />
<text  x="823.56" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.07%)</title><rect x="952.7" y="645" width="0.9" height="15.0" fill="rgb(215,25,27)" rx="2" ry="2" />
<text  x="955.68" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (12 samples, 0.22%)</title><rect x="874.4" y="693" width="2.6" height="15.0" fill="rgb(248,153,40)" rx="2" ry="2" />
<text  x="877.38" y="703.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.9" y="517" width="0.4" height="15.0" fill="rgb(249,132,49)" rx="2" ry="2" />
<text  x="45.86" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="74.6" y="773" width="0.2" height="15.0" fill="rgb(223,192,52)" rx="2" ry="2" />
<text  x="77.62" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="667.7" y="533" width="0.2" height="15.0" fill="rgb(235,227,8)" rx="2" ry="2" />
<text  x="670.71" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="693" width="0.5" height="15.0" fill="rgb(233,90,36)" rx="2" ry="2" />
<text  x="710.63" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="486.0" y="581" width="0.2" height="15.0" fill="rgb(247,11,35)" rx="2" ry="2" />
<text  x="488.97" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="34.3" y="469" width="0.2" height="15.0" fill="rgb(218,155,43)" rx="2" ry="2" />
<text  x="37.26" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="293.4" y="533" width="0.2" height="15.0" fill="rgb(213,60,34)" rx="2" ry="2" />
<text  x="296.42" y="543.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (12 samples, 0.22%)</title><rect x="565.6" y="613" width="2.6" height="15.0" fill="rgb(236,127,52)" rx="2" ry="2" />
<text  x="568.59" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (12 samples, 0.22%)</title><rect x="1035.8" y="581" width="2.7" height="15.0" fill="rgb(254,36,27)" rx="2" ry="2" />
<text  x="1038.83" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (33 samples, 0.62%)</title><rect x="1092.1" y="709" width="7.2" height="15.0" fill="rgb(221,184,51)" rx="2" ry="2" />
<text  x="1095.07" y="719.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (1 samples, 0.02%)</title><rect x="101.5" y="293" width="0.3" height="15.0" fill="rgb(227,126,49)" rx="2" ry="2" />
<text  x="104.53" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="139.0" y="757" width="0.2" height="15.0" fill="rgb(231,228,16)" rx="2" ry="2" />
<text  x="142.03" y="767.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="21.7" y="693" width="0.4" height="15.0" fill="rgb(245,183,36)" rx="2" ry="2" />
<text  x="24.69" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="16.2" y="821" width="0.2" height="15.0" fill="rgb(226,158,24)" rx="2" ry="2" />
<text  x="19.18" y="831.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1162.4" y="773" width="0.3" height="15.0" fill="rgb(236,118,3)" rx="2" ry="2" />
<text  x="1165.43" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (6 samples, 0.11%)</title><rect x="29.9" y="565" width="1.3" height="15.0" fill="rgb(213,70,27)" rx="2" ry="2" />
<text  x="32.85" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="67.6" y="645" width="0.2" height="15.0" fill="rgb(212,10,44)" rx="2" ry="2" />
<text  x="70.57" y="655.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (15 samples, 0.28%)</title><rect x="1177.2" y="917" width="3.3" height="15.0" fill="rgb(244,127,47)" rx="2" ry="2" />
<text  x="1180.21" y="927.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="50.1" y="549" width="0.3" height="15.0" fill="rgb(214,199,32)" rx="2" ry="2" />
<text  x="53.14" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (472 samples, 8.82%)</title><rect x="344.1" y="581" width="104.2" height="15.0" fill="rgb(240,8,38)" rx="2" ry="2" />
<text  x="347.15" y="591.5" >flat_mutatio..</text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (14 samples, 0.26%)</title><rect x="48.6" y="645" width="3.1" height="15.0" fill="rgb(226,100,46)" rx="2" ry="2" />
<text  x="51.60" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="585.7" y="709" width="0.8" height="15.0" fill="rgb(206,197,46)" rx="2" ry="2" />
<text  x="588.66" y="719.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (4 samples, 0.07%)</title><rect x="651.6" y="709" width="0.9" height="15.0" fill="rgb(228,130,45)" rx="2" ry="2" />
<text  x="654.61" y="719.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="321.0" y="597" width="0.2" height="15.0" fill="rgb(252,185,24)" rx="2" ry="2" />
<text  x="323.99" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1162.7" y="741" width="0.2" height="15.0" fill="rgb(250,40,22)" rx="2" ry="2" />
<text  x="1165.65" y="751.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="854.5" y="661" width="0.2" height="15.0" fill="rgb(208,144,27)" rx="2" ry="2" />
<text  x="857.53" y="671.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="773.8" y="613" width="0.7" height="15.0" fill="rgb(205,54,46)" rx="2" ry="2" />
<text  x="776.80" y="623.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (4 samples, 0.07%)</title><rect x="197.9" y="549" width="0.9" height="15.0" fill="rgb(209,107,7)" rx="2" ry="2" />
<text  x="200.92" y="559.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="893.1" y="725" width="0.2" height="15.0" fill="rgb(252,178,13)" rx="2" ry="2" />
<text  x="896.13" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="704.8" y="757" width="0.4" height="15.0" fill="rgb(212,193,10)" rx="2" ry="2" />
<text  x="707.77" y="767.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.2" y="549" width="0.4" height="15.0" fill="rgb(220,35,1)" rx="2" ry="2" />
<text  x="45.20" y="559.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="1122.7" y="533" width="0.2" height="15.0" fill="rgb(216,228,15)" rx="2" ry="2" />
<text  x="1125.73" y="543.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="66.7" y="741" width="0.2" height="15.0" fill="rgb(246,55,19)" rx="2" ry="2" />
<text  x="69.68" y="751.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%)</title><rect x="185.1" y="581" width="0.7" height="15.0" fill="rgb(213,160,52)" rx="2" ry="2" />
<text  x="188.13" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="65.1" y="677" width="0.7" height="15.0" fill="rgb(233,155,51)" rx="2" ry="2" />
<text  x="68.14" y="687.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="429.7" y="485" width="0.2" height="15.0" fill="rgb(235,200,39)" rx="2" ry="2" />
<text  x="432.73" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.2" y="565" width="0.3" height="15.0" fill="rgb(239,59,41)" rx="2" ry="2" />
<text  x="41.23" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1115.0" y="725" width="0.2" height="15.0" fill="rgb(253,174,15)" rx="2" ry="2" />
<text  x="1118.01" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.09%)</title><rect x="45.1" y="581" width="1.1" height="15.0" fill="rgb(244,176,14)" rx="2" ry="2" />
<text  x="48.07" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="17.1" y="805" width="0.2" height="15.0" fill="rgb(225,48,8)" rx="2" ry="2" />
<text  x="20.06" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, bool  (1 samples, 0.02%)</title><rect x="58.7" y="709" width="0.3" height="15.0" fill="rgb(246,162,43)" rx="2" ry="2" />
<text  x="61.74" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (4 samples, 0.07%)</title><rect x="1033.2" y="581" width="0.9" height="15.0" fill="rgb(206,148,37)" rx="2" ry="2" />
<text  x="1036.18" y="591.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (5 samples, 0.09%)</title><rect x="20.1" y="693" width="1.1" height="15.0" fill="rgb(239,103,42)" rx="2" ry="2" />
<text  x="23.15" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1062.1" y="597" width="0.6" height="15.0" fill="rgb(224,98,30)" rx="2" ry="2" />
<text  x="1065.07" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="43.5" y="485" width="0.2" height="15.0" fill="rgb(211,163,49)" rx="2" ry="2" />
<text  x="46.53" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="878.1" y="485" width="0.2" height="15.0" fill="rgb(243,135,50)" rx="2" ry="2" />
<text  x="881.13" y="495.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="967.0" y="661" width="0.9" height="15.0" fill="rgb(234,150,15)" rx="2" ry="2" />
<text  x="970.01" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="76.2" y="533" width="0.2" height="15.0" fill="rgb(234,224,46)" rx="2" ry="2" />
<text  x="79.17" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (28 samples, 0.52%)</title><rect x="476.3" y="597" width="6.1" height="15.0" fill="rgb(239,173,41)" rx="2" ry="2" />
<text  x="479.27" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (2 samples, 0.04%)</title><rect x="61.6" y="581" width="0.5" height="15.0" fill="rgb(252,195,2)" rx="2" ry="2" />
<text  x="64.61" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="36.0" y="469" width="0.2" height="15.0" fill="rgb(250,120,26)" rx="2" ry="2" />
<text  x="39.03" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="71.5" y="469" width="0.3" height="15.0" fill="rgb(205,102,23)" rx="2" ry="2" />
<text  x="74.54" y="479.5" ></text>
</g>
<g >
<title>row::external_memory_usage (27 samples, 0.50%)</title><rect x="259.9" y="453" width="6.0" height="15.0" fill="rgb(220,166,25)" rx="2" ry="2" />
<text  x="262.90" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="870.2" y="613" width="0.4" height="15.0" fill="rgb(225,172,21)" rx="2" ry="2" />
<text  x="873.19" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1148.5" y="741" width="0.5" height="15.0" fill="rgb(221,195,35)" rx="2" ry="2" />
<text  x="1151.53" y="751.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="22.1" y="629" width="0.3" height="15.0" fill="rgb(238,60,43)" rx="2" ry="2" />
<text  x="25.13" y="639.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="707.6" y="773" width="0.5" height="15.0" fill="rgb(228,158,15)" rx="2" ry="2" />
<text  x="710.63" y="783.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="271.4" y="421" width="0.2" height="15.0" fill="rgb(232,226,13)" rx="2" ry="2" />
<text  x="274.36" y="431.5" ></text>
</g>
<g >
<title>row_cache::make_reader (43 samples, 0.80%)</title><rect x="562.9" y="645" width="9.5" height="15.0" fill="rgb(223,159,41)" rx="2" ry="2" />
<text  x="565.95" y="655.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="77.9" y="805" width="0.3" height="15.0" fill="rgb(220,171,49)" rx="2" ry="2" />
<text  x="80.93" y="815.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%)</title><rect x="43.1" y="469" width="0.2" height="15.0" fill="rgb(249,147,28)" rx="2" ry="2" />
<text  x="46.08" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (108 samples, 2.02%)</title><rect x="500.1" y="629" width="23.8" height="15.0" fill="rgb(235,54,13)" rx="2" ry="2" />
<text  x="503.09" y="639.5" >d..</text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%)</title><rect x="580.1" y="661" width="1.6" height="15.0" fill="rgb(237,66,54)" rx="2" ry="2" />
<text  x="583.15" y="671.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_definition_impl::metric_definition_impl (1 samples, 0.02%)</title><rect x="74.6" y="533" width="0.2" height="15.0" fill="rgb(253,45,35)" rx="2" ry="2" />
<text  x="77.62" y="543.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%)</title><rect x="1122.7" y="517" width="0.2" height="15.0" fill="rgb(216,62,9)" rx="2" ry="2" />
<text  x="1125.73" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%)</title><rect x="853.0" y="677" width="0.6" height="15.0" fill="rgb(249,134,8)" rx="2" ry="2" />
<text  x="855.98" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="46.2" y="469" width="0.6" height="15.0" fill="rgb(248,106,39)" rx="2" ry="2" />
<text  x="49.17" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="73.7" y="821" width="0.3" height="15.0" fill="rgb(247,40,12)" rx="2" ry="2" />
<text  x="76.74" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="695.5" y="757" width="1.5" height="15.0" fill="rgb(239,194,43)" rx="2" ry="2" />
<text  x="698.50" y="767.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="76.2" y="597" width="0.4" height="15.0" fill="rgb(250,184,1)" rx="2" ry="2" />
<text  x="79.17" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="205.2" y="549" width="0.7" height="15.0" fill="rgb(248,129,32)" rx="2" ry="2" />
<text  x="208.20" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="818.8" y="581" width="0.2" height="15.0" fill="rgb(212,82,51)" rx="2" ry="2" />
<text  x="821.80" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="37.8" y="581" width="0.4" height="15.0" fill="rgb(210,174,21)" rx="2" ry="2" />
<text  x="40.79" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="77.3" y="629" width="0.2" height="15.0" fill="rgb(207,170,44)" rx="2" ry="2" />
<text  x="80.27" y="639.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (22 samples, 0.41%)</title><rect x="710.5" y="773" width="4.9" height="15.0" fill="rgb(245,209,31)" rx="2" ry="2" />
<text  x="713.50" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.0" y="437" width="0.2" height="15.0" fill="rgb(233,143,16)" rx="2" ry="2" />
<text  x="41.01" y="447.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="496.6" y="629" width="0.6" height="15.0" fill="rgb(254,149,6)" rx="2" ry="2" />
<text  x="499.56" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="40.2" y="469" width="0.2" height="15.0" fill="rgb(241,181,3)" rx="2" ry="2" />
<text  x="43.22" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.07%)</title><rect x="501.4" y="597" width="0.9" height="15.0" fill="rgb(245,10,46)" rx="2" ry="2" />
<text  x="504.41" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::partition_tombstone (1 samples, 0.02%)</title><rect x="75.1" y="677" width="0.2" height="15.0" fill="rgb(231,42,32)" rx="2" ry="2" />
<text  x="78.07" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (65 samples, 1.21%)</title><rect x="55.2" y="773" width="14.4" height="15.0" fill="rgb(211,215,22)" rx="2" ry="2" />
<text  x="58.21" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="484.4" y="597" width="0.2" height="15.0" fill="rgb(236,80,20)" rx="2" ry="2" />
<text  x="487.43" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::deque (1 samples, 0.02%)</title><rect x="20.8" y="613" width="0.2" height="15.0" fill="rgb(245,34,7)" rx="2" ry="2" />
<text  x="23.81" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.09%)</title><rect x="569.1" y="613" width="1.1" height="15.0" fill="rgb(206,153,17)" rx="2" ry="2" />
<text  x="572.12" y="623.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%)</title><rect x="17.5" y="549" width="0.2" height="15.0" fill="rgb(210,69,38)" rx="2" ry="2" />
<text  x="20.50" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="22.4" y="533" width="0.2" height="15.0" fill="rgb(241,177,36)" rx="2" ry="2" />
<text  x="25.35" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.07%)</title><rect x="560.7" y="629" width="0.9" height="15.0" fill="rgb(245,154,43)" rx="2" ry="2" />
<text  x="563.74" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="200.3" y="565" width="0.3" height="15.0" fill="rgb(214,27,39)" rx="2" ry="2" />
<text  x="203.34" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="709.4" y="773" width="0.4" height="15.0" fill="rgb(245,49,15)" rx="2" ry="2" />
<text  x="712.40" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (10 samples, 0.19%)</title><rect x="1010.2" y="517" width="2.2" height="15.0" fill="rgb(250,143,8)" rx="2" ry="2" />
<text  x="1013.24" y="527.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="76.4" y="565" width="0.2" height="15.0" fill="rgb(216,220,24)" rx="2" ry="2" />
<text  x="79.39" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="24.1" y="485" width="0.2" height="15.0" fill="rgb(252,136,47)" rx="2" ry="2" />
<text  x="27.12" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.2" y="533" width="0.2" height="15.0" fill="rgb(219,111,19)" rx="2" ry="2" />
<text  x="43.22" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (5 samples, 0.09%)</title><rect x="781.1" y="661" width="1.1" height="15.0" fill="rgb(219,40,17)" rx="2" ry="2" />
<text  x="784.08" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::response_wait (1 samples, 0.02%)</title><rect x="1127.8" y="565" width="0.2" height="15.0" fill="rgb(230,171,30)" rx="2" ry="2" />
<text  x="1130.80" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (64 samples, 1.20%)</title><rect x="592.3" y="645" width="14.1" height="15.0" fill="rgb(207,229,38)" rx="2" ry="2" />
<text  x="595.28" y="655.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%)</title><rect x="1168.2" y="789" width="0.2" height="15.0" fill="rgb(249,155,38)" rx="2" ry="2" />
<text  x="1171.16" y="799.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="791.7" y="613" width="0.2" height="15.0" fill="rgb(222,189,22)" rx="2" ry="2" />
<text  x="794.67" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="46.8" y="533" width="0.3" height="15.0" fill="rgb(210,117,3)" rx="2" ry="2" />
<text  x="49.83" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="53.5" y="677" width="0.2" height="15.0" fill="rgb(222,44,20)" rx="2" ry="2" />
<text  x="56.45" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (63 samples, 1.18%)</title><rect x="1089.2" y="725" width="13.9" height="15.0" fill="rgb(212,133,40)" rx="2" ry="2" />
<text  x="1092.20" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="852.3" y="709" width="0.5" height="15.0" fill="rgb(231,228,54)" rx="2" ry="2" />
<text  x="855.32" y="719.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,920 samples, 35.89%)</title><rect x="164.8" y="741" width="423.5" height="15.0" fill="rgb(244,131,41)" rx="2" ry="2" />
<text  x="167.83" y="751.5" >query::querier&lt;</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (23 samples, 0.43%)</title><rect x="772.5" y="661" width="5.1" height="15.0" fill="rgb(243,26,41)" rx="2" ry="2" />
<text  x="775.48" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="273.8" y="517" width="0.2" height="15.0" fill="rgb(206,59,48)" rx="2" ry="2" />
<text  x="276.79" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (4 samples, 0.07%)</title><rect x="410.8" y="501" width="0.8" height="15.0" fill="rgb(234,157,15)" rx="2" ry="2" />
<text  x="413.76" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (540 samples, 10.09%)</title><rect x="334.0" y="661" width="119.1" height="15.0" fill="rgb(243,33,31)" rx="2" ry="2" />
<text  x="337.00" y="671.5" >flat_mutation_..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="35.6" y="581" width="0.2" height="15.0" fill="rgb(250,189,31)" rx="2" ry="2" />
<text  x="38.59" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (16 samples, 0.30%)</title><rect x="1110.6" y="725" width="3.5" height="15.0" fill="rgb(205,22,37)" rx="2" ry="2" />
<text  x="1113.60" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="614.6" y="645" width="0.4" height="15.0" fill="rgb(236,204,26)" rx="2" ry="2" />
<text  x="617.56" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="61.8" y="501" width="0.3" height="15.0" fill="rgb(217,175,29)" rx="2" ry="2" />
<text  x="64.83" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="49.9" y="533" width="0.2" height="15.0" fill="rgb(209,212,48)" rx="2" ry="2" />
<text  x="52.92" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%)</title><rect x="1081.3" y="613" width="0.2" height="15.0" fill="rgb(251,114,20)" rx="2" ry="2" />
<text  x="1084.26" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="460.4" y="725" width="0.2" height="15.0" fill="rgb(248,97,40)" rx="2" ry="2" />
<text  x="463.39" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%)</title><rect x="537.8" y="565" width="2.2" height="15.0" fill="rgb(250,56,51)" rx="2" ry="2" />
<text  x="540.80" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="38.2" y="517" width="0.3" height="15.0" fill="rgb(217,161,12)" rx="2" ry="2" />
<text  x="41.23" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="468.3" y="645" width="0.2" height="15.0" fill="rgb(220,2,53)" rx="2" ry="2" />
<text  x="471.33" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="361.6" y="485" width="0.2" height="15.0" fill="rgb(235,216,1)" rx="2" ry="2" />
<text  x="364.57" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="563.6" y="629" width="0.2" height="15.0" fill="rgb(229,124,13)" rx="2" ry="2" />
<text  x="566.61" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="548.6" y="517" width="0.2" height="15.0" fill="rgb(253,191,32)" rx="2" ry="2" />
<text  x="551.61" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;partition [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="101.8" y="517" width="0.2" height="15.0" fill="rgb(247,9,34)" rx="2" ry="2" />
<text  x="104.75" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="278.4" y="485" width="0.5" height="15.0" fill="rgb(218,199,49)" rx="2" ry="2" />
<text  x="281.42" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::back (1 samples, 0.02%)</title><rect x="51.5" y="613" width="0.2" height="15.0" fill="rgb(251,70,22)" rx="2" ry="2" />
<text  x="54.47" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="1160.7" y="789" width="1.5" height="15.0" fill="rgb(227,45,52)" rx="2" ry="2" />
<text  x="1163.67" y="799.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="681.4" y="725" width="0.2" height="15.0" fill="rgb(236,98,4)" rx="2" ry="2" />
<text  x="684.39" y="735.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (6 samples, 0.11%)</title><rect x="1078.8" y="597" width="1.4" height="15.0" fill="rgb(207,209,15)" rx="2" ry="2" />
<text  x="1081.84" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (129 samples, 2.41%)</title><rect x="590.1" y="709" width="28.4" height="15.0" fill="rgb(223,37,38)" rx="2" ry="2" />
<text  x="593.07" y="719.5" >fl..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="683.2" y="773" width="0.2" height="15.0" fill="rgb(209,227,34)" rx="2" ry="2" />
<text  x="686.15" y="783.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="102.2" y="469" width="0.2" height="15.0" fill="rgb(218,165,27)" rx="2" ry="2" />
<text  x="105.19" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (16 samples, 0.30%)</title><rect x="244.7" y="373" width="3.5" height="15.0" fill="rgb(231,211,3)" rx="2" ry="2" />
<text  x="247.68" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (15 samples, 0.28%)</title><rect x="288.3" y="517" width="3.4" height="15.0" fill="rgb(250,95,40)" rx="2" ry="2" />
<text  x="291.35" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.26%)</title><rect x="74.8" y="821" width="3.1" height="15.0" fill="rgb(250,205,1)" rx="2" ry="2" />
<text  x="77.84" y="831.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="41.3" y="597" width="0.5" height="15.0" fill="rgb(242,154,15)" rx="2" ry="2" />
<text  x="44.32" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="989.3" y="549" width="0.9" height="15.0" fill="rgb(247,204,13)" rx="2" ry="2" />
<text  x="992.29" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="23.2" y="501" width="0.3" height="15.0" fill="rgb(236,21,27)" rx="2" ry="2" />
<text  x="26.23" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (17 samples, 0.32%)</title><rect x="1095.6" y="693" width="3.7" height="15.0" fill="rgb(230,229,50)" rx="2" ry="2" />
<text  x="1098.60" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="39.6" y="581" width="0.2" height="15.0" fill="rgb(207,57,41)" rx="2" ry="2" />
<text  x="42.56" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,481 samples, 46.37%)</title><rect x="107.5" y="789" width="547.2" height="15.0" fill="rgb(233,97,50)" rx="2" ry="2" />
<text  x="110.49" y="799.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="112.3" y="773" width="0.3" height="15.0" fill="rgb(237,46,42)" rx="2" ry="2" />
<text  x="115.34" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (14 samples, 0.26%)</title><rect x="694.6" y="773" width="3.1" height="15.0" fill="rgb(250,198,6)" rx="2" ry="2" />
<text  x="697.62" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="1153.2" y="725" width="1.1" height="15.0" fill="rgb(216,0,50)" rx="2" ry="2" />
<text  x="1156.17" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="722.0" y="741" width="0.4" height="15.0" fill="rgb(213,223,4)" rx="2" ry="2" />
<text  x="724.97" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="307.8" y="629" width="0.4" height="15.0" fill="rgb(218,93,50)" rx="2" ry="2" />
<text  x="310.76" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="778.4" y="709" width="0.3" height="15.0" fill="rgb(217,118,46)" rx="2" ry="2" />
<text  x="781.43" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1107.7" y="677" width="0.7" height="15.0" fill="rgb(220,149,10)" rx="2" ry="2" />
<text  x="1110.73" y="687.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="281.1" y="533" width="0.2" height="15.0" fill="rgb(224,56,40)" rx="2" ry="2" />
<text  x="284.07" y="543.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (13 samples, 0.24%)</title><rect x="1146.1" y="773" width="2.9" height="15.0" fill="rgb(248,102,8)" rx="2" ry="2" />
<text  x="1149.11" y="783.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="68.2" y="741" width="0.7" height="15.0" fill="rgb(217,47,48)" rx="2" ry="2" />
<text  x="71.23" y="751.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.11%)</title><rect x="1128.0" y="565" width="1.3" height="15.0" fill="rgb(227,85,52)" rx="2" ry="2" />
<text  x="1131.02" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.7" y="565" width="0.2" height="15.0" fill="rgb(235,207,15)" rx="2" ry="2" />
<text  x="670.71" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.09%)</title><rect x="75.7" y="693" width="1.1" height="15.0" fill="rgb(250,20,39)" rx="2" ry="2" />
<text  x="78.73" y="703.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="46.0" y="549" width="0.2" height="15.0" fill="rgb(208,172,19)" rx="2" ry="2" />
<text  x="48.95" y="559.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="730.8" y="597" width="0.2" height="15.0" fill="rgb(250,50,7)" rx="2" ry="2" />
<text  x="733.79" y="607.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="916.5" y="661" width="0.2" height="15.0" fill="rgb(254,123,44)" rx="2" ry="2" />
<text  x="919.50" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%)</title><rect x="667.7" y="757" width="0.5" height="15.0" fill="rgb(206,71,27)" rx="2" ry="2" />
<text  x="670.71" y="767.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%)</title><rect x="102.6" y="741" width="0.5" height="15.0" fill="rgb(251,43,52)" rx="2" ry="2" />
<text  x="105.64" y="751.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="545.3" y="501" width="0.2" height="15.0" fill="rgb(216,26,15)" rx="2" ry="2" />
<text  x="548.30" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="937.9" y="709" width="0.2" height="15.0" fill="rgb(231,125,25)" rx="2" ry="2" />
<text  x="940.90" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (44 samples, 0.82%)</title><rect x="688.2" y="805" width="9.7" height="15.0" fill="rgb(242,210,12)" rx="2" ry="2" />
<text  x="691.22" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="70.0" y="709" width="0.2" height="15.0" fill="rgb(234,53,46)" rx="2" ry="2" />
<text  x="72.99" y="719.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="530.7" y="597" width="0.3" height="15.0" fill="rgb(221,52,0)" rx="2" ry="2" />
<text  x="533.74" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="40.9" y="485" width="0.4" height="15.0" fill="rgb(244,9,22)" rx="2" ry="2" />
<text  x="43.88" y="495.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="708.1" y="789" width="0.2" height="15.0" fill="rgb(235,53,51)" rx="2" ry="2" />
<text  x="711.07" y="799.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.07%)</title><rect x="608.6" y="677" width="0.9" height="15.0" fill="rgb(228,183,53)" rx="2" ry="2" />
<text  x="611.60" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="302.2" y="581" width="0.3" height="15.0" fill="rgb(219,16,43)" rx="2" ry="2" />
<text  x="305.24" y="591.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.15%)</title><rect x="512.0" y="565" width="1.8" height="15.0" fill="rgb(237,111,5)" rx="2" ry="2" />
<text  x="515.00" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (7 samples, 0.13%)</title><rect x="815.7" y="565" width="1.6" height="15.0" fill="rgb(225,146,17)" rx="2" ry="2" />
<text  x="818.71" y="575.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.11%)</title><rect x="829.8" y="661" width="1.3" height="15.0" fill="rgb(254,38,24)" rx="2" ry="2" />
<text  x="832.82" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (8 samples, 0.15%)</title><rect x="1108.4" y="709" width="1.8" height="15.0" fill="rgb(208,197,10)" rx="2" ry="2" />
<text  x="1111.39" y="719.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (151 samples, 2.82%)</title><rect x="21.7" y="709" width="33.3" height="15.0" fill="rgb(223,146,7)" rx="2" ry="2" />
<text  x="24.69" y="719.5" >cq..</text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="1017.1" y="485" width="0.2" height="15.0" fill="rgb(236,49,10)" rx="2" ry="2" />
<text  x="1020.08" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%)</title><rect x="252.6" y="405" width="0.5" height="15.0" fill="rgb(211,74,53)" rx="2" ry="2" />
<text  x="255.62" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="941.0" y="661" width="0.2" height="15.0" fill="rgb(220,157,2)" rx="2" ry="2" />
<text  x="943.99" y="671.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_group::~metric_group (1 samples, 0.02%)</title><rect x="17.5" y="597" width="0.2" height="15.0" fill="rgb(235,40,21)" rx="2" ry="2" />
<text  x="20.50" y="607.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (70 samples, 1.31%)</title><rect x="186.0" y="597" width="15.4" height="15.0" fill="rgb(222,22,4)" rx="2" ry="2" />
<text  x="189.01" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="24.1" y="533" width="0.2" height="15.0" fill="rgb(232,167,12)" rx="2" ry="2" />
<text  x="27.12" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (227 samples, 4.24%)</title><rect x="19.7" y="789" width="50.1" height="15.0" fill="rgb(240,129,38)" rx="2" ry="2" />
<text  x="22.70" y="799.5" >cql3:..</text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="961.9" y="661" width="0.5" height="15.0" fill="rgb(220,103,4)" rx="2" ry="2" />
<text  x="964.94" y="671.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (1 samples, 0.02%)</title><rect x="907.0" y="629" width="0.2" height="15.0" fill="rgb(221,53,22)" rx="2" ry="2" />
<text  x="910.02" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (19 samples, 0.36%)</title><rect x="43.5" y="613" width="4.2" height="15.0" fill="rgb(212,190,25)" rx="2" ry="2" />
<text  x="46.53" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.09%)</title><rect x="793.0" y="597" width="1.1" height="15.0" fill="rgb(207,114,21)" rx="2" ry="2" />
<text  x="795.99" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%)</title><rect x="941.2" y="677" width="0.7" height="15.0" fill="rgb(224,179,40)" rx="2" ry="2" />
<text  x="944.21" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="625.4" y="677" width="0.2" height="15.0" fill="rgb(245,226,8)" rx="2" ry="2" />
<text  x="628.36" y="687.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1022.2" y="453" width="0.2" height="15.0" fill="rgb(244,30,25)" rx="2" ry="2" />
<text  x="1025.15" y="463.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="169.0" y="725" width="0.2" height="15.0" fill="rgb(206,188,0)" rx="2" ry="2" />
<text  x="172.02" y="735.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (2 samples, 0.04%)</title><rect x="658.9" y="805" width="0.4" height="15.0" fill="rgb(215,51,36)" rx="2" ry="2" />
<text  x="661.89" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::restrictions::has_eq_null (1 samples, 0.02%)</title><rect x="872.8" y="645" width="0.3" height="15.0" fill="rgb(249,43,2)" rx="2" ry="2" />
<text  x="875.83" y="655.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.07%)</title><rect x="76.8" y="757" width="0.9" height="15.0" fill="rgb(248,195,53)" rx="2" ry="2" />
<text  x="79.83" y="767.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="794.3" y="629" width="0.2" height="15.0" fill="rgb(229,21,25)" rx="2" ry="2" />
<text  x="797.31" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="859.6" y="725" width="0.2" height="15.0" fill="rgb(230,228,44)" rx="2" ry="2" />
<text  x="862.60" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1134.9" y="517" width="0.2" height="15.0" fill="rgb(248,157,19)" rx="2" ry="2" />
<text  x="1137.86" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="131.5" y="709" width="0.2" height="15.0" fill="rgb(246,58,21)" rx="2" ry="2" />
<text  x="134.53" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (11 samples, 0.21%)</title><rect x="679.4" y="773" width="2.4" height="15.0" fill="rgb(216,103,8)" rx="2" ry="2" />
<text  x="682.40" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mLETTER (1 samples, 0.02%)</title><rect x="29.2" y="549" width="0.2" height="15.0" fill="rgb(231,50,10)" rx="2" ry="2" />
<text  x="32.19" y="559.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%)</title><rect x="1124.7" y="565" width="0.2" height="15.0" fill="rgb(253,161,7)" rx="2" ry="2" />
<text  x="1127.71" y="575.5" ></text>
</g>
<g >
<title>pthread_sigmask@@GLIBC_2.32 (1 samples, 0.02%)</title><rect x="79.5" y="837" width="0.2" height="15.0" fill="rgb(234,141,44)" rx="2" ry="2" />
<text  x="82.48" y="847.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1138.6" y="805" width="0.2" height="15.0" fill="rgb(253,189,8)" rx="2" ry="2" />
<text  x="1141.61" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (3 samples, 0.06%)</title><rect x="1048.4" y="613" width="0.7" height="15.0" fill="rgb(249,43,5)" rx="2" ry="2" />
<text  x="1051.40" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (1 samples, 0.02%)</title><rect x="296.3" y="533" width="0.2" height="15.0" fill="rgb(239,183,29)" rx="2" ry="2" />
<text  x="299.29" y="543.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="266.7" y="469" width="0.3" height="15.0" fill="rgb(230,140,53)" rx="2" ry="2" />
<text  x="269.73" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="40.7" y="581" width="0.2" height="15.0" fill="rgb(223,166,9)" rx="2" ry="2" />
<text  x="43.66" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (15 samples, 0.28%)</title><rect x="44.4" y="597" width="3.3" height="15.0" fill="rgb(244,56,38)" rx="2" ry="2" />
<text  x="47.41" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (9 samples, 0.17%)</title><rect x="582.8" y="661" width="2.0" height="15.0" fill="rgb(209,159,14)" rx="2" ry="2" />
<text  x="585.80" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (581 samples, 10.86%)</title><rect x="959.3" y="693" width="128.1" height="15.0" fill="rgb(229,38,25)" rx="2" ry="2" />
<text  x="962.29" y="703.5" >service::storage..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.3" y="501" width="0.4" height="15.0" fill="rgb(226,128,0)" rx="2" ry="2" />
<text  x="50.27" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (3 samples, 0.06%)</title><rect x="791.0" y="613" width="0.7" height="15.0" fill="rgb(250,114,23)" rx="2" ry="2" />
<text  x="794.01" y="623.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (8 samples, 0.15%)</title><rect x="761.2" y="565" width="1.8" height="15.0" fill="rgb(232,104,27)" rx="2" ry="2" />
<text  x="764.23" y="575.5" ></text>
</g>
<g >
<title>cql3::operation::fill_prepare_context (1 samples, 0.02%)</title><rect x="55.9" y="741" width="0.2" height="15.0" fill="rgb(231,23,25)" rx="2" ry="2" />
<text  x="58.88" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="54.1" y="677" width="0.2" height="15.0" fill="rgb(236,67,17)" rx="2" ry="2" />
<text  x="57.11" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="39.3" y="613" width="0.3" height="15.0" fill="rgb(217,49,17)" rx="2" ry="2" />
<text  x="42.33" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="293.2" y="485" width="0.2" height="15.0" fill="rgb(210,113,18)" rx="2" ry="2" />
<text  x="296.20" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="854.3" y="629" width="0.2" height="15.0" fill="rgb(220,117,25)" rx="2" ry="2" />
<text  x="857.31" y="639.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="632.9" y="709" width="0.2" height="15.0" fill="rgb(225,159,13)" rx="2" ry="2" />
<text  x="635.86" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="77.9" y="693" width="0.3" height="15.0" fill="rgb(253,151,4)" rx="2" ry="2" />
<text  x="80.93" y="703.5" ></text>
</g>
<g >
<title>validation::validate_column_family (6 samples, 0.11%)</title><rect x="68.2" y="757" width="1.4" height="15.0" fill="rgb(218,157,46)" rx="2" ry="2" />
<text  x="71.23" y="767.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="854.7" y="661" width="0.3" height="15.0" fill="rgb(246,178,3)" rx="2" ry="2" />
<text  x="857.75" y="671.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (3 samples, 0.06%)</title><rect x="1157.1" y="757" width="0.7" height="15.0" fill="rgb(225,89,35)" rx="2" ry="2" />
<text  x="1160.14" y="767.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%)</title><rect x="101.5" y="277" width="0.3" height="15.0" fill="rgb(225,75,31)" rx="2" ry="2" />
<text  x="104.53" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="1083.5" y="661" width="2.0" height="15.0" fill="rgb(205,202,52)" rx="2" ry="2" />
<text  x="1086.47" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="22.1" y="549" width="0.3" height="15.0" fill="rgb(235,140,43)" rx="2" ry="2" />
<text  x="25.13" y="559.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="101.1" y="773" width="0.2" height="15.0" fill="rgb(224,188,35)" rx="2" ry="2" />
<text  x="104.09" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.11%)</title><rect x="676.5" y="741" width="1.4" height="15.0" fill="rgb(205,229,20)" rx="2" ry="2" />
<text  x="679.53" y="751.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%)</title><rect x="707.6" y="549" width="0.3" height="15.0" fill="rgb(233,159,24)" rx="2" ry="2" />
<text  x="710.63" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="713.6" y="741" width="1.1" height="15.0" fill="rgb(250,22,25)" rx="2" ry="2" />
<text  x="716.59" y="751.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="459.7" y="725" width="0.7" height="15.0" fill="rgb(223,221,29)" rx="2" ry="2" />
<text  x="462.72" y="735.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="645.9" y="677" width="0.6" height="15.0" fill="rgb(206,165,5)" rx="2" ry="2" />
<text  x="648.88" y="687.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="819.2" y="581" width="0.3" height="15.0" fill="rgb(243,12,11)" rx="2" ry="2" />
<text  x="822.24" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%)</title><rect x="969.7" y="629" width="1.9" height="15.0" fill="rgb(209,124,38)" rx="2" ry="2" />
<text  x="972.66" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="607.7" y="661" width="0.5" height="15.0" fill="rgb(214,200,36)" rx="2" ry="2" />
<text  x="610.72" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="605.7" y="613" width="0.3" height="15.0" fill="rgb(209,42,24)" rx="2" ry="2" />
<text  x="608.73" y="623.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%)</title><rect x="353.9" y="469" width="0.4" height="15.0" fill="rgb(233,171,51)" rx="2" ry="2" />
<text  x="356.85" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_startIndex (1 samples, 0.02%)</title><rect x="25.7" y="565" width="0.2" height="15.0" fill="rgb(233,137,53)" rx="2" ry="2" />
<text  x="28.66" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="911.9" y="677" width="0.2" height="15.0" fill="rgb(248,76,32)" rx="2" ry="2" />
<text  x="914.87" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="76.6" y="613" width="0.2" height="15.0" fill="rgb(220,91,26)" rx="2" ry="2" />
<text  x="79.61" y="623.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="802.0" y="533" width="0.3" height="15.0" fill="rgb(211,69,53)" rx="2" ry="2" />
<text  x="805.03" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="452.7" y="565" width="0.2" height="15.0" fill="rgb(227,105,54)" rx="2" ry="2" />
<text  x="455.67" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (4 samples, 0.07%)</title><rect x="88.1" y="773" width="0.9" height="15.0" fill="rgb(226,61,2)" rx="2" ry="2" />
<text  x="91.08" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="213.4" y="501" width="2.4" height="15.0" fill="rgb(248,73,37)" rx="2" ry="2" />
<text  x="216.36" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%)</title><rect x="735.9" y="757" width="2.0" height="15.0" fill="rgb(243,228,48)" rx="2" ry="2" />
<text  x="738.87" y="767.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="49.0" y="469" width="0.3" height="15.0" fill="rgb(246,0,24)" rx="2" ry="2" />
<text  x="52.04" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (6 samples, 0.11%)</title><rect x="361.8" y="469" width="1.3" height="15.0" fill="rgb(234,127,27)" rx="2" ry="2" />
<text  x="364.79" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (3 samples, 0.06%)</title><rect x="50.1" y="629" width="0.7" height="15.0" fill="rgb(215,72,51)" rx="2" ry="2" />
<text  x="53.14" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="44.2" y="597" width="0.2" height="15.0" fill="rgb(247,116,30)" rx="2" ry="2" />
<text  x="47.19" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="75.7" y="597" width="0.5" height="15.0" fill="rgb(217,40,17)" rx="2" ry="2" />
<text  x="78.73" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%)</title><rect x="66.2" y="645" width="0.3" height="15.0" fill="rgb(209,85,46)" rx="2" ry="2" />
<text  x="69.24" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="138.6" y="757" width="0.2" height="15.0" fill="rgb(220,37,1)" rx="2" ry="2" />
<text  x="141.59" y="767.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="710.3" y="773" width="0.2" height="15.0" fill="rgb(208,121,45)" rx="2" ry="2" />
<text  x="713.28" y="783.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.7" y="741" width="0.2" height="15.0" fill="rgb(242,171,36)" rx="2" ry="2" />
<text  x="142.69" y="751.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%)</title><rect x="1168.4" y="757" width="0.2" height="15.0" fill="rgb(210,11,18)" rx="2" ry="2" />
<text  x="1171.39" y="767.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="48.4" y="613" width="0.2" height="15.0" fill="rgb(250,104,11)" rx="2" ry="2" />
<text  x="51.38" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (22 samples, 0.41%)</title><rect x="268.1" y="469" width="4.8" height="15.0" fill="rgb(244,98,4)" rx="2" ry="2" />
<text  x="271.06" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (3 samples, 0.06%)</title><rect x="714.7" y="757" width="0.7" height="15.0" fill="rgb(226,74,3)" rx="2" ry="2" />
<text  x="717.69" y="767.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="736.5" y="725" width="0.9" height="15.0" fill="rgb(250,171,9)" rx="2" ry="2" />
<text  x="739.53" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="605.5" y="613" width="0.2" height="15.0" fill="rgb(252,135,46)" rx="2" ry="2" />
<text  x="608.51" y="623.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.09%)</title><rect x="45.1" y="565" width="1.1" height="15.0" fill="rgb(248,42,11)" rx="2" ry="2" />
<text  x="48.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (3 samples, 0.06%)</title><rect x="63.4" y="693" width="0.6" height="15.0" fill="rgb(223,175,18)" rx="2" ry="2" />
<text  x="66.38" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1162.2" y="789" width="0.2" height="15.0" fill="rgb(215,28,38)" rx="2" ry="2" />
<text  x="1165.21" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (15 samples, 0.28%)</title><rect x="600.0" y="597" width="3.3" height="15.0" fill="rgb(247,23,38)" rx="2" ry="2" />
<text  x="603.00" y="607.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="707.2" y="789" width="0.2" height="15.0" fill="rgb(225,4,18)" rx="2" ry="2" />
<text  x="710.19" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (8 samples, 0.15%)</title><rect x="988.6" y="613" width="1.8" height="15.0" fill="rgb(229,168,29)" rx="2" ry="2" />
<text  x="991.63" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="515.7" y="517" width="0.5" height="15.0" fill="rgb(251,199,43)" rx="2" ry="2" />
<text  x="518.75" y="527.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%)</title><rect x="55.2" y="757" width="0.2" height="15.0" fill="rgb(240,150,54)" rx="2" ry="2" />
<text  x="58.21" y="767.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (1 samples, 0.02%)</title><rect x="134.4" y="757" width="0.2" height="15.0" fill="rgb(207,176,10)" rx="2" ry="2" />
<text  x="137.40" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%)</title><rect x="1031.9" y="565" width="0.4" height="15.0" fill="rgb(235,7,0)" rx="2" ry="2" />
<text  x="1034.86" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.67%)</title><rect x="1118.3" y="757" width="8.0" height="15.0" fill="rgb(246,179,34)" rx="2" ry="2" />
<text  x="1121.32" y="767.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.11%)</title><rect x="1006.1" y="549" width="1.3" height="15.0" fill="rgb(228,140,11)" rx="2" ry="2" />
<text  x="1009.05" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%)</title><rect x="62.7" y="613" width="0.2" height="15.0" fill="rgb(216,159,54)" rx="2" ry="2" />
<text  x="65.71" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="49.3" y="629" width="0.2" height="15.0" fill="rgb(218,134,10)" rx="2" ry="2" />
<text  x="52.26" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.26%)</title><rect x="74.8" y="853" width="3.1" height="15.0" fill="rgb(222,146,17)" rx="2" ry="2" />
<text  x="77.84" y="863.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (2 samples, 0.04%)</title><rect x="712.9" y="757" width="0.5" height="15.0" fill="rgb(253,56,52)" rx="2" ry="2" />
<text  x="715.93" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (9 samples, 0.17%)</title><rect x="550.2" y="549" width="1.9" height="15.0" fill="rgb(231,123,12)" rx="2" ry="2" />
<text  x="553.15" y="559.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="618.5" y="709" width="0.2" height="15.0" fill="rgb(237,212,30)" rx="2" ry="2" />
<text  x="621.53" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="300.0" y="581" width="0.3" height="15.0" fill="rgb(249,170,8)" rx="2" ry="2" />
<text  x="303.04" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%)</title><rect x="874.6" y="661" width="0.4" height="15.0" fill="rgb(252,133,44)" rx="2" ry="2" />
<text  x="877.60" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="843.1" y="741" width="0.2" height="15.0" fill="rgb(236,184,49)" rx="2" ry="2" />
<text  x="846.06" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (243 samples, 4.54%)</title><rect x="220.4" y="533" width="53.6" height="15.0" fill="rgb(210,75,3)" rx="2" ry="2" />
<text  x="223.41" y="543.5" >parti..</text>
</g>
<g >
<title>schema_registry::learn (4 samples, 0.07%)</title><rect x="102.6" y="773" width="0.9" height="15.0" fill="rgb(211,145,28)" rx="2" ry="2" />
<text  x="105.64" y="783.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (2 samples, 0.04%)</title><rect x="730.1" y="741" width="0.5" height="15.0" fill="rgb(210,164,35)" rx="2" ry="2" />
<text  x="733.13" y="751.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="54.1" y="661" width="0.2" height="15.0" fill="rgb(218,145,43)" rx="2" ry="2" />
<text  x="57.11" y="671.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (8 samples, 0.15%)</title><rect x="70.4" y="709" width="1.8" height="15.0" fill="rgb(212,156,9)" rx="2" ry="2" />
<text  x="73.43" y="719.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.07%)</title><rect x="1118.8" y="517" width="0.8" height="15.0" fill="rgb(206,184,48)" rx="2" ry="2" />
<text  x="1121.76" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (3 samples, 0.06%)</title><rect x="838.4" y="709" width="0.7" height="15.0" fill="rgb(222,138,9)" rx="2" ry="2" />
<text  x="841.43" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.13%)</title><rect x="952.5" y="661" width="1.5" height="15.0" fill="rgb(250,27,34)" rx="2" ry="2" />
<text  x="955.46" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (6 samples, 0.11%)</title><rect x="976.9" y="629" width="1.4" height="15.0" fill="rgb(229,190,11)" rx="2" ry="2" />
<text  x="979.94" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::resize (1 samples, 0.02%)</title><rect x="74.0" y="773" width="0.2" height="15.0" fill="rgb(249,8,29)" rx="2" ry="2" />
<text  x="76.96" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.07%)</title><rect x="96.7" y="773" width="0.9" height="15.0" fill="rgb(227,141,17)" rx="2" ry="2" />
<text  x="99.68" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="581" width="0.2" height="15.0" fill="rgb(249,130,4)" rx="2" ry="2" />
<text  x="142.47" y="591.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (37 samples, 0.69%)</title><rect x="514.6" y="549" width="8.2" height="15.0" fill="rgb(205,159,22)" rx="2" ry="2" />
<text  x="517.64" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="673.9" y="693" width="0.4" height="15.0" fill="rgb(229,133,46)" rx="2" ry="2" />
<text  x="676.89" y="703.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (10 samples, 0.19%)</title><rect x="808.7" y="453" width="2.2" height="15.0" fill="rgb(224,111,3)" rx="2" ry="2" />
<text  x="811.65" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.02%)</title><rect x="20.6" y="613" width="0.2" height="15.0" fill="rgb(223,101,7)" rx="2" ry="2" />
<text  x="23.59" y="623.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (6 samples, 0.11%)</title><rect x="361.8" y="485" width="1.3" height="15.0" fill="rgb(248,89,12)" rx="2" ry="2" />
<text  x="364.79" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (3 samples, 0.06%)</title><rect x="77.1" y="725" width="0.6" height="15.0" fill="rgb(233,102,7)" rx="2" ry="2" />
<text  x="80.05" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.7" y="517" width="0.2" height="15.0" fill="rgb(237,86,37)" rx="2" ry="2" />
<text  x="52.70" y="527.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (2 samples, 0.04%)</title><rect x="812.6" y="437" width="0.5" height="15.0" fill="rgb(239,102,43)" rx="2" ry="2" />
<text  x="815.62" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="954.0" y="677" width="0.4" height="15.0" fill="rgb(210,29,6)" rx="2" ry="2" />
<text  x="957.00" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="883.6" y="773" width="0.5" height="15.0" fill="rgb(209,107,10)" rx="2" ry="2" />
<text  x="886.64" y="783.5" ></text>
</g>
<g >
<title>free (4 samples, 0.07%)</title><rect x="92.5" y="725" width="0.9" height="15.0" fill="rgb(232,94,8)" rx="2" ry="2" />
<text  x="95.49" y="735.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (32 samples, 0.60%)</title><rect x="126.7" y="725" width="7.0" height="15.0" fill="rgb(231,191,25)" rx="2" ry="2" />
<text  x="129.68" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (3 samples, 0.06%)</title><rect x="1155.8" y="757" width="0.7" height="15.0" fill="rgb(205,119,49)" rx="2" ry="2" />
<text  x="1158.81" y="767.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1020.8" y="453" width="0.3" height="15.0" fill="rgb(226,4,6)" rx="2" ry="2" />
<text  x="1023.83" y="463.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="859.8" y="741" width="2.4" height="15.0" fill="rgb(224,150,9)" rx="2" ry="2" />
<text  x="862.82" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="552.8" y="581" width="0.2" height="15.0" fill="rgb(242,2,38)" rx="2" ry="2" />
<text  x="555.80" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::has_supporting_index (1 samples, 0.02%)</title><rect x="60.5" y="677" width="0.2" height="15.0" fill="rgb(215,105,24)" rx="2" ry="2" />
<text  x="63.51" y="687.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (4 samples, 0.07%)</title><rect x="20.4" y="645" width="0.8" height="15.0" fill="rgb(208,180,3)" rx="2" ry="2" />
<text  x="23.37" y="655.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1059.2" y="613" width="0.2" height="15.0" fill="rgb(206,75,8)" rx="2" ry="2" />
<text  x="1062.21" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="34.3" y="517" width="0.4" height="15.0" fill="rgb(249,97,43)" rx="2" ry="2" />
<text  x="37.26" y="527.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="295.8" y="501" width="0.3" height="15.0" fill="rgb(214,13,49)" rx="2" ry="2" />
<text  x="298.85" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="340.4" y="565" width="0.2" height="15.0" fill="rgb(218,26,11)" rx="2" ry="2" />
<text  x="343.40" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_tokens (1 samples, 0.02%)</title><rect x="74.6" y="709" width="0.2" height="15.0" fill="rgb(211,201,47)" rx="2" ry="2" />
<text  x="77.62" y="719.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (2 samples, 0.04%)</title><rect x="618.7" y="709" width="0.5" height="15.0" fill="rgb(234,33,25)" rx="2" ry="2" />
<text  x="621.75" y="719.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (7 samples, 0.13%)</title><rect x="455.1" y="661" width="1.5" height="15.0" fill="rgb(219,49,19)" rx="2" ry="2" />
<text  x="458.09" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="489.5" y="565" width="0.2" height="15.0" fill="rgb(252,112,5)" rx="2" ry="2" />
<text  x="492.50" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.09%)</title><rect x="1038.5" y="581" width="1.1" height="15.0" fill="rgb(211,155,41)" rx="2" ry="2" />
<text  x="1041.47" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (5 samples, 0.09%)</title><rect x="206.7" y="549" width="1.1" height="15.0" fill="rgb(212,204,41)" rx="2" ry="2" />
<text  x="209.74" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="943.6" y="693" width="0.3" height="15.0" fill="rgb(215,67,18)" rx="2" ry="2" />
<text  x="946.63" y="703.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (3 samples, 0.06%)</title><rect x="433.0" y="533" width="0.7" height="15.0" fill="rgb(243,94,20)" rx="2" ry="2" />
<text  x="436.04" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="542.7" y="533" width="0.2" height="15.0" fill="rgb(206,166,11)" rx="2" ry="2" />
<text  x="545.65" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (35 samples, 0.65%)</title><rect x="872.6" y="709" width="7.7" height="15.0" fill="rgb(222,187,54)" rx="2" ry="2" />
<text  x="875.61" y="719.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (2 samples, 0.04%)</title><rect x="1094.5" y="661" width="0.4" height="15.0" fill="rgb(214,158,34)" rx="2" ry="2" />
<text  x="1097.50" y="671.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="74.6" y="853" width="0.2" height="15.0" fill="rgb(219,79,32)" rx="2" ry="2" />
<text  x="77.62" y="863.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="101.1" y="757" width="0.2" height="15.0" fill="rgb(254,116,49)" rx="2" ry="2" />
<text  x="104.09" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="101.5" y="37" width="0.3" height="15.0" fill="rgb(236,11,32)" rx="2" ry="2" />
<text  x="104.53" y="47.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="35.6" y="533" width="0.2" height="15.0" fill="rgb(225,17,13)" rx="2" ry="2" />
<text  x="38.59" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="1127.4" y="597" width="2.2" height="15.0" fill="rgb(218,124,53)" rx="2" ry="2" />
<text  x="1130.36" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (3 samples, 0.06%)</title><rect x="843.3" y="741" width="0.6" height="15.0" fill="rgb(240,54,45)" rx="2" ry="2" />
<text  x="846.28" y="751.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (12 samples, 0.22%)</title><rect x="525.2" y="629" width="2.7" height="15.0" fill="rgb(244,194,0)" rx="2" ry="2" />
<text  x="528.23" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1046.2" y="613" width="0.2" height="15.0" fill="rgb(249,213,23)" rx="2" ry="2" />
<text  x="1049.19" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="102.6" y="549" width="0.3" height="15.0" fill="rgb(243,52,37)" rx="2" ry="2" />
<text  x="105.64" y="559.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="17.1" y="821" width="0.2" height="15.0" fill="rgb(227,17,52)" rx="2" ry="2" />
<text  x="20.06" y="831.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (20 samples, 0.37%)</title><rect x="486.2" y="581" width="4.4" height="15.0" fill="rgb(249,81,1)" rx="2" ry="2" />
<text  x="489.19" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (63 samples, 1.18%)</title><rect x="1145.7" y="789" width="13.9" height="15.0" fill="rgb(240,147,21)" rx="2" ry="2" />
<text  x="1148.67" y="799.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="17.3" y="597" width="0.2" height="15.0" fill="rgb(232,113,7)" rx="2" ry="2" />
<text  x="20.28" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="450.9" y="581" width="0.2" height="15.0" fill="rgb(239,116,2)" rx="2" ry="2" />
<text  x="453.90" y="591.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="773.6" y="613" width="0.2" height="15.0" fill="rgb(211,60,52)" rx="2" ry="2" />
<text  x="776.58" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="709.2" y="789" width="0.2" height="15.0" fill="rgb(229,128,13)" rx="2" ry="2" />
<text  x="712.18" y="799.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%)</title><rect x="1136.0" y="549" width="0.2" height="15.0" fill="rgb(220,69,22)" rx="2" ry="2" />
<text  x="1138.96" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (64 samples, 1.20%)</title><rect x="897.8" y="677" width="14.1" height="15.0" fill="rgb(221,48,28)" rx="2" ry="2" />
<text  x="900.76" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.07%)</title><rect x="830.3" y="629" width="0.8" height="15.0" fill="rgb(228,22,3)" rx="2" ry="2" />
<text  x="833.27" y="639.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="575.7" y="709" width="0.9" height="15.0" fill="rgb(206,224,44)" rx="2" ry="2" />
<text  x="578.74" y="719.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (82 samples, 1.53%)</title><rect x="183.4" y="613" width="18.0" height="15.0" fill="rgb(232,137,29)" rx="2" ry="2" />
<text  x="186.36" y="623.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%)</title><rect x="650.9" y="725" width="1.6" height="15.0" fill="rgb(227,78,13)" rx="2" ry="2" />
<text  x="653.95" y="735.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (2 samples, 0.04%)</title><rect x="1124.9" y="581" width="0.5" height="15.0" fill="rgb(223,75,19)" rx="2" ry="2" />
<text  x="1127.93" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="731.0" y="805" width="0.5" height="15.0" fill="rgb(213,2,31)" rx="2" ry="2" />
<text  x="734.01" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1087.0" y="661" width="0.2" height="15.0" fill="rgb(246,218,13)" rx="2" ry="2" />
<text  x="1090.00" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1109.1" y="677" width="0.6" height="15.0" fill="rgb(247,190,38)" rx="2" ry="2" />
<text  x="1112.05" y="687.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="485" width="0.2" height="15.0" fill="rgb(206,113,12)" rx="2" ry="2" />
<text  x="104.97" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (4 samples, 0.07%)</title><rect x="281.3" y="533" width="0.9" height="15.0" fill="rgb(237,198,45)" rx="2" ry="2" />
<text  x="284.29" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (8 samples, 0.15%)</title><rect x="184.0" y="597" width="1.8" height="15.0" fill="rgb(239,134,24)" rx="2" ry="2" />
<text  x="187.02" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="39.1" y="565" width="0.2" height="15.0" fill="rgb(208,88,26)" rx="2" ry="2" />
<text  x="42.11" y="575.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.09%)</title><rect x="94.0" y="709" width="1.1" height="15.0" fill="rgb(230,123,22)" rx="2" ry="2" />
<text  x="97.03" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (10 samples, 0.19%)</title><rect x="857.2" y="693" width="2.2" height="15.0" fill="rgb(228,182,7)" rx="2" ry="2" />
<text  x="860.17" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="681.6" y="757" width="0.2" height="15.0" fill="rgb(217,203,22)" rx="2" ry="2" />
<text  x="684.61" y="767.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="836.9" y="597" width="0.2" height="15.0" fill="rgb(212,105,24)" rx="2" ry="2" />
<text  x="839.88" y="607.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (26 samples, 0.49%)</title><rect x="757.9" y="677" width="5.8" height="15.0" fill="rgb(249,205,8)" rx="2" ry="2" />
<text  x="760.92" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (5 samples, 0.09%)</title><rect x="20.1" y="709" width="1.1" height="15.0" fill="rgb(226,144,15)" rx="2" ry="2" />
<text  x="23.15" y="719.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="873.1" y="629" width="0.2" height="15.0" fill="rgb(248,27,13)" rx="2" ry="2" />
<text  x="876.05" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="937.5" y="709" width="0.2" height="15.0" fill="rgb(206,13,30)" rx="2" ry="2" />
<text  x="940.46" y="719.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="820.8" y="581" width="0.2" height="15.0" fill="rgb(240,77,6)" rx="2" ry="2" />
<text  x="823.78" y="591.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="400.2" y="453" width="0.2" height="15.0" fill="rgb(234,45,44)" rx="2" ry="2" />
<text  x="403.17" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.11%)</title><rect x="132.4" y="693" width="1.3" height="15.0" fill="rgb(214,82,37)" rx="2" ry="2" />
<text  x="135.41" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="853.0" y="693" width="2.0" height="15.0" fill="rgb(244,218,9)" rx="2" ry="2" />
<text  x="855.98" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.11%)</title><rect x="686.7" y="773" width="1.3" height="15.0" fill="rgb(249,104,18)" rx="2" ry="2" />
<text  x="689.68" y="783.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="60.1" y="613" width="0.2" height="15.0" fill="rgb(218,128,34)" rx="2" ry="2" />
<text  x="63.07" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (2 samples, 0.04%)</title><rect x="707.6" y="805" width="0.5" height="15.0" fill="rgb(244,97,25)" rx="2" ry="2" />
<text  x="710.63" y="815.5" ></text>
</g>
<g >
<title>validation::validate_column_family (36 samples, 0.67%)</title><rect x="829.2" y="693" width="7.9" height="15.0" fill="rgb(233,214,42)" rx="2" ry="2" />
<text  x="832.16" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="38.5" y="453" width="0.4" height="15.0" fill="rgb(217,71,2)" rx="2" ry="2" />
<text  x="41.45" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="782.0" y="629" width="0.2" height="15.0" fill="rgb(252,103,16)" rx="2" ry="2" />
<text  x="784.96" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (47 samples, 0.88%)</title><rect x="23.0" y="645" width="10.4" height="15.0" fill="rgb(240,121,18)" rx="2" ry="2" />
<text  x="26.01" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="135.3" y="757" width="0.2" height="15.0" fill="rgb(222,6,30)" rx="2" ry="2" />
<text  x="138.28" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.09%)</title><rect x="173.7" y="677" width="1.1" height="15.0" fill="rgb(246,175,46)" rx="2" ry="2" />
<text  x="176.66" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%)</title><rect x="549.5" y="549" width="0.7" height="15.0" fill="rgb(231,120,54)" rx="2" ry="2" />
<text  x="552.49" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="69.8" y="741" width="0.2" height="15.0" fill="rgb(211,188,47)" rx="2" ry="2" />
<text  x="72.77" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (297 samples, 5.55%)</title><rect x="216.9" y="549" width="65.5" height="15.0" fill="rgb(221,12,2)" rx="2" ry="2" />
<text  x="219.89" y="559.5" >partiti..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (47 samples, 0.88%)</title><rect x="23.0" y="677" width="10.4" height="15.0" fill="rgb(209,220,1)" rx="2" ry="2" />
<text  x="26.01" y="687.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="33.8" y="517" width="0.2" height="15.0" fill="rgb(210,193,8)" rx="2" ry="2" />
<text  x="36.82" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.09%)</title><rect x="1006.3" y="517" width="1.1" height="15.0" fill="rgb(225,188,19)" rx="2" ry="2" />
<text  x="1009.27" y="527.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%)</title><rect x="468.1" y="645" width="0.2" height="15.0" fill="rgb(241,17,24)" rx="2" ry="2" />
<text  x="471.10" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%)</title><rect x="58.5" y="693" width="0.2" height="15.0" fill="rgb(234,221,17)" rx="2" ry="2" />
<text  x="61.52" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%)</title><rect x="755.3" y="597" width="0.4" height="15.0" fill="rgb(215,13,45)" rx="2" ry="2" />
<text  x="758.27" y="607.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1119.4" y="469" width="0.2" height="15.0" fill="rgb(229,186,47)" rx="2" ry="2" />
<text  x="1122.42" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="139.2" y="757" width="0.3" height="15.0" fill="rgb(223,85,40)" rx="2" ry="2" />
<text  x="142.25" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (6 samples, 0.11%)</title><rect x="588.8" y="725" width="1.3" height="15.0" fill="rgb(239,60,44)" rx="2" ry="2" />
<text  x="591.75" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (11 samples, 0.21%)</title><rect x="982.9" y="581" width="2.4" height="15.0" fill="rgb(243,159,12)" rx="2" ry="2" />
<text  x="985.89" y="591.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="583.0" y="645" width="1.8" height="15.0" fill="rgb(253,179,46)" rx="2" ry="2" />
<text  x="586.02" y="655.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="59.8" y="581" width="0.3" height="15.0" fill="rgb(219,26,46)" rx="2" ry="2" />
<text  x="62.85" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="102.9" y="661" width="0.2" height="15.0" fill="rgb(206,202,38)" rx="2" ry="2" />
<text  x="105.86" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.07%)</title><rect x="126.7" y="709" width="0.9" height="15.0" fill="rgb(208,62,13)" rx="2" ry="2" />
<text  x="129.68" y="719.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (27 samples, 0.50%)</title><rect x="1130.0" y="597" width="6.0" height="15.0" fill="rgb(220,220,5)" rx="2" ry="2" />
<text  x="1133.01" y="607.5" ></text>
</g>
<g >
<title>database::flush (1 samples, 0.02%)</title><rect x="102.4" y="629" width="0.2" height="15.0" fill="rgb(247,88,6)" rx="2" ry="2" />
<text  x="105.41" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="710.1" y="773" width="0.2" height="15.0" fill="rgb(244,112,40)" rx="2" ry="2" />
<text  x="713.06" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="621.6" y="693" width="0.5" height="15.0" fill="rgb(231,33,47)" rx="2" ry="2" />
<text  x="624.61" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.07%)</title><rect x="806.4" y="485" width="0.9" height="15.0" fill="rgb(239,23,4)" rx="2" ry="2" />
<text  x="809.44" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="954.7" y="693" width="2.4" height="15.0" fill="rgb(214,179,4)" rx="2" ry="2" />
<text  x="957.66" y="703.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (6 samples, 0.11%)</title><rect x="11.1" y="885" width="1.3" height="15.0" fill="rgb(230,173,42)" rx="2" ry="2" />
<text  x="14.10" y="895.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (5 samples, 0.09%)</title><rect x="101.3" y="725" width="1.1" height="15.0" fill="rgb(231,113,34)" rx="2" ry="2" />
<text  x="104.31" y="735.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (25 samples, 0.47%)</title><rect x="1017.3" y="485" width="5.5" height="15.0" fill="rgb(244,205,31)" rx="2" ry="2" />
<text  x="1020.30" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.8" y="357" width="0.3" height="15.0" fill="rgb(228,8,29)" rx="2" ry="2" />
<text  x="49.83" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="622.5" y="709" width="0.2" height="15.0" fill="rgb(227,121,50)" rx="2" ry="2" />
<text  x="625.50" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (92 samples, 1.72%)</title><rect x="913.9" y="709" width="20.2" height="15.0" fill="rgb(231,190,19)" rx="2" ry="2" />
<text  x="916.86" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%)</title><rect x="58.3" y="709" width="0.4" height="15.0" fill="rgb(213,135,23)" rx="2" ry="2" />
<text  x="61.30" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="872.8" y="629" width="0.3" height="15.0" fill="rgb(253,220,44)" rx="2" ry="2" />
<text  x="875.83" y="639.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,317 samples, 24.62%)</title><rect x="169.2" y="725" width="290.5" height="15.0" fill="rgb(227,11,46)" rx="2" ry="2" />
<text  x="172.24" y="735.5" >query::consume_page&lt;</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.11%)</title><rect x="806.0" y="501" width="1.3" height="15.0" fill="rgb(241,56,24)" rx="2" ry="2" />
<text  x="809.00" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="782.6" y="645" width="0.9" height="15.0" fill="rgb(224,8,42)" rx="2" ry="2" />
<text  x="785.62" y="655.5" ></text>
</g>
<g >
<title>query::result::builder::builder (17 samples, 0.32%)</title><rect x="628.7" y="725" width="3.7" height="15.0" fill="rgb(211,222,39)" rx="2" ry="2" />
<text  x="631.67" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="10.9" y="869" width="0.2" height="15.0" fill="rgb(233,131,39)" rx="2" ry="2" />
<text  x="13.88" y="879.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="816.1" y="549" width="0.3" height="15.0" fill="rgb(254,76,46)" rx="2" ry="2" />
<text  x="819.15" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="616.8" y="677" width="0.4" height="15.0" fill="rgb(250,126,28)" rx="2" ry="2" />
<text  x="619.76" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="690.0" y="757" width="0.2" height="15.0" fill="rgb(248,184,24)" rx="2" ry="2" />
<text  x="692.99" y="767.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (9 samples, 0.17%)</title><rect x="546.6" y="517" width="2.0" height="15.0" fill="rgb(212,189,36)" rx="2" ry="2" />
<text  x="549.62" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="707.4" y="565" width="0.2" height="15.0" fill="rgb(229,113,35)" rx="2" ry="2" />
<text  x="710.41" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (9 samples, 0.17%)</title><rect x="745.8" y="613" width="2.0" height="15.0" fill="rgb(211,17,15)" rx="2" ry="2" />
<text  x="748.79" y="623.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="103.3" y="613" width="0.2" height="15.0" fill="rgb(253,69,46)" rx="2" ry="2" />
<text  x="106.30" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (14 samples, 0.26%)</title><rect x="235.0" y="405" width="3.1" height="15.0" fill="rgb(208,105,13)" rx="2" ry="2" />
<text  x="237.97" y="415.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="1189.6" y="885" width="0.2" height="15.0" fill="rgb(230,9,28)" rx="2" ry="2" />
<text  x="1192.56" y="895.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="62.1" y="565" width="0.2" height="15.0" fill="rgb(219,107,31)" rx="2" ry="2" />
<text  x="65.05" y="575.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="651.6" y="693" width="0.7" height="15.0" fill="rgb(244,177,13)" rx="2" ry="2" />
<text  x="654.61" y="703.5" ></text>
</g>
<g >
<title>row_cache::make_reader (1 samples, 0.02%)</title><rect x="464.1" y="661" width="0.3" height="15.0" fill="rgb(206,228,37)" rx="2" ry="2" />
<text  x="467.13" y="671.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="139.5" y="693" width="0.2" height="15.0" fill="rgb(221,84,17)" rx="2" ry="2" />
<text  x="142.47" y="703.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (12 samples, 0.22%)</title><rect x="12.6" y="885" width="2.7" height="15.0" fill="rgb(229,201,36)" rx="2" ry="2" />
<text  x="15.65" y="895.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="44.2" y="549" width="0.2" height="15.0" fill="rgb(245,132,31)" rx="2" ry="2" />
<text  x="47.19" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="1078.0" y="597" width="0.4" height="15.0" fill="rgb(222,119,26)" rx="2" ry="2" />
<text  x="1080.96" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.07%)</title><rect x="34.7" y="581" width="0.9" height="15.0" fill="rgb(244,109,39)" rx="2" ry="2" />
<text  x="37.70" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="67.6" y="677" width="0.2" height="15.0" fill="rgb(227,8,2)" rx="2" ry="2" />
<text  x="70.57" y="687.5" ></text>
</g>
<g >
<title>auth::get_permissions (7 samples, 0.13%)</title><rect x="70.7" y="677" width="1.5" height="15.0" fill="rgb(247,153,17)" rx="2" ry="2" />
<text  x="73.65" y="687.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="880.1" y="581" width="0.2" height="15.0" fill="rgb(236,169,45)" rx="2" ry="2" />
<text  x="883.11" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (17 samples, 0.32%)</title><rect x="321.4" y="597" width="3.8" height="15.0" fill="rgb(252,154,43)" rx="2" ry="2" />
<text  x="324.43" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="862.9" y="757" width="0.2" height="15.0" fill="rgb(212,110,46)" rx="2" ry="2" />
<text  x="865.91" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (2 samples, 0.04%)</title><rect x="66.0" y="693" width="0.5" height="15.0" fill="rgb(209,112,4)" rx="2" ry="2" />
<text  x="69.02" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="667.7" y="677" width="0.2" height="15.0" fill="rgb(232,74,24)" rx="2" ry="2" />
<text  x="670.71" y="687.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (6 samples, 0.11%)</title><rect x="357.4" y="485" width="1.3" height="15.0" fill="rgb(230,168,24)" rx="2" ry="2" />
<text  x="360.38" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%)</title><rect x="701.5" y="789" width="0.2" height="15.0" fill="rgb(230,123,24)" rx="2" ry="2" />
<text  x="704.46" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="725.9" y="757" width="0.3" height="15.0" fill="rgb(246,172,3)" rx="2" ry="2" />
<text  x="728.94" y="767.5" ></text>
</g>
<g >
<title>[[vdso]] (25 samples, 0.47%)</title><rect x="1171.7" y="917" width="5.5" height="15.0" fill="rgb(229,19,39)" rx="2" ry="2" />
<text  x="1174.69" y="927.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="270.0" y="437" width="0.5" height="15.0" fill="rgb(232,94,12)" rx="2" ry="2" />
<text  x="273.04" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.07%)</title><rect x="717.3" y="789" width="0.9" height="15.0" fill="rgb(221,190,34)" rx="2" ry="2" />
<text  x="720.34" y="799.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="932.4" y="645" width="0.2" height="15.0" fill="rgb(238,206,29)" rx="2" ry="2" />
<text  x="935.39" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1106.4" y="725" width="0.2" height="15.0" fill="rgb(242,9,26)" rx="2" ry="2" />
<text  x="1109.41" y="735.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%)</title><rect x="21.2" y="709" width="0.3" height="15.0" fill="rgb(237,172,53)" rx="2" ry="2" />
<text  x="24.25" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="667.9" y="661" width="0.3" height="15.0" fill="rgb(251,14,53)" rx="2" ry="2" />
<text  x="670.93" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.09%)</title><rect x="1088.1" y="709" width="1.1" height="15.0" fill="rgb(245,114,45)" rx="2" ry="2" />
<text  x="1091.10" y="719.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.19%)</title><rect x="877.7" y="629" width="2.2" height="15.0" fill="rgb(215,130,24)" rx="2" ry="2" />
<text  x="880.69" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1129.3" y="565" width="0.3" height="15.0" fill="rgb(219,82,42)" rx="2" ry="2" />
<text  x="1132.35" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="609.7" y="645" width="0.4" height="15.0" fill="rgb(206,81,16)" rx="2" ry="2" />
<text  x="612.70" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%)</title><rect x="272.2" y="453" width="0.7" height="15.0" fill="rgb(252,149,26)" rx="2" ry="2" />
<text  x="275.25" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="829.6" y="661" width="0.2" height="15.0" fill="rgb(217,162,26)" rx="2" ry="2" />
<text  x="832.60" y="671.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="102.4" y="725" width="0.2" height="15.0" fill="rgb(243,64,24)" rx="2" ry="2" />
<text  x="105.41" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="45.3" y="517" width="0.4" height="15.0" fill="rgb(247,106,7)" rx="2" ry="2" />
<text  x="48.29" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="498.3" y="629" width="0.5" height="15.0" fill="rgb(220,218,19)" rx="2" ry="2" />
<text  x="501.32" y="639.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="204.1" y="533" width="0.2" height="15.0" fill="rgb(223,147,53)" rx="2" ry="2" />
<text  x="207.09" y="543.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="203.0" y="549" width="0.4" height="15.0" fill="rgb(208,78,24)" rx="2" ry="2" />
<text  x="205.99" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="345.3" y="565" width="0.4" height="15.0" fill="rgb(248,225,39)" rx="2" ry="2" />
<text  x="348.25" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="95.6" y="757" width="0.2" height="15.0" fill="rgb(249,189,9)" rx="2" ry="2" />
<text  x="98.58" y="767.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="122.7" y="709" width="0.4" height="15.0" fill="rgb(227,200,33)" rx="2" ry="2" />
<text  x="125.71" y="719.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="36.0" y="613" width="0.2" height="15.0" fill="rgb(225,79,21)" rx="2" ry="2" />
<text  x="39.03" y="623.5" ></text>
</g>
<g >
<title>seastar::async&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="730.8" y="693" width="0.2" height="15.0" fill="rgb(210,206,29)" rx="2" ry="2" />
<text  x="733.79" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="590.7" y="661" width="0.3" height="15.0" fill="rgb(221,16,33)" rx="2" ry="2" />
<text  x="593.74" y="671.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="77.9" y="677" width="0.3" height="15.0" fill="rgb(224,41,25)" rx="2" ry="2" />
<text  x="80.93" y="687.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (4 samples, 0.07%)</title><rect x="570.7" y="565" width="0.8" height="15.0" fill="rgb(238,66,28)" rx="2" ry="2" />
<text  x="573.67" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="705.6" y="757" width="0.7" height="15.0" fill="rgb(229,212,22)" rx="2" ry="2" />
<text  x="708.65" y="767.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="101.5" y="101" width="0.3" height="15.0" fill="rgb(245,80,53)" rx="2" ry="2" />
<text  x="104.53" y="111.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1034.7" y="565" width="0.2" height="15.0" fill="rgb(206,174,2)" rx="2" ry="2" />
<text  x="1037.73" y="575.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="505.6" y="565" width="0.2" height="15.0" fill="rgb(250,157,1)" rx="2" ry="2" />
<text  x="508.60" y="575.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (13 samples, 0.24%)</title><rect x="735.4" y="773" width="2.9" height="15.0" fill="rgb(248,161,44)" rx="2" ry="2" />
<text  x="738.42" y="783.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (8 samples, 0.15%)</title><rect x="75.1" y="773" width="1.7" height="15.0" fill="rgb(221,78,51)" rx="2" ry="2" />
<text  x="78.07" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="44.8" y="565" width="0.3" height="15.0" fill="rgb(224,56,52)" rx="2" ry="2" />
<text  x="47.85" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="74.6" y="837" width="0.2" height="15.0" fill="rgb(213,134,1)" rx="2" ry="2" />
<text  x="77.62" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="215.3" y="485" width="0.5" height="15.0" fill="rgb(219,146,24)" rx="2" ry="2" />
<text  x="218.34" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1132.4" y="405" width="0.3" height="15.0" fill="rgb(241,9,33)" rx="2" ry="2" />
<text  x="1135.43" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.15%)</title><rect x="553.2" y="581" width="1.8" height="15.0" fill="rgb(209,224,42)" rx="2" ry="2" />
<text  x="556.24" y="591.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (151 samples, 2.82%)</title><rect x="225.3" y="469" width="33.3" height="15.0" fill="rgb(218,93,38)" rx="2" ry="2" />
<text  x="228.27" y="479.5" >cl..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="458.8" y="677" width="0.3" height="15.0" fill="rgb(238,139,14)" rx="2" ry="2" />
<text  x="461.84" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (5 samples, 0.09%)</title><rect x="1079.1" y="581" width="1.1" height="15.0" fill="rgb(232,89,7)" rx="2" ry="2" />
<text  x="1082.06" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (6 samples, 0.11%)</title><rect x="60.9" y="613" width="1.4" height="15.0" fill="rgb(223,214,28)" rx="2" ry="2" />
<text  x="63.95" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="37.8" y="549" width="0.4" height="15.0" fill="rgb(248,44,52)" rx="2" ry="2" />
<text  x="40.79" y="559.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="77.1" y="709" width="0.6" height="15.0" fill="rgb(243,122,46)" rx="2" ry="2" />
<text  x="80.05" y="719.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="625.1" y="693" width="0.5" height="15.0" fill="rgb(236,172,1)" rx="2" ry="2" />
<text  x="628.14" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="874.4" y="677" width="0.2" height="15.0" fill="rgb(206,143,16)" rx="2" ry="2" />
<text  x="877.38" y="687.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.2" y="885" width="0.2" height="15.0" fill="rgb(209,99,52)" rx="2" ry="2" />
<text  x="13.22" y="895.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (1 samples, 0.02%)</title><rect x="70.7" y="629" width="0.2" height="15.0" fill="rgb(236,160,34)" rx="2" ry="2" />
<text  x="73.65" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="37.1" y="533" width="0.5" height="15.0" fill="rgb(232,72,48)" rx="2" ry="2" />
<text  x="40.13" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (17 samples, 0.32%)</title><rect x="248.2" y="421" width="3.8" height="15.0" fill="rgb(242,151,8)" rx="2" ry="2" />
<text  x="251.21" y="431.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (9 samples, 0.17%)</title><rect x="570.2" y="597" width="2.0" height="15.0" fill="rgb(208,57,35)" rx="2" ry="2" />
<text  x="573.22" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="520.2" y="501" width="1.9" height="15.0" fill="rgb(217,88,16)" rx="2" ry="2" />
<text  x="523.16" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (12 samples, 0.22%)</title><rect x="36.7" y="645" width="2.6" height="15.0" fill="rgb(245,122,0)" rx="2" ry="2" />
<text  x="39.69" y="655.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="707.4" y="405" width="0.2" height="15.0" fill="rgb(232,76,8)" rx="2" ry="2" />
<text  x="710.41" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="36.0" y="629" width="0.2" height="15.0" fill="rgb(209,136,48)" rx="2" ry="2" />
<text  x="39.03" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="945.2" y="645" width="0.4" height="15.0" fill="rgb(233,76,28)" rx="2" ry="2" />
<text  x="948.18" y="655.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="977.6" y="597" width="0.4" height="15.0" fill="rgb(230,82,15)" rx="2" ry="2" />
<text  x="980.60" y="607.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (2 samples, 0.04%)</title><rect x="56.3" y="725" width="0.5" height="15.0" fill="rgb(219,20,16)" rx="2" ry="2" />
<text  x="59.32" y="735.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="101.1" y="709" width="0.2" height="15.0" fill="rgb(208,109,40)" rx="2" ry="2" />
<text  x="104.09" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="35.6" y="517" width="0.2" height="15.0" fill="rgb(236,30,20)" rx="2" ry="2" />
<text  x="38.59" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="658.7" y="773" width="0.2" height="15.0" fill="rgb(206,151,7)" rx="2" ry="2" />
<text  x="661.67" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.3" y="581" width="0.3" height="15.0" fill="rgb(219,140,49)" rx="2" ry="2" />
<text  x="42.33" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="1132.9" y="405" width="0.2" height="15.0" fill="rgb(236,115,54)" rx="2" ry="2" />
<text  x="1135.87" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="37.1" y="549" width="0.5" height="15.0" fill="rgb(231,193,21)" rx="2" ry="2" />
<text  x="40.13" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::ensure_last_dummy (1 samples, 0.02%)</title><rect x="16.0" y="837" width="0.2" height="15.0" fill="rgb(216,99,0)" rx="2" ry="2" />
<text  x="18.96" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (10 samples, 0.19%)</title><rect x="864.2" y="757" width="2.2" height="15.0" fill="rgb(252,69,37)" rx="2" ry="2" />
<text  x="867.23" y="767.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="68.7" y="725" width="0.2" height="15.0" fill="rgb(227,142,17)" rx="2" ry="2" />
<text  x="71.67" y="735.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="208.5" y="517" width="0.2" height="15.0" fill="rgb(237,126,53)" rx="2" ry="2" />
<text  x="211.50" y="527.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (2 samples, 0.04%)</title><rect x="445.2" y="501" width="0.4" height="15.0" fill="rgb(206,140,11)" rx="2" ry="2" />
<text  x="448.17" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="723.5" y="709" width="0.2" height="15.0" fill="rgb(234,107,17)" rx="2" ry="2" />
<text  x="726.51" y="719.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (4 samples, 0.07%)</title><rect x="270.9" y="437" width="0.9" height="15.0" fill="rgb(246,42,52)" rx="2" ry="2" />
<text  x="273.92" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1062.7" y="613" width="0.7" height="15.0" fill="rgb(215,61,6)" rx="2" ry="2" />
<text  x="1065.74" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="871.7" y="629" width="0.3" height="15.0" fill="rgb(212,71,33)" rx="2" ry="2" />
<text  x="874.73" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="674.5" y="693" width="0.3" height="15.0" fill="rgb(219,92,47)" rx="2" ry="2" />
<text  x="677.55" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.07%)</title><rect x="33.8" y="645" width="0.9" height="15.0" fill="rgb(223,104,0)" rx="2" ry="2" />
<text  x="36.82" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1054.1" y="629" width="0.3" height="15.0" fill="rgb(236,91,42)" rx="2" ry="2" />
<text  x="1057.13" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="93.8" y="709" width="0.2" height="15.0" fill="rgb(240,78,25)" rx="2" ry="2" />
<text  x="96.81" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (38 samples, 0.71%)</title><rect x="898.9" y="661" width="8.3" height="15.0" fill="rgb(253,227,5)" rx="2" ry="2" />
<text  x="901.86" y="671.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="729.5" y="773" width="0.2" height="15.0" fill="rgb(221,83,31)" rx="2" ry="2" />
<text  x="732.47" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (4 samples, 0.07%)</title><rect x="163.1" y="709" width="0.9" height="15.0" fill="rgb(232,88,54)" rx="2" ry="2" />
<text  x="166.07" y="719.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="839.3" y="725" width="0.2" height="15.0" fill="rgb(226,61,11)" rx="2" ry="2" />
<text  x="842.31" y="735.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::put (1 samples, 0.02%)</title><rect x="707.4" y="469" width="0.2" height="15.0" fill="rgb(220,99,18)" rx="2" ry="2" />
<text  x="710.41" y="479.5" ></text>
</g>
<g >
<title>do_cql_test (255 samples, 4.77%)</title><rect x="17.9" y="853" width="56.3" height="15.0" fill="rgb(213,125,2)" rx="2" ry="2" />
<text  x="20.94" y="863.5" >do_cq..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="40.2" y="581" width="0.2" height="15.0" fill="rgb(227,208,18)" rx="2" ry="2" />
<text  x="43.22" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.0" y="437" width="0.3" height="15.0" fill="rgb(249,131,35)" rx="2" ry="2" />
<text  x="52.04" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (3 samples, 0.06%)</title><rect x="1040.7" y="629" width="0.6" height="15.0" fill="rgb(254,58,48)" rx="2" ry="2" />
<text  x="1043.68" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%)</title><rect x="42.9" y="565" width="0.6" height="15.0" fill="rgb(249,202,43)" rx="2" ry="2" />
<text  x="45.86" y="575.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%)</title><rect x="765.4" y="709" width="0.2" height="15.0" fill="rgb(233,15,43)" rx="2" ry="2" />
<text  x="768.42" y="719.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (3 samples, 0.06%)</title><rect x="729.9" y="757" width="0.7" height="15.0" fill="rgb(245,102,6)" rx="2" ry="2" />
<text  x="732.91" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="694.2" y="773" width="0.2" height="15.0" fill="rgb(212,161,42)" rx="2" ry="2" />
<text  x="697.18" y="783.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartCharIndex (1 samples, 0.02%)</title><rect x="26.3" y="565" width="0.2" height="15.0" fill="rgb(236,189,30)" rx="2" ry="2" />
<text  x="29.32" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="42.2" y="485" width="0.2" height="15.0" fill="rgb(230,14,11)" rx="2" ry="2" />
<text  x="45.20" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="509.3" y="581" width="0.7" height="15.0" fill="rgb(226,62,50)" rx="2" ry="2" />
<text  x="512.35" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="707.4" y="629" width="0.2" height="15.0" fill="rgb(221,100,31)" rx="2" ry="2" />
<text  x="710.41" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="101.1" y="741" width="0.2" height="15.0" fill="rgb(251,87,43)" rx="2" ry="2" />
<text  x="104.09" y="751.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="454.4" y="677" width="2.2" height="15.0" fill="rgb(208,138,8)" rx="2" ry="2" />
<text  x="457.43" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (3 samples, 0.06%)</title><rect x="276.9" y="453" width="0.6" height="15.0" fill="rgb(247,113,2)" rx="2" ry="2" />
<text  x="279.88" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="95.8" y="757" width="0.2" height="15.0" fill="rgb(220,93,6)" rx="2" ry="2" />
<text  x="98.80" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%)</title><rect x="838.4" y="725" width="0.7" height="15.0" fill="rgb(251,115,46)" rx="2" ry="2" />
<text  x="841.43" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="652.3" y="693" width="0.2" height="15.0" fill="rgb(220,187,51)" rx="2" ry="2" />
<text  x="655.27" y="703.5" ></text>
</g>
<g >
<title>database::find_schema (24 samples, 0.45%)</title><rect x="829.6" y="677" width="5.3" height="15.0" fill="rgb(219,21,21)" rx="2" ry="2" />
<text  x="832.60" y="687.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="110.4" y="773" width="0.4" height="15.0" fill="rgb(221,149,40)" rx="2" ry="2" />
<text  x="113.36" y="783.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (2 samples, 0.04%)</title><rect x="62.9" y="693" width="0.5" height="15.0" fill="rgb(220,142,29)" rx="2" ry="2" />
<text  x="65.93" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.07%)</title><rect x="33.8" y="565" width="0.9" height="15.0" fill="rgb(212,159,23)" rx="2" ry="2" />
<text  x="36.82" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.07%)</title><rect x="917.4" y="645" width="0.9" height="15.0" fill="rgb(240,108,16)" rx="2" ry="2" />
<text  x="920.39" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="49.5" y="453" width="0.2" height="15.0" fill="rgb(234,119,49)" rx="2" ry="2" />
<text  x="52.48" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="575.3" y="629" width="0.2" height="15.0" fill="rgb(223,79,22)" rx="2" ry="2" />
<text  x="578.30" y="639.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="16.6" y="837" width="0.2" height="15.0" fill="rgb(234,62,22)" rx="2" ry="2" />
<text  x="19.62" y="847.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="356.1" y="469" width="0.4" height="15.0" fill="rgb(241,20,34)" rx="2" ry="2" />
<text  x="359.06" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="448.7" y="581" width="0.2" height="15.0" fill="rgb(211,129,51)" rx="2" ry="2" />
<text  x="451.70" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="878.8" y="565" width="0.7" height="15.0" fill="rgb(223,3,33)" rx="2" ry="2" />
<text  x="881.79" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="61.8" y="565" width="0.3" height="15.0" fill="rgb(218,210,12)" rx="2" ry="2" />
<text  x="64.83" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="22.1" y="565" width="0.3" height="15.0" fill="rgb(220,169,4)" rx="2" ry="2" />
<text  x="25.13" y="575.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%)</title><rect x="20.1" y="645" width="0.3" height="15.0" fill="rgb(221,159,20)" rx="2" ry="2" />
<text  x="23.15" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (36 samples, 0.67%)</title><rect x="899.3" y="645" width="7.9" height="15.0" fill="rgb(230,101,32)" rx="2" ry="2" />
<text  x="902.30" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="103.5" y="709" width="0.2" height="15.0" fill="rgb(212,65,14)" rx="2" ry="2" />
<text  x="106.52" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="637.5" y="741" width="0.2" height="15.0" fill="rgb(238,213,48)" rx="2" ry="2" />
<text  x="640.50" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="973.0" y="661" width="0.2" height="15.0" fill="rgb(224,81,46)" rx="2" ry="2" />
<text  x="975.97" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="745.3" y="613" width="0.5" height="15.0" fill="rgb(225,31,39)" rx="2" ry="2" />
<text  x="748.35" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1125.4" y="581" width="0.2" height="15.0" fill="rgb(220,229,34)" rx="2" ry="2" />
<text  x="1128.38" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (33 samples, 0.62%)</title><rect x="25.0" y="597" width="7.3" height="15.0" fill="rgb(236,0,42)" rx="2" ry="2" />
<text  x="28.00" y="607.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.13%)</title><rect x="544.2" y="517" width="1.5" height="15.0" fill="rgb(243,219,2)" rx="2" ry="2" />
<text  x="547.20" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="586.8" y="725" width="0.6" height="15.0" fill="rgb(227,209,1)" rx="2" ry="2" />
<text  x="589.77" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%)</title><rect x="40.4" y="629" width="0.5" height="15.0" fill="rgb(211,224,44)" rx="2" ry="2" />
<text  x="43.44" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (12 samples, 0.22%)</title><rect x="952.0" y="693" width="2.7" height="15.0" fill="rgb(213,105,27)" rx="2" ry="2" />
<text  x="955.01" y="703.5" ></text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%)</title><rect x="1123.8" y="549" width="0.5" height="15.0" fill="rgb(230,5,29)" rx="2" ry="2" />
<text  x="1126.83" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="883.9" y="757" width="0.2" height="15.0" fill="rgb(253,152,22)" rx="2" ry="2" />
<text  x="886.86" y="767.5" ></text>
</g>
<g >
<title>syscall-0 (2 samples, 0.04%)</title><rect x="1189.6" y="949" width="0.4" height="15.0" fill="rgb(241,172,52)" rx="2" ry="2" />
<text  x="1192.56" y="959.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="73.5" y="757" width="0.2" height="15.0" fill="rgb(247,162,47)" rx="2" ry="2" />
<text  x="76.52" y="767.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (3 samples, 0.06%)</title><rect x="1128.2" y="517" width="0.7" height="15.0" fill="rgb(225,124,42)" rx="2" ry="2" />
<text  x="1131.24" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="325.0" y="581" width="0.2" height="15.0" fill="rgb(244,156,37)" rx="2" ry="2" />
<text  x="327.96" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (187 samples, 3.50%)</title><rect x="785.9" y="693" width="41.3" height="15.0" fill="rgb(248,135,29)" rx="2" ry="2" />
<text  x="788.93" y="703.5" >std..</text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (45 samples, 0.84%)</title><rect x="753.7" y="693" width="10.0" height="15.0" fill="rgb(240,145,46)" rx="2" ry="2" />
<text  x="756.73" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="42.2" y="597" width="1.3" height="15.0" fill="rgb(250,139,13)" rx="2" ry="2" />
<text  x="45.20" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (5 samples, 0.09%)</title><rect x="302.9" y="597" width="1.1" height="15.0" fill="rgb(217,21,44)" rx="2" ry="2" />
<text  x="305.90" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="46.8" y="389" width="0.3" height="15.0" fill="rgb(219,100,52)" rx="2" ry="2" />
<text  x="49.83" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="637.3" y="725" width="0.2" height="15.0" fill="rgb(246,110,44)" rx="2" ry="2" />
<text  x="640.27" y="735.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="103.1" y="709" width="0.4" height="15.0" fill="rgb(210,100,12)" rx="2" ry="2" />
<text  x="106.08" y="719.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="122.7" y="725" width="0.4" height="15.0" fill="rgb(246,105,44)" rx="2" ry="2" />
<text  x="125.71" y="735.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="35.1" y="453" width="0.3" height="15.0" fill="rgb(219,172,24)" rx="2" ry="2" />
<text  x="38.14" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (5 samples, 0.09%)</title><rect x="430.6" y="517" width="1.1" height="15.0" fill="rgb(233,141,26)" rx="2" ry="2" />
<text  x="433.61" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="60.1" y="645" width="0.2" height="15.0" fill="rgb(230,25,42)" rx="2" ry="2" />
<text  x="63.07" y="655.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="341" width="0.3" height="15.0" fill="rgb(236,26,45)" rx="2" ry="2" />
<text  x="104.53" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="41.3" y="565" width="0.2" height="15.0" fill="rgb(249,78,18)" rx="2" ry="2" />
<text  x="44.32" y="575.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::make_stage_for_group (1 samples, 0.02%)</title><rect x="74.6" y="581" width="0.2" height="15.0" fill="rgb(252,154,29)" rx="2" ry="2" />
<text  x="77.62" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (7 samples, 0.13%)</title><rect x="70.7" y="693" width="1.5" height="15.0" fill="rgb(215,103,43)" rx="2" ry="2" />
<text  x="73.65" y="703.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="875.7" y="613" width="0.2" height="15.0" fill="rgb(240,116,22)" rx="2" ry="2" />
<text  x="878.70" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="928.2" y="677" width="0.2" height="15.0" fill="rgb(233,83,25)" rx="2" ry="2" />
<text  x="931.19" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.07%)</title><rect x="164.0" y="741" width="0.8" height="15.0" fill="rgb(245,48,20)" rx="2" ry="2" />
<text  x="166.95" y="751.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="870.4" y="533" width="0.2" height="15.0" fill="rgb(243,134,39)" rx="2" ry="2" />
<text  x="873.41" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="341.5" y="597" width="0.4" height="15.0" fill="rgb(254,205,9)" rx="2" ry="2" />
<text  x="344.50" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%)</title><rect x="16.6" y="869" width="0.7" height="15.0" fill="rgb(205,170,45)" rx="2" ry="2" />
<text  x="19.62" y="879.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1063.4" y="613" width="0.4" height="15.0" fill="rgb(254,161,31)" rx="2" ry="2" />
<text  x="1066.40" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (4 samples, 0.07%)</title><rect x="869.1" y="805" width="0.9" height="15.0" fill="rgb(229,0,49)" rx="2" ry="2" />
<text  x="872.08" y="815.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="71.3" y="581" width="0.5" height="15.0" fill="rgb(250,95,3)" rx="2" ry="2" />
<text  x="74.32" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="1031.4" y="517" width="0.2" height="15.0" fill="rgb(215,119,28)" rx="2" ry="2" />
<text  x="1034.42" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="63.8" y="661" width="0.2" height="15.0" fill="rgb(247,170,41)" rx="2" ry="2" />
<text  x="66.82" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="336.7" y="581" width="0.8" height="15.0" fill="rgb(235,200,46)" rx="2" ry="2" />
<text  x="339.65" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="273.1" y="453" width="0.2" height="15.0" fill="rgb(234,198,39)" rx="2" ry="2" />
<text  x="276.13" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (2 samples, 0.04%)</title><rect x="265.9" y="469" width="0.4" height="15.0" fill="rgb(219,174,11)" rx="2" ry="2" />
<text  x="268.85" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="45.3" y="533" width="0.4" height="15.0" fill="rgb(232,81,19)" rx="2" ry="2" />
<text  x="48.29" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="286.6" y="485" width="0.6" height="15.0" fill="rgb(216,191,27)" rx="2" ry="2" />
<text  x="289.58" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="707.4" y="613" width="0.2" height="15.0" fill="rgb(237,54,35)" rx="2" ry="2" />
<text  x="710.41" y="623.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::make&lt;frozen_mutation&gt; (1 samples, 0.02%)</title><rect x="1134.6" y="485" width="0.3" height="15.0" fill="rgb(233,100,14)" rx="2" ry="2" />
<text  x="1137.64" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="36.0" y="533" width="0.2" height="15.0" fill="rgb(235,14,9)" rx="2" ry="2" />
<text  x="39.03" y="543.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::marker (1 samples, 0.02%)</title><rect x="1124.3" y="549" width="0.2" height="15.0" fill="rgb(207,24,6)" rx="2" ry="2" />
<text  x="1127.27" y="559.5" ></text>
</g>
<g >
<title>reconcilable_result::reconcilable_result (1 samples, 0.02%)</title><rect x="101.1" y="661" width="0.2" height="15.0" fill="rgb(207,151,28)" rx="2" ry="2" />
<text  x="104.09" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (1 samples, 0.02%)</title><rect x="582.1" y="661" width="0.3" height="15.0" fill="rgb(238,121,8)" rx="2" ry="2" />
<text  x="585.13" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="291.9" y="501" width="0.2" height="15.0" fill="rgb(238,45,51)" rx="2" ry="2" />
<text  x="294.88" y="511.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="23.2" y="533" width="0.5" height="15.0" fill="rgb(247,60,16)" rx="2" ry="2" />
<text  x="26.23" y="543.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="597" width="0.2" height="15.0" fill="rgb(249,155,19)" rx="2" ry="2" />
<text  x="142.47" y="607.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (43 samples, 0.80%)</title><rect x="1126.7" y="709" width="9.5" height="15.0" fill="rgb(214,9,32)" rx="2" ry="2" />
<text  x="1129.70" y="719.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="216.4" y="533" width="0.5" height="15.0" fill="rgb(214,122,38)" rx="2" ry="2" />
<text  x="219.44" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="838.9" y="693" width="0.2" height="15.0" fill="rgb(250,34,2)" rx="2" ry="2" />
<text  x="841.87" y="703.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (110 samples, 2.06%)</title><rect x="531.8" y="613" width="24.3" height="15.0" fill="rgb(231,197,3)" rx="2" ry="2" />
<text  x="534.85" y="623.5" >s..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="43.5" y="501" width="0.7" height="15.0" fill="rgb(251,203,0)" rx="2" ry="2" />
<text  x="46.53" y="511.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,941 samples, 92.36%)</title><rect x="79.5" y="885" width="1089.8" height="15.0" fill="rgb(231,161,44)" rx="2" ry="2" />
<text  x="82.48" y="895.5" >seastar::app_template::run</text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="825.9" y="613" width="0.6" height="15.0" fill="rgb(253,128,53)" rx="2" ry="2" />
<text  x="828.85" y="623.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="876.8" y="661" width="0.2" height="15.0" fill="rgb(223,197,3)" rx="2" ry="2" />
<text  x="879.80" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.2" y="533" width="0.3" height="15.0" fill="rgb(225,171,54)" rx="2" ry="2" />
<text  x="41.23" y="543.5" ></text>
</g>
<g >
<title>sstables::write_cell_value&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="77.5" y="629" width="0.2" height="15.0" fill="rgb(240,127,28)" rx="2" ry="2" />
<text  x="80.49" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="15.7" y="853" width="0.3" height="15.0" fill="rgb(248,140,36)" rx="2" ry="2" />
<text  x="18.73" y="863.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="47.9" y="597" width="0.3" height="15.0" fill="rgb(228,209,13)" rx="2" ry="2" />
<text  x="50.94" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="139.5" y="469" width="0.2" height="15.0" fill="rgb(227,13,40)" rx="2" ry="2" />
<text  x="142.47" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="581.5" y="645" width="0.2" height="15.0" fill="rgb(228,12,0)" rx="2" ry="2" />
<text  x="584.47" y="655.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="134.2" y="757" width="0.2" height="15.0" fill="rgb(229,56,21)" rx="2" ry="2" />
<text  x="137.18" y="767.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (9 samples, 0.17%)</title><rect x="780.2" y="693" width="2.0" height="15.0" fill="rgb(214,49,9)" rx="2" ry="2" />
<text  x="783.20" y="703.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (2 samples, 0.04%)</title><rect x="124.3" y="757" width="0.4" height="15.0" fill="rgb(205,47,50)" rx="2" ry="2" />
<text  x="127.25" y="767.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (4 samples, 0.07%)</title><rect x="875.0" y="645" width="0.9" height="15.0" fill="rgb(236,117,30)" rx="2" ry="2" />
<text  x="878.04" y="655.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="774.2" y="597" width="0.3" height="15.0" fill="rgb(211,17,40)" rx="2" ry="2" />
<text  x="777.24" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="841.7" y="693" width="0.7" height="15.0" fill="rgb(249,85,19)" rx="2" ry="2" />
<text  x="844.73" y="703.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_following (1 samples, 0.02%)</title><rect x="39.8" y="613" width="0.2" height="15.0" fill="rgb(208,28,48)" rx="2" ry="2" />
<text  x="42.78" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.13%)</title><rect x="208.7" y="501" width="1.6" height="15.0" fill="rgb(208,39,0)" rx="2" ry="2" />
<text  x="211.73" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (9 samples, 0.17%)</title><rect x="294.5" y="565" width="2.0" height="15.0" fill="rgb(234,54,14)" rx="2" ry="2" />
<text  x="297.52" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.07%)</title><rect x="781.3" y="645" width="0.9" height="15.0" fill="rgb(209,120,14)" rx="2" ry="2" />
<text  x="784.30" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (30 samples, 0.56%)</title><rect x="979.4" y="645" width="6.6" height="15.0" fill="rgb(212,15,42)" rx="2" ry="2" />
<text  x="982.36" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="41.5" y="581" width="0.3" height="15.0" fill="rgb(234,13,16)" rx="2" ry="2" />
<text  x="44.54" y="591.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%)</title><rect x="1122.9" y="501" width="0.3" height="15.0" fill="rgb(217,151,16)" rx="2" ry="2" />
<text  x="1125.95" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="266.3" y="469" width="0.2" height="15.0" fill="rgb(223,208,18)" rx="2" ry="2" />
<text  x="269.29" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (11 samples, 0.21%)</title><rect x="699.0" y="789" width="2.5" height="15.0" fill="rgb(242,160,35)" rx="2" ry="2" />
<text  x="702.03" y="799.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="101.5" y="85" width="0.3" height="15.0" fill="rgb(213,214,49)" rx="2" ry="2" />
<text  x="104.53" y="95.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="730.8" y="709" width="0.2" height="15.0" fill="rgb(215,152,16)" rx="2" ry="2" />
<text  x="733.79" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="801.2" y="565" width="0.2" height="15.0" fill="rgb(217,203,43)" rx="2" ry="2" />
<text  x="804.15" y="575.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (34 samples, 0.64%)</title><rect x="920.3" y="677" width="7.5" height="15.0" fill="rgb(248,100,35)" rx="2" ry="2" />
<text  x="923.25" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="910.8" y="661" width="0.2" height="15.0" fill="rgb(230,1,13)" rx="2" ry="2" />
<text  x="913.77" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="55.0" y="741" width="0.2" height="15.0" fill="rgb(219,206,36)" rx="2" ry="2" />
<text  x="57.99" y="751.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="72.2" y="693" width="0.2" height="15.0" fill="rgb(242,12,28)" rx="2" ry="2" />
<text  x="75.20" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="63.4" y="629" width="0.4" height="15.0" fill="rgb(217,2,12)" rx="2" ry="2" />
<text  x="66.38" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="1031.6" y="565" width="0.3" height="15.0" fill="rgb(212,117,28)" rx="2" ry="2" />
<text  x="1034.64" y="575.5" ></text>
</g>
<g >
<title>memtable_list::flush (1 samples, 0.02%)</title><rect x="102.4" y="597" width="0.2" height="15.0" fill="rgb(214,98,4)" rx="2" ry="2" />
<text  x="105.41" y="607.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="847.0" y="661" width="0.2" height="15.0" fill="rgb(221,127,11)" rx="2" ry="2" />
<text  x="850.03" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="577.5" y="709" width="0.4" height="15.0" fill="rgb(228,112,45)" rx="2" ry="2" />
<text  x="580.50" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (7 samples, 0.13%)</title><rect x="813.1" y="437" width="1.5" height="15.0" fill="rgb(231,90,14)" rx="2" ry="2" />
<text  x="816.06" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="783.5" y="661" width="0.4" height="15.0" fill="rgb(248,80,9)" rx="2" ry="2" />
<text  x="786.51" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;seastar::get_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; (1 samples, 0.02%)</title><rect x="1125.6" y="581" width="0.2" height="15.0" fill="rgb(243,163,43)" rx="2" ry="2" />
<text  x="1128.60" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (5 samples, 0.09%)</title><rect x="971.9" y="661" width="1.1" height="15.0" fill="rgb(223,172,29)" rx="2" ry="2" />
<text  x="974.87" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.09%)</title><rect x="653.2" y="741" width="1.1" height="15.0" fill="rgb(214,75,23)" rx="2" ry="2" />
<text  x="656.16" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.7" y="501" width="0.2" height="15.0" fill="rgb(205,91,33)" rx="2" ry="2" />
<text  x="52.70" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="350.5" y="517" width="0.3" height="15.0" fill="rgb(242,10,35)" rx="2" ry="2" />
<text  x="353.55" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="103.7" y="725" width="0.3" height="15.0" fill="rgb(239,175,28)" rx="2" ry="2" />
<text  x="106.74" y="735.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (5 samples, 0.09%)</title><rect x="427.1" y="469" width="1.1" height="15.0" fill="rgb(206,198,28)" rx="2" ry="2" />
<text  x="430.08" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="583.0" y="629" width="1.8" height="15.0" fill="rgb(248,46,25)" rx="2" ry="2" />
<text  x="586.02" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (14 samples, 0.26%)</title><rect x="74.8" y="885" width="3.1" height="15.0" fill="rgb(230,97,4)" rx="2" ry="2" />
<text  x="77.84" y="895.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="46.0" y="485" width="0.2" height="15.0" fill="rgb(231,13,7)" rx="2" ry="2" />
<text  x="48.95" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (33 samples, 0.62%)</title><rect x="40.9" y="629" width="7.3" height="15.0" fill="rgb(240,23,40)" rx="2" ry="2" />
<text  x="43.88" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="49.0" y="549" width="0.3" height="15.0" fill="rgb(248,36,28)" rx="2" ry="2" />
<text  x="52.04" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="927.3" y="645" width="0.5" height="15.0" fill="rgb(253,155,4)" rx="2" ry="2" />
<text  x="930.31" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="815.0" y="517" width="0.5" height="15.0" fill="rgb(215,183,3)" rx="2" ry="2" />
<text  x="818.05" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="36.0" y="453" width="0.2" height="15.0" fill="rgb(238,206,22)" rx="2" ry="2" />
<text  x="39.03" y="463.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.67%)</title><rect x="1118.3" y="773" width="8.0" height="15.0" fill="rgb(243,100,41)" rx="2" ry="2" />
<text  x="1121.32" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="864.5" y="725" width="1.5" height="15.0" fill="rgb(232,107,29)" rx="2" ry="2" />
<text  x="867.45" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="21.2" y="661" width="0.3" height="15.0" fill="rgb(244,176,49)" rx="2" ry="2" />
<text  x="24.25" y="671.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%)</title><rect x="475.8" y="597" width="0.5" height="15.0" fill="rgb(216,96,24)" rx="2" ry="2" />
<text  x="478.82" y="607.5" ></text>
</g>
<g >
<title>database::has_keyspace (11 samples, 0.21%)</title><rect x="852.8" y="709" width="2.4" height="15.0" fill="rgb(214,51,3)" rx="2" ry="2" />
<text  x="855.76" y="719.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%)</title><rect x="803.8" y="453" width="1.3" height="15.0" fill="rgb(225,219,26)" rx="2" ry="2" />
<text  x="806.80" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="706.5" y="789" width="0.7" height="15.0" fill="rgb(228,89,24)" rx="2" ry="2" />
<text  x="709.53" y="799.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="593.8" y="581" width="0.2" height="15.0" fill="rgb(226,60,23)" rx="2" ry="2" />
<text  x="596.82" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (74 samples, 1.38%)</title><rect x="1012.4" y="549" width="16.4" height="15.0" fill="rgb(235,210,8)" rx="2" ry="2" />
<text  x="1015.45" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (14 samples, 0.26%)</title><rect x="92.0" y="757" width="3.1" height="15.0" fill="rgb(232,61,54)" rx="2" ry="2" />
<text  x="95.05" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="42.6" y="549" width="0.3" height="15.0" fill="rgb(211,121,25)" rx="2" ry="2" />
<text  x="45.64" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="40.9" y="581" width="0.4" height="15.0" fill="rgb(236,89,39)" rx="2" ry="2" />
<text  x="43.88" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (17 samples, 0.32%)</title><rect x="831.1" y="645" width="3.8" height="15.0" fill="rgb(220,93,15)" rx="2" ry="2" />
<text  x="834.15" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="37.8" y="501" width="0.4" height="15.0" fill="rgb(216,147,17)" rx="2" ry="2" />
<text  x="40.79" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="491.9" y="613" width="1.6" height="15.0" fill="rgb(239,53,34)" rx="2" ry="2" />
<text  x="494.93" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (4 samples, 0.07%)</title><rect x="550.4" y="533" width="0.9" height="15.0" fill="rgb(250,143,2)" rx="2" ry="2" />
<text  x="553.37" y="543.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (153 samples, 2.86%)</title><rect x="789.0" y="645" width="33.8" height="15.0" fill="rgb(224,19,12)" rx="2" ry="2" />
<text  x="792.02" y="655.5" >se..</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (44 samples, 0.82%)</title><rect x="1126.5" y="773" width="9.7" height="15.0" fill="rgb(218,94,27)" rx="2" ry="2" />
<text  x="1129.48" y="783.5" ></text>
</g>
<g >
<title>main::$_3::operator (1 samples, 0.02%)</title><rect x="730.8" y="741" width="0.2" height="15.0" fill="rgb(254,102,36)" rx="2" ry="2" />
<text  x="733.79" y="751.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="280.6" y="533" width="0.5" height="15.0" fill="rgb(218,224,26)" rx="2" ry="2" />
<text  x="283.63" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="64.0" y="693" width="0.3" height="15.0" fill="rgb(210,7,0)" rx="2" ry="2" />
<text  x="67.04" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="879.7" y="565" width="0.2" height="15.0" fill="rgb(240,45,23)" rx="2" ry="2" />
<text  x="882.67" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="683.4" y="773" width="0.4" height="15.0" fill="rgb(254,183,11)" rx="2" ry="2" />
<text  x="686.37" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="828.9" y="693" width="0.3" height="15.0" fill="rgb(244,51,3)" rx="2" ry="2" />
<text  x="831.94" y="703.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="71.5" y="533" width="0.3" height="15.0" fill="rgb(234,138,8)" rx="2" ry="2" />
<text  x="74.54" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="74.6" y="821" width="0.2" height="15.0" fill="rgb(223,178,44)" rx="2" ry="2" />
<text  x="77.62" y="831.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="102.0" y="405" width="0.2" height="15.0" fill="rgb(249,209,22)" rx="2" ry="2" />
<text  x="104.97" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="21.7" y="661" width="0.4" height="15.0" fill="rgb(221,1,0)" rx="2" ry="2" />
<text  x="24.69" y="671.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="341" width="0.2" height="15.0" fill="rgb(209,103,34)" rx="2" ry="2" />
<text  x="104.97" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="15.5" y="661" width="0.2" height="15.0" fill="rgb(242,124,32)" rx="2" ry="2" />
<text  x="18.51" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="830.7" y="597" width="0.4" height="15.0" fill="rgb(237,60,51)" rx="2" ry="2" />
<text  x="833.71" y="607.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="615.2" y="677" width="0.2" height="15.0" fill="rgb(254,87,52)" rx="2" ry="2" />
<text  x="618.22" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (2 samples, 0.04%)</title><rect x="40.9" y="437" width="0.4" height="15.0" fill="rgb(223,108,54)" rx="2" ry="2" />
<text  x="43.88" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (5 samples, 0.09%)</title><rect x="713.6" y="757" width="1.1" height="15.0" fill="rgb(208,138,12)" rx="2" ry="2" />
<text  x="716.59" y="767.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="665.9" y="789" width="0.5" height="15.0" fill="rgb(222,171,30)" rx="2" ry="2" />
<text  x="668.95" y="799.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="764.3" y="693" width="0.7" height="15.0" fill="rgb(246,33,27)" rx="2" ry="2" />
<text  x="767.32" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="621.2" y="709" width="0.2" height="15.0" fill="rgb(239,23,16)" rx="2" ry="2" />
<text  x="624.17" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (5 samples, 0.09%)</title><rect x="940.8" y="709" width="1.1" height="15.0" fill="rgb(221,115,10)" rx="2" ry="2" />
<text  x="943.77" y="719.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (7 samples, 0.13%)</title><rect x="556.8" y="629" width="1.5" height="15.0" fill="rgb(218,160,2)" rx="2" ry="2" />
<text  x="559.77" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="990.2" y="549" width="0.2" height="15.0" fill="rgb(205,154,40)" rx="2" ry="2" />
<text  x="993.17" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (192 samples, 3.59%)</title><rect x="224.6" y="485" width="42.4" height="15.0" fill="rgb(211,224,16)" rx="2" ry="2" />
<text  x="227.61" y="495.5" >mut..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="687.1" y="741" width="0.2" height="15.0" fill="rgb(241,90,31)" rx="2" ry="2" />
<text  x="690.12" y="751.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (227 samples, 4.24%)</title><rect x="990.6" y="613" width="50.1" height="15.0" fill="rgb(222,65,49)" rx="2" ry="2" />
<text  x="993.61" y="623.5" >servi..</text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (127 samples, 2.37%)</title><rect x="528.1" y="629" width="28.0" height="15.0" fill="rgb(242,113,21)" rx="2" ry="2" />
<text  x="531.10" y="639.5" >m..</text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (2 samples, 0.04%)</title><rect x="787.3" y="661" width="0.4" height="15.0" fill="rgb(225,60,35)" rx="2" ry="2" />
<text  x="790.26" y="671.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="774.9" y="629" width="0.2" height="15.0" fill="rgb(253,77,43)" rx="2" ry="2" />
<text  x="777.90" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="587.6" y="725" width="0.3" height="15.0" fill="rgb(247,79,51)" rx="2" ry="2" />
<text  x="590.65" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="43.5" y="469" width="0.2" height="15.0" fill="rgb(205,143,37)" rx="2" ry="2" />
<text  x="46.53" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1030.1" y="549" width="1.5" height="15.0" fill="rgb(207,160,29)" rx="2" ry="2" />
<text  x="1033.09" y="559.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="728.1" y="757" width="0.3" height="15.0" fill="rgb(249,101,10)" rx="2" ry="2" />
<text  x="731.15" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="937.2" y="693" width="0.3" height="15.0" fill="rgb(220,194,22)" rx="2" ry="2" />
<text  x="940.24" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%)</title><rect x="45.1" y="517" width="0.2" height="15.0" fill="rgb(219,44,50)" rx="2" ry="2" />
<text  x="48.07" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (503 samples, 9.40%)</title><rect x="338.0" y="613" width="110.9" height="15.0" fill="rgb(234,43,49)" rx="2" ry="2" />
<text  x="340.97" y="623.5" >std::__invoke..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="846.6" y="677" width="0.6" height="15.0" fill="rgb(215,169,29)" rx="2" ry="2" />
<text  x="849.59" y="687.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%)</title><rect x="875.5" y="629" width="0.4" height="15.0" fill="rgb(223,88,42)" rx="2" ry="2" />
<text  x="878.48" y="639.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="836.4" y="581" width="0.5" height="15.0" fill="rgb(228,45,7)" rx="2" ry="2" />
<text  x="839.44" y="591.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="101.1" y="693" width="0.2" height="15.0" fill="rgb(215,155,34)" rx="2" ry="2" />
<text  x="104.09" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (265 samples, 4.95%)</title><rect x="15.7" y="901" width="58.5" height="15.0" fill="rgb(212,137,51)" rx="2" ry="2" />
<text  x="18.73" y="911.5" >seasta..</text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%)</title><rect x="935.0" y="709" width="0.5" height="15.0" fill="rgb(222,217,8)" rx="2" ry="2" />
<text  x="938.03" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (7 samples, 0.13%)</title><rect x="765.6" y="709" width="1.6" height="15.0" fill="rgb(251,194,24)" rx="2" ry="2" />
<text  x="768.64" y="719.5" ></text>
</g>
<g >
<title>locator::simple_snitch::get_datacenter (1 samples, 0.02%)</title><rect x="1127.4" y="565" width="0.2" height="15.0" fill="rgb(250,67,40)" rx="2" ry="2" />
<text  x="1130.36" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="21.0" y="613" width="0.2" height="15.0" fill="rgb(224,120,22)" rx="2" ry="2" />
<text  x="24.03" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&amp;&gt; (1 samples, 0.02%)</title><rect x="47.7" y="565" width="0.2" height="15.0" fill="rgb(233,195,30)" rx="2" ry="2" />
<text  x="50.72" y="575.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.09%)</title><rect x="830.0" y="645" width="1.1" height="15.0" fill="rgb(230,84,6)" rx="2" ry="2" />
<text  x="833.04" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="40.9" y="469" width="0.4" height="15.0" fill="rgb(233,171,12)" rx="2" ry="2" />
<text  x="43.88" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::constant&gt; (1 samples, 0.02%)</title><rect x="57.9" y="645" width="0.2" height="15.0" fill="rgb(243,91,42)" rx="2" ry="2" />
<text  x="60.86" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="47.3" y="405" width="0.4" height="15.0" fill="rgb(219,13,46)" rx="2" ry="2" />
<text  x="50.27" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="269.8" y="453" width="0.7" height="15.0" fill="rgb(206,102,43)" rx="2" ry="2" />
<text  x="272.82" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="340.6" y="565" width="0.7" height="15.0" fill="rgb(240,102,40)" rx="2" ry="2" />
<text  x="343.62" y="575.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1109.1" y="693" width="0.6" height="15.0" fill="rgb(210,219,38)" rx="2" ry="2" />
<text  x="1112.05" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.8" y="693" width="0.2" height="15.0" fill="rgb(228,72,48)" rx="2" ry="2" />
<text  x="57.77" y="703.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%)</title><rect x="430.2" y="501" width="0.4" height="15.0" fill="rgb(250,179,12)" rx="2" ry="2" />
<text  x="433.17" y="511.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (4 samples, 0.07%)</title><rect x="253.1" y="405" width="0.8" height="15.0" fill="rgb(217,144,49)" rx="2" ry="2" />
<text  x="256.06" y="415.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::entry, std::function&lt;void  (1 samples, 0.02%)</title><rect x="707.4" y="725" width="0.2" height="15.0" fill="rgb(235,57,22)" rx="2" ry="2" />
<text  x="710.41" y="735.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (69 samples, 1.29%)</title><rect x="897.8" y="693" width="15.2" height="15.0" fill="rgb(228,198,7)" rx="2" ry="2" />
<text  x="900.76" y="703.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="799.6" y="549" width="0.4" height="15.0" fill="rgb(233,59,38)" rx="2" ry="2" />
<text  x="802.61" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="462.1" y="709" width="0.3" height="15.0" fill="rgb(225,81,20)" rx="2" ry="2" />
<text  x="465.15" y="719.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (2 samples, 0.04%)</title><rect x="101.3" y="501" width="0.5" height="15.0" fill="rgb(227,207,54)" rx="2" ry="2" />
<text  x="104.31" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.07%)</title><rect x="1086.3" y="677" width="0.9" height="15.0" fill="rgb(234,126,40)" rx="2" ry="2" />
<text  x="1089.34" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="90.7" y="789" width="0.2" height="15.0" fill="rgb(221,156,23)" rx="2" ry="2" />
<text  x="93.73" y="799.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="833.4" y="581" width="0.2" height="15.0" fill="rgb(210,99,8)" rx="2" ry="2" />
<text  x="836.35" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="893.3" y="725" width="0.3" height="15.0" fill="rgb(248,134,17)" rx="2" ry="2" />
<text  x="896.35" y="735.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%)</title><rect x="1121.6" y="533" width="0.2" height="15.0" fill="rgb(234,196,31)" rx="2" ry="2" />
<text  x="1124.63" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="946.1" y="629" width="0.6" height="15.0" fill="rgb(211,1,50)" rx="2" ry="2" />
<text  x="949.06" y="639.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%)</title><rect x="67.3" y="725" width="0.5" height="15.0" fill="rgb(220,109,30)" rx="2" ry="2" />
<text  x="70.35" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (11 samples, 0.21%)</title><rect x="477.6" y="581" width="2.4" height="15.0" fill="rgb(240,174,2)" rx="2" ry="2" />
<text  x="480.59" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="158.9" y="677" width="0.6" height="15.0" fill="rgb(223,221,47)" rx="2" ry="2" />
<text  x="161.88" y="687.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1131.1" y="453" width="0.2" height="15.0" fill="rgb(217,45,53)" rx="2" ry="2" />
<text  x="1134.11" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="34.7" y="501" width="0.7" height="15.0" fill="rgb(246,144,20)" rx="2" ry="2" />
<text  x="37.70" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="103.1" y="613" width="0.2" height="15.0" fill="rgb(222,21,24)" rx="2" ry="2" />
<text  x="106.08" y="623.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="844.6" y="741" width="0.7" height="15.0" fill="rgb(229,206,50)" rx="2" ry="2" />
<text  x="847.60" y="751.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%)</title><rect x="1156.7" y="773" width="0.2" height="15.0" fill="rgb(214,172,44)" rx="2" ry="2" />
<text  x="1159.70" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (8 samples, 0.15%)</title><rect x="792.3" y="613" width="1.8" height="15.0" fill="rgb(213,112,34)" rx="2" ry="2" />
<text  x="795.33" y="623.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="39.6" y="613" width="0.2" height="15.0" fill="rgb(217,195,8)" rx="2" ry="2" />
<text  x="42.56" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="1083.2" y="661" width="0.3" height="15.0" fill="rgb(218,94,17)" rx="2" ry="2" />
<text  x="1086.25" y="671.5" ></text>
</g>
<g >
<title>size_tiered_backlog_tracker::backlog (1 samples, 0.02%)</title><rect x="1168.4" y="693" width="0.2" height="15.0" fill="rgb(223,99,25)" rx="2" ry="2" />
<text  x="1171.39" y="703.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (2 samples, 0.04%)</title><rect x="103.7" y="805" width="0.5" height="15.0" fill="rgb(235,129,46)" rx="2" ry="2" />
<text  x="106.74" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="264.5" y="405" width="0.5" height="15.0" fill="rgb(230,7,0)" rx="2" ry="2" />
<text  x="267.53" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.7" y="421" width="0.2" height="15.0" fill="rgb(235,116,43)" rx="2" ry="2" />
<text  x="41.67" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="557.9" y="565" width="0.4" height="15.0" fill="rgb(215,227,54)" rx="2" ry="2" />
<text  x="560.87" y="575.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="77.1" y="613" width="0.2" height="15.0" fill="rgb(249,11,31)" rx="2" ry="2" />
<text  x="80.05" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_access (8 samples, 0.15%)</title><rect x="70.4" y="741" width="1.8" height="15.0" fill="rgb(208,88,17)" rx="2" ry="2" />
<text  x="73.43" y="751.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.09%)</title><rect x="566.9" y="581" width="1.1" height="15.0" fill="rgb(251,58,10)" rx="2" ry="2" />
<text  x="569.92" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="300.5" y="581" width="0.2" height="15.0" fill="rgb(243,200,44)" rx="2" ry="2" />
<text  x="303.48" y="591.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="847.2" y="661" width="0.5" height="15.0" fill="rgb(247,221,4)" rx="2" ry="2" />
<text  x="850.25" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="459.1" y="693" width="0.2" height="15.0" fill="rgb(250,139,4)" rx="2" ry="2" />
<text  x="462.06" y="703.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.07%)</title><rect x="201.4" y="597" width="95.3" height="15.0" fill="rgb(207,198,0)" rx="2" ry="2" />
<text  x="204.45" y="607.5" >seastar::do..</text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="268.7" y="453" width="0.2" height="15.0" fill="rgb(234,130,34)" rx="2" ry="2" />
<text  x="271.72" y="463.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="15.5" y="725" width="0.2" height="15.0" fill="rgb(238,213,41)" rx="2" ry="2" />
<text  x="18.51" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="66.9" y="741" width="0.2" height="15.0" fill="rgb(208,151,46)" rx="2" ry="2" />
<text  x="69.90" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="49.9" y="485" width="0.2" height="15.0" fill="rgb(210,128,45)" rx="2" ry="2" />
<text  x="52.92" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="293.0" y="469" width="0.2" height="15.0" fill="rgb(244,63,52)" rx="2" ry="2" />
<text  x="295.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::restrictions::statement_restrictions&gt;::_M_reset (1 samples, 0.02%)</title><rect x="668.6" y="773" width="0.2" height="15.0" fill="rgb(246,180,53)" rx="2" ry="2" />
<text  x="671.59" y="783.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%)</title><rect x="78.2" y="917" width="0.2" height="15.0" fill="rgb(229,199,27)" rx="2" ry="2" />
<text  x="81.15" y="927.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (15 samples, 0.28%)</title><rect x="701.9" y="789" width="3.3" height="15.0" fill="rgb(228,42,31)" rx="2" ry="2" />
<text  x="704.90" y="799.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (3 samples, 0.06%)</title><rect x="56.8" y="661" width="0.6" height="15.0" fill="rgb(246,98,44)" rx="2" ry="2" />
<text  x="59.76" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="134.8" y="757" width="0.3" height="15.0" fill="rgb(241,46,27)" rx="2" ry="2" />
<text  x="137.84" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="21.9" y="629" width="0.2" height="15.0" fill="rgb(220,45,32)" rx="2" ry="2" />
<text  x="24.91" y="639.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume (1 samples, 0.02%)</title><rect x="102.2" y="549" width="0.2" height="15.0" fill="rgb(240,31,16)" rx="2" ry="2" />
<text  x="105.19" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="21.9" y="645" width="0.2" height="15.0" fill="rgb(218,72,44)" rx="2" ry="2" />
<text  x="24.91" y="655.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="932.8" y="645" width="1.3" height="15.0" fill="rgb(224,32,36)" rx="2" ry="2" />
<text  x="935.83" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::find (1 samples, 0.02%)</title><rect x="74.6" y="517" width="0.2" height="15.0" fill="rgb(208,75,13)" rx="2" ry="2" />
<text  x="77.62" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="50.6" y="533" width="0.2" height="15.0" fill="rgb(207,188,13)" rx="2" ry="2" />
<text  x="53.58" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="803.6" y="469" width="1.5" height="15.0" fill="rgb(219,132,8)" rx="2" ry="2" />
<text  x="806.58" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%)</title><rect x="31.2" y="565" width="0.2" height="15.0" fill="rgb(216,147,8)" rx="2" ry="2" />
<text  x="34.17" y="575.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%)</title><rect x="17.7" y="773" width="0.2" height="15.0" fill="rgb(238,165,26)" rx="2" ry="2" />
<text  x="20.72" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="721.1" y="757" width="0.2" height="15.0" fill="rgb(236,152,52)" rx="2" ry="2" />
<text  x="724.09" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (7 samples, 0.13%)</title><rect x="276.0" y="469" width="1.5" height="15.0" fill="rgb(211,36,4)" rx="2" ry="2" />
<text  x="279.00" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%)</title><rect x="434.1" y="533" width="0.5" height="15.0" fill="rgb(251,183,25)" rx="2" ry="2" />
<text  x="437.14" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (3 samples, 0.06%)</title><rect x="267.4" y="469" width="0.7" height="15.0" fill="rgb(221,155,14)" rx="2" ry="2" />
<text  x="270.39" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="101.5" y="117" width="0.3" height="15.0" fill="rgb(243,80,24)" rx="2" ry="2" />
<text  x="104.53" y="127.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%)</title><rect x="817.3" y="565" width="1.3" height="15.0" fill="rgb(253,229,47)" rx="2" ry="2" />
<text  x="820.25" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="665.7" y="789" width="0.2" height="15.0" fill="rgb(241,192,50)" rx="2" ry="2" />
<text  x="668.73" y="799.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="68.4" y="725" width="0.3" height="15.0" fill="rgb(241,145,10)" rx="2" ry="2" />
<text  x="71.45" y="735.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="918.0" y="629" width="0.3" height="15.0" fill="rgb(224,29,14)" rx="2" ry="2" />
<text  x="921.05" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="200.8" y="581" width="0.2" height="15.0" fill="rgb(205,121,49)" rx="2" ry="2" />
<text  x="203.79" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="38.2" y="581" width="0.3" height="15.0" fill="rgb(254,25,36)" rx="2" ry="2" />
<text  x="41.23" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (7 samples, 0.13%)</title><rect x="60.9" y="645" width="1.6" height="15.0" fill="rgb(224,50,44)" rx="2" ry="2" />
<text  x="63.95" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="837.3" y="709" width="0.2" height="15.0" fill="rgb(212,50,49)" rx="2" ry="2" />
<text  x="840.32" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="978.7" y="645" width="0.4" height="15.0" fill="rgb(235,7,32)" rx="2" ry="2" />
<text  x="981.70" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="77.9" y="757" width="0.3" height="15.0" fill="rgb(254,7,18)" rx="2" ry="2" />
<text  x="80.93" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="448.5" y="565" width="0.2" height="15.0" fill="rgb(238,156,15)" rx="2" ry="2" />
<text  x="451.47" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1136.0" y="597" width="0.2" height="15.0" fill="rgb(222,32,8)" rx="2" ry="2" />
<text  x="1138.96" y="607.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="501.6" y="581" width="0.7" height="15.0" fill="rgb(236,171,29)" rx="2" ry="2" />
<text  x="504.63" y="591.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%)</title><rect x="1117.2" y="741" width="0.2" height="15.0" fill="rgb(243,220,43)" rx="2" ry="2" />
<text  x="1120.21" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1087.7" y="709" width="0.2" height="15.0" fill="rgb(219,188,14)" rx="2" ry="2" />
<text  x="1090.66" y="719.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="154.5" y="741" width="0.2" height="15.0" fill="rgb(222,195,11)" rx="2" ry="2" />
<text  x="157.47" y="751.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.07%)</title><rect x="86.5" y="789" width="0.9" height="15.0" fill="rgb(205,48,26)" rx="2" ry="2" />
<text  x="89.53" y="799.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (4 samples, 0.07%)</title><rect x="639.3" y="741" width="0.8" height="15.0" fill="rgb(247,5,20)" rx="2" ry="2" />
<text  x="642.26" y="751.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="478.0" y="549" width="1.4" height="15.0" fill="rgb(240,147,36)" rx="2" ry="2" />
<text  x="481.03" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="211.4" y="485" width="0.4" height="15.0" fill="rgb(222,190,45)" rx="2" ry="2" />
<text  x="214.37" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="707.6" y="613" width="0.5" height="15.0" fill="rgb(219,213,24)" rx="2" ry="2" />
<text  x="710.63" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="76.4" y="533" width="0.2" height="15.0" fill="rgb(220,121,29)" rx="2" ry="2" />
<text  x="79.39" y="543.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1121.0" y="533" width="0.4" height="15.0" fill="rgb(217,191,15)" rx="2" ry="2" />
<text  x="1123.96" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="38.5" y="549" width="0.6" height="15.0" fill="rgb(205,173,46)" rx="2" ry="2" />
<text  x="41.45" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="33.4" y="677" width="0.2" height="15.0" fill="rgb(237,88,32)" rx="2" ry="2" />
<text  x="36.38" y="687.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_data_sink (1 samples, 0.02%)</title><rect x="707.4" y="757" width="0.2" height="15.0" fill="rgb(244,169,34)" rx="2" ry="2" />
<text  x="710.41" y="767.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="101.5" y="405" width="0.3" height="15.0" fill="rgb(230,201,50)" rx="2" ry="2" />
<text  x="104.53" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="1107.1" y="709" width="1.3" height="15.0" fill="rgb(239,196,38)" rx="2" ry="2" />
<text  x="1110.07" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.09%)</title><rect x="945.8" y="645" width="1.1" height="15.0" fill="rgb(235,131,39)" rx="2" ry="2" />
<text  x="948.84" y="655.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="707.4" y="645" width="0.2" height="15.0" fill="rgb(225,100,11)" rx="2" ry="2" />
<text  x="710.41" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="44.0" y="453" width="0.2" height="15.0" fill="rgb(211,105,23)" rx="2" ry="2" />
<text  x="46.97" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="926.7" y="629" width="0.6" height="15.0" fill="rgb(254,20,48)" rx="2" ry="2" />
<text  x="929.65" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="49.7" y="485" width="0.2" height="15.0" fill="rgb(214,194,40)" rx="2" ry="2" />
<text  x="52.70" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="637.9" y="741" width="0.5" height="15.0" fill="rgb(218,129,26)" rx="2" ry="2" />
<text  x="640.94" y="751.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="46.2" y="565" width="1.5" height="15.0" fill="rgb(217,54,18)" rx="2" ry="2" />
<text  x="49.17" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1022.6" y="469" width="0.2" height="15.0" fill="rgb(227,182,11)" rx="2" ry="2" />
<text  x="1025.59" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (14 samples, 0.26%)</title><rect x="74.8" y="917" width="3.1" height="15.0" fill="rgb(232,159,4)" rx="2" ry="2" />
<text  x="77.84" y="927.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="523.9" y="629" width="0.4" height="15.0" fill="rgb(221,211,4)" rx="2" ry="2" />
<text  x="526.91" y="639.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="815.5" y="565" width="0.2" height="15.0" fill="rgb(230,68,19)" rx="2" ry="2" />
<text  x="818.49" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="359.1" y="485" width="0.3" height="15.0" fill="rgb(236,17,6)" rx="2" ry="2" />
<text  x="362.15" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="69.6" y="773" width="0.2" height="15.0" fill="rgb(235,11,15)" rx="2" ry="2" />
<text  x="72.55" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.04%)</title><rect x="19.7" y="693" width="0.4" height="15.0" fill="rgb(212,147,52)" rx="2" ry="2" />
<text  x="22.70" y="703.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (24 samples, 0.45%)</title><rect x="922.5" y="661" width="5.3" height="15.0" fill="rgb(209,139,14)" rx="2" ry="2" />
<text  x="925.46" y="671.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="870.0" y="709" width="0.6" height="15.0" fill="rgb(237,58,7)" rx="2" ry="2" />
<text  x="872.97" y="719.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%)</title><rect x="428.2" y="469" width="1.5" height="15.0" fill="rgb(234,195,5)" rx="2" ry="2" />
<text  x="431.18" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1128.9" y="549" width="0.2" height="15.0" fill="rgb(249,90,12)" rx="2" ry="2" />
<text  x="1131.90" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="370.8" y="485" width="0.7" height="15.0" fill="rgb(219,125,0)" rx="2" ry="2" />
<text  x="373.84" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.5" y="741" width="0.2" height="15.0" fill="rgb(233,22,10)" rx="2" ry="2" />
<text  x="20.50" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="805.6" y="517" width="0.2" height="15.0" fill="rgb(209,140,3)" rx="2" ry="2" />
<text  x="808.56" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%)</title><rect x="17.5" y="821" width="0.2" height="15.0" fill="rgb(219,139,52)" rx="2" ry="2" />
<text  x="20.50" y="831.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (11 samples, 0.21%)</title><rect x="1131.3" y="453" width="2.5" height="15.0" fill="rgb(236,163,9)" rx="2" ry="2" />
<text  x="1134.33" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="42.2" y="581" width="1.3" height="15.0" fill="rgb(220,62,50)" rx="2" ry="2" />
<text  x="45.20" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="909.9" y="613" width="0.6" height="15.0" fill="rgb(244,137,40)" rx="2" ry="2" />
<text  x="912.89" y="623.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="524.8" y="613" width="0.4" height="15.0" fill="rgb(230,192,0)" rx="2" ry="2" />
<text  x="527.79" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (714 samples, 13.35%)</title><rect x="171.5" y="709" width="157.4" height="15.0" fill="rgb(239,80,0)" rx="2" ry="2" />
<text  x="174.45" y="719.5" >flat_mutation_reader..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="49.7" y="549" width="0.2" height="15.0" fill="rgb(210,157,21)" rx="2" ry="2" />
<text  x="52.70" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="723.5" y="725" width="0.2" height="15.0" fill="rgb(251,80,9)" rx="2" ry="2" />
<text  x="726.51" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="934.1" y="709" width="0.7" height="15.0" fill="rgb(236,135,38)" rx="2" ry="2" />
<text  x="937.15" y="719.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (3 samples, 0.06%)</title><rect x="1041.3" y="629" width="0.7" height="15.0" fill="rgb(222,22,47)" rx="2" ry="2" />
<text  x="1044.34" y="639.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%)</title><rect x="374.1" y="485" width="0.3" height="15.0" fill="rgb(237,38,54)" rx="2" ry="2" />
<text  x="377.15" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (7 samples, 0.13%)</title><rect x="46.2" y="581" width="1.5" height="15.0" fill="rgb(244,43,31)" rx="2" ry="2" />
<text  x="49.17" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1057.4" y="597" width="0.5" height="15.0" fill="rgb(205,222,37)" rx="2" ry="2" />
<text  x="1060.44" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="63.4" y="661" width="0.4" height="15.0" fill="rgb(245,12,45)" rx="2" ry="2" />
<text  x="66.38" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="437.2" y="517" width="0.2" height="15.0" fill="rgb(209,100,14)" rx="2" ry="2" />
<text  x="440.23" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="870.0" y="773" width="0.6" height="15.0" fill="rgb(206,99,12)" rx="2" ry="2" />
<text  x="872.97" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="50.6" y="565" width="0.2" height="15.0" fill="rgb(225,70,15)" rx="2" ry="2" />
<text  x="53.58" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1136.0" y="645" width="0.2" height="15.0" fill="rgb(253,136,43)" rx="2" ry="2" />
<text  x="1138.96" y="655.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (64 samples, 1.20%)</title><rect x="801.4" y="565" width="14.1" height="15.0" fill="rgb(207,138,15)" rx="2" ry="2" />
<text  x="804.37" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="456.6" y="677" width="0.3" height="15.0" fill="rgb(251,170,8)" rx="2" ry="2" />
<text  x="459.64" y="687.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="803.6" y="485" width="1.5" height="15.0" fill="rgb(240,78,25)" rx="2" ry="2" />
<text  x="806.58" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%)</title><rect x="66.0" y="725" width="0.5" height="15.0" fill="rgb(247,224,45)" rx="2" ry="2" />
<text  x="69.02" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;secondary_index::index, std::allocator&lt;secondary_index::index&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, secondary_index::index, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt;, false, true&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="60.5" y="645" width="0.2" height="15.0" fill="rgb(247,161,40)" rx="2" ry="2" />
<text  x="63.51" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="709" width="0.5" height="15.0" fill="rgb(223,222,22)" rx="2" ry="2" />
<text  x="710.63" y="719.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.11%)</title><rect x="255.5" y="421" width="1.3" height="15.0" fill="rgb(243,78,46)" rx="2" ry="2" />
<text  x="258.48" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="101.5" y="389" width="0.3" height="15.0" fill="rgb(219,42,31)" rx="2" ry="2" />
<text  x="104.53" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="73.3" y="805" width="0.2" height="15.0" fill="rgb(253,139,5)" rx="2" ry="2" />
<text  x="76.30" y="815.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="455.3" y="645" width="0.9" height="15.0" fill="rgb(249,158,29)" rx="2" ry="2" />
<text  x="458.31" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.11%)</title><rect x="435.9" y="517" width="1.3" height="15.0" fill="rgb(237,203,4)" rx="2" ry="2" />
<text  x="438.90" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="815.0" y="501" width="0.3" height="15.0" fill="rgb(244,42,48)" rx="2" ry="2" />
<text  x="818.05" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (4 samples, 0.07%)</title><rect x="729.9" y="789" width="0.9" height="15.0" fill="rgb(236,59,12)" rx="2" ry="2" />
<text  x="732.91" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="645" width="0.5" height="15.0" fill="rgb(213,177,14)" rx="2" ry="2" />
<text  x="710.63" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="785.3" y="661" width="0.4" height="15.0" fill="rgb(252,190,40)" rx="2" ry="2" />
<text  x="788.27" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="577.1" y="709" width="0.4" height="15.0" fill="rgb(233,102,53)" rx="2" ry="2" />
<text  x="580.06" y="719.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="666.6" y="789" width="0.5" height="15.0" fill="rgb(239,92,20)" rx="2" ry="2" />
<text  x="669.61" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="46.8" y="437" width="0.3" height="15.0" fill="rgb(228,161,9)" rx="2" ry="2" />
<text  x="49.83" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (4 samples, 0.07%)</title><rect x="754.8" y="613" width="0.9" height="15.0" fill="rgb(232,93,15)" rx="2" ry="2" />
<text  x="757.83" y="623.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (5 samples, 0.09%)</title><rect x="20.1" y="661" width="1.1" height="15.0" fill="rgb(238,84,28)" rx="2" ry="2" />
<text  x="23.15" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="327.2" y="661" width="0.4" height="15.0" fill="rgb(232,68,51)" rx="2" ry="2" />
<text  x="330.17" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="63.4" y="645" width="0.4" height="15.0" fill="rgb(249,147,23)" rx="2" ry="2" />
<text  x="66.38" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="155.6" y="741" width="1.3" height="15.0" fill="rgb(243,171,16)" rx="2" ry="2" />
<text  x="158.57" y="751.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.3" y="709" width="0.2" height="15.0" fill="rgb(236,22,12)" rx="2" ry="2" />
<text  x="20.28" y="719.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (6 samples, 0.11%)</title><rect x="799.4" y="565" width="1.3" height="15.0" fill="rgb(244,81,1)" rx="2" ry="2" />
<text  x="802.39" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="808.4" y="437" width="0.3" height="15.0" fill="rgb(218,41,0)" rx="2" ry="2" />
<text  x="811.43" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (4 samples, 0.07%)</title><rect x="570.7" y="549" width="0.8" height="15.0" fill="rgb(215,25,8)" rx="2" ry="2" />
<text  x="573.67" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="688.9" y="789" width="1.8" height="15.0" fill="rgb(252,83,52)" rx="2" ry="2" />
<text  x="691.89" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%)</title><rect x="840.6" y="741" width="1.8" height="15.0" fill="rgb(208,214,39)" rx="2" ry="2" />
<text  x="843.63" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;sstables::option [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="15.5" y="821" width="0.2" height="15.0" fill="rgb(249,210,12)" rx="2" ry="2" />
<text  x="18.51" y="831.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="626.5" y="741" width="0.2" height="15.0" fill="rgb(236,52,32)" rx="2" ry="2" />
<text  x="629.47" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="21.9" y="597" width="0.2" height="15.0" fill="rgb(208,225,10)" rx="2" ry="2" />
<text  x="24.91" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="941.2" y="645" width="0.7" height="15.0" fill="rgb(240,176,47)" rx="2" ry="2" />
<text  x="944.21" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="50.1" y="581" width="0.5" height="15.0" fill="rgb(223,12,2)" rx="2" ry="2" />
<text  x="53.14" y="591.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="980.0" y="629" width="1.6" height="15.0" fill="rgb(238,12,4)" rx="2" ry="2" />
<text  x="983.03" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (7 samples, 0.13%)</title><rect x="976.9" y="645" width="1.6" height="15.0" fill="rgb(228,59,3)" rx="2" ry="2" />
<text  x="979.94" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1114.8" y="725" width="0.2" height="15.0" fill="rgb(211,225,29)" rx="2" ry="2" />
<text  x="1117.79" y="735.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (18 samples, 0.34%)</title><rect x="672.3" y="773" width="4.0" height="15.0" fill="rgb(253,0,45)" rx="2" ry="2" />
<text  x="675.34" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%)</title><rect x="819.9" y="597" width="1.1" height="15.0" fill="rgb(232,57,38)" rx="2" ry="2" />
<text  x="822.90" y="607.5" ></text>
</g>
<g >
<title>query::result_set::result_set (2 samples, 0.04%)</title><rect x="103.1" y="693" width="0.4" height="15.0" fill="rgb(210,204,17)" rx="2" ry="2" />
<text  x="106.08" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (12 samples, 0.22%)</title><rect x="863.8" y="773" width="2.6" height="15.0" fill="rgb(233,50,20)" rx="2" ry="2" />
<text  x="866.79" y="783.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="1135.1" y="501" width="0.2" height="15.0" fill="rgb(224,117,46)" rx="2" ry="2" />
<text  x="1138.08" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (34 samples, 0.64%)</title><rect x="1149.0" y="773" width="7.5" height="15.0" fill="rgb(241,181,39)" rx="2" ry="2" />
<text  x="1151.98" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="704.5" y="773" width="0.7" height="15.0" fill="rgb(205,43,5)" rx="2" ry="2" />
<text  x="707.55" y="783.5" ></text>
</g>
<g >
<title>make_combined_reader (89 samples, 1.66%)</title><rect x="472.1" y="629" width="19.6" height="15.0" fill="rgb(214,11,47)" rx="2" ry="2" />
<text  x="475.07" y="639.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="610.1" y="661" width="1.6" height="15.0" fill="rgb(238,34,2)" rx="2" ry="2" />
<text  x="613.15" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="69.6" y="757" width="0.2" height="15.0" fill="rgb(231,223,43)" rx="2" ry="2" />
<text  x="72.55" y="767.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (2 samples, 0.04%)</title><rect x="725.3" y="725" width="0.4" height="15.0" fill="rgb(206,57,31)" rx="2" ry="2" />
<text  x="728.28" y="735.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="559.4" y="629" width="0.7" height="15.0" fill="rgb(211,21,41)" rx="2" ry="2" />
<text  x="562.42" y="639.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (14 samples, 0.26%)</title><rect x="722.6" y="741" width="3.1" height="15.0" fill="rgb(216,68,2)" rx="2" ry="2" />
<text  x="725.63" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_line (1 samples, 0.02%)</title><rect x="25.4" y="565" width="0.3" height="15.0" fill="rgb(213,89,7)" rx="2" ry="2" />
<text  x="28.44" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="34.5" y="469" width="0.2" height="15.0" fill="rgb(210,195,50)" rx="2" ry="2" />
<text  x="37.48" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="555.9" y="597" width="0.2" height="15.0" fill="rgb(208,11,41)" rx="2" ry="2" />
<text  x="558.89" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="632.6" y="741" width="0.3" height="15.0" fill="rgb(241,164,51)" rx="2" ry="2" />
<text  x="635.64" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.39%)</title><rect x="743.1" y="677" width="4.7" height="15.0" fill="rgb(235,45,53)" rx="2" ry="2" />
<text  x="746.14" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="879.5" y="565" width="0.2" height="15.0" fill="rgb(229,72,20)" rx="2" ry="2" />
<text  x="882.45" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (566 samples, 10.58%)</title><rect x="179.8" y="629" width="124.9" height="15.0" fill="rgb(213,27,47)" rx="2" ry="2" />
<text  x="182.83" y="639.5" >mutation_reader..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="34.9" y="453" width="0.2" height="15.0" fill="rgb(234,47,1)" rx="2" ry="2" />
<text  x="37.92" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="295.6" y="501" width="0.2" height="15.0" fill="rgb(254,85,22)" rx="2" ry="2" />
<text  x="298.63" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (28 samples, 0.52%)</title><rect x="742.5" y="725" width="6.2" height="15.0" fill="rgb(208,175,12)" rx="2" ry="2" />
<text  x="745.48" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::~storage_proxy (1 samples, 0.02%)</title><rect x="17.5" y="645" width="0.2" height="15.0" fill="rgb(225,177,8)" rx="2" ry="2" />
<text  x="20.50" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.07%)</title><rect x="759.5" y="629" width="0.8" height="15.0" fill="rgb(221,48,54)" rx="2" ry="2" />
<text  x="762.47" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="971.6" y="645" width="0.3" height="15.0" fill="rgb(229,26,46)" rx="2" ry="2" />
<text  x="974.64" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (15 samples, 0.28%)</title><rect x="213.1" y="533" width="3.3" height="15.0" fill="rgb(229,179,34)" rx="2" ry="2" />
<text  x="216.14" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="337.5" y="613" width="0.3" height="15.0" fill="rgb(223,79,2)" rx="2" ry="2" />
<text  x="340.53" y="623.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="74.6" y="869" width="0.2" height="15.0" fill="rgb(211,133,17)" rx="2" ry="2" />
<text  x="77.62" y="879.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="75.1" y="725" width="0.2" height="15.0" fill="rgb(250,173,7)" rx="2" ry="2" />
<text  x="78.07" y="735.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (4 samples, 0.07%)</title><rect x="667.7" y="773" width="0.9" height="15.0" fill="rgb(213,207,0)" rx="2" ry="2" />
<text  x="670.71" y="783.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="880.1" y="597" width="0.2" height="15.0" fill="rgb(237,208,26)" rx="2" ry="2" />
<text  x="883.11" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%)</title><rect x="15.7" y="869" width="0.3" height="15.0" fill="rgb(212,77,29)" rx="2" ry="2" />
<text  x="18.73" y="879.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_51a8a1f89ba608bee449fa203f2105fb0c863620] (1 samples, 0.02%)</title><rect x="1133.5" y="405" width="0.3" height="15.0" fill="rgb(213,113,49)" rx="2" ry="2" />
<text  x="1136.54" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (8 samples, 0.15%)</title><rect x="835.3" y="661" width="1.8" height="15.0" fill="rgb(224,63,6)" rx="2" ry="2" />
<text  x="838.34" y="671.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="410.3" y="501" width="0.5" height="15.0" fill="rgb(221,116,38)" rx="2" ry="2" />
<text  x="413.32" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.0" y="421" width="0.2" height="15.0" fill="rgb(240,207,31)" rx="2" ry="2" />
<text  x="41.01" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (43 samples, 0.80%)</title><rect x="1055.2" y="645" width="9.5" height="15.0" fill="rgb(249,182,43)" rx="2" ry="2" />
<text  x="1058.24" y="655.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%)</title><rect x="691.1" y="789" width="0.4" height="15.0" fill="rgb(226,217,6)" rx="2" ry="2" />
<text  x="694.09" y="799.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (14 samples, 0.26%)</title><rect x="128.0" y="709" width="3.1" height="15.0" fill="rgb(222,175,51)" rx="2" ry="2" />
<text  x="131.00" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="36.5" y="645" width="0.2" height="15.0" fill="rgb(239,115,0)" rx="2" ry="2" />
<text  x="39.47" y="655.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="727.9" y="709" width="0.2" height="15.0" fill="rgb(248,104,3)" rx="2" ry="2" />
<text  x="730.93" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (4 samples, 0.07%)</title><rect x="125.4" y="741" width="0.8" height="15.0" fill="rgb(222,200,39)" rx="2" ry="2" />
<text  x="128.35" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (2 samples, 0.04%)</title><rect x="433.3" y="517" width="0.4" height="15.0" fill="rgb(239,173,38)" rx="2" ry="2" />
<text  x="436.26" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="446.3" y="517" width="0.2" height="15.0" fill="rgb(226,182,52)" rx="2" ry="2" />
<text  x="449.27" y="527.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.62%)</title><rect x="1118.8" y="629" width="7.2" height="15.0" fill="rgb(243,167,4)" rx="2" ry="2" />
<text  x="1121.76" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1023.0" y="501" width="0.3" height="15.0" fill="rgb(230,157,36)" rx="2" ry="2" />
<text  x="1026.04" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="531.2" y="613" width="0.2" height="15.0" fill="rgb(229,3,38)" rx="2" ry="2" />
<text  x="534.19" y="623.5" ></text>
</g>
<g >
<title>auth::resource::resource (16 samples, 0.30%)</title><rect x="782.2" y="693" width="3.5" height="15.0" fill="rgb(206,131,31)" rx="2" ry="2" />
<text  x="785.18" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="839.5" y="725" width="0.5" height="15.0" fill="rgb(222,134,20)" rx="2" ry="2" />
<text  x="842.53" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="95.4" y="741" width="0.2" height="15.0" fill="rgb(238,29,42)" rx="2" ry="2" />
<text  x="98.36" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="107.3" y="789" width="0.2" height="15.0" fill="rgb(209,166,24)" rx="2" ry="2" />
<text  x="110.27" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (69 samples, 1.29%)</title><rect x="1064.9" y="629" width="15.3" height="15.0" fill="rgb(222,76,29)" rx="2" ry="2" />
<text  x="1067.94" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="101.5" y="197" width="0.3" height="15.0" fill="rgb(227,213,44)" rx="2" ry="2" />
<text  x="104.53" y="207.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="25.9" y="565" width="0.2" height="15.0" fill="rgb(213,117,27)" rx="2" ry="2" />
<text  x="28.88" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="130.9" y="677" width="0.2" height="15.0" fill="rgb(209,60,49)" rx="2" ry="2" />
<text  x="133.87" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (2 samples, 0.04%)</title><rect x="712.3" y="741" width="0.4" height="15.0" fill="rgb(253,196,37)" rx="2" ry="2" />
<text  x="715.27" y="751.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="101.1" y="677" width="0.2" height="15.0" fill="rgb(224,34,52)" rx="2" ry="2" />
<text  x="104.09" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="835.8" y="629" width="1.3" height="15.0" fill="rgb(209,130,47)" rx="2" ry="2" />
<text  x="838.78" y="639.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (1 samples, 0.02%)</title><rect x="66.2" y="661" width="0.3" height="15.0" fill="rgb(251,79,40)" rx="2" ry="2" />
<text  x="69.24" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1046.0" y="645" width="0.2" height="15.0" fill="rgb(251,214,22)" rx="2" ry="2" />
<text  x="1048.97" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (4 samples, 0.07%)</title><rect x="76.8" y="773" width="0.9" height="15.0" fill="rgb(242,156,45)" rx="2" ry="2" />
<text  x="79.83" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="21.2" y="725" width="0.3" height="15.0" fill="rgb(230,190,35)" rx="2" ry="2" />
<text  x="24.25" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="102.4" y="645" width="0.2" height="15.0" fill="rgb(208,158,10)" rx="2" ry="2" />
<text  x="105.41" y="655.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (3 samples, 0.06%)</title><rect x="872.8" y="677" width="0.7" height="15.0" fill="rgb(229,199,54)" rx="2" ry="2" />
<text  x="875.83" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="22.1" y="533" width="0.3" height="15.0" fill="rgb(219,207,22)" rx="2" ry="2" />
<text  x="25.13" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="479.8" y="565" width="0.2" height="15.0" fill="rgb(252,101,1)" rx="2" ry="2" />
<text  x="482.79" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="68.7" y="709" width="0.2" height="15.0" fill="rgb(227,69,20)" rx="2" ry="2" />
<text  x="71.67" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="33.8" y="549" width="0.2" height="15.0" fill="rgb(230,193,54)" rx="2" ry="2" />
<text  x="36.82" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="665.3" y="773" width="0.2" height="15.0" fill="rgb(229,186,51)" rx="2" ry="2" />
<text  x="668.29" y="783.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="35.6" y="485" width="0.2" height="15.0" fill="rgb(251,65,13)" rx="2" ry="2" />
<text  x="38.59" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="72.2" y="677" width="0.2" height="15.0" fill="rgb(229,209,31)" rx="2" ry="2" />
<text  x="75.20" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="103.1" y="597" width="0.2" height="15.0" fill="rgb(211,219,50)" rx="2" ry="2" />
<text  x="106.08" y="607.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="729.7" y="789" width="0.2" height="15.0" fill="rgb(213,134,54)" rx="2" ry="2" />
<text  x="732.69" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="1167.1" y="709" width="0.2" height="15.0" fill="rgb(237,205,23)" rx="2" ry="2" />
<text  x="1170.06" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="683.8" y="789" width="0.5" height="15.0" fill="rgb(208,183,3)" rx="2" ry="2" />
<text  x="686.81" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="139.5" y="709" width="0.2" height="15.0" fill="rgb(241,187,48)" rx="2" ry="2" />
<text  x="142.47" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="49.9" y="437" width="0.2" height="15.0" fill="rgb(236,19,2)" rx="2" ry="2" />
<text  x="52.92" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="15.5" y="901" width="0.2" height="15.0" fill="rgb(221,85,51)" rx="2" ry="2" />
<text  x="18.51" y="911.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="661.5" y="789" width="0.5" height="15.0" fill="rgb(223,14,16)" rx="2" ry="2" />
<text  x="664.54" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="139.5" y="661" width="0.2" height="15.0" fill="rgb(222,99,46)" rx="2" ry="2" />
<text  x="142.47" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mLETTER (1 samples, 0.02%)</title><rect x="29.4" y="565" width="0.2" height="15.0" fill="rgb(232,43,8)" rx="2" ry="2" />
<text  x="32.41" y="575.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="275.1" y="485" width="0.2" height="15.0" fill="rgb(243,0,40)" rx="2" ry="2" />
<text  x="278.11" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="49.9" y="565" width="0.2" height="15.0" fill="rgb(215,78,11)" rx="2" ry="2" />
<text  x="52.92" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%)</title><rect x="458.2" y="677" width="0.4" height="15.0" fill="rgb(210,140,16)" rx="2" ry="2" />
<text  x="461.18" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (2 samples, 0.04%)</title><rect x="821.9" y="597" width="0.4" height="15.0" fill="rgb(250,77,54)" rx="2" ry="2" />
<text  x="824.88" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="560.5" y="629" width="0.2" height="15.0" fill="rgb(208,157,32)" rx="2" ry="2" />
<text  x="563.52" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (5 samples, 0.09%)</title><rect x="480.9" y="581" width="1.1" height="15.0" fill="rgb(216,117,28)" rx="2" ry="2" />
<text  x="483.90" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="521.7" y="485" width="0.2" height="15.0" fill="rgb(223,146,50)" rx="2" ry="2" />
<text  x="524.70" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="946.9" y="645" width="0.3" height="15.0" fill="rgb(218,118,22)" rx="2" ry="2" />
<text  x="949.94" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (2 samples, 0.04%)</title><rect x="874.6" y="645" width="0.4" height="15.0" fill="rgb(247,96,50)" rx="2" ry="2" />
<text  x="877.60" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (5 samples, 0.09%)</title><rect x="101.3" y="693" width="1.1" height="15.0" fill="rgb(220,98,26)" rx="2" ry="2" />
<text  x="104.31" y="703.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="353.6" y="469" width="0.3" height="15.0" fill="rgb(241,107,22)" rx="2" ry="2" />
<text  x="356.63" y="479.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="725.9" y="741" width="0.3" height="15.0" fill="rgb(241,191,40)" rx="2" ry="2" />
<text  x="728.94" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="675.4" y="693" width="0.5" height="15.0" fill="rgb(252,101,49)" rx="2" ry="2" />
<text  x="678.43" y="703.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1136.0" y="581" width="0.2" height="15.0" fill="rgb(229,197,1)" rx="2" ry="2" />
<text  x="1138.96" y="591.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="17.5" y="565" width="0.2" height="15.0" fill="rgb(229,47,20)" rx="2" ry="2" />
<text  x="20.50" y="575.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (6 samples, 0.11%)</title><rect x="70.7" y="645" width="1.3" height="15.0" fill="rgb(220,68,1)" rx="2" ry="2" />
<text  x="73.65" y="655.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (5 samples, 0.09%)</title><rect x="811.5" y="453" width="1.1" height="15.0" fill="rgb(245,43,6)" rx="2" ry="2" />
<text  x="814.52" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (5 samples, 0.09%)</title><rect x="662.0" y="789" width="1.1" height="15.0" fill="rgb(243,92,29)" rx="2" ry="2" />
<text  x="664.98" y="799.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (12 samples, 0.22%)</title><rect x="832.0" y="629" width="2.7" height="15.0" fill="rgb(231,36,37)" rx="2" ry="2" />
<text  x="835.03" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="76.2" y="613" width="0.4" height="15.0" fill="rgb(253,88,51)" rx="2" ry="2" />
<text  x="79.17" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="40.9" y="597" width="0.4" height="15.0" fill="rgb(237,64,3)" rx="2" ry="2" />
<text  x="43.88" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (3 samples, 0.06%)</title><rect x="158.9" y="709" width="0.6" height="15.0" fill="rgb(226,179,8)" rx="2" ry="2" />
<text  x="161.88" y="719.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="538.0" y="549" width="0.5" height="15.0" fill="rgb(223,146,6)" rx="2" ry="2" />
<text  x="541.02" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="411.9" y="469" width="0.2" height="15.0" fill="rgb(241,185,30)" rx="2" ry="2" />
<text  x="414.86" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1154.3" y="741" width="0.2" height="15.0" fill="rgb(233,62,39)" rx="2" ry="2" />
<text  x="1157.27" y="751.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="74.6" y="597" width="0.2" height="15.0" fill="rgb(218,105,49)" rx="2" ry="2" />
<text  x="77.62" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="677.9" y="741" width="0.2" height="15.0" fill="rgb(208,201,26)" rx="2" ry="2" />
<text  x="680.86" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="877.0" y="677" width="0.2" height="15.0" fill="rgb(242,52,33)" rx="2" ry="2" />
<text  x="880.02" y="687.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (20 samples, 0.37%)</title><rect x="981.6" y="613" width="4.4" height="15.0" fill="rgb(214,95,52)" rx="2" ry="2" />
<text  x="984.57" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="482.0" y="581" width="0.4" height="15.0" fill="rgb(211,189,3)" rx="2" ry="2" />
<text  x="485.00" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (3 samples, 0.06%)</title><rect x="640.8" y="741" width="0.7" height="15.0" fill="rgb(220,84,44)" rx="2" ry="2" />
<text  x="643.80" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1006.1" y="517" width="0.2" height="15.0" fill="rgb(250,98,47)" rx="2" ry="2" />
<text  x="1009.05" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="910.5" y="629" width="0.3" height="15.0" fill="rgb(249,228,1)" rx="2" ry="2" />
<text  x="913.55" y="639.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="1118.8" y="469" width="0.2" height="15.0" fill="rgb(237,149,25)" rx="2" ry="2" />
<text  x="1121.76" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="22.1" y="677" width="0.5" height="15.0" fill="rgb(207,176,2)" rx="2" ry="2" />
<text  x="25.13" y="687.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (33 samples, 0.62%)</title><rect x="741.4" y="741" width="7.3" height="15.0" fill="rgb(250,137,46)" rx="2" ry="2" />
<text  x="744.38" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (12 samples, 0.22%)</title><rect x="595.6" y="613" width="2.6" height="15.0" fill="rgb(250,60,29)" rx="2" ry="2" />
<text  x="598.59" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.07%)</title><rect x="585.7" y="693" width="0.8" height="15.0" fill="rgb(238,171,6)" rx="2" ry="2" />
<text  x="588.66" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="71.3" y="549" width="0.5" height="15.0" fill="rgb(250,137,44)" rx="2" ry="2" />
<text  x="74.32" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="834.7" y="629" width="0.2" height="15.0" fill="rgb(223,46,46)" rx="2" ry="2" />
<text  x="837.68" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (2 samples, 0.04%)</title><rect x="958.9" y="693" width="0.4" height="15.0" fill="rgb(228,12,47)" rx="2" ry="2" />
<text  x="961.85" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="40.2" y="485" width="0.2" height="15.0" fill="rgb(219,166,42)" rx="2" ry="2" />
<text  x="43.22" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;std::optional&lt;unsigned char&gt; &gt;, std::allocator&lt;seastar::shared_ptr&lt;std::optional&lt;unsigned char&gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="68.0" y="757" width="0.2" height="15.0" fill="rgb(220,198,40)" rx="2" ry="2" />
<text  x="71.01" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.67%)</title><rect x="1118.3" y="741" width="8.0" height="15.0" fill="rgb(249,94,33)" rx="2" ry="2" />
<text  x="1121.32" y="751.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="739.8" y="757" width="0.3" height="15.0" fill="rgb(230,110,3)" rx="2" ry="2" />
<text  x="742.84" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (3 samples, 0.06%)</title><rect x="189.8" y="565" width="0.6" height="15.0" fill="rgb(222,220,3)" rx="2" ry="2" />
<text  x="192.76" y="575.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="102.6" y="581" width="0.3" height="15.0" fill="rgb(224,75,1)" rx="2" ry="2" />
<text  x="105.64" y="591.5" ></text>
</g>
<g >
<title>validation::validate_column_family (3 samples, 0.06%)</title><rect x="837.5" y="709" width="0.7" height="15.0" fill="rgb(213,217,23)" rx="2" ry="2" />
<text  x="840.54" y="719.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="447.2" y="549" width="0.4" height="15.0" fill="rgb(220,68,43)" rx="2" ry="2" />
<text  x="450.15" y="559.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="832.3" y="581" width="0.4" height="15.0" fill="rgb(233,20,10)" rx="2" ry="2" />
<text  x="835.25" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="326.7" y="661" width="0.2" height="15.0" fill="rgb(210,196,45)" rx="2" ry="2" />
<text  x="329.73" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="49.7" y="565" width="0.2" height="15.0" fill="rgb(211,59,47)" rx="2" ry="2" />
<text  x="52.70" y="575.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="877.9" y="613" width="2.0" height="15.0" fill="rgb(240,220,21)" rx="2" ry="2" />
<text  x="880.91" y="623.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%)</title><rect x="707.6" y="581" width="0.3" height="15.0" fill="rgb(218,96,30)" rx="2" ry="2" />
<text  x="710.63" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="43.7" y="485" width="0.5" height="15.0" fill="rgb(254,82,5)" rx="2" ry="2" />
<text  x="46.75" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="491.3" y="597" width="0.4" height="15.0" fill="rgb(252,1,36)" rx="2" ry="2" />
<text  x="494.26" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1144.3" y="789" width="0.3" height="15.0" fill="rgb(213,98,37)" rx="2" ry="2" />
<text  x="1147.34" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="200.1" y="565" width="0.2" height="15.0" fill="rgb(239,118,17)" rx="2" ry="2" />
<text  x="203.12" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="266.3" y="453" width="0.2" height="15.0" fill="rgb(229,61,53)" rx="2" ry="2" />
<text  x="269.29" y="463.5" ></text>
</g>
<g >
<title>cql3::prepare_context::set_bound_variables (1 samples, 0.02%)</title><rect x="33.6" y="677" width="0.2" height="15.0" fill="rgb(230,88,43)" rx="2" ry="2" />
<text  x="36.60" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.15%)</title><rect x="827.2" y="693" width="1.7" height="15.0" fill="rgb(231,219,24)" rx="2" ry="2" />
<text  x="830.18" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%)</title><rect x="870.2" y="565" width="0.4" height="15.0" fill="rgb(234,213,35)" rx="2" ry="2" />
<text  x="873.19" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1096.3" y="645" width="2.4" height="15.0" fill="rgb(226,88,10)" rx="2" ry="2" />
<text  x="1099.26" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (55 samples, 1.03%)</title><rect x="717.3" y="805" width="12.2" height="15.0" fill="rgb(209,34,20)" rx="2" ry="2" />
<text  x="720.34" y="815.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="611.9" y="645" width="2.0" height="15.0" fill="rgb(237,47,28)" rx="2" ry="2" />
<text  x="614.91" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%)</title><rect x="45.1" y="549" width="0.2" height="15.0" fill="rgb(236,38,27)" rx="2" ry="2" />
<text  x="48.07" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (2 samples, 0.04%)</title><rect x="896.0" y="709" width="0.4" height="15.0" fill="rgb(230,122,47)" rx="2" ry="2" />
<text  x="898.99" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="34.3" y="501" width="0.4" height="15.0" fill="rgb(229,6,5)" rx="2" ry="2" />
<text  x="37.26" y="511.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (2 samples, 0.04%)</title><rect x="352.1" y="501" width="0.4" height="15.0" fill="rgb(235,181,0)" rx="2" ry="2" />
<text  x="355.09" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="701.7" y="789" width="0.2" height="15.0" fill="rgb(248,190,0)" rx="2" ry="2" />
<text  x="704.68" y="799.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (9 samples, 0.17%)</title><rect x="60.9" y="677" width="2.0" height="15.0" fill="rgb(232,185,52)" rx="2" ry="2" />
<text  x="63.95" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,513 samples, 46.97%)</title><rect x="104.6" y="805" width="554.3" height="15.0" fill="rgb(254,144,24)" rx="2" ry="2" />
<text  x="107.62" y="815.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="688.2" y="789" width="0.7" height="15.0" fill="rgb(250,52,7)" rx="2" ry="2" />
<text  x="691.22" y="799.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="877.9" y="517" width="0.2" height="15.0" fill="rgb(248,64,54)" rx="2" ry="2" />
<text  x="880.91" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="48.8" y="517" width="0.2" height="15.0" fill="rgb(226,166,15)" rx="2" ry="2" />
<text  x="51.82" y="527.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (1 samples, 0.02%)</title><rect x="750.2" y="725" width="0.2" height="15.0" fill="rgb(223,214,12)" rx="2" ry="2" />
<text  x="753.20" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="40.9" y="517" width="0.4" height="15.0" fill="rgb(239,183,18)" rx="2" ry="2" />
<text  x="43.88" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%)</title><rect x="870.0" y="789" width="0.6" height="15.0" fill="rgb(231,57,41)" rx="2" ry="2" />
<text  x="872.97" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (7 samples, 0.13%)</title><rect x="805.8" y="517" width="1.5" height="15.0" fill="rgb(254,98,4)" rx="2" ry="2" />
<text  x="808.78" y="527.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.15%)</title><rect x="726.4" y="757" width="1.7" height="15.0" fill="rgb(208,154,20)" rx="2" ry="2" />
<text  x="729.38" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="938.6" y="693" width="0.2" height="15.0" fill="rgb(229,118,48)" rx="2" ry="2" />
<text  x="941.56" y="703.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (2 samples, 0.04%)</title><rect x="1189.6" y="917" width="0.4" height="15.0" fill="rgb(246,29,30)" rx="2" ry="2" />
<text  x="1192.56" y="927.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%)</title><rect x="773.1" y="629" width="1.4" height="15.0" fill="rgb(214,182,47)" rx="2" ry="2" />
<text  x="776.14" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (3 samples, 0.06%)</title><rect x="638.6" y="741" width="0.7" height="15.0" fill="rgb(225,104,27)" rx="2" ry="2" />
<text  x="641.60" y="751.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (49 samples, 0.92%)</title><rect x="718.2" y="789" width="10.8" height="15.0" fill="rgb(226,68,51)" rx="2" ry="2" />
<text  x="721.22" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (22 samples, 0.41%)</title><rect x="308.9" y="645" width="4.8" height="15.0" fill="rgb(227,129,23)" rx="2" ry="2" />
<text  x="311.86" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="42.0" y="597" width="0.2" height="15.0" fill="rgb(242,202,44)" rx="2" ry="2" />
<text  x="44.98" y="607.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="74.6" y="789" width="0.2" height="15.0" fill="rgb(235,69,54)" rx="2" ry="2" />
<text  x="77.62" y="799.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="568.7" y="613" width="0.2" height="15.0" fill="rgb(228,82,24)" rx="2" ry="2" />
<text  x="571.68" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="23.2" y="485" width="0.3" height="15.0" fill="rgb(226,68,7)" rx="2" ry="2" />
<text  x="26.23" y="495.5" ></text>
</g>
<g >
<title>partition_entry::read (3 samples, 0.06%)</title><rect x="557.7" y="613" width="0.6" height="15.0" fill="rgb(246,163,20)" rx="2" ry="2" />
<text  x="560.65" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="866.0" y="709" width="0.4" height="15.0" fill="rgb(207,8,26)" rx="2" ry="2" />
<text  x="869.00" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,056 samples, 19.74%)</title><rect x="885.4" y="757" width="232.9" height="15.0" fill="rgb(210,26,51)" rx="2" ry="2" />
<text  x="888.41" y="767.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="17.7" y="789" width="0.2" height="15.0" fill="rgb(233,25,17)" rx="2" ry="2" />
<text  x="20.72" y="799.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="43.5" y="597" width="0.7" height="15.0" fill="rgb(226,95,1)" rx="2" ry="2" />
<text  x="46.53" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (17 samples, 0.32%)</title><rect x="1162.4" y="789" width="3.8" height="15.0" fill="rgb(251,91,18)" rx="2" ry="2" />
<text  x="1165.43" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="47.3" y="437" width="0.4" height="15.0" fill="rgb(216,151,41)" rx="2" ry="2" />
<text  x="50.27" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="459.3" y="693" width="0.2" height="15.0" fill="rgb(208,186,23)" rx="2" ry="2" />
<text  x="462.28" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="31.6" y="565" width="0.2" height="15.0" fill="rgb(207,20,49)" rx="2" ry="2" />
<text  x="34.61" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="1167.1" y="693" width="0.2" height="15.0" fill="rgb(220,111,10)" rx="2" ry="2" />
<text  x="1170.06" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="536.5" y="581" width="0.2" height="15.0" fill="rgb(219,28,17)" rx="2" ry="2" />
<text  x="539.48" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (3 samples, 0.06%)</title><rect x="76.2" y="661" width="0.6" height="15.0" fill="rgb(250,102,48)" rx="2" ry="2" />
<text  x="79.17" y="671.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="271.8" y="453" width="0.4" height="15.0" fill="rgb(242,106,50)" rx="2" ry="2" />
<text  x="274.81" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (26 samples, 0.49%)</title><rect x="1017.1" y="501" width="5.7" height="15.0" fill="rgb(231,119,36)" rx="2" ry="2" />
<text  x="1020.08" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.2" y="901" width="0.2" height="15.0" fill="rgb(224,213,53)" rx="2" ry="2" />
<text  x="13.22" y="911.5" ></text>
</g>
<g >
<title>database::query (14 samples, 0.26%)</title><rect x="98.0" y="805" width="3.1" height="15.0" fill="rgb(229,136,53)" rx="2" ry="2" />
<text  x="101.00" y="815.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;partition, 131072ul&gt;::chunked_vector (1 samples, 0.02%)</title><rect x="101.1" y="645" width="0.2" height="15.0" fill="rgb(245,151,18)" rx="2" ry="2" />
<text  x="104.09" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (5 samples, 0.09%)</title><rect x="314.2" y="661" width="1.1" height="15.0" fill="rgb(244,140,54)" rx="2" ry="2" />
<text  x="317.15" y="671.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (2 samples, 0.04%)</title><rect x="92.0" y="741" width="0.5" height="15.0" fill="rgb(253,149,37)" rx="2" ry="2" />
<text  x="95.05" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="873.1" y="645" width="0.4" height="15.0" fill="rgb(224,4,29)" rx="2" ry="2" />
<text  x="876.05" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="102.4" y="741" width="0.2" height="15.0" fill="rgb(213,105,5)" rx="2" ry="2" />
<text  x="105.41" y="751.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.3" y="421" width="0.3" height="15.0" fill="rgb(208,18,36)" rx="2" ry="2" />
<text  x="42.33" y="431.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (3 samples, 0.06%)</title><rect x="1128.2" y="533" width="0.7" height="15.0" fill="rgb(218,153,16)" rx="2" ry="2" />
<text  x="1131.24" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="34.3" y="453" width="0.2" height="15.0" fill="rgb(215,184,0)" rx="2" ry="2" />
<text  x="37.26" y="463.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%)</title><rect x="15.5" y="773" width="0.2" height="15.0" fill="rgb(249,65,51)" rx="2" ry="2" />
<text  x="18.51" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.0" y="549" width="0.2" height="15.0" fill="rgb(245,111,51)" rx="2" ry="2" />
<text  x="43.00" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (3 samples, 0.06%)</title><rect x="973.2" y="661" width="0.7" height="15.0" fill="rgb(236,24,31)" rx="2" ry="2" />
<text  x="976.19" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="57.9" y="661" width="0.2" height="15.0" fill="rgb(225,217,41)" rx="2" ry="2" />
<text  x="60.86" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="828.5" y="645" width="0.4" height="15.0" fill="rgb(249,57,13)" rx="2" ry="2" />
<text  x="831.50" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="708.1" y="805" width="0.2" height="15.0" fill="rgb(222,203,1)" rx="2" ry="2" />
<text  x="711.07" y="815.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (692 samples, 12.93%)</title><rect x="175.0" y="677" width="152.6" height="15.0" fill="rgb(218,62,25)" rx="2" ry="2" />
<text  x="177.98" y="687.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="58.3" y="693" width="0.2" height="15.0" fill="rgb(219,151,25)" rx="2" ry="2" />
<text  x="61.30" y="703.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="37.6" y="597" width="0.2" height="15.0" fill="rgb(222,63,11)" rx="2" ry="2" />
<text  x="40.57" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (36 samples, 0.67%)</title><rect x="126.2" y="741" width="8.0" height="15.0" fill="rgb(224,158,18)" rx="2" ry="2" />
<text  x="129.24" y="751.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (248 samples, 4.64%)</title><rect x="19.0" y="821" width="54.7" height="15.0" fill="rgb(246,128,20)" rx="2" ry="2" />
<text  x="22.04" y="831.5" >singl..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (7 samples, 0.13%)</title><rect x="692.0" y="789" width="1.5" height="15.0" fill="rgb(208,124,5)" rx="2" ry="2" />
<text  x="694.97" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="797.8" y="597" width="0.3" height="15.0" fill="rgb(212,180,24)" rx="2" ry="2" />
<text  x="800.84" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="228.4" y="437" width="0.2" height="15.0" fill="rgb(236,3,4)" rx="2" ry="2" />
<text  x="231.36" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="493.5" y="629" width="0.4" height="15.0" fill="rgb(209,6,23)" rx="2" ry="2" />
<text  x="496.47" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="1122.7" y="501" width="0.2" height="15.0" fill="rgb(247,46,35)" rx="2" ry="2" />
<text  x="1125.73" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry::last_dummy_tag, seastar::bool_class&lt;continuous_tag&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="16.0" y="821" width="0.2" height="15.0" fill="rgb(241,38,25)" rx="2" ry="2" />
<text  x="18.96" y="831.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%)</title><rect x="724.8" y="725" width="0.3" height="15.0" fill="rgb(220,92,38)" rx="2" ry="2" />
<text  x="727.84" y="735.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (11 samples, 0.21%)</title><rect x="666.4" y="805" width="2.4" height="15.0" fill="rgb(239,188,29)" rx="2" ry="2" />
<text  x="669.39" y="815.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="629" width="0.5" height="15.0" fill="rgb(254,106,16)" rx="2" ry="2" />
<text  x="710.63" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (33 samples, 0.62%)</title><rect x="296.7" y="613" width="7.3" height="15.0" fill="rgb(205,193,43)" rx="2" ry="2" />
<text  x="299.73" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="870.4" y="549" width="0.2" height="15.0" fill="rgb(216,125,0)" rx="2" ry="2" />
<text  x="873.41" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1055.0" y="645" width="0.2" height="15.0" fill="rgb(221,197,18)" rx="2" ry="2" />
<text  x="1058.02" y="655.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%)</title><rect x="221.5" y="501" width="0.7" height="15.0" fill="rgb(230,184,12)" rx="2" ry="2" />
<text  x="224.52" y="511.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="872.2" y="661" width="0.4" height="15.0" fill="rgb(229,93,9)" rx="2" ry="2" />
<text  x="875.17" y="671.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (53 samples, 0.99%)</title><rect x="86.3" y="805" width="11.7" height="15.0" fill="rgb(238,83,18)" rx="2" ry="2" />
<text  x="89.31" y="815.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1032.7" y="565" width="0.3" height="15.0" fill="rgb(227,210,54)" rx="2" ry="2" />
<text  x="1035.74" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1129.6" y="597" width="0.2" height="15.0" fill="rgb(208,201,3)" rx="2" ry="2" />
<text  x="1132.57" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="729.5" y="805" width="0.2" height="15.0" fill="rgb(222,203,42)" rx="2" ry="2" />
<text  x="732.47" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1100.7" y="693" width="0.4" height="15.0" fill="rgb(235,104,24)" rx="2" ry="2" />
<text  x="1103.67" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (7 samples, 0.13%)</title><rect x="1131.6" y="421" width="1.5" height="15.0" fill="rgb(206,100,27)" rx="2" ry="2" />
<text  x="1134.55" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="855.0" y="693" width="0.2" height="15.0" fill="rgb(215,79,16)" rx="2" ry="2" />
<text  x="857.97" y="703.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%)</title><rect x="708.3" y="789" width="0.2" height="15.0" fill="rgb(241,14,32)" rx="2" ry="2" />
<text  x="711.30" y="799.5" ></text>
</g>
<g >
<title>__start_context (14 samples, 0.26%)</title><rect x="74.8" y="901" width="3.1" height="15.0" fill="rgb(249,27,19)" rx="2" ry="2" />
<text  x="77.84" y="911.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="699.9" y="773" width="0.5" height="15.0" fill="rgb(224,60,14)" rx="2" ry="2" />
<text  x="702.91" y="783.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (39 samples, 0.73%)</title><rect x="563.8" y="629" width="8.6" height="15.0" fill="rgb(237,134,23)" rx="2" ry="2" />
<text  x="566.83" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (6 samples, 0.11%)</title><rect x="89.4" y="789" width="1.3" height="15.0" fill="rgb(230,155,37)" rx="2" ry="2" />
<text  x="92.40" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="43.5" y="565" width="0.7" height="15.0" fill="rgb(245,77,44)" rx="2" ry="2" />
<text  x="46.53" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="42.6" y="565" width="0.3" height="15.0" fill="rgb(236,61,31)" rx="2" ry="2" />
<text  x="45.64" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1064.1" y="629" width="0.2" height="15.0" fill="rgb(246,46,2)" rx="2" ry="2" />
<text  x="1067.06" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="620.5" y="725" width="0.2" height="15.0" fill="rgb(220,11,28)" rx="2" ry="2" />
<text  x="623.51" y="735.5" ></text>
</g>
<g >
<title>cql3::attributes::get_time_to_live (1 samples, 0.02%)</title><rect x="872.6" y="693" width="0.2" height="15.0" fill="rgb(223,16,16)" rx="2" ry="2" />
<text  x="875.61" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="649.8" y="741" width="0.3" height="15.0" fill="rgb(231,182,18)" rx="2" ry="2" />
<text  x="652.85" y="751.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="15.5" y="741" width="0.2" height="15.0" fill="rgb(240,2,19)" rx="2" ry="2" />
<text  x="18.51" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (2 samples, 0.04%)</title><rect x="715.8" y="773" width="0.4" height="15.0" fill="rgb(214,140,7)" rx="2" ry="2" />
<text  x="718.79" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.11%)</title><rect x="292.1" y="501" width="1.3" height="15.0" fill="rgb(219,153,32)" rx="2" ry="2" />
<text  x="295.10" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="372.8" y="469" width="0.2" height="15.0" fill="rgb(243,193,47)" rx="2" ry="2" />
<text  x="375.82" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="131.3" y="709" width="0.2" height="15.0" fill="rgb(247,50,11)" rx="2" ry="2" />
<text  x="134.31" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (6 samples, 0.11%)</title><rect x="159.5" y="709" width="1.4" height="15.0" fill="rgb(241,54,12)" rx="2" ry="2" />
<text  x="162.54" y="719.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1067.4" y="549" width="0.2" height="15.0" fill="rgb(207,38,5)" rx="2" ry="2" />
<text  x="1070.37" y="559.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="805.3" y="517" width="0.3" height="15.0" fill="rgb(240,128,21)" rx="2" ry="2" />
<text  x="808.34" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="484.6" y="597" width="0.7" height="15.0" fill="rgb(235,224,33)" rx="2" ry="2" />
<text  x="487.65" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;schema&gt;::dispose (1 samples, 0.02%)</title><rect x="17.3" y="549" width="0.2" height="15.0" fill="rgb(250,114,6)" rx="2" ry="2" />
<text  x="20.28" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.09%)</title><rect x="664.6" y="789" width="1.1" height="15.0" fill="rgb(218,59,0)" rx="2" ry="2" />
<text  x="667.62" y="799.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%)</title><rect x="121.4" y="757" width="0.2" height="15.0" fill="rgb(241,156,9)" rx="2" ry="2" />
<text  x="124.38" y="767.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="491.9" y="629" width="1.6" height="15.0" fill="rgb(247,211,26)" rx="2" ry="2" />
<text  x="494.93" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="76.2" y="645" width="0.4" height="15.0" fill="rgb(213,94,17)" rx="2" ry="2" />
<text  x="79.17" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="986.0" y="645" width="0.2" height="15.0" fill="rgb(248,23,50)" rx="2" ry="2" />
<text  x="988.98" y="655.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="596.3" y="597" width="0.6" height="15.0" fill="rgb(206,192,26)" rx="2" ry="2" />
<text  x="599.25" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%)</title><rect x="1056.8" y="613" width="1.1" height="15.0" fill="rgb(237,153,15)" rx="2" ry="2" />
<text  x="1059.78" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="24.3" y="549" width="0.3" height="15.0" fill="rgb(243,20,54)" rx="2" ry="2" />
<text  x="27.34" y="559.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="707.9" y="565" width="0.2" height="15.0" fill="rgb(209,177,7)" rx="2" ry="2" />
<text  x="710.85" y="575.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (45 samples, 0.84%)</title><rect x="1126.3" y="789" width="9.9" height="15.0" fill="rgb(252,71,35)" rx="2" ry="2" />
<text  x="1129.26" y="799.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%)</title><rect x="879.2" y="501" width="0.3" height="15.0" fill="rgb(219,110,27)" rx="2" ry="2" />
<text  x="882.23" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="43.7" y="453" width="0.3" height="15.0" fill="rgb(208,21,15)" rx="2" ry="2" />
<text  x="46.75" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="801.6" y="533" width="0.2" height="15.0" fill="rgb(228,57,1)" rx="2" ry="2" />
<text  x="804.59" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::restrictions::statement_restrictions&gt;::_M_reset (1 samples, 0.02%)</title><rect x="668.2" y="757" width="0.2" height="15.0" fill="rgb(246,174,37)" rx="2" ry="2" />
<text  x="671.15" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="667.9" y="725" width="0.3" height="15.0" fill="rgb(220,107,12)" rx="2" ry="2" />
<text  x="670.93" y="735.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%)</title><rect x="744.0" y="597" width="0.5" height="15.0" fill="rgb(213,115,15)" rx="2" ry="2" />
<text  x="747.03" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (2 samples, 0.04%)</title><rect x="912.1" y="677" width="0.4" height="15.0" fill="rgb(230,5,34)" rx="2" ry="2" />
<text  x="915.09" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1035.4" y="581" width="0.2" height="15.0" fill="rgb(228,131,26)" rx="2" ry="2" />
<text  x="1038.39" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="74.0" y="741" width="0.2" height="15.0" fill="rgb(213,108,28)" rx="2" ry="2" />
<text  x="76.96" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.15%)</title><rect x="446.5" y="565" width="1.8" height="15.0" fill="rgb(226,7,31)" rx="2" ry="2" />
<text  x="449.49" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (5 samples, 0.09%)</title><rect x="667.7" y="789" width="1.1" height="15.0" fill="rgb(207,78,36)" rx="2" ry="2" />
<text  x="670.71" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1025.2" y="533" width="0.3" height="15.0" fill="rgb(210,156,42)" rx="2" ry="2" />
<text  x="1028.24" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="963.0" y="677" width="0.3" height="15.0" fill="rgb(228,88,0)" rx="2" ry="2" />
<text  x="966.04" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="707.6" y="661" width="0.5" height="15.0" fill="rgb(251,142,43)" rx="2" ry="2" />
<text  x="710.63" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.4" y="597" width="0.2" height="15.0" fill="rgb(222,176,47)" rx="2" ry="2" />
<text  x="25.35" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%)</title><rect x="15.5" y="757" width="0.2" height="15.0" fill="rgb(213,127,32)" rx="2" ry="2" />
<text  x="18.51" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (3 samples, 0.06%)</title><rect x="63.4" y="677" width="0.6" height="15.0" fill="rgb(245,63,42)" rx="2" ry="2" />
<text  x="66.38" y="687.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="102.6" y="693" width="0.5" height="15.0" fill="rgb(208,83,51)" rx="2" ry="2" />
<text  x="105.64" y="703.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (57 samples, 1.07%)</title><rect x="915.2" y="693" width="12.6" height="15.0" fill="rgb(226,79,5)" rx="2" ry="2" />
<text  x="918.18" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="707.9" y="581" width="0.2" height="15.0" fill="rgb(244,50,11)" rx="2" ry="2" />
<text  x="710.85" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="16.6" y="821" width="0.2" height="15.0" fill="rgb(234,118,14)" rx="2" ry="2" />
<text  x="19.62" y="831.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="952.2" y="661" width="0.3" height="15.0" fill="rgb(232,83,46)" rx="2" ry="2" />
<text  x="955.24" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="362.7" y="453" width="0.4" height="15.0" fill="rgb(242,169,6)" rx="2" ry="2" />
<text  x="365.68" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (16 samples, 0.30%)</title><rect x="1106.6" y="725" width="3.6" height="15.0" fill="rgb(226,135,43)" rx="2" ry="2" />
<text  x="1109.63" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="863.1" y="773" width="0.2" height="15.0" fill="rgb(239,175,15)" rx="2" ry="2" />
<text  x="866.13" y="783.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (27 samples, 0.50%)</title><rect x="485.7" y="613" width="6.0" height="15.0" fill="rgb(253,102,24)" rx="2" ry="2" />
<text  x="488.75" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="489.1" y="565" width="0.4" height="15.0" fill="rgb(253,159,40)" rx="2" ry="2" />
<text  x="492.06" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (29 samples, 0.54%)</title><rect x="397.1" y="469" width="6.4" height="15.0" fill="rgb(249,156,14)" rx="2" ry="2" />
<text  x="400.08" y="479.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%)</title><rect x="102.0" y="469" width="0.2" height="15.0" fill="rgb(234,83,17)" rx="2" ry="2" />
<text  x="104.97" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (4 samples, 0.07%)</title><rect x="938.8" y="693" width="0.9" height="15.0" fill="rgb(237,1,37)" rx="2" ry="2" />
<text  x="941.78" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="757.7" y="645" width="0.2" height="15.0" fill="rgb(208,92,42)" rx="2" ry="2" />
<text  x="760.70" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (2 samples, 0.04%)</title><rect x="707.6" y="789" width="0.5" height="15.0" fill="rgb(235,43,24)" rx="2" ry="2" />
<text  x="710.63" y="799.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="197.7" y="549" width="0.2" height="15.0" fill="rgb(207,74,10)" rx="2" ry="2" />
<text  x="200.70" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_assign_base (1 samples, 0.02%)</title><rect x="45.1" y="501" width="0.2" height="15.0" fill="rgb(231,187,17)" rx="2" ry="2" />
<text  x="48.07" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="62.1" y="597" width="0.2" height="15.0" fill="rgb(224,72,24)" rx="2" ry="2" />
<text  x="65.05" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (5 samples, 0.09%)</title><rect x="833.6" y="613" width="1.1" height="15.0" fill="rgb(223,27,21)" rx="2" ry="2" />
<text  x="836.57" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="770.9" y="661" width="0.7" height="15.0" fill="rgb(209,33,33)" rx="2" ry="2" />
<text  x="773.93" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (416 samples, 7.78%)</title><rect x="748.9" y="741" width="91.7" height="15.0" fill="rgb(253,170,17)" rx="2" ry="2" />
<text  x="751.88" y="751.5" >cql3::quer..</text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.11%)</title><rect x="1046.4" y="613" width="1.3" height="15.0" fill="rgb(234,217,27)" rx="2" ry="2" />
<text  x="1049.41" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="875.0" y="629" width="0.5" height="15.0" fill="rgb(252,178,52)" rx="2" ry="2" />
<text  x="878.04" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="456.2" y="645" width="0.4" height="15.0" fill="rgb(245,99,24)" rx="2" ry="2" />
<text  x="459.19" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="679.2" y="757" width="0.2" height="15.0" fill="rgb(214,192,33)" rx="2" ry="2" />
<text  x="682.18" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="454.0" y="661" width="0.4" height="15.0" fill="rgb(218,157,42)" rx="2" ry="2" />
<text  x="456.99" y="671.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="700.1" y="757" width="0.3" height="15.0" fill="rgb(230,156,12)" rx="2" ry="2" />
<text  x="703.13" y="767.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (3 samples, 0.06%)</title><rect x="1122.1" y="533" width="0.6" height="15.0" fill="rgb(243,206,7)" rx="2" ry="2" />
<text  x="1125.07" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (3 samples, 0.06%)</title><rect x="356.5" y="469" width="0.7" height="15.0" fill="rgb(223,216,13)" rx="2" ry="2" />
<text  x="359.50" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;sstables::component_type, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="15.5" y="869" width="0.2" height="15.0" fill="rgb(238,179,24)" rx="2" ry="2" />
<text  x="18.51" y="879.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%)</title><rect x="966.6" y="661" width="0.4" height="15.0" fill="rgb(248,11,28)" rx="2" ry="2" />
<text  x="969.57" y="671.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (20 samples, 0.37%)</title><rect x="721.5" y="757" width="4.4" height="15.0" fill="rgb(251,192,14)" rx="2" ry="2" />
<text  x="724.53" y="767.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%)</title><rect x="102.6" y="709" width="0.5" height="15.0" fill="rgb(252,39,17)" rx="2" ry="2" />
<text  x="105.64" y="719.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="19.3" y="709" width="0.2" height="15.0" fill="rgb(224,49,17)" rx="2" ry="2" />
<text  x="22.26" y="719.5" ></text>
</g>
<g >
<title>[libpthread-2.33.so] (1 samples, 0.02%)</title><rect x="18.2" y="805" width="0.2" height="15.0" fill="rgb(226,7,26)" rx="2" ry="2" />
<text  x="21.16" y="815.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="341.1" y="549" width="0.2" height="15.0" fill="rgb(241,217,37)" rx="2" ry="2" />
<text  x="344.06" y="559.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="906.6" y="613" width="0.2" height="15.0" fill="rgb(226,16,46)" rx="2" ry="2" />
<text  x="909.58" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="857.6" y="645" width="1.6" height="15.0" fill="rgb(243,135,6)" rx="2" ry="2" />
<text  x="860.61" y="655.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="763.2" y="597" width="0.2" height="15.0" fill="rgb(253,142,51)" rx="2" ry="2" />
<text  x="766.21" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="42.2" y="565" width="0.4" height="15.0" fill="rgb(227,213,38)" rx="2" ry="2" />
<text  x="45.20" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (3 samples, 0.06%)</title><rect x="716.2" y="773" width="0.7" height="15.0" fill="rgb(254,164,0)" rx="2" ry="2" />
<text  x="719.24" y="783.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (5 samples, 0.09%)</title><rect x="349.2" y="517" width="1.1" height="15.0" fill="rgb(237,27,50)" rx="2" ry="2" />
<text  x="352.22" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (46 samples, 0.86%)</title><rect x="845.3" y="741" width="10.1" height="15.0" fill="rgb(224,213,24)" rx="2" ry="2" />
<text  x="848.26" y="751.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (85 samples, 1.59%)</title><rect x="33.8" y="677" width="18.8" height="15.0" fill="rgb(213,135,9)" rx="2" ry="2" />
<text  x="36.82" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (3 samples, 0.06%)</title><rect x="81.0" y="821" width="0.7" height="15.0" fill="rgb(208,98,4)" rx="2" ry="2" />
<text  x="84.02" y="831.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (11 samples, 0.21%)</title><rect x="407.0" y="469" width="2.4" height="15.0" fill="rgb(244,206,51)" rx="2" ry="2" />
<text  x="410.01" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="54.8" y="645" width="0.2" height="15.0" fill="rgb(233,32,40)" rx="2" ry="2" />
<text  x="57.77" y="655.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="767.2" y="709" width="1.7" height="15.0" fill="rgb(220,87,16)" rx="2" ry="2" />
<text  x="770.19" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1087.4" y="693" width="0.3" height="15.0" fill="rgb(230,53,20)" rx="2" ry="2" />
<text  x="1090.44" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%)</title><rect x="673.0" y="741" width="1.8" height="15.0" fill="rgb(245,193,40)" rx="2" ry="2" />
<text  x="676.01" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="868.6" y="773" width="0.3" height="15.0" fill="rgb(254,158,37)" rx="2" ry="2" />
<text  x="871.64" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (3 samples, 0.06%)</title><rect x="49.5" y="629" width="0.6" height="15.0" fill="rgb(245,187,2)" rx="2" ry="2" />
<text  x="52.48" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="49.3" y="581" width="0.2" height="15.0" fill="rgb(227,146,41)" rx="2" ry="2" />
<text  x="52.26" y="591.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="813.9" y="421" width="0.3" height="15.0" fill="rgb(225,155,41)" rx="2" ry="2" />
<text  x="816.94" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;seastar::file_data_sink_impl::put (1 samples, 0.02%)</title><rect x="707.4" y="421" width="0.2" height="15.0" fill="rgb(207,142,29)" rx="2" ry="2" />
<text  x="710.41" y="431.5" ></text>
</g>
<g >
<title>__start_context (265 samples, 4.95%)</title><rect x="15.7" y="917" width="58.5" height="15.0" fill="rgb(215,197,19)" rx="2" ry="2" />
<text  x="18.73" y="927.5" >__star..</text>
</g>
<g >
<title>seastar::internal::to_sstring_sprintf&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, long&gt; (1 samples, 0.02%)</title><rect x="17.7" y="709" width="0.2" height="15.0" fill="rgb(213,133,22)" rx="2" ry="2" />
<text  x="20.72" y="719.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%)</title><rect x="628.5" y="725" width="0.2" height="15.0" fill="rgb(233,210,5)" rx="2" ry="2" />
<text  x="631.45" y="735.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="19.5" y="709" width="0.2" height="15.0" fill="rgb(213,68,30)" rx="2" ry="2" />
<text  x="22.48" y="719.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (28 samples, 0.52%)</title><rect x="1118.8" y="581" width="6.1" height="15.0" fill="rgb(249,157,16)" rx="2" ry="2" />
<text  x="1121.76" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="1156.5" y="773" width="0.2" height="15.0" fill="rgb(224,74,44)" rx="2" ry="2" />
<text  x="1159.47" y="783.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="728.6" y="773" width="0.2" height="15.0" fill="rgb(215,97,18)" rx="2" ry="2" />
<text  x="731.59" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (6 samples, 0.11%)</title><rect x="1154.5" y="757" width="1.3" height="15.0" fill="rgb(214,8,26)" rx="2" ry="2" />
<text  x="1157.49" y="767.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="336.7" y="597" width="0.8" height="15.0" fill="rgb(213,156,20)" rx="2" ry="2" />
<text  x="339.65" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="164.6" y="725" width="0.2" height="15.0" fill="rgb(250,101,16)" rx="2" ry="2" />
<text  x="167.61" y="735.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (3 samples, 0.06%)</title><rect x="1119.9" y="533" width="0.6" height="15.0" fill="rgb(247,31,23)" rx="2" ry="2" />
<text  x="1122.86" y="543.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="102.4" y="677" width="0.2" height="15.0" fill="rgb(235,73,34)" rx="2" ry="2" />
<text  x="105.41" y="687.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%)</title><rect x="263.0" y="405" width="1.5" height="15.0" fill="rgb(211,119,13)" rx="2" ry="2" />
<text  x="265.98" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.07%)</title><rect x="830.3" y="613" width="0.8" height="15.0" fill="rgb(253,46,18)" rx="2" ry="2" />
<text  x="833.27" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1144.3" y="773" width="0.3" height="15.0" fill="rgb(230,148,9)" rx="2" ry="2" />
<text  x="1147.34" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1022.2" y="421" width="0.2" height="15.0" fill="rgb(215,65,44)" rx="2" ry="2" />
<text  x="1025.15" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="41.3" y="581" width="0.2" height="15.0" fill="rgb(242,98,3)" rx="2" ry="2" />
<text  x="44.32" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="1051.9" y="613" width="0.2" height="15.0" fill="rgb(224,226,29)" rx="2" ry="2" />
<text  x="1054.93" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (2 samples, 0.04%)</title><rect x="634.8" y="741" width="0.5" height="15.0" fill="rgb(212,84,25)" rx="2" ry="2" />
<text  x="637.85" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (36 samples, 0.67%)</title><rect x="438.5" y="549" width="8.0" height="15.0" fill="rgb(222,89,11)" rx="2" ry="2" />
<text  x="441.55" y="559.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (33 samples, 0.62%)</title><rect x="258.6" y="469" width="7.3" height="15.0" fill="rgb(205,27,1)" rx="2" ry="2" />
<text  x="261.57" y="479.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="872.4" y="629" width="0.2" height="15.0" fill="rgb(252,117,46)" rx="2" ry="2" />
<text  x="875.39" y="639.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (240 samples, 4.49%)</title><rect x="987.7" y="629" width="53.0" height="15.0" fill="rgb(221,111,2)" rx="2" ry="2" />
<text  x="990.75" y="639.5" >servi..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="280.4" y="485" width="0.2" height="15.0" fill="rgb(207,188,39)" rx="2" ry="2" />
<text  x="283.41" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="667.9" y="693" width="0.3" height="15.0" fill="rgb(225,222,14)" rx="2" ry="2" />
<text  x="670.93" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (3 samples, 0.06%)</title><rect x="253.3" y="373" width="0.6" height="15.0" fill="rgb(233,85,28)" rx="2" ry="2" />
<text  x="256.28" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%)</title><rect x="50.6" y="597" width="0.2" height="15.0" fill="rgb(244,119,12)" rx="2" ry="2" />
<text  x="53.58" y="607.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%)</title><rect x="901.3" y="613" width="0.2" height="15.0" fill="rgb(209,48,8)" rx="2" ry="2" />
<text  x="904.29" y="623.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1121.2" y="501" width="0.2" height="15.0" fill="rgb(213,55,7)" rx="2" ry="2" />
<text  x="1124.19" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (4 samples, 0.07%)</title><rect x="1136.2" y="789" width="0.9" height="15.0" fill="rgb(208,197,23)" rx="2" ry="2" />
<text  x="1139.18" y="799.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="36.0" y="421" width="0.2" height="15.0" fill="rgb(246,172,6)" rx="2" ry="2" />
<text  x="39.03" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="933.9" y="613" width="0.2" height="15.0" fill="rgb(240,191,45)" rx="2" ry="2" />
<text  x="936.93" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.15%)</title><rect x="1142.1" y="789" width="1.8" height="15.0" fill="rgb(226,11,16)" rx="2" ry="2" />
<text  x="1145.14" y="799.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (3 samples, 0.06%)</title><rect x="77.1" y="741" width="0.6" height="15.0" fill="rgb(217,139,51)" rx="2" ry="2" />
<text  x="80.05" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1114.3" y="725" width="0.3" height="15.0" fill="rgb(208,122,12)" rx="2" ry="2" />
<text  x="1117.35" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (16 samples, 0.30%)</title><rect x="1095.8" y="677" width="3.5" height="15.0" fill="rgb(216,61,17)" rx="2" ry="2" />
<text  x="1098.82" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%)</title><rect x="45.1" y="485" width="0.2" height="15.0" fill="rgb(242,43,15)" rx="2" ry="2" />
<text  x="48.07" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="878.6" y="581" width="0.2" height="15.0" fill="rgb(245,66,54)" rx="2" ry="2" />
<text  x="881.57" y="591.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%)</title><rect x="879.5" y="597" width="0.4" height="15.0" fill="rgb(225,61,52)" rx="2" ry="2" />
<text  x="882.45" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="38.5" y="597" width="0.6" height="15.0" fill="rgb(212,199,21)" rx="2" ry="2" />
<text  x="41.45" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="102.2" y="485" width="0.2" height="15.0" fill="rgb(229,92,39)" rx="2" ry="2" />
<text  x="105.19" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="587.4" y="725" width="0.2" height="15.0" fill="rgb(246,193,25)" rx="2" ry="2" />
<text  x="590.43" y="735.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (3 samples, 0.06%)</title><rect x="19.0" y="789" width="0.7" height="15.0" fill="rgb(237,59,37)" rx="2" ry="2" />
<text  x="22.04" y="799.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="604.4" y="597" width="0.5" height="15.0" fill="rgb(222,79,22)" rx="2" ry="2" />
<text  x="607.41" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (590 samples, 11.03%)</title><rect x="957.5" y="709" width="130.2" height="15.0" fill="rgb(218,145,4)" rx="2" ry="2" />
<text  x="960.53" y="719.5" >service::storage..</text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.13%)</title><rect x="291.9" y="517" width="1.5" height="15.0" fill="rgb(219,168,42)" rx="2" ry="2" />
<text  x="294.88" y="527.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="139.5" y="741" width="0.2" height="15.0" fill="rgb(233,220,26)" rx="2" ry="2" />
<text  x="142.47" y="751.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1121.2" y="469" width="0.2" height="15.0" fill="rgb(229,221,39)" rx="2" ry="2" />
<text  x="1124.19" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_stream (1 samples, 0.02%)</title><rect x="341.3" y="581" width="0.2" height="15.0" fill="rgb(237,90,49)" rx="2" ry="2" />
<text  x="344.28" y="591.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="10.2" y="821" width="0.2" height="15.0" fill="rgb(223,41,30)" rx="2" ry="2" />
<text  x="13.22" y="831.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="667.7" y="597" width="0.2" height="15.0" fill="rgb(231,116,37)" rx="2" ry="2" />
<text  x="670.71" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="134.0" y="725" width="0.2" height="15.0" fill="rgb(239,186,19)" rx="2" ry="2" />
<text  x="136.96" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="34.0" y="533" width="0.7" height="15.0" fill="rgb(235,222,34)" rx="2" ry="2" />
<text  x="37.04" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="879.5" y="549" width="0.2" height="15.0" fill="rgb(232,220,28)" rx="2" ry="2" />
<text  x="882.45" y="559.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.07%)</title><rect x="938.8" y="677" width="0.9" height="15.0" fill="rgb(245,150,21)" rx="2" ry="2" />
<text  x="941.78" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (2 samples, 0.04%)</title><rect x="58.3" y="725" width="0.4" height="15.0" fill="rgb(236,15,51)" rx="2" ry="2" />
<text  x="61.30" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.2" y="549" width="0.2" height="15.0" fill="rgb(222,147,45)" rx="2" ry="2" />
<text  x="43.22" y="559.5" ></text>
</g>
</g>
</svg>
