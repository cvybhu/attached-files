<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="822.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="805" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="805" > </text>
<g id="frames">
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="64.7" y="469" width="0.3" height="15.0" fill="rgb(211,114,18)" rx="2" ry="2" />
<text  x="67.74" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="268.4" y="277" width="0.2" height="15.0" fill="rgb(209,72,24)" rx="2" ry="2" />
<text  x="271.35" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%)</title><rect x="987.5" y="421" width="1.9" height="15.0" fill="rgb(247,27,1)" rx="2" ry="2" />
<text  x="990.53" y="431.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (6 samples, 0.12%)</title><rect x="1165.3" y="565" width="1.3" height="15.0" fill="rgb(252,222,3)" rx="2" ry="2" />
<text  x="1168.26" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="660.9" y="485" width="0.3" height="15.0" fill="rgb(238,82,11)" rx="2" ry="2" />
<text  x="663.92" y="495.5" ></text>
</g>
<g >
<title>sstables::write_cell_value&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="86.3" y="437" width="0.2" height="15.0" fill="rgb(249,203,15)" rx="2" ry="2" />
<text  x="89.27" y="447.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (21 samples, 0.41%)</title><rect x="1147.9" y="581" width="4.8" height="15.0" fill="rgb(219,70,38)" rx="2" ry="2" />
<text  x="1150.86" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="902.1" y="389" width="0.7" height="15.0" fill="rgb(240,114,48)" rx="2" ry="2" />
<text  x="905.10" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%)</title><rect x="592.9" y="469" width="1.1" height="15.0" fill="rgb(221,84,48)" rx="2" ry="2" />
<text  x="595.90" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="775.0" y="517" width="0.2" height="15.0" fill="rgb(238,161,11)" rx="2" ry="2" />
<text  x="777.98" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="39.1" y="293" width="0.4" height="15.0" fill="rgb(221,162,6)" rx="2" ry="2" />
<text  x="42.09" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (1 samples, 0.02%)</title><rect x="73.4" y="453" width="0.3" height="15.0" fill="rgb(240,28,43)" rx="2" ry="2" />
<text  x="76.44" y="463.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="113.8" y="469" width="0.2" height="15.0" fill="rgb(249,137,36)" rx="2" ry="2" />
<text  x="116.75" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="51.7" y="293" width="0.4" height="15.0" fill="rgb(242,78,28)" rx="2" ry="2" />
<text  x="54.68" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (15 samples, 0.29%)</title><rect x="57.9" y="453" width="3.4" height="15.0" fill="rgb(249,102,32)" rx="2" ry="2" />
<text  x="60.87" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (2 samples, 0.04%)</title><rect x="708.1" y="581" width="0.5" height="15.0" fill="rgb(250,172,42)" rx="2" ry="2" />
<text  x="711.11" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.2" y="453" width="0.2" height="15.0" fill="rgb(253,78,52)" rx="2" ry="2" />
<text  x="22.16" y="463.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1135.0" y="277" width="0.3" height="15.0" fill="rgb(240,95,17)" rx="2" ry="2" />
<text  x="1138.03" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="663.4" y="501" width="0.3" height="15.0" fill="rgb(249,186,33)" rx="2" ry="2" />
<text  x="666.44" y="511.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="113.8" y="501" width="0.2" height="15.0" fill="rgb(218,160,0)" rx="2" ry="2" />
<text  x="116.75" y="511.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (2 samples, 0.04%)</title><rect x="41.1" y="469" width="0.5" height="15.0" fill="rgb(210,209,12)" rx="2" ry="2" />
<text  x="44.15" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1069.1" y="453" width="0.2" height="15.0" fill="rgb(239,135,24)" rx="2" ry="2" />
<text  x="1072.07" y="463.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="453.9" y="373" width="1.1" height="15.0" fill="rgb(226,137,16)" rx="2" ry="2" />
<text  x="456.87" y="383.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (37 samples, 0.72%)</title><rect x="511.4" y="357" width="8.4" height="15.0" fill="rgb(247,24,21)" rx="2" ry="2" />
<text  x="514.36" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_users_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="65.7" y="485" width="0.2" height="15.0" fill="rgb(236,33,18)" rx="2" ry="2" />
<text  x="68.66" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (2 samples, 0.04%)</title><rect x="665.5" y="581" width="0.5" height="15.0" fill="rgb(239,184,9)" rx="2" ry="2" />
<text  x="668.50" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="721.8" y="485" width="0.3" height="15.0" fill="rgb(234,130,26)" rx="2" ry="2" />
<text  x="724.85" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (20 samples, 0.39%)</title><rect x="1133.4" y="341" width="4.6" height="15.0" fill="rgb(224,157,20)" rx="2" ry="2" />
<text  x="1136.43" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="832.2" y="373" width="0.3" height="15.0" fill="rgb(242,64,3)" rx="2" ry="2" />
<text  x="835.24" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (25 samples, 0.49%)</title><rect x="871.6" y="549" width="5.8" height="15.0" fill="rgb(208,158,26)" rx="2" ry="2" />
<text  x="874.64" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (19 samples, 0.37%)</title><rect x="1051.4" y="437" width="4.4" height="15.0" fill="rgb(215,3,42)" rx="2" ry="2" />
<text  x="1054.43" y="447.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%)</title><rect x="623.8" y="533" width="0.5" height="15.0" fill="rgb(209,123,4)" rx="2" ry="2" />
<text  x="626.82" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="338.2" y="405" width="0.5" height="15.0" fill="rgb(214,8,38)" rx="2" ry="2" />
<text  x="341.21" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="715.9" y="517" width="0.2" height="15.0" fill="rgb(219,53,35)" rx="2" ry="2" />
<text  x="718.89" y="527.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="472.0" y="453" width="0.2" height="15.0" fill="rgb(208,28,50)" rx="2" ry="2" />
<text  x="474.97" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="57.0" y="357" width="0.2" height="15.0" fill="rgb(205,226,39)" rx="2" ry="2" />
<text  x="59.95" y="367.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="26.9" y="277" width="0.3" height="15.0" fill="rgb(223,135,53)" rx="2" ry="2" />
<text  x="29.95" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.14%)</title><rect x="946.8" y="485" width="1.6" height="15.0" fill="rgb(230,182,44)" rx="2" ry="2" />
<text  x="949.76" y="495.5" ></text>
</g>
<g >
<title>ser::column_view::c (4 samples, 0.08%)</title><rect x="1125.6" y="341" width="1.0" height="15.0" fill="rgb(228,211,25)" rx="2" ry="2" />
<text  x="1128.64" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="60.8" y="373" width="0.5" height="15.0" fill="rgb(241,101,49)" rx="2" ry="2" />
<text  x="63.85" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.12%)</title><rect x="958.2" y="501" width="1.4" height="15.0" fill="rgb(241,225,24)" rx="2" ry="2" />
<text  x="961.21" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="41.6" y="405" width="0.2" height="15.0" fill="rgb(247,172,37)" rx="2" ry="2" />
<text  x="44.61" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="818.7" y="373" width="0.3" height="15.0" fill="rgb(247,176,4)" rx="2" ry="2" />
<text  x="821.73" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1113.7" y="501" width="0.3" height="15.0" fill="rgb(220,217,5)" rx="2" ry="2" />
<text  x="1116.73" y="511.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (32 samples, 0.62%)</title><rect x="1121.3" y="421" width="7.3" height="15.0" fill="rgb(244,69,33)" rx="2" ry="2" />
<text  x="1124.29" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1124.3" y="293" width="0.2" height="15.0" fill="rgb(248,74,8)" rx="2" ry="2" />
<text  x="1127.27" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1035.2" y="357" width="1.1" height="15.0" fill="rgb(205,33,17)" rx="2" ry="2" />
<text  x="1038.17" y="367.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%)</title><rect x="115.4" y="421" width="0.2" height="15.0" fill="rgb(235,87,6)" rx="2" ry="2" />
<text  x="118.36" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (62 samples, 1.20%)</title><rect x="24.0" y="437" width="14.2" height="15.0" fill="rgb(240,69,49)" rx="2" ry="2" />
<text  x="26.97" y="447.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1179.0" y="741" width="0.2" height="15.0" fill="rgb(238,222,14)" rx="2" ry="2" />
<text  x="1182.01" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (49 samples, 0.95%)</title><rect x="288.7" y="357" width="11.3" height="15.0" fill="rgb(210,133,13)" rx="2" ry="2" />
<text  x="291.74" y="367.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.14%)</title><rect x="218.9" y="325" width="1.6" height="15.0" fill="rgb(208,164,29)" rx="2" ry="2" />
<text  x="221.88" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1114.9" y="501" width="0.2" height="15.0" fill="rgb(228,36,13)" rx="2" ry="2" />
<text  x="1117.88" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="1028.3" y="293" width="0.5" height="15.0" fill="rgb(234,109,1)" rx="2" ry="2" />
<text  x="1031.30" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (6 samples, 0.12%)</title><rect x="953.9" y="517" width="1.3" height="15.0" fill="rgb(252,46,48)" rx="2" ry="2" />
<text  x="956.86" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%)</title><rect x="993.3" y="453" width="0.2" height="15.0" fill="rgb(209,90,47)" rx="2" ry="2" />
<text  x="996.26" y="463.5" ></text>
</g>
<g >
<title>schema_builder::build (3 samples, 0.06%)</title><rect x="115.4" y="501" width="0.6" height="15.0" fill="rgb(251,88,18)" rx="2" ry="2" />
<text  x="118.36" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="871.0" y="613" width="0.2" height="15.0" fill="rgb(226,229,29)" rx="2" ry="2" />
<text  x="873.95" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="341.2" y="373" width="0.2" height="15.0" fill="rgb(224,194,37)" rx="2" ry="2" />
<text  x="344.19" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="44.8" y="293" width="0.5" height="15.0" fill="rgb(216,201,7)" rx="2" ry="2" />
<text  x="47.81" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="645.1" y="597" width="0.7" height="15.0" fill="rgb(238,114,37)" rx="2" ry="2" />
<text  x="648.12" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (5 samples, 0.10%)</title><rect x="1085.8" y="437" width="1.1" height="15.0" fill="rgb(223,143,22)" rx="2" ry="2" />
<text  x="1088.79" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="650.6" y="597" width="0.2" height="15.0" fill="rgb(238,90,2)" rx="2" ry="2" />
<text  x="653.62" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="992.3" y="373" width="0.3" height="15.0" fill="rgb(228,218,20)" rx="2" ry="2" />
<text  x="995.34" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.12%)</title><rect x="39.8" y="405" width="1.3" height="15.0" fill="rgb(216,196,9)" rx="2" ry="2" />
<text  x="42.77" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="717.5" y="549" width="0.2" height="15.0" fill="rgb(211,44,48)" rx="2" ry="2" />
<text  x="720.50" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1067.7" y="421" width="0.2" height="15.0" fill="rgb(238,166,4)" rx="2" ry="2" />
<text  x="1070.69" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::get_deleter (1 samples, 0.02%)</title><rect x="57.4" y="405" width="0.2" height="15.0" fill="rgb(227,6,25)" rx="2" ry="2" />
<text  x="60.41" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="845.8" y="469" width="0.4" height="15.0" fill="rgb(226,228,16)" rx="2" ry="2" />
<text  x="848.76" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (2 samples, 0.04%)</title><rect x="1168.5" y="597" width="0.4" height="15.0" fill="rgb(240,36,52)" rx="2" ry="2" />
<text  x="1171.47" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%)</title><rect x="49.6" y="245" width="0.5" height="15.0" fill="rgb(208,163,44)" rx="2" ry="2" />
<text  x="52.62" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="60.4" y="357" width="0.2" height="15.0" fill="rgb(226,227,2)" rx="2" ry="2" />
<text  x="63.39" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="58.8" y="421" width="0.7" height="15.0" fill="rgb(220,180,48)" rx="2" ry="2" />
<text  x="61.78" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (65 samples, 1.26%)</title><rect x="574.1" y="501" width="14.9" height="15.0" fill="rgb(208,61,3)" rx="2" ry="2" />
<text  x="577.12" y="511.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (2 samples, 0.04%)</title><rect x="21.5" y="581" width="0.4" height="15.0" fill="rgb(241,190,35)" rx="2" ry="2" />
<text  x="24.45" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="795.6" y="389" width="0.2" height="15.0" fill="rgb(230,214,18)" rx="2" ry="2" />
<text  x="798.60" y="399.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="871.0" y="533" width="0.2" height="15.0" fill="rgb(250,178,8)" rx="2" ry="2" />
<text  x="873.95" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.0" y="453" width="0.2" height="15.0" fill="rgb(238,218,39)" rx="2" ry="2" />
<text  x="67.97" y="463.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, schema_mutations&gt; (1 samples, 0.02%)</title><rect x="114.9" y="533" width="0.2" height="15.0" fill="rgb(238,19,4)" rx="2" ry="2" />
<text  x="117.90" y="543.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="77.3" y="549" width="0.3" height="15.0" fill="rgb(230,92,53)" rx="2" ry="2" />
<text  x="80.34" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="646.5" y="597" width="0.2" height="15.0" fill="rgb(216,112,10)" rx="2" ry="2" />
<text  x="649.49" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="392.3" y="277" width="0.4" height="15.0" fill="rgb(242,139,28)" rx="2" ry="2" />
<text  x="395.26" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="851.5" y="485" width="3.4" height="15.0" fill="rgb(214,85,7)" rx="2" ry="2" />
<text  x="854.48" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (17 samples, 0.33%)</title><rect x="477.9" y="389" width="3.9" height="15.0" fill="rgb(236,188,46)" rx="2" ry="2" />
<text  x="480.92" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="932.6" y="469" width="0.2" height="15.0" fill="rgb(234,89,0)" rx="2" ry="2" />
<text  x="935.56" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.14%)</title><rect x="24.4" y="341" width="1.6" height="15.0" fill="rgb(215,180,46)" rx="2" ry="2" />
<text  x="27.43" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="102.1" y="565" width="0.2" height="15.0" fill="rgb(240,144,21)" rx="2" ry="2" />
<text  x="105.07" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (13 samples, 0.25%)</title><rect x="567.2" y="501" width="3.0" height="15.0" fill="rgb(254,76,2)" rx="2" ry="2" />
<text  x="570.25" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="827.0" y="405" width="0.4" height="15.0" fill="rgb(214,44,40)" rx="2" ry="2" />
<text  x="829.98" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1090.1" y="453" width="0.3" height="15.0" fill="rgb(251,131,33)" rx="2" ry="2" />
<text  x="1093.14" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (23 samples, 0.45%)</title><rect x="423.2" y="277" width="5.3" height="15.0" fill="rgb(210,118,19)" rx="2" ry="2" />
<text  x="426.18" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (7 samples, 0.14%)</title><rect x="341.4" y="373" width="1.6" height="15.0" fill="rgb(232,2,7)" rx="2" ry="2" />
<text  x="344.42" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="669.4" y="597" width="0.2" height="15.0" fill="rgb(239,177,4)" rx="2" ry="2" />
<text  x="672.40" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (37 samples, 0.72%)</title><rect x="1120.8" y="469" width="8.5" height="15.0" fill="rgb(218,32,51)" rx="2" ry="2" />
<text  x="1123.83" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="72.5" y="437" width="0.3" height="15.0" fill="rgb(250,70,54)" rx="2" ry="2" />
<text  x="75.53" y="447.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_line (1 samples, 0.02%)</title><rect x="27.6" y="389" width="0.3" height="15.0" fill="rgb(249,76,29)" rx="2" ry="2" />
<text  x="30.64" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1166.9" y="517" width="0.2" height="15.0" fill="rgb(253,76,2)" rx="2" ry="2" />
<text  x="1169.87" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (2 samples, 0.04%)</title><rect x="267.9" y="245" width="0.5" height="15.0" fill="rgb(211,220,24)" rx="2" ry="2" />
<text  x="270.90" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="19.2" y="645" width="0.2" height="15.0" fill="rgb(247,190,17)" rx="2" ry="2" />
<text  x="22.16" y="655.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="296.8" y="309" width="0.9" height="15.0" fill="rgb(207,147,11)" rx="2" ry="2" />
<text  x="299.75" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="699.2" y="581" width="0.2" height="15.0" fill="rgb(224,69,0)" rx="2" ry="2" />
<text  x="702.17" y="591.5" ></text>
</g>
<g >
<title>posix_memalign (25 samples, 0.49%)</title><rect x="250.3" y="165" width="5.7" height="15.0" fill="rgb(248,173,10)" rx="2" ry="2" />
<text  x="253.26" y="175.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (21 samples, 0.41%)</title><rect x="1063.3" y="437" width="4.9" height="15.0" fill="rgb(249,97,20)" rx="2" ry="2" />
<text  x="1066.34" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="43.9" y="245" width="0.2" height="15.0" fill="rgb(216,27,23)" rx="2" ry="2" />
<text  x="46.90" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::untyped_constant, false&gt;::_Uninitialized&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="37" width="0.3" height="15.0" fill="rgb(215,50,53)" rx="2" ry="2" />
<text  x="56.75" y="47.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="78.7" y="485" width="0.2" height="15.0" fill="rgb(222,0,49)" rx="2" ry="2" />
<text  x="81.71" y="495.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%)</title><rect x="1061.5" y="437" width="1.8" height="15.0" fill="rgb(249,85,52)" rx="2" ry="2" />
<text  x="1064.51" y="447.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (6 samples, 0.12%)</title><rect x="565.4" y="485" width="1.4" height="15.0" fill="rgb(217,164,27)" rx="2" ry="2" />
<text  x="568.42" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1167.8" y="229" width="0.2" height="15.0" fill="rgb(233,21,36)" rx="2" ry="2" />
<text  x="1170.78" y="239.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="582.6" y="405" width="0.7" height="15.0" fill="rgb(205,188,52)" rx="2" ry="2" />
<text  x="585.59" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="17.8" y="693" width="0.2" height="15.0" fill="rgb(251,16,35)" rx="2" ry="2" />
<text  x="20.79" y="703.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (7 samples, 0.14%)</title><rect x="617.2" y="549" width="1.6" height="15.0" fill="rgb(234,218,54)" rx="2" ry="2" />
<text  x="620.18" y="559.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (12 samples, 0.23%)</title><rect x="1133.9" y="293" width="2.7" height="15.0" fill="rgb(228,220,31)" rx="2" ry="2" />
<text  x="1136.89" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (5 samples, 0.10%)</title><rect x="48.9" y="421" width="1.2" height="15.0" fill="rgb(211,205,0)" rx="2" ry="2" />
<text  x="51.94" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (51 samples, 0.99%)</title><rect x="288.3" y="373" width="11.7" height="15.0" fill="rgb(213,55,14)" rx="2" ry="2" />
<text  x="291.28" y="383.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1104.6" y="469" width="2.0" height="15.0" fill="rgb(234,182,16)" rx="2" ry="2" />
<text  x="1107.57" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (3 samples, 0.06%)</title><rect x="35.0" y="373" width="0.7" height="15.0" fill="rgb(249,26,6)" rx="2" ry="2" />
<text  x="37.97" y="383.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%)</title><rect x="113.1" y="485" width="0.4" height="15.0" fill="rgb(240,213,49)" rx="2" ry="2" />
<text  x="116.07" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="58.1" y="437" width="0.2" height="15.0" fill="rgb(209,136,29)" rx="2" ry="2" />
<text  x="61.10" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (5 samples, 0.10%)</title><rect x="810.3" y="245" width="1.1" height="15.0" fill="rgb(233,31,0)" rx="2" ry="2" />
<text  x="813.26" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="54.9" y="341" width="0.7" height="15.0" fill="rgb(229,170,20)" rx="2" ry="2" />
<text  x="57.89" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (4 samples, 0.08%)</title><rect x="638.2" y="517" width="1.0" height="15.0" fill="rgb(254,25,48)" rx="2" ry="2" />
<text  x="641.25" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="56.0" y="245" width="0.3" height="15.0" fill="rgb(234,229,15)" rx="2" ry="2" />
<text  x="59.04" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="843.9" y="533" width="0.5" height="15.0" fill="rgb(217,201,32)" rx="2" ry="2" />
<text  x="846.92" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (2 samples, 0.04%)</title><rect x="614.7" y="501" width="0.4" height="15.0" fill="rgb(215,52,24)" rx="2" ry="2" />
<text  x="617.66" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="123.1" y="581" width="0.3" height="15.0" fill="rgb(243,74,9)" rx="2" ry="2" />
<text  x="126.14" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="549" width="9.4" height="15.0" fill="rgb(251,186,32)" rx="2" ry="2" />
<text  x="1132.31" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.19%)</title><rect x="448.6" y="373" width="2.3" height="15.0" fill="rgb(224,19,7)" rx="2" ry="2" />
<text  x="451.61" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="826.3" y="405" width="0.7" height="15.0" fill="rgb(228,61,25)" rx="2" ry="2" />
<text  x="829.29" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%)</title><rect x="475.9" y="405" width="0.2" height="15.0" fill="rgb(220,158,24)" rx="2" ry="2" />
<text  x="478.86" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.10%)</title><rect x="259.0" y="213" width="1.1" height="15.0" fill="rgb(212,140,0)" rx="2" ry="2" />
<text  x="261.96" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%)</title><rect x="114.0" y="613" width="0.2" height="15.0" fill="rgb(234,190,44)" rx="2" ry="2" />
<text  x="116.98" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (8 samples, 0.16%)</title><rect x="1113.3" y="517" width="1.8" height="15.0" fill="rgb(213,12,10)" rx="2" ry="2" />
<text  x="1116.27" y="527.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="368.2" y="293" width="0.2" height="15.0" fill="rgb(224,136,20)" rx="2" ry="2" />
<text  x="371.21" y="303.5" ></text>
</g>
<g >
<title>set_type_impl::set_type_impl (1 samples, 0.02%)</title><rect x="114.7" y="517" width="0.2" height="15.0" fill="rgb(240,123,46)" rx="2" ry="2" />
<text  x="117.67" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="55.6" y="309" width="0.2" height="15.0" fill="rgb(209,110,53)" rx="2" ry="2" />
<text  x="58.58" y="319.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="617.6" y="517" width="0.3" height="15.0" fill="rgb(225,184,32)" rx="2" ry="2" />
<text  x="620.64" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="871.4" y="597" width="0.2" height="15.0" fill="rgb(220,15,19)" rx="2" ry="2" />
<text  x="874.41" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="43.7" y="389" width="0.4" height="15.0" fill="rgb(229,21,28)" rx="2" ry="2" />
<text  x="46.67" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="85.1" y="469" width="0.5" height="15.0" fill="rgb(238,133,11)" rx="2" ry="2" />
<text  x="88.12" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1019.6" y="325" width="0.2" height="15.0" fill="rgb(253,123,15)" rx="2" ry="2" />
<text  x="1022.60" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="144.4" y="565" width="0.3" height="15.0" fill="rgb(224,125,27)" rx="2" ry="2" />
<text  x="147.44" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="72.3" y="501" width="0.2" height="15.0" fill="rgb(212,145,28)" rx="2" ry="2" />
<text  x="75.30" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%)</title><rect x="916.1" y="469" width="1.1" height="15.0" fill="rgb(243,190,33)" rx="2" ry="2" />
<text  x="919.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="597.7" y="453" width="0.2" height="15.0" fill="rgb(230,78,9)" rx="2" ry="2" />
<text  x="600.71" y="463.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="115.4" y="357" width="0.2" height="15.0" fill="rgb(233,30,38)" rx="2" ry="2" />
<text  x="118.36" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="936.9" y="517" width="0.2" height="15.0" fill="rgb(244,26,41)" rx="2" ry="2" />
<text  x="939.91" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.10%)</title><rect x="660.5" y="549" width="1.1" height="15.0" fill="rgb(243,183,15)" rx="2" ry="2" />
<text  x="663.47" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="529.9" y="357" width="0.5" height="15.0" fill="rgb(222,87,12)" rx="2" ry="2" />
<text  x="532.91" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (11 samples, 0.21%)</title><rect x="681.3" y="581" width="2.5" height="15.0" fill="rgb(249,170,25)" rx="2" ry="2" />
<text  x="684.31" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="541.4" y="421" width="0.2" height="15.0" fill="rgb(248,127,51)" rx="2" ry="2" />
<text  x="544.37" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="706.0" y="597" width="0.7" height="15.0" fill="rgb(249,91,51)" rx="2" ry="2" />
<text  x="709.04" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.10%)</title><rect x="47.1" y="421" width="1.1" height="15.0" fill="rgb(254,128,7)" rx="2" ry="2" />
<text  x="50.10" y="431.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1035.2" y="373" width="1.1" height="15.0" fill="rgb(249,195,51)" rx="2" ry="2" />
<text  x="1038.17" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="669.9" y="597" width="0.4" height="15.0" fill="rgb(254,92,45)" rx="2" ry="2" />
<text  x="672.86" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="1130.2" y="405" width="3.2" height="15.0" fill="rgb(209,75,21)" rx="2" ry="2" />
<text  x="1133.22" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="295.2" y="277" width="0.2" height="15.0" fill="rgb(229,205,47)" rx="2" ry="2" />
<text  x="298.15" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="517" width="0.2" height="15.0" fill="rgb(210,2,44)" rx="2" ry="2" />
<text  x="699.20" y="527.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="901.4" y="405" width="0.2" height="15.0" fill="rgb(234,210,13)" rx="2" ry="2" />
<text  x="904.41" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="79.9" y="421" width="0.9" height="15.0" fill="rgb(231,211,13)" rx="2" ry="2" />
<text  x="82.86" y="431.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1043.9" y="389" width="0.2" height="15.0" fill="rgb(254,165,46)" rx="2" ry="2" />
<text  x="1046.87" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.0" y="485" width="0.2" height="15.0" fill="rgb(222,219,30)" rx="2" ry="2" />
<text  x="67.97" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry::last_dummy_tag, seastar::bool_class&lt;continuous_tag&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="18.5" y="629" width="0.2" height="15.0" fill="rgb(229,177,46)" rx="2" ry="2" />
<text  x="21.47" y="639.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="915.4" y="469" width="0.2" height="15.0" fill="rgb(214,211,20)" rx="2" ry="2" />
<text  x="918.38" y="479.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (2 samples, 0.04%)</title><rect x="331.1" y="437" width="0.5" height="15.0" fill="rgb(252,109,5)" rx="2" ry="2" />
<text  x="334.11" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.17%)</title><rect x="690.0" y="565" width="2.1" height="15.0" fill="rgb(227,30,25)" rx="2" ry="2" />
<text  x="693.01" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="231.9" y="261" width="0.3" height="15.0" fill="rgb(230,75,35)" rx="2" ry="2" />
<text  x="234.94" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="453.0" y="405" width="0.2" height="15.0" fill="rgb(238,1,49)" rx="2" ry="2" />
<text  x="455.96" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="695.5" y="597" width="0.2" height="15.0" fill="rgb(206,60,37)" rx="2" ry="2" />
<text  x="698.51" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="42.3" y="357" width="0.7" height="15.0" fill="rgb(212,35,49)" rx="2" ry="2" />
<text  x="45.29" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%)</title><rect x="134.8" y="517" width="0.7" height="15.0" fill="rgb(215,29,3)" rx="2" ry="2" />
<text  x="137.83" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1087.8" y="469" width="0.3" height="15.0" fill="rgb(241,209,34)" rx="2" ry="2" />
<text  x="1090.85" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (2 samples, 0.04%)</title><rect x="926.1" y="485" width="0.5" height="15.0" fill="rgb(250,202,25)" rx="2" ry="2" />
<text  x="929.15" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.12%)</title><rect x="274.8" y="245" width="1.3" height="15.0" fill="rgb(215,210,12)" rx="2" ry="2" />
<text  x="277.77" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="19.2" y="405" width="0.2" height="15.0" fill="rgb(218,60,20)" rx="2" ry="2" />
<text  x="22.16" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="801.1" y="325" width="0.2" height="15.0" fill="rgb(210,27,30)" rx="2" ry="2" />
<text  x="804.09" y="335.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="19.4" y="405" width="0.2" height="15.0" fill="rgb(229,167,51)" rx="2" ry="2" />
<text  x="22.39" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="585.1" y="389" width="0.2" height="15.0" fill="rgb(252,150,48)" rx="2" ry="2" />
<text  x="588.11" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="644.0" y="517" width="0.2" height="15.0" fill="rgb(246,143,22)" rx="2" ry="2" />
<text  x="646.98" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="38.2" y="469" width="0.2" height="15.0" fill="rgb(215,116,13)" rx="2" ry="2" />
<text  x="41.17" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="220.5" y="309" width="1.1" height="15.0" fill="rgb(246,97,34)" rx="2" ry="2" />
<text  x="223.49" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (12 samples, 0.23%)</title><rect x="750.5" y="485" width="2.7" height="15.0" fill="rgb(213,4,29)" rx="2" ry="2" />
<text  x="753.48" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (2 samples, 0.04%)</title><rect x="812.1" y="229" width="0.4" height="15.0" fill="rgb(219,77,18)" rx="2" ry="2" />
<text  x="815.09" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="965.3" y="437" width="0.2" height="15.0" fill="rgb(217,63,49)" rx="2" ry="2" />
<text  x="968.31" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="266.8" y="213" width="0.9" height="15.0" fill="rgb(227,160,14)" rx="2" ry="2" />
<text  x="269.75" y="223.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="761.5" y="517" width="0.4" height="15.0" fill="rgb(210,193,24)" rx="2" ry="2" />
<text  x="764.47" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (2 samples, 0.04%)</title><rect x="86.0" y="549" width="0.5" height="15.0" fill="rgb(224,171,16)" rx="2" ry="2" />
<text  x="89.04" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="42.3" y="341" width="0.7" height="15.0" fill="rgb(251,41,18)" rx="2" ry="2" />
<text  x="45.29" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="802.2" y="293" width="2.1" height="15.0" fill="rgb(219,156,27)" rx="2" ry="2" />
<text  x="805.24" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1120.4" y="565" width="0.2" height="15.0" fill="rgb(232,4,1)" rx="2" ry="2" />
<text  x="1123.37" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="756.2" y="389" width="0.2" height="15.0" fill="rgb(247,194,12)" rx="2" ry="2" />
<text  x="759.20" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1143.3" y="597" width="0.2" height="15.0" fill="rgb(210,58,21)" rx="2" ry="2" />
<text  x="1146.28" y="607.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (38 samples, 0.74%)</title><rect x="1120.6" y="517" width="8.7" height="15.0" fill="rgb(247,195,54)" rx="2" ry="2" />
<text  x="1123.60" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1108.0" y="517" width="0.2" height="15.0" fill="rgb(210,139,35)" rx="2" ry="2" />
<text  x="1111.00" y="527.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%)</title><rect x="734.2" y="517" width="0.2" height="15.0" fill="rgb(231,201,22)" rx="2" ry="2" />
<text  x="737.22" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.0" y="229" width="0.3" height="15.0" fill="rgb(236,76,50)" rx="2" ry="2" />
<text  x="48.04" y="239.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="604.6" y="517" width="0.9" height="15.0" fill="rgb(247,177,31)" rx="2" ry="2" />
<text  x="607.58" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (3 samples, 0.06%)</title><rect x="99.1" y="597" width="0.7" height="15.0" fill="rgb(237,118,21)" rx="2" ry="2" />
<text  x="102.10" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="1161.4" y="597" width="1.1" height="15.0" fill="rgb(237,228,44)" rx="2" ry="2" />
<text  x="1164.37" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="227.6" y="325" width="0.2" height="15.0" fill="rgb(248,11,37)" rx="2" ry="2" />
<text  x="230.59" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.29%)</title><rect x="940.6" y="517" width="3.4" height="15.0" fill="rgb(219,124,16)" rx="2" ry="2" />
<text  x="943.58" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1042.5" y="389" width="0.5" height="15.0" fill="rgb(231,1,30)" rx="2" ry="2" />
<text  x="1045.50" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (3 samples, 0.06%)</title><rect x="875.8" y="389" width="0.6" height="15.0" fill="rgb(211,46,44)" rx="2" ry="2" />
<text  x="878.76" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="729.6" y="549" width="0.3" height="15.0" fill="rgb(235,201,51)" rx="2" ry="2" />
<text  x="732.64" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (3 samples, 0.06%)</title><rect x="439.9" y="325" width="0.7" height="15.0" fill="rgb(216,220,3)" rx="2" ry="2" />
<text  x="442.90" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="911.3" y="405" width="0.2" height="15.0" fill="rgb(231,125,26)" rx="2" ry="2" />
<text  x="914.26" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.14%)</title><rect x="553.5" y="421" width="1.6" height="15.0" fill="rgb(243,137,5)" rx="2" ry="2" />
<text  x="556.51" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="38.6" y="469" width="0.3" height="15.0" fill="rgb(219,154,13)" rx="2" ry="2" />
<text  x="41.63" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="956.4" y="485" width="0.2" height="15.0" fill="rgb(206,71,44)" rx="2" ry="2" />
<text  x="959.38" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="39.1" y="325" width="0.4" height="15.0" fill="rgb(252,161,1)" rx="2" ry="2" />
<text  x="42.09" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="298.1" y="277" width="0.9" height="15.0" fill="rgb(237,185,47)" rx="2" ry="2" />
<text  x="301.13" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1108.2" y="517" width="0.5" height="15.0" fill="rgb(210,187,47)" rx="2" ry="2" />
<text  x="1111.23" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="998.3" y="389" width="0.2" height="15.0" fill="rgb(205,111,48)" rx="2" ry="2" />
<text  x="1001.30" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="632.1" y="485" width="0.4" height="15.0" fill="rgb(225,205,1)" rx="2" ry="2" />
<text  x="635.07" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (222 samples, 4.31%)</title><rect x="227.6" y="341" width="50.8" height="15.0" fill="rgb(215,135,27)" rx="2" ry="2" />
<text  x="230.59" y="351.5" >parti..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="26.3" y="325" width="0.2" height="15.0" fill="rgb(222,222,43)" rx="2" ry="2" />
<text  x="29.26" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (422 samples, 8.19%)</title><rect x="743.4" y="549" width="96.6" height="15.0" fill="rgb(231,110,26)" rx="2" ry="2" />
<text  x="746.38" y="559.5" >cql3::query..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (194 samples, 3.77%)</title><rect x="23.7" y="533" width="44.5" height="15.0" fill="rgb(231,23,35)" rx="2" ry="2" />
<text  x="26.74" y="543.5" >seas..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="19.2" y="613" width="0.2" height="15.0" fill="rgb(238,214,29)" rx="2" ry="2" />
<text  x="22.16" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (2 samples, 0.04%)</title><rect x="62.4" y="453" width="0.5" height="15.0" fill="rgb(217,10,25)" rx="2" ry="2" />
<text  x="65.45" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.8" y="501" width="0.2" height="15.0" fill="rgb(250,103,10)" rx="2" ry="2" />
<text  x="69.80" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%)</title><rect x="611.2" y="517" width="0.5" height="15.0" fill="rgb(219,130,15)" rx="2" ry="2" />
<text  x="614.22" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="494.9" y="421" width="0.9" height="15.0" fill="rgb(237,219,32)" rx="2" ry="2" />
<text  x="497.87" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="330.9" y="405" width="0.2" height="15.0" fill="rgb(209,49,31)" rx="2" ry="2" />
<text  x="333.88" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.9" y="389" width="0.2" height="15.0" fill="rgb(220,58,19)" rx="2" ry="2" />
<text  x="41.86" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="114.0" y="213" width="0.2" height="15.0" fill="rgb(244,13,44)" rx="2" ry="2" />
<text  x="116.98" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="39.1" y="389" width="0.4" height="15.0" fill="rgb(224,61,23)" rx="2" ry="2" />
<text  x="42.09" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="989.1" y="389" width="0.3" height="15.0" fill="rgb(211,147,52)" rx="2" ry="2" />
<text  x="992.13" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (52 samples, 1.01%)</title><rect x="697.3" y="613" width="12.0" height="15.0" fill="rgb(245,80,15)" rx="2" ry="2" />
<text  x="700.34" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="441.5" y="341" width="0.5" height="15.0" fill="rgb(218,95,38)" rx="2" ry="2" />
<text  x="444.51" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="460.1" y="485" width="0.2" height="15.0" fill="rgb(229,55,25)" rx="2" ry="2" />
<text  x="463.06" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1141.2" y="613" width="0.2" height="15.0" fill="rgb(250,129,44)" rx="2" ry="2" />
<text  x="1144.22" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="814.4" y="309" width="0.2" height="15.0" fill="rgb(238,39,10)" rx="2" ry="2" />
<text  x="817.38" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1021.9" y="277" width="0.4" height="15.0" fill="rgb(226,142,20)" rx="2" ry="2" />
<text  x="1024.89" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="59.7" y="405" width="0.2" height="15.0" fill="rgb(229,56,30)" rx="2" ry="2" />
<text  x="62.70" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="464.6" y="501" width="0.3" height="15.0" fill="rgb(234,195,23)" rx="2" ry="2" />
<text  x="467.64" y="511.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="325.8" y="389" width="2.3" height="15.0" fill="rgb(212,12,49)" rx="2" ry="2" />
<text  x="328.84" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="660.9" y="533" width="0.7" height="15.0" fill="rgb(231,103,12)" rx="2" ry="2" />
<text  x="663.92" y="543.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (3 samples, 0.06%)</title><rect x="354.2" y="325" width="0.7" height="15.0" fill="rgb(222,213,43)" rx="2" ry="2" />
<text  x="357.24" y="335.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.04%)</title><rect x="1189.5" y="741" width="0.5" height="15.0" fill="rgb(226,8,8)" rx="2" ry="2" />
<text  x="1192.54" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1028.3" y="261" width="0.2" height="15.0" fill="rgb(240,65,31)" rx="2" ry="2" />
<text  x="1031.30" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="62.9" y="357" width="0.2" height="15.0" fill="rgb(219,99,41)" rx="2" ry="2" />
<text  x="65.91" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="61.8" y="421" width="0.2" height="15.0" fill="rgb(245,33,53)" rx="2" ry="2" />
<text  x="64.76" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="924.8" y="501" width="0.7" height="15.0" fill="rgb(253,160,49)" rx="2" ry="2" />
<text  x="927.77" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (6 samples, 0.12%)</title><rect x="487.3" y="389" width="1.4" height="15.0" fill="rgb(206,72,2)" rx="2" ry="2" />
<text  x="490.31" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.5" y="373" width="0.2" height="15.0" fill="rgb(244,104,39)" rx="2" ry="2" />
<text  x="62.47" y="383.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="58.1" y="421" width="0.2" height="15.0" fill="rgb(219,102,29)" rx="2" ry="2" />
<text  x="61.10" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="261" width="0.5" height="15.0" fill="rgb(241,218,42)" rx="2" ry="2" />
<text  x="56.75" y="271.5" ></text>
</g>
<g >
<title>perf_simple_que (5,150 samples, 99.96%)</title><rect x="10.0" y="757" width="1179.5" height="15.0" fill="rgb(238,76,27)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >perf_simple_que</text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="858.4" y="485" width="0.2" height="15.0" fill="rgb(227,62,35)" rx="2" ry="2" />
<text  x="861.35" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="65.0" y="437" width="0.2" height="15.0" fill="rgb(213,205,44)" rx="2" ry="2" />
<text  x="67.97" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="101.2" y="581" width="1.1" height="15.0" fill="rgb(208,159,42)" rx="2" ry="2" />
<text  x="104.16" y="591.5" ></text>
</g>
<g >
<title>auth::get_permissions (4 samples, 0.08%)</title><rect x="79.9" y="485" width="0.9" height="15.0" fill="rgb(249,134,8)" rx="2" ry="2" />
<text  x="82.86" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="559.2" y="453" width="0.3" height="15.0" fill="rgb(253,85,22)" rx="2" ry="2" />
<text  x="562.23" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="56.0" y="181" width="0.3" height="15.0" fill="rgb(206,180,32)" rx="2" ry="2" />
<text  x="59.04" y="191.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="1071.6" y="357" width="0.7" height="15.0" fill="rgb(225,190,34)" rx="2" ry="2" />
<text  x="1074.59" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="715.7" y="533" width="0.2" height="15.0" fill="rgb(228,56,11)" rx="2" ry="2" />
<text  x="718.66" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (9 samples, 0.17%)</title><rect x="751.2" y="453" width="2.0" height="15.0" fill="rgb(227,96,54)" rx="2" ry="2" />
<text  x="754.16" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="116.0" y="565" width="0.3" height="15.0" fill="rgb(246,21,32)" rx="2" ry="2" />
<text  x="119.04" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="765.6" y="501" width="2.1" height="15.0" fill="rgb(212,121,26)" rx="2" ry="2" />
<text  x="768.59" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (13 samples, 0.25%)</title><rect x="442.4" y="325" width="3.0" height="15.0" fill="rgb(210,111,23)" rx="2" ry="2" />
<text  x="445.42" y="335.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.10%)</title><rect x="105.1" y="517" width="1.1" height="15.0" fill="rgb(222,208,24)" rx="2" ry="2" />
<text  x="108.05" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="206.7" y="373" width="0.5" height="15.0" fill="rgb(220,217,18)" rx="2" ry="2" />
<text  x="209.74" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="933.5" y="501" width="0.4" height="15.0" fill="rgb(243,182,46)" rx="2" ry="2" />
<text  x="936.48" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="906.2" y="437" width="0.7" height="15.0" fill="rgb(237,114,30)" rx="2" ry="2" />
<text  x="909.22" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (412 samples, 8.00%)</title><rect x="208.8" y="405" width="94.4" height="15.0" fill="rgb(238,166,24)" rx="2" ry="2" />
<text  x="211.80" y="415.5" >seastar::do..</text>
</g>
<g >
<title>auth::resource::parent (1 samples, 0.02%)</title><rect x="79.6" y="501" width="0.3" height="15.0" fill="rgb(208,223,1)" rx="2" ry="2" />
<text  x="82.63" y="511.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.4" y="277" width="0.2" height="15.0" fill="rgb(234,8,40)" rx="2" ry="2" />
<text  x="49.42" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.7" y="325" width="0.2" height="15.0" fill="rgb(226,128,3)" rx="2" ry="2" />
<text  x="62.70" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="78.3" y="517" width="0.2" height="15.0" fill="rgb(228,8,1)" rx="2" ry="2" />
<text  x="81.25" y="527.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (474 samples, 9.20%)</title><rect x="344.2" y="405" width="108.5" height="15.0" fill="rgb(218,150,8)" rx="2" ry="2" />
<text  x="347.17" y="415.5" >seastar::repe..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="115.6" y="437" width="0.2" height="15.0" fill="rgb(214,65,11)" rx="2" ry="2" />
<text  x="118.59" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (12 samples, 0.23%)</title><rect x="24.4" y="405" width="2.8" height="15.0" fill="rgb(209,99,26)" rx="2" ry="2" />
<text  x="27.43" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="756.7" y="421" width="0.2" height="15.0" fill="rgb(248,131,9)" rx="2" ry="2" />
<text  x="759.66" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (37 samples, 0.72%)</title><rect x="1129.5" y="453" width="8.5" height="15.0" fill="rgb(244,94,50)" rx="2" ry="2" />
<text  x="1132.53" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%)</title><rect x="111.7" y="597" width="0.5" height="15.0" fill="rgb(227,137,14)" rx="2" ry="2" />
<text  x="114.69" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (10 samples, 0.19%)</title><rect x="707.0" y="597" width="2.3" height="15.0" fill="rgb(245,195,11)" rx="2" ry="2" />
<text  x="709.96" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (1 samples, 0.02%)</title><rect x="74.8" y="437" width="0.2" height="15.0" fill="rgb(236,65,51)" rx="2" ry="2" />
<text  x="77.82" y="447.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.16%)</title><rect x="456.4" y="485" width="1.8" height="15.0" fill="rgb(213,229,11)" rx="2" ry="2" />
<text  x="459.39" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1041.4" y="325" width="0.2" height="15.0" fill="rgb(225,123,47)" rx="2" ry="2" />
<text  x="1044.35" y="335.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="519.1" y="325" width="0.7" height="15.0" fill="rgb(231,67,17)" rx="2" ry="2" />
<text  x="522.15" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::fstat (1 samples, 0.02%)</title><rect x="684.1" y="581" width="0.2" height="15.0" fill="rgb(207,61,8)" rx="2" ry="2" />
<text  x="687.06" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="566.8" y="485" width="0.4" height="15.0" fill="rgb(231,102,54)" rx="2" ry="2" />
<text  x="569.79" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%)</title><rect x="725.1" y="613" width="0.2" height="15.0" fill="rgb(220,75,6)" rx="2" ry="2" />
<text  x="728.05" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::task_queue (1 samples, 0.02%)</title><rect x="116.0" y="517" width="0.3" height="15.0" fill="rgb(217,142,15)" rx="2" ry="2" />
<text  x="119.04" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="334.1" y="453" width="0.2" height="15.0" fill="rgb(222,221,30)" rx="2" ry="2" />
<text  x="337.09" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="21.7" y="565" width="0.2" height="15.0" fill="rgb(242,173,32)" rx="2" ry="2" />
<text  x="24.68" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1163.7" y="581" width="0.2" height="15.0" fill="rgb(254,200,36)" rx="2" ry="2" />
<text  x="1166.66" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (8 samples, 0.16%)</title><rect x="666.0" y="581" width="1.8" height="15.0" fill="rgb(216,157,46)" rx="2" ry="2" />
<text  x="668.96" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.8" y="277" width="0.5" height="15.0" fill="rgb(225,2,7)" rx="2" ry="2" />
<text  x="58.81" y="287.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="704.7" y="533" width="0.2" height="15.0" fill="rgb(236,201,13)" rx="2" ry="2" />
<text  x="707.67" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="332.7" y="469" width="0.5" height="15.0" fill="rgb(248,14,45)" rx="2" ry="2" />
<text  x="335.71" y="479.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (3 samples, 0.06%)</title><rect x="189.6" y="373" width="0.7" height="15.0" fill="rgb(210,200,19)" rx="2" ry="2" />
<text  x="192.57" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.2" y="533" width="0.2" height="15.0" fill="rgb(227,214,40)" rx="2" ry="2" />
<text  x="22.16" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (6 samples, 0.12%)</title><rect x="872.3" y="501" width="1.4" height="15.0" fill="rgb(230,66,7)" rx="2" ry="2" />
<text  x="875.33" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1122.2" y="341" width="0.2" height="15.0" fill="rgb(208,10,19)" rx="2" ry="2" />
<text  x="1125.20" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="478.8" y="341" width="2.1" height="15.0" fill="rgb(235,62,19)" rx="2" ry="2" />
<text  x="481.84" y="351.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="121.3" y="581" width="0.7" height="15.0" fill="rgb(241,2,16)" rx="2" ry="2" />
<text  x="124.31" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="589.0" y="469" width="0.2" height="15.0" fill="rgb(226,207,6)" rx="2" ry="2" />
<text  x="592.01" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="563.6" y="517" width="0.7" height="15.0" fill="rgb(227,190,9)" rx="2" ry="2" />
<text  x="566.58" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%)</title><rect x="872.6" y="469" width="0.4" height="15.0" fill="rgb(224,108,19)" rx="2" ry="2" />
<text  x="875.55" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="72.8" y="437" width="0.4" height="15.0" fill="rgb(223,23,47)" rx="2" ry="2" />
<text  x="75.76" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="24.2" y="421" width="0.2" height="15.0" fill="rgb(221,26,6)" rx="2" ry="2" />
<text  x="27.20" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (48 samples, 0.93%)</title><rect x="895.9" y="453" width="11.0" height="15.0" fill="rgb(214,56,52)" rx="2" ry="2" />
<text  x="898.92" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (51 samples, 0.99%)</title><rect x="684.3" y="613" width="11.7" height="15.0" fill="rgb(233,3,32)" rx="2" ry="2" />
<text  x="687.29" y="623.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="18.5" y="613" width="0.2" height="15.0" fill="rgb(233,42,27)" rx="2" ry="2" />
<text  x="21.47" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%)</title><rect x="438.3" y="341" width="2.3" height="15.0" fill="rgb(242,199,22)" rx="2" ry="2" />
<text  x="441.30" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="865.9" y="517" width="0.5" height="15.0" fill="rgb(228,219,26)" rx="2" ry="2" />
<text  x="868.91" y="527.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="83.5" y="581" width="0.3" height="15.0" fill="rgb(213,128,31)" rx="2" ry="2" />
<text  x="86.52" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="446.8" y="293" width="0.4" height="15.0" fill="rgb(219,54,51)" rx="2" ry="2" />
<text  x="449.77" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1030.1" y="309" width="0.3" height="15.0" fill="rgb(249,4,27)" rx="2" ry="2" />
<text  x="1033.13" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="696.2" y="597" width="0.2" height="15.0" fill="rgb(237,43,3)" rx="2" ry="2" />
<text  x="699.20" y="607.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="721.4" y="565" width="0.2" height="15.0" fill="rgb(223,135,52)" rx="2" ry="2" />
<text  x="724.39" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="309.4" y="421" width="0.2" height="15.0" fill="rgb(244,107,12)" rx="2" ry="2" />
<text  x="312.35" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::file&gt;, seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (2 samples, 0.04%)</title><rect x="644.2" y="613" width="0.5" height="15.0" fill="rgb(221,87,14)" rx="2" ry="2" />
<text  x="647.20" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="865.2" y="549" width="1.2" height="15.0" fill="rgb(226,89,25)" rx="2" ry="2" />
<text  x="868.23" y="559.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (64 samples, 1.24%)</title><rect x="1070.4" y="405" width="14.7" height="15.0" fill="rgb(225,107,17)" rx="2" ry="2" />
<text  x="1073.44" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="436.0" y="325" width="0.2" height="15.0" fill="rgb(228,148,32)" rx="2" ry="2" />
<text  x="439.01" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="477.5" y="373" width="0.4" height="15.0" fill="rgb(221,229,32)" rx="2" ry="2" />
<text  x="480.47" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="112.6" y="581" width="0.2" height="15.0" fill="rgb(242,200,49)" rx="2" ry="2" />
<text  x="115.61" y="591.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (41 samples, 0.80%)</title><rect x="510.4" y="373" width="9.4" height="15.0" fill="rgb(212,172,33)" rx="2" ry="2" />
<text  x="513.45" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="702.4" y="565" width="0.2" height="15.0" fill="rgb(238,181,1)" rx="2" ry="2" />
<text  x="705.38" y="575.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (4 samples, 0.08%)</title><rect x="575.5" y="453" width="0.9" height="15.0" fill="rgb(231,43,35)" rx="2" ry="2" />
<text  x="578.49" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="483.0" y="405" width="0.2" height="15.0" fill="rgb(220,190,51)" rx="2" ry="2" />
<text  x="485.96" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="849.4" y="533" width="0.5" height="15.0" fill="rgb(246,149,29)" rx="2" ry="2" />
<text  x="852.42" y="543.5" ></text>
</g>
<g >
<title>schema::get_partitioner (3 samples, 0.06%)</title><rect x="936.0" y="517" width="0.7" height="15.0" fill="rgb(208,189,34)" rx="2" ry="2" />
<text  x="939.00" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="624.3" y="549" width="0.2" height="15.0" fill="rgb(206,219,44)" rx="2" ry="2" />
<text  x="627.28" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="86.5" y="581" width="0.2" height="15.0" fill="rgb(226,219,7)" rx="2" ry="2" />
<text  x="89.50" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (1 samples, 0.02%)</title><rect x="73.4" y="437" width="0.3" height="15.0" fill="rgb(228,28,41)" rx="2" ry="2" />
<text  x="76.44" y="447.5" ></text>
</g>
<g >
<title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;column_definition*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;column_definition::name_comparator&gt; &gt; (1 samples, 0.02%)</title><rect x="115.8" y="453" width="0.2" height="15.0" fill="rgb(209,141,45)" rx="2" ry="2" />
<text  x="118.82" y="463.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="18.0" y="629" width="0.2" height="15.0" fill="rgb(241,81,18)" rx="2" ry="2" />
<text  x="21.02" y="639.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (4 samples, 0.08%)</title><rect x="139.6" y="517" width="1.0" height="15.0" fill="rgb(235,86,51)" rx="2" ry="2" />
<text  x="142.64" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.14%)</title><rect x="24.4" y="357" width="1.6" height="15.0" fill="rgb(237,40,43)" rx="2" ry="2" />
<text  x="27.43" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.10%)</title><rect x="47.1" y="389" width="1.1" height="15.0" fill="rgb(211,45,47)" rx="2" ry="2" />
<text  x="50.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="1088.1" y="469" width="2.5" height="15.0" fill="rgb(234,73,42)" rx="2" ry="2" />
<text  x="1091.08" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%)</title><rect x="42.1" y="453" width="0.2" height="15.0" fill="rgb(245,152,0)" rx="2" ry="2" />
<text  x="45.07" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="53.5" y="325" width="0.7" height="15.0" fill="rgb(208,77,44)" rx="2" ry="2" />
<text  x="56.52" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="10.9" y="613" width="0.2" height="15.0" fill="rgb(254,20,4)" rx="2" ry="2" />
<text  x="13.92" y="623.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt; (1 samples, 0.02%)</title><rect x="26.9" y="261" width="0.3" height="15.0" fill="rgb(237,65,36)" rx="2" ry="2" />
<text  x="29.95" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1135.7" y="149" width="0.2" height="15.0" fill="rgb(216,78,32)" rx="2" ry="2" />
<text  x="1138.72" y="159.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="552.1" y="373" width="0.5" height="15.0" fill="rgb(228,226,40)" rx="2" ry="2" />
<text  x="555.13" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="209.9" y="373" width="0.3" height="15.0" fill="rgb(241,12,7)" rx="2" ry="2" />
<text  x="212.95" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (4 samples, 0.08%)</title><rect x="89.7" y="629" width="0.9" height="15.0" fill="rgb(208,106,4)" rx="2" ry="2" />
<text  x="92.70" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="790.8" y="373" width="0.2" height="15.0" fill="rgb(206,31,30)" rx="2" ry="2" />
<text  x="793.79" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="693.9" y="565" width="0.5" height="15.0" fill="rgb(234,189,49)" rx="2" ry="2" />
<text  x="696.91" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="1108.9" y="533" width="0.2" height="15.0" fill="rgb(212,196,22)" rx="2" ry="2" />
<text  x="1111.92" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="114.0" y="485" width="0.2" height="15.0" fill="rgb(248,51,41)" rx="2" ry="2" />
<text  x="116.98" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (22 samples, 0.43%)</title><rect x="71.8" y="533" width="5.1" height="15.0" fill="rgb(232,69,16)" rx="2" ry="2" />
<text  x="74.84" y="543.5" ></text>
</g>
<g >
<title>boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="113.8" y="453" width="0.2" height="15.0" fill="rgb(227,144,40)" rx="2" ry="2" />
<text  x="116.75" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="89.5" y="629" width="0.2" height="15.0" fill="rgb(206,165,9)" rx="2" ry="2" />
<text  x="92.48" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="207.4" y="373" width="0.5" height="15.0" fill="rgb(229,199,3)" rx="2" ry="2" />
<text  x="210.43" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="22.4" y="517" width="0.2" height="15.0" fill="rgb(242,175,21)" rx="2" ry="2" />
<text  x="25.37" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.8" y="293" width="0.2" height="15.0" fill="rgb(231,53,5)" rx="2" ry="2" />
<text  x="28.80" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="19.4" y="453" width="0.2" height="15.0" fill="rgb(225,21,19)" rx="2" ry="2" />
<text  x="22.39" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="57.9" y="389" width="0.2" height="15.0" fill="rgb(220,206,49)" rx="2" ry="2" />
<text  x="60.87" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (2 samples, 0.04%)</title><rect x="75.0" y="437" width="0.5" height="15.0" fill="rgb(222,90,25)" rx="2" ry="2" />
<text  x="78.05" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="828.4" y="501" width="0.9" height="15.0" fill="rgb(230,70,29)" rx="2" ry="2" />
<text  x="831.35" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="44.6" y="373" width="0.7" height="15.0" fill="rgb(248,86,41)" rx="2" ry="2" />
<text  x="47.58" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1132.3" y="309" width="0.4" height="15.0" fill="rgb(220,184,27)" rx="2" ry="2" />
<text  x="1135.28" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1135.9" y="213" width="0.3" height="15.0" fill="rgb(221,179,17)" rx="2" ry="2" />
<text  x="1138.95" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="767.7" y="517" width="0.2" height="15.0" fill="rgb(218,81,3)" rx="2" ry="2" />
<text  x="770.66" y="527.5" ></text>
</g>
<g >
<title>db::cdc_generations_v2 (1 samples, 0.02%)</title><rect x="114.7" y="597" width="0.2" height="15.0" fill="rgb(244,78,23)" rx="2" ry="2" />
<text  x="117.67" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="903.2" y="421" width="0.3" height="15.0" fill="rgb(227,203,10)" rx="2" ry="2" />
<text  x="906.25" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="646.0" y="581" width="0.3" height="15.0" fill="rgb(241,206,25)" rx="2" ry="2" />
<text  x="649.04" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="60.6" y="389" width="0.2" height="15.0" fill="rgb(251,1,7)" rx="2" ry="2" />
<text  x="63.62" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (20 samples, 0.39%)</title><rect x="644.9" y="613" width="4.6" height="15.0" fill="rgb(225,225,45)" rx="2" ry="2" />
<text  x="647.89" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (3 samples, 0.06%)</title><rect x="74.8" y="469" width="0.7" height="15.0" fill="rgb(240,15,21)" rx="2" ry="2" />
<text  x="77.82" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="364.1" y="277" width="0.2" height="15.0" fill="rgb(217,168,2)" rx="2" ry="2" />
<text  x="367.09" y="287.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="76.9" y="533" width="0.2" height="15.0" fill="rgb(227,139,36)" rx="2" ry="2" />
<text  x="79.88" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.3" y="469" width="0.2" height="15.0" fill="rgb(251,83,27)" rx="2" ry="2" />
<text  x="67.28" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="756.7" y="405" width="0.2" height="15.0" fill="rgb(212,66,29)" rx="2" ry="2" />
<text  x="759.66" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="141.0" y="565" width="0.2" height="15.0" fill="rgb(218,148,29)" rx="2" ry="2" />
<text  x="144.01" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="144.7" y="565" width="0.2" height="15.0" fill="rgb(218,212,35)" rx="2" ry="2" />
<text  x="147.67" y="575.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="917.0" y="437" width="0.2" height="15.0" fill="rgb(230,68,50)" rx="2" ry="2" />
<text  x="919.99" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="43.7" y="357" width="0.4" height="15.0" fill="rgb(227,51,11)" rx="2" ry="2" />
<text  x="46.67" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="86.5" y="501" width="0.2" height="15.0" fill="rgb(235,175,31)" rx="2" ry="2" />
<text  x="89.50" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="934.9" y="517" width="0.2" height="15.0" fill="rgb(225,72,3)" rx="2" ry="2" />
<text  x="937.85" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (1 samples, 0.02%)</title><rect x="138.5" y="501" width="0.2" height="15.0" fill="rgb(223,164,36)" rx="2" ry="2" />
<text  x="141.49" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="59.7" y="293" width="0.2" height="15.0" fill="rgb(245,53,50)" rx="2" ry="2" />
<text  x="62.70" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="669.6" y="597" width="0.3" height="15.0" fill="rgb(249,155,29)" rx="2" ry="2" />
<text  x="672.63" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="696.9" y="597" width="0.2" height="15.0" fill="rgb(220,0,29)" rx="2" ry="2" />
<text  x="699.88" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="41.8" y="389" width="0.3" height="15.0" fill="rgb(215,73,25)" rx="2" ry="2" />
<text  x="44.84" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="48.0" y="229" width="0.2" height="15.0" fill="rgb(207,128,26)" rx="2" ry="2" />
<text  x="51.02" y="239.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="606.0" y="517" width="0.9" height="15.0" fill="rgb(218,169,17)" rx="2" ry="2" />
<text  x="608.95" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="1144.2" y="597" width="0.7" height="15.0" fill="rgb(218,177,7)" rx="2" ry="2" />
<text  x="1147.19" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.12%)</title><rect x="185.7" y="421" width="1.3" height="15.0" fill="rgb(234,77,39)" rx="2" ry="2" />
<text  x="188.67" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (6 samples, 0.12%)</title><rect x="42.3" y="453" width="1.4" height="15.0" fill="rgb(227,120,41)" rx="2" ry="2" />
<text  x="45.29" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="753.2" y="469" width="1.2" height="15.0" fill="rgb(229,150,24)" rx="2" ry="2" />
<text  x="756.23" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="534.7" y="309" width="0.7" height="15.0" fill="rgb(207,13,17)" rx="2" ry="2" />
<text  x="537.72" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1167.8" y="565" width="0.2" height="15.0" fill="rgb(237,7,2)" rx="2" ry="2" />
<text  x="1170.78" y="575.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="432.8" y="325" width="0.2" height="15.0" fill="rgb(216,138,43)" rx="2" ry="2" />
<text  x="435.80" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (5 samples, 0.10%)</title><rect x="1021.2" y="309" width="1.1" height="15.0" fill="rgb(213,68,41)" rx="2" ry="2" />
<text  x="1024.20" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (4 samples, 0.08%)</title><rect x="532.0" y="341" width="0.9" height="15.0" fill="rgb(236,149,50)" rx="2" ry="2" />
<text  x="534.98" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="450.4" y="341" width="0.5" height="15.0" fill="rgb(237,36,46)" rx="2" ry="2" />
<text  x="453.44" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.10%)</title><rect x="135.7" y="501" width="1.2" height="15.0" fill="rgb(240,159,44)" rx="2" ry="2" />
<text  x="138.74" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1039.8" y="389" width="0.2" height="15.0" fill="rgb(233,43,42)" rx="2" ry="2" />
<text  x="1042.75" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="212.9" y="357" width="0.3" height="15.0" fill="rgb(221,32,17)" rx="2" ry="2" />
<text  x="215.93" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="694.6" y="597" width="0.5" height="15.0" fill="rgb(251,0,39)" rx="2" ry="2" />
<text  x="697.59" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1106.9" y="453" width="0.2" height="15.0" fill="rgb(205,219,49)" rx="2" ry="2" />
<text  x="1109.86" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (2 samples, 0.04%)</title><rect x="473.3" y="437" width="0.5" height="15.0" fill="rgb(247,136,6)" rx="2" ry="2" />
<text  x="476.34" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (31 samples, 0.60%)</title><rect x="736.3" y="469" width="7.1" height="15.0" fill="rgb(234,111,43)" rx="2" ry="2" />
<text  x="739.28" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="51.5" y="341" width="0.2" height="15.0" fill="rgb(230,124,11)" rx="2" ry="2" />
<text  x="54.46" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="116.0" y="485" width="0.3" height="15.0" fill="rgb(249,130,21)" rx="2" ry="2" />
<text  x="119.04" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (9 samples, 0.17%)</title><rect x="751.2" y="469" width="2.0" height="15.0" fill="rgb(225,209,38)" rx="2" ry="2" />
<text  x="754.16" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (11 samples, 0.21%)</title><rect x="1115.6" y="533" width="2.5" height="15.0" fill="rgb(220,189,37)" rx="2" ry="2" />
<text  x="1118.56" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="861.8" y="533" width="0.2" height="15.0" fill="rgb(220,27,17)" rx="2" ry="2" />
<text  x="864.79" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (1 samples, 0.02%)</title><rect x="86.3" y="501" width="0.2" height="15.0" fill="rgb(214,159,27)" rx="2" ry="2" />
<text  x="89.27" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.12%)</title><rect x="852.9" y="469" width="1.3" height="15.0" fill="rgb(217,64,13)" rx="2" ry="2" />
<text  x="855.86" y="479.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%)</title><rect x="1043.2" y="389" width="0.4" height="15.0" fill="rgb(249,1,26)" rx="2" ry="2" />
<text  x="1046.19" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="111.0" y="597" width="0.7" height="15.0" fill="rgb(232,68,54)" rx="2" ry="2" />
<text  x="114.01" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1127.2" y="293" width="0.3" height="15.0" fill="rgb(250,20,45)" rx="2" ry="2" />
<text  x="1130.24" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%)</title><rect x="1131.4" y="309" width="0.9" height="15.0" fill="rgb(230,123,17)" rx="2" ry="2" />
<text  x="1134.37" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="58.8" y="405" width="0.7" height="15.0" fill="rgb(217,167,35)" rx="2" ry="2" />
<text  x="61.78" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.12%)</title><rect x="830.0" y="469" width="1.3" height="15.0" fill="rgb(245,114,27)" rx="2" ry="2" />
<text  x="832.95" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="1164.6" y="565" width="0.7" height="15.0" fill="rgb(218,87,10)" rx="2" ry="2" />
<text  x="1167.58" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="52.1" y="357" width="0.5" height="15.0" fill="rgb(211,160,11)" rx="2" ry="2" />
<text  x="55.14" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (9 samples, 0.17%)</title><rect x="1017.1" y="325" width="2.0" height="15.0" fill="rgb(253,146,52)" rx="2" ry="2" />
<text  x="1020.08" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="829.3" y="501" width="0.2" height="15.0" fill="rgb(228,5,49)" rx="2" ry="2" />
<text  x="832.27" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="114.9" y="437" width="0.2" height="15.0" fill="rgb(253,26,45)" rx="2" ry="2" />
<text  x="117.90" y="447.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (4 samples, 0.08%)</title><rect x="1135.5" y="245" width="0.9" height="15.0" fill="rgb(212,115,35)" rx="2" ry="2" />
<text  x="1138.49" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%)</title><rect x="122.2" y="581" width="0.3" height="15.0" fill="rgb(235,24,24)" rx="2" ry="2" />
<text  x="125.23" y="591.5" ></text>
</g>
<g >
<title>from_hex (7 samples, 0.14%)</title><rect x="69.1" y="453" width="1.6" height="15.0" fill="rgb(251,132,20)" rx="2" ry="2" />
<text  x="72.09" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="268.6" y="277" width="0.7" height="15.0" fill="rgb(237,57,20)" rx="2" ry="2" />
<text  x="271.58" y="287.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1066.8" y="389" width="0.2" height="15.0" fill="rgb(210,148,15)" rx="2" ry="2" />
<text  x="1069.78" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.45%)</title><rect x="871.9" y="517" width="5.2" height="15.0" fill="rgb(212,25,0)" rx="2" ry="2" />
<text  x="874.87" y="527.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%)</title><rect x="1134.1" y="277" width="0.9" height="15.0" fill="rgb(235,99,7)" rx="2" ry="2" />
<text  x="1137.11" y="287.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="871.0" y="405" width="0.2" height="15.0" fill="rgb(231,110,22)" rx="2" ry="2" />
<text  x="873.95" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (3 samples, 0.06%)</title><rect x="564.3" y="533" width="0.7" height="15.0" fill="rgb(249,201,38)" rx="2" ry="2" />
<text  x="567.27" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="268.6" y="261" width="0.7" height="15.0" fill="rgb(247,65,9)" rx="2" ry="2" />
<text  x="271.58" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.9" y="405" width="0.2" height="15.0" fill="rgb(237,96,50)" rx="2" ry="2" />
<text  x="65.91" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (16 samples, 0.31%)</title><rect x="57.9" y="469" width="3.6" height="15.0" fill="rgb(211,184,25)" rx="2" ry="2" />
<text  x="60.87" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1138.0" y="453" width="0.7" height="15.0" fill="rgb(249,44,38)" rx="2" ry="2" />
<text  x="1141.01" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; const*&gt; (2 samples, 0.04%)</title><rect x="1132.3" y="341" width="0.4" height="15.0" fill="rgb(232,209,11)" rx="2" ry="2" />
<text  x="1135.28" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (226 samples, 4.39%)</title><rect x="993.5" y="453" width="51.7" height="15.0" fill="rgb(218,199,14)" rx="2" ry="2" />
<text  x="996.49" y="463.5" >servi..</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="56.0" y="213" width="0.3" height="15.0" fill="rgb(242,86,3)" rx="2" ry="2" />
<text  x="59.04" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="10.5" y="501" width="0.2" height="15.0" fill="rgb(248,52,6)" rx="2" ry="2" />
<text  x="13.46" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="622.4" y="549" width="0.5" height="15.0" fill="rgb(232,191,23)" rx="2" ry="2" />
<text  x="625.45" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="86.7" y="597" width="0.3" height="15.0" fill="rgb(243,72,21)" rx="2" ry="2" />
<text  x="89.73" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="222.3" y="293" width="0.5" height="15.0" fill="rgb(229,125,51)" rx="2" ry="2" />
<text  x="225.32" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (4 samples, 0.08%)</title><rect x="108.5" y="581" width="0.9" height="15.0" fill="rgb(223,50,2)" rx="2" ry="2" />
<text  x="111.49" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="19.4" y="613" width="0.2" height="15.0" fill="rgb(238,116,21)" rx="2" ry="2" />
<text  x="22.39" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="455.7" y="469" width="0.2" height="15.0" fill="rgb(236,2,39)" rx="2" ry="2" />
<text  x="458.71" y="479.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.10%)</title><rect x="687.7" y="565" width="1.2" height="15.0" fill="rgb(240,179,10)" rx="2" ry="2" />
<text  x="690.72" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="52.6" y="341" width="0.2" height="15.0" fill="rgb(239,220,26)" rx="2" ry="2" />
<text  x="55.60" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="866.6" y="581" width="0.2" height="15.0" fill="rgb(208,134,16)" rx="2" ry="2" />
<text  x="869.60" y="591.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="262.9" y="245" width="0.4" height="15.0" fill="rgb(240,224,48)" rx="2" ry="2" />
<text  x="265.86" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.0" y="325" width="0.2" height="15.0" fill="rgb(231,42,51)" rx="2" ry="2" />
<text  x="62.01" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%)</title><rect x="721.4" y="597" width="0.4" height="15.0" fill="rgb(250,215,31)" rx="2" ry="2" />
<text  x="724.39" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (5 samples, 0.10%)</title><rect x="259.0" y="181" width="1.1" height="15.0" fill="rgb(249,104,3)" rx="2" ry="2" />
<text  x="261.96" y="191.5" ></text>
</g>
<g >
<title>fmt::v7::detail::parse_replacement_field&lt;char, fmt::v7::detail::format_handler&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char, fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="10.9" y="709" width="0.2" height="15.0" fill="rgb(214,152,46)" rx="2" ry="2" />
<text  x="13.92" y="719.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.12%)</title><rect x="84.7" y="565" width="1.3" height="15.0" fill="rgb(245,65,44)" rx="2" ry="2" />
<text  x="87.67" y="575.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (14 samples, 0.27%)</title><rect x="1148.5" y="565" width="3.3" height="15.0" fill="rgb(213,77,22)" rx="2" ry="2" />
<text  x="1151.54" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="948.4" y="501" width="0.2" height="15.0" fill="rgb(250,81,45)" rx="2" ry="2" />
<text  x="951.37" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="802.2" y="309" width="2.1" height="15.0" fill="rgb(222,216,20)" rx="2" ry="2" />
<text  x="805.24" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (43 samples, 0.83%)</title><rect x="674.2" y="613" width="9.9" height="15.0" fill="rgb(253,9,48)" rx="2" ry="2" />
<text  x="677.21" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="302.7" y="325" width="0.2" height="15.0" fill="rgb(210,176,13)" rx="2" ry="2" />
<text  x="305.71" y="335.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (137 samples, 2.66%)</title><rect x="231.9" y="277" width="31.4" height="15.0" fill="rgb(234,35,44)" rx="2" ry="2" />
<text  x="234.94" y="287.5" >cl..</text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%)</title><rect x="11.6" y="709" width="0.2" height="15.0" fill="rgb(246,101,18)" rx="2" ry="2" />
<text  x="14.60" y="719.5" ></text>
</g>
<g >
<title>row::external_memory_usage (20 samples, 0.39%)</title><rect x="263.8" y="261" width="4.6" height="15.0" fill="rgb(229,57,3)" rx="2" ry="2" />
<text  x="266.77" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="42.3" y="373" width="0.7" height="15.0" fill="rgb(235,205,22)" rx="2" ry="2" />
<text  x="45.29" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="103.0" y="533" width="0.2" height="15.0" fill="rgb(223,150,50)" rx="2" ry="2" />
<text  x="105.99" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%)</title><rect x="1131.1" y="357" width="0.3" height="15.0" fill="rgb(209,37,23)" rx="2" ry="2" />
<text  x="1134.14" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%)</title><rect x="719.1" y="565" width="0.5" height="15.0" fill="rgb(229,219,24)" rx="2" ry="2" />
<text  x="722.10" y="575.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="380.6" y="277" width="0.2" height="15.0" fill="rgb(233,19,45)" rx="2" ry="2" />
<text  x="383.58" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (2 samples, 0.04%)</title><rect x="704.9" y="565" width="0.5" height="15.0" fill="rgb(254,146,9)" rx="2" ry="2" />
<text  x="707.90" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="696.2" y="437" width="0.2" height="15.0" fill="rgb(207,54,36)" rx="2" ry="2" />
<text  x="699.20" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="917.2" y="485" width="0.2" height="15.0" fill="rgb(219,203,34)" rx="2" ry="2" />
<text  x="920.22" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="465.6" y="485" width="0.2" height="15.0" fill="rgb(217,58,47)" rx="2" ry="2" />
<text  x="468.56" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (4 samples, 0.08%)</title><rect x="493.3" y="437" width="0.9" height="15.0" fill="rgb(237,3,29)" rx="2" ry="2" />
<text  x="496.27" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (3 samples, 0.06%)</title><rect x="61.5" y="469" width="0.7" height="15.0" fill="rgb(208,45,17)" rx="2" ry="2" />
<text  x="64.53" y="479.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="835.5" y="421" width="0.6" height="15.0" fill="rgb(254,73,54)" rx="2" ry="2" />
<text  x="838.45" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (1 samples, 0.02%)</title><rect x="665.3" y="581" width="0.2" height="15.0" fill="rgb(228,34,22)" rx="2" ry="2" />
<text  x="668.28" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="373" width="0.3" height="15.0" fill="rgb(226,174,5)" rx="2" ry="2" />
<text  x="51.25" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1122.7" y="309" width="0.9" height="15.0" fill="rgb(246,135,18)" rx="2" ry="2" />
<text  x="1125.66" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (1 samples, 0.02%)</title><rect x="75.3" y="389" width="0.2" height="15.0" fill="rgb(214,51,16)" rx="2" ry="2" />
<text  x="78.28" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="659.8" y="501" width="0.4" height="15.0" fill="rgb(221,170,0)" rx="2" ry="2" />
<text  x="662.78" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="37.7" y="389" width="0.2" height="15.0" fill="rgb(248,96,54)" rx="2" ry="2" />
<text  x="40.71" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.12%)</title><rect x="663.2" y="533" width="1.4" height="15.0" fill="rgb(240,19,34)" rx="2" ry="2" />
<text  x="666.21" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="540.2" y="389" width="0.3" height="15.0" fill="rgb(233,96,42)" rx="2" ry="2" />
<text  x="543.22" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="570.0" y="405" width="0.2" height="15.0" fill="rgb(226,95,29)" rx="2" ry="2" />
<text  x="573.00" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (1 samples, 0.02%)</title><rect x="113.8" y="613" width="0.2" height="15.0" fill="rgb(207,99,18)" rx="2" ry="2" />
<text  x="116.75" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="972.4" y="453" width="1.6" height="15.0" fill="rgb(225,19,4)" rx="2" ry="2" />
<text  x="975.41" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="114.0" y="501" width="0.2" height="15.0" fill="rgb(224,175,2)" rx="2" ry="2" />
<text  x="116.98" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (6 samples, 0.12%)</title><rect x="675.6" y="581" width="1.4" height="15.0" fill="rgb(228,218,25)" rx="2" ry="2" />
<text  x="678.58" y="591.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (1 samples, 0.02%)</title><rect x="577.6" y="437" width="0.2" height="15.0" fill="rgb(240,7,10)" rx="2" ry="2" />
<text  x="580.55" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1166.9" y="469" width="0.2" height="15.0" fill="rgb(241,127,47)" rx="2" ry="2" />
<text  x="1169.87" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="693" width="0.3" height="15.0" fill="rgb(219,98,26)" rx="2" ry="2" />
<text  x="86.52" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="1051.9" y="421" width="0.4" height="15.0" fill="rgb(227,196,53)" rx="2" ry="2" />
<text  x="1054.89" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="23.7" y="453" width="0.3" height="15.0" fill="rgb(213,188,1)" rx="2" ry="2" />
<text  x="26.74" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="42.3" y="389" width="0.7" height="15.0" fill="rgb(246,137,21)" rx="2" ry="2" />
<text  x="45.29" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="644.0" y="613" width="0.2" height="15.0" fill="rgb(230,139,17)" rx="2" ry="2" />
<text  x="646.98" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.19%)</title><rect x="38.9" y="469" width="2.2" height="15.0" fill="rgb(253,148,33)" rx="2" ry="2" />
<text  x="41.86" y="479.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="211.6" y="341" width="0.4" height="15.0" fill="rgb(246,173,53)" rx="2" ry="2" />
<text  x="214.55" y="351.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::raw (2 samples, 0.04%)</title><rect x="61.5" y="453" width="0.5" height="15.0" fill="rgb(246,10,43)" rx="2" ry="2" />
<text  x="64.53" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1053.5" y="389" width="0.5" height="15.0" fill="rgb(217,224,26)" rx="2" ry="2" />
<text  x="1056.49" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%)</title><rect x="1032.0" y="309" width="1.8" height="15.0" fill="rgb(217,141,1)" rx="2" ry="2" />
<text  x="1034.96" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (8 samples, 0.16%)</title><rect x="758.3" y="389" width="1.8" height="15.0" fill="rgb(252,5,48)" rx="2" ry="2" />
<text  x="761.26" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="114.0" y="389" width="0.2" height="15.0" fill="rgb(222,56,27)" rx="2" ry="2" />
<text  x="116.98" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.10%)</title><rect x="137.1" y="501" width="1.2" height="15.0" fill="rgb(212,200,16)" rx="2" ry="2" />
<text  x="140.12" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="842.3" y="485" width="0.3" height="15.0" fill="rgb(235,187,54)" rx="2" ry="2" />
<text  x="845.32" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (3 samples, 0.06%)</title><rect x="166.7" y="517" width="0.6" height="15.0" fill="rgb(224,66,22)" rx="2" ry="2" />
<text  x="169.66" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="724.4" y="613" width="0.2" height="15.0" fill="rgb(234,188,11)" rx="2" ry="2" />
<text  x="727.37" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="684.7" y="597" width="0.5" height="15.0" fill="rgb(232,64,54)" rx="2" ry="2" />
<text  x="687.74" y="607.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1131.6" y="261" width="0.2" height="15.0" fill="rgb(221,55,43)" rx="2" ry="2" />
<text  x="1134.60" y="271.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="62.2" y="453" width="0.2" height="15.0" fill="rgb(246,183,17)" rx="2" ry="2" />
<text  x="65.22" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="115.1" y="389" width="0.3" height="15.0" fill="rgb(206,184,17)" rx="2" ry="2" />
<text  x="118.13" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (396 samples, 7.69%)</title><rect x="349.9" y="373" width="90.7" height="15.0" fill="rgb(223,17,31)" rx="2" ry="2" />
<text  x="352.89" y="383.5" >mutation_f..</text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (3 samples, 0.06%)</title><rect x="435.6" y="341" width="0.6" height="15.0" fill="rgb(209,113,52)" rx="2" ry="2" />
<text  x="438.55" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (29 samples, 0.56%)</title><rect x="699.2" y="597" width="6.6" height="15.0" fill="rgb(221,38,25)" rx="2" ry="2" />
<text  x="702.17" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="273.2" y="245" width="0.2" height="15.0" fill="rgb(242,95,53)" rx="2" ry="2" />
<text  x="276.16" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (3 samples, 0.06%)</title><rect x="353.6" y="325" width="0.6" height="15.0" fill="rgb(253,81,30)" rx="2" ry="2" />
<text  x="356.56" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="834.1" y="437" width="2.0" height="15.0" fill="rgb(206,54,48)" rx="2" ry="2" />
<text  x="837.08" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="43.9" y="261" width="0.2" height="15.0" fill="rgb(215,139,51)" rx="2" ry="2" />
<text  x="46.90" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;, merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="644.0" y="581" width="0.2" height="15.0" fill="rgb(207,138,45)" rx="2" ry="2" />
<text  x="646.98" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="469" width="9.4" height="15.0" fill="rgb(240,16,8)" rx="2" ry="2" />
<text  x="1132.31" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="59.5" y="261" width="0.2" height="15.0" fill="rgb(207,51,50)" rx="2" ry="2" />
<text  x="62.47" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="39.1" y="357" width="0.4" height="15.0" fill="rgb(208,172,5)" rx="2" ry="2" />
<text  x="42.09" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="721.8" y="437" width="0.3" height="15.0" fill="rgb(251,173,41)" rx="2" ry="2" />
<text  x="724.85" y="447.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%)</title><rect x="115.6" y="453" width="0.2" height="15.0" fill="rgb(233,188,25)" rx="2" ry="2" />
<text  x="118.59" y="463.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (1 samples, 0.02%)</title><rect x="161.6" y="549" width="0.3" height="15.0" fill="rgb(245,80,26)" rx="2" ry="2" />
<text  x="164.62" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="954.3" y="469" width="0.5" height="15.0" fill="rgb(227,200,6)" rx="2" ry="2" />
<text  x="957.32" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (4 samples, 0.08%)</title><rect x="142.4" y="565" width="0.9" height="15.0" fill="rgb(221,224,31)" rx="2" ry="2" />
<text  x="145.38" y="575.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="529.7" y="357" width="0.2" height="15.0" fill="rgb(208,221,6)" rx="2" ry="2" />
<text  x="532.69" y="367.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="78.5" y="549" width="0.2" height="15.0" fill="rgb(247,102,6)" rx="2" ry="2" />
<text  x="81.48" y="559.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%)</title><rect x="78.7" y="549" width="0.2" height="15.0" fill="rgb(244,104,20)" rx="2" ry="2" />
<text  x="81.71" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.3" y="485" width="0.3" height="15.0" fill="rgb(207,71,6)" rx="2" ry="2" />
<text  x="80.34" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="661.6" y="549" width="0.5" height="15.0" fill="rgb(216,55,51)" rx="2" ry="2" />
<text  x="664.61" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="635.3" y="549" width="0.2" height="15.0" fill="rgb(220,7,25)" rx="2" ry="2" />
<text  x="638.27" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (13 samples, 0.25%)</title><rect x="595.0" y="469" width="2.9" height="15.0" fill="rgb(250,131,50)" rx="2" ry="2" />
<text  x="597.96" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="85.8" y="485" width="0.2" height="15.0" fill="rgb(206,193,52)" rx="2" ry="2" />
<text  x="88.81" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="901.6" y="405" width="0.3" height="15.0" fill="rgb(249,53,0)" rx="2" ry="2" />
<text  x="904.64" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="871.0" y="565" width="0.2" height="15.0" fill="rgb(231,23,39)" rx="2" ry="2" />
<text  x="873.95" y="575.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.08%)</title><rect x="874.6" y="373" width="0.9" height="15.0" fill="rgb(229,109,47)" rx="2" ry="2" />
<text  x="877.62" y="383.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="696.9" y="469" width="0.2" height="15.0" fill="rgb(230,226,41)" rx="2" ry="2" />
<text  x="699.88" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1031.3" y="341" width="0.2" height="15.0" fill="rgb(238,1,15)" rx="2" ry="2" />
<text  x="1034.28" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%)</title><rect x="702.8" y="565" width="0.3" height="15.0" fill="rgb(253,14,53)" rx="2" ry="2" />
<text  x="705.84" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="579.2" y="421" width="0.2" height="15.0" fill="rgb(219,31,13)" rx="2" ry="2" />
<text  x="582.16" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="723.0" y="613" width="0.2" height="15.0" fill="rgb(227,29,10)" rx="2" ry="2" />
<text  x="725.99" y="623.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%)</title><rect x="747.5" y="501" width="0.5" height="15.0" fill="rgb(210,57,14)" rx="2" ry="2" />
<text  x="750.50" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1128.8" y="341" width="0.3" height="15.0" fill="rgb(234,170,21)" rx="2" ry="2" />
<text  x="1131.85" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (2 samples, 0.04%)</title><rect x="83.8" y="549" width="0.4" height="15.0" fill="rgb(241,204,13)" rx="2" ry="2" />
<text  x="86.75" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%)</title><rect x="662.1" y="565" width="0.4" height="15.0" fill="rgb(223,148,23)" rx="2" ry="2" />
<text  x="665.07" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%)</title><rect x="765.1" y="485" width="0.3" height="15.0" fill="rgb(220,214,45)" rx="2" ry="2" />
<text  x="768.14" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="43.9" y="325" width="0.2" height="15.0" fill="rgb(213,182,9)" rx="2" ry="2" />
<text  x="46.90" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1028.5" y="261" width="0.3" height="15.0" fill="rgb(205,116,16)" rx="2" ry="2" />
<text  x="1031.53" y="271.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%)</title><rect x="752.1" y="421" width="0.7" height="15.0" fill="rgb(250,127,24)" rx="2" ry="2" />
<text  x="755.08" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="708.6" y="581" width="0.7" height="15.0" fill="rgb(236,176,1)" rx="2" ry="2" />
<text  x="711.56" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="638.2" y="485" width="0.7" height="15.0" fill="rgb(221,48,26)" rx="2" ry="2" />
<text  x="641.25" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (183 samples, 3.55%)</title><rect x="24.0" y="501" width="41.9" height="15.0" fill="rgb(240,114,45)" rx="2" ry="2" />
<text  x="26.97" y="511.5" >cql..</text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="436.2" y="357" width="0.5" height="15.0" fill="rgb(221,182,29)" rx="2" ry="2" />
<text  x="439.24" y="367.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (59 samples, 1.15%)</title><rect x="506.8" y="421" width="13.5" height="15.0" fill="rgb(222,205,27)" rx="2" ry="2" />
<text  x="509.78" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="630.7" y="517" width="0.2" height="15.0" fill="rgb(235,220,2)" rx="2" ry="2" />
<text  x="633.69" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="174.2" y="533" width="0.2" height="15.0" fill="rgb(227,73,21)" rx="2" ry="2" />
<text  x="177.22" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="721.8" y="341" width="0.3" height="15.0" fill="rgb(221,128,10)" rx="2" ry="2" />
<text  x="724.85" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="373" width="0.3" height="15.0" fill="rgb(223,51,23)" rx="2" ry="2" />
<text  x="83.54" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.3" y="341" width="0.7" height="15.0" fill="rgb(221,149,8)" rx="2" ry="2" />
<text  x="48.27" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::monostate, seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;, std::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, seastar::shared_ptr&lt;cql3::metadata const&gt; &gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="696.0" y="581" width="0.2" height="15.0" fill="rgb(220,208,45)" rx="2" ry="2" />
<text  x="698.97" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="39.8" y="341" width="0.2" height="15.0" fill="rgb(207,25,39)" rx="2" ry="2" />
<text  x="42.77" y="351.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%)</title><rect x="1139.6" y="581" width="0.2" height="15.0" fill="rgb(210,217,25)" rx="2" ry="2" />
<text  x="1142.61" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="571.4" y="533" width="0.4" height="15.0" fill="rgb(250,6,41)" rx="2" ry="2" />
<text  x="574.37" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="141.5" y="565" width="0.2" height="15.0" fill="rgb(250,152,14)" rx="2" ry="2" />
<text  x="144.47" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (25 samples, 0.49%)</title><rect x="1101.4" y="517" width="5.7" height="15.0" fill="rgb(211,37,10)" rx="2" ry="2" />
<text  x="1104.36" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="945.8" y="453" width="0.3" height="15.0" fill="rgb(230,193,11)" rx="2" ry="2" />
<text  x="948.85" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="540.7" y="405" width="0.2" height="15.0" fill="rgb(209,225,9)" rx="2" ry="2" />
<text  x="543.68" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::close (125 samples, 2.43%)</title><rect x="573.0" y="549" width="28.6" height="15.0" fill="rgb(233,17,29)" rx="2" ry="2" />
<text  x="575.97" y="559.5" >qu..</text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="219.8" y="277" width="0.7" height="15.0" fill="rgb(228,128,27)" rx="2" ry="2" />
<text  x="222.80" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="79.9" y="501" width="0.9" height="15.0" fill="rgb(226,69,0)" rx="2" ry="2" />
<text  x="82.86" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (8 samples, 0.16%)</title><rect x="445.4" y="325" width="1.8" height="15.0" fill="rgb(213,46,41)" rx="2" ry="2" />
<text  x="448.40" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="69" width="0.3" height="15.0" fill="rgb(218,58,3)" rx="2" ry="2" />
<text  x="56.75" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (6 samples, 0.12%)</title><rect x="1154.7" y="565" width="1.4" height="15.0" fill="rgb(221,222,38)" rx="2" ry="2" />
<text  x="1157.73" y="575.5" ></text>
</g>
<g >
<title>database::query (105 samples, 2.04%)</title><rect x="1010.7" y="373" width="24.0" height="15.0" fill="rgb(233,145,32)" rx="2" ry="2" />
<text  x="1013.66" y="383.5" >d..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="23.7" y="437" width="0.3" height="15.0" fill="rgb(214,109,0)" rx="2" ry="2" />
<text  x="26.74" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_aggregate_statement*, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.5" y="437" width="0.2" height="15.0" fill="rgb(221,81,6)" rx="2" ry="2" />
<text  x="67.51" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="649.0" y="581" width="0.5" height="15.0" fill="rgb(237,13,48)" rx="2" ry="2" />
<text  x="652.01" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (15 samples, 0.29%)</title><rect x="485.9" y="421" width="3.5" height="15.0" fill="rgb(227,172,24)" rx="2" ry="2" />
<text  x="488.94" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="209.3" y="389" width="0.2" height="15.0" fill="rgb(253,4,7)" rx="2" ry="2" />
<text  x="212.26" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (47 samples, 0.91%)</title><rect x="320.3" y="437" width="10.8" height="15.0" fill="rgb(208,201,50)" rx="2" ry="2" />
<text  x="323.35" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%)</title><rect x="674.4" y="581" width="1.0" height="15.0" fill="rgb(230,173,40)" rx="2" ry="2" />
<text  x="677.44" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (2 samples, 0.04%)</title><rect x="276.8" y="293" width="0.5" height="15.0" fill="rgb(239,174,39)" rx="2" ry="2" />
<text  x="279.83" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="79.9" y="405" width="0.2" height="15.0" fill="rgb(225,9,36)" rx="2" ry="2" />
<text  x="82.86" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="1167.8" y="325" width="0.2" height="15.0" fill="rgb(217,7,35)" rx="2" ry="2" />
<text  x="1170.78" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="47.6" y="325" width="0.6" height="15.0" fill="rgb(212,200,51)" rx="2" ry="2" />
<text  x="50.56" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="891.6" y="517" width="0.2" height="15.0" fill="rgb(234,213,3)" rx="2" ry="2" />
<text  x="894.56" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (24 samples, 0.47%)</title><rect x="12.1" y="725" width="5.5" height="15.0" fill="rgb(252,51,3)" rx="2" ry="2" />
<text  x="15.06" y="735.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%)</title><rect x="684.1" y="597" width="0.2" height="15.0" fill="rgb(219,177,8)" rx="2" ry="2" />
<text  x="687.06" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1094.3" y="501" width="0.2" height="15.0" fill="rgb(239,172,4)" rx="2" ry="2" />
<text  x="1097.26" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="49.6" y="165" width="0.3" height="15.0" fill="rgb(207,103,24)" rx="2" ry="2" />
<text  x="52.62" y="175.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%)</title><rect x="103.2" y="549" width="0.2" height="15.0" fill="rgb(214,228,47)" rx="2" ry="2" />
<text  x="106.22" y="559.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="325" width="0.5" height="15.0" fill="rgb(219,158,6)" rx="2" ry="2" />
<text  x="52.62" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="56.0" y="165" width="0.3" height="15.0" fill="rgb(216,102,42)" rx="2" ry="2" />
<text  x="59.04" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="616.9" y="549" width="0.3" height="15.0" fill="rgb(239,222,4)" rx="2" ry="2" />
<text  x="619.95" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="47.8" y="261" width="0.4" height="15.0" fill="rgb(225,30,51)" rx="2" ry="2" />
<text  x="50.79" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="988.0" y="405" width="1.4" height="15.0" fill="rgb(221,17,9)" rx="2" ry="2" />
<text  x="990.99" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="453.2" y="405" width="0.2" height="15.0" fill="rgb(211,217,41)" rx="2" ry="2" />
<text  x="456.19" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%)</title><rect x="774.5" y="517" width="0.5" height="15.0" fill="rgb(231,44,21)" rx="2" ry="2" />
<text  x="777.53" y="527.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::to_internal_name (1 samples, 0.02%)</title><rect x="42.1" y="421" width="0.2" height="15.0" fill="rgb(254,202,19)" rx="2" ry="2" />
<text  x="45.07" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="340.0" y="405" width="3.0" height="15.0" fill="rgb(222,46,27)" rx="2" ry="2" />
<text  x="343.04" y="415.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="127.3" y="565" width="0.7" height="15.0" fill="rgb(205,149,53)" rx="2" ry="2" />
<text  x="130.27" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (3 samples, 0.06%)</title><rect x="890.9" y="517" width="0.7" height="15.0" fill="rgb(252,191,28)" rx="2" ry="2" />
<text  x="893.88" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.12%)</title><rect x="84.7" y="549" width="1.3" height="15.0" fill="rgb(246,34,50)" rx="2" ry="2" />
<text  x="87.67" y="559.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%)</title><rect x="477.0" y="389" width="0.9" height="15.0" fill="rgb(218,162,10)" rx="2" ry="2" />
<text  x="480.01" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%)</title><rect x="825.1" y="437" width="2.3" height="15.0" fill="rgb(206,191,17)" rx="2" ry="2" />
<text  x="828.14" y="447.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (12 samples, 0.23%)</title><rect x="79.2" y="581" width="2.7" height="15.0" fill="rgb(251,125,1)" rx="2" ry="2" />
<text  x="82.17" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="673.5" y="517" width="0.3" height="15.0" fill="rgb(211,158,26)" rx="2" ry="2" />
<text  x="676.52" y="527.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="835.7" y="389" width="0.4" height="15.0" fill="rgb(230,166,15)" rx="2" ry="2" />
<text  x="838.68" y="399.5" ></text>
</g>
<g >
<title>dht::tri_compare (13 samples, 0.25%)</title><rect x="1076.4" y="341" width="3.0" height="15.0" fill="rgb(222,58,46)" rx="2" ry="2" />
<text  x="1079.40" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (65 samples, 1.26%)</title><rect x="574.1" y="485" width="14.9" height="15.0" fill="rgb(232,168,18)" rx="2" ry="2" />
<text  x="577.12" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="995.8" y="405" width="2.7" height="15.0" fill="rgb(247,83,10)" rx="2" ry="2" />
<text  x="998.78" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="26.3" y="341" width="0.2" height="15.0" fill="rgb(209,196,24)" rx="2" ry="2" />
<text  x="29.26" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="231.0" y="293" width="0.2" height="15.0" fill="rgb(241,70,24)" rx="2" ry="2" />
<text  x="234.02" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (16 samples, 0.31%)</title><rect x="928.9" y="469" width="3.7" height="15.0" fill="rgb(213,52,50)" rx="2" ry="2" />
<text  x="931.90" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="466.0" y="469" width="0.2" height="15.0" fill="rgb(210,41,14)" rx="2" ry="2" />
<text  x="469.01" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="202.4" y="325" width="0.2" height="15.0" fill="rgb(225,50,1)" rx="2" ry="2" />
<text  x="205.39" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="838.2" y="517" width="0.5" height="15.0" fill="rgb(223,178,30)" rx="2" ry="2" />
<text  x="841.20" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%)</title><rect x="1013.0" y="357" width="1.1" height="15.0" fill="rgb(249,150,22)" rx="2" ry="2" />
<text  x="1015.95" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="42.3" y="325" width="0.7" height="15.0" fill="rgb(251,25,47)" rx="2" ry="2" />
<text  x="45.29" y="335.5" ></text>
</g>
<g >
<title>row::row (136 samples, 2.64%)</title><rect x="232.2" y="261" width="31.1" height="15.0" fill="rgb(210,38,33)" rx="2" ry="2" />
<text  x="235.17" y="271.5" >ro..</text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="269.3" y="277" width="0.7" height="15.0" fill="rgb(209,146,0)" rx="2" ry="2" />
<text  x="272.27" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (13 samples, 0.25%)</title><rect x="352.0" y="357" width="2.9" height="15.0" fill="rgb(250,215,17)" rx="2" ry="2" />
<text  x="354.95" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1000.1" y="405" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1003.13" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (131 samples, 2.54%)</title><rect x="1009.3" y="389" width="30.0" height="15.0" fill="rgb(247,192,13)" rx="2" ry="2" />
<text  x="1012.29" y="399.5" >se..</text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (6 samples, 0.12%)</title><rect x="687.5" y="581" width="1.4" height="15.0" fill="rgb(236,8,42)" rx="2" ry="2" />
<text  x="690.49" y="591.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.12%)</title><rect x="1065.6" y="405" width="1.4" height="15.0" fill="rgb(231,33,6)" rx="2" ry="2" />
<text  x="1068.63" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (12 samples, 0.23%)</title><rect x="834.1" y="485" width="2.7" height="15.0" fill="rgb(247,132,16)" rx="2" ry="2" />
<text  x="837.08" y="495.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="686.8" y="581" width="0.5" height="15.0" fill="rgb(226,168,43)" rx="2" ry="2" />
<text  x="689.81" y="591.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="874.6" y="357" width="0.9" height="15.0" fill="rgb(226,22,9)" rx="2" ry="2" />
<text  x="877.62" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="338.2" y="389" width="0.5" height="15.0" fill="rgb(241,106,37)" rx="2" ry="2" />
<text  x="341.21" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="78.7" y="581" width="0.2" height="15.0" fill="rgb(235,186,38)" rx="2" ry="2" />
<text  x="81.71" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.7" y="453" width="0.2" height="15.0" fill="rgb(249,39,20)" rx="2" ry="2" />
<text  x="70.72" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="535.2" y="293" width="0.2" height="15.0" fill="rgb(213,13,19)" rx="2" ry="2" />
<text  x="538.18" y="303.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="514.6" y="309" width="0.4" height="15.0" fill="rgb(229,12,15)" rx="2" ry="2" />
<text  x="517.57" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (8 samples, 0.16%)</title><rect x="792.4" y="421" width="1.8" height="15.0" fill="rgb(247,226,37)" rx="2" ry="2" />
<text  x="795.39" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (42 samples, 0.82%)</title><rect x="1059.4" y="453" width="9.7" height="15.0" fill="rgb(224,79,52)" rx="2" ry="2" />
<text  x="1062.45" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="1027.8" y="277" width="0.5" height="15.0" fill="rgb(252,12,40)" rx="2" ry="2" />
<text  x="1030.84" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="983.0" y="389" width="2.7" height="15.0" fill="rgb(252,82,7)" rx="2" ry="2" />
<text  x="985.95" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="946.5" y="421" width="0.3" height="15.0" fill="rgb(252,86,32)" rx="2" ry="2" />
<text  x="949.53" y="431.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (35 samples, 0.68%)</title><rect x="1121.3" y="437" width="8.0" height="15.0" fill="rgb(230,165,25)" rx="2" ry="2" />
<text  x="1124.29" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (6 samples, 0.12%)</title><rect x="283.9" y="341" width="1.4" height="15.0" fill="rgb(234,127,42)" rx="2" ry="2" />
<text  x="286.93" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%)</title><rect x="1139.2" y="613" width="0.2" height="15.0" fill="rgb(216,204,11)" rx="2" ry="2" />
<text  x="1142.15" y="623.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (24 samples, 0.47%)</title><rect x="856.5" y="549" width="5.5" height="15.0" fill="rgb(212,201,14)" rx="2" ry="2" />
<text  x="859.52" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="57.9" y="277" width="0.2" height="15.0" fill="rgb(251,31,15)" rx="2" ry="2" />
<text  x="60.87" y="287.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (7 samples, 0.14%)</title><rect x="1116.0" y="517" width="1.6" height="15.0" fill="rgb(242,60,34)" rx="2" ry="2" />
<text  x="1119.02" y="527.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%)</title><rect x="1126.6" y="341" width="0.2" height="15.0" fill="rgb(236,140,13)" rx="2" ry="2" />
<text  x="1129.56" y="351.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="114.9" y="565" width="0.2" height="15.0" fill="rgb(239,123,53)" rx="2" ry="2" />
<text  x="117.90" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="651.8" y="581" width="0.2" height="15.0" fill="rgb(210,183,14)" rx="2" ry="2" />
<text  x="654.76" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="308.4" y="405" width="0.5" height="15.0" fill="rgb(230,128,28)" rx="2" ry="2" />
<text  x="311.44" y="415.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (67 samples, 1.30%)</title><rect x="1070.4" y="421" width="15.4" height="15.0" fill="rgb(207,29,42)" rx="2" ry="2" />
<text  x="1073.44" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.2" y="373" width="0.2" height="15.0" fill="rgb(222,33,41)" rx="2" ry="2" />
<text  x="57.20" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="845.1" y="501" width="1.6" height="15.0" fill="rgb(234,86,32)" rx="2" ry="2" />
<text  x="848.07" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="42.5" y="261" width="0.3" height="15.0" fill="rgb(223,118,54)" rx="2" ry="2" />
<text  x="45.52" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="946.3" y="437" width="0.5" height="15.0" fill="rgb(254,67,21)" rx="2" ry="2" />
<text  x="949.30" y="447.5" ></text>
</g>
<g >
<title>seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (2 samples, 0.04%)</title><rect x="644.2" y="597" width="0.5" height="15.0" fill="rgb(229,176,54)" rx="2" ry="2" />
<text  x="647.20" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="826.7" y="389" width="0.3" height="15.0" fill="rgb(224,19,49)" rx="2" ry="2" />
<text  x="829.75" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="845.5" y="485" width="0.7" height="15.0" fill="rgb(210,143,51)" rx="2" ry="2" />
<text  x="848.53" y="495.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="70.7" y="485" width="0.2" height="15.0" fill="rgb(231,109,48)" rx="2" ry="2" />
<text  x="73.69" y="495.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%)</title><rect x="84.7" y="517" width="1.3" height="15.0" fill="rgb(207,8,15)" rx="2" ry="2" />
<text  x="87.67" y="527.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.5" y="677" width="0.2" height="15.0" fill="rgb(240,37,17)" rx="2" ry="2" />
<text  x="13.46" y="687.5" ></text>
</g>
<g >
<title>stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="113.3" y="405" width="0.2" height="15.0" fill="rgb(207,206,54)" rx="2" ry="2" />
<text  x="116.30" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="113.1" y="597" width="0.7" height="15.0" fill="rgb(228,71,15)" rx="2" ry="2" />
<text  x="116.07" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.08%)</title><rect x="46.2" y="405" width="0.9" height="15.0" fill="rgb(205,210,43)" rx="2" ry="2" />
<text  x="49.19" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.14%)</title><rect x="256.4" y="229" width="1.6" height="15.0" fill="rgb(225,73,46)" rx="2" ry="2" />
<text  x="259.44" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1042.0" y="341" width="0.5" height="15.0" fill="rgb(205,128,10)" rx="2" ry="2" />
<text  x="1045.04" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.5" y="485" width="0.2" height="15.0" fill="rgb(205,208,41)" rx="2" ry="2" />
<text  x="67.51" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="871.0" y="437" width="0.2" height="15.0" fill="rgb(249,73,10)" rx="2" ry="2" />
<text  x="873.95" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (54 samples, 1.05%)</title><rect x="576.4" y="453" width="12.4" height="15.0" fill="rgb(239,36,8)" rx="2" ry="2" />
<text  x="579.41" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="86.5" y="597" width="0.2" height="15.0" fill="rgb(252,115,35)" rx="2" ry="2" />
<text  x="89.50" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="107.3" y="565" width="0.3" height="15.0" fill="rgb(237,194,24)" rx="2" ry="2" />
<text  x="110.34" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%)</title><rect x="872.6" y="453" width="0.2" height="15.0" fill="rgb(224,119,14)" rx="2" ry="2" />
<text  x="875.55" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::maybe_reclaim (1 samples, 0.02%)</title><rect x="965.3" y="405" width="0.2" height="15.0" fill="rgb(229,204,29)" rx="2" ry="2" />
<text  x="968.31" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1153.6" y="485" width="0.9" height="15.0" fill="rgb(237,139,27)" rx="2" ry="2" />
<text  x="1156.58" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="870.0" y="613" width="0.7" height="15.0" fill="rgb(225,177,16)" rx="2" ry="2" />
<text  x="873.03" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="699.6" y="581" width="0.3" height="15.0" fill="rgb(208,229,42)" rx="2" ry="2" />
<text  x="702.63" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="103.9" y="533" width="0.2" height="15.0" fill="rgb(252,149,35)" rx="2" ry="2" />
<text  x="106.91" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="45.3" y="357" width="0.7" height="15.0" fill="rgb(247,168,16)" rx="2" ry="2" />
<text  x="48.27" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="49.6" y="229" width="0.5" height="15.0" fill="rgb(234,36,1)" rx="2" ry="2" />
<text  x="52.62" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="584.7" y="389" width="0.2" height="15.0" fill="rgb(219,210,2)" rx="2" ry="2" />
<text  x="587.65" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (26 samples, 0.50%)</title><rect x="762.4" y="533" width="5.9" height="15.0" fill="rgb(244,13,53)" rx="2" ry="2" />
<text  x="765.39" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="854.2" y="469" width="0.3" height="15.0" fill="rgb(251,178,50)" rx="2" ry="2" />
<text  x="857.23" y="479.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1119.9" y="549" width="0.2" height="15.0" fill="rgb(245,25,3)" rx="2" ry="2" />
<text  x="1122.91" y="559.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1033.8" y="293" width="0.2" height="15.0" fill="rgb(205,133,45)" rx="2" ry="2" />
<text  x="1036.80" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.4" y="373" width="0.5" height="15.0" fill="rgb(230,27,14)" rx="2" ry="2" />
<text  x="49.42" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="669.2" y="581" width="0.2" height="15.0" fill="rgb(219,36,35)" rx="2" ry="2" />
<text  x="672.17" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (14 samples, 0.27%)</title><rect x="685.7" y="597" width="3.2" height="15.0" fill="rgb(243,213,9)" rx="2" ry="2" />
<text  x="688.66" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="78.5" y="517" width="0.2" height="15.0" fill="rgb(228,227,18)" rx="2" ry="2" />
<text  x="81.48" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="582.4" y="405" width="0.2" height="15.0" fill="rgb(238,0,36)" rx="2" ry="2" />
<text  x="585.36" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="209.7" y="373" width="0.2" height="15.0" fill="rgb(214,54,15)" rx="2" ry="2" />
<text  x="212.72" y="383.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1120.6" y="581" width="8.7" height="15.0" fill="rgb(249,150,2)" rx="2" ry="2" />
<text  x="1123.60" y="591.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="633.4" y="549" width="0.3" height="15.0" fill="rgb(236,183,7)" rx="2" ry="2" />
<text  x="636.44" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.14%)</title><rect x="946.8" y="501" width="1.6" height="15.0" fill="rgb(207,50,4)" rx="2" ry="2" />
<text  x="949.76" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (6 samples, 0.12%)</title><rect x="52.8" y="389" width="1.4" height="15.0" fill="rgb(245,69,45)" rx="2" ry="2" />
<text  x="55.83" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="681.5" y="565" width="0.5" height="15.0" fill="rgb(240,19,52)" rx="2" ry="2" />
<text  x="684.54" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.10%)</title><rect x="40.0" y="341" width="1.1" height="15.0" fill="rgb(208,49,38)" rx="2" ry="2" />
<text  x="43.00" y="351.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1057.2" y="453" width="0.2" height="15.0" fill="rgb(245,98,32)" rx="2" ry="2" />
<text  x="1060.16" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.1" y="341" width="0.2" height="15.0" fill="rgb(207,115,26)" rx="2" ry="2" />
<text  x="64.08" y="351.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1123.6" y="357" width="0.2" height="15.0" fill="rgb(222,178,21)" rx="2" ry="2" />
<text  x="1126.58" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.08%)</title><rect x="1158.9" y="565" width="0.9" height="15.0" fill="rgb(239,15,37)" rx="2" ry="2" />
<text  x="1161.85" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="167.8" y="485" width="0.9" height="15.0" fill="rgb(254,49,47)" rx="2" ry="2" />
<text  x="170.81" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="640.3" y="597" width="0.5" height="15.0" fill="rgb(235,178,33)" rx="2" ry="2" />
<text  x="643.31" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (2 samples, 0.04%)</title><rect x="201.0" y="357" width="0.5" height="15.0" fill="rgb(245,172,52)" rx="2" ry="2" />
<text  x="204.02" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="116.0" y="581" width="0.3" height="15.0" fill="rgb(234,121,8)" rx="2" ry="2" />
<text  x="119.04" y="591.5" ></text>
</g>
<g >
<title>__libc_start_main (4,724 samples, 91.69%)</title><rect x="87.2" y="741" width="1082.0" height="15.0" fill="rgb(233,93,12)" rx="2" ry="2" />
<text  x="90.19" y="751.5" >__libc_start_main</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.12%)</title><rect x="291.9" y="277" width="1.4" height="15.0" fill="rgb(222,151,49)" rx="2" ry="2" />
<text  x="294.94" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (3 samples, 0.06%)</title><rect x="1168.2" y="613" width="0.7" height="15.0" fill="rgb(221,7,5)" rx="2" ry="2" />
<text  x="1171.24" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="101" width="0.5" height="15.0" fill="rgb(217,108,47)" rx="2" ry="2" />
<text  x="56.75" y="111.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="81.2" y="517" width="0.3" height="15.0" fill="rgb(252,41,9)" rx="2" ry="2" />
<text  x="84.23" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="461.4" y="517" width="0.3" height="15.0" fill="rgb(219,185,51)" rx="2" ry="2" />
<text  x="464.43" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%)</title><rect x="273.4" y="245" width="0.7" height="15.0" fill="rgb(249,143,53)" rx="2" ry="2" />
<text  x="276.39" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="12.1" y="693" width="0.2" height="15.0" fill="rgb(221,74,13)" rx="2" ry="2" />
<text  x="15.06" y="703.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="827.2" y="389" width="0.2" height="15.0" fill="rgb(217,219,3)" rx="2" ry="2" />
<text  x="830.20" y="399.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::index (1 samples, 0.02%)</title><rect x="30.2" y="341" width="0.2" height="15.0" fill="rgb(212,193,34)" rx="2" ry="2" />
<text  x="33.16" y="351.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (3 samples, 0.06%)</title><rect x="1003.8" y="389" width="0.7" height="15.0" fill="rgb(251,113,49)" rx="2" ry="2" />
<text  x="1006.79" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (9 samples, 0.17%)</title><rect x="1130.9" y="373" width="2.1" height="15.0" fill="rgb(216,18,18)" rx="2" ry="2" />
<text  x="1133.91" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="60.8" y="389" width="0.5" height="15.0" fill="rgb(210,190,27)" rx="2" ry="2" />
<text  x="63.85" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="859.5" y="453" width="1.6" height="15.0" fill="rgb(247,79,16)" rx="2" ry="2" />
<text  x="862.50" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.10%)</title><rect x="650.8" y="597" width="1.2" height="15.0" fill="rgb(246,125,37)" rx="2" ry="2" />
<text  x="653.85" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1097.2" y="501" width="0.3" height="15.0" fill="rgb(205,52,13)" rx="2" ry="2" />
<text  x="1100.24" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="904.4" y="421" width="1.4" height="15.0" fill="rgb(231,77,31)" rx="2" ry="2" />
<text  x="907.39" y="431.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (2 samples, 0.04%)</title><rect x="1034.7" y="373" width="0.5" height="15.0" fill="rgb(222,203,43)" rx="2" ry="2" />
<text  x="1037.71" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="580.3" y="389" width="0.5" height="15.0" fill="rgb(208,125,44)" rx="2" ry="2" />
<text  x="583.30" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="56.7" y="373" width="0.3" height="15.0" fill="rgb(240,184,43)" rx="2" ry="2" />
<text  x="59.72" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="552.6" y="389" width="0.2" height="15.0" fill="rgb(228,125,13)" rx="2" ry="2" />
<text  x="555.59" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1041.8" y="325" width="0.2" height="15.0" fill="rgb(230,207,8)" rx="2" ry="2" />
<text  x="1044.81" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="114.4" y="613" width="0.3" height="15.0" fill="rgb(225,183,19)" rx="2" ry="2" />
<text  x="117.44" y="623.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.5" y="709" width="0.2" height="15.0" fill="rgb(229,195,29)" rx="2" ry="2" />
<text  x="13.46" y="719.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (1 samples, 0.02%)</title><rect x="113.3" y="357" width="0.2" height="15.0" fill="rgb(251,89,29)" rx="2" ry="2" />
<text  x="116.30" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.12%)</title><rect x="438.5" y="325" width="1.4" height="15.0" fill="rgb(238,53,49)" rx="2" ry="2" />
<text  x="441.53" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="548.7" y="437" width="0.2" height="15.0" fill="rgb(250,55,45)" rx="2" ry="2" />
<text  x="551.70" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (24 samples, 0.47%)</title><rect x="981.3" y="453" width="5.5" height="15.0" fill="rgb(212,104,38)" rx="2" ry="2" />
<text  x="984.35" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (53 samples, 1.03%)</title><rect x="589.0" y="501" width="12.1" height="15.0" fill="rgb(229,51,6)" rx="2" ry="2" />
<text  x="592.01" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="46.6" y="277" width="0.3" height="15.0" fill="rgb(205,101,15)" rx="2" ry="2" />
<text  x="49.65" y="287.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (2 samples, 0.04%)</title><rect x="745.7" y="533" width="0.4" height="15.0" fill="rgb(233,8,34)" rx="2" ry="2" />
<text  x="748.67" y="543.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="116.0" y="469" width="0.3" height="15.0" fill="rgb(242,154,8)" rx="2" ry="2" />
<text  x="119.04" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="549" width="0.2" height="15.0" fill="rgb(206,211,18)" rx="2" ry="2" />
<text  x="1170.78" y="559.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1129.1" y="373" width="0.2" height="15.0" fill="rgb(233,11,26)" rx="2" ry="2" />
<text  x="1132.08" y="383.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="876.2" y="341" width="0.2" height="15.0" fill="rgb(217,152,5)" rx="2" ry="2" />
<text  x="879.22" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="682.0" y="549" width="1.1" height="15.0" fill="rgb(251,212,36)" rx="2" ry="2" />
<text  x="685.00" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="522.1" y="421" width="0.5" height="15.0" fill="rgb(233,120,46)" rx="2" ry="2" />
<text  x="525.13" y="431.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="114.0" y="341" width="0.2" height="15.0" fill="rgb(214,202,9)" rx="2" ry="2" />
<text  x="116.98" y="351.5" ></text>
</g>
<g >
<title>mutation_partition_view::accept (1 samples, 0.02%)</title><rect x="1127.9" y="373" width="0.3" height="15.0" fill="rgb(212,106,23)" rx="2" ry="2" />
<text  x="1130.93" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (9 samples, 0.17%)</title><rect x="671.7" y="565" width="2.1" height="15.0" fill="rgb(224,142,41)" rx="2" ry="2" />
<text  x="674.69" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (8 samples, 0.16%)</title><rect x="996.5" y="389" width="1.8" height="15.0" fill="rgb(249,32,29)" rx="2" ry="2" />
<text  x="999.46" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="870.7" y="565" width="0.3" height="15.0" fill="rgb(232,202,33)" rx="2" ry="2" />
<text  x="873.72" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (14 samples, 0.27%)</title><rect x="771.1" y="485" width="3.2" height="15.0" fill="rgb(244,50,1)" rx="2" ry="2" />
<text  x="774.09" y="495.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="1125.4" y="341" width="0.2" height="15.0" fill="rgb(208,113,36)" rx="2" ry="2" />
<text  x="1128.41" y="351.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="1023.0" y="293" width="0.3" height="15.0" fill="rgb(232,181,14)" rx="2" ry="2" />
<text  x="1026.03" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="830.0" y="437" width="1.1" height="15.0" fill="rgb(239,32,13)" rx="2" ry="2" />
<text  x="832.95" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (2 samples, 0.04%)</title><rect x="49.6" y="357" width="0.5" height="15.0" fill="rgb(228,14,29)" rx="2" ry="2" />
<text  x="52.62" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.0" y="293" width="0.2" height="15.0" fill="rgb(210,84,29)" rx="2" ry="2" />
<text  x="62.01" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="70.5" y="437" width="0.2" height="15.0" fill="rgb(235,56,20)" rx="2" ry="2" />
<text  x="73.47" y="447.5" ></text>
</g>
<g >
<title>row::compact_and_expire (72 samples, 1.40%)</title><rect x="416.3" y="325" width="16.5" height="15.0" fill="rgb(209,43,15)" rx="2" ry="2" />
<text  x="419.31" y="335.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%)</title><rect x="759.0" y="373" width="0.6" height="15.0" fill="rgb(210,10,53)" rx="2" ry="2" />
<text  x="761.95" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%)</title><rect x="857.7" y="501" width="0.4" height="15.0" fill="rgb(241,36,19)" rx="2" ry="2" />
<text  x="860.67" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="373" width="0.2" height="15.0" fill="rgb(251,58,15)" rx="2" ry="2" />
<text  x="83.09" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.37%)</title><rect x="102.3" y="581" width="4.4" height="15.0" fill="rgb(241,229,52)" rx="2" ry="2" />
<text  x="105.30" y="591.5" ></text>
</g>
<g >
<title>database::find_uuid (3 samples, 0.06%)</title><rect x="77.8" y="533" width="0.7" height="15.0" fill="rgb(251,114,22)" rx="2" ry="2" />
<text  x="80.80" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="21.2" y="597" width="0.3" height="15.0" fill="rgb(251,112,33)" rx="2" ry="2" />
<text  x="24.22" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%)</title><rect x="1168.0" y="597" width="0.2" height="15.0" fill="rgb(231,114,37)" rx="2" ry="2" />
<text  x="1171.01" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.10%)</title><rect x="891.8" y="517" width="1.1" height="15.0" fill="rgb(238,186,19)" rx="2" ry="2" />
<text  x="894.79" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="371.0" y="325" width="0.2" height="15.0" fill="rgb(246,10,8)" rx="2" ry="2" />
<text  x="373.96" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.21%)</title><rect x="671.2" y="597" width="2.6" height="15.0" fill="rgb(252,194,48)" rx="2" ry="2" />
<text  x="674.23" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="39.1" y="437" width="0.7" height="15.0" fill="rgb(254,46,0)" rx="2" ry="2" />
<text  x="42.09" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.7" y="293" width="0.3" height="15.0" fill="rgb(218,169,32)" rx="2" ry="2" />
<text  x="48.73" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="44.8" y="261" width="0.5" height="15.0" fill="rgb(206,83,26)" rx="2" ry="2" />
<text  x="47.81" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.5" y="565" width="0.2" height="15.0" fill="rgb(211,222,33)" rx="2" ry="2" />
<text  x="13.46" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (2 samples, 0.04%)</title><rect x="871.9" y="501" width="0.4" height="15.0" fill="rgb(230,219,2)" rx="2" ry="2" />
<text  x="874.87" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="579.4" y="421" width="0.2" height="15.0" fill="rgb(219,85,11)" rx="2" ry="2" />
<text  x="582.39" y="431.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="765.4" y="517" width="2.3" height="15.0" fill="rgb(220,80,26)" rx="2" ry="2" />
<text  x="768.36" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1031.7" y="325" width="0.3" height="15.0" fill="rgb(238,146,6)" rx="2" ry="2" />
<text  x="1034.74" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1067.9" y="421" width="0.3" height="15.0" fill="rgb(222,139,35)" rx="2" ry="2" />
<text  x="1070.92" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%)</title><rect x="1087.6" y="453" width="0.2" height="15.0" fill="rgb(235,203,21)" rx="2" ry="2" />
<text  x="1090.62" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="425.2" y="261" width="1.2" height="15.0" fill="rgb(241,38,18)" rx="2" ry="2" />
<text  x="428.24" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="903.0" y="421" width="0.2" height="15.0" fill="rgb(206,3,25)" rx="2" ry="2" />
<text  x="906.02" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (25 samples, 0.49%)</title><rect x="871.6" y="597" width="5.8" height="15.0" fill="rgb(232,101,43)" rx="2" ry="2" />
<text  x="874.64" y="607.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (15 samples, 0.29%)</title><rect x="1123.8" y="357" width="3.4" height="15.0" fill="rgb(212,158,41)" rx="2" ry="2" />
<text  x="1126.81" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="462.6" y="533" width="0.2" height="15.0" fill="rgb(246,54,1)" rx="2" ry="2" />
<text  x="465.58" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (7 samples, 0.14%)</title><rect x="1167.3" y="629" width="1.6" height="15.0" fill="rgb(240,19,38)" rx="2" ry="2" />
<text  x="1170.33" y="639.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (77 samples, 1.49%)</title><rect x="894.8" y="501" width="17.6" height="15.0" fill="rgb(250,48,39)" rx="2" ry="2" />
<text  x="897.77" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="635.5" y="549" width="0.5" height="15.0" fill="rgb(218,98,35)" rx="2" ry="2" />
<text  x="638.50" y="559.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="130.0" y="517" width="0.2" height="15.0" fill="rgb(244,113,20)" rx="2" ry="2" />
<text  x="133.02" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (9 samples, 0.17%)</title><rect x="807.7" y="245" width="2.1" height="15.0" fill="rgb(251,114,1)" rx="2" ry="2" />
<text  x="810.74" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.4" y="485" width="0.3" height="15.0" fill="rgb(238,172,10)" rx="2" ry="2" />
<text  x="68.43" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="58.1" y="405" width="0.2" height="15.0" fill="rgb(224,106,16)" rx="2" ry="2" />
<text  x="61.10" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="41.6" y="325" width="0.2" height="15.0" fill="rgb(251,190,19)" rx="2" ry="2" />
<text  x="44.61" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="1094.5" y="501" width="1.1" height="15.0" fill="rgb(235,119,2)" rx="2" ry="2" />
<text  x="1097.49" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (7 samples, 0.14%)</title><rect x="300.6" y="325" width="1.7" height="15.0" fill="rgb(234,84,3)" rx="2" ry="2" />
<text  x="303.65" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (68 samples, 1.32%)</title><rect x="799.0" y="373" width="15.6" height="15.0" fill="rgb(233,74,53)" rx="2" ry="2" />
<text  x="802.03" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::pending_endpoints_for (2 samples, 0.04%)</title><rect x="1137.1" y="293" width="0.5" height="15.0" fill="rgb(234,98,26)" rx="2" ry="2" />
<text  x="1140.09" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="61.1" y="357" width="0.2" height="15.0" fill="rgb(206,74,34)" rx="2" ry="2" />
<text  x="64.08" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1051.0" y="405" width="0.4" height="15.0" fill="rgb(249,220,9)" rx="2" ry="2" />
<text  x="1053.97" y="415.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="114.2" y="581" width="0.2" height="15.0" fill="rgb(231,132,32)" rx="2" ry="2" />
<text  x="117.21" y="591.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="85.4" y="453" width="0.2" height="15.0" fill="rgb(252,206,16)" rx="2" ry="2" />
<text  x="88.35" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::get_future (1 samples, 0.02%)</title><rect x="1130.5" y="373" width="0.2" height="15.0" fill="rgb(216,195,43)" rx="2" ry="2" />
<text  x="1133.45" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="80.8" y="485" width="0.2" height="15.0" fill="rgb(236,177,29)" rx="2" ry="2" />
<text  x="83.77" y="495.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.41%)</title><rect x="1014.3" y="357" width="4.8" height="15.0" fill="rgb(236,70,12)" rx="2" ry="2" />
<text  x="1017.33" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="114.9" y="501" width="0.2" height="15.0" fill="rgb(242,60,44)" rx="2" ry="2" />
<text  x="117.90" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="846.4" y="485" width="0.3" height="15.0" fill="rgb(222,13,20)" rx="2" ry="2" />
<text  x="849.44" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.17%)</title><rect x="671.7" y="581" width="2.1" height="15.0" fill="rgb(224,87,32)" rx="2" ry="2" />
<text  x="674.69" y="591.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="447.7" y="325" width="0.2" height="15.0" fill="rgb(243,191,22)" rx="2" ry="2" />
<text  x="450.69" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.08%)</title><rect x="307.3" y="389" width="0.9" height="15.0" fill="rgb(210,109,53)" rx="2" ry="2" />
<text  x="310.29" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="444.3" y="277" width="0.2" height="15.0" fill="rgb(233,214,31)" rx="2" ry="2" />
<text  x="447.25" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%)</title><rect x="621.5" y="549" width="0.5" height="15.0" fill="rgb(209,22,18)" rx="2" ry="2" />
<text  x="624.53" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="46.6" y="293" width="0.3" height="15.0" fill="rgb(224,193,30)" rx="2" ry="2" />
<text  x="49.65" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="692.1" y="581" width="1.1" height="15.0" fill="rgb(251,37,51)" rx="2" ry="2" />
<text  x="695.07" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flush_accounter::operator (1 samples, 0.02%)</title><rect x="84.9" y="453" width="0.2" height="15.0" fill="rgb(217,209,8)" rx="2" ry="2" />
<text  x="87.90" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="56.3" y="357" width="0.2" height="15.0" fill="rgb(237,52,39)" rx="2" ry="2" />
<text  x="59.27" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (24 samples, 0.47%)</title><rect x="216.1" y="341" width="5.5" height="15.0" fill="rgb(239,62,8)" rx="2" ry="2" />
<text  x="219.13" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="63.8" y="437" width="0.3" height="15.0" fill="rgb(245,221,33)" rx="2" ry="2" />
<text  x="66.82" y="447.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.12%)</title><rect x="19.8" y="629" width="1.4" height="15.0" fill="rgb(233,199,8)" rx="2" ry="2" />
<text  x="22.85" y="639.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.14%)</title><rect x="551.7" y="421" width="1.6" height="15.0" fill="rgb(227,142,13)" rx="2" ry="2" />
<text  x="554.67" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="817.4" y="357" width="0.9" height="15.0" fill="rgb(214,48,35)" rx="2" ry="2" />
<text  x="820.36" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.41%)</title><rect x="279.1" y="325" width="4.8" height="15.0" fill="rgb(249,67,9)" rx="2" ry="2" />
<text  x="282.12" y="335.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.10%)</title><rect x="19.8" y="613" width="1.2" height="15.0" fill="rgb(208,197,54)" rx="2" ry="2" />
<text  x="22.85" y="623.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="601.4" y="517" width="0.2" height="15.0" fill="rgb(210,14,41)" rx="2" ry="2" />
<text  x="604.37" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (25 samples, 0.49%)</title><rect x="303.2" y="421" width="5.7" height="15.0" fill="rgb(205,170,33)" rx="2" ry="2" />
<text  x="306.17" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1045.0" y="437" width="0.2" height="15.0" fill="rgb(252,112,27)" rx="2" ry="2" />
<text  x="1048.02" y="447.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="717.0" y="549" width="0.3" height="15.0" fill="rgb(217,200,26)" rx="2" ry="2" />
<text  x="720.04" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="816.0" y="373" width="2.3" height="15.0" fill="rgb(212,110,45)" rx="2" ry="2" />
<text  x="818.98" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="772.7" y="421" width="0.2" height="15.0" fill="rgb(251,195,3)" rx="2" ry="2" />
<text  x="775.69" y="431.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%)</title><rect x="679.7" y="581" width="0.2" height="15.0" fill="rgb(219,118,34)" rx="2" ry="2" />
<text  x="682.70" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (25 samples, 0.49%)</title><rect x="1152.7" y="581" width="5.7" height="15.0" fill="rgb(233,28,42)" rx="2" ry="2" />
<text  x="1155.67" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="1102.0" y="485" width="0.5" height="15.0" fill="rgb(217,6,52)" rx="2" ry="2" />
<text  x="1105.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="84.4" y="565" width="0.3" height="15.0" fill="rgb(246,228,22)" rx="2" ry="2" />
<text  x="87.44" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (3 samples, 0.06%)</title><rect x="56.7" y="421" width="0.7" height="15.0" fill="rgb(254,112,36)" rx="2" ry="2" />
<text  x="59.72" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="277.5" y="309" width="0.2" height="15.0" fill="rgb(226,45,25)" rx="2" ry="2" />
<text  x="280.52" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="291.7" y="325" width="0.2" height="15.0" fill="rgb(228,129,49)" rx="2" ry="2" />
<text  x="294.72" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="280.0" y="293" width="0.5" height="15.0" fill="rgb(222,96,13)" rx="2" ry="2" />
<text  x="283.03" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="937.8" y="517" width="0.5" height="15.0" fill="rgb(221,117,46)" rx="2" ry="2" />
<text  x="940.83" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="138.5" y="485" width="0.2" height="15.0" fill="rgb(217,122,29)" rx="2" ry="2" />
<text  x="141.49" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,723 samples, 91.67%)</title><rect x="87.2" y="645" width="1081.7" height="15.0" fill="rgb(210,90,15)" rx="2" ry="2" />
<text  x="90.19" y="655.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="844.6" y="501" width="0.2" height="15.0" fill="rgb(224,71,47)" rx="2" ry="2" />
<text  x="847.61" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="955.0" y="485" width="0.2" height="15.0" fill="rgb(224,71,24)" rx="2" ry="2" />
<text  x="958.01" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="755.3" y="405" width="0.2" height="15.0" fill="rgb(216,171,52)" rx="2" ry="2" />
<text  x="758.29" y="415.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%)</title><rect x="19.2" y="309" width="0.2" height="15.0" fill="rgb(205,229,0)" rx="2" ry="2" />
<text  x="22.16" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="933.7" y="469" width="0.2" height="15.0" fill="rgb(217,78,49)" rx="2" ry="2" />
<text  x="936.71" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1107.3" y="517" width="0.7" height="15.0" fill="rgb(246,183,6)" rx="2" ry="2" />
<text  x="1110.32" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1036.3" y="373" width="0.2" height="15.0" fill="rgb(249,136,3)" rx="2" ry="2" />
<text  x="1039.32" y="383.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (2 samples, 0.04%)</title><rect x="667.1" y="549" width="0.5" height="15.0" fill="rgb(247,55,19)" rx="2" ry="2" />
<text  x="670.11" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (109 samples, 2.12%)</title><rect x="1141.7" y="613" width="24.9" height="15.0" fill="rgb(250,92,46)" rx="2" ry="2" />
<text  x="1144.67" y="623.5" >s..</text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="42.3" y="293" width="0.7" height="15.0" fill="rgb(250,178,3)" rx="2" ry="2" />
<text  x="45.29" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1127.2" y="325" width="0.3" height="15.0" fill="rgb(232,102,1)" rx="2" ry="2" />
<text  x="1130.24" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::maybe_reclaim (1 samples, 0.02%)</title><rect x="570.0" y="373" width="0.2" height="15.0" fill="rgb(230,28,18)" rx="2" ry="2" />
<text  x="573.00" y="383.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="301.8" y="309" width="0.5" height="15.0" fill="rgb(207,30,10)" rx="2" ry="2" />
<text  x="304.79" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="876.0" y="373" width="0.4" height="15.0" fill="rgb(222,153,45)" rx="2" ry="2" />
<text  x="878.99" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (7 samples, 0.14%)</title><rect x="658.9" y="533" width="1.6" height="15.0" fill="rgb(225,222,47)" rx="2" ry="2" />
<text  x="661.86" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::row_has_complex_deletion (1 samples, 0.02%)</title><rect x="86.0" y="517" width="0.3" height="15.0" fill="rgb(250,33,16)" rx="2" ry="2" />
<text  x="89.04" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="18.7" y="645" width="0.2" height="15.0" fill="rgb(211,51,47)" rx="2" ry="2" />
<text  x="21.70" y="655.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (18 samples, 0.35%)</title><rect x="810.0" y="277" width="4.1" height="15.0" fill="rgb(245,135,36)" rx="2" ry="2" />
<text  x="813.03" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="488.7" y="389" width="0.4" height="15.0" fill="rgb(227,60,27)" rx="2" ry="2" />
<text  x="491.69" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.7" y="421" width="0.3" height="15.0" fill="rgb(237,39,42)" rx="2" ry="2" />
<text  x="67.74" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (11 samples, 0.21%)</title><rect x="807.5" y="261" width="2.5" height="15.0" fill="rgb(205,67,6)" rx="2" ry="2" />
<text  x="810.51" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (2 samples, 0.04%)</title><rect x="787.6" y="453" width="0.4" height="15.0" fill="rgb(220,166,38)" rx="2" ry="2" />
<text  x="790.58" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="561.8" y="501" width="0.6" height="15.0" fill="rgb(227,213,36)" rx="2" ry="2" />
<text  x="564.75" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (2 samples, 0.04%)</title><rect x="90.6" y="629" width="0.5" height="15.0" fill="rgb(246,84,31)" rx="2" ry="2" />
<text  x="93.62" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="989.1" y="373" width="0.3" height="15.0" fill="rgb(233,80,32)" rx="2" ry="2" />
<text  x="992.13" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="696.9" y="325" width="0.2" height="15.0" fill="rgb(233,75,39)" rx="2" ry="2" />
<text  x="699.88" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (1 samples, 0.02%)</title><rect x="140.8" y="533" width="0.2" height="15.0" fill="rgb(221,211,44)" rx="2" ry="2" />
<text  x="143.78" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%)</title><rect x="675.4" y="597" width="2.2" height="15.0" fill="rgb(234,50,29)" rx="2" ry="2" />
<text  x="678.35" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="221.6" y="309" width="1.2" height="15.0" fill="rgb(208,51,52)" rx="2" ry="2" />
<text  x="224.63" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1126.6" y="325" width="0.2" height="15.0" fill="rgb(251,54,31)" rx="2" ry="2" />
<text  x="1129.56" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (1 samples, 0.02%)</title><rect x="98.9" y="597" width="0.2" height="15.0" fill="rgb(251,59,52)" rx="2" ry="2" />
<text  x="101.87" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="1154.5" y="549" width="0.2" height="15.0" fill="rgb(244,134,35)" rx="2" ry="2" />
<text  x="1157.50" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (4 samples, 0.08%)</title><rect x="733.5" y="533" width="0.9" height="15.0" fill="rgb(230,137,43)" rx="2" ry="2" />
<text  x="736.53" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="571.1" y="517" width="0.3" height="15.0" fill="rgb(225,174,45)" rx="2" ry="2" />
<text  x="574.14" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="1137.1" y="245" width="0.5" height="15.0" fill="rgb(205,197,50)" rx="2" ry="2" />
<text  x="1140.09" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%)</title><rect x="49.2" y="341" width="0.2" height="15.0" fill="rgb(212,174,54)" rx="2" ry="2" />
<text  x="52.17" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="683.8" y="581" width="0.3" height="15.0" fill="rgb(247,89,49)" rx="2" ry="2" />
<text  x="686.83" y="591.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="116.3" y="613" width="0.2" height="15.0" fill="rgb(206,205,20)" rx="2" ry="2" />
<text  x="119.27" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (2 samples, 0.04%)</title><rect x="56.7" y="389" width="0.5" height="15.0" fill="rgb(229,67,19)" rx="2" ry="2" />
<text  x="59.72" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="106.2" y="565" width="0.5" height="15.0" fill="rgb(213,76,15)" rx="2" ry="2" />
<text  x="109.20" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="631.1" y="517" width="0.3" height="15.0" fill="rgb(213,180,13)" rx="2" ry="2" />
<text  x="634.15" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%)</title><rect x="321.9" y="421" width="1.0" height="15.0" fill="rgb(233,2,15)" rx="2" ry="2" />
<text  x="324.95" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1164.3" y="565" width="0.3" height="15.0" fill="rgb(207,199,3)" rx="2" ry="2" />
<text  x="1167.35" y="575.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%)</title><rect x="1139.4" y="597" width="0.2" height="15.0" fill="rgb(231,14,14)" rx="2" ry="2" />
<text  x="1142.38" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="777.7" y="469" width="0.3" height="15.0" fill="rgb(238,182,50)" rx="2" ry="2" />
<text  x="780.73" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="349.2" y="357" width="0.7" height="15.0" fill="rgb(250,69,24)" rx="2" ry="2" />
<text  x="352.20" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="1114.0" y="485" width="0.9" height="15.0" fill="rgb(239,106,41)" rx="2" ry="2" />
<text  x="1116.96" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="660.9" y="501" width="0.3" height="15.0" fill="rgb(240,31,38)" rx="2" ry="2" />
<text  x="663.92" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="942.4" y="485" width="0.2" height="15.0" fill="rgb(247,158,46)" rx="2" ry="2" />
<text  x="945.41" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="458.7" y="485" width="0.4" height="15.0" fill="rgb(223,18,48)" rx="2" ry="2" />
<text  x="461.68" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (1 samples, 0.02%)</title><rect x="114.0" y="597" width="0.2" height="15.0" fill="rgb(247,208,28)" rx="2" ry="2" />
<text  x="116.98" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (13 samples, 0.25%)</title><rect x="346.9" y="373" width="3.0" height="15.0" fill="rgb(220,149,23)" rx="2" ry="2" />
<text  x="349.91" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="1054.6" y="389" width="0.7" height="15.0" fill="rgb(207,152,46)" rx="2" ry="2" />
<text  x="1057.64" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="60.4" y="373" width="0.2" height="15.0" fill="rgb(211,167,28)" rx="2" ry="2" />
<text  x="63.39" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (6 samples, 0.12%)</title><rect x="1165.3" y="549" width="1.3" height="15.0" fill="rgb(247,192,10)" rx="2" ry="2" />
<text  x="1168.26" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="520.5" y="437" width="0.3" height="15.0" fill="rgb(238,14,41)" rx="2" ry="2" />
<text  x="523.52" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="772.5" y="453" width="0.4" height="15.0" fill="rgb(233,169,36)" rx="2" ry="2" />
<text  x="775.47" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="45.3" y="373" width="0.9" height="15.0" fill="rgb(234,184,46)" rx="2" ry="2" />
<text  x="48.27" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="659.1" y="517" width="1.1" height="15.0" fill="rgb(225,69,47)" rx="2" ry="2" />
<text  x="662.09" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="41.6" y="373" width="0.2" height="15.0" fill="rgb(246,119,34)" rx="2" ry="2" />
<text  x="44.61" y="383.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="44.1" y="421" width="0.3" height="15.0" fill="rgb(208,101,42)" rx="2" ry="2" />
<text  x="47.13" y="431.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="901.9" y="405" width="0.9" height="15.0" fill="rgb(242,47,7)" rx="2" ry="2" />
<text  x="904.87" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="54.4" y="373" width="0.3" height="15.0" fill="rgb(222,39,32)" rx="2" ry="2" />
<text  x="57.43" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (9 samples, 0.17%)</title><rect x="777.7" y="485" width="2.1" height="15.0" fill="rgb(235,128,1)" rx="2" ry="2" />
<text  x="780.73" y="495.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (3 samples, 0.06%)</title><rect x="35.0" y="357" width="0.7" height="15.0" fill="rgb(248,77,17)" rx="2" ry="2" />
<text  x="37.97" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1112.4" y="485" width="0.6" height="15.0" fill="rgb(236,81,41)" rx="2" ry="2" />
<text  x="1115.36" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.5" y="661" width="0.2" height="15.0" fill="rgb(213,67,19)" rx="2" ry="2" />
<text  x="13.46" y="671.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%)</title><rect x="73.9" y="421" width="0.2" height="15.0" fill="rgb(228,75,12)" rx="2" ry="2" />
<text  x="76.90" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector&lt;gms::inet_address const*&gt; (1 samples, 0.02%)</title><rect x="1132.7" y="357" width="0.3" height="15.0" fill="rgb(247,27,52)" rx="2" ry="2" />
<text  x="1135.74" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="42.3" y="277" width="0.7" height="15.0" fill="rgb(219,92,38)" rx="2" ry="2" />
<text  x="45.29" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="804.3" y="325" width="0.2" height="15.0" fill="rgb(215,8,0)" rx="2" ry="2" />
<text  x="807.30" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="477.7" y="357" width="0.2" height="15.0" fill="rgb(235,141,32)" rx="2" ry="2" />
<text  x="480.69" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1137.8" y="309" width="0.2" height="15.0" fill="rgb(252,64,36)" rx="2" ry="2" />
<text  x="1140.78" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="50.8" y="405" width="0.2" height="15.0" fill="rgb(213,4,49)" rx="2" ry="2" />
<text  x="53.77" y="415.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1168.5" y="549" width="0.2" height="15.0" fill="rgb(211,16,23)" rx="2" ry="2" />
<text  x="1171.47" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (1 samples, 0.02%)</title><rect x="871.6" y="517" width="0.3" height="15.0" fill="rgb(235,112,33)" rx="2" ry="2" />
<text  x="874.64" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (1 samples, 0.02%)</title><rect x="1168.7" y="565" width="0.2" height="15.0" fill="rgb(247,66,45)" rx="2" ry="2" />
<text  x="1171.70" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="48.2" y="389" width="0.3" height="15.0" fill="rgb(230,26,8)" rx="2" ry="2" />
<text  x="51.25" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="871.0" y="581" width="0.2" height="15.0" fill="rgb(233,52,11)" rx="2" ry="2" />
<text  x="873.95" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="666.0" y="565" width="0.2" height="15.0" fill="rgb(233,1,29)" rx="2" ry="2" />
<text  x="668.96" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector&lt;gms::inet_address const*&gt; (1 samples, 0.02%)</title><rect x="1133.0" y="373" width="0.2" height="15.0" fill="rgb(253,78,50)" rx="2" ry="2" />
<text  x="1135.97" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.41%)</title><rect x="1014.3" y="341" width="4.8" height="15.0" fill="rgb(239,150,32)" rx="2" ry="2" />
<text  x="1017.33" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="924.5" y="501" width="0.3" height="15.0" fill="rgb(234,52,6)" rx="2" ry="2" />
<text  x="927.55" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="276.4" y="277" width="0.2" height="15.0" fill="rgb(251,31,31)" rx="2" ry="2" />
<text  x="279.37" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="23.1" y="405" width="0.2" height="15.0" fill="rgb(218,120,22)" rx="2" ry="2" />
<text  x="26.06" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="59.0" y="261" width="0.2" height="15.0" fill="rgb(232,89,39)" rx="2" ry="2" />
<text  x="62.01" y="271.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="622.7" y="533" width="0.2" height="15.0" fill="rgb(220,84,15)" rx="2" ry="2" />
<text  x="625.67" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="341" width="0.3" height="15.0" fill="rgb(208,184,0)" rx="2" ry="2" />
<text  x="83.54" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="572.3" y="533" width="0.4" height="15.0" fill="rgb(232,204,15)" rx="2" ry="2" />
<text  x="575.29" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.21%)</title><rect x="727.3" y="565" width="2.6" height="15.0" fill="rgb(220,6,11)" rx="2" ry="2" />
<text  x="730.34" y="575.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.5" y="645" width="0.3" height="15.0" fill="rgb(213,32,49)" rx="2" ry="2" />
<text  x="86.52" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.5" y="613" width="0.3" height="15.0" fill="rgb(218,31,16)" rx="2" ry="2" />
<text  x="86.52" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1162.7" y="581" width="0.3" height="15.0" fill="rgb(251,35,27)" rx="2" ry="2" />
<text  x="1165.74" y="591.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,253 samples, 24.32%)</title><rect x="174.7" y="533" width="287.0" height="15.0" fill="rgb(235,190,10)" rx="2" ry="2" />
<text  x="177.68" y="543.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="721.8" y="357" width="0.3" height="15.0" fill="rgb(211,3,34)" rx="2" ry="2" />
<text  x="724.85" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="820.8" y="373" width="0.2" height="15.0" fill="rgb(239,128,22)" rx="2" ry="2" />
<text  x="823.79" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="664.8" y="549" width="0.2" height="15.0" fill="rgb(218,33,32)" rx="2" ry="2" />
<text  x="667.82" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1127.2" y="309" width="0.3" height="15.0" fill="rgb(245,186,19)" rx="2" ry="2" />
<text  x="1130.24" y="319.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.39%)</title><rect x="1004.5" y="389" width="4.6" height="15.0" fill="rgb(219,76,51)" rx="2" ry="2" />
<text  x="1007.48" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="203.3" y="341" width="0.9" height="15.0" fill="rgb(224,168,4)" rx="2" ry="2" />
<text  x="206.31" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%)</title><rect x="1167.8" y="293" width="0.2" height="15.0" fill="rgb(208,205,31)" rx="2" ry="2" />
<text  x="1170.78" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="405.3" y="261" width="0.2" height="15.0" fill="rgb(207,145,47)" rx="2" ry="2" />
<text  x="408.32" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="986.8" y="453" width="0.3" height="15.0" fill="rgb(217,212,30)" rx="2" ry="2" />
<text  x="989.84" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (23 samples, 0.45%)</title><rect x="769.3" y="517" width="5.2" height="15.0" fill="rgb(211,133,36)" rx="2" ry="2" />
<text  x="772.26" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="733.8" y="517" width="0.4" height="15.0" fill="rgb(210,153,45)" rx="2" ry="2" />
<text  x="736.76" y="527.5" ></text>
</g>
<g >
<title>database::obtain_reader_permit (1 samples, 0.02%)</title><rect x="113.1" y="373" width="0.2" height="15.0" fill="rgb(226,154,9)" rx="2" ry="2" />
<text  x="116.07" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="807.0" y="261" width="0.5" height="15.0" fill="rgb(222,70,15)" rx="2" ry="2" />
<text  x="810.05" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%)</title><rect x="830.0" y="453" width="1.1" height="15.0" fill="rgb(227,7,38)" rx="2" ry="2" />
<text  x="832.95" y="463.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%)</title><rect x="975.6" y="453" width="0.3" height="15.0" fill="rgb(215,118,7)" rx="2" ry="2" />
<text  x="978.62" y="463.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (10 samples, 0.19%)</title><rect x="83.8" y="597" width="2.2" height="15.0" fill="rgb(221,89,33)" rx="2" ry="2" />
<text  x="86.75" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="695.1" y="597" width="0.4" height="15.0" fill="rgb(230,36,36)" rx="2" ry="2" />
<text  x="698.05" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="181.1" y="469" width="0.2" height="15.0" fill="rgb(234,22,16)" rx="2" ry="2" />
<text  x="184.09" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="873.0" y="469" width="0.2" height="15.0" fill="rgb(243,132,46)" rx="2" ry="2" />
<text  x="876.01" y="479.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%)</title><rect x="367.3" y="293" width="0.9" height="15.0" fill="rgb(225,101,8)" rx="2" ry="2" />
<text  x="370.30" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1138.2" y="341" width="0.3" height="15.0" fill="rgb(248,68,19)" rx="2" ry="2" />
<text  x="1141.24" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (50 samples, 0.97%)</title><rect x="749.3" y="501" width="11.5" height="15.0" fill="rgb(218,110,12)" rx="2" ry="2" />
<text  x="752.33" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (24 samples, 0.47%)</title><rect x="278.4" y="341" width="5.5" height="15.0" fill="rgb(228,75,44)" rx="2" ry="2" />
<text  x="281.43" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="54.2" y="309" width="0.2" height="15.0" fill="rgb(236,136,51)" rx="2" ry="2" />
<text  x="57.20" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (13 samples, 0.25%)</title><rect x="1163.7" y="597" width="2.9" height="15.0" fill="rgb(247,212,28)" rx="2" ry="2" />
<text  x="1166.66" y="607.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (2 samples, 0.04%)</title><rect x="1189.5" y="725" width="0.5" height="15.0" fill="rgb(245,171,53)" rx="2" ry="2" />
<text  x="1192.54" y="735.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="521.7" y="421" width="0.4" height="15.0" fill="rgb(238,62,23)" rx="2" ry="2" />
<text  x="524.67" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%)</title><rect x="872.8" y="453" width="0.2" height="15.0" fill="rgb(243,226,50)" rx="2" ry="2" />
<text  x="875.78" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1068.8" y="437" width="0.3" height="15.0" fill="rgb(249,170,15)" rx="2" ry="2" />
<text  x="1071.84" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="51.2" y="373" width="0.5" height="15.0" fill="rgb(218,110,18)" rx="2" ry="2" />
<text  x="54.23" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (2 samples, 0.04%)</title><rect x="26.7" y="357" width="0.5" height="15.0" fill="rgb(211,3,30)" rx="2" ry="2" />
<text  x="29.72" y="367.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1126.3" y="325" width="0.3" height="15.0" fill="rgb(221,84,52)" rx="2" ry="2" />
<text  x="1129.33" y="335.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (2 samples, 0.04%)</title><rect x="1128.2" y="389" width="0.4" height="15.0" fill="rgb(249,133,13)" rx="2" ry="2" />
<text  x="1131.16" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%)</title><rect x="1043.6" y="405" width="0.5" height="15.0" fill="rgb(234,161,22)" rx="2" ry="2" />
<text  x="1046.65" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="302.5" y="325" width="0.2" height="15.0" fill="rgb(239,100,25)" rx="2" ry="2" />
<text  x="305.48" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="816.9" y="357" width="0.2" height="15.0" fill="rgb(233,180,2)" rx="2" ry="2" />
<text  x="819.90" y="367.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (2 samples, 0.04%)</title><rect x="113.1" y="517" width="0.4" height="15.0" fill="rgb(226,176,4)" rx="2" ry="2" />
<text  x="116.07" y="527.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="114.7" y="613" width="0.2" height="15.0" fill="rgb(250,144,42)" rx="2" ry="2" />
<text  x="117.67" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="38.9" y="341" width="0.2" height="15.0" fill="rgb(238,65,4)" rx="2" ry="2" />
<text  x="41.86" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="55.8" y="261" width="0.5" height="15.0" fill="rgb(240,126,37)" rx="2" ry="2" />
<text  x="58.81" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="22.6" y="421" width="0.2" height="15.0" fill="rgb(218,39,11)" rx="2" ry="2" />
<text  x="25.60" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="128.9" y="549" width="0.2" height="15.0" fill="rgb(212,135,19)" rx="2" ry="2" />
<text  x="131.87" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="293" width="0.5" height="15.0" fill="rgb(244,120,20)" rx="2" ry="2" />
<text  x="52.62" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%)</title><rect x="84.9" y="469" width="0.2" height="15.0" fill="rgb(246,220,50)" rx="2" ry="2" />
<text  x="87.90" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="330.7" y="389" width="0.2" height="15.0" fill="rgb(246,29,37)" rx="2" ry="2" />
<text  x="333.65" y="399.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="862.0" y="549" width="1.4" height="15.0" fill="rgb(241,144,47)" rx="2" ry="2" />
<text  x="865.02" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="334.1" y="437" width="0.2" height="15.0" fill="rgb(250,170,34)" rx="2" ry="2" />
<text  x="337.09" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (24 samples, 0.47%)</title><rect x="871.6" y="533" width="5.5" height="15.0" fill="rgb(224,210,43)" rx="2" ry="2" />
<text  x="874.64" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="816.7" y="341" width="0.2" height="15.0" fill="rgb(205,50,20)" rx="2" ry="2" />
<text  x="819.67" y="351.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="847.8" y="533" width="1.6" height="15.0" fill="rgb(223,201,24)" rx="2" ry="2" />
<text  x="850.82" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (624 samples, 12.11%)</title><rect x="725.3" y="613" width="142.9" height="15.0" fill="rgb(254,55,3)" rx="2" ry="2" />
<text  x="728.28" y="623.5" >seastar::internal:..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="1134.8" y="213" width="0.2" height="15.0" fill="rgb(211,149,53)" rx="2" ry="2" />
<text  x="1137.80" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="481.6" y="373" width="0.2" height="15.0" fill="rgb(216,41,18)" rx="2" ry="2" />
<text  x="484.59" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="696.9" y="389" width="0.2" height="15.0" fill="rgb(250,123,53)" rx="2" ry="2" />
<text  x="699.88" y="399.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="731.5" y="565" width="0.2" height="15.0" fill="rgb(221,91,4)" rx="2" ry="2" />
<text  x="734.47" y="575.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1125.9" y="309" width="0.2" height="15.0" fill="rgb(207,216,27)" rx="2" ry="2" />
<text  x="1128.87" y="319.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="1140.1" y="613" width="0.2" height="15.0" fill="rgb(253,204,41)" rx="2" ry="2" />
<text  x="1143.07" y="623.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1168.9" y="661" width="0.3" height="15.0" fill="rgb(205,135,48)" rx="2" ry="2" />
<text  x="1171.93" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%)</title><rect x="827.7" y="469" width="0.2" height="15.0" fill="rgb(227,17,23)" rx="2" ry="2" />
<text  x="830.66" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1131.4" y="213" width="0.2" height="15.0" fill="rgb(208,88,7)" rx="2" ry="2" />
<text  x="1134.37" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (39 samples, 0.76%)</title><rect x="734.4" y="517" width="9.0" height="15.0" fill="rgb(223,59,13)" rx="2" ry="2" />
<text  x="737.44" y="527.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::drop_table_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="64.7" y="405" width="0.3" height="15.0" fill="rgb(210,36,33)" rx="2" ry="2" />
<text  x="67.74" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="965.3" y="421" width="0.2" height="15.0" fill="rgb(205,117,33)" rx="2" ry="2" />
<text  x="968.31" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (3 samples, 0.06%)</title><rect x="620.8" y="549" width="0.7" height="15.0" fill="rgb(223,200,16)" rx="2" ry="2" />
<text  x="623.84" y="559.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="114.0" y="565" width="0.2" height="15.0" fill="rgb(247,209,15)" rx="2" ry="2" />
<text  x="116.98" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="18.7" y="629" width="0.2" height="15.0" fill="rgb(222,53,42)" rx="2" ry="2" />
<text  x="21.70" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (6 samples, 0.12%)</title><rect x="39.8" y="389" width="1.3" height="15.0" fill="rgb(233,99,53)" rx="2" ry="2" />
<text  x="42.77" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="207.9" y="373" width="0.2" height="15.0" fill="rgb(227,52,13)" rx="2" ry="2" />
<text  x="210.89" y="383.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1138.5" y="357" width="0.2" height="15.0" fill="rgb(244,168,49)" rx="2" ry="2" />
<text  x="1141.47" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="85.1" y="373" width="0.3" height="15.0" fill="rgb(212,78,3)" rx="2" ry="2" />
<text  x="88.12" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (5 samples, 0.10%)</title><rect x="333.2" y="501" width="1.1" height="15.0" fill="rgb(219,101,50)" rx="2" ry="2" />
<text  x="336.17" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="605.5" y="501" width="0.2" height="15.0" fill="rgb(251,156,35)" rx="2" ry="2" />
<text  x="608.50" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="60.4" y="389" width="0.2" height="15.0" fill="rgb(217,134,52)" rx="2" ry="2" />
<text  x="63.39" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (6 samples, 0.12%)</title><rect x="618.8" y="549" width="1.4" height="15.0" fill="rgb(229,77,9)" rx="2" ry="2" />
<text  x="621.78" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="39.8" y="293" width="0.2" height="15.0" fill="rgb(206,142,15)" rx="2" ry="2" />
<text  x="42.77" y="303.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1038.1" y="373" width="0.3" height="15.0" fill="rgb(228,13,54)" rx="2" ry="2" />
<text  x="1041.15" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="138.9" y="517" width="0.5" height="15.0" fill="rgb(251,94,14)" rx="2" ry="2" />
<text  x="141.95" y="527.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%)</title><rect x="1125.2" y="341" width="0.2" height="15.0" fill="rgb(236,136,26)" rx="2" ry="2" />
<text  x="1128.18" y="351.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="696.9" y="517" width="0.2" height="15.0" fill="rgb(220,206,25)" rx="2" ry="2" />
<text  x="699.88" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (49 samples, 0.95%)</title><rect x="895.7" y="469" width="11.2" height="15.0" fill="rgb(206,136,38)" rx="2" ry="2" />
<text  x="898.69" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (8 samples, 0.16%)</title><rect x="79.4" y="565" width="1.8" height="15.0" fill="rgb(245,42,47)" rx="2" ry="2" />
<text  x="82.40" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1033.6" y="293" width="0.2" height="15.0" fill="rgb(223,127,44)" rx="2" ry="2" />
<text  x="1036.57" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="59.5" y="277" width="0.2" height="15.0" fill="rgb(239,177,14)" rx="2" ry="2" />
<text  x="62.47" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (7 samples, 0.14%)</title><rect x="1159.8" y="581" width="1.6" height="15.0" fill="rgb(209,129,29)" rx="2" ry="2" />
<text  x="1162.77" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.14%)</title><rect x="197.8" y="373" width="1.6" height="15.0" fill="rgb(241,159,16)" rx="2" ry="2" />
<text  x="200.81" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (33 samples, 0.64%)</title><rect x="133.0" y="533" width="7.6" height="15.0" fill="rgb(217,172,17)" rx="2" ry="2" />
<text  x="135.99" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="720.7" y="597" width="0.2" height="15.0" fill="rgb(233,10,17)" rx="2" ry="2" />
<text  x="723.70" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="41.8" y="421" width="0.3" height="15.0" fill="rgb(219,160,22)" rx="2" ry="2" />
<text  x="44.84" y="431.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.14%)</title><rect x="400.1" y="277" width="1.6" height="15.0" fill="rgb(251,179,22)" rx="2" ry="2" />
<text  x="403.05" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="1138.0" y="437" width="0.7" height="15.0" fill="rgb(249,55,39)" rx="2" ry="2" />
<text  x="1141.01" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="98.2" y="597" width="0.7" height="15.0" fill="rgb(218,103,23)" rx="2" ry="2" />
<text  x="101.18" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.5" y="421" width="0.2" height="15.0" fill="rgb(247,195,24)" rx="2" ry="2" />
<text  x="62.47" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="54.0" y="69" width="0.2" height="15.0" fill="rgb(205,180,22)" rx="2" ry="2" />
<text  x="56.98" y="79.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="485" width="0.2" height="15.0" fill="rgb(229,130,52)" rx="2" ry="2" />
<text  x="699.20" y="495.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (60 samples, 1.16%)</title><rect x="747.0" y="517" width="13.8" height="15.0" fill="rgb(239,162,7)" rx="2" ry="2" />
<text  x="750.04" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (443 samples, 8.60%)</title><rect x="462.8" y="533" width="101.5" height="15.0" fill="rgb(211,64,14)" rx="2" ry="2" />
<text  x="465.81" y="543.5" >query::queri..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="834.8" y="421" width="0.7" height="15.0" fill="rgb(251,227,34)" rx="2" ry="2" />
<text  x="837.76" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (17 samples, 0.33%)</title><rect x="436.7" y="357" width="3.9" height="15.0" fill="rgb(214,72,53)" rx="2" ry="2" />
<text  x="439.70" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.0" y="709" width="0.2" height="15.0" fill="rgb(236,195,4)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%)</title><rect x="20.3" y="597" width="0.5" height="15.0" fill="rgb(209,214,11)" rx="2" ry="2" />
<text  x="23.31" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (5 samples, 0.10%)</title><rect x="193.2" y="389" width="1.2" height="15.0" fill="rgb(205,172,29)" rx="2" ry="2" />
<text  x="196.23" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1120.6" y="533" width="8.7" height="15.0" fill="rgb(233,207,35)" rx="2" ry="2" />
<text  x="1123.60" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.5" y="693" width="0.2" height="15.0" fill="rgb(220,69,31)" rx="2" ry="2" />
<text  x="13.46" y="703.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="650.4" y="581" width="0.2" height="15.0" fill="rgb(234,19,35)" rx="2" ry="2" />
<text  x="653.39" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="277.7" y="309" width="0.3" height="15.0" fill="rgb(227,184,54)" rx="2" ry="2" />
<text  x="280.74" y="319.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="786.9" y="469" width="0.2" height="15.0" fill="rgb(246,161,42)" rx="2" ry="2" />
<text  x="789.89" y="479.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1056.9" y="437" width="0.3" height="15.0" fill="rgb(215,94,22)" rx="2" ry="2" />
<text  x="1059.93" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="534.3" y="293" width="0.4" height="15.0" fill="rgb(211,105,4)" rx="2" ry="2" />
<text  x="537.27" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="644.0" y="533" width="0.2" height="15.0" fill="rgb(220,208,17)" rx="2" ry="2" />
<text  x="646.98" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (4 samples, 0.08%)</title><rect x="79.9" y="469" width="0.9" height="15.0" fill="rgb(217,133,53)" rx="2" ry="2" />
<text  x="82.86" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (37 samples, 0.72%)</title><rect x="579.4" y="437" width="8.5" height="15.0" fill="rgb(226,37,24)" rx="2" ry="2" />
<text  x="582.39" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="815.1" y="357" width="0.9" height="15.0" fill="rgb(205,216,17)" rx="2" ry="2" />
<text  x="818.07" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="594.0" y="469" width="1.0" height="15.0" fill="rgb(224,143,45)" rx="2" ry="2" />
<text  x="597.05" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="713.1" y="549" width="0.3" height="15.0" fill="rgb(252,228,32)" rx="2" ry="2" />
<text  x="716.14" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="832.2" y="389" width="0.3" height="15.0" fill="rgb(230,187,16)" rx="2" ry="2" />
<text  x="835.24" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="677.9" y="597" width="0.2" height="15.0" fill="rgb(252,105,1)" rx="2" ry="2" />
<text  x="680.87" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%)</title><rect x="1130.0" y="437" width="0.2" height="15.0" fill="rgb(250,21,13)" rx="2" ry="2" />
<text  x="1132.99" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="674.0" y="597" width="0.2" height="15.0" fill="rgb(250,112,29)" rx="2" ry="2" />
<text  x="676.98" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="697.1" y="613" width="0.2" height="15.0" fill="rgb(253,69,21)" rx="2" ry="2" />
<text  x="700.11" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="829.0" y="469" width="0.3" height="15.0" fill="rgb(220,153,4)" rx="2" ry="2" />
<text  x="832.04" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="81.2" y="501" width="0.3" height="15.0" fill="rgb(239,229,52)" rx="2" ry="2" />
<text  x="84.23" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="85" width="0.5" height="15.0" fill="rgb(248,176,29)" rx="2" ry="2" />
<text  x="56.75" y="95.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="103.4" y="533" width="0.5" height="15.0" fill="rgb(219,132,54)" rx="2" ry="2" />
<text  x="106.45" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1027.4" y="261" width="0.2" height="15.0" fill="rgb(238,190,12)" rx="2" ry="2" />
<text  x="1030.38" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="1054.0" y="389" width="0.6" height="15.0" fill="rgb(253,168,15)" rx="2" ry="2" />
<text  x="1056.95" y="399.5" ></text>
</g>
<g >
<title>abstract_type::to_string_impl (1 samples, 0.02%)</title><rect x="115.6" y="325" width="0.2" height="15.0" fill="rgb(222,19,44)" rx="2" ry="2" />
<text  x="118.59" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.9" y="501" width="0.2" height="15.0" fill="rgb(221,1,19)" rx="2" ry="2" />
<text  x="68.89" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="44.6" y="389" width="0.7" height="15.0" fill="rgb(232,61,46)" rx="2" ry="2" />
<text  x="47.58" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::list_service_level_attachments_statement*, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.2" y="453" width="0.2" height="15.0" fill="rgb(208,83,22)" rx="2" ry="2" />
<text  x="68.20" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="556.7" y="357" width="0.7" height="15.0" fill="rgb(237,210,12)" rx="2" ry="2" />
<text  x="559.71" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%)</title><rect x="810.3" y="229" width="1.1" height="15.0" fill="rgb(251,187,25)" rx="2" ry="2" />
<text  x="813.26" y="239.5" ></text>
</g>
<g >
<title>memtable::add_flushed_memory (1 samples, 0.02%)</title><rect x="84.7" y="469" width="0.2" height="15.0" fill="rgb(221,155,43)" rx="2" ry="2" />
<text  x="87.67" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="797.9" y="341" width="1.1" height="15.0" fill="rgb(247,97,32)" rx="2" ry="2" />
<text  x="800.89" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (3 samples, 0.06%)</title><rect x="70.9" y="517" width="0.7" height="15.0" fill="rgb(230,127,43)" rx="2" ry="2" />
<text  x="73.92" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (41 samples, 0.80%)</title><rect x="1070.7" y="389" width="9.4" height="15.0" fill="rgb(213,56,41)" rx="2" ry="2" />
<text  x="1073.67" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="771.8" y="469" width="2.3" height="15.0" fill="rgb(247,207,53)" rx="2" ry="2" />
<text  x="774.78" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (3 samples, 0.06%)</title><rect x="311.6" y="437" width="0.7" height="15.0" fill="rgb(248,218,1)" rx="2" ry="2" />
<text  x="314.64" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="339.6" y="405" width="0.4" height="15.0" fill="rgb(229,128,22)" rx="2" ry="2" />
<text  x="342.58" y="415.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (1 samples, 0.02%)</title><rect x="1121.1" y="453" width="0.2" height="15.0" fill="rgb(210,20,47)" rx="2" ry="2" />
<text  x="1124.06" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="581.0" y="389" width="0.9" height="15.0" fill="rgb(244,128,0)" rx="2" ry="2" />
<text  x="583.99" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1133.7" y="325" width="0.2" height="15.0" fill="rgb(228,191,38)" rx="2" ry="2" />
<text  x="1136.66" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="994.2" y="437" width="0.7" height="15.0" fill="rgb(246,207,27)" rx="2" ry="2" />
<text  x="997.17" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%)</title><rect x="451.8" y="389" width="0.7" height="15.0" fill="rgb(231,61,26)" rx="2" ry="2" />
<text  x="454.81" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="346.0" y="373" width="0.9" height="15.0" fill="rgb(225,26,21)" rx="2" ry="2" />
<text  x="349.00" y="383.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="47.6" y="277" width="0.2" height="15.0" fill="rgb(222,133,41)" rx="2" ry="2" />
<text  x="50.56" y="287.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%)</title><rect x="1122.2" y="357" width="0.2" height="15.0" fill="rgb(222,84,47)" rx="2" ry="2" />
<text  x="1125.20" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::optional&lt;auth::record&gt; &gt;, auth::find_record (1 samples, 0.02%)</title><rect x="696.0" y="613" width="0.2" height="15.0" fill="rgb(243,178,28)" rx="2" ry="2" />
<text  x="698.97" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (8 samples, 0.16%)</title><rect x="754.8" y="437" width="1.9" height="15.0" fill="rgb(241,205,51)" rx="2" ry="2" />
<text  x="757.83" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.12%)</title><rect x="39.8" y="373" width="1.3" height="15.0" fill="rgb(235,30,49)" rx="2" ry="2" />
<text  x="42.77" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (51 samples, 0.99%)</title><rect x="709.3" y="613" width="11.6" height="15.0" fill="rgb(214,147,24)" rx="2" ry="2" />
<text  x="712.25" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="627.7" y="533" width="0.5" height="15.0" fill="rgb(205,179,38)" rx="2" ry="2" />
<text  x="630.71" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="780.7" y="453" width="0.7" height="15.0" fill="rgb(246,72,4)" rx="2" ry="2" />
<text  x="783.71" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%)</title><rect x="308.2" y="389" width="0.2" height="15.0" fill="rgb(211,165,0)" rx="2" ry="2" />
<text  x="311.21" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="22.8" y="405" width="0.3" height="15.0" fill="rgb(243,209,20)" rx="2" ry="2" />
<text  x="25.83" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="832.5" y="405" width="0.2" height="15.0" fill="rgb(243,21,1)" rx="2" ry="2" />
<text  x="835.47" y="415.5" ></text>
</g>
<g >
<title>make_combined_reader (68 samples, 1.32%)</title><rect x="473.8" y="437" width="15.6" height="15.0" fill="rgb(235,179,19)" rx="2" ry="2" />
<text  x="476.80" y="447.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="471.3" y="453" width="0.2" height="15.0" fill="rgb(239,228,21)" rx="2" ry="2" />
<text  x="474.28" y="463.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::range_tombstones (1 samples, 0.02%)</title><rect x="1126.8" y="341" width="0.2" height="15.0" fill="rgb(239,85,13)" rx="2" ry="2" />
<text  x="1129.79" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="38.9" y="325" width="0.2" height="15.0" fill="rgb(227,94,12)" rx="2" ry="2" />
<text  x="41.86" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="1134.6" y="229" width="0.4" height="15.0" fill="rgb(227,65,14)" rx="2" ry="2" />
<text  x="1137.57" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.7" y="389" width="0.2" height="15.0" fill="rgb(208,67,44)" rx="2" ry="2" />
<text  x="62.70" y="399.5" ></text>
</g>
<g >
<title>auth::resource::resource (8 samples, 0.16%)</title><rect x="780.0" y="501" width="1.9" height="15.0" fill="rgb(229,45,33)" rx="2" ry="2" />
<text  x="783.02" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="212.7" y="357" width="0.2" height="15.0" fill="rgb(223,100,27)" rx="2" ry="2" />
<text  x="215.70" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="871.0" y="485" width="0.2" height="15.0" fill="rgb(218,126,8)" rx="2" ry="2" />
<text  x="873.95" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="731.7" y="565" width="0.5" height="15.0" fill="rgb(242,61,47)" rx="2" ry="2" />
<text  x="734.70" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (16 samples, 0.31%)</title><rect x="325.8" y="405" width="3.7" height="15.0" fill="rgb(226,63,37)" rx="2" ry="2" />
<text  x="328.84" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="114.4" y="565" width="0.3" height="15.0" fill="rgb(236,125,33)" rx="2" ry="2" />
<text  x="117.44" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="954.1" y="485" width="0.7" height="15.0" fill="rgb(249,229,16)" rx="2" ry="2" />
<text  x="957.09" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%)</title><rect x="811.4" y="245" width="2.3" height="15.0" fill="rgb(234,20,2)" rx="2" ry="2" />
<text  x="814.40" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="357" width="0.3" height="15.0" fill="rgb(243,226,44)" rx="2" ry="2" />
<text  x="51.25" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="715.9" y="533" width="0.2" height="15.0" fill="rgb(240,158,30)" rx="2" ry="2" />
<text  x="718.89" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="1013.0" y="341" width="1.1" height="15.0" fill="rgb(215,75,6)" rx="2" ry="2" />
<text  x="1015.95" y="351.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (200 samples, 3.88%)</title><rect x="22.4" y="581" width="45.8" height="15.0" fill="rgb(230,226,51)" rx="2" ry="2" />
<text  x="25.37" y="591.5" >cql3..</text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="812.8" y="213" width="0.4" height="15.0" fill="rgb(245,156,42)" rx="2" ry="2" />
<text  x="815.78" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="778.2" y="453" width="0.2" height="15.0" fill="rgb(221,20,49)" rx="2" ry="2" />
<text  x="781.19" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="1151.5" y="533" width="0.3" height="15.0" fill="rgb(217,198,31)" rx="2" ry="2" />
<text  x="1154.52" y="543.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (3 samples, 0.06%)</title><rect x="912.4" y="501" width="0.7" height="15.0" fill="rgb(220,118,39)" rx="2" ry="2" />
<text  x="915.41" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="459.6" y="469" width="0.2" height="15.0" fill="rgb(231,47,41)" rx="2" ry="2" />
<text  x="462.60" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="781.6" y="485" width="0.3" height="15.0" fill="rgb(246,189,24)" rx="2" ry="2" />
<text  x="784.63" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="909.7" y="421" width="1.1" height="15.0" fill="rgb(206,213,7)" rx="2" ry="2" />
<text  x="912.66" y="431.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1134.3" y="261" width="0.3" height="15.0" fill="rgb(226,17,6)" rx="2" ry="2" />
<text  x="1137.34" y="271.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (15 samples, 0.29%)</title><rect x="555.1" y="421" width="3.4" height="15.0" fill="rgb(207,208,37)" rx="2" ry="2" />
<text  x="558.11" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="204.5" y="357" width="0.2" height="15.0" fill="rgb(224,42,23)" rx="2" ry="2" />
<text  x="207.45" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::value_at_index (1 samples, 0.02%)</title><rect x="1124.7" y="325" width="0.3" height="15.0" fill="rgb(215,180,44)" rx="2" ry="2" />
<text  x="1127.72" y="335.5" ></text>
</g>
<g >
<title>row_cache::make_reader (44 samples, 0.85%)</title><rect x="549.2" y="453" width="10.0" height="15.0" fill="rgb(208,78,27)" rx="2" ry="2" />
<text  x="552.15" y="463.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="115.4" y="389" width="0.2" height="15.0" fill="rgb(227,201,22)" rx="2" ry="2" />
<text  x="118.36" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (1 samples, 0.02%)</title><rect x="753.0" y="437" width="0.2" height="15.0" fill="rgb(210,64,47)" rx="2" ry="2" />
<text  x="756.00" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="54.7" y="357" width="0.9" height="15.0" fill="rgb(237,41,41)" rx="2" ry="2" />
<text  x="57.66" y="367.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="115.4" y="405" width="0.2" height="15.0" fill="rgb(221,95,23)" rx="2" ry="2" />
<text  x="118.36" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1057.8" y="437" width="0.3" height="15.0" fill="rgb(240,66,47)" rx="2" ry="2" />
<text  x="1060.85" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="684.1" y="565" width="0.2" height="15.0" fill="rgb(226,178,40)" rx="2" ry="2" />
<text  x="687.06" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="564.7" y="517" width="0.3" height="15.0" fill="rgb(206,68,12)" rx="2" ry="2" />
<text  x="567.73" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="100.9" y="597" width="0.3" height="15.0" fill="rgb(241,188,53)" rx="2" ry="2" />
<text  x="103.93" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (12 samples, 0.23%)</title><rect x="831.3" y="453" width="2.8" height="15.0" fill="rgb(206,0,40)" rx="2" ry="2" />
<text  x="834.33" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="23.5" y="533" width="0.2" height="15.0" fill="rgb(220,132,12)" rx="2" ry="2" />
<text  x="26.51" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="51.2" y="405" width="0.5" height="15.0" fill="rgb(208,209,35)" rx="2" ry="2" />
<text  x="54.23" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (14 samples, 0.27%)</title><rect x="83.8" y="725" width="3.2" height="15.0" fill="rgb(234,55,7)" rx="2" ry="2" />
<text  x="86.75" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (2 samples, 0.04%)</title><rect x="986.4" y="437" width="0.4" height="15.0" fill="rgb(231,176,50)" rx="2" ry="2" />
<text  x="989.39" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (11 samples, 0.21%)</title><rect x="44.6" y="437" width="2.5" height="15.0" fill="rgb(206,64,51)" rx="2" ry="2" />
<text  x="47.58" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.12%)</title><rect x="625.7" y="549" width="1.3" height="15.0" fill="rgb(235,43,13)" rx="2" ry="2" />
<text  x="628.65" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="41.6" y="341" width="0.2" height="15.0" fill="rgb(243,15,50)" rx="2" ry="2" />
<text  x="44.61" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="109.4" y="581" width="0.5" height="15.0" fill="rgb(243,95,50)" rx="2" ry="2" />
<text  x="112.40" y="591.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="77.3" y="517" width="0.3" height="15.0" fill="rgb(245,181,26)" rx="2" ry="2" />
<text  x="80.34" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="977.2" y="469" width="0.3" height="15.0" fill="rgb(210,110,24)" rx="2" ry="2" />
<text  x="980.22" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (72 samples, 1.40%)</title><rect x="1069.3" y="437" width="16.5" height="15.0" fill="rgb(244,209,23)" rx="2" ry="2" />
<text  x="1072.30" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="668.0" y="581" width="0.3" height="15.0" fill="rgb(207,95,16)" rx="2" ry="2" />
<text  x="671.02" y="591.5" ></text>
</g>
<g >
<title>query_state::query_state (20 samples, 0.39%)</title><rect x="612.4" y="549" width="4.5" height="15.0" fill="rgb(225,218,37)" rx="2" ry="2" />
<text  x="615.37" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="397.3" y="277" width="0.7" height="15.0" fill="rgb(252,214,15)" rx="2" ry="2" />
<text  x="400.30" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="39.1" y="421" width="0.4" height="15.0" fill="rgb(225,215,6)" rx="2" ry="2" />
<text  x="42.09" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.10%)</title><rect x="1145.1" y="597" width="1.2" height="15.0" fill="rgb(241,36,49)" rx="2" ry="2" />
<text  x="1148.11" y="607.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%)</title><rect x="115.1" y="421" width="0.3" height="15.0" fill="rgb(225,183,46)" rx="2" ry="2" />
<text  x="118.13" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1109.8" y="517" width="0.5" height="15.0" fill="rgb(221,157,53)" rx="2" ry="2" />
<text  x="1112.84" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="818.0" y="341" width="0.3" height="15.0" fill="rgb(221,21,54)" rx="2" ry="2" />
<text  x="821.04" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="113.1" y="453" width="0.2" height="15.0" fill="rgb(214,82,52)" rx="2" ry="2" />
<text  x="116.07" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::cf_name&gt;::_M_reset (1 samples, 0.02%)</title><rect x="62.7" y="437" width="0.2" height="15.0" fill="rgb(224,216,46)" rx="2" ry="2" />
<text  x="65.68" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (3 samples, 0.06%)</title><rect x="74.8" y="453" width="0.7" height="15.0" fill="rgb(213,48,3)" rx="2" ry="2" />
<text  x="77.82" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (8 samples, 0.16%)</title><rect x="789.2" y="421" width="1.8" height="15.0" fill="rgb(232,8,38)" rx="2" ry="2" />
<text  x="792.18" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="600.7" y="485" width="0.2" height="15.0" fill="rgb(220,168,41)" rx="2" ry="2" />
<text  x="603.69" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="489.6" y="437" width="1.1" height="15.0" fill="rgb(254,138,41)" rx="2" ry="2" />
<text  x="492.60" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="824.2" y="453" width="0.3" height="15.0" fill="rgb(232,162,22)" rx="2" ry="2" />
<text  x="827.23" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="54.9" y="277" width="0.7" height="15.0" fill="rgb(238,5,4)" rx="2" ry="2" />
<text  x="57.89" y="287.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%)</title><rect x="207.2" y="373" width="0.2" height="15.0" fill="rgb(244,218,53)" rx="2" ry="2" />
<text  x="210.20" y="383.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%)</title><rect x="82.8" y="725" width="0.3" height="15.0" fill="rgb(211,135,10)" rx="2" ry="2" />
<text  x="85.83" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="43.7" y="341" width="0.2" height="15.0" fill="rgb(217,170,47)" rx="2" ry="2" />
<text  x="46.67" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="469" width="0.2" height="15.0" fill="rgb(226,83,11)" rx="2" ry="2" />
<text  x="699.20" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="599.8" y="469" width="0.2" height="15.0" fill="rgb(214,190,23)" rx="2" ry="2" />
<text  x="602.77" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.14%)</title><rect x="974.0" y="437" width="1.6" height="15.0" fill="rgb(253,74,32)" rx="2" ry="2" />
<text  x="977.02" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="540.0" y="389" width="0.2" height="15.0" fill="rgb(251,110,31)" rx="2" ry="2" />
<text  x="542.99" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="26.7" y="309" width="0.2" height="15.0" fill="rgb(220,91,21)" rx="2" ry="2" />
<text  x="29.72" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%)</title><rect x="1086.7" y="421" width="0.2" height="15.0" fill="rgb(205,100,53)" rx="2" ry="2" />
<text  x="1089.70" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (5 samples, 0.10%)</title><rect x="598.6" y="469" width="1.2" height="15.0" fill="rgb(249,14,25)" rx="2" ry="2" />
<text  x="601.63" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="99.8" y="597" width="1.1" height="15.0" fill="rgb(208,123,37)" rx="2" ry="2" />
<text  x="102.78" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%)</title><rect x="900.3" y="405" width="0.7" height="15.0" fill="rgb(235,36,25)" rx="2" ry="2" />
<text  x="903.27" y="415.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="419.1" y="293" width="0.4" height="15.0" fill="rgb(232,49,2)" rx="2" ry="2" />
<text  x="422.06" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (6 samples, 0.12%)</title><rect x="615.3" y="517" width="1.4" height="15.0" fill="rgb(215,54,17)" rx="2" ry="2" />
<text  x="618.35" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1168.0" y="613" width="0.2" height="15.0" fill="rgb(223,146,49)" rx="2" ry="2" />
<text  x="1171.01" y="623.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (11 samples, 0.21%)</title><rect x="788.7" y="437" width="2.5" height="15.0" fill="rgb(228,137,37)" rx="2" ry="2" />
<text  x="791.73" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (2 samples, 0.04%)</title><rect x="948.8" y="517" width="0.5" height="15.0" fill="rgb(237,82,52)" rx="2" ry="2" />
<text  x="951.82" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.9" y="309" width="0.2" height="15.0" fill="rgb(218,51,32)" rx="2" ry="2" />
<text  x="41.86" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1151.8" y="565" width="0.2" height="15.0" fill="rgb(218,100,54)" rx="2" ry="2" />
<text  x="1154.75" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="138.5" y="469" width="0.2" height="15.0" fill="rgb(231,62,29)" rx="2" ry="2" />
<text  x="141.49" y="479.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="909.4" y="437" width="1.4" height="15.0" fill="rgb(254,27,37)" rx="2" ry="2" />
<text  x="912.43" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="167.3" y="517" width="0.3" height="15.0" fill="rgb(213,141,1)" rx="2" ry="2" />
<text  x="170.35" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (3 samples, 0.06%)</title><rect x="25.1" y="293" width="0.7" height="15.0" fill="rgb(228,197,47)" rx="2" ry="2" />
<text  x="28.12" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (3 samples, 0.06%)</title><rect x="976.3" y="469" width="0.7" height="15.0" fill="rgb(241,127,0)" rx="2" ry="2" />
<text  x="979.31" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (27 samples, 0.52%)</title><rect x="987.1" y="453" width="6.2" height="15.0" fill="rgb(227,169,40)" rx="2" ry="2" />
<text  x="990.07" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="57.0" y="373" width="0.2" height="15.0" fill="rgb(247,98,12)" rx="2" ry="2" />
<text  x="59.95" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="43.7" y="405" width="0.4" height="15.0" fill="rgb(236,198,34)" rx="2" ry="2" />
<text  x="46.67" y="415.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%)</title><rect x="114.9" y="581" width="1.1" height="15.0" fill="rgb(243,213,7)" rx="2" ry="2" />
<text  x="117.90" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="455.9" y="485" width="0.5" height="15.0" fill="rgb(224,3,19)" rx="2" ry="2" />
<text  x="458.94" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="778.4" y="453" width="1.2" height="15.0" fill="rgb(223,10,11)" rx="2" ry="2" />
<text  x="781.42" y="463.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%)</title><rect x="113.1" y="469" width="0.4" height="15.0" fill="rgb(215,67,6)" rx="2" ry="2" />
<text  x="116.07" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="674.4" y="597" width="1.0" height="15.0" fill="rgb(208,124,47)" rx="2" ry="2" />
<text  x="677.44" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.14%)</title><rect x="144.9" y="565" width="1.6" height="15.0" fill="rgb(211,78,40)" rx="2" ry="2" />
<text  x="147.90" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%)</title><rect x="584.9" y="389" width="0.2" height="15.0" fill="rgb(247,169,44)" rx="2" ry="2" />
<text  x="587.88" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%)</title><rect x="287.4" y="357" width="0.7" height="15.0" fill="rgb(222,44,37)" rx="2" ry="2" />
<text  x="290.36" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="114.0" y="373" width="0.2" height="15.0" fill="rgb(252,52,26)" rx="2" ry="2" />
<text  x="116.98" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (5 samples, 0.10%)</title><rect x="810.3" y="261" width="1.1" height="15.0" fill="rgb(251,214,49)" rx="2" ry="2" />
<text  x="813.26" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="44.1" y="437" width="0.3" height="15.0" fill="rgb(234,150,34)" rx="2" ry="2" />
<text  x="47.13" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.9" y="261" width="0.2" height="15.0" fill="rgb(242,20,51)" rx="2" ry="2" />
<text  x="41.86" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (3 samples, 0.06%)</title><rect x="73.9" y="469" width="0.7" height="15.0" fill="rgb(253,51,54)" rx="2" ry="2" />
<text  x="76.90" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="338.7" y="421" width="0.2" height="15.0" fill="rgb(240,197,27)" rx="2" ry="2" />
<text  x="341.67" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="984.6" y="373" width="1.1" height="15.0" fill="rgb(207,42,15)" rx="2" ry="2" />
<text  x="987.55" y="383.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (2 samples, 0.04%)</title><rect x="1135.5" y="213" width="0.4" height="15.0" fill="rgb(205,52,32)" rx="2" ry="2" />
<text  x="1138.49" y="223.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="38.9" y="293" width="0.2" height="15.0" fill="rgb(237,23,14)" rx="2" ry="2" />
<text  x="41.86" y="303.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1131.8" y="277" width="0.3" height="15.0" fill="rgb(249,39,3)" rx="2" ry="2" />
<text  x="1134.82" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="589.2" y="453" width="0.3" height="15.0" fill="rgb(242,113,35)" rx="2" ry="2" />
<text  x="592.24" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1119.0" y="533" width="0.2" height="15.0" fill="rgb(238,7,3)" rx="2" ry="2" />
<text  x="1122.00" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (2 samples, 0.04%)</title><rect x="82.4" y="613" width="0.4" height="15.0" fill="rgb(254,43,33)" rx="2" ry="2" />
<text  x="85.38" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="579.6" y="421" width="0.2" height="15.0" fill="rgb(246,72,53)" rx="2" ry="2" />
<text  x="582.62" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::reactor::task_queue, unsigned int&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, float&amp;&gt; (1 samples, 0.02%)</title><rect x="116.0" y="533" width="0.3" height="15.0" fill="rgb(231,153,17)" rx="2" ry="2" />
<text  x="119.04" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="557.2" y="341" width="0.2" height="15.0" fill="rgb(220,159,16)" rx="2" ry="2" />
<text  x="560.17" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="428.5" y="277" width="0.4" height="15.0" fill="rgb(206,103,24)" rx="2" ry="2" />
<text  x="431.45" y="287.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="915.2" y="453" width="0.2" height="15.0" fill="rgb(222,23,47)" rx="2" ry="2" />
<text  x="918.16" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="602.7" y="533" width="0.3" height="15.0" fill="rgb(217,128,40)" rx="2" ry="2" />
<text  x="605.75" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (2 samples, 0.04%)</title><rect x="113.1" y="565" width="0.4" height="15.0" fill="rgb(225,134,51)" rx="2" ry="2" />
<text  x="116.07" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1120.6" y="549" width="8.7" height="15.0" fill="rgb(235,180,6)" rx="2" ry="2" />
<text  x="1123.60" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="27.4" y="405" width="0.2" height="15.0" fill="rgb(227,222,54)" rx="2" ry="2" />
<text  x="30.41" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (210 samples, 4.08%)</title><rect x="229.4" y="309" width="48.1" height="15.0" fill="rgb(212,87,43)" rx="2" ry="2" />
<text  x="232.42" y="319.5" >part..</text>
</g>
<g >
<title>database::find_keyspace (23 samples, 0.45%)</title><rect x="1051.4" y="453" width="5.3" height="15.0" fill="rgb(246,152,45)" rx="2" ry="2" />
<text  x="1054.43" y="463.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="19.2" y="325" width="0.2" height="15.0" fill="rgb(221,73,13)" rx="2" ry="2" />
<text  x="22.16" y="335.5" ></text>
</g>
<g >
<title>row_tombstone::apply (4 samples, 0.08%)</title><rect x="433.0" y="325" width="0.9" height="15.0" fill="rgb(218,0,33)" rx="2" ry="2" />
<text  x="436.03" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="58.3" y="405" width="0.3" height="15.0" fill="rgb(233,182,8)" rx="2" ry="2" />
<text  x="61.33" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1055.3" y="405" width="0.3" height="15.0" fill="rgb(236,84,45)" rx="2" ry="2" />
<text  x="1058.33" y="415.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="643.1" y="597" width="0.4" height="15.0" fill="rgb(236,163,29)" rx="2" ry="2" />
<text  x="646.06" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="616.5" y="485" width="0.2" height="15.0" fill="rgb(247,21,26)" rx="2" ry="2" />
<text  x="619.49" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="19.2" y="261" width="0.2" height="15.0" fill="rgb(210,177,28)" rx="2" ry="2" />
<text  x="22.16" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="800.6" y="341" width="0.3" height="15.0" fill="rgb(205,51,4)" rx="2" ry="2" />
<text  x="803.64" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="53.3" y="325" width="0.2" height="15.0" fill="rgb(253,149,11)" rx="2" ry="2" />
<text  x="56.29" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="85.1" y="437" width="0.3" height="15.0" fill="rgb(231,210,4)" rx="2" ry="2" />
<text  x="88.12" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="675.4" y="565" width="0.2" height="15.0" fill="rgb(232,176,51)" rx="2" ry="2" />
<text  x="678.35" y="575.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="898.2" y="405" width="0.2" height="15.0" fill="rgb(253,128,15)" rx="2" ry="2" />
<text  x="901.21" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1068.4" y="437" width="0.4" height="15.0" fill="rgb(223,29,14)" rx="2" ry="2" />
<text  x="1071.38" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="56.5" y="421" width="0.2" height="15.0" fill="rgb(230,60,41)" rx="2" ry="2" />
<text  x="59.49" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="86.5" y="533" width="0.2" height="15.0" fill="rgb(221,140,3)" rx="2" ry="2" />
<text  x="89.50" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (2 samples, 0.04%)</title><rect x="898.7" y="421" width="0.4" height="15.0" fill="rgb(205,127,45)" rx="2" ry="2" />
<text  x="901.66" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="138.3" y="501" width="0.2" height="15.0" fill="rgb(223,221,5)" rx="2" ry="2" />
<text  x="141.26" y="511.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="871.0" y="389" width="0.2" height="15.0" fill="rgb(224,94,40)" rx="2" ry="2" />
<text  x="873.95" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1092.4" y="469" width="0.3" height="15.0" fill="rgb(207,225,28)" rx="2" ry="2" />
<text  x="1095.43" y="479.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="809.8" y="245" width="0.2" height="15.0" fill="rgb(229,58,12)" rx="2" ry="2" />
<text  x="812.80" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.9" y="165" width="0.2" height="15.0" fill="rgb(236,61,3)" rx="2" ry="2" />
<text  x="52.85" y="175.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="296.1" y="277" width="0.2" height="15.0" fill="rgb(234,52,6)" rx="2" ry="2" />
<text  x="299.07" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (11 samples, 0.21%)</title><rect x="825.1" y="453" width="2.6" height="15.0" fill="rgb(245,229,23)" rx="2" ry="2" />
<text  x="828.14" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.12%)</title><rect x="1153.1" y="549" width="1.4" height="15.0" fill="rgb(252,229,12)" rx="2" ry="2" />
<text  x="1156.12" y="559.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="59.0" y="245" width="0.2" height="15.0" fill="rgb(217,165,9)" rx="2" ry="2" />
<text  x="62.01" y="255.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="43.0" y="421" width="0.4" height="15.0" fill="rgb(206,108,42)" rx="2" ry="2" />
<text  x="45.98" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="850.1" y="517" width="0.7" height="15.0" fill="rgb(254,11,9)" rx="2" ry="2" />
<text  x="853.11" y="527.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (20 samples, 0.39%)</title><rect x="501.7" y="389" width="4.6" height="15.0" fill="rgb(253,49,6)" rx="2" ry="2" />
<text  x="504.74" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::fill_prepare_context (1 samples, 0.02%)</title><rect x="68.6" y="549" width="0.3" height="15.0" fill="rgb(220,152,43)" rx="2" ry="2" />
<text  x="71.63" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%)</title><rect x="962.3" y="469" width="3.2" height="15.0" fill="rgb(235,99,17)" rx="2" ry="2" />
<text  x="965.34" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="1125.0" y="341" width="0.2" height="15.0" fill="rgb(242,205,7)" rx="2" ry="2" />
<text  x="1127.95" y="351.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.4" y="357" width="0.2" height="15.0" fill="rgb(223,110,43)" rx="2" ry="2" />
<text  x="52.39" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="161.2" y="549" width="0.4" height="15.0" fill="rgb(221,128,19)" rx="2" ry="2" />
<text  x="164.16" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="1167.8" y="309" width="0.2" height="15.0" fill="rgb(231,34,10)" rx="2" ry="2" />
<text  x="1170.78" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement::do_execute (1 samples, 0.02%)</title><rect x="89.0" y="629" width="0.2" height="15.0" fill="rgb(219,155,39)" rx="2" ry="2" />
<text  x="92.02" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="945.6" y="469" width="1.2" height="15.0" fill="rgb(230,211,32)" rx="2" ry="2" />
<text  x="948.62" y="479.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%)</title><rect x="932.8" y="501" width="0.4" height="15.0" fill="rgb(230,202,37)" rx="2" ry="2" />
<text  x="935.79" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%)</title><rect x="663.7" y="501" width="0.7" height="15.0" fill="rgb(253,200,1)" rx="2" ry="2" />
<text  x="666.67" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.08%)</title><rect x="562.4" y="517" width="1.0" height="15.0" fill="rgb(205,46,45)" rx="2" ry="2" />
<text  x="565.44" y="527.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="696.7" y="597" width="0.2" height="15.0" fill="rgb(207,225,53)" rx="2" ry="2" />
<text  x="699.65" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="58.8" y="373" width="0.4" height="15.0" fill="rgb(230,173,13)" rx="2" ry="2" />
<text  x="61.78" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="797.9" y="357" width="1.1" height="15.0" fill="rgb(215,92,17)" rx="2" ry="2" />
<text  x="800.89" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="211.1" y="357" width="0.9" height="15.0" fill="rgb(222,150,4)" rx="2" ry="2" />
<text  x="214.09" y="367.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="113.5" y="533" width="0.3" height="15.0" fill="rgb(210,58,27)" rx="2" ry="2" />
<text  x="116.52" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="770.2" y="453" width="0.9" height="15.0" fill="rgb(217,134,9)" rx="2" ry="2" />
<text  x="773.17" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,029 samples, 19.97%)</title><rect x="884.2" y="549" width="235.7" height="15.0" fill="rgb(247,104,50)" rx="2" ry="2" />
<text  x="887.24" y="559.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="1127.0" y="293" width="0.2" height="15.0" fill="rgb(247,88,39)" rx="2" ry="2" />
<text  x="1130.01" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.5" y="581" width="0.2" height="15.0" fill="rgb(239,103,20)" rx="2" ry="2" />
<text  x="13.46" y="591.5" ></text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="26.9" y="325" width="0.3" height="15.0" fill="rgb(207,79,3)" rx="2" ry="2" />
<text  x="29.95" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%)</title><rect x="737.0" y="453" width="2.5" height="15.0" fill="rgb(207,61,14)" rx="2" ry="2" />
<text  x="739.96" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (684 samples, 13.28%)</title><rect x="176.5" y="501" width="156.7" height="15.0" fill="rgb(244,15,38)" rx="2" ry="2" />
<text  x="179.51" y="511.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="396.6" y="261" width="0.7" height="15.0" fill="rgb(215,108,52)" rx="2" ry="2" />
<text  x="399.61" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="633.2" y="549" width="0.2" height="15.0" fill="rgb(244,34,9)" rx="2" ry="2" />
<text  x="636.21" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1040.7" y="373" width="0.2" height="15.0" fill="rgb(227,50,22)" rx="2" ry="2" />
<text  x="1043.67" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="57.9" y="405" width="0.2" height="15.0" fill="rgb(245,55,22)" rx="2" ry="2" />
<text  x="60.87" y="415.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="74.1" y="421" width="0.3" height="15.0" fill="rgb(219,198,27)" rx="2" ry="2" />
<text  x="77.13" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="814.1" y="325" width="0.5" height="15.0" fill="rgb(232,41,32)" rx="2" ry="2" />
<text  x="817.15" y="335.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (4 samples, 0.08%)</title><rect x="1135.5" y="261" width="0.9" height="15.0" fill="rgb(225,212,6)" rx="2" ry="2" />
<text  x="1138.49" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.6" y="389" width="0.2" height="15.0" fill="rgb(238,82,30)" rx="2" ry="2" />
<text  x="44.61" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="653.1" y="597" width="0.5" height="15.0" fill="rgb(254,111,13)" rx="2" ry="2" />
<text  x="656.14" y="607.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1054.4" y="373" width="0.2" height="15.0" fill="rgb(221,159,1)" rx="2" ry="2" />
<text  x="1057.41" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (2 samples, 0.04%)</title><rect x="49.6" y="261" width="0.5" height="15.0" fill="rgb(217,112,1)" rx="2" ry="2" />
<text  x="52.62" y="271.5" ></text>
</g>
<g >
<title>iterator_reader::fetch_entry (1 samples, 0.02%)</title><rect x="84.0" y="501" width="0.2" height="15.0" fill="rgb(240,129,43)" rx="2" ry="2" />
<text  x="86.98" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (27 samples, 0.52%)</title><rect x="270.6" y="293" width="6.2" height="15.0" fill="rgb(228,182,1)" rx="2" ry="2" />
<text  x="273.64" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="270.0" y="277" width="0.2" height="15.0" fill="rgb(231,226,51)" rx="2" ry="2" />
<text  x="272.96" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (2 samples, 0.04%)</title><rect x="644.2" y="581" width="0.5" height="15.0" fill="rgb(214,55,21)" rx="2" ry="2" />
<text  x="647.20" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="815.3" y="325" width="0.7" height="15.0" fill="rgb(234,228,42)" rx="2" ry="2" />
<text  x="818.30" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="334.3" y="517" width="0.2" height="15.0" fill="rgb(212,186,10)" rx="2" ry="2" />
<text  x="337.32" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (4 samples, 0.08%)</title><rect x="720.9" y="613" width="0.9" height="15.0" fill="rgb(235,88,39)" rx="2" ry="2" />
<text  x="723.93" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="81.0" y="453" width="0.2" height="15.0" fill="rgb(247,191,18)" rx="2" ry="2" />
<text  x="84.00" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="718.2" y="517" width="0.2" height="15.0" fill="rgb(222,62,46)" rx="2" ry="2" />
<text  x="721.18" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="19.4" y="421" width="0.2" height="15.0" fill="rgb(231,223,48)" rx="2" ry="2" />
<text  x="22.39" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%)</title><rect x="487.5" y="373" width="0.5" height="15.0" fill="rgb(213,5,12)" rx="2" ry="2" />
<text  x="490.54" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="898.9" y="405" width="0.2" height="15.0" fill="rgb(230,58,15)" rx="2" ry="2" />
<text  x="901.89" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="750.0" y="485" width="0.5" height="15.0" fill="rgb(216,67,16)" rx="2" ry="2" />
<text  x="753.02" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="605.7" y="501" width="0.3" height="15.0" fill="rgb(223,172,31)" rx="2" ry="2" />
<text  x="608.73" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="652.0" y="597" width="0.7" height="15.0" fill="rgb(210,102,15)" rx="2" ry="2" />
<text  x="654.99" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="485" width="0.2" height="15.0" fill="rgb(216,176,21)" rx="2" ry="2" />
<text  x="1170.78" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume (182 samples, 3.53%)</title><rect x="371.2" y="325" width="41.7" height="15.0" fill="rgb(242,206,39)" rx="2" ry="2" />
<text  x="374.19" y="335.5" >que..</text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (13 samples, 0.25%)</title><rect x="555.6" y="389" width="2.9" height="15.0" fill="rgb(234,29,27)" rx="2" ry="2" />
<text  x="558.57" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="995.8" y="421" width="2.7" height="15.0" fill="rgb(244,100,10)" rx="2" ry="2" />
<text  x="998.78" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="45.3" y="309" width="0.4" height="15.0" fill="rgb(224,126,2)" rx="2" ry="2" />
<text  x="48.27" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%)</title><rect x="846.7" y="501" width="0.9" height="15.0" fill="rgb(210,11,7)" rx="2" ry="2" />
<text  x="849.67" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (1 samples, 0.02%)</title><rect x="76.0" y="501" width="0.2" height="15.0" fill="rgb(243,158,43)" rx="2" ry="2" />
<text  x="78.96" y="511.5" ></text>
</g>
<g >
<title>libat_store_16_i1 (1 samples, 0.02%)</title><rect x="721.2" y="597" width="0.2" height="15.0" fill="rgb(225,164,3)" rx="2" ry="2" />
<text  x="724.16" y="607.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (2 samples, 0.04%)</title><rect x="1120.1" y="581" width="0.5" height="15.0" fill="rgb(249,91,0)" rx="2" ry="2" />
<text  x="1123.14" y="591.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="114.0" y="229" width="0.2" height="15.0" fill="rgb(251,79,21)" rx="2" ry="2" />
<text  x="116.98" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (38 samples, 0.74%)</title><rect x="101.2" y="597" width="8.7" height="15.0" fill="rgb(238,53,53)" rx="2" ry="2" />
<text  x="104.16" y="607.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="577.8" y="437" width="1.6" height="15.0" fill="rgb(249,123,9)" rx="2" ry="2" />
<text  x="580.78" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%)</title><rect x="644.4" y="533" width="0.3" height="15.0" fill="rgb(240,185,12)" rx="2" ry="2" />
<text  x="647.43" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="91.1" y="629" width="0.2" height="15.0" fill="rgb(226,163,51)" rx="2" ry="2" />
<text  x="94.08" y="639.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%)</title><rect x="116.0" y="437" width="0.3" height="15.0" fill="rgb(224,133,38)" rx="2" ry="2" />
<text  x="119.04" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt; &gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="75.7" y="485" width="0.3" height="15.0" fill="rgb(238,214,16)" rx="2" ry="2" />
<text  x="78.73" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="931.2" y="437" width="1.4" height="15.0" fill="rgb(213,157,47)" rx="2" ry="2" />
<text  x="934.19" y="447.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="1167.8" y="277" width="0.2" height="15.0" fill="rgb(248,60,16)" rx="2" ry="2" />
<text  x="1170.78" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="54.2" y="341" width="0.2" height="15.0" fill="rgb(224,38,34)" rx="2" ry="2" />
<text  x="57.20" y="351.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="866.8" y="581" width="0.5" height="15.0" fill="rgb(227,110,22)" rx="2" ry="2" />
<text  x="869.83" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.27%)</title><rect x="83.8" y="661" width="3.2" height="15.0" fill="rgb(230,152,39)" rx="2" ry="2" />
<text  x="86.75" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="448.4" y="373" width="0.2" height="15.0" fill="rgb(245,26,19)" rx="2" ry="2" />
<text  x="451.38" y="383.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="506.6" y="389" width="0.2" height="15.0" fill="rgb(217,194,18)" rx="2" ry="2" />
<text  x="509.55" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (171 samples, 3.32%)</title><rect x="231.2" y="293" width="39.2" height="15.0" fill="rgb(212,50,10)" rx="2" ry="2" />
<text  x="234.25" y="303.5" >mut..</text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="18.2" y="677" width="0.3" height="15.0" fill="rgb(221,170,47)" rx="2" ry="2" />
<text  x="21.25" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.1" y="309" width="0.2" height="15.0" fill="rgb(216,169,40)" rx="2" ry="2" />
<text  x="64.08" y="319.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.1" y="341" width="0.2" height="15.0" fill="rgb(220,125,13)" rx="2" ry="2" />
<text  x="878.07" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="113.3" y="421" width="0.2" height="15.0" fill="rgb(229,168,1)" rx="2" ry="2" />
<text  x="116.30" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%)</title><rect x="821.7" y="421" width="0.2" height="15.0" fill="rgb(208,189,13)" rx="2" ry="2" />
<text  x="824.71" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.23%)</title><rect x="811.4" y="261" width="2.7" height="15.0" fill="rgb(254,24,6)" rx="2" ry="2" />
<text  x="814.40" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="683.6" y="565" width="0.2" height="15.0" fill="rgb(206,36,24)" rx="2" ry="2" />
<text  x="686.60" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="60.4" y="405" width="0.4" height="15.0" fill="rgb(229,213,45)" rx="2" ry="2" />
<text  x="63.39" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (2 samples, 0.04%)</title><rect x="77.8" y="517" width="0.5" height="15.0" fill="rgb(248,111,4)" rx="2" ry="2" />
<text  x="80.80" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="19.4" y="437" width="0.2" height="15.0" fill="rgb(227,119,39)" rx="2" ry="2" />
<text  x="22.39" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="336.6" y="485" width="0.5" height="15.0" fill="rgb(210,65,17)" rx="2" ry="2" />
<text  x="339.61" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="306.1" y="389" width="1.0" height="15.0" fill="rgb(246,102,51)" rx="2" ry="2" />
<text  x="309.15" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="62.9" y="421" width="0.2" height="15.0" fill="rgb(251,167,21)" rx="2" ry="2" />
<text  x="65.91" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="709.5" y="597" width="0.2" height="15.0" fill="rgb(218,174,14)" rx="2" ry="2" />
<text  x="712.48" y="607.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (2 samples, 0.04%)</title><rect x="1122.9" y="261" width="0.5" height="15.0" fill="rgb(224,128,36)" rx="2" ry="2" />
<text  x="1125.89" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="63.8" y="453" width="0.3" height="15.0" fill="rgb(214,61,22)" rx="2" ry="2" />
<text  x="66.82" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="38.9" y="405" width="0.2" height="15.0" fill="rgb(243,27,35)" rx="2" ry="2" />
<text  x="41.86" y="415.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%)</title><rect x="558.5" y="421" width="0.3" height="15.0" fill="rgb(215,115,5)" rx="2" ry="2" />
<text  x="561.54" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%)</title><rect x="1153.6" y="517" width="0.9" height="15.0" fill="rgb(225,26,54)" rx="2" ry="2" />
<text  x="1156.58" y="527.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="435.3" y="341" width="0.3" height="15.0" fill="rgb(222,133,36)" rx="2" ry="2" />
<text  x="438.32" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%)</title><rect x="585.3" y="389" width="0.5" height="15.0" fill="rgb(241,47,41)" rx="2" ry="2" />
<text  x="588.34" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="849.9" y="533" width="0.2" height="15.0" fill="rgb(218,93,23)" rx="2" ry="2" />
<text  x="852.88" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.9" y="517" width="0.3" height="15.0" fill="rgb(242,136,1)" rx="2" ry="2" />
<text  x="70.95" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="911.7" y="485" width="0.2" height="15.0" fill="rgb(219,84,27)" rx="2" ry="2" />
<text  x="914.72" y="495.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="19.2" y="341" width="0.2" height="15.0" fill="rgb(220,61,26)" rx="2" ry="2" />
<text  x="22.16" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="380.8" y="293" width="0.9" height="15.0" fill="rgb(247,8,20)" rx="2" ry="2" />
<text  x="383.81" y="303.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%)</title><rect x="721.4" y="581" width="0.2" height="15.0" fill="rgb(241,18,29)" rx="2" ry="2" />
<text  x="724.39" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="270.0" y="261" width="0.2" height="15.0" fill="rgb(233,24,11)" rx="2" ry="2" />
<text  x="272.96" y="271.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1126.8" y="325" width="0.2" height="15.0" fill="rgb(243,90,8)" rx="2" ry="2" />
<text  x="1129.79" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="23.7" y="485" width="0.3" height="15.0" fill="rgb(231,91,28)" rx="2" ry="2" />
<text  x="26.74" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="19.2" y="293" width="0.2" height="15.0" fill="rgb(248,32,29)" rx="2" ry="2" />
<text  x="22.16" y="303.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="84.2" y="469" width="0.2" height="15.0" fill="rgb(243,106,26)" rx="2" ry="2" />
<text  x="87.21" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="846.2" y="469" width="0.2" height="15.0" fill="rgb(234,41,24)" rx="2" ry="2" />
<text  x="849.22" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="871.0" y="453" width="0.2" height="15.0" fill="rgb(233,42,51)" rx="2" ry="2" />
<text  x="873.95" y="463.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%)</title><rect x="285.3" y="341" width="0.7" height="15.0" fill="rgb(218,138,9)" rx="2" ry="2" />
<text  x="288.30" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="488.5" y="373" width="0.2" height="15.0" fill="rgb(244,194,41)" rx="2" ry="2" />
<text  x="491.46" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="55.8" y="325" width="0.5" height="15.0" fill="rgb(216,182,29)" rx="2" ry="2" />
<text  x="58.81" y="335.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::detach_service_level_statement*, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="64.1" y="437" width="0.2" height="15.0" fill="rgb(219,14,15)" rx="2" ry="2" />
<text  x="67.05" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="1107.1" y="517" width="0.2" height="15.0" fill="rgb(207,134,45)" rx="2" ry="2" />
<text  x="1110.09" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (4 samples, 0.08%)</title><rect x="298.1" y="309" width="0.9" height="15.0" fill="rgb(251,165,6)" rx="2" ry="2" />
<text  x="301.13" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1044.3" y="405" width="0.3" height="15.0" fill="rgb(211,55,34)" rx="2" ry="2" />
<text  x="1047.33" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="87.6" y="629" width="0.7" height="15.0" fill="rgb(231,31,8)" rx="2" ry="2" />
<text  x="90.64" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;checked_file_impl&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="83.5" y="725" width="0.3" height="15.0" fill="rgb(214,92,20)" rx="2" ry="2" />
<text  x="86.52" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (8 samples, 0.16%)</title><rect x="1040.7" y="389" width="1.8" height="15.0" fill="rgb(214,189,5)" rx="2" ry="2" />
<text  x="1043.67" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="62.9" y="373" width="0.2" height="15.0" fill="rgb(214,134,36)" rx="2" ry="2" />
<text  x="65.91" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="761.5" y="501" width="0.4" height="15.0" fill="rgb(225,42,23)" rx="2" ry="2" />
<text  x="764.47" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="55.6" y="341" width="0.2" height="15.0" fill="rgb(239,31,17)" rx="2" ry="2" />
<text  x="58.58" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="820.6" y="389" width="0.9" height="15.0" fill="rgb(248,220,18)" rx="2" ry="2" />
<text  x="823.56" y="399.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1123.6" y="341" width="0.2" height="15.0" fill="rgb(236,8,8)" rx="2" ry="2" />
<text  x="1126.58" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="967.8" y="485" width="0.3" height="15.0" fill="rgb(243,179,23)" rx="2" ry="2" />
<text  x="970.83" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_impl_data::_Deque_impl_data (1 samples, 0.02%)</title><rect x="23.1" y="373" width="0.2" height="15.0" fill="rgb(225,46,2)" rx="2" ry="2" />
<text  x="26.06" y="383.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="871.9" y="485" width="0.2" height="15.0" fill="rgb(247,205,11)" rx="2" ry="2" />
<text  x="874.87" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="373" width="0.2" height="15.0" fill="rgb(212,83,15)" rx="2" ry="2" />
<text  x="60.87" y="383.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%)</title><rect x="103.0" y="549" width="0.2" height="15.0" fill="rgb(208,72,43)" rx="2" ry="2" />
<text  x="105.99" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="114.9" y="389" width="0.2" height="15.0" fill="rgb(237,203,2)" rx="2" ry="2" />
<text  x="117.90" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="619.2" y="533" width="0.7" height="15.0" fill="rgb(210,43,44)" rx="2" ry="2" />
<text  x="622.24" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="710.2" y="581" width="0.4" height="15.0" fill="rgb(246,88,30)" rx="2" ry="2" />
<text  x="713.17" y="591.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (7 samples, 0.14%)</title><rect x="79.6" y="533" width="1.6" height="15.0" fill="rgb(248,145,31)" rx="2" ry="2" />
<text  x="82.63" y="543.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="864.1" y="581" width="0.2" height="15.0" fill="rgb(215,128,42)" rx="2" ry="2" />
<text  x="867.08" y="591.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.21%)</title><rect x="507.9" y="373" width="2.5" height="15.0" fill="rgb(224,80,19)" rx="2" ry="2" />
<text  x="510.93" y="383.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="57.2" y="341" width="0.2" height="15.0" fill="rgb(237,36,33)" rx="2" ry="2" />
<text  x="60.18" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (8 samples, 0.16%)</title><rect x="413.8" y="309" width="1.8" height="15.0" fill="rgb(228,217,15)" rx="2" ry="2" />
<text  x="416.79" y="319.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="212.0" y="373" width="0.2" height="15.0" fill="rgb(223,55,35)" rx="2" ry="2" />
<text  x="215.01" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (4 samples, 0.08%)</title><rect x="298.1" y="325" width="0.9" height="15.0" fill="rgb(231,9,34)" rx="2" ry="2" />
<text  x="301.13" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1163.0" y="581" width="0.7" height="15.0" fill="rgb(232,87,52)" rx="2" ry="2" />
<text  x="1165.97" y="591.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%)</title><rect x="28.3" y="389" width="0.3" height="15.0" fill="rgb(253,66,53)" rx="2" ry="2" />
<text  x="31.32" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="56.7" y="405" width="0.5" height="15.0" fill="rgb(243,223,15)" rx="2" ry="2" />
<text  x="59.72" y="415.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (2 samples, 0.04%)</title><rect x="643.5" y="613" width="0.5" height="15.0" fill="rgb(221,206,39)" rx="2" ry="2" />
<text  x="646.52" y="623.5" ></text>
</g>
<g >
<title>type_interning_helper&lt;set_type_impl, seastar::shared_ptr&lt;abstract_type const&gt;, bool&gt;::get_instance (1 samples, 0.02%)</title><rect x="114.7" y="549" width="0.2" height="15.0" fill="rgb(252,6,24)" rx="2" ry="2" />
<text  x="117.67" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (8 samples, 0.16%)</title><rect x="368.4" y="293" width="1.9" height="15.0" fill="rgb(208,222,34)" rx="2" ry="2" />
<text  x="371.44" y="303.5" ></text>
</g>
<g >
<title>validation::validate_column_family (3 samples, 0.06%)</title><rect x="81.2" y="565" width="0.7" height="15.0" fill="rgb(213,60,0)" rx="2" ry="2" />
<text  x="84.23" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (3 samples, 0.06%)</title><rect x="21.5" y="597" width="0.6" height="15.0" fill="rgb(225,177,54)" rx="2" ry="2" />
<text  x="24.45" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.2" y="517" width="0.2" height="15.0" fill="rgb(217,219,39)" rx="2" ry="2" />
<text  x="22.16" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (34 samples, 0.66%)</title><rect x="855.8" y="565" width="7.8" height="15.0" fill="rgb(211,11,48)" rx="2" ry="2" />
<text  x="858.83" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (1 samples, 0.02%)</title><rect x="866.4" y="549" width="0.2" height="15.0" fill="rgb(246,145,31)" rx="2" ry="2" />
<text  x="869.37" y="559.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (9 samples, 0.17%)</title><rect x="12.3" y="693" width="2.1" height="15.0" fill="rgb(229,208,31)" rx="2" ry="2" />
<text  x="15.29" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="434.2" y="309" width="0.2" height="15.0" fill="rgb(206,171,21)" rx="2" ry="2" />
<text  x="437.18" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="814.8" y="357" width="0.3" height="15.0" fill="rgb(242,165,3)" rx="2" ry="2" />
<text  x="817.84" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="348.5" y="357" width="0.7" height="15.0" fill="rgb(218,56,25)" rx="2" ry="2" />
<text  x="351.52" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (66 samples, 1.28%)</title><rect x="417.7" y="309" width="15.1" height="15.0" fill="rgb(220,50,0)" rx="2" ry="2" />
<text  x="420.69" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="114.0" y="517" width="0.2" height="15.0" fill="rgb(254,131,34)" rx="2" ry="2" />
<text  x="116.98" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1166.9" y="533" width="0.2" height="15.0" fill="rgb(231,106,11)" rx="2" ry="2" />
<text  x="1169.87" y="543.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="73.0" y="389" width="0.2" height="15.0" fill="rgb(226,219,9)" rx="2" ry="2" />
<text  x="75.99" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (42 samples, 0.82%)</title><rect x="590.4" y="485" width="9.6" height="15.0" fill="rgb(251,63,5)" rx="2" ry="2" />
<text  x="593.38" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="803.4" y="245" width="0.2" height="15.0" fill="rgb(253,201,50)" rx="2" ry="2" />
<text  x="806.39" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="54.9" y="261" width="0.7" height="15.0" fill="rgb(246,83,19)" rx="2" ry="2" />
<text  x="57.89" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="52.8" y="277" width="0.3" height="15.0" fill="rgb(236,187,53)" rx="2" ry="2" />
<text  x="55.83" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="799.3" y="341" width="0.9" height="15.0" fill="rgb(208,106,27)" rx="2" ry="2" />
<text  x="802.26" y="351.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="79.4" y="549" width="0.2" height="15.0" fill="rgb(220,128,43)" rx="2" ry="2" />
<text  x="82.40" y="559.5" ></text>
</g>
<g >
<title>db::filter_for_query (3 samples, 0.06%)</title><rect x="1057.4" y="453" width="0.7" height="15.0" fill="rgb(220,33,54)" rx="2" ry="2" />
<text  x="1060.39" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="83.8" y="629" width="3.2" height="15.0" fill="rgb(215,40,32)" rx="2" ry="2" />
<text  x="86.75" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="442.0" y="341" width="0.2" height="15.0" fill="rgb(239,107,20)" rx="2" ry="2" />
<text  x="444.96" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (38 samples, 0.74%)</title><rect x="1120.6" y="597" width="8.7" height="15.0" fill="rgb(220,54,48)" rx="2" ry="2" />
<text  x="1123.60" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="48.9" y="405" width="1.2" height="15.0" fill="rgb(223,151,3)" rx="2" ry="2" />
<text  x="51.94" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (36 samples, 0.70%)</title><rect x="1071.1" y="373" width="8.3" height="15.0" fill="rgb(226,118,45)" rx="2" ry="2" />
<text  x="1074.13" y="383.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="116.3" y="597" width="0.2" height="15.0" fill="rgb(220,54,45)" rx="2" ry="2" />
<text  x="119.27" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="794.2" y="421" width="0.3" height="15.0" fill="rgb(254,35,12)" rx="2" ry="2" />
<text  x="797.22" y="431.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::parsed_statement*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="67.3" y="389" width="0.2" height="15.0" fill="rgb(236,146,6)" rx="2" ry="2" />
<text  x="70.26" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (276 samples, 5.36%)</title><rect x="19.6" y="677" width="63.2" height="15.0" fill="rgb(246,10,8)" rx="2" ry="2" />
<text  x="22.62" y="687.5" >std::_..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="278.0" y="309" width="0.2" height="15.0" fill="rgb(252,76,51)" rx="2" ry="2" />
<text  x="280.97" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%)</title><rect x="702.2" y="565" width="0.2" height="15.0" fill="rgb(234,228,9)" rx="2" ry="2" />
<text  x="705.15" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="284.4" y="309" width="0.9" height="15.0" fill="rgb(235,115,14)" rx="2" ry="2" />
<text  x="287.39" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="693.4" y="581" width="0.5" height="15.0" fill="rgb(222,182,33)" rx="2" ry="2" />
<text  x="696.45" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="761.2" y="517" width="0.3" height="15.0" fill="rgb(226,61,35)" rx="2" ry="2" />
<text  x="764.24" y="527.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%)</title><rect x="113.5" y="549" width="0.3" height="15.0" fill="rgb(243,156,9)" rx="2" ry="2" />
<text  x="116.52" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="23.3" y="533" width="0.2" height="15.0" fill="rgb(244,178,46)" rx="2" ry="2" />
<text  x="26.28" y="543.5" ></text>
</g>
<g >
<title>posix_memalign (2 samples, 0.04%)</title><rect x="258.5" y="213" width="0.5" height="15.0" fill="rgb(236,166,10)" rx="2" ry="2" />
<text  x="261.51" y="223.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="51.7" y="213" width="0.2" height="15.0" fill="rgb(252,75,29)" rx="2" ry="2" />
<text  x="54.68" y="223.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="712.9" y="549" width="0.2" height="15.0" fill="rgb(239,154,33)" rx="2" ry="2" />
<text  x="715.92" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="579.8" y="421" width="2.1" height="15.0" fill="rgb(241,91,12)" rx="2" ry="2" />
<text  x="582.84" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="934.2" y="517" width="0.7" height="15.0" fill="rgb(216,181,2)" rx="2" ry="2" />
<text  x="937.17" y="527.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="19.4" y="549" width="0.2" height="15.0" fill="rgb(241,168,44)" rx="2" ry="2" />
<text  x="22.39" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="938.3" y="517" width="1.4" height="15.0" fill="rgb(217,46,36)" rx="2" ry="2" />
<text  x="941.29" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="871.0" y="501" width="0.2" height="15.0" fill="rgb(232,156,35)" rx="2" ry="2" />
<text  x="873.95" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (6 samples, 0.12%)</title><rect x="693.2" y="597" width="1.4" height="15.0" fill="rgb(206,136,42)" rx="2" ry="2" />
<text  x="696.22" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="76.0" y="485" width="0.2" height="15.0" fill="rgb(242,87,47)" rx="2" ry="2" />
<text  x="78.96" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1091.3" y="469" width="0.2" height="15.0" fill="rgb(228,48,51)" rx="2" ry="2" />
<text  x="1094.28" y="479.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (3 samples, 0.06%)</title><rect x="433.3" y="293" width="0.6" height="15.0" fill="rgb(251,98,18)" rx="2" ry="2" />
<text  x="436.26" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="661.2" y="485" width="0.2" height="15.0" fill="rgb(248,88,7)" rx="2" ry="2" />
<text  x="664.15" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;query::result_set_row, std::allocator&lt;query::result_set_row&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="114.4" y="597" width="0.3" height="15.0" fill="rgb(244,169,41)" rx="2" ry="2" />
<text  x="117.44" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="42.3" y="405" width="0.7" height="15.0" fill="rgb(227,199,20)" rx="2" ry="2" />
<text  x="45.29" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (3 samples, 0.06%)</title><rect x="1058.3" y="453" width="0.7" height="15.0" fill="rgb(208,74,33)" rx="2" ry="2" />
<text  x="1061.30" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="484.6" y="405" width="0.2" height="15.0" fill="rgb(239,191,26)" rx="2" ry="2" />
<text  x="487.57" y="415.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="114.9" y="469" width="0.2" height="15.0" fill="rgb(233,93,29)" rx="2" ry="2" />
<text  x="117.90" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="71.2" y="469" width="0.2" height="15.0" fill="rgb(214,116,53)" rx="2" ry="2" />
<text  x="74.15" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="792.2" y="421" width="0.2" height="15.0" fill="rgb(244,23,54)" rx="2" ry="2" />
<text  x="795.16" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%)</title><rect x="286.0" y="341" width="0.2" height="15.0" fill="rgb(210,72,28)" rx="2" ry="2" />
<text  x="288.99" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="331.6" y="437" width="0.4" height="15.0" fill="rgb(218,112,49)" rx="2" ry="2" />
<text  x="334.57" y="447.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,168 samples, 22.67%)</title><rect x="871.6" y="613" width="267.6" height="15.0" fill="rgb(214,103,54)" rx="2" ry="2" />
<text  x="874.64" y="623.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="138.3" y="485" width="0.2" height="15.0" fill="rgb(227,119,25)" rx="2" ry="2" />
<text  x="141.26" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (10 samples, 0.19%)</title><rect x="365.0" y="293" width="2.3" height="15.0" fill="rgb(236,21,45)" rx="2" ry="2" />
<text  x="368.01" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="291.5" y="325" width="0.2" height="15.0" fill="rgb(251,192,31)" rx="2" ry="2" />
<text  x="294.49" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (12 samples, 0.23%)</title><rect x="280.5" y="293" width="2.7" height="15.0" fill="rgb(253,53,19)" rx="2" ry="2" />
<text  x="283.49" y="303.5" ></text>
</g>
<g >
<title>abstract_type::from_string (7 samples, 0.14%)</title><rect x="69.1" y="485" width="1.6" height="15.0" fill="rgb(240,83,31)" rx="2" ry="2" />
<text  x="72.09" y="495.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1034.5" y="341" width="0.2" height="15.0" fill="rgb(248,9,28)" rx="2" ry="2" />
<text  x="1037.48" y="351.5" ></text>
</g>
<g >
<title>schema_registry::get (8 samples, 0.16%)</title><rect x="974.0" y="469" width="1.9" height="15.0" fill="rgb(231,50,29)" rx="2" ry="2" />
<text  x="977.02" y="479.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="996.5" y="373" width="1.3" height="15.0" fill="rgb(224,1,9)" rx="2" ry="2" />
<text  x="999.46" y="383.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%)</title><rect x="53.5" y="341" width="0.7" height="15.0" fill="rgb(251,41,48)" rx="2" ry="2" />
<text  x="56.52" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="823.5" y="389" width="0.3" height="15.0" fill="rgb(254,139,9)" rx="2" ry="2" />
<text  x="826.54" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="59.7" y="277" width="0.2" height="15.0" fill="rgb(251,194,27)" rx="2" ry="2" />
<text  x="62.70" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="67.3" y="485" width="0.4" height="15.0" fill="rgb(254,128,16)" rx="2" ry="2" />
<text  x="70.26" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="553.0" y="389" width="0.3" height="15.0" fill="rgb(241,182,41)" rx="2" ry="2" />
<text  x="556.05" y="399.5" ></text>
</g>
<g >
<title>cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;::accept_new_row (1 samples, 0.02%)</title><rect x="652.7" y="501" width="0.2" height="15.0" fill="rgb(221,141,2)" rx="2" ry="2" />
<text  x="655.68" y="511.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (12 samples, 0.23%)</title><rect x="874.2" y="437" width="2.7" height="15.0" fill="rgb(233,102,6)" rx="2" ry="2" />
<text  x="877.16" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="933.5" y="485" width="0.4" height="15.0" fill="rgb(250,34,7)" rx="2" ry="2" />
<text  x="936.48" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (6 samples, 0.12%)</title><rect x="633.9" y="533" width="1.4" height="15.0" fill="rgb(231,172,54)" rx="2" ry="2" />
<text  x="636.90" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="674.0" y="613" width="0.2" height="15.0" fill="rgb(224,142,10)" rx="2" ry="2" />
<text  x="676.98" y="623.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%)</title><rect x="1166.9" y="613" width="0.2" height="15.0" fill="rgb(210,21,5)" rx="2" ry="2" />
<text  x="1169.87" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (583 samples, 11.32%)</title><rect x="730.6" y="581" width="133.5" height="15.0" fill="rgb(220,0,30)" rx="2" ry="2" />
<text  x="733.55" y="591.5" >single_node_cql_..</text>
</g>
<g >
<title>atomic_cell_or_collection::copy (83 samples, 1.61%)</title><rect x="237.4" y="229" width="19.0" height="15.0" fill="rgb(227,41,31)" rx="2" ry="2" />
<text  x="240.43" y="239.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (9 samples, 0.17%)</title><rect x="72.5" y="485" width="2.1" height="15.0" fill="rgb(229,68,26)" rx="2" ry="2" />
<text  x="75.53" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1049.8" y="453" width="0.3" height="15.0" fill="rgb(217,8,22)" rx="2" ry="2" />
<text  x="1052.83" y="463.5" ></text>
</g>
<g >
<title>CryptoPP::IteratedHashBase&lt;unsigned int, CryptoPP::HashTransformation&gt;::Update (1 samples, 0.02%)</title><rect x="10.0" y="693" width="0.2" height="15.0" fill="rgb(241,88,28)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="832.2" y="421" width="0.5" height="15.0" fill="rgb(241,222,32)" rx="2" ry="2" />
<text  x="835.24" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (7 samples, 0.14%)</title><rect x="69.1" y="469" width="1.6" height="15.0" fill="rgb(251,216,20)" rx="2" ry="2" />
<text  x="72.09" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1148.3" y="565" width="0.2" height="15.0" fill="rgb(243,198,37)" rx="2" ry="2" />
<text  x="1151.32" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (18 samples, 0.35%)</title><rect x="679.9" y="597" width="4.2" height="15.0" fill="rgb(230,16,48)" rx="2" ry="2" />
<text  x="682.93" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="63.8" y="469" width="0.3" height="15.0" fill="rgb(205,166,43)" rx="2" ry="2" />
<text  x="66.82" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__203 (1 samples, 0.02%)</title><rect x="34.7" y="373" width="0.3" height="15.0" fill="rgb(254,91,29)" rx="2" ry="2" />
<text  x="37.74" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="206.1" y="373" width="0.6" height="15.0" fill="rgb(235,226,21)" rx="2" ry="2" />
<text  x="209.06" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="85.6" y="469" width="0.2" height="15.0" fill="rgb(228,6,3)" rx="2" ry="2" />
<text  x="88.58" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="186.8" y="405" width="0.2" height="15.0" fill="rgb(218,56,50)" rx="2" ry="2" />
<text  x="189.82" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="39.1" y="309" width="0.4" height="15.0" fill="rgb(236,176,44)" rx="2" ry="2" />
<text  x="42.09" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="459.8" y="485" width="0.3" height="15.0" fill="rgb(228,28,6)" rx="2" ry="2" />
<text  x="462.83" y="495.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="1109.1" y="533" width="1.2" height="15.0" fill="rgb(218,89,32)" rx="2" ry="2" />
<text  x="1112.15" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (8 samples, 0.16%)</title><rect x="54.7" y="389" width="1.8" height="15.0" fill="rgb(222,44,36)" rx="2" ry="2" />
<text  x="57.66" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (84 samples, 1.63%)</title><rect x="654.7" y="613" width="19.3" height="15.0" fill="rgb(228,47,34)" rx="2" ry="2" />
<text  x="657.74" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="973.8" y="437" width="0.2" height="15.0" fill="rgb(235,56,32)" rx="2" ry="2" />
<text  x="976.79" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="871.0" y="549" width="0.2" height="15.0" fill="rgb(224,98,22)" rx="2" ry="2" />
<text  x="873.95" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="758.5" y="373" width="0.5" height="15.0" fill="rgb(246,126,24)" rx="2" ry="2" />
<text  x="761.49" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="600.2" y="485" width="0.5" height="15.0" fill="rgb(220,223,25)" rx="2" ry="2" />
<text  x="603.23" y="495.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="618.6" y="517" width="0.2" height="15.0" fill="rgb(220,222,45)" rx="2" ry="2" />
<text  x="621.55" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="615.6" y="469" width="0.9" height="15.0" fill="rgb(218,153,9)" rx="2" ry="2" />
<text  x="618.57" y="479.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (45 samples, 0.87%)</title><rect x="130.7" y="565" width="10.3" height="15.0" fill="rgb(234,202,35)" rx="2" ry="2" />
<text  x="133.70" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="532.4" y="309" width="0.5" height="15.0" fill="rgb(217,91,27)" rx="2" ry="2" />
<text  x="535.43" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (4 samples, 0.08%)</title><rect x="437.4" y="341" width="0.9" height="15.0" fill="rgb(237,25,28)" rx="2" ry="2" />
<text  x="440.38" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="454.8" y="357" width="0.2" height="15.0" fill="rgb(217,207,11)" rx="2" ry="2" />
<text  x="457.79" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%)</title><rect x="364.3" y="277" width="0.7" height="15.0" fill="rgb(250,192,40)" rx="2" ry="2" />
<text  x="367.32" y="287.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_schema_version_known (1 samples, 0.02%)</title><rect x="1128.8" y="357" width="0.3" height="15.0" fill="rgb(242,53,31)" rx="2" ry="2" />
<text  x="1131.85" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (2 samples, 0.04%)</title><rect x="86.0" y="533" width="0.5" height="15.0" fill="rgb(242,29,31)" rx="2" ry="2" />
<text  x="89.04" y="543.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="695.7" y="597" width="0.3" height="15.0" fill="rgb(211,152,32)" rx="2" ry="2" />
<text  x="698.74" y="607.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;schema_mutations&gt; (1 samples, 0.02%)</title><rect x="114.9" y="517" width="0.2" height="15.0" fill="rgb(240,90,23)" rx="2" ry="2" />
<text  x="117.90" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="482.3" y="373" width="0.2" height="15.0" fill="rgb(238,196,46)" rx="2" ry="2" />
<text  x="485.27" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="377.6" y="293" width="0.2" height="15.0" fill="rgb(207,178,35)" rx="2" ry="2" />
<text  x="380.60" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%)</title><rect x="201.7" y="341" width="0.9" height="15.0" fill="rgb(236,84,19)" rx="2" ry="2" />
<text  x="204.70" y="351.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="947.7" y="437" width="0.4" height="15.0" fill="rgb(228,225,8)" rx="2" ry="2" />
<text  x="950.68" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (9 samples, 0.17%)</title><rect x="265.8" y="229" width="2.1" height="15.0" fill="rgb(246,84,18)" rx="2" ry="2" />
<text  x="268.83" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1013.0" y="325" width="1.1" height="15.0" fill="rgb(237,205,10)" rx="2" ry="2" />
<text  x="1015.95" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="249.8" y="181" width="0.2" height="15.0" fill="rgb(232,38,42)" rx="2" ry="2" />
<text  x="252.80" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="57.9" y="357" width="0.2" height="15.0" fill="rgb(242,192,37)" rx="2" ry="2" />
<text  x="60.87" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="705.8" y="597" width="0.2" height="15.0" fill="rgb(218,35,20)" rx="2" ry="2" />
<text  x="708.82" y="607.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%)</title><rect x="70.9" y="501" width="0.5" height="15.0" fill="rgb(223,124,42)" rx="2" ry="2" />
<text  x="73.92" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.2" y="389" width="0.5" height="15.0" fill="rgb(206,166,17)" rx="2" ry="2" />
<text  x="54.23" y="399.5" ></text>
</g>
<g >
<title>TLS init function for db::cdc_token_range_description_type (1 samples, 0.02%)</title><rect x="114.7" y="581" width="0.2" height="15.0" fill="rgb(222,102,41)" rx="2" ry="2" />
<text  x="117.67" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (13 samples, 0.25%)</title><rect x="532.9" y="325" width="3.0" height="15.0" fill="rgb(205,82,14)" rx="2" ry="2" />
<text  x="535.89" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%)</title><rect x="751.9" y="421" width="0.2" height="15.0" fill="rgb(215,162,18)" rx="2" ry="2" />
<text  x="754.85" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (81 samples, 1.57%)</title><rect x="190.3" y="405" width="18.5" height="15.0" fill="rgb(223,59,26)" rx="2" ry="2" />
<text  x="193.25" y="415.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (4 samples, 0.08%)</title><rect x="337.8" y="421" width="0.9" height="15.0" fill="rgb(234,139,36)" rx="2" ry="2" />
<text  x="340.75" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (1 samples, 0.02%)</title><rect x="616.7" y="533" width="0.2" height="15.0" fill="rgb(223,112,40)" rx="2" ry="2" />
<text  x="619.72" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="198.7" y="357" width="0.7" height="15.0" fill="rgb(229,228,28)" rx="2" ry="2" />
<text  x="201.73" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_assign_base (1 samples, 0.02%)</title><rect x="52.8" y="309" width="0.3" height="15.0" fill="rgb(227,43,10)" rx="2" ry="2" />
<text  x="55.83" y="319.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (4 samples, 0.08%)</title><rect x="875.5" y="405" width="0.9" height="15.0" fill="rgb(212,226,31)" rx="2" ry="2" />
<text  x="878.53" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (571 samples, 11.08%)</title><rect x="182.0" y="453" width="130.8" height="15.0" fill="rgb(207,117,41)" rx="2" ry="2" />
<text  x="185.01" y="463.5" >mutation_fragmen..</text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (46 samples, 0.89%)</title><rect x="1019.8" y="325" width="10.6" height="15.0" fill="rgb(231,221,1)" rx="2" ry="2" />
<text  x="1022.83" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.7" y="229" width="0.3" height="15.0" fill="rgb(227,131,15)" rx="2" ry="2" />
<text  x="48.73" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="581" width="0.2" height="15.0" fill="rgb(245,128,15)" rx="2" ry="2" />
<text  x="1170.78" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.4" y="261" width="0.2" height="15.0" fill="rgb(221,10,10)" rx="2" ry="2" />
<text  x="49.42" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.4" y="341" width="0.5" height="15.0" fill="rgb(254,200,46)" rx="2" ry="2" />
<text  x="49.42" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (2 samples, 0.04%)</title><rect x="1137.1" y="309" width="0.5" height="15.0" fill="rgb(218,29,47)" rx="2" ry="2" />
<text  x="1140.09" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%)</title><rect x="53.3" y="357" width="0.2" height="15.0" fill="rgb(217,64,10)" rx="2" ry="2" />
<text  x="56.29" y="367.5" ></text>
</g>
<g >
<title>clustering_row::minimal_external_memory_usage (1 samples, 0.02%)</title><rect x="84.9" y="437" width="0.2" height="15.0" fill="rgb(240,53,37)" rx="2" ry="2" />
<text  x="87.90" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="997.8" y="357" width="0.3" height="15.0" fill="rgb(234,76,8)" rx="2" ry="2" />
<text  x="1000.84" y="367.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="644.7" y="565" width="0.2" height="15.0" fill="rgb(221,183,19)" rx="2" ry="2" />
<text  x="647.66" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="342.3" y="357" width="0.5" height="15.0" fill="rgb(245,33,15)" rx="2" ry="2" />
<text  x="345.33" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="46.4" y="357" width="0.5" height="15.0" fill="rgb(213,71,53)" rx="2" ry="2" />
<text  x="49.42" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (418 samples, 8.11%)</title><rect x="465.8" y="485" width="95.7" height="15.0" fill="rgb(243,19,35)" rx="2" ry="2" />
<text  x="468.78" y="495.5" >std::_Funct..</text>
</g>
<g >
<title>mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="113.8" y="485" width="0.2" height="15.0" fill="rgb(250,146,49)" rx="2" ry="2" />
<text  x="116.75" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="513.9" y="309" width="0.7" height="15.0" fill="rgb(243,124,32)" rx="2" ry="2" />
<text  x="516.88" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="114.0" y="549" width="0.2" height="15.0" fill="rgb(244,172,42)" rx="2" ry="2" />
<text  x="116.98" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="44.6" y="325" width="0.7" height="15.0" fill="rgb(227,152,33)" rx="2" ry="2" />
<text  x="47.58" y="335.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="75.3" y="405" width="0.2" height="15.0" fill="rgb(229,148,31)" rx="2" ry="2" />
<text  x="78.28" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (1 samples, 0.02%)</title><rect x="1168.7" y="581" width="0.2" height="15.0" fill="rgb(252,219,38)" rx="2" ry="2" />
<text  x="1171.70" y="591.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%)</title><rect x="977.0" y="469" width="0.2" height="15.0" fill="rgb(211,12,31)" rx="2" ry="2" />
<text  x="980.00" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="160.9" y="549" width="0.3" height="15.0" fill="rgb(240,61,7)" rx="2" ry="2" />
<text  x="163.94" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (40 samples, 0.78%)</title><rect x="601.6" y="549" width="9.2" height="15.0" fill="rgb(242,194,8)" rx="2" ry="2" />
<text  x="604.60" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="623.4" y="533" width="0.4" height="15.0" fill="rgb(251,203,48)" rx="2" ry="2" />
<text  x="626.36" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="469" width="0.2" height="15.0" fill="rgb(247,47,36)" rx="2" ry="2" />
<text  x="1170.78" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="485.3" y="389" width="0.4" height="15.0" fill="rgb(229,30,50)" rx="2" ry="2" />
<text  x="488.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (3 samples, 0.06%)</title><rect x="620.2" y="549" width="0.6" height="15.0" fill="rgb(245,99,42)" rx="2" ry="2" />
<text  x="623.16" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="772.7" y="437" width="0.2" height="15.0" fill="rgb(250,227,16)" rx="2" ry="2" />
<text  x="775.69" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="74.4" y="437" width="0.2" height="15.0" fill="rgb(219,216,18)" rx="2" ry="2" />
<text  x="77.36" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="541.6" y="437" width="0.2" height="15.0" fill="rgb(223,170,25)" rx="2" ry="2" />
<text  x="544.60" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="658.2" y="565" width="0.2" height="15.0" fill="rgb(217,27,25)" rx="2" ry="2" />
<text  x="661.18" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="870.7" y="613" width="0.3" height="15.0" fill="rgb(250,166,34)" rx="2" ry="2" />
<text  x="873.72" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="26.7" y="293" width="0.2" height="15.0" fill="rgb(231,41,11)" rx="2" ry="2" />
<text  x="29.72" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="79.9" y="437" width="0.9" height="15.0" fill="rgb(230,160,28)" rx="2" ry="2" />
<text  x="82.86" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="286.7" y="357" width="0.2" height="15.0" fill="rgb(254,198,14)" rx="2" ry="2" />
<text  x="289.68" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::reap_kernel_completions_pollfn::poll (1 samples, 0.02%)</title><rect x="91.5" y="629" width="0.3" height="15.0" fill="rgb(229,37,44)" rx="2" ry="2" />
<text  x="94.54" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="593.6" y="453" width="0.4" height="15.0" fill="rgb(220,21,17)" rx="2" ry="2" />
<text  x="596.59" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%)</title><rect x="282.8" y="277" width="0.4" height="15.0" fill="rgb(242,88,29)" rx="2" ry="2" />
<text  x="285.78" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (16 samples, 0.31%)</title><rect x="739.7" y="453" width="3.7" height="15.0" fill="rgb(218,97,24)" rx="2" ry="2" />
<text  x="742.71" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="89.2" y="629" width="0.3" height="15.0" fill="rgb(216,60,33)" rx="2" ry="2" />
<text  x="92.25" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1136.2" y="229" width="0.2" height="15.0" fill="rgb(206,200,43)" rx="2" ry="2" />
<text  x="1139.18" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (2 samples, 0.04%)</title><rect x="26.0" y="357" width="0.5" height="15.0" fill="rgb(219,53,51)" rx="2" ry="2" />
<text  x="29.03" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%)</title><rect x="140.6" y="533" width="0.2" height="15.0" fill="rgb(221,209,15)" rx="2" ry="2" />
<text  x="143.55" y="543.5" ></text>
</g>
<g >
<title>cql3::cf_name::get_column_family (1 samples, 0.02%)</title><rect x="22.1" y="581" width="0.3" height="15.0" fill="rgb(219,120,14)" rx="2" ry="2" />
<text  x="25.14" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.2" y="517" width="0.2" height="15.0" fill="rgb(247,17,17)" rx="2" ry="2" />
<text  x="87.21" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="415.4" y="261" width="0.2" height="15.0" fill="rgb(246,10,15)" rx="2" ry="2" />
<text  x="418.40" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.0" y="469" width="0.2" height="15.0" fill="rgb(219,174,18)" rx="2" ry="2" />
<text  x="67.97" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (3 samples, 0.06%)</title><rect x="632.1" y="501" width="0.7" height="15.0" fill="rgb(253,205,36)" rx="2" ry="2" />
<text  x="635.07" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (516 samples, 10.02%)</title><rect x="337.5" y="437" width="118.2" height="15.0" fill="rgb(212,151,0)" rx="2" ry="2" />
<text  x="340.52" y="447.5" >seastar::inter..</text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.8" y="405" width="0.3" height="15.0" fill="rgb(229,174,21)" rx="2" ry="2" />
<text  x="798.83" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="19.2" y="437" width="0.2" height="15.0" fill="rgb(208,166,46)" rx="2" ry="2" />
<text  x="22.16" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="901.0" y="405" width="0.2" height="15.0" fill="rgb(231,216,0)" rx="2" ry="2" />
<text  x="903.95" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="45.3" y="261" width="0.4" height="15.0" fill="rgb(243,204,8)" rx="2" ry="2" />
<text  x="48.27" y="271.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,724 samples, 91.69%)</title><rect x="87.2" y="709" width="1082.0" height="15.0" fill="rgb(249,112,8)" rx="2" ry="2" />
<text  x="90.19" y="719.5" >seastar::app_template::run</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="324.2" y="405" width="0.5" height="15.0" fill="rgb(225,44,38)" rx="2" ry="2" />
<text  x="327.24" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (3 samples, 0.06%)</title><rect x="1138.0" y="405" width="0.7" height="15.0" fill="rgb(252,66,35)" rx="2" ry="2" />
<text  x="1141.01" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1091.7" y="485" width="0.3" height="15.0" fill="rgb(230,200,31)" rx="2" ry="2" />
<text  x="1094.74" y="495.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (28 samples, 0.54%)</title><rect x="917.4" y="485" width="6.5" height="15.0" fill="rgb(240,44,53)" rx="2" ry="2" />
<text  x="920.45" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="51.7" y="341" width="0.4" height="15.0" fill="rgb(222,222,54)" rx="2" ry="2" />
<text  x="54.68" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="648.6" y="581" width="0.4" height="15.0" fill="rgb(247,99,27)" rx="2" ry="2" />
<text  x="651.56" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="43.7" y="421" width="0.4" height="15.0" fill="rgb(217,212,25)" rx="2" ry="2" />
<text  x="46.67" y="431.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::expr::expression::impl*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="54.2" y="261" width="0.2" height="15.0" fill="rgb(235,144,36)" rx="2" ry="2" />
<text  x="57.20" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="79.6" y="485" width="0.3" height="15.0" fill="rgb(217,227,3)" rx="2" ry="2" />
<text  x="82.63" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (62 samples, 1.20%)</title><rect x="24.0" y="485" width="14.2" height="15.0" fill="rgb(213,185,23)" rx="2" ry="2" />
<text  x="26.97" y="495.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1169.6" y="741" width="0.9" height="15.0" fill="rgb(246,17,29)" rx="2" ry="2" />
<text  x="1172.62" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="780.5" y="469" width="0.2" height="15.0" fill="rgb(217,187,20)" rx="2" ry="2" />
<text  x="783.48" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="954.8" y="485" width="0.2" height="15.0" fill="rgb(246,165,9)" rx="2" ry="2" />
<text  x="957.78" y="495.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="115.6" y="357" width="0.2" height="15.0" fill="rgb(253,139,15)" rx="2" ry="2" />
<text  x="118.59" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="301.3" y="309" width="0.3" height="15.0" fill="rgb(245,154,54)" rx="2" ry="2" />
<text  x="304.34" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="277.3" y="293" width="0.2" height="15.0" fill="rgb(252,217,47)" rx="2" ry="2" />
<text  x="280.29" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="325.8" y="373" width="2.3" height="15.0" fill="rgb(227,101,54)" rx="2" ry="2" />
<text  x="328.84" y="383.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="70.5" y="421" width="0.2" height="15.0" fill="rgb(240,39,23)" rx="2" ry="2" />
<text  x="73.47" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1139.2" y="581" width="0.2" height="15.0" fill="rgb(232,37,39)" rx="2" ry="2" />
<text  x="1142.15" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1117.6" y="517" width="0.3" height="15.0" fill="rgb(241,66,4)" rx="2" ry="2" />
<text  x="1120.62" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1092.9" y="453" width="0.2" height="15.0" fill="rgb(206,211,54)" rx="2" ry="2" />
<text  x="1095.89" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (2 samples, 0.04%)</title><rect x="1045.2" y="469" width="0.5" height="15.0" fill="rgb(250,48,21)" rx="2" ry="2" />
<text  x="1048.25" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="561.3" y="453" width="0.2" height="15.0" fill="rgb(237,75,30)" rx="2" ry="2" />
<text  x="564.29" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.7" y="485" width="0.2" height="15.0" fill="rgb(232,77,29)" rx="2" ry="2" />
<text  x="70.72" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (102 samples, 1.98%)</title><rect x="796.3" y="405" width="23.3" height="15.0" fill="rgb(220,94,28)" rx="2" ry="2" />
<text  x="799.28" y="415.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1118.1" y="533" width="0.2" height="15.0" fill="rgb(228,69,9)" rx="2" ry="2" />
<text  x="1121.08" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%)</title><rect x="945.4" y="501" width="1.4" height="15.0" fill="rgb(226,7,17)" rx="2" ry="2" />
<text  x="948.39" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (46 samples, 0.89%)</title><rect x="47.1" y="437" width="10.5" height="15.0" fill="rgb(220,143,18)" rx="2" ry="2" />
<text  x="50.10" y="447.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (1 samples, 0.02%)</title><rect x="456.4" y="469" width="0.2" height="15.0" fill="rgb(254,77,22)" rx="2" ry="2" />
<text  x="459.39" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, data_value&gt; (1 samples, 0.02%)</title><rect x="115.1" y="405" width="0.3" height="15.0" fill="rgb(210,103,43)" rx="2" ry="2" />
<text  x="118.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="75.0" y="405" width="0.3" height="15.0" fill="rgb(254,67,20)" rx="2" ry="2" />
<text  x="78.05" y="415.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="45.3" y="277" width="0.4" height="15.0" fill="rgb(206,117,21)" rx="2" ry="2" />
<text  x="48.27" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="1150.4" y="533" width="1.1" height="15.0" fill="rgb(241,36,24)" rx="2" ry="2" />
<text  x="1153.38" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%)</title><rect x="271.1" y="277" width="0.9" height="15.0" fill="rgb(254,151,36)" rx="2" ry="2" />
<text  x="274.10" y="287.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="481.8" y="389" width="0.7" height="15.0" fill="rgb(243,109,50)" rx="2" ry="2" />
<text  x="484.82" y="399.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="1154.7" y="549" width="1.4" height="15.0" fill="rgb(217,143,16)" rx="2" ry="2" />
<text  x="1157.73" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="653.6" y="597" width="0.2" height="15.0" fill="rgb(209,136,3)" rx="2" ry="2" />
<text  x="656.59" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="862.9" y="517" width="0.5" height="15.0" fill="rgb(208,90,8)" rx="2" ry="2" />
<text  x="865.93" y="527.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.1" y="325" width="0.2" height="15.0" fill="rgb(228,175,28)" rx="2" ry="2" />
<text  x="878.07" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (43 samples, 0.83%)</title><rect x="27.4" y="421" width="9.9" height="15.0" fill="rgb(216,24,34)" rx="2" ry="2" />
<text  x="30.41" y="431.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="677.4" y="581" width="0.2" height="15.0" fill="rgb(221,186,27)" rx="2" ry="2" />
<text  x="680.41" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="718.9" y="549" width="0.2" height="15.0" fill="rgb(207,145,3)" rx="2" ry="2" />
<text  x="721.87" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1044.1" y="405" width="0.2" height="15.0" fill="rgb(215,90,4)" rx="2" ry="2" />
<text  x="1047.10" y="415.5" ></text>
</g>
<g >
<title>schema::schema (3 samples, 0.06%)</title><rect x="115.4" y="485" width="0.6" height="15.0" fill="rgb(214,180,12)" rx="2" ry="2" />
<text  x="118.36" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="44.8" y="277" width="0.5" height="15.0" fill="rgb(216,225,54)" rx="2" ry="2" />
<text  x="47.81" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (2 samples, 0.04%)</title><rect x="354.5" y="309" width="0.4" height="15.0" fill="rgb(221,121,1)" rx="2" ry="2" />
<text  x="357.47" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (57 samples, 1.11%)</title><rect x="507.2" y="405" width="13.1" height="15.0" fill="rgb(234,100,32)" rx="2" ry="2" />
<text  x="510.24" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1155.4" y="517" width="0.7" height="15.0" fill="rgb(220,47,21)" rx="2" ry="2" />
<text  x="1158.42" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="817.1" y="357" width="0.3" height="15.0" fill="rgb(223,203,26)" rx="2" ry="2" />
<text  x="820.13" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="644.0" y="565" width="0.2" height="15.0" fill="rgb(232,54,21)" rx="2" ry="2" />
<text  x="646.98" y="575.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="299.3" y="341" width="0.4" height="15.0" fill="rgb(228,38,44)" rx="2" ry="2" />
<text  x="302.27" y="351.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (3 samples, 0.06%)</title><rect x="22.6" y="453" width="0.7" height="15.0" fill="rgb(248,89,8)" rx="2" ry="2" />
<text  x="25.60" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (331 samples, 6.42%)</title><rect x="212.2" y="373" width="75.9" height="15.0" fill="rgb(242,217,50)" rx="2" ry="2" />
<text  x="215.24" y="383.5" >partitio..</text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="862.0" y="533" width="1.4" height="15.0" fill="rgb(229,126,1)" rx="2" ry="2" />
<text  x="865.02" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (13 samples, 0.25%)</title><rect x="79.2" y="597" width="2.9" height="15.0" fill="rgb(217,124,44)" rx="2" ry="2" />
<text  x="82.17" y="607.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="709" width="0.3" height="15.0" fill="rgb(233,178,12)" rx="2" ry="2" />
<text  x="86.52" y="719.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="312.8" y="453" width="0.4" height="15.0" fill="rgb(235,121,36)" rx="2" ry="2" />
<text  x="315.79" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%)</title><rect x="168.7" y="517" width="0.7" height="15.0" fill="rgb(250,133,5)" rx="2" ry="2" />
<text  x="171.72" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="229.2" y="309" width="0.2" height="15.0" fill="rgb(252,116,26)" rx="2" ry="2" />
<text  x="232.19" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="51.7" y="261" width="0.2" height="15.0" fill="rgb(245,132,8)" rx="2" ry="2" />
<text  x="54.68" y="271.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="113.1" y="421" width="0.2" height="15.0" fill="rgb(247,162,48)" rx="2" ry="2" />
<text  x="116.07" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%)</title><rect x="44.6" y="405" width="0.7" height="15.0" fill="rgb(236,51,52)" rx="2" ry="2" />
<text  x="47.58" y="415.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="33.8" y="357" width="0.2" height="15.0" fill="rgb(221,5,24)" rx="2" ry="2" />
<text  x="36.82" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="19.2" y="277" width="0.2" height="15.0" fill="rgb(232,140,45)" rx="2" ry="2" />
<text  x="22.16" y="287.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%)</title><rect x="114.4" y="517" width="0.3" height="15.0" fill="rgb(249,109,31)" rx="2" ry="2" />
<text  x="117.44" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%)</title><rect x="663.2" y="517" width="1.2" height="15.0" fill="rgb(221,135,45)" rx="2" ry="2" />
<text  x="666.21" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="670.8" y="597" width="0.2" height="15.0" fill="rgb(213,172,22)" rx="2" ry="2" />
<text  x="673.77" y="607.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="972.0" y="469" width="0.2" height="15.0" fill="rgb(235,169,19)" rx="2" ry="2" />
<text  x="974.96" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="631.6" y="485" width="0.2" height="15.0" fill="rgb(211,229,34)" rx="2" ry="2" />
<text  x="634.61" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%)</title><rect x="19.6" y="629" width="0.2" height="15.0" fill="rgb(232,119,50)" rx="2" ry="2" />
<text  x="22.62" y="639.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="686.1" y="581" width="0.7" height="15.0" fill="rgb(208,227,11)" rx="2" ry="2" />
<text  x="689.12" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%)</title><rect x="1120.6" y="565" width="8.7" height="15.0" fill="rgb(245,222,6)" rx="2" ry="2" />
<text  x="1123.60" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.14%)</title><rect x="24.4" y="373" width="1.6" height="15.0" fill="rgb(236,148,8)" rx="2" ry="2" />
<text  x="27.43" y="383.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="115.1" y="469" width="0.3" height="15.0" fill="rgb(231,207,8)" rx="2" ry="2" />
<text  x="118.13" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (6 samples, 0.12%)</title><rect x="52.8" y="373" width="1.4" height="15.0" fill="rgb(244,216,20)" rx="2" ry="2" />
<text  x="55.83" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="26.0" y="373" width="1.2" height="15.0" fill="rgb(217,65,17)" rx="2" ry="2" />
<text  x="29.03" y="383.5" ></text>
</g>
<g >
<title>database::find_uuid (12 samples, 0.23%)</title><rect x="831.3" y="469" width="2.8" height="15.0" fill="rgb(237,16,0)" rx="2" ry="2" />
<text  x="834.33" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (1 samples, 0.02%)</title><rect x="110.1" y="613" width="0.2" height="15.0" fill="rgb(217,16,44)" rx="2" ry="2" />
<text  x="113.09" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (3 samples, 0.06%)</title><rect x="529.7" y="373" width="0.7" height="15.0" fill="rgb(236,15,5)" rx="2" ry="2" />
<text  x="532.69" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="44.6" y="309" width="0.7" height="15.0" fill="rgb(249,201,21)" rx="2" ry="2" />
<text  x="47.58" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.23%)</title><rect x="300.2" y="341" width="2.7" height="15.0" fill="rgb(221,197,43)" rx="2" ry="2" />
<text  x="303.19" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="843.2" y="549" width="0.5" height="15.0" fill="rgb(236,214,35)" rx="2" ry="2" />
<text  x="846.24" y="559.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.04%)</title><rect x="1189.5" y="709" width="0.5" height="15.0" fill="rgb(235,159,3)" rx="2" ry="2" />
<text  x="1192.54" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1138.9" y="597" width="0.3" height="15.0" fill="rgb(229,10,52)" rx="2" ry="2" />
<text  x="1141.92" y="607.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="115.1" y="437" width="0.3" height="15.0" fill="rgb(219,220,26)" rx="2" ry="2" />
<text  x="118.13" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (29 samples, 0.56%)</title><rect x="476.3" y="405" width="6.7" height="15.0" fill="rgb(248,125,42)" rx="2" ry="2" />
<text  x="479.32" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="342.8" y="357" width="0.2" height="15.0" fill="rgb(234,84,44)" rx="2" ry="2" />
<text  x="345.79" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="517" width="0.2" height="15.0" fill="rgb(230,68,16)" rx="2" ry="2" />
<text  x="1170.78" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="166.0" y="533" width="0.2" height="15.0" fill="rgb(214,146,14)" rx="2" ry="2" />
<text  x="168.97" y="543.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="652.7" y="517" width="0.2" height="15.0" fill="rgb(250,184,36)" rx="2" ry="2" />
<text  x="655.68" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1144.9" y="597" width="0.2" height="15.0" fill="rgb(219,12,29)" rx="2" ry="2" />
<text  x="1147.88" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="54.9" y="325" width="0.7" height="15.0" fill="rgb(230,213,33)" rx="2" ry="2" />
<text  x="57.89" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="1138.2" y="373" width="0.5" height="15.0" fill="rgb(254,132,8)" rx="2" ry="2" />
<text  x="1141.24" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1127.0" y="309" width="0.2" height="15.0" fill="rgb(210,152,30)" rx="2" ry="2" />
<text  x="1130.01" y="319.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (13 samples, 0.25%)</title><rect x="68.9" y="533" width="2.9" height="15.0" fill="rgb(238,113,22)" rx="2" ry="2" />
<text  x="71.86" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1133.2" y="389" width="0.2" height="15.0" fill="rgb(216,193,0)" rx="2" ry="2" />
<text  x="1136.20" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="452.7" y="421" width="3.0" height="15.0" fill="rgb(246,13,48)" rx="2" ry="2" />
<text  x="455.73" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="104.1" y="533" width="0.5" height="15.0" fill="rgb(212,28,26)" rx="2" ry="2" />
<text  x="107.13" y="543.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%)</title><rect x="1168.5" y="581" width="0.2" height="15.0" fill="rgb(213,74,31)" rx="2" ry="2" />
<text  x="1171.47" y="591.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="115.1" y="453" width="0.3" height="15.0" fill="rgb(213,131,4)" rx="2" ry="2" />
<text  x="118.13" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="679.5" y="581" width="0.2" height="15.0" fill="rgb(253,151,9)" rx="2" ry="2" />
<text  x="682.48" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.7" y="501" width="0.2" height="15.0" fill="rgb(227,44,14)" rx="2" ry="2" />
<text  x="70.72" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="600.9" y="485" width="0.2" height="15.0" fill="rgb(241,178,14)" rx="2" ry="2" />
<text  x="603.92" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1107.8" y="485" width="0.2" height="15.0" fill="rgb(217,137,42)" rx="2" ry="2" />
<text  x="1110.78" y="495.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_marker_view, ser::expiring_marker_view, ser::dead_marker_view, ser::no_marker_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%)</title><rect x="1122.0" y="357" width="0.2" height="15.0" fill="rgb(214,95,8)" rx="2" ry="2" />
<text  x="1124.98" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="51.7" y="229" width="0.2" height="15.0" fill="rgb(224,99,41)" rx="2" ry="2" />
<text  x="54.68" y="239.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::detach_service_level_statement*, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="64.1" y="421" width="0.2" height="15.0" fill="rgb(239,179,32)" rx="2" ry="2" />
<text  x="67.05" y="431.5" ></text>
</g>
<g >
<title>auth::get_permissions (3 samples, 0.06%)</title><rect x="791.2" y="437" width="0.7" height="15.0" fill="rgb(250,99,40)" rx="2" ry="2" />
<text  x="794.25" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (14 samples, 0.27%)</title><rect x="873.9" y="453" width="3.2" height="15.0" fill="rgb(230,95,23)" rx="2" ry="2" />
<text  x="876.93" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::component_type, std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::component_type&gt;, seastar::enum_hash&lt;sstables::component_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="644.4" y="501" width="0.3" height="15.0" fill="rgb(212,153,6)" rx="2" ry="2" />
<text  x="647.43" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="721.8" y="389" width="0.3" height="15.0" fill="rgb(208,169,12)" rx="2" ry="2" />
<text  x="724.85" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (5 samples, 0.10%)</title><rect x="456.6" y="469" width="1.2" height="15.0" fill="rgb(244,225,29)" rx="2" ry="2" />
<text  x="459.62" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (1 samples, 0.02%)</title><rect x="434.9" y="341" width="0.2" height="15.0" fill="rgb(233,17,39)" rx="2" ry="2" />
<text  x="437.86" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="992.3" y="357" width="0.3" height="15.0" fill="rgb(224,139,33)" rx="2" ry="2" />
<text  x="995.34" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="994.9" y="437" width="0.2" height="15.0" fill="rgb(218,226,19)" rx="2" ry="2" />
<text  x="997.86" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="544.6" y="373" width="0.4" height="15.0" fill="rgb(218,187,46)" rx="2" ry="2" />
<text  x="547.57" y="383.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::full_name (1 samples, 0.02%)</title><rect x="116.0" y="421" width="0.3" height="15.0" fill="rgb(234,153,46)" rx="2" ry="2" />
<text  x="119.04" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="828.8" y="485" width="0.5" height="15.0" fill="rgb(205,67,32)" rx="2" ry="2" />
<text  x="831.81" y="495.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (31 samples, 0.60%)</title><rect x="1072.3" y="357" width="7.1" height="15.0" fill="rgb(246,101,31)" rx="2" ry="2" />
<text  x="1075.27" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="270.4" y="293" width="0.2" height="15.0" fill="rgb(213,189,26)" rx="2" ry="2" />
<text  x="273.42" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (50 samples, 0.97%)</title><rect x="844.4" y="549" width="11.4" height="15.0" fill="rgb(220,228,17)" rx="2" ry="2" />
<text  x="847.38" y="559.5" ></text>
</g>
<g >
<title>cql3::prepare_context::prepare_context (1 samples, 0.02%)</title><rect x="68.4" y="565" width="0.2" height="15.0" fill="rgb(246,141,4)" rx="2" ry="2" />
<text  x="71.40" y="575.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="43.4" y="437" width="0.3" height="15.0" fill="rgb(211,98,20)" rx="2" ry="2" />
<text  x="46.44" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="64.5" y="469" width="0.2" height="15.0" fill="rgb(238,166,49)" rx="2" ry="2" />
<text  x="67.51" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%)</title><rect x="188.4" y="405" width="0.5" height="15.0" fill="rgb(249,142,46)" rx="2" ry="2" />
<text  x="191.42" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="818.3" y="357" width="0.2" height="15.0" fill="rgb(209,55,53)" rx="2" ry="2" />
<text  x="821.27" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="1130.2" y="421" width="3.2" height="15.0" fill="rgb(234,22,8)" rx="2" ry="2" />
<text  x="1133.22" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,257 samples, 43.81%)</title><rect x="123.4" y="581" width="516.9" height="15.0" fill="rgb(207,29,9)" rx="2" ry="2" />
<text  x="126.37" y="591.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (6 samples, 0.12%)</title><rect x="672.4" y="549" width="1.4" height="15.0" fill="rgb(207,102,15)" rx="2" ry="2" />
<text  x="675.38" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%)</title><rect x="383.8" y="293" width="0.2" height="15.0" fill="rgb(254,129,49)" rx="2" ry="2" />
<text  x="386.79" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (6 samples, 0.12%)</title><rect x="666.4" y="565" width="1.4" height="15.0" fill="rgb(226,156,33)" rx="2" ry="2" />
<text  x="669.42" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="18.9" y="677" width="0.3" height="15.0" fill="rgb(252,226,21)" rx="2" ry="2" />
<text  x="21.93" y="687.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (3 samples, 0.06%)</title><rect x="925.5" y="469" width="0.6" height="15.0" fill="rgb(215,162,47)" rx="2" ry="2" />
<text  x="928.46" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (49 samples, 0.95%)</title><rect x="527.2" y="389" width="11.2" height="15.0" fill="rgb(206,54,26)" rx="2" ry="2" />
<text  x="530.17" y="399.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="362.9" y="277" width="0.3" height="15.0" fill="rgb(219,223,20)" rx="2" ry="2" />
<text  x="365.95" y="287.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (1 samples, 0.02%)</title><rect x="873.7" y="453" width="0.2" height="15.0" fill="rgb(237,201,26)" rx="2" ry="2" />
<text  x="876.70" y="463.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (3 samples, 0.06%)</title><rect x="22.6" y="469" width="0.7" height="15.0" fill="rgb(249,38,22)" rx="2" ry="2" />
<text  x="25.60" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%)</title><rect x="779.8" y="485" width="0.2" height="15.0" fill="rgb(217,77,35)" rx="2" ry="2" />
<text  x="782.79" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,724 samples, 91.69%)</title><rect x="87.2" y="677" width="1082.0" height="15.0" fill="rgb(227,89,21)" rx="2" ry="2" />
<text  x="90.19" y="687.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1027.4" y="229" width="0.2" height="15.0" fill="rgb(232,81,39)" rx="2" ry="2" />
<text  x="1030.38" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="36.6" y="373" width="0.2" height="15.0" fill="rgb(252,165,5)" rx="2" ry="2" />
<text  x="39.57" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%)</title><rect x="113.1" y="549" width="0.4" height="15.0" fill="rgb(228,97,19)" rx="2" ry="2" />
<text  x="116.07" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="854.9" y="501" width="0.2" height="15.0" fill="rgb(243,37,21)" rx="2" ry="2" />
<text  x="857.92" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (22 samples, 0.43%)</title><rect x="981.3" y="437" width="5.1" height="15.0" fill="rgb(234,36,19)" rx="2" ry="2" />
<text  x="984.35" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="51.9" y="261" width="0.2" height="15.0" fill="rgb(229,103,31)" rx="2" ry="2" />
<text  x="54.91" y="271.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="44.6" y="261" width="0.2" height="15.0" fill="rgb(237,203,54)" rx="2" ry="2" />
<text  x="47.58" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="1167.8" y="261" width="0.2" height="15.0" fill="rgb(251,202,33)" rx="2" ry="2" />
<text  x="1170.78" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::shared_ptr_count_for&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="652.7" y="581" width="0.2" height="15.0" fill="rgb(244,108,36)" rx="2" ry="2" />
<text  x="655.68" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (6 samples, 0.12%)</title><rect x="274.8" y="261" width="1.3" height="15.0" fill="rgb(226,54,54)" rx="2" ry="2" />
<text  x="277.77" y="271.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="114.0" y="437" width="0.2" height="15.0" fill="rgb(208,84,30)" rx="2" ry="2" />
<text  x="116.98" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (11 samples, 0.21%)</title><rect x="44.6" y="421" width="2.5" height="15.0" fill="rgb(210,132,0)" rx="2" ry="2" />
<text  x="47.58" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="26.7" y="277" width="0.2" height="15.0" fill="rgb(237,125,25)" rx="2" ry="2" />
<text  x="29.72" y="287.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="81.2" y="533" width="0.3" height="15.0" fill="rgb(219,206,32)" rx="2" ry="2" />
<text  x="84.23" y="543.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%)</title><rect x="19.2" y="373" width="0.2" height="15.0" fill="rgb(209,153,14)" rx="2" ry="2" />
<text  x="22.16" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="977.7" y="469" width="0.2" height="15.0" fill="rgb(252,228,17)" rx="2" ry="2" />
<text  x="980.68" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="289.0" y="341" width="0.4" height="15.0" fill="rgb(231,119,37)" rx="2" ry="2" />
<text  x="291.97" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.1" y="309" width="0.2" height="15.0" fill="rgb(225,121,21)" rx="2" ry="2" />
<text  x="878.07" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (4 samples, 0.08%)</title><rect x="872.3" y="485" width="0.9" height="15.0" fill="rgb(230,53,41)" rx="2" ry="2" />
<text  x="875.33" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (107 samples, 2.08%)</title><rect x="495.8" y="437" width="24.5" height="15.0" fill="rgb(251,187,36)" rx="2" ry="2" />
<text  x="498.79" y="447.5" >d..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="533" width="9.4" height="15.0" fill="rgb(231,29,52)" rx="2" ry="2" />
<text  x="1132.31" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (11 samples, 0.21%)</title><rect x="840.0" y="549" width="2.6" height="15.0" fill="rgb(219,93,49)" rx="2" ry="2" />
<text  x="843.03" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%)</title><rect x="37.0" y="389" width="0.3" height="15.0" fill="rgb(213,187,38)" rx="2" ry="2" />
<text  x="40.03" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (4 samples, 0.08%)</title><rect x="755.5" y="405" width="0.9" height="15.0" fill="rgb(206,77,6)" rx="2" ry="2" />
<text  x="758.52" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="836.1" y="437" width="0.3" height="15.0" fill="rgb(215,52,31)" rx="2" ry="2" />
<text  x="839.14" y="447.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="19.2" y="661" width="0.2" height="15.0" fill="rgb(216,81,21)" rx="2" ry="2" />
<text  x="22.16" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="67.7" y="437" width="0.2" height="15.0" fill="rgb(214,76,52)" rx="2" ry="2" />
<text  x="70.72" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="44.6" y="341" width="0.7" height="15.0" fill="rgb(222,73,2)" rx="2" ry="2" />
<text  x="47.58" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (5 samples, 0.10%)</title><rect x="925.5" y="501" width="1.1" height="15.0" fill="rgb(220,48,24)" rx="2" ry="2" />
<text  x="928.46" y="511.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (2 samples, 0.04%)</title><rect x="1139.4" y="613" width="0.4" height="15.0" fill="rgb(208,82,24)" rx="2" ry="2" />
<text  x="1142.38" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%)</title><rect x="187.0" y="421" width="0.5" height="15.0" fill="rgb(231,28,25)" rx="2" ry="2" />
<text  x="190.05" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="79.2" y="517" width="0.2" height="15.0" fill="rgb(250,225,43)" rx="2" ry="2" />
<text  x="82.17" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%)</title><rect x="52.8" y="325" width="0.3" height="15.0" fill="rgb(210,145,15)" rx="2" ry="2" />
<text  x="55.83" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="86.0" y="501" width="0.3" height="15.0" fill="rgb(231,167,32)" rx="2" ry="2" />
<text  x="89.04" y="511.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (43 samples, 0.83%)</title><rect x="733.5" y="549" width="9.9" height="15.0" fill="rgb(211,132,2)" rx="2" ry="2" />
<text  x="736.53" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="146.5" y="549" width="0.2" height="15.0" fill="rgb(254,139,37)" rx="2" ry="2" />
<text  x="149.51" y="559.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="707.9" y="581" width="0.2" height="15.0" fill="rgb(209,112,9)" rx="2" ry="2" />
<text  x="710.88" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="61.1" y="229" width="0.2" height="15.0" fill="rgb(235,118,49)" rx="2" ry="2" />
<text  x="64.08" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="946.1" y="453" width="0.2" height="15.0" fill="rgb(206,76,28)" rx="2" ry="2" />
<text  x="949.08" y="463.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (3 samples, 0.06%)</title><rect x="1124.0" y="325" width="0.7" height="15.0" fill="rgb(235,203,10)" rx="2" ry="2" />
<text  x="1127.04" y="335.5" ></text>
</g>
<g >
<title>make_set_type_name (1 samples, 0.02%)</title><rect x="114.7" y="501" width="0.2" height="15.0" fill="rgb(250,85,0)" rx="2" ry="2" />
<text  x="117.67" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints (1 samples, 0.02%)</title><rect x="1130.7" y="373" width="0.2" height="15.0" fill="rgb(242,72,39)" rx="2" ry="2" />
<text  x="1133.68" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="64.1" y="469" width="0.2" height="15.0" fill="rgb(243,144,30)" rx="2" ry="2" />
<text  x="67.05" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="51.0" y="405" width="0.2" height="15.0" fill="rgb(206,196,9)" rx="2" ry="2" />
<text  x="54.00" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="78.9" y="581" width="0.3" height="15.0" fill="rgb(220,25,24)" rx="2" ry="2" />
<text  x="81.94" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="293" width="0.5" height="15.0" fill="rgb(252,181,16)" rx="2" ry="2" />
<text  x="56.75" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (14 samples, 0.27%)</title><rect x="135.5" y="517" width="3.2" height="15.0" fill="rgb(228,164,7)" rx="2" ry="2" />
<text  x="138.51" y="527.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="42.1" y="437" width="0.2" height="15.0" fill="rgb(209,74,32)" rx="2" ry="2" />
<text  x="45.07" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="59.7" y="245" width="0.2" height="15.0" fill="rgb(229,191,4)" rx="2" ry="2" />
<text  x="62.70" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.7" y="469" width="0.2" height="15.0" fill="rgb(231,62,29)" rx="2" ry="2" />
<text  x="70.72" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="830.0" y="421" width="1.1" height="15.0" fill="rgb(254,55,21)" rx="2" ry="2" />
<text  x="832.95" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="325" width="0.2" height="15.0" fill="rgb(222,123,9)" rx="2" ry="2" />
<text  x="64.08" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="525.6" y="389" width="0.6" height="15.0" fill="rgb(212,93,18)" rx="2" ry="2" />
<text  x="528.56" y="399.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="128.0" y="565" width="0.4" height="15.0" fill="rgb(232,21,43)" rx="2" ry="2" />
<text  x="130.95" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="834.1" y="453" width="2.3" height="15.0" fill="rgb(235,166,36)" rx="2" ry="2" />
<text  x="837.08" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (15 samples, 0.29%)</title><rect x="102.8" y="565" width="3.4" height="15.0" fill="rgb(234,171,40)" rx="2" ry="2" />
<text  x="105.76" y="575.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1111.0" y="517" width="2.0" height="15.0" fill="rgb(205,115,17)" rx="2" ry="2" />
<text  x="1113.98" y="527.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (28 samples, 0.54%)</title><rect x="754.4" y="485" width="6.4" height="15.0" fill="rgb(253,88,13)" rx="2" ry="2" />
<text  x="757.37" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1111.0" y="501" width="2.0" height="15.0" fill="rgb(252,146,19)" rx="2" ry="2" />
<text  x="1113.98" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="143.3" y="565" width="0.2" height="15.0" fill="rgb(231,67,25)" rx="2" ry="2" />
<text  x="146.30" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="721.8" y="613" width="0.3" height="15.0" fill="rgb(240,57,1)" rx="2" ry="2" />
<text  x="724.85" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="453" width="0.2" height="15.0" fill="rgb(231,142,19)" rx="2" ry="2" />
<text  x="699.20" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (68 samples, 1.32%)</title><rect x="42.3" y="469" width="15.6" height="15.0" fill="rgb(227,29,1)" rx="2" ry="2" />
<text  x="45.29" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="141.2" y="565" width="0.3" height="15.0" fill="rgb(218,74,25)" rx="2" ry="2" />
<text  x="144.24" y="575.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%)</title><rect x="679.5" y="565" width="0.2" height="15.0" fill="rgb(205,14,36)" rx="2" ry="2" />
<text  x="682.48" y="575.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%)</title><rect x="617.9" y="517" width="0.4" height="15.0" fill="rgb(253,201,5)" rx="2" ry="2" />
<text  x="620.86" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="488.2" y="373" width="0.3" height="15.0" fill="rgb(225,113,2)" rx="2" ry="2" />
<text  x="491.23" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="18.2" y="661" width="0.3" height="15.0" fill="rgb(227,104,36)" rx="2" ry="2" />
<text  x="21.25" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1067.5" y="405" width="0.2" height="15.0" fill="rgb(229,78,40)" rx="2" ry="2" />
<text  x="1070.47" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="721.8" y="469" width="0.3" height="15.0" fill="rgb(234,59,45)" rx="2" ry="2" />
<text  x="724.85" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (16 samples, 0.31%)</title><rect x="907.8" y="469" width="3.7" height="15.0" fill="rgb(234,192,43)" rx="2" ry="2" />
<text  x="910.83" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (2 samples, 0.04%)</title><rect x="336.1" y="485" width="0.5" height="15.0" fill="rgb(208,168,7)" rx="2" ry="2" />
<text  x="339.15" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.12%)</title><rect x="377.8" y="293" width="1.4" height="15.0" fill="rgb(254,123,19)" rx="2" ry="2" />
<text  x="380.83" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="943.3" y="437" width="0.7" height="15.0" fill="rgb(206,189,38)" rx="2" ry="2" />
<text  x="946.33" y="447.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(232,228,45)" rx="2" ry="2" />
<text  x="13.69" y="607.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (38 samples, 0.74%)</title><rect x="734.7" y="501" width="8.7" height="15.0" fill="rgb(238,21,21)" rx="2" ry="2" />
<text  x="737.67" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="84.4" y="501" width="0.3" height="15.0" fill="rgb(228,58,19)" rx="2" ry="2" />
<text  x="87.44" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.23%)</title><rect x="300.2" y="357" width="2.7" height="15.0" fill="rgb(252,127,49)" rx="2" ry="2" />
<text  x="303.19" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (2 samples, 0.04%)</title><rect x="585.8" y="405" width="0.5" height="15.0" fill="rgb(208,182,54)" rx="2" ry="2" />
<text  x="588.80" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="459.6" y="485" width="0.2" height="15.0" fill="rgb(238,48,44)" rx="2" ry="2" />
<text  x="462.60" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="567.5" y="469" width="1.1" height="15.0" fill="rgb(220,144,35)" rx="2" ry="2" />
<text  x="570.48" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (22 samples, 0.43%)</title><rect x="581.9" y="421" width="5.0" height="15.0" fill="rgb(210,7,8)" rx="2" ry="2" />
<text  x="584.91" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (59 samples, 1.15%)</title><rect x="1147.9" y="597" width="13.5" height="15.0" fill="rgb(236,18,28)" rx="2" ry="2" />
<text  x="1150.86" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (3 samples, 0.06%)</title><rect x="480.9" y="373" width="0.7" height="15.0" fill="rgb(253,166,37)" rx="2" ry="2" />
<text  x="483.90" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (16 samples, 0.31%)</title><rect x="658.4" y="565" width="3.7" height="15.0" fill="rgb(253,79,52)" rx="2" ry="2" />
<text  x="661.40" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="61.5" y="437" width="0.3" height="15.0" fill="rgb(207,84,10)" rx="2" ry="2" />
<text  x="64.53" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="526.9" y="373" width="0.3" height="15.0" fill="rgb(236,216,33)" rx="2" ry="2" />
<text  x="529.94" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="830.9" y="405" width="0.2" height="15.0" fill="rgb(233,86,14)" rx="2" ry="2" />
<text  x="833.87" y="415.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="721.8" y="597" width="0.3" height="15.0" fill="rgb(228,223,30)" rx="2" ry="2" />
<text  x="724.85" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="258.3" y="197" width="0.2" height="15.0" fill="rgb(242,37,9)" rx="2" ry="2" />
<text  x="261.28" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (58 samples, 1.13%)</title><rect x="318.7" y="453" width="13.3" height="15.0" fill="rgb(248,10,12)" rx="2" ry="2" />
<text  x="321.74" y="463.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.08%)</title><rect x="1124.0" y="341" width="1.0" height="15.0" fill="rgb(208,24,16)" rx="2" ry="2" />
<text  x="1127.04" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;std::unique_ptr&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; const, std::default_delete&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; const&gt; &gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="114.0" y="309" width="0.2" height="15.0" fill="rgb(234,178,4)" rx="2" ry="2" />
<text  x="116.98" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="649.9" y="581" width="0.5" height="15.0" fill="rgb(215,114,37)" rx="2" ry="2" />
<text  x="652.93" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1092.7" y="469" width="0.4" height="15.0" fill="rgb(216,192,31)" rx="2" ry="2" />
<text  x="1095.66" y="479.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="113.5" y="565" width="0.3" height="15.0" fill="rgb(244,166,53)" rx="2" ry="2" />
<text  x="116.52" y="575.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="52.8" y="341" width="0.3" height="15.0" fill="rgb(213,68,15)" rx="2" ry="2" />
<text  x="55.83" y="351.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="875.3" y="341" width="0.2" height="15.0" fill="rgb(234,86,46)" rx="2" ry="2" />
<text  x="878.30" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="661.4" y="485" width="0.2" height="15.0" fill="rgb(242,171,39)" rx="2" ry="2" />
<text  x="664.38" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (4 samples, 0.08%)</title><rect x="214.8" y="341" width="0.9" height="15.0" fill="rgb(236,179,52)" rx="2" ry="2" />
<text  x="217.76" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="837.1" y="517" width="0.2" height="15.0" fill="rgb(208,179,15)" rx="2" ry="2" />
<text  x="840.05" y="527.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.8" y="709" width="0.3" height="15.0" fill="rgb(253,176,24)" rx="2" ry="2" />
<text  x="14.83" y="719.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%)</title><rect x="53.5" y="357" width="0.7" height="15.0" fill="rgb(207,67,48)" rx="2" ry="2" />
<text  x="56.52" y="367.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (83 samples, 1.61%)</title><rect x="522.6" y="437" width="19.0" height="15.0" fill="rgb(233,206,44)" rx="2" ry="2" />
<text  x="525.59" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="19.2" y="565" width="0.2" height="15.0" fill="rgb(231,227,14)" rx="2" ry="2" />
<text  x="22.16" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%)</title><rect x="461.2" y="517" width="0.2" height="15.0" fill="rgb(219,23,29)" rx="2" ry="2" />
<text  x="464.20" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%)</title><rect x="521.2" y="437" width="1.4" height="15.0" fill="rgb(218,149,23)" rx="2" ry="2" />
<text  x="524.21" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="800.4" y="341" width="0.2" height="15.0" fill="rgb(227,54,53)" rx="2" ry="2" />
<text  x="803.41" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1136.9" y="277" width="0.2" height="15.0" fill="rgb(253,64,7)" rx="2" ry="2" />
<text  x="1139.86" y="287.5" ></text>
</g>
<g >
<title>query::result::builder::build (5 samples, 0.10%)</title><rect x="610.8" y="549" width="1.1" height="15.0" fill="rgb(241,134,8)" rx="2" ry="2" />
<text  x="613.76" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="457.8" y="469" width="0.4" height="15.0" fill="rgb(208,16,19)" rx="2" ry="2" />
<text  x="460.77" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="802.2" y="277" width="1.4" height="15.0" fill="rgb(250,94,13)" rx="2" ry="2" />
<text  x="805.24" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="37.5" y="389" width="0.2" height="15.0" fill="rgb(216,103,4)" rx="2" ry="2" />
<text  x="40.48" y="399.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="383.3" y="293" width="0.5" height="15.0" fill="rgb(254,73,27)" rx="2" ry="2" />
<text  x="386.33" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="698.7" y="597" width="0.5" height="15.0" fill="rgb(218,95,8)" rx="2" ry="2" />
<text  x="701.72" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (8 samples, 0.16%)</title><rect x="69.1" y="517" width="1.8" height="15.0" fill="rgb(207,179,24)" rx="2" ry="2" />
<text  x="72.09" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (19 samples, 0.37%)</title><rect x="272.0" y="277" width="4.4" height="15.0" fill="rgb(225,92,34)" rx="2" ry="2" />
<text  x="275.02" y="287.5" ></text>
</g>
<g >
<title>std::move&lt;std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_Vector_impl&amp;&gt; (1 samples, 0.02%)</title><rect x="63.1" y="421" width="0.3" height="15.0" fill="rgb(232,157,28)" rx="2" ry="2" />
<text  x="66.14" y="431.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (3 samples, 0.06%)</title><rect x="1125.6" y="325" width="0.7" height="15.0" fill="rgb(208,170,29)" rx="2" ry="2" />
<text  x="1128.64" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="586.9" y="421" width="0.3" height="15.0" fill="rgb(222,119,4)" rx="2" ry="2" />
<text  x="589.94" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="44.8" y="245" width="0.5" height="15.0" fill="rgb(211,174,12)" rx="2" ry="2" />
<text  x="47.81" y="255.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (156 samples, 3.03%)</title><rect x="788.0" y="453" width="35.8" height="15.0" fill="rgb(222,166,2)" rx="2" ry="2" />
<text  x="791.04" y="463.5" >ser..</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="721.4" y="501" width="0.2" height="15.0" fill="rgb(212,165,20)" rx="2" ry="2" />
<text  x="724.39" y="511.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (22 samples, 0.43%)</title><rect x="1023.3" y="293" width="5.0" height="15.0" fill="rgb(250,73,37)" rx="2" ry="2" />
<text  x="1026.26" y="303.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%)</title><rect x="256.0" y="197" width="0.4" height="15.0" fill="rgb(212,49,16)" rx="2" ry="2" />
<text  x="258.99" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="81.0" y="469" width="0.2" height="15.0" fill="rgb(217,157,11)" rx="2" ry="2" />
<text  x="84.00" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="466.2" y="469" width="0.3" height="15.0" fill="rgb(209,143,9)" rx="2" ry="2" />
<text  x="469.24" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::update_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="62.9" y="453" width="0.2" height="15.0" fill="rgb(231,118,19)" rx="2" ry="2" />
<text  x="65.91" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="905.8" y="421" width="0.4" height="15.0" fill="rgb(234,182,29)" rx="2" ry="2" />
<text  x="908.76" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="1138.0" y="389" width="0.2" height="15.0" fill="rgb(211,56,21)" rx="2" ry="2" />
<text  x="1141.01" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="968.1" y="485" width="0.2" height="15.0" fill="rgb(210,175,5)" rx="2" ry="2" />
<text  x="971.06" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="622.9" y="549" width="0.2" height="15.0" fill="rgb(227,100,46)" rx="2" ry="2" />
<text  x="625.90" y="559.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="838.9" y="533" width="1.1" height="15.0" fill="rgb(219,1,19)" rx="2" ry="2" />
<text  x="841.89" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="945.6" y="485" width="1.2" height="15.0" fill="rgb(205,61,43)" rx="2" ry="2" />
<text  x="948.62" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1134.6" y="245" width="0.4" height="15.0" fill="rgb(213,229,53)" rx="2" ry="2" />
<text  x="1137.57" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="47.6" y="261" width="0.2" height="15.0" fill="rgb(234,129,12)" rx="2" ry="2" />
<text  x="50.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (8 samples, 0.16%)</title><rect x="864.8" y="565" width="1.8" height="15.0" fill="rgb(238,183,26)" rx="2" ry="2" />
<text  x="867.77" y="575.5" ></text>
</g>
<g >
<title>database::shutdown (1 samples, 0.02%)</title><rect x="112.8" y="613" width="0.3" height="15.0" fill="rgb(210,183,54)" rx="2" ry="2" />
<text  x="115.84" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1167.8" y="405" width="0.2" height="15.0" fill="rgb(231,40,24)" rx="2" ry="2" />
<text  x="1170.78" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="48.9" y="373" width="0.5" height="15.0" fill="rgb(226,28,45)" rx="2" ry="2" />
<text  x="51.94" y="383.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (3 samples, 0.06%)</title><rect x="382.0" y="293" width="0.6" height="15.0" fill="rgb(235,2,54)" rx="2" ry="2" />
<text  x="384.96" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="875.8" y="373" width="0.2" height="15.0" fill="rgb(226,18,19)" rx="2" ry="2" />
<text  x="878.76" y="383.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="837.7" y="533" width="0.3" height="15.0" fill="rgb(222,185,52)" rx="2" ry="2" />
<text  x="840.74" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (4 samples, 0.08%)</title><rect x="688.9" y="597" width="0.9" height="15.0" fill="rgb(216,185,16)" rx="2" ry="2" />
<text  x="691.87" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="45.7" y="309" width="0.3" height="15.0" fill="rgb(225,140,52)" rx="2" ry="2" />
<text  x="48.73" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="828.4" y="485" width="0.2" height="15.0" fill="rgb(214,174,53)" rx="2" ry="2" />
<text  x="831.35" y="495.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="696.9" y="549" width="0.2" height="15.0" fill="rgb(219,178,28)" rx="2" ry="2" />
<text  x="699.88" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="57.9" y="261" width="0.2" height="15.0" fill="rgb(239,168,36)" rx="2" ry="2" />
<text  x="60.87" y="271.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="874.8" y="341" width="0.3" height="15.0" fill="rgb(218,24,25)" rx="2" ry="2" />
<text  x="877.84" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (12 samples, 0.23%)</title><rect x="313.5" y="453" width="2.7" height="15.0" fill="rgb(236,33,38)" rx="2" ry="2" />
<text  x="316.47" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="19.4" y="597" width="0.2" height="15.0" fill="rgb(219,93,38)" rx="2" ry="2" />
<text  x="22.39" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="52.1" y="341" width="0.5" height="15.0" fill="rgb(227,68,49)" rx="2" ry="2" />
<text  x="55.14" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="985.7" y="405" width="0.2" height="15.0" fill="rgb(253,91,25)" rx="2" ry="2" />
<text  x="988.70" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (16 samples, 0.31%)</title><rect x="713.1" y="565" width="3.7" height="15.0" fill="rgb(249,92,46)" rx="2" ry="2" />
<text  x="716.14" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="636.6" y="485" width="1.0" height="15.0" fill="rgb(240,52,31)" rx="2" ry="2" />
<text  x="639.65" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="683.4" y="565" width="0.2" height="15.0" fill="rgb(209,149,52)" rx="2" ry="2" />
<text  x="686.37" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="57.9" y="437" width="0.2" height="15.0" fill="rgb(216,78,54)" rx="2" ry="2" />
<text  x="60.87" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="214.3" y="357" width="0.2" height="15.0" fill="rgb(236,61,43)" rx="2" ry="2" />
<text  x="217.30" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (62 samples, 1.20%)</title><rect x="24.0" y="453" width="14.2" height="15.0" fill="rgb(228,72,3)" rx="2" ry="2" />
<text  x="26.97" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="63.8" y="421" width="0.3" height="15.0" fill="rgb(246,158,45)" rx="2" ry="2" />
<text  x="66.82" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="102.8" y="549" width="0.2" height="15.0" fill="rgb(245,147,0)" rx="2" ry="2" />
<text  x="105.76" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="70.5" y="405" width="0.2" height="15.0" fill="rgb(207,165,18)" rx="2" ry="2" />
<text  x="73.47" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="84.9" y="405" width="0.2" height="15.0" fill="rgb(216,123,6)" rx="2" ry="2" />
<text  x="87.90" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="114.0" y="581" width="0.2" height="15.0" fill="rgb(214,40,39)" rx="2" ry="2" />
<text  x="116.98" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="644.7" y="597" width="0.2" height="15.0" fill="rgb(218,71,53)" rx="2" ry="2" />
<text  x="647.66" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (6 samples, 0.12%)</title><rect x="414.3" y="293" width="1.3" height="15.0" fill="rgb(214,4,53)" rx="2" ry="2" />
<text  x="417.25" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="546.6" y="437" width="0.7" height="15.0" fill="rgb(252,76,47)" rx="2" ry="2" />
<text  x="549.63" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="309" width="0.2" height="15.0" fill="rgb(209,124,39)" rx="2" ry="2" />
<text  x="60.87" y="319.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1044.8" y="405" width="0.2" height="15.0" fill="rgb(207,73,18)" rx="2" ry="2" />
<text  x="1047.79" y="415.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (41 samples, 0.80%)</title><rect x="361.3" y="309" width="9.4" height="15.0" fill="rgb(218,25,0)" rx="2" ry="2" />
<text  x="364.34" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="716.8" y="549" width="0.2" height="15.0" fill="rgb(229,32,12)" rx="2" ry="2" />
<text  x="719.81" y="559.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="759.6" y="373" width="0.5" height="15.0" fill="rgb(237,31,42)" rx="2" ry="2" />
<text  x="762.64" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (2 samples, 0.04%)</title><rect x="1160.9" y="565" width="0.5" height="15.0" fill="rgb(215,140,33)" rx="2" ry="2" />
<text  x="1163.91" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="114.0" y="181" width="0.2" height="15.0" fill="rgb(224,15,46)" rx="2" ry="2" />
<text  x="116.98" y="191.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (17 samples, 0.33%)</title><rect x="989.4" y="421" width="3.9" height="15.0" fill="rgb(245,212,11)" rx="2" ry="2" />
<text  x="992.36" y="431.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (12 samples, 0.23%)</title><rect x="636.6" y="533" width="2.8" height="15.0" fill="rgb(246,85,36)" rx="2" ry="2" />
<text  x="639.65" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="1021.7" y="293" width="0.6" height="15.0" fill="rgb(244,229,19)" rx="2" ry="2" />
<text  x="1024.66" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="381.0" y="277" width="0.7" height="15.0" fill="rgb(223,13,5)" rx="2" ry="2" />
<text  x="384.04" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="77.3" y="469" width="0.3" height="15.0" fill="rgb(243,80,35)" rx="2" ry="2" />
<text  x="80.34" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (6 samples, 0.12%)</title><rect x="24.7" y="309" width="1.3" height="15.0" fill="rgb(236,152,12)" rx="2" ry="2" />
<text  x="27.66" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="275.0" y="229" width="0.7" height="15.0" fill="rgb(250,83,1)" rx="2" ry="2" />
<text  x="278.00" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (3 samples, 0.06%)</title><rect x="413.1" y="309" width="0.7" height="15.0" fill="rgb(217,27,24)" rx="2" ry="2" />
<text  x="416.11" y="319.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (3 samples, 0.06%)</title><rect x="624.5" y="549" width="0.7" height="15.0" fill="rgb(243,127,17)" rx="2" ry="2" />
<text  x="627.51" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="797.0" y="341" width="0.9" height="15.0" fill="rgb(238,87,42)" rx="2" ry="2" />
<text  x="799.97" y="351.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%)</title><rect x="1014.1" y="357" width="0.2" height="15.0" fill="rgb(232,70,53)" rx="2" ry="2" />
<text  x="1017.10" y="367.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%)</title><rect x="1117.9" y="517" width="0.2" height="15.0" fill="rgb(208,117,8)" rx="2" ry="2" />
<text  x="1120.85" y="527.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (44 samples, 0.85%)</title><rect x="913.8" y="501" width="10.1" height="15.0" fill="rgb(207,215,16)" rx="2" ry="2" />
<text  x="916.78" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%)</title><rect x="806.8" y="277" width="3.2" height="15.0" fill="rgb(242,86,37)" rx="2" ry="2" />
<text  x="809.82" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="38.9" y="421" width="0.2" height="15.0" fill="rgb(235,143,44)" rx="2" ry="2" />
<text  x="41.86" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (5 samples, 0.10%)</title><rect x="74.8" y="501" width="1.2" height="15.0" fill="rgb(217,97,13)" rx="2" ry="2" />
<text  x="77.82" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="660.2" y="517" width="0.3" height="15.0" fill="rgb(211,39,13)" rx="2" ry="2" />
<text  x="663.24" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="558.1" y="373" width="0.4" height="15.0" fill="rgb(239,16,41)" rx="2" ry="2" />
<text  x="561.09" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="570.9" y="517" width="0.2" height="15.0" fill="rgb(249,169,31)" rx="2" ry="2" />
<text  x="573.91" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="138.7" y="517" width="0.2" height="15.0" fill="rgb(216,148,47)" rx="2" ry="2" />
<text  x="141.72" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.49%)</title><rect x="871.6" y="565" width="5.8" height="15.0" fill="rgb(227,206,33)" rx="2" ry="2" />
<text  x="874.64" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (4 samples, 0.08%)</title><rect x="115.1" y="517" width="0.9" height="15.0" fill="rgb(240,62,15)" rx="2" ry="2" />
<text  x="118.13" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="45.3" y="293" width="0.4" height="15.0" fill="rgb(248,17,38)" rx="2" ry="2" />
<text  x="48.27" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="365.5" y="277" width="0.2" height="15.0" fill="rgb(245,132,51)" rx="2" ry="2" />
<text  x="368.47" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="639.6" y="549" width="0.5" height="15.0" fill="rgb(242,39,26)" rx="2" ry="2" />
<text  x="642.62" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="1087.4" y="453" width="0.2" height="15.0" fill="rgb(236,149,29)" rx="2" ry="2" />
<text  x="1090.39" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (8 samples, 0.16%)</title><rect x="604.1" y="533" width="1.9" height="15.0" fill="rgb(235,47,44)" rx="2" ry="2" />
<text  x="607.12" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1138.2" y="325" width="0.3" height="15.0" fill="rgb(228,180,0)" rx="2" ry="2" />
<text  x="1141.24" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="53.3" y="309" width="0.2" height="15.0" fill="rgb(226,146,13)" rx="2" ry="2" />
<text  x="56.29" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; const, std::default_delete&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="114.0" y="293" width="0.2" height="15.0" fill="rgb(238,66,34)" rx="2" ry="2" />
<text  x="116.98" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="285.1" y="293" width="0.2" height="15.0" fill="rgb(245,192,10)" rx="2" ry="2" />
<text  x="288.07" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.2" y="501" width="0.2" height="15.0" fill="rgb(230,154,40)" rx="2" ry="2" />
<text  x="87.21" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="239.7" y="213" width="1.6" height="15.0" fill="rgb(230,176,41)" rx="2" ry="2" />
<text  x="242.72" y="223.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="645" width="0.2" height="15.0" fill="rgb(205,97,32)" rx="2" ry="2" />
<text  x="13.69" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="721.8" y="373" width="0.3" height="15.0" fill="rgb(239,227,12)" rx="2" ry="2" />
<text  x="724.85" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.12%)</title><rect x="129.1" y="549" width="1.4" height="15.0" fill="rgb(229,150,6)" rx="2" ry="2" />
<text  x="132.10" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="111.2" y="581" width="0.5" height="15.0" fill="rgb(211,25,36)" rx="2" ry="2" />
<text  x="114.23" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="486.6" y="389" width="0.7" height="15.0" fill="rgb(206,93,42)" rx="2" ry="2" />
<text  x="489.63" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="341" width="0.3" height="15.0" fill="rgb(238,120,1)" rx="2" ry="2" />
<text  x="51.25" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (2 samples, 0.04%)</title><rect x="585.3" y="373" width="0.5" height="15.0" fill="rgb(222,0,44)" rx="2" ry="2" />
<text  x="588.34" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (4 samples, 0.08%)</title><rect x="1038.4" y="373" width="0.9" height="15.0" fill="rgb(222,4,49)" rx="2" ry="2" />
<text  x="1041.38" y="383.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="412.4" y="309" width="0.5" height="15.0" fill="rgb(216,207,28)" rx="2" ry="2" />
<text  x="415.42" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (2 samples, 0.04%)</title><rect x="1143.7" y="581" width="0.5" height="15.0" fill="rgb(242,151,43)" rx="2" ry="2" />
<text  x="1146.73" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.9" y="181" width="0.2" height="15.0" fill="rgb(215,132,36)" rx="2" ry="2" />
<text  x="52.85" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_input (1 samples, 0.02%)</title><rect x="28.8" y="373" width="0.2" height="15.0" fill="rgb(254,14,40)" rx="2" ry="2" />
<text  x="31.78" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="876.7" y="421" width="0.2" height="15.0" fill="rgb(223,209,23)" rx="2" ry="2" />
<text  x="879.68" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (17 samples, 0.33%)</title><rect x="293.8" y="325" width="3.9" height="15.0" fill="rgb(222,171,48)" rx="2" ry="2" />
<text  x="296.78" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="546.6" y="421" width="0.7" height="15.0" fill="rgb(245,27,48)" rx="2" ry="2" />
<text  x="549.63" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="772.7" y="405" width="0.2" height="15.0" fill="rgb(229,165,44)" rx="2" ry="2" />
<text  x="775.69" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%)</title><rect x="989.8" y="405" width="0.5" height="15.0" fill="rgb(205,137,38)" rx="2" ry="2" />
<text  x="992.82" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="1127.0" y="325" width="0.2" height="15.0" fill="rgb(235,179,45)" rx="2" ry="2" />
<text  x="1130.01" y="335.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="953.6" y="501" width="0.3" height="15.0" fill="rgb(216,57,47)" rx="2" ry="2" />
<text  x="956.63" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="586.5" y="405" width="0.2" height="15.0" fill="rgb(222,199,35)" rx="2" ry="2" />
<text  x="589.49" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="573.2" y="533" width="0.2" height="15.0" fill="rgb(205,44,46)" rx="2" ry="2" />
<text  x="576.20" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (79 samples, 1.53%)</title><rect x="1069.3" y="453" width="18.1" height="15.0" fill="rgb(253,73,51)" rx="2" ry="2" />
<text  x="1072.30" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.5" y="645" width="0.2" height="15.0" fill="rgb(222,206,7)" rx="2" ry="2" />
<text  x="13.46" y="655.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (200 samples, 3.88%)</title><rect x="22.4" y="565" width="45.8" height="15.0" fill="rgb(216,130,11)" rx="2" ry="2" />
<text  x="25.37" y="575.5" >cql3..</text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="597" width="0.2" height="15.0" fill="rgb(216,16,34)" rx="2" ry="2" />
<text  x="1170.78" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.08%)</title><rect x="461.7" y="533" width="0.9" height="15.0" fill="rgb(240,141,49)" rx="2" ry="2" />
<text  x="464.66" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="663.2" y="501" width="0.2" height="15.0" fill="rgb(236,102,4)" rx="2" ry="2" />
<text  x="666.21" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="680.9" y="581" width="0.2" height="15.0" fill="rgb(242,55,9)" rx="2" ry="2" />
<text  x="683.85" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="64.7" y="437" width="0.3" height="15.0" fill="rgb(220,35,52)" rx="2" ry="2" />
<text  x="67.74" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="873.0" y="453" width="0.2" height="15.0" fill="rgb(218,44,38)" rx="2" ry="2" />
<text  x="876.01" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1044.6" y="405" width="0.2" height="15.0" fill="rgb(222,34,46)" rx="2" ry="2" />
<text  x="1047.56" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="1119.2" y="533" width="0.7" height="15.0" fill="rgb(235,92,32)" rx="2" ry="2" />
<text  x="1122.23" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.5" y="629" width="0.3" height="15.0" fill="rgb(250,183,50)" rx="2" ry="2" />
<text  x="86.52" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="112.2" y="597" width="0.2" height="15.0" fill="rgb(238,213,49)" rx="2" ry="2" />
<text  x="115.15" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="768.1" y="517" width="0.2" height="15.0" fill="rgb(240,116,45)" rx="2" ry="2" />
<text  x="771.11" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="582.1" y="405" width="0.3" height="15.0" fill="rgb(226,174,50)" rx="2" ry="2" />
<text  x="585.14" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1131.6" y="245" width="0.2" height="15.0" fill="rgb(227,8,31)" rx="2" ry="2" />
<text  x="1134.60" y="255.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%)</title><rect x="561.5" y="485" width="0.3" height="15.0" fill="rgb(223,177,9)" rx="2" ry="2" />
<text  x="564.52" y="495.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="78.5" y="533" width="0.2" height="15.0" fill="rgb(241,134,29)" rx="2" ry="2" />
<text  x="81.48" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="831.3" y="437" width="0.3" height="15.0" fill="rgb(212,165,13)" rx="2" ry="2" />
<text  x="834.33" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="721.8" y="309" width="0.3" height="15.0" fill="rgb(250,21,14)" rx="2" ry="2" />
<text  x="724.85" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="713.4" y="549" width="0.2" height="15.0" fill="rgb(238,65,6)" rx="2" ry="2" />
<text  x="716.37" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="923.4" y="453" width="0.5" height="15.0" fill="rgb(242,139,13)" rx="2" ry="2" />
<text  x="926.40" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (2 samples, 0.04%)</title><rect x="288.3" y="357" width="0.4" height="15.0" fill="rgb(216,214,28)" rx="2" ry="2" />
<text  x="291.28" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="42.3" y="437" width="0.7" height="15.0" fill="rgb(232,6,38)" rx="2" ry="2" />
<text  x="45.29" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (13 samples, 0.25%)</title><rect x="1130.2" y="389" width="3.0" height="15.0" fill="rgb(217,177,2)" rx="2" ry="2" />
<text  x="1133.22" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (1 samples, 0.02%)</title><rect x="633.7" y="549" width="0.2" height="15.0" fill="rgb(239,74,28)" rx="2" ry="2" />
<text  x="636.67" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="544.6" y="389" width="0.4" height="15.0" fill="rgb(242,228,37)" rx="2" ry="2" />
<text  x="547.57" y="399.5" ></text>
</g>
<g >
<title>__start_context (284 samples, 5.51%)</title><rect x="17.8" y="725" width="65.0" height="15.0" fill="rgb(244,39,43)" rx="2" ry="2" />
<text  x="20.79" y="735.5" >__start..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.2" y="469" width="0.2" height="15.0" fill="rgb(245,148,30)" rx="2" ry="2" />
<text  x="68.20" y="479.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="687.3" y="581" width="0.2" height="15.0" fill="rgb(248,199,41)" rx="2" ry="2" />
<text  x="690.26" y="591.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="113.3" y="453" width="0.2" height="15.0" fill="rgb(207,124,24)" rx="2" ry="2" />
<text  x="116.30" y="463.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (97 samples, 1.88%)</title><rect x="796.3" y="389" width="22.2" height="15.0" fill="rgb(211,171,16)" rx="2" ry="2" />
<text  x="799.28" y="399.5" >a..</text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="81.9" y="581" width="0.2" height="15.0" fill="rgb(226,62,7)" rx="2" ry="2" />
<text  x="84.92" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="940.3" y="501" width="0.3" height="15.0" fill="rgb(246,195,3)" rx="2" ry="2" />
<text  x="943.35" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="84.4" y="549" width="0.3" height="15.0" fill="rgb(228,38,11)" rx="2" ry="2" />
<text  x="87.44" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="79.2" y="549" width="0.2" height="15.0" fill="rgb(248,27,15)" rx="2" ry="2" />
<text  x="82.17" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="51.2" y="357" width="0.5" height="15.0" fill="rgb(211,28,45)" rx="2" ry="2" />
<text  x="54.23" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.2" y="549" width="0.2" height="15.0" fill="rgb(217,165,13)" rx="2" ry="2" />
<text  x="87.21" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="739.5" y="453" width="0.2" height="15.0" fill="rgb(246,210,20)" rx="2" ry="2" />
<text  x="742.48" y="463.5" ></text>
</g>
<g >
<title>cql3::result_generator::visit&lt;cql3::untyped_result_set::visitor&gt; (1 samples, 0.02%)</title><rect x="652.7" y="549" width="0.2" height="15.0" fill="rgb(232,52,39)" rx="2" ry="2" />
<text  x="655.68" y="559.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%)</title><rect x="977.5" y="469" width="0.2" height="15.0" fill="rgb(209,114,42)" rx="2" ry="2" />
<text  x="980.45" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%)</title><rect x="378.8" y="277" width="0.4" height="15.0" fill="rgb(212,22,42)" rx="2" ry="2" />
<text  x="381.75" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1028.8" y="309" width="0.4" height="15.0" fill="rgb(208,30,10)" rx="2" ry="2" />
<text  x="1031.76" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%)</title><rect x="452.0" y="373" width="0.5" height="15.0" fill="rgb(216,62,19)" rx="2" ry="2" />
<text  x="455.04" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="309.6" y="437" width="1.1" height="15.0" fill="rgb(207,172,12)" rx="2" ry="2" />
<text  x="312.58" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%)</title><rect x="589.5" y="485" width="0.9" height="15.0" fill="rgb(223,140,1)" rx="2" ry="2" />
<text  x="592.46" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (3 samples, 0.06%)</title><rect x="707.2" y="581" width="0.7" height="15.0" fill="rgb(247,220,40)" rx="2" ry="2" />
<text  x="710.19" y="591.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1128.8" y="373" width="0.3" height="15.0" fill="rgb(237,138,49)" rx="2" ry="2" />
<text  x="1131.85" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1135.7" y="165" width="0.2" height="15.0" fill="rgb(212,58,32)" rx="2" ry="2" />
<text  x="1138.72" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (1 samples, 0.02%)</title><rect x="858.1" y="485" width="0.3" height="15.0" fill="rgb(247,118,49)" rx="2" ry="2" />
<text  x="861.12" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1102.3" y="469" width="0.2" height="15.0" fill="rgb(214,1,12)" rx="2" ry="2" />
<text  x="1105.28" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (33 samples, 0.64%)</title><rect x="215.7" y="357" width="7.5" height="15.0" fill="rgb(211,27,33)" rx="2" ry="2" />
<text  x="218.68" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="229" width="0.5" height="15.0" fill="rgb(214,7,41)" rx="2" ry="2" />
<text  x="56.75" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="485.3" y="405" width="0.4" height="15.0" fill="rgb(223,218,1)" rx="2" ry="2" />
<text  x="488.25" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="664.1" y="485" width="0.3" height="15.0" fill="rgb(241,209,5)" rx="2" ry="2" />
<text  x="667.13" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1039.5" y="389" width="0.3" height="15.0" fill="rgb(213,46,43)" rx="2" ry="2" />
<text  x="1042.52" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.10%)</title><rect x="221.6" y="341" width="1.2" height="15.0" fill="rgb(217,113,22)" rx="2" ry="2" />
<text  x="224.63" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;unsigned int&gt;::_Rb_tree_const_iterator (1 samples, 0.02%)</title><rect x="37.9" y="405" width="0.3" height="15.0" fill="rgb(253,36,52)" rx="2" ry="2" />
<text  x="40.94" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="44.6" y="229" width="0.2" height="15.0" fill="rgb(222,144,3)" rx="2" ry="2" />
<text  x="47.58" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (6 samples, 0.12%)</title><rect x="39.8" y="421" width="1.3" height="15.0" fill="rgb(252,136,9)" rx="2" ry="2" />
<text  x="42.77" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="871.0" y="373" width="0.2" height="15.0" fill="rgb(205,138,24)" rx="2" ry="2" />
<text  x="873.95" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="615.1" y="517" width="0.2" height="15.0" fill="rgb(228,18,49)" rx="2" ry="2" />
<text  x="618.12" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%)</title><rect x="826.1" y="421" width="1.3" height="15.0" fill="rgb(220,22,38)" rx="2" ry="2" />
<text  x="829.06" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_table_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.7" y="485" width="0.3" height="15.0" fill="rgb(210,67,5)" rx="2" ry="2" />
<text  x="67.74" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%)</title><rect x="22.6" y="437" width="0.5" height="15.0" fill="rgb(221,109,17)" rx="2" ry="2" />
<text  x="25.60" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="23.7" y="501" width="0.3" height="15.0" fill="rgb(251,123,35)" rx="2" ry="2" />
<text  x="26.74" y="511.5" ></text>
</g>
<g >
<title>read_context::obtain_reader_permit (1 samples, 0.02%)</title><rect x="113.1" y="389" width="0.2" height="15.0" fill="rgb(233,210,36)" rx="2" ry="2" />
<text  x="116.07" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="671.2" y="581" width="0.5" height="15.0" fill="rgb(244,3,6)" rx="2" ry="2" />
<text  x="674.23" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (11 samples, 0.21%)</title><rect x="757.6" y="405" width="2.5" height="15.0" fill="rgb(229,207,23)" rx="2" ry="2" />
<text  x="760.58" y="415.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="644.4" y="565" width="0.3" height="15.0" fill="rgb(225,145,42)" rx="2" ry="2" />
<text  x="647.43" y="575.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="1122.4" y="341" width="0.3" height="15.0" fill="rgb(209,88,39)" rx="2" ry="2" />
<text  x="1125.43" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (20 samples, 0.39%)</title><rect x="501.7" y="373" width="4.6" height="15.0" fill="rgb(234,37,30)" rx="2" ry="2" />
<text  x="504.74" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="835.5" y="405" width="0.6" height="15.0" fill="rgb(241,81,50)" rx="2" ry="2" />
<text  x="838.45" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.10%)</title><rect x="717.7" y="549" width="1.2" height="15.0" fill="rgb(218,108,23)" rx="2" ry="2" />
<text  x="720.73" y="559.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (3 samples, 0.06%)</title><rect x="22.6" y="501" width="0.7" height="15.0" fill="rgb(212,135,11)" rx="2" ry="2" />
<text  x="25.60" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="459.1" y="469" width="0.5" height="15.0" fill="rgb(205,198,17)" rx="2" ry="2" />
<text  x="462.14" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (21 samples, 0.41%)</title><rect x="531.1" y="357" width="4.8" height="15.0" fill="rgb(251,37,46)" rx="2" ry="2" />
<text  x="534.06" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="873.0" y="437" width="0.2" height="15.0" fill="rgb(226,153,1)" rx="2" ry="2" />
<text  x="876.01" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (3 samples, 0.06%)</title><rect x="861.1" y="469" width="0.7" height="15.0" fill="rgb(250,102,2)" rx="2" ry="2" />
<text  x="864.10" y="479.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="115.1" y="501" width="0.3" height="15.0" fill="rgb(237,148,8)" rx="2" ry="2" />
<text  x="118.13" y="511.5" ></text>
</g>
<g >
<title>mutation_querier::consume (177 samples, 3.44%)</title><rect x="371.2" y="309" width="40.5" height="15.0" fill="rgb(224,125,18)" rx="2" ry="2" />
<text  x="374.19" y="319.5" >mut..</text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="438.3" y="325" width="0.2" height="15.0" fill="rgb(209,95,15)" rx="2" ry="2" />
<text  x="441.30" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1092.0" y="485" width="0.2" height="15.0" fill="rgb(232,12,6)" rx="2" ry="2" />
<text  x="1094.97" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="892.3" y="501" width="0.6" height="15.0" fill="rgb(211,144,45)" rx="2" ry="2" />
<text  x="895.25" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="77.3" y="437" width="0.3" height="15.0" fill="rgb(232,21,18)" rx="2" ry="2" />
<text  x="80.34" y="447.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="958.0" y="501" width="0.2" height="15.0" fill="rgb(234,32,4)" rx="2" ry="2" />
<text  x="960.99" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (7 samples, 0.14%)</title><rect x="353.3" y="341" width="1.6" height="15.0" fill="rgb(211,128,39)" rx="2" ry="2" />
<text  x="356.33" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="165" width="0.5" height="15.0" fill="rgb(208,143,41)" rx="2" ry="2" />
<text  x="56.75" y="175.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%)</title><rect x="496.9" y="389" width="1.2" height="15.0" fill="rgb(210,91,46)" rx="2" ry="2" />
<text  x="499.93" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="119.7" y="597" width="0.5" height="15.0" fill="rgb(225,136,42)" rx="2" ry="2" />
<text  x="122.71" y="607.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%)</title><rect x="496.9" y="405" width="1.2" height="15.0" fill="rgb(208,78,15)" rx="2" ry="2" />
<text  x="499.93" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="181" width="0.5" height="15.0" fill="rgb(221,16,40)" rx="2" ry="2" />
<text  x="56.75" y="191.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="114.9" y="549" width="0.2" height="15.0" fill="rgb(230,193,42)" rx="2" ry="2" />
<text  x="117.90" y="559.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (4 samples, 0.08%)</title><rect x="115.1" y="549" width="0.9" height="15.0" fill="rgb(216,182,45)" rx="2" ry="2" />
<text  x="118.13" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="51.7" y="373" width="0.4" height="15.0" fill="rgb(218,73,28)" rx="2" ry="2" />
<text  x="54.68" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1062.4" y="405" width="0.9" height="15.0" fill="rgb(239,103,1)" rx="2" ry="2" />
<text  x="1065.43" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="880.1" y="581" width="0.2" height="15.0" fill="rgb(244,212,19)" rx="2" ry="2" />
<text  x="883.11" y="591.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (11 samples, 0.21%)</title><rect x="362.5" y="293" width="2.5" height="15.0" fill="rgb(211,4,22)" rx="2" ry="2" />
<text  x="365.49" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="260.1" y="229" width="0.2" height="15.0" fill="rgb(238,109,52)" rx="2" ry="2" />
<text  x="263.11" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="671.9" y="533" width="0.2" height="15.0" fill="rgb(237,20,48)" rx="2" ry="2" />
<text  x="674.92" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.2" y="581" width="0.2" height="15.0" fill="rgb(230,134,20)" rx="2" ry="2" />
<text  x="22.16" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="653.8" y="597" width="0.7" height="15.0" fill="rgb(246,199,28)" rx="2" ry="2" />
<text  x="656.82" y="607.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1164.1" y="565" width="0.2" height="15.0" fill="rgb(205,92,48)" rx="2" ry="2" />
<text  x="1167.12" y="575.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="86.5" y="517" width="0.2" height="15.0" fill="rgb(210,96,51)" rx="2" ry="2" />
<text  x="89.50" y="527.5" ></text>
</g>
<g >
<title>[unknown] (336 samples, 6.52%)</title><rect x="10.0" y="741" width="77.0" height="15.0" fill="rgb(205,8,14)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >[unknown]</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="308.9" y="421" width="0.5" height="15.0" fill="rgb(243,182,26)" rx="2" ry="2" />
<text  x="311.89" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="450.9" y="389" width="0.5" height="15.0" fill="rgb(239,220,13)" rx="2" ry="2" />
<text  x="453.90" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (60 samples, 1.16%)</title><rect x="318.3" y="469" width="13.7" height="15.0" fill="rgb(237,102,2)" rx="2" ry="2" />
<text  x="321.28" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="535.4" y="309" width="0.5" height="15.0" fill="rgb(230,214,8)" rx="2" ry="2" />
<text  x="538.41" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1166.2" y="533" width="0.2" height="15.0" fill="rgb(241,93,3)" rx="2" ry="2" />
<text  x="1169.18" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%)</title><rect x="86.3" y="453" width="0.2" height="15.0" fill="rgb(252,84,29)" rx="2" ry="2" />
<text  x="89.27" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (42 samples, 0.82%)</title><rect x="289.4" y="341" width="9.6" height="15.0" fill="rgb(242,223,27)" rx="2" ry="2" />
<text  x="292.43" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.25%)</title><rect x="24.4" y="421" width="3.0" height="15.0" fill="rgb(249,192,21)" rx="2" ry="2" />
<text  x="27.43" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="1131.4" y="261" width="0.2" height="15.0" fill="rgb(242,15,5)" rx="2" ry="2" />
<text  x="1134.37" y="271.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1122.9" y="229" width="0.2" height="15.0" fill="rgb(220,167,37)" rx="2" ry="2" />
<text  x="1125.89" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%)</title><rect x="489.4" y="437" width="0.2" height="15.0" fill="rgb(253,112,31)" rx="2" ry="2" />
<text  x="492.38" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.08%)</title><rect x="46.2" y="389" width="0.9" height="15.0" fill="rgb(237,183,18)" rx="2" ry="2" />
<text  x="49.19" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="38.9" y="373" width="0.2" height="15.0" fill="rgb(217,88,0)" rx="2" ry="2" />
<text  x="41.86" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (14 samples, 0.27%)</title><rect x="940.8" y="501" width="3.2" height="15.0" fill="rgb(238,99,53)" rx="2" ry="2" />
<text  x="943.81" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="696.9" y="613" width="0.2" height="15.0" fill="rgb(251,78,11)" rx="2" ry="2" />
<text  x="699.88" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="572.7" y="533" width="0.3" height="15.0" fill="rgb(250,196,5)" rx="2" ry="2" />
<text  x="575.74" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_expression (1 samples, 0.02%)</title><rect x="73.4" y="469" width="0.3" height="15.0" fill="rgb(224,16,50)" rx="2" ry="2" />
<text  x="76.44" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="54.7" y="373" width="0.9" height="15.0" fill="rgb(234,70,15)" rx="2" ry="2" />
<text  x="57.66" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="696.7" y="533" width="0.2" height="15.0" fill="rgb(217,191,49)" rx="2" ry="2" />
<text  x="699.65" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="787.4" y="453" width="0.2" height="15.0" fill="rgb(220,208,28)" rx="2" ry="2" />
<text  x="790.35" y="463.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="1124.0" y="309" width="0.3" height="15.0" fill="rgb(227,162,47)" rx="2" ry="2" />
<text  x="1127.04" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="825.8" y="421" width="0.3" height="15.0" fill="rgb(205,48,34)" rx="2" ry="2" />
<text  x="828.83" y="431.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%)</title><rect x="28.1" y="389" width="0.2" height="15.0" fill="rgb(245,186,1)" rx="2" ry="2" />
<text  x="31.09" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (1 samples, 0.02%)</title><rect x="819.6" y="405" width="0.3" height="15.0" fill="rgb(206,173,40)" rx="2" ry="2" />
<text  x="822.65" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="501" width="9.4" height="15.0" fill="rgb(239,205,33)" rx="2" ry="2" />
<text  x="1132.31" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="1052.3" y="421" width="3.3" height="15.0" fill="rgb(220,212,36)" rx="2" ry="2" />
<text  x="1055.35" y="431.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%)</title><rect x="821.5" y="421" width="0.2" height="15.0" fill="rgb(209,214,27)" rx="2" ry="2" />
<text  x="824.48" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="877.1" y="533" width="0.3" height="15.0" fill="rgb(240,85,31)" rx="2" ry="2" />
<text  x="880.14" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="853.5" y="437" width="0.5" height="15.0" fill="rgb(224,57,14)" rx="2" ry="2" />
<text  x="856.54" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="44.6" y="293" width="0.2" height="15.0" fill="rgb(234,117,43)" rx="2" ry="2" />
<text  x="47.58" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%)</title><rect x="637.6" y="501" width="0.6" height="15.0" fill="rgb(240,180,49)" rx="2" ry="2" />
<text  x="640.56" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="51.2" y="341" width="0.3" height="15.0" fill="rgb(211,67,38)" rx="2" ry="2" />
<text  x="54.23" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.49%)</title><rect x="871.6" y="581" width="5.8" height="15.0" fill="rgb(231,25,18)" rx="2" ry="2" />
<text  x="874.64" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.6" y="261" width="0.2" height="15.0" fill="rgb(212,200,8)" rx="2" ry="2" />
<text  x="44.61" y="271.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (8 samples, 0.16%)</title><rect x="565.4" y="501" width="1.8" height="15.0" fill="rgb(252,48,21)" rx="2" ry="2" />
<text  x="568.42" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="535.4" y="293" width="0.5" height="15.0" fill="rgb(220,182,20)" rx="2" ry="2" />
<text  x="538.41" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="756.9" y="421" width="0.2" height="15.0" fill="rgb(250,28,33)" rx="2" ry="2" />
<text  x="759.89" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="59.0" y="277" width="0.2" height="15.0" fill="rgb(220,122,46)" rx="2" ry="2" />
<text  x="62.01" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (16 samples, 0.31%)</title><rect x="858.1" y="501" width="3.7" height="15.0" fill="rgb(235,52,14)" rx="2" ry="2" />
<text  x="861.12" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="38.9" y="437" width="0.2" height="15.0" fill="rgb(211,110,48)" rx="2" ry="2" />
<text  x="41.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="1050.3" y="437" width="1.1" height="15.0" fill="rgb(240,56,36)" rx="2" ry="2" />
<text  x="1053.29" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.08%)</title><rect x="773.2" y="437" width="0.9" height="15.0" fill="rgb(211,107,48)" rx="2" ry="2" />
<text  x="776.15" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="583.5" y="389" width="1.2" height="15.0" fill="rgb(239,58,36)" rx="2" ry="2" />
<text  x="586.51" y="399.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (4 samples, 0.08%)</title><rect x="115.1" y="533" width="0.9" height="15.0" fill="rgb(229,90,50)" rx="2" ry="2" />
<text  x="118.13" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="559.0" y="437" width="0.2" height="15.0" fill="rgb(210,226,12)" rx="2" ry="2" />
<text  x="562.00" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%)</title><rect x="62.2" y="437" width="0.2" height="15.0" fill="rgb(218,27,2)" rx="2" ry="2" />
<text  x="65.22" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="631.4" y="501" width="0.4" height="15.0" fill="rgb(249,13,16)" rx="2" ry="2" />
<text  x="634.38" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="696.2" y="581" width="0.2" height="15.0" fill="rgb(244,206,39)" rx="2" ry="2" />
<text  x="699.20" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="930.3" y="453" width="0.2" height="15.0" fill="rgb(254,158,25)" rx="2" ry="2" />
<text  x="933.27" y="463.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.16%)</title><rect x="260.6" y="229" width="1.8" height="15.0" fill="rgb(244,201,34)" rx="2" ry="2" />
<text  x="263.57" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="908.3" y="453" width="0.2" height="15.0" fill="rgb(214,68,47)" rx="2" ry="2" />
<text  x="911.28" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (3 samples, 0.06%)</title><rect x="537.2" y="341" width="0.7" height="15.0" fill="rgb(243,100,14)" rx="2" ry="2" />
<text  x="540.24" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1107.8" y="501" width="0.2" height="15.0" fill="rgb(250,175,42)" rx="2" ry="2" />
<text  x="1110.78" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1084.9" y="389" width="0.2" height="15.0" fill="rgb(236,36,16)" rx="2" ry="2" />
<text  x="1087.87" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.14%)</title><rect x="663.2" y="549" width="1.6" height="15.0" fill="rgb(246,47,30)" rx="2" ry="2" />
<text  x="666.21" y="559.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="48.2" y="405" width="0.3" height="15.0" fill="rgb(210,218,53)" rx="2" ry="2" />
<text  x="51.25" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%)</title><rect x="377.1" y="293" width="0.5" height="15.0" fill="rgb(234,50,5)" rx="2" ry="2" />
<text  x="380.15" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1123.1" y="229" width="0.3" height="15.0" fill="rgb(223,45,41)" rx="2" ry="2" />
<text  x="1126.12" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1090.4" y="453" width="0.2" height="15.0" fill="rgb(227,11,0)" rx="2" ry="2" />
<text  x="1093.37" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1095.6" y="517" width="0.3" height="15.0" fill="rgb(249,194,27)" rx="2" ry="2" />
<text  x="1098.64" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="876.4" y="373" width="0.3" height="15.0" fill="rgb(252,24,9)" rx="2" ry="2" />
<text  x="879.45" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%)</title><rect x="793.3" y="389" width="0.9" height="15.0" fill="rgb(225,158,39)" rx="2" ry="2" />
<text  x="796.31" y="399.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="114.0" y="357" width="0.2" height="15.0" fill="rgb(229,68,40)" rx="2" ry="2" />
<text  x="116.98" y="367.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="721.4" y="533" width="0.2" height="15.0" fill="rgb(232,126,34)" rx="2" ry="2" />
<text  x="724.39" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (7 samples, 0.14%)</title><rect x="1156.1" y="565" width="1.6" height="15.0" fill="rgb(221,49,0)" rx="2" ry="2" />
<text  x="1159.10" y="575.5" ></text>
</g>
<g >
<title>syscall-0 (2 samples, 0.04%)</title><rect x="1189.5" y="757" width="0.5" height="15.0" fill="rgb(228,82,18)" rx="2" ry="2" />
<text  x="1192.54" y="767.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="898.2" y="421" width="0.2" height="15.0" fill="rgb(219,103,42)" rx="2" ry="2" />
<text  x="901.21" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="625.2" y="549" width="0.5" height="15.0" fill="rgb(227,93,12)" rx="2" ry="2" />
<text  x="628.19" y="559.5" ></text>
</g>
<g >
<title>position_in_partition::tri_compare::compare&lt;position_in_partition_view, position_in_partition_view&gt; (1 samples, 0.02%)</title><rect x="876.2" y="325" width="0.2" height="15.0" fill="rgb(214,199,28)" rx="2" ry="2" />
<text  x="879.22" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="780.7" y="469" width="0.7" height="15.0" fill="rgb(237,207,6)" rx="2" ry="2" />
<text  x="783.71" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="813.7" y="245" width="0.4" height="15.0" fill="rgb(223,162,42)" rx="2" ry="2" />
<text  x="816.69" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="706.7" y="597" width="0.3" height="15.0" fill="rgb(251,59,44)" rx="2" ry="2" />
<text  x="709.73" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.9" y="389" width="0.3" height="15.0" fill="rgb(237,144,13)" rx="2" ry="2" />
<text  x="62.93" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (14 samples, 0.27%)</title><rect x="83.8" y="693" width="3.2" height="15.0" fill="rgb(226,155,18)" rx="2" ry="2" />
<text  x="86.75" y="703.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1086.5" y="421" width="0.2" height="15.0" fill="rgb(224,191,34)" rx="2" ry="2" />
<text  x="1089.48" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (37 samples, 0.72%)</title><rect x="550.5" y="437" width="8.5" height="15.0" fill="rgb(215,66,20)" rx="2" ry="2" />
<text  x="553.53" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="779.6" y="469" width="0.2" height="15.0" fill="rgb(229,98,6)" rx="2" ry="2" />
<text  x="782.57" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="197" width="0.5" height="15.0" fill="rgb(221,218,21)" rx="2" ry="2" />
<text  x="56.75" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="823.1" y="405" width="0.2" height="15.0" fill="rgb(216,13,31)" rx="2" ry="2" />
<text  x="826.08" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.1" y="293" width="0.2" height="15.0" fill="rgb(237,49,27)" rx="2" ry="2" />
<text  x="64.08" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (3 samples, 0.06%)</title><rect x="716.1" y="549" width="0.7" height="15.0" fill="rgb(254,67,53)" rx="2" ry="2" />
<text  x="719.12" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (5 samples, 0.10%)</title><rect x="214.5" y="357" width="1.2" height="15.0" fill="rgb(214,51,4)" rx="2" ry="2" />
<text  x="217.53" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="54.9" y="309" width="0.7" height="15.0" fill="rgb(211,80,36)" rx="2" ry="2" />
<text  x="57.89" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (691 samples, 13.41%)</title><rect x="176.1" y="517" width="158.2" height="15.0" fill="rgb(209,174,30)" rx="2" ry="2" />
<text  x="179.05" y="527.5" >flat_mutation_reader..</text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="10.5" y="549" width="0.2" height="15.0" fill="rgb(245,223,35)" rx="2" ry="2" />
<text  x="13.46" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="838.7" y="533" width="0.2" height="15.0" fill="rgb(226,46,35)" rx="2" ry="2" />
<text  x="841.66" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.12%)</title><rect x="1146.3" y="597" width="1.3" height="15.0" fill="rgb(240,226,14)" rx="2" ry="2" />
<text  x="1149.25" y="607.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (2 samples, 0.04%)</title><rect x="1122.9" y="277" width="0.5" height="15.0" fill="rgb(250,134,31)" rx="2" ry="2" />
<text  x="1125.89" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="67.3" y="437" width="0.2" height="15.0" fill="rgb(213,75,5)" rx="2" ry="2" />
<text  x="70.26" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="774.1" y="469" width="0.2" height="15.0" fill="rgb(214,183,15)" rx="2" ry="2" />
<text  x="777.07" y="479.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="17.6" y="725" width="0.2" height="15.0" fill="rgb(250,95,46)" rx="2" ry="2" />
<text  x="20.56" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%)</title><rect x="1106.6" y="469" width="0.5" height="15.0" fill="rgb(205,7,33)" rx="2" ry="2" />
<text  x="1109.63" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (16 samples, 0.31%)</title><rect x="739.7" y="437" width="3.7" height="15.0" fill="rgb(235,196,11)" rx="2" ry="2" />
<text  x="742.71" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="714.7" y="533" width="0.3" height="15.0" fill="rgb(218,113,20)" rx="2" ry="2" />
<text  x="717.75" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="992.1" y="373" width="0.2" height="15.0" fill="rgb(247,19,12)" rx="2" ry="2" />
<text  x="995.11" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::single_column_relation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="61.3" y="453" width="0.2" height="15.0" fill="rgb(241,6,47)" rx="2" ry="2" />
<text  x="64.30" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1059.0" y="453" width="0.4" height="15.0" fill="rgb(225,128,31)" rx="2" ry="2" />
<text  x="1061.99" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1138.2" y="357" width="0.3" height="15.0" fill="rgb(243,117,38)" rx="2" ry="2" />
<text  x="1141.24" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="57.2" y="357" width="0.2" height="15.0" fill="rgb(253,38,50)" rx="2" ry="2" />
<text  x="60.18" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%)</title><rect x="547.6" y="437" width="0.6" height="15.0" fill="rgb(242,227,48)" rx="2" ry="2" />
<text  x="550.55" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1027.6" y="277" width="0.2" height="15.0" fill="rgb(229,187,13)" rx="2" ry="2" />
<text  x="1030.61" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2" y="293" width="0.2" height="15.0" fill="rgb(213,214,40)" rx="2" ry="2" />
<text  x="57.20" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="59.5" y="245" width="0.2" height="15.0" fill="rgb(244,215,2)" rx="2" ry="2" />
<text  x="62.47" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (463 samples, 8.99%)</title><rect x="344.9" y="389" width="106.0" height="15.0" fill="rgb(205,222,46)" rx="2" ry="2" />
<text  x="347.85" y="399.5" >flat_mutatio..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1030.8" y="309" width="0.2" height="15.0" fill="rgb(252,85,10)" rx="2" ry="2" />
<text  x="1033.82" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="78.0" y="501" width="0.3" height="15.0" fill="rgb(218,21,19)" rx="2" ry="2" />
<text  x="81.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="570.0" y="389" width="0.2" height="15.0" fill="rgb(214,195,51)" rx="2" ry="2" />
<text  x="573.00" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (4 samples, 0.08%)</title><rect x="764.4" y="517" width="1.0" height="15.0" fill="rgb(212,66,33)" rx="2" ry="2" />
<text  x="767.45" y="527.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_channel (1 samples, 0.02%)</title><rect x="27.9" y="389" width="0.2" height="15.0" fill="rgb(212,101,48)" rx="2" ry="2" />
<text  x="30.86" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (19 samples, 0.37%)</title><rect x="72.1" y="517" width="4.3" height="15.0" fill="rgb(224,203,20)" rx="2" ry="2" />
<text  x="75.07" y="527.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (3 samples, 0.06%)</title><rect x="1128.6" y="405" width="0.7" height="15.0" fill="rgb(252,186,51)" rx="2" ry="2" />
<text  x="1131.62" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="1132.3" y="357" width="0.4" height="15.0" fill="rgb(211,182,44)" rx="2" ry="2" />
<text  x="1135.28" y="367.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (5 samples, 0.10%)</title><rect x="494.6" y="437" width="1.2" height="15.0" fill="rgb(252,28,16)" rx="2" ry="2" />
<text  x="497.64" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="696.2" y="533" width="0.2" height="15.0" fill="rgb(226,75,39)" rx="2" ry="2" />
<text  x="699.20" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="557.4" y="357" width="0.2" height="15.0" fill="rgb(251,39,42)" rx="2" ry="2" />
<text  x="560.40" y="367.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="696.9" y="485" width="0.2" height="15.0" fill="rgb(224,196,12)" rx="2" ry="2" />
<text  x="699.88" y="495.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (22 samples, 0.43%)</title><rect x="263.3" y="277" width="5.1" height="15.0" fill="rgb(214,45,50)" rx="2" ry="2" />
<text  x="266.32" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="434.6" y="341" width="0.3" height="15.0" fill="rgb(220,185,24)" rx="2" ry="2" />
<text  x="437.64" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (4 samples, 0.08%)</title><rect x="177.2" y="485" width="0.9" height="15.0" fill="rgb(248,178,8)" rx="2" ry="2" />
<text  x="180.20" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="712.7" y="565" width="0.4" height="15.0" fill="rgb(240,28,29)" rx="2" ry="2" />
<text  x="715.69" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (28 samples, 0.54%)</title><rect x="565.0" y="533" width="6.4" height="15.0" fill="rgb(250,227,45)" rx="2" ry="2" />
<text  x="567.96" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="316.2" y="453" width="0.5" height="15.0" fill="rgb(218,53,26)" rx="2" ry="2" />
<text  x="319.22" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (540 samples, 10.48%)</title><rect x="732.2" y="565" width="123.6" height="15.0" fill="rgb(231,119,43)" rx="2" ry="2" />
<text  x="735.15" y="575.5" >single_node_cql..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="588.3" y="437" width="0.5" height="15.0" fill="rgb(211,33,35)" rx="2" ry="2" />
<text  x="591.32" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="668.3" y="597" width="0.6" height="15.0" fill="rgb(208,103,32)" rx="2" ry="2" />
<text  x="671.25" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%)</title><rect x="914.7" y="485" width="0.9" height="15.0" fill="rgb(234,23,42)" rx="2" ry="2" />
<text  x="917.70" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (3 samples, 0.06%)</title><rect x="1157.7" y="565" width="0.7" height="15.0" fill="rgb(226,131,50)" rx="2" ry="2" />
<text  x="1160.71" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (284 samples, 5.51%)</title><rect x="17.8" y="709" width="65.0" height="15.0" fill="rgb(244,60,23)" rx="2" ry="2" />
<text  x="20.79" y="719.5" >seastar..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(211,101,26)" rx="2" ry="2" />
<text  x="13.69" y="687.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="618.3" y="517" width="0.3" height="15.0" fill="rgb(238,46,35)" rx="2" ry="2" />
<text  x="621.32" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (5 samples, 0.10%)</title><rect x="725.5" y="597" width="1.2" height="15.0" fill="rgb(231,5,34)" rx="2" ry="2" />
<text  x="728.51" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="603.0" y="533" width="0.7" height="15.0" fill="rgb(215,217,22)" rx="2" ry="2" />
<text  x="605.98" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="341" width="0.6" height="15.0" fill="rgb(241,72,43)" rx="2" ry="2" />
<text  x="50.56" y="351.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="930.7" y="453" width="0.3" height="15.0" fill="rgb(252,56,18)" rx="2" ry="2" />
<text  x="933.73" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="753.2" y="485" width="1.2" height="15.0" fill="rgb(235,126,52)" rx="2" ry="2" />
<text  x="756.23" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="85.1" y="453" width="0.3" height="15.0" fill="rgb(209,180,39)" rx="2" ry="2" />
<text  x="88.12" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="696.9" y="501" width="0.2" height="15.0" fill="rgb(220,171,7)" rx="2" ry="2" />
<text  x="699.88" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="453.4" y="405" width="2.3" height="15.0" fill="rgb(252,162,40)" rx="2" ry="2" />
<text  x="456.42" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl_nrvo&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="334.1" y="485" width="0.2" height="15.0" fill="rgb(223,52,10)" rx="2" ry="2" />
<text  x="337.09" y="495.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%)</title><rect x="113.1" y="405" width="0.2" height="15.0" fill="rgb(245,59,1)" rx="2" ry="2" />
<text  x="116.07" y="415.5" ></text>
</g>
<g >
<title>table::as_mutation_source (15 samples, 0.29%)</title><rect x="636.0" y="549" width="3.4" height="15.0" fill="rgb(206,147,16)" rx="2" ry="2" />
<text  x="638.96" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="10.5" y="597" width="0.2" height="15.0" fill="rgb(235,25,1)" rx="2" ry="2" />
<text  x="13.46" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="54.2" y="357" width="0.2" height="15.0" fill="rgb(213,151,25)" rx="2" ry="2" />
<text  x="57.20" y="367.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (41 samples, 0.80%)</title><rect x="1129.3" y="597" width="9.4" height="15.0" fill="rgb(215,158,29)" rx="2" ry="2" />
<text  x="1132.31" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="55.1" y="229" width="0.5" height="15.0" fill="rgb(218,93,54)" rx="2" ry="2" />
<text  x="58.12" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (39 samples, 0.76%)</title><rect x="68.6" y="565" width="9.0" height="15.0" fill="rgb(242,193,32)" rx="2" ry="2" />
<text  x="71.63" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="828.8" y="469" width="0.2" height="15.0" fill="rgb(222,39,36)" rx="2" ry="2" />
<text  x="831.81" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="313.2" y="453" width="0.3" height="15.0" fill="rgb(244,27,51)" rx="2" ry="2" />
<text  x="316.25" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="116.3" y="565" width="0.2" height="15.0" fill="rgb(248,76,27)" rx="2" ry="2" />
<text  x="119.27" y="575.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="1056.7" y="453" width="0.5" height="15.0" fill="rgb(227,175,19)" rx="2" ry="2" />
<text  x="1059.70" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (21 samples, 0.41%)</title><rect x="606.0" y="533" width="4.8" height="15.0" fill="rgb(251,71,50)" rx="2" ry="2" />
<text  x="608.95" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (19 samples, 0.37%)</title><rect x="1110.8" y="533" width="4.3" height="15.0" fill="rgb(208,50,28)" rx="2" ry="2" />
<text  x="1113.75" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="41.6" y="421" width="0.2" height="15.0" fill="rgb(254,96,50)" rx="2" ry="2" />
<text  x="44.61" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::ensure_last_dummy (1 samples, 0.02%)</title><rect x="18.5" y="645" width="0.2" height="15.0" fill="rgb(221,164,20)" rx="2" ry="2" />
<text  x="21.47" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="1130.0" y="389" width="0.2" height="15.0" fill="rgb(250,83,22)" rx="2" ry="2" />
<text  x="1132.99" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="944.5" y="517" width="0.2" height="15.0" fill="rgb(224,140,9)" rx="2" ry="2" />
<text  x="947.47" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (188 samples, 3.65%)</title><rect x="1000.6" y="405" width="43.0" height="15.0" fill="rgb(231,22,17)" rx="2" ry="2" />
<text  x="1003.59" y="415.5" >serv..</text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="226.2" y="341" width="0.5" height="15.0" fill="rgb(207,189,5)" rx="2" ry="2" />
<text  x="229.21" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.8" y="245" width="0.2" height="15.0" fill="rgb(217,133,41)" rx="2" ry="2" />
<text  x="45.75" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="315.8" y="437" width="0.4" height="15.0" fill="rgb(235,127,16)" rx="2" ry="2" />
<text  x="318.76" y="447.5" ></text>
</g>
<g >
<title>service::client_state::has_access (190 samples, 3.69%)</title><rect x="784.4" y="485" width="43.5" height="15.0" fill="rgb(209,216,25)" rx="2" ry="2" />
<text  x="787.38" y="495.5" >serv..</text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="41.6" y="293" width="0.2" height="15.0" fill="rgb(232,110,25)" rx="2" ry="2" />
<text  x="44.61" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::signal_pollfn::poll (1 samples, 0.02%)</title><rect x="1167.1" y="629" width="0.2" height="15.0" fill="rgb(226,29,21)" rx="2" ry="2" />
<text  x="1170.10" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1166.6" y="613" width="0.3" height="15.0" fill="rgb(254,45,22)" rx="2" ry="2" />
<text  x="1169.64" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="767.2" y="485" width="0.5" height="15.0" fill="rgb(228,25,39)" rx="2" ry="2" />
<text  x="770.20" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="670.5" y="597" width="0.3" height="15.0" fill="rgb(248,17,53)" rx="2" ry="2" />
<text  x="673.54" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (3 samples, 0.06%)</title><rect x="35.7" y="373" width="0.6" height="15.0" fill="rgb(238,210,3)" rx="2" ry="2" />
<text  x="38.65" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="704.0" y="565" width="0.4" height="15.0" fill="rgb(246,209,40)" rx="2" ry="2" />
<text  x="706.98" y="575.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="802.2" y="261" width="1.4" height="15.0" fill="rgb(249,93,16)" rx="2" ry="2" />
<text  x="805.24" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (44 samples, 0.85%)</title><rect x="896.1" y="437" width="10.1" height="15.0" fill="rgb(208,145,8)" rx="2" ry="2" />
<text  x="899.15" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="841.9" y="469" width="0.4" height="15.0" fill="rgb(225,110,8)" rx="2" ry="2" />
<text  x="844.86" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="553.3" y="421" width="0.2" height="15.0" fill="rgb(236,188,34)" rx="2" ry="2" />
<text  x="556.28" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="113.8" y="597" width="0.2" height="15.0" fill="rgb(219,51,4)" rx="2" ry="2" />
<text  x="116.75" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (88 samples, 1.71%)</title><rect x="892.9" y="517" width="20.2" height="15.0" fill="rgb(212,190,52)" rx="2" ry="2" />
<text  x="895.94" y="527.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1126.1" y="309" width="0.2" height="15.0" fill="rgb(233,52,26)" rx="2" ry="2" />
<text  x="1129.10" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="43.9" y="277" width="0.2" height="15.0" fill="rgb(227,114,43)" rx="2" ry="2" />
<text  x="46.90" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%)</title><rect x="417.5" y="309" width="0.2" height="15.0" fill="rgb(220,108,48)" rx="2" ry="2" />
<text  x="420.46" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="946.3" y="453" width="0.5" height="15.0" fill="rgb(232,85,50)" rx="2" ry="2" />
<text  x="949.30" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="820.1" y="389" width="0.2" height="15.0" fill="rgb(217,117,38)" rx="2" ry="2" />
<text  x="823.10" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (70 samples, 1.36%)</title><rect x="895.7" y="485" width="16.0" height="15.0" fill="rgb(252,127,44)" rx="2" ry="2" />
<text  x="898.69" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="49.6" y="197" width="0.3" height="15.0" fill="rgb(232,102,7)" rx="2" ry="2" />
<text  x="52.62" y="207.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (15 samples, 0.29%)</title><rect x="756.7" y="437" width="3.4" height="15.0" fill="rgb(210,139,46)" rx="2" ry="2" />
<text  x="759.66" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="494.9" y="405" width="0.9" height="15.0" fill="rgb(208,176,51)" rx="2" ry="2" />
<text  x="497.87" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="76.2" y="501" width="0.2" height="15.0" fill="rgb(217,134,32)" rx="2" ry="2" />
<text  x="79.19" y="511.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (12 samples, 0.23%)</title><rect x="201.5" y="357" width="2.7" height="15.0" fill="rgb(239,162,41)" rx="2" ry="2" />
<text  x="204.48" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="642.8" y="597" width="0.3" height="15.0" fill="rgb(241,152,32)" rx="2" ry="2" />
<text  x="645.83" y="607.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="275.7" y="229" width="0.4" height="15.0" fill="rgb(244,209,13)" rx="2" ry="2" />
<text  x="278.68" y="239.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="835.0" y="405" width="0.5" height="15.0" fill="rgb(215,171,49)" rx="2" ry="2" />
<text  x="837.99" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1141.4" y="613" width="0.3" height="15.0" fill="rgb(249,183,42)" rx="2" ry="2" />
<text  x="1144.44" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%)</title><rect x="139.9" y="485" width="0.7" height="15.0" fill="rgb(221,123,14)" rx="2" ry="2" />
<text  x="142.86" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.04%)</title><rect x="1169.2" y="741" width="0.4" height="15.0" fill="rgb(207,194,47)" rx="2" ry="2" />
<text  x="1172.16" y="751.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="709" width="0.2" height="15.0" fill="rgb(217,183,5)" rx="2" ry="2" />
<text  x="13.69" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="44.1" y="389" width="0.3" height="15.0" fill="rgb(224,6,16)" rx="2" ry="2" />
<text  x="47.13" y="399.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%)</title><rect x="113.3" y="389" width="0.2" height="15.0" fill="rgb(231,18,54)" rx="2" ry="2" />
<text  x="116.30" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="599.3" y="453" width="0.5" height="15.0" fill="rgb(227,34,7)" rx="2" ry="2" />
<text  x="602.31" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="833.8" y="437" width="0.3" height="15.0" fill="rgb(249,120,23)" rx="2" ry="2" />
<text  x="836.85" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1123.4" y="277" width="0.2" height="15.0" fill="rgb(225,53,49)" rx="2" ry="2" />
<text  x="1126.35" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (270 samples, 5.24%)</title><rect x="775.2" y="517" width="61.9" height="15.0" fill="rgb(210,13,35)" rx="2" ry="2" />
<text  x="778.21" y="527.5" >servic..</text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (12 samples, 0.23%)</title><rect x="103.4" y="549" width="2.8" height="15.0" fill="rgb(224,6,5)" rx="2" ry="2" />
<text  x="106.45" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (539 samples, 10.46%)</title><rect x="968.3" y="485" width="123.4" height="15.0" fill="rgb(217,5,47)" rx="2" ry="2" />
<text  x="971.29" y="495.5" >service::storag..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (20 samples, 0.39%)</title><rect x="279.1" y="309" width="4.6" height="15.0" fill="rgb(214,184,54)" rx="2" ry="2" />
<text  x="282.12" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (3 samples, 0.06%)</title><rect x="122.5" y="581" width="0.6" height="15.0" fill="rgb(234,122,23)" rx="2" ry="2" />
<text  x="125.46" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.10%)</title><rect x="40.0" y="325" width="1.1" height="15.0" fill="rgb(252,46,21)" rx="2" ry="2" />
<text  x="43.00" y="335.5" ></text>
</g>
<g >
<title>database::close_tables (1 samples, 0.02%)</title><rect x="112.8" y="597" width="0.3" height="15.0" fill="rgb(235,104,24)" rx="2" ry="2" />
<text  x="115.84" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.2" y="341" width="0.3" height="15.0" fill="rgb(212,45,12)" rx="2" ry="2" />
<text  x="62.24" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="74.6" y="485" width="0.2" height="15.0" fill="rgb(221,167,19)" rx="2" ry="2" />
<text  x="77.59" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="666.2" y="565" width="0.2" height="15.0" fill="rgb(246,209,16)" rx="2" ry="2" />
<text  x="669.19" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.12%)</title><rect x="291.9" y="293" width="1.4" height="15.0" fill="rgb(246,221,11)" rx="2" ry="2" />
<text  x="294.94" y="303.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (3 samples, 0.06%)</title><rect x="1128.6" y="389" width="0.7" height="15.0" fill="rgb(225,187,24)" rx="2" ry="2" />
<text  x="1131.62" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (37 samples, 0.72%)</title><rect x="1170.5" y="741" width="8.5" height="15.0" fill="rgb(252,137,50)" rx="2" ry="2" />
<text  x="1173.53" y="751.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%)</title><rect x="30.8" y="373" width="0.3" height="15.0" fill="rgb(218,154,5)" rx="2" ry="2" />
<text  x="33.84" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="77.3" y="501" width="0.3" height="15.0" fill="rgb(235,162,16)" rx="2" ry="2" />
<text  x="80.34" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.4" y="293" width="0.2" height="15.0" fill="rgb(247,73,51)" rx="2" ry="2" />
<text  x="49.42" y="303.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="309" width="0.5" height="15.0" fill="rgb(243,35,15)" rx="2" ry="2" />
<text  x="52.62" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::recreate_current_row (1 samples, 0.02%)</title><rect x="18.9" y="661" width="0.3" height="15.0" fill="rgb(231,18,18)" rx="2" ry="2" />
<text  x="21.93" y="671.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="595.6" y="453" width="2.1" height="15.0" fill="rgb(205,87,22)" rx="2" ry="2" />
<text  x="598.65" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="53.3" y="277" width="0.2" height="15.0" fill="rgb(244,5,36)" rx="2" ry="2" />
<text  x="56.29" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.7" y="357" width="0.2" height="15.0" fill="rgb(226,83,54)" rx="2" ry="2" />
<text  x="62.70" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (283 samples, 5.49%)</title><rect x="18.0" y="693" width="64.8" height="15.0" fill="rgb(209,115,11)" rx="2" ry="2" />
<text  x="21.02" y="703.5" >seastar..</text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="221.6" y="325" width="1.2" height="15.0" fill="rgb(237,164,15)" rx="2" ry="2" />
<text  x="224.63" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (497 samples, 9.65%)</title><rect x="338.9" y="421" width="113.8" height="15.0" fill="rgb(212,34,9)" rx="2" ry="2" />
<text  x="341.90" y="431.5" >std::__invoke_..</text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1 samples, 0.02%)</title><rect x="823.8" y="453" width="0.2" height="15.0" fill="rgb(251,131,24)" rx="2" ry="2" />
<text  x="826.77" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="587.2" y="421" width="0.2" height="15.0" fill="rgb(236,94,45)" rx="2" ry="2" />
<text  x="590.17" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="870.7" y="597" width="0.3" height="15.0" fill="rgb(244,59,46)" rx="2" ry="2" />
<text  x="873.72" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1135.3" y="245" width="0.2" height="15.0" fill="rgb(213,116,4)" rx="2" ry="2" />
<text  x="1138.26" y="255.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="554.0" y="405" width="0.2" height="15.0" fill="rgb(217,124,35)" rx="2" ry="2" />
<text  x="556.96" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.08%)</title><rect x="991.2" y="373" width="0.9" height="15.0" fill="rgb(240,59,34)" rx="2" ry="2" />
<text  x="994.20" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="998.1" y="373" width="0.2" height="15.0" fill="rgb(228,131,13)" rx="2" ry="2" />
<text  x="1001.07" y="383.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%)</title><rect x="302.3" y="325" width="0.2" height="15.0" fill="rgb(233,19,25)" rx="2" ry="2" />
<text  x="305.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="671.0" y="597" width="0.2" height="15.0" fill="rgb(205,196,52)" rx="2" ry="2" />
<text  x="674.00" y="607.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="534.7" y="277" width="0.3" height="15.0" fill="rgb(208,45,2)" rx="2" ry="2" />
<text  x="537.72" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.2" y="501" width="0.2" height="15.0" fill="rgb(210,220,42)" rx="2" ry="2" />
<text  x="22.16" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="115.6" y="421" width="0.2" height="15.0" fill="rgb(229,32,0)" rx="2" ry="2" />
<text  x="118.59" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="863.6" y="565" width="0.5" height="15.0" fill="rgb(211,229,3)" rx="2" ry="2" />
<text  x="866.62" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="632.8" y="501" width="0.2" height="15.0" fill="rgb(246,57,53)" rx="2" ry="2" />
<text  x="635.75" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.12%)</title><rect x="633.9" y="549" width="1.4" height="15.0" fill="rgb(253,148,4)" rx="2" ry="2" />
<text  x="636.90" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.2" y="357" width="0.2" height="15.0" fill="rgb(216,153,53)" rx="2" ry="2" />
<text  x="52.17" y="367.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="935.1" y="517" width="0.9" height="15.0" fill="rgb(244,148,6)" rx="2" ry="2" />
<text  x="938.08" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="171.0" y="533" width="0.5" height="15.0" fill="rgb(237,11,18)" rx="2" ry="2" />
<text  x="174.01" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="86.5" y="565" width="0.2" height="15.0" fill="rgb(249,59,8)" rx="2" ry="2" />
<text  x="89.50" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (21 samples, 0.41%)</title><rect x="51.7" y="405" width="4.8" height="15.0" fill="rgb(215,158,26)" rx="2" ry="2" />
<text  x="54.68" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="597.9" y="469" width="0.7" height="15.0" fill="rgb(223,182,1)" rx="2" ry="2" />
<text  x="600.94" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (2 samples, 0.04%)</title><rect x="975.9" y="469" width="0.4" height="15.0" fill="rgb(244,146,14)" rx="2" ry="2" />
<text  x="978.85" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="55.8" y="341" width="0.5" height="15.0" fill="rgb(241,9,2)" rx="2" ry="2" />
<text  x="58.81" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="876.4" y="389" width="0.3" height="15.0" fill="rgb(217,212,52)" rx="2" ry="2" />
<text  x="879.45" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.6" y="293" width="0.2" height="15.0" fill="rgb(225,126,47)" rx="2" ry="2" />
<text  x="50.56" y="303.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (4 samples, 0.08%)</title><rect x="1158.9" y="581" width="0.9" height="15.0" fill="rgb(230,194,37)" rx="2" ry="2" />
<text  x="1161.85" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="872.1" y="485" width="0.2" height="15.0" fill="rgb(205,141,12)" rx="2" ry="2" />
<text  x="875.10" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (269 samples, 5.22%)</title><rect x="21.2" y="629" width="61.6" height="15.0" fill="rgb(247,66,43)" rx="2" ry="2" />
<text  x="24.22" y="639.5" >single..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="36.3" y="373" width="0.3" height="15.0" fill="rgb(213,109,11)" rx="2" ry="2" />
<text  x="39.34" y="383.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (254 samples, 4.93%)</title><rect x="490.7" y="453" width="58.2" height="15.0" fill="rgb(254,161,1)" rx="2" ry="2" />
<text  x="493.75" y="463.5" >memtab..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="341" width="0.2" height="15.0" fill="rgb(240,43,42)" rx="2" ry="2" />
<text  x="60.87" y="351.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="684.5" y="597" width="0.2" height="15.0" fill="rgb(221,227,19)" rx="2" ry="2" />
<text  x="687.51" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="672.1" y="549" width="0.3" height="15.0" fill="rgb(206,120,23)" rx="2" ry="2" />
<text  x="675.15" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="729.4" y="533" width="0.2" height="15.0" fill="rgb(242,98,47)" rx="2" ry="2" />
<text  x="732.41" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (5 samples, 0.10%)</title><rect x="1135.3" y="277" width="1.1" height="15.0" fill="rgb(216,166,28)" rx="2" ry="2" />
<text  x="1138.26" y="287.5" ></text>
</g>
<g >
<title>query::result::builder::builder (12 samples, 0.23%)</title><rect x="614.0" y="533" width="2.7" height="15.0" fill="rgb(228,22,29)" rx="2" ry="2" />
<text  x="616.97" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="646.3" y="597" width="0.2" height="15.0" fill="rgb(226,114,35)" rx="2" ry="2" />
<text  x="649.27" y="607.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="876.4" y="341" width="0.3" height="15.0" fill="rgb(221,90,5)" rx="2" ry="2" />
<text  x="879.45" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="577.6" y="421" width="0.2" height="15.0" fill="rgb(224,204,6)" rx="2" ry="2" />
<text  x="580.55" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="114.4" y="533" width="0.3" height="15.0" fill="rgb(220,44,12)" rx="2" ry="2" />
<text  x="117.44" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (38 samples, 0.74%)</title><rect x="710.9" y="581" width="8.7" height="15.0" fill="rgb(221,11,6)" rx="2" ry="2" />
<text  x="713.85" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="19.2" y="421" width="0.2" height="15.0" fill="rgb(222,223,47)" rx="2" ry="2" />
<text  x="22.16" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="188.2" y="405" width="0.2" height="15.0" fill="rgb(240,59,36)" rx="2" ry="2" />
<text  x="191.19" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.7" y="373" width="0.2" height="15.0" fill="rgb(208,121,17)" rx="2" ry="2" />
<text  x="62.70" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%)</title><rect x="588.8" y="453" width="0.2" height="15.0" fill="rgb(222,106,51)" rx="2" ry="2" />
<text  x="591.78" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (4 samples, 0.08%)</title><rect x="379.9" y="293" width="0.9" height="15.0" fill="rgb(211,42,45)" rx="2" ry="2" />
<text  x="382.90" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="1050.1" y="453" width="1.3" height="15.0" fill="rgb(228,103,41)" rx="2" ry="2" />
<text  x="1053.06" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="533" width="0.2" height="15.0" fill="rgb(231,160,41)" rx="2" ry="2" />
<text  x="1170.78" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="520.5" y="421" width="0.3" height="15.0" fill="rgb(217,213,6)" rx="2" ry="2" />
<text  x="523.52" y="431.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.08%)</title><rect x="1122.7" y="341" width="0.9" height="15.0" fill="rgb(213,51,44)" rx="2" ry="2" />
<text  x="1125.66" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="389" width="0.2" height="15.0" fill="rgb(247,93,21)" rx="2" ry="2" />
<text  x="83.09" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1115.1" y="533" width="0.2" height="15.0" fill="rgb(235,149,16)" rx="2" ry="2" />
<text  x="1118.10" y="543.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="581" width="9.4" height="15.0" fill="rgb(217,47,50)" rx="2" ry="2" />
<text  x="1132.31" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="114.4" y="549" width="0.3" height="15.0" fill="rgb(220,37,0)" rx="2" ry="2" />
<text  x="117.44" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="633.0" y="533" width="0.2" height="15.0" fill="rgb(232,25,5)" rx="2" ry="2" />
<text  x="635.98" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (2 samples, 0.04%)</title><rect x="86.0" y="581" width="0.5" height="15.0" fill="rgb(208,72,6)" rx="2" ry="2" />
<text  x="89.04" y="591.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%)</title><rect x="84.0" y="485" width="0.2" height="15.0" fill="rgb(209,94,38)" rx="2" ry="2" />
<text  x="86.98" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="685.2" y="597" width="0.2" height="15.0" fill="rgb(217,43,52)" rx="2" ry="2" />
<text  x="688.20" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%)</title><rect x="586.3" y="405" width="0.2" height="15.0" fill="rgb(218,33,11)" rx="2" ry="2" />
<text  x="589.26" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="39.5" y="421" width="0.3" height="15.0" fill="rgb(216,139,5)" rx="2" ry="2" />
<text  x="42.55" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.14%)</title><rect x="1007.5" y="357" width="1.6" height="15.0" fill="rgb(219,170,6)" rx="2" ry="2" />
<text  x="1010.46" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (1 samples, 0.02%)</title><rect x="51.5" y="309" width="0.2" height="15.0" fill="rgb(232,33,44)" rx="2" ry="2" />
<text  x="54.46" y="319.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="435.1" y="341" width="0.2" height="15.0" fill="rgb(208,49,31)" rx="2" ry="2" />
<text  x="438.09" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="548.9" y="453" width="0.3" height="15.0" fill="rgb(233,75,16)" rx="2" ry="2" />
<text  x="551.92" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="721.8" y="517" width="0.3" height="15.0" fill="rgb(232,125,47)" rx="2" ry="2" />
<text  x="724.85" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="949.7" y="517" width="0.3" height="15.0" fill="rgb(240,193,30)" rx="2" ry="2" />
<text  x="952.74" y="527.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="113.3" y="373" width="0.2" height="15.0" fill="rgb(253,134,36)" rx="2" ry="2" />
<text  x="116.30" y="383.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="115.4" y="373" width="0.2" height="15.0" fill="rgb(222,80,40)" rx="2" ry="2" />
<text  x="118.36" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="934.4" y="501" width="0.5" height="15.0" fill="rgb(215,129,37)" rx="2" ry="2" />
<text  x="937.39" y="511.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (1 samples, 0.02%)</title><rect x="83.1" y="725" width="0.2" height="15.0" fill="rgb(231,88,33)" rx="2" ry="2" />
<text  x="86.06" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.10%)</title><rect x="47.1" y="405" width="1.1" height="15.0" fill="rgb(234,148,48)" rx="2" ry="2" />
<text  x="50.10" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="41.6" y="309" width="0.2" height="15.0" fill="rgb(237,24,27)" rx="2" ry="2" />
<text  x="44.61" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="485" width="9.4" height="15.0" fill="rgb(217,204,1)" rx="2" ry="2" />
<text  x="1132.31" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="59.5" y="389" width="0.2" height="15.0" fill="rgb(239,192,49)" rx="2" ry="2" />
<text  x="62.47" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="529.5" y="373" width="0.2" height="15.0" fill="rgb(235,213,4)" rx="2" ry="2" />
<text  x="532.46" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (63 samples, 1.22%)</title><rect x="526.2" y="405" width="14.5" height="15.0" fill="rgb(250,156,39)" rx="2" ry="2" />
<text  x="529.25" y="415.5" ></text>
</g>
<g >
<title>fmt::v7::detail::write&lt;char, char, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(236,30,19)" rx="2" ry="2" />
<text  x="13.92" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="452.5" y="389" width="0.2" height="15.0" fill="rgb(211,79,53)" rx="2" ry="2" />
<text  x="455.50" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="938.5" y="501" width="0.2" height="15.0" fill="rgb(247,10,22)" rx="2" ry="2" />
<text  x="941.52" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="781.6" y="469" width="0.3" height="15.0" fill="rgb(243,39,32)" rx="2" ry="2" />
<text  x="784.63" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="58.3" y="437" width="0.3" height="15.0" fill="rgb(223,227,24)" rx="2" ry="2" />
<text  x="61.33" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (2 samples, 0.04%)</title><rect x="1085.1" y="405" width="0.5" height="15.0" fill="rgb(252,45,50)" rx="2" ry="2" />
<text  x="1088.10" y="415.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="18.0" y="661" width="0.2" height="15.0" fill="rgb(249,91,40)" rx="2" ry="2" />
<text  x="21.02" y="671.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%)</title><rect x="202.6" y="341" width="0.7" height="15.0" fill="rgb(210,144,18)" rx="2" ry="2" />
<text  x="205.62" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="53.3" y="293" width="0.2" height="15.0" fill="rgb(234,197,40)" rx="2" ry="2" />
<text  x="56.29" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.2" y="709" width="0.3" height="15.0" fill="rgb(212,135,22)" rx="2" ry="2" />
<text  x="13.23" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (15 samples, 0.29%)</title><rect x="873.7" y="469" width="3.4" height="15.0" fill="rgb(210,22,2)" rx="2" ry="2" />
<text  x="876.70" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="267.7" y="213" width="0.2" height="15.0" fill="rgb(222,107,3)" rx="2" ry="2" />
<text  x="270.67" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (2 samples, 0.04%)</title><rect x="26.7" y="341" width="0.5" height="15.0" fill="rgb(235,124,39)" rx="2" ry="2" />
<text  x="29.72" y="351.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="229.0" y="309" width="0.2" height="15.0" fill="rgb(233,38,47)" rx="2" ry="2" />
<text  x="231.96" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="437.2" y="341" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="440.15" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="870.7" y="581" width="0.3" height="15.0" fill="rgb(220,32,49)" rx="2" ry="2" />
<text  x="873.72" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="912.2" y="485" width="0.2" height="15.0" fill="rgb(240,105,21)" rx="2" ry="2" />
<text  x="915.18" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (6 samples, 0.12%)</title><rect x="281.4" y="277" width="1.4" height="15.0" fill="rgb(212,182,24)" rx="2" ry="2" />
<text  x="284.41" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;partition_snapshot_row_cursor::position_in_version, 2ul&gt;::emplace_back&lt;partition_snapshot_row_cursor::position_in_version const&amp;&gt; (1 samples, 0.02%)</title><rect x="18.9" y="645" width="0.3" height="15.0" fill="rgb(233,192,50)" rx="2" ry="2" />
<text  x="21.93" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="55.6" y="357" width="0.7" height="15.0" fill="rgb(234,12,46)" rx="2" ry="2" />
<text  x="58.58" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="570.7" y="517" width="0.2" height="15.0" fill="rgb(217,121,18)" rx="2" ry="2" />
<text  x="573.68" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (4 samples, 0.08%)</title><rect x="808.0" y="229" width="0.9" height="15.0" fill="rgb(232,107,36)" rx="2" ry="2" />
<text  x="810.97" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.12%)</title><rect x="328.1" y="389" width="1.4" height="15.0" fill="rgb(226,77,49)" rx="2" ry="2" />
<text  x="331.13" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="75.3" y="421" width="0.2" height="15.0" fill="rgb(212,161,40)" rx="2" ry="2" />
<text  x="78.28" y="431.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="898.4" y="421" width="0.3" height="15.0" fill="rgb(219,80,37)" rx="2" ry="2" />
<text  x="901.44" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.9" y="405" width="0.3" height="15.0" fill="rgb(234,91,26)" rx="2" ry="2" />
<text  x="62.93" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="854.0" y="437" width="0.2" height="15.0" fill="rgb(238,81,50)" rx="2" ry="2" />
<text  x="857.00" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="692.8" y="565" width="0.4" height="15.0" fill="rgb(249,9,23)" rx="2" ry="2" />
<text  x="695.76" y="575.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="721.8" y="533" width="0.3" height="15.0" fill="rgb(230,77,42)" rx="2" ry="2" />
<text  x="724.85" y="543.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%)</title><rect x="146.5" y="565" width="0.2" height="15.0" fill="rgb(251,53,41)" rx="2" ry="2" />
<text  x="149.51" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="494.4" y="437" width="0.2" height="15.0" fill="rgb(248,4,11)" rx="2" ry="2" />
<text  x="497.41" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="58.3" y="421" width="0.3" height="15.0" fill="rgb(212,175,39)" rx="2" ry="2" />
<text  x="61.33" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="79.2" y="565" width="0.2" height="15.0" fill="rgb(238,86,46)" rx="2" ry="2" />
<text  x="82.17" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="193.9" y="373" width="0.5" height="15.0" fill="rgb(215,48,32)" rx="2" ry="2" />
<text  x="196.92" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="57.9" y="325" width="0.2" height="15.0" fill="rgb(248,175,11)" rx="2" ry="2" />
<text  x="60.87" y="335.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="547.3" y="437" width="0.3" height="15.0" fill="rgb(241,61,40)" rx="2" ry="2" />
<text  x="550.32" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%)</title><rect x="49.4" y="373" width="0.7" height="15.0" fill="rgb(215,122,1)" rx="2" ry="2" />
<text  x="52.39" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="568.6" y="437" width="1.6" height="15.0" fill="rgb(208,6,33)" rx="2" ry="2" />
<text  x="571.62" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(221,98,5)" rx="2" ry="2" />
<text  x="13.69" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="144.0" y="565" width="0.4" height="15.0" fill="rgb(245,216,19)" rx="2" ry="2" />
<text  x="146.99" y="575.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (25 samples, 0.49%)</title><rect x="927.1" y="501" width="5.7" height="15.0" fill="rgb(246,37,13)" rx="2" ry="2" />
<text  x="930.07" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (32 samples, 0.62%)</title><rect x="736.0" y="485" width="7.4" height="15.0" fill="rgb(231,179,16)" rx="2" ry="2" />
<text  x="739.05" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="953.9" y="501" width="0.2" height="15.0" fill="rgb(250,43,27)" rx="2" ry="2" />
<text  x="956.86" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="77.1" y="549" width="0.2" height="15.0" fill="rgb(236,119,22)" rx="2" ry="2" />
<text  x="80.11" y="559.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="26.9" y="309" width="0.3" height="15.0" fill="rgb(235,162,41)" rx="2" ry="2" />
<text  x="29.95" y="319.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%)</title><rect x="41.8" y="437" width="0.3" height="15.0" fill="rgb(229,48,34)" rx="2" ry="2" />
<text  x="44.84" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.08%)</title><rect x="1122.7" y="325" width="0.9" height="15.0" fill="rgb(207,18,18)" rx="2" ry="2" />
<text  x="1125.66" y="335.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1153.4" y="517" width="0.2" height="15.0" fill="rgb(215,185,32)" rx="2" ry="2" />
<text  x="1156.35" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (2 samples, 0.04%)</title><rect x="97.7" y="597" width="0.5" height="15.0" fill="rgb(233,49,32)" rx="2" ry="2" />
<text  x="100.72" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1041.1" y="357" width="0.5" height="15.0" fill="rgb(236,45,26)" rx="2" ry="2" />
<text  x="1044.13" y="367.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="494.2" y="437" width="0.2" height="15.0" fill="rgb(216,208,44)" rx="2" ry="2" />
<text  x="497.18" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (5 samples, 0.10%)</title><rect x="559.9" y="453" width="1.2" height="15.0" fill="rgb(237,0,25)" rx="2" ry="2" />
<text  x="562.92" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1085.6" y="405" width="0.2" height="15.0" fill="rgb(250,176,18)" rx="2" ry="2" />
<text  x="1088.56" y="415.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="721.8" y="421" width="0.3" height="15.0" fill="rgb(211,222,19)" rx="2" ry="2" />
<text  x="724.85" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="84.4" y="517" width="0.3" height="15.0" fill="rgb(211,220,27)" rx="2" ry="2" />
<text  x="87.44" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%)</title><rect x="639.4" y="549" width="0.2" height="15.0" fill="rgb(221,85,47)" rx="2" ry="2" />
<text  x="642.39" y="559.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (4 samples, 0.08%)</title><rect x="37.3" y="421" width="0.9" height="15.0" fill="rgb(247,29,4)" rx="2" ry="2" />
<text  x="40.26" y="431.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1135.3" y="261" width="0.2" height="15.0" fill="rgb(215,44,33)" rx="2" ry="2" />
<text  x="1138.26" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1037.9" y="373" width="0.2" height="15.0" fill="rgb(209,64,7)" rx="2" ry="2" />
<text  x="1040.92" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="293.3" y="325" width="0.5" height="15.0" fill="rgb(224,141,27)" rx="2" ry="2" />
<text  x="296.32" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="56.3" y="325" width="0.2" height="15.0" fill="rgb(221,218,12)" rx="2" ry="2" />
<text  x="59.27" y="335.5" ></text>
</g>
<g >
<title>query::result::builder::builder (1 samples, 0.02%)</title><rect x="611.9" y="549" width="0.2" height="15.0" fill="rgb(246,59,0)" rx="2" ry="2" />
<text  x="614.91" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="659.8" y="485" width="0.2" height="15.0" fill="rgb(212,116,24)" rx="2" ry="2" />
<text  x="662.78" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::get_arg&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;, int&gt; (1 samples, 0.02%)</title><rect x="20.8" y="597" width="0.2" height="15.0" fill="rgb(210,192,21)" rx="2" ry="2" />
<text  x="23.76" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.10%)</title><rect x="623.1" y="549" width="1.2" height="15.0" fill="rgb(233,37,37)" rx="2" ry="2" />
<text  x="626.13" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="38.2" y="437" width="0.2" height="15.0" fill="rgb(206,88,47)" rx="2" ry="2" />
<text  x="41.17" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%)</title><rect x="752.1" y="405" width="0.7" height="15.0" fill="rgb(232,20,13)" rx="2" ry="2" />
<text  x="755.08" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (218 samples, 4.23%)</title><rect x="995.1" y="437" width="49.9" height="15.0" fill="rgb(240,212,34)" rx="2" ry="2" />
<text  x="998.09" y="447.5" >servi..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.8" y="261" width="0.2" height="15.0" fill="rgb(248,228,2)" rx="2" ry="2" />
<text  x="28.80" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="721.8" y="325" width="0.3" height="15.0" fill="rgb(254,181,32)" rx="2" ry="2" />
<text  x="724.85" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (517 samples, 10.03%)</title><rect x="337.3" y="469" width="118.4" height="15.0" fill="rgb(212,186,28)" rx="2" ry="2" />
<text  x="340.29" y="479.5" >flat_mutation_..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (22 samples, 0.43%)</title><rect x="657.5" y="581" width="5.0" height="15.0" fill="rgb(246,193,52)" rx="2" ry="2" />
<text  x="660.49" y="591.5" ></text>
</g>
<g >
<title>cql3::prepare_context::clear_pk_function_calls_cache (1 samples, 0.02%)</title><rect x="68.2" y="565" width="0.2" height="15.0" fill="rgb(226,224,12)" rx="2" ry="2" />
<text  x="71.18" y="575.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="941.5" y="485" width="0.9" height="15.0" fill="rgb(208,142,32)" rx="2" ry="2" />
<text  x="944.49" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (2 samples, 0.04%)</title><rect x="818.5" y="389" width="0.5" height="15.0" fill="rgb(249,67,28)" rx="2" ry="2" />
<text  x="821.50" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="728.0" y="517" width="1.4" height="15.0" fill="rgb(249,218,50)" rx="2" ry="2" />
<text  x="731.03" y="527.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="1054.6" y="405" width="0.7" height="15.0" fill="rgb(237,219,18)" rx="2" ry="2" />
<text  x="1057.64" y="415.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (2 samples, 0.04%)</title><rect x="112.4" y="597" width="0.4" height="15.0" fill="rgb(226,12,2)" rx="2" ry="2" />
<text  x="115.38" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.39%)</title><rect x="1133.4" y="373" width="4.6" height="15.0" fill="rgb(251,99,4)" rx="2" ry="2" />
<text  x="1136.43" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (46 samples, 0.89%)</title><rect x="68.2" y="581" width="10.5" height="15.0" fill="rgb(246,79,47)" rx="2" ry="2" />
<text  x="71.18" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (93 samples, 1.81%)</title><rect x="187.5" y="421" width="21.3" height="15.0" fill="rgb(254,87,39)" rx="2" ry="2" />
<text  x="190.50" y="431.5" >m..</text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%)</title><rect x="1122.9" y="245" width="0.5" height="15.0" fill="rgb(215,38,33)" rx="2" ry="2" />
<text  x="1125.89" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%)</title><rect x="873.2" y="485" width="0.3" height="15.0" fill="rgb(207,148,20)" rx="2" ry="2" />
<text  x="876.24" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="564.5" y="517" width="0.2" height="15.0" fill="rgb(229,171,53)" rx="2" ry="2" />
<text  x="567.50" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="223.0" y="341" width="0.2" height="15.0" fill="rgb(238,122,2)" rx="2" ry="2" />
<text  x="226.00" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="213" width="0.5" height="15.0" fill="rgb(232,56,23)" rx="2" ry="2" />
<text  x="56.75" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="26.5" y="357" width="0.2" height="15.0" fill="rgb(251,166,42)" rx="2" ry="2" />
<text  x="29.49" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="696.4" y="597" width="0.3" height="15.0" fill="rgb(212,94,42)" rx="2" ry="2" />
<text  x="699.42" y="607.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (2 samples, 0.04%)</title><rect x="444.9" y="309" width="0.5" height="15.0" fill="rgb(214,140,15)" rx="2" ry="2" />
<text  x="447.94" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="634.8" y="485" width="0.2" height="15.0" fill="rgb(239,168,40)" rx="2" ry="2" />
<text  x="637.81" y="495.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="714.5" y="533" width="0.2" height="15.0" fill="rgb(225,199,34)" rx="2" ry="2" />
<text  x="717.52" y="543.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.08%)</title><rect x="615.6" y="485" width="0.9" height="15.0" fill="rgb(229,76,41)" rx="2" ry="2" />
<text  x="618.57" y="495.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="478.6" y="357" width="2.3" height="15.0" fill="rgb(232,11,2)" rx="2" ry="2" />
<text  x="481.61" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="557.6" y="373" width="0.5" height="15.0" fill="rgb(245,164,20)" rx="2" ry="2" />
<text  x="560.63" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::untyped_result_set, false&gt;::make&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="652.7" y="597" width="0.2" height="15.0" fill="rgb(217,206,22)" rx="2" ry="2" />
<text  x="655.68" y="607.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (13 samples, 0.25%)</title><rect x="486.2" y="405" width="2.9" height="15.0" fill="rgb(210,101,19)" rx="2" ry="2" />
<text  x="489.17" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="836.8" y="501" width="0.3" height="15.0" fill="rgb(242,223,4)" rx="2" ry="2" />
<text  x="839.82" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%)</title><rect x="967.4" y="485" width="0.4" height="15.0" fill="rgb(214,200,33)" rx="2" ry="2" />
<text  x="970.38" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="71.4" y="501" width="0.2" height="15.0" fill="rgb(253,35,32)" rx="2" ry="2" />
<text  x="74.38" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%)</title><rect x="1114.0" y="501" width="0.9" height="15.0" fill="rgb(249,207,1)" rx="2" ry="2" />
<text  x="1116.96" y="511.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (38 samples, 0.74%)</title><rect x="498.1" y="405" width="8.7" height="15.0" fill="rgb(233,154,40)" rx="2" ry="2" />
<text  x="501.08" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%)</title><rect x="139.9" y="501" width="0.7" height="15.0" fill="rgb(233,104,12)" rx="2" ry="2" />
<text  x="142.86" y="511.5" ></text>
</g>
<g >
<title>auth::resource::parent (11 samples, 0.21%)</title><rect x="791.9" y="437" width="2.6" height="15.0" fill="rgb(212,16,39)" rx="2" ry="2" />
<text  x="794.93" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="795.6" y="373" width="0.2" height="15.0" fill="rgb(225,4,42)" rx="2" ry="2" />
<text  x="798.60" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="141.7" y="565" width="0.7" height="15.0" fill="rgb(245,115,35)" rx="2" ry="2" />
<text  x="144.70" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="376.9" y="293" width="0.2" height="15.0" fill="rgb(231,134,5)" rx="2" ry="2" />
<text  x="379.92" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (59 samples, 1.15%)</title><rect x="194.6" y="389" width="13.5" height="15.0" fill="rgb(240,150,22)" rx="2" ry="2" />
<text  x="197.60" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="58.8" y="357" width="0.4" height="15.0" fill="rgb(212,44,5)" rx="2" ry="2" />
<text  x="61.78" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="1138.2" y="389" width="0.5" height="15.0" fill="rgb(241,9,45)" rx="2" ry="2" />
<text  x="1141.24" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="293" width="0.2" height="15.0" fill="rgb(227,162,1)" rx="2" ry="2" />
<text  x="60.87" y="303.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="114.9" y="405" width="0.2" height="15.0" fill="rgb(220,144,11)" rx="2" ry="2" />
<text  x="117.90" y="415.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_delete_visitor&gt; (1 samples, 0.02%)</title><rect x="114.4" y="501" width="0.3" height="15.0" fill="rgb(226,58,4)" rx="2" ry="2" />
<text  x="117.44" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="696.7" y="565" width="0.2" height="15.0" fill="rgb(237,189,11)" rx="2" ry="2" />
<text  x="699.65" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="959.6" y="501" width="0.4" height="15.0" fill="rgb(210,101,31)" rx="2" ry="2" />
<text  x="962.59" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1009.1" y="389" width="0.2" height="15.0" fill="rgb(215,94,34)" rx="2" ry="2" />
<text  x="1012.06" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="846.2" y="485" width="0.2" height="15.0" fill="rgb(207,172,17)" rx="2" ry="2" />
<text  x="849.22" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="813.2" y="213" width="0.5" height="15.0" fill="rgb(223,30,5)" rx="2" ry="2" />
<text  x="816.23" y="223.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.4" y="709" width="0.2" height="15.0" fill="rgb(234,156,5)" rx="2" ry="2" />
<text  x="14.37" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="62.0" y="437" width="0.2" height="15.0" fill="rgb(240,216,28)" rx="2" ry="2" />
<text  x="64.99" y="447.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="552.1" y="389" width="0.5" height="15.0" fill="rgb(207,122,7)" rx="2" ry="2" />
<text  x="555.13" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (8 samples, 0.16%)</title><rect x="652.9" y="613" width="1.8" height="15.0" fill="rgb(223,81,24)" rx="2" ry="2" />
<text  x="655.91" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.1" y="277" width="0.2" height="15.0" fill="rgb(230,144,34)" rx="2" ry="2" />
<text  x="64.08" y="287.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (547 samples, 10.62%)</title><rect x="335.0" y="501" width="125.3" height="15.0" fill="rgb(239,191,29)" rx="2" ry="2" />
<text  x="338.00" y="511.5" >query::consume_..</text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (2 samples, 0.04%)</title><rect x="433.9" y="325" width="0.5" height="15.0" fill="rgb(238,42,7)" rx="2" ry="2" />
<text  x="436.95" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="112.8" y="549" width="0.3" height="15.0" fill="rgb(225,167,34)" rx="2" ry="2" />
<text  x="115.84" y="559.5" ></text>
</g>
<g >
<title>auth::collect_roles (1 samples, 0.02%)</title><rect x="1167.8" y="389" width="0.2" height="15.0" fill="rgb(228,205,37)" rx="2" ry="2" />
<text  x="1170.78" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (3 samples, 0.06%)</title><rect x="738.8" y="405" width="0.7" height="15.0" fill="rgb(239,48,3)" rx="2" ry="2" />
<text  x="741.80" y="415.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%)</title><rect x="644.4" y="549" width="0.3" height="15.0" fill="rgb(238,172,48)" rx="2" ry="2" />
<text  x="647.43" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;set_type_impl, true&gt;::make&lt;seastar::shared_ptr&lt;abstract_type const&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="114.7" y="533" width="0.2" height="15.0" fill="rgb(222,169,54)" rx="2" ry="2" />
<text  x="117.67" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (7 samples, 0.14%)</title><rect x="822.2" y="437" width="1.6" height="15.0" fill="rgb(228,226,49)" rx="2" ry="2" />
<text  x="825.17" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (20 samples, 0.39%)</title><rect x="303.9" y="405" width="4.5" height="15.0" fill="rgb(214,33,27)" rx="2" ry="2" />
<text  x="306.85" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="269.3" y="261" width="0.7" height="15.0" fill="rgb(213,197,34)" rx="2" ry="2" />
<text  x="272.27" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (8 samples, 0.16%)</title><rect x="442.9" y="309" width="1.8" height="15.0" fill="rgb(252,3,6)" rx="2" ry="2" />
<text  x="445.88" y="319.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (3 samples, 0.06%)</title><rect x="1128.6" y="421" width="0.7" height="15.0" fill="rgb(243,99,33)" rx="2" ry="2" />
<text  x="1131.62" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.10%)</title><rect x="40.0" y="293" width="1.1" height="15.0" fill="rgb(239,153,28)" rx="2" ry="2" />
<text  x="43.00" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="23.7" y="421" width="0.3" height="15.0" fill="rgb(215,141,47)" rx="2" ry="2" />
<text  x="26.74" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%)</title><rect x="738.6" y="437" width="0.9" height="15.0" fill="rgb(254,133,7)" rx="2" ry="2" />
<text  x="741.57" y="447.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1136.9" y="293" width="0.2" height="15.0" fill="rgb(206,213,11)" rx="2" ry="2" />
<text  x="1139.86" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (7 samples, 0.14%)</title><rect x="316.7" y="469" width="1.6" height="15.0" fill="rgb(211,165,24)" rx="2" ry="2" />
<text  x="319.68" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="855.1" y="517" width="0.7" height="15.0" fill="rgb(222,34,36)" rx="2" ry="2" />
<text  x="858.15" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (26 samples, 0.50%)</title><rect x="944.0" y="533" width="6.0" height="15.0" fill="rgb(250,91,12)" rx="2" ry="2" />
<text  x="947.01" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6 samples, 0.12%)</title><rect x="1153.1" y="533" width="1.4" height="15.0" fill="rgb(253,215,23)" rx="2" ry="2" />
<text  x="1156.12" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (3 samples, 0.06%)</title><rect x="439.2" y="309" width="0.7" height="15.0" fill="rgb(207,175,6)" rx="2" ry="2" />
<text  x="442.22" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="585.8" y="389" width="0.5" height="15.0" fill="rgb(219,22,11)" rx="2" ry="2" />
<text  x="588.80" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="312.3" y="437" width="0.3" height="15.0" fill="rgb(217,97,7)" rx="2" ry="2" />
<text  x="315.33" y="447.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="660.0" y="485" width="0.2" height="15.0" fill="rgb(251,178,50)" rx="2" ry="2" />
<text  x="663.01" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="26.0" y="341" width="0.3" height="15.0" fill="rgb(210,45,48)" rx="2" ry="2" />
<text  x="29.03" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="487.1" y="373" width="0.2" height="15.0" fill="rgb(208,68,25)" rx="2" ry="2" />
<text  x="490.08" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%)</title><rect x="764.4" y="485" width="0.7" height="15.0" fill="rgb(211,194,1)" rx="2" ry="2" />
<text  x="767.45" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="561.8" y="517" width="0.6" height="15.0" fill="rgb(235,186,42)" rx="2" ry="2" />
<text  x="564.75" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mLETTER (2 samples, 0.04%)</title><rect x="34.0" y="373" width="0.5" height="15.0" fill="rgb(219,10,21)" rx="2" ry="2" />
<text  x="37.05" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="665.7" y="549" width="0.3" height="15.0" fill="rgb(252,39,9)" rx="2" ry="2" />
<text  x="668.73" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="274.3" y="245" width="0.5" height="15.0" fill="rgb(218,69,30)" rx="2" ry="2" />
<text  x="277.31" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="713.6" y="549" width="0.2" height="15.0" fill="rgb(237,206,16)" rx="2" ry="2" />
<text  x="716.60" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="81.0" y="485" width="0.2" height="15.0" fill="rgb(239,71,25)" rx="2" ry="2" />
<text  x="84.00" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="1162.5" y="597" width="1.2" height="15.0" fill="rgb(206,227,25)" rx="2" ry="2" />
<text  x="1165.52" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="78.7" y="501" width="0.2" height="15.0" fill="rgb(239,37,36)" rx="2" ry="2" />
<text  x="81.71" y="511.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (6 samples, 0.12%)</title><rect x="556.3" y="373" width="1.3" height="15.0" fill="rgb(232,140,12)" rx="2" ry="2" />
<text  x="559.25" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%)</title><rect x="750.9" y="469" width="0.3" height="15.0" fill="rgb(235,145,29)" rx="2" ry="2" />
<text  x="753.94" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="51.7" y="277" width="0.2" height="15.0" fill="rgb(239,201,11)" rx="2" ry="2" />
<text  x="54.68" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1090.6" y="469" width="0.5" height="15.0" fill="rgb(224,58,37)" rx="2" ry="2" />
<text  x="1093.60" y="479.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="859.5" y="469" width="1.6" height="15.0" fill="rgb(230,119,8)" rx="2" ry="2" />
<text  x="862.50" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1041.1" y="341" width="0.5" height="15.0" fill="rgb(249,58,54)" rx="2" ry="2" />
<text  x="1044.13" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="403.9" y="261" width="1.4" height="15.0" fill="rgb(234,5,39)" rx="2" ry="2" />
<text  x="406.94" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="657.0" y="581" width="0.5" height="15.0" fill="rgb(251,153,52)" rx="2" ry="2" />
<text  x="660.03" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.1" y="405" width="0.4" height="15.0" fill="rgb(228,51,15)" rx="2" ry="2" />
<text  x="42.09" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="62.9" y="389" width="0.2" height="15.0" fill="rgb(207,203,43)" rx="2" ry="2" />
<text  x="65.91" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="821.0" y="373" width="0.5" height="15.0" fill="rgb(233,45,47)" rx="2" ry="2" />
<text  x="824.02" y="383.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (2 samples, 0.04%)</title><rect x="449.8" y="357" width="0.4" height="15.0" fill="rgb(237,193,20)" rx="2" ry="2" />
<text  x="452.75" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="55.6" y="373" width="0.7" height="15.0" fill="rgb(233,208,13)" rx="2" ry="2" />
<text  x="58.58" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="46.0" y="357" width="0.2" height="15.0" fill="rgb(241,222,48)" rx="2" ry="2" />
<text  x="48.96" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="297.7" y="325" width="0.2" height="15.0" fill="rgb(250,37,26)" rx="2" ry="2" />
<text  x="300.67" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="549" width="0.2" height="15.0" fill="rgb(208,33,8)" rx="2" ry="2" />
<text  x="699.20" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="818.3" y="373" width="0.2" height="15.0" fill="rgb(237,178,17)" rx="2" ry="2" />
<text  x="821.27" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="37.5" y="405" width="0.4" height="15.0" fill="rgb(253,170,3)" rx="2" ry="2" />
<text  x="40.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::drain_cross_cpu_freelist (1 samples, 0.02%)</title><rect x="1167.3" y="613" width="0.3" height="15.0" fill="rgb(215,149,52)" rx="2" ry="2" />
<text  x="1170.33" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1067.0" y="405" width="0.5" height="15.0" fill="rgb(253,185,13)" rx="2" ry="2" />
<text  x="1070.01" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::obtain_permit (1 samples, 0.02%)</title><rect x="113.1" y="341" width="0.2" height="15.0" fill="rgb(243,6,0)" rx="2" ry="2" />
<text  x="116.07" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="696.7" y="517" width="0.2" height="15.0" fill="rgb(252,76,29)" rx="2" ry="2" />
<text  x="699.65" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (14 samples, 0.27%)</title><rect x="83.8" y="677" width="3.2" height="15.0" fill="rgb(227,168,8)" rx="2" ry="2" />
<text  x="86.75" y="687.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="699.9" y="581" width="0.2" height="15.0" fill="rgb(249,85,40)" rx="2" ry="2" />
<text  x="702.86" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="447.9" y="357" width="0.2" height="15.0" fill="rgb(214,203,14)" rx="2" ry="2" />
<text  x="450.92" y="367.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="822.4" y="421" width="0.5" height="15.0" fill="rgb(244,152,12)" rx="2" ry="2" />
<text  x="825.40" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="47.6" y="245" width="0.2" height="15.0" fill="rgb(208,67,41)" rx="2" ry="2" />
<text  x="50.56" y="255.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (4 samples, 0.08%)</title><rect x="874.6" y="389" width="0.9" height="15.0" fill="rgb(247,220,48)" rx="2" ry="2" />
<text  x="877.62" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (4 samples, 0.08%)</title><rect x="938.7" y="501" width="1.0" height="15.0" fill="rgb(231,132,53)" rx="2" ry="2" />
<text  x="941.75" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="819.2" y="389" width="0.4" height="15.0" fill="rgb(210,138,3)" rx="2" ry="2" />
<text  x="822.19" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (4 samples, 0.08%)</title><rect x="751.9" y="437" width="0.9" height="15.0" fill="rgb(244,191,37)" rx="2" ry="2" />
<text  x="754.85" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="903.5" y="421" width="0.7" height="15.0" fill="rgb(227,176,32)" rx="2" ry="2" />
<text  x="906.47" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="702.6" y="565" width="0.2" height="15.0" fill="rgb(229,14,2)" rx="2" ry="2" />
<text  x="705.61" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (3 samples, 0.06%)</title><rect x="137.6" y="485" width="0.7" height="15.0" fill="rgb(239,132,41)" rx="2" ry="2" />
<text  x="140.57" y="495.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%)</title><rect x="41.8" y="453" width="0.3" height="15.0" fill="rgb(250,177,34)" rx="2" ry="2" />
<text  x="44.84" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="954.5" y="453" width="0.3" height="15.0" fill="rgb(232,148,44)" rx="2" ry="2" />
<text  x="957.55" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="693.7" y="565" width="0.2" height="15.0" fill="rgb(249,136,28)" rx="2" ry="2" />
<text  x="696.68" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="55.8" y="293" width="0.5" height="15.0" fill="rgb(208,127,34)" rx="2" ry="2" />
<text  x="58.81" y="303.5" ></text>
</g>
<g >
<title>do_cql_test (276 samples, 5.36%)</title><rect x="19.6" y="661" width="63.2" height="15.0" fill="rgb(217,197,19)" rx="2" ry="2" />
<text  x="22.62" y="671.5" >do_cql..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="51.7" y="325" width="0.4" height="15.0" fill="rgb(235,144,42)" rx="2" ry="2" />
<text  x="54.68" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (12 samples, 0.23%)</title><rect x="478.2" y="373" width="2.7" height="15.0" fill="rgb(208,172,25)" rx="2" ry="2" />
<text  x="481.15" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="77.3" y="533" width="0.3" height="15.0" fill="rgb(214,93,12)" rx="2" ry="2" />
<text  x="80.34" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (303 samples, 5.88%)</title><rect x="768.3" y="533" width="69.4" height="15.0" fill="rgb(243,58,20)" rx="2" ry="2" />
<text  x="771.34" y="543.5" >cql3::s..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (9 samples, 0.17%)</title><rect x="797.0" y="373" width="2.0" height="15.0" fill="rgb(245,63,34)" rx="2" ry="2" />
<text  x="799.97" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="457.3" y="437" width="0.5" height="15.0" fill="rgb(251,145,17)" rx="2" ry="2" />
<text  x="460.31" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="907.1" y="469" width="0.3" height="15.0" fill="rgb(207,226,3)" rx="2" ry="2" />
<text  x="910.14" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="742.9" y="405" width="0.5" height="15.0" fill="rgb(225,200,17)" rx="2" ry="2" />
<text  x="745.92" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="718.2" y="533" width="0.2" height="15.0" fill="rgb(214,172,40)" rx="2" ry="2" />
<text  x="721.18" y="543.5" ></text>
</g>
<g >
<title>CryptoPP::Weak1::MD5::~MD5 (1 samples, 0.02%)</title><rect x="10.0" y="725" width="0.2" height="15.0" fill="rgb(242,124,36)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="597.5" y="437" width="0.2" height="15.0" fill="rgb(246,2,49)" rx="2" ry="2" />
<text  x="600.48" y="447.5" ></text>
</g>
<g >
<title>abstract_type::to_string (1 samples, 0.02%)</title><rect x="115.6" y="341" width="0.2" height="15.0" fill="rgb(252,97,19)" rx="2" ry="2" />
<text  x="118.59" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="286.2" y="341" width="0.5" height="15.0" fill="rgb(242,195,50)" rx="2" ry="2" />
<text  x="289.22" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (20 samples, 0.39%)</title><rect x="392.7" y="277" width="4.6" height="15.0" fill="rgb(209,154,46)" rx="2" ry="2" />
<text  x="395.72" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="169.6" y="533" width="1.0" height="15.0" fill="rgb(249,220,29)" rx="2" ry="2" />
<text  x="172.64" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (8 samples, 0.16%)</title><rect x="678.1" y="597" width="1.8" height="15.0" fill="rgb(230,109,52)" rx="2" ry="2" />
<text  x="681.10" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(210,36,39)" rx="2" ry="2" />
<text  x="13.69" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="43.2" y="405" width="0.2" height="15.0" fill="rgb(226,184,9)" rx="2" ry="2" />
<text  x="46.21" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::batchlog (1 samples, 0.02%)</title><rect x="19.2" y="389" width="0.2" height="15.0" fill="rgb(207,13,15)" rx="2" ry="2" />
<text  x="22.16" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (5 samples, 0.10%)</title><rect x="84.7" y="485" width="1.1" height="15.0" fill="rgb(249,94,25)" rx="2" ry="2" />
<text  x="87.67" y="495.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1131.6" y="277" width="0.2" height="15.0" fill="rgb(246,156,28)" rx="2" ry="2" />
<text  x="1134.60" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (55 samples, 1.07%)</title><rect x="97.5" y="613" width="12.6" height="15.0" fill="rgb(228,147,17)" rx="2" ry="2" />
<text  x="100.49" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="832.2" y="405" width="0.3" height="15.0" fill="rgb(208,13,19)" rx="2" ry="2" />
<text  x="835.24" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="432.6" y="293" width="0.2" height="15.0" fill="rgb(210,57,32)" rx="2" ry="2" />
<text  x="435.57" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%)</title><rect x="815.1" y="341" width="0.9" height="15.0" fill="rgb(211,139,32)" rx="2" ry="2" />
<text  x="818.07" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="39.8" y="277" width="0.2" height="15.0" fill="rgb(229,206,28)" rx="2" ry="2" />
<text  x="42.77" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_impl::_Deque_impl (1 samples, 0.02%)</title><rect x="23.1" y="389" width="0.2" height="15.0" fill="rgb(226,96,53)" rx="2" ry="2" />
<text  x="26.06" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="1152.9" y="549" width="0.2" height="15.0" fill="rgb(223,56,3)" rx="2" ry="2" />
<text  x="1155.90" y="559.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="276.1" y="261" width="0.3" height="15.0" fill="rgb(241,61,27)" rx="2" ry="2" />
<text  x="279.14" y="271.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%)</title><rect x="10.9" y="597" width="0.2" height="15.0" fill="rgb(254,164,31)" rx="2" ry="2" />
<text  x="13.92" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (61 samples, 1.18%)</title><rect x="43.7" y="453" width="13.9" height="15.0" fill="rgb(224,86,35)" rx="2" ry="2" />
<text  x="46.67" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1135.7" y="181" width="0.2" height="15.0" fill="rgb(207,78,35)" rx="2" ry="2" />
<text  x="1138.72" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="458.2" y="485" width="0.5" height="15.0" fill="rgb(253,39,53)" rx="2" ry="2" />
<text  x="461.23" y="495.5" ></text>
</g>
<g >
<title>posix_memalign (5 samples, 0.10%)</title><rect x="259.0" y="197" width="1.1" height="15.0" fill="rgb(212,185,43)" rx="2" ry="2" />
<text  x="261.96" y="207.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%)</title><rect x="1168.2" y="597" width="0.3" height="15.0" fill="rgb(219,2,45)" rx="2" ry="2" />
<text  x="1171.24" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%)</title><rect x="1131.4" y="325" width="0.9" height="15.0" fill="rgb(225,151,2)" rx="2" ry="2" />
<text  x="1134.37" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="710.6" y="581" width="0.3" height="15.0" fill="rgb(250,145,7)" rx="2" ry="2" />
<text  x="713.62" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (123 samples, 2.39%)</title><rect x="573.4" y="533" width="28.2" height="15.0" fill="rgb(253,222,11)" rx="2" ry="2" />
<text  x="576.43" y="543.5" >s..</text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%)</title><rect x="365.9" y="277" width="0.9" height="15.0" fill="rgb(232,104,36)" rx="2" ry="2" />
<text  x="368.92" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="163.2" y="533" width="0.3" height="15.0" fill="rgb(212,125,7)" rx="2" ry="2" />
<text  x="166.23" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="133" width="0.5" height="15.0" fill="rgb(232,145,31)" rx="2" ry="2" />
<text  x="56.75" y="143.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (2 samples, 0.04%)</title><rect x="575.0" y="453" width="0.5" height="15.0" fill="rgb(235,202,11)" rx="2" ry="2" />
<text  x="578.03" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="871.0" y="469" width="0.2" height="15.0" fill="rgb(225,176,52)" rx="2" ry="2" />
<text  x="873.95" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="730.1" y="581" width="0.2" height="15.0" fill="rgb(229,15,28)" rx="2" ry="2" />
<text  x="733.09" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="906.9" y="453" width="0.2" height="15.0" fill="rgb(229,99,3)" rx="2" ry="2" />
<text  x="909.91" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%)</title><rect x="258.0" y="213" width="0.5" height="15.0" fill="rgb(216,60,12)" rx="2" ry="2" />
<text  x="261.05" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="779.3" y="437" width="0.3" height="15.0" fill="rgb(251,148,8)" rx="2" ry="2" />
<text  x="782.34" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="704.7" y="549" width="0.2" height="15.0" fill="rgb(206,85,1)" rx="2" ry="2" />
<text  x="707.67" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="63.8" y="485" width="0.3" height="15.0" fill="rgb(232,52,16)" rx="2" ry="2" />
<text  x="66.82" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="871.9" y="469" width="0.2" height="15.0" fill="rgb(254,223,27)" rx="2" ry="2" />
<text  x="874.87" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="40.7" y="261" width="0.4" height="15.0" fill="rgb(239,110,32)" rx="2" ry="2" />
<text  x="43.69" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="60.6" y="357" width="0.2" height="15.0" fill="rgb(222,85,3)" rx="2" ry="2" />
<text  x="63.62" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="545.0" y="421" width="0.3" height="15.0" fill="rgb(227,140,29)" rx="2" ry="2" />
<text  x="548.03" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%)</title><rect x="879.7" y="565" width="0.4" height="15.0" fill="rgb(247,180,8)" rx="2" ry="2" />
<text  x="882.65" y="575.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="568.6" y="453" width="1.6" height="15.0" fill="rgb(212,115,53)" rx="2" ry="2" />
<text  x="571.62" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.6" y="277" width="0.2" height="15.0" fill="rgb(213,127,49)" rx="2" ry="2" />
<text  x="44.61" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="571.8" y="533" width="0.5" height="15.0" fill="rgb(212,162,28)" rx="2" ry="2" />
<text  x="574.83" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1094.7" y="485" width="0.5" height="15.0" fill="rgb(215,21,50)" rx="2" ry="2" />
<text  x="1097.72" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="1166.9" y="549" width="0.2" height="15.0" fill="rgb(232,140,10)" rx="2" ry="2" />
<text  x="1169.87" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="947.4" y="453" width="0.7" height="15.0" fill="rgb(215,137,22)" rx="2" ry="2" />
<text  x="950.45" y="463.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="972.2" y="469" width="0.2" height="15.0" fill="rgb(205,156,37)" rx="2" ry="2" />
<text  x="975.19" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.14%)</title><rect x="946.8" y="469" width="1.6" height="15.0" fill="rgb(249,129,15)" rx="2" ry="2" />
<text  x="949.76" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.5" y="357" width="0.2" height="15.0" fill="rgb(233,144,12)" rx="2" ry="2" />
<text  x="62.47" y="367.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1086.5" y="405" width="0.2" height="15.0" fill="rgb(238,51,23)" rx="2" ry="2" />
<text  x="1089.48" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (586 samples, 11.37%)</title><rect x="960.0" y="501" width="134.3" height="15.0" fill="rgb(220,206,6)" rx="2" ry="2" />
<text  x="963.05" y="511.5" >service::storage..</text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (36 samples, 0.70%)</title><rect x="68.9" y="549" width="8.2" height="15.0" fill="rgb(247,37,23)" rx="2" ry="2" />
<text  x="71.86" y="559.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (6 samples, 0.12%)</title><rect x="814.6" y="373" width="1.4" height="15.0" fill="rgb(235,221,54)" rx="2" ry="2" />
<text  x="817.61" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1103.0" y="501" width="0.2" height="15.0" fill="rgb(241,142,47)" rx="2" ry="2" />
<text  x="1105.97" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="985.7" y="389" width="0.2" height="15.0" fill="rgb(238,55,46)" rx="2" ry="2" />
<text  x="988.70" y="399.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="525.6" y="405" width="0.6" height="15.0" fill="rgb(213,4,30)" rx="2" ry="2" />
<text  x="528.56" y="415.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="816.2" y="357" width="0.7" height="15.0" fill="rgb(222,106,4)" rx="2" ry="2" />
<text  x="819.21" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1153.6" y="501" width="0.9" height="15.0" fill="rgb(243,68,9)" rx="2" ry="2" />
<text  x="1156.58" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="698.0" y="597" width="0.7" height="15.0" fill="rgb(216,105,30)" rx="2" ry="2" />
<text  x="701.03" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="59.9" y="421" width="0.3" height="15.0" fill="rgb(230,75,54)" rx="2" ry="2" />
<text  x="62.93" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1143.0" y="581" width="0.3" height="15.0" fill="rgb(224,59,51)" rx="2" ry="2" />
<text  x="1146.05" y="591.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1027.4" y="245" width="0.2" height="15.0" fill="rgb(216,23,2)" rx="2" ry="2" />
<text  x="1030.38" y="255.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="720.9" y="597" width="0.3" height="15.0" fill="rgb(218,214,0)" rx="2" ry="2" />
<text  x="723.93" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%)</title><rect x="416.1" y="325" width="0.2" height="15.0" fill="rgb(247,92,43)" rx="2" ry="2" />
<text  x="419.08" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="693.9" y="549" width="0.5" height="15.0" fill="rgb(226,189,33)" rx="2" ry="2" />
<text  x="696.91" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="59.7" y="341" width="0.2" height="15.0" fill="rgb(213,188,12)" rx="2" ry="2" />
<text  x="62.70" y="351.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%)</title><rect x="541.8" y="437" width="0.5" height="15.0" fill="rgb(215,202,25)" rx="2" ry="2" />
<text  x="544.82" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="906.9" y="469" width="0.2" height="15.0" fill="rgb(241,124,30)" rx="2" ry="2" />
<text  x="909.91" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="267.4" y="197" width="0.3" height="15.0" fill="rgb(216,217,2)" rx="2" ry="2" />
<text  x="270.44" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1163.4" y="565" width="0.3" height="15.0" fill="rgb(227,85,54)" rx="2" ry="2" />
<text  x="1166.43" y="575.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_input (1 samples, 0.02%)</title><rect x="30.4" y="373" width="0.2" height="15.0" fill="rgb(242,166,9)" rx="2" ry="2" />
<text  x="33.38" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="838.4" y="501" width="0.3" height="15.0" fill="rgb(252,115,36)" rx="2" ry="2" />
<text  x="841.43" y="511.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="644.7" y="517" width="0.2" height="15.0" fill="rgb(251,183,22)" rx="2" ry="2" />
<text  x="647.66" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.7" y="453" width="0.3" height="15.0" fill="rgb(216,192,48)" rx="2" ry="2" />
<text  x="67.74" y="463.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="10.5" y="613" width="0.2" height="15.0" fill="rgb(205,137,21)" rx="2" ry="2" />
<text  x="13.46" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="866.4" y="517" width="0.2" height="15.0" fill="rgb(250,19,15)" rx="2" ry="2" />
<text  x="869.37" y="527.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (2 samples, 0.04%)</title><rect x="866.8" y="565" width="0.5" height="15.0" fill="rgb(232,114,9)" rx="2" ry="2" />
<text  x="869.83" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="875.5" y="389" width="0.3" height="15.0" fill="rgb(223,83,15)" rx="2" ry="2" />
<text  x="878.53" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="627.7" y="517" width="0.5" height="15.0" fill="rgb(233,18,25)" rx="2" ry="2" />
<text  x="630.71" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="434.4" y="341" width="0.2" height="15.0" fill="rgb(213,215,21)" rx="2" ry="2" />
<text  x="437.41" y="351.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1134.1" y="261" width="0.2" height="15.0" fill="rgb(235,142,11)" rx="2" ry="2" />
<text  x="1137.11" y="271.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="687.0" y="565" width="0.3" height="15.0" fill="rgb(231,212,9)" rx="2" ry="2" />
<text  x="690.03" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (202 samples, 3.92%)</title><rect x="781.9" y="501" width="46.2" height="15.0" fill="rgb(241,121,16)" rx="2" ry="2" />
<text  x="784.86" y="511.5" >std:..</text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="824.0" y="453" width="0.2" height="15.0" fill="rgb(232,189,52)" rx="2" ry="2" />
<text  x="827.00" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="78.7" y="517" width="0.2" height="15.0" fill="rgb(216,126,24)" rx="2" ry="2" />
<text  x="81.71" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.23%)</title><rect x="727.1" y="581" width="2.8" height="15.0" fill="rgb(246,146,10)" rx="2" ry="2" />
<text  x="730.12" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.16%)</title><rect x="840.7" y="533" width="1.9" height="15.0" fill="rgb(213,156,50)" rx="2" ry="2" />
<text  x="843.72" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.25%)</title><rect x="801.3" y="325" width="3.0" height="15.0" fill="rgb(241,167,5)" rx="2" ry="2" />
<text  x="804.32" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="57.2" y="389" width="0.2" height="15.0" fill="rgb(247,152,1)" rx="2" ry="2" />
<text  x="60.18" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="105.7" y="501" width="0.5" height="15.0" fill="rgb(237,172,28)" rx="2" ry="2" />
<text  x="108.74" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="833.6" y="405" width="0.2" height="15.0" fill="rgb(254,93,42)" rx="2" ry="2" />
<text  x="836.62" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (9 samples, 0.17%)</title><rect x="690.0" y="581" width="2.1" height="15.0" fill="rgb(246,206,1)" rx="2" ry="2" />
<text  x="693.01" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="113.8" y="549" width="0.2" height="15.0" fill="rgb(219,134,4)" rx="2" ry="2" />
<text  x="116.75" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.17%)</title><rect x="640.8" y="597" width="2.0" height="15.0" fill="rgb(209,123,24)" rx="2" ry="2" />
<text  x="643.77" y="607.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%)</title><rect x="827.9" y="485" width="0.2" height="15.0" fill="rgb(222,3,5)" rx="2" ry="2" />
<text  x="830.89" y="495.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (2 samples, 0.04%)</title><rect x="18.5" y="677" width="0.4" height="15.0" fill="rgb(249,139,12)" rx="2" ry="2" />
<text  x="21.47" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="51.5" y="325" width="0.2" height="15.0" fill="rgb(207,82,41)" rx="2" ry="2" />
<text  x="54.46" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%)</title><rect x="72.5" y="469" width="0.3" height="15.0" fill="rgb(214,49,0)" rx="2" ry="2" />
<text  x="75.53" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%)</title><rect x="570.2" y="501" width="0.5" height="15.0" fill="rgb(217,208,50)" rx="2" ry="2" />
<text  x="573.23" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation&lt;bytes_ostream&gt;::writer_of_mutation (1 samples, 0.02%)</title><rect x="1136.4" y="277" width="0.2" height="15.0" fill="rgb(206,123,12)" rx="2" ry="2" />
<text  x="1139.41" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="274.1" y="261" width="0.7" height="15.0" fill="rgb(240,206,35)" rx="2" ry="2" />
<text  x="277.08" y="271.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="534.3" y="309" width="0.4" height="15.0" fill="rgb(207,161,20)" rx="2" ry="2" />
<text  x="537.27" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="53.1" y="341" width="0.2" height="15.0" fill="rgb(251,117,25)" rx="2" ry="2" />
<text  x="56.06" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="523.7" y="405" width="0.5" height="15.0" fill="rgb(210,6,0)" rx="2" ry="2" />
<text  x="526.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="489.1" y="389" width="0.3" height="15.0" fill="rgb(211,227,53)" rx="2" ry="2" />
<text  x="492.15" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="671.7" y="549" width="0.4" height="15.0" fill="rgb(216,36,7)" rx="2" ry="2" />
<text  x="674.69" y="559.5" ></text>
</g>
<g >
<title>database::do_apply (35 samples, 0.68%)</title><rect x="1121.3" y="453" width="8.0" height="15.0" fill="rgb(248,171,42)" rx="2" ry="2" />
<text  x="1124.29" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%)</title><rect x="1189.8" y="693" width="0.2" height="15.0" fill="rgb(215,156,9)" rx="2" ry="2" />
<text  x="1192.77" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="59.5" y="293" width="0.2" height="15.0" fill="rgb(232,112,34)" rx="2" ry="2" />
<text  x="62.47" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="699.2" y="565" width="0.2" height="15.0" fill="rgb(237,151,29)" rx="2" ry="2" />
<text  x="702.17" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="580.8" y="405" width="1.1" height="15.0" fill="rgb(206,172,50)" rx="2" ry="2" />
<text  x="583.76" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="106.7" y="565" width="0.2" height="15.0" fill="rgb(254,110,0)" rx="2" ry="2" />
<text  x="109.65" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="49.6" y="213" width="0.5" height="15.0" fill="rgb(250,192,45)" rx="2" ry="2" />
<text  x="52.62" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (12 samples, 0.23%)</title><rect x="567.5" y="485" width="2.7" height="15.0" fill="rgb(250,87,11)" rx="2" ry="2" />
<text  x="570.48" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (44 samples, 0.85%)</title><rect x="709.7" y="597" width="10.1" height="15.0" fill="rgb(219,197,32)" rx="2" ry="2" />
<text  x="712.71" y="607.5" ></text>
</g>
<g >
<title>get_scheduling_groups (1 samples, 0.02%)</title><rect x="116.0" y="613" width="0.3" height="15.0" fill="rgb(252,210,20)" rx="2" ry="2" />
<text  x="119.04" y="623.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="696.9" y="357" width="0.2" height="15.0" fill="rgb(254,59,45)" rx="2" ry="2" />
<text  x="699.88" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1146.0" y="565" width="0.3" height="15.0" fill="rgb(217,212,4)" rx="2" ry="2" />
<text  x="1149.02" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%)</title><rect x="1061.5" y="421" width="1.8" height="15.0" fill="rgb(241,196,28)" rx="2" ry="2" />
<text  x="1064.51" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="580.1" y="405" width="0.2" height="15.0" fill="rgb(246,2,16)" rx="2" ry="2" />
<text  x="583.07" y="415.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="36.1" y="357" width="0.2" height="15.0" fill="rgb(240,181,8)" rx="2" ry="2" />
<text  x="39.11" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1137.1" y="261" width="0.5" height="15.0" fill="rgb(228,143,27)" rx="2" ry="2" />
<text  x="1140.09" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (13 samples, 0.25%)</title><rect x="990.3" y="405" width="3.0" height="15.0" fill="rgb(211,14,21)" rx="2" ry="2" />
<text  x="993.28" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_access (7 samples, 0.14%)</title><rect x="79.6" y="549" width="1.6" height="15.0" fill="rgb(233,40,28)" rx="2" ry="2" />
<text  x="82.63" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (41 samples, 0.80%)</title><rect x="131.6" y="549" width="9.4" height="15.0" fill="rgb(211,123,1)" rx="2" ry="2" />
<text  x="134.62" y="559.5" ></text>
</g>
<g >
<title>seastar::task_quota_aio_completion::complete_with (1 samples, 0.02%)</title><rect x="1139.6" y="597" width="0.2" height="15.0" fill="rgb(230,197,6)" rx="2" ry="2" />
<text  x="1142.61" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="820.3" y="389" width="0.3" height="15.0" fill="rgb(211,28,32)" rx="2" ry="2" />
<text  x="823.33" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="866.4" y="533" width="0.2" height="15.0" fill="rgb(228,151,24)" rx="2" ry="2" />
<text  x="869.37" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.21%)</title><rect x="583.3" y="405" width="2.5" height="15.0" fill="rgb(239,205,42)" rx="2" ry="2" />
<text  x="586.28" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1135.7" y="197" width="0.2" height="15.0" fill="rgb(205,41,32)" rx="2" ry="2" />
<text  x="1138.72" y="207.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="219.8" y="293" width="0.7" height="15.0" fill="rgb(210,158,34)" rx="2" ry="2" />
<text  x="222.80" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="83.8" y="613" width="3.2" height="15.0" fill="rgb(244,88,10)" rx="2" ry="2" />
<text  x="86.75" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.3" y="389" width="0.2" height="15.0" fill="rgb(225,73,26)" rx="2" ry="2" />
<text  x="83.31" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="336.4" y="469" width="0.2" height="15.0" fill="rgb(246,168,47)" rx="2" ry="2" />
<text  x="339.38" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%)</title><rect x="738.8" y="421" width="0.7" height="15.0" fill="rgb(211,184,4)" rx="2" ry="2" />
<text  x="741.80" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="876.2" y="357" width="0.2" height="15.0" fill="rgb(249,137,13)" rx="2" ry="2" />
<text  x="879.22" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="78.7" y="565" width="0.2" height="15.0" fill="rgb(206,129,43)" rx="2" ry="2" />
<text  x="81.71" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="74.4" y="421" width="0.2" height="15.0" fill="rgb(219,90,4)" rx="2" ry="2" />
<text  x="77.36" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (1 samples, 0.02%)</title><rect x="1033.8" y="325" width="0.2" height="15.0" fill="rgb(229,56,40)" rx="2" ry="2" />
<text  x="1036.80" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="667.6" y="549" width="0.2" height="15.0" fill="rgb(224,50,46)" rx="2" ry="2" />
<text  x="670.57" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 1.32%)</title><rect x="799.0" y="357" width="15.6" height="15.0" fill="rgb(214,221,48)" rx="2" ry="2" />
<text  x="802.03" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator* (1 samples, 0.02%)</title><rect x="54.9" y="229" width="0.2" height="15.0" fill="rgb(244,154,12)" rx="2" ry="2" />
<text  x="57.89" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="934.6" y="485" width="0.3" height="15.0" fill="rgb(238,6,45)" rx="2" ry="2" />
<text  x="937.62" y="495.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="209.9" y="357" width="0.3" height="15.0" fill="rgb(238,121,32)" rx="2" ry="2" />
<text  x="212.95" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;cql3::expr::expression&gt;::optional (1 samples, 0.02%)</title><rect x="61.8" y="437" width="0.2" height="15.0" fill="rgb(214,45,5)" rx="2" ry="2" />
<text  x="64.76" y="447.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="114.0" y="453" width="0.2" height="15.0" fill="rgb(206,124,11)" rx="2" ry="2" />
<text  x="116.98" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="29.2" y="373" width="0.7" height="15.0" fill="rgb(206,95,36)" rx="2" ry="2" />
<text  x="32.24" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (34 samples, 0.66%)</title><rect x="1130.2" y="437" width="7.8" height="15.0" fill="rgb(234,165,2)" rx="2" ry="2" />
<text  x="1133.22" y="447.5" ></text>
</g>
<g >
<title>executor&lt;test_read (614 samples, 11.92%)</title><rect x="726.7" y="597" width="140.6" height="15.0" fill="rgb(223,35,45)" rx="2" ry="2" />
<text  x="729.66" y="607.5" >executor&lt;test_read</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="1131.4" y="245" width="0.2" height="15.0" fill="rgb(213,190,9)" rx="2" ry="2" />
<text  x="1134.37" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="532.4" y="293" width="0.5" height="15.0" fill="rgb(214,210,23)" rx="2" ry="2" />
<text  x="535.43" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="75.5" y="421" width="0.2" height="15.0" fill="rgb(225,2,52)" rx="2" ry="2" />
<text  x="78.50" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.37%)</title><rect x="1004.7" y="373" width="4.4" height="15.0" fill="rgb(211,0,52)" rx="2" ry="2" />
<text  x="1007.71" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (3 samples, 0.06%)</title><rect x="22.6" y="485" width="0.7" height="15.0" fill="rgb(232,166,35)" rx="2" ry="2" />
<text  x="25.60" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (4 samples, 0.08%)</title><rect x="189.3" y="389" width="1.0" height="15.0" fill="rgb(243,77,28)" rx="2" ry="2" />
<text  x="192.34" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (28 samples, 0.54%)</title><rect x="50.1" y="421" width="6.4" height="15.0" fill="rgb(205,101,15)" rx="2" ry="2" />
<text  x="53.08" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="81.7" y="517" width="0.2" height="15.0" fill="rgb(227,228,17)" rx="2" ry="2" />
<text  x="84.69" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="581.7" y="373" width="0.2" height="15.0" fill="rgb(217,197,34)" rx="2" ry="2" />
<text  x="584.68" y="383.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%)</title><rect x="987.5" y="437" width="1.9" height="15.0" fill="rgb(253,57,0)" rx="2" ry="2" />
<text  x="990.53" y="447.5" ></text>
</g>
<g >
<title>__errno_location (1 samples, 0.02%)</title><rect x="1189.8" y="661" width="0.2" height="15.0" fill="rgb(220,215,52)" rx="2" ry="2" />
<text  x="1192.77" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1102.0" y="469" width="0.3" height="15.0" fill="rgb(240,93,51)" rx="2" ry="2" />
<text  x="1105.05" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%)</title><rect x="170.6" y="549" width="0.9" height="15.0" fill="rgb(233,25,47)" rx="2" ry="2" />
<text  x="173.56" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="114.0" y="277" width="0.2" height="15.0" fill="rgb(241,175,30)" rx="2" ry="2" />
<text  x="116.98" y="287.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="55.8" y="213" width="0.2" height="15.0" fill="rgb(217,79,42)" rx="2" ry="2" />
<text  x="58.81" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="911.0" y="421" width="0.5" height="15.0" fill="rgb(214,164,1)" rx="2" ry="2" />
<text  x="914.03" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="357" width="0.3" height="15.0" fill="rgb(245,152,5)" rx="2" ry="2" />
<text  x="83.54" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%)</title><rect x="1120.8" y="501" width="8.5" height="15.0" fill="rgb(225,46,36)" rx="2" ry="2" />
<text  x="1123.83" y="511.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="696.7" y="549" width="0.2" height="15.0" fill="rgb(231,122,2)" rx="2" ry="2" />
<text  x="699.65" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="57.4" y="389" width="0.2" height="15.0" fill="rgb(236,61,35)" rx="2" ry="2" />
<text  x="60.41" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="325" width="0.3" height="15.0" fill="rgb(233,66,34)" rx="2" ry="2" />
<text  x="83.54" y="335.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (2 samples, 0.04%)</title><rect x="29.9" y="357" width="0.5" height="15.0" fill="rgb(250,85,43)" rx="2" ry="2" />
<text  x="32.93" y="367.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="721.4" y="549" width="0.2" height="15.0" fill="rgb(218,122,13)" rx="2" ry="2" />
<text  x="724.39" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%)</title><rect x="622.0" y="549" width="0.2" height="15.0" fill="rgb(248,113,37)" rx="2" ry="2" />
<text  x="624.99" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="630.5" y="517" width="0.2" height="15.0" fill="rgb(244,167,14)" rx="2" ry="2" />
<text  x="633.46" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="82.1" y="597" width="0.3" height="15.0" fill="rgb(205,56,37)" rx="2" ry="2" />
<text  x="85.15" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="870.7" y="549" width="0.3" height="15.0" fill="rgb(245,170,10)" rx="2" ry="2" />
<text  x="873.72" y="559.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="933.9" y="517" width="0.3" height="15.0" fill="rgb(227,65,53)" rx="2" ry="2" />
<text  x="936.94" y="527.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="19.4" y="389" width="0.2" height="15.0" fill="rgb(228,192,52)" rx="2" ry="2" />
<text  x="22.39" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="930.5" y="453" width="0.2" height="15.0" fill="rgb(207,67,25)" rx="2" ry="2" />
<text  x="933.50" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="261.9" y="213" width="0.5" height="15.0" fill="rgb(251,84,42)" rx="2" ry="2" />
<text  x="264.94" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="82.6" y="581" width="0.2" height="15.0" fill="rgb(234,206,22)" rx="2" ry="2" />
<text  x="85.60" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="221.2" y="293" width="0.4" height="15.0" fill="rgb(253,173,49)" rx="2" ry="2" />
<text  x="224.17" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1152.0" y="549" width="0.7" height="15.0" fill="rgb(244,138,51)" rx="2" ry="2" />
<text  x="1154.98" y="559.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (6 samples, 0.12%)</title><rect x="617.4" y="533" width="1.4" height="15.0" fill="rgb(216,209,9)" rx="2" ry="2" />
<text  x="620.41" y="543.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="962.3" y="485" width="3.2" height="15.0" fill="rgb(225,138,33)" rx="2" ry="2" />
<text  x="965.34" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="535.0" y="277" width="0.2" height="15.0" fill="rgb(219,209,22)" rx="2" ry="2" />
<text  x="537.95" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%)</title><rect x="723.2" y="613" width="0.5" height="15.0" fill="rgb(217,224,0)" rx="2" ry="2" />
<text  x="726.22" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="77.6" y="533" width="0.2" height="15.0" fill="rgb(246,71,44)" rx="2" ry="2" />
<text  x="80.57" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (20 samples, 0.39%)</title><rect x="857.2" y="517" width="4.6" height="15.0" fill="rgb(240,74,19)" rx="2" ry="2" />
<text  x="860.21" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="54.2" y="389" width="0.2" height="15.0" fill="rgb(221,192,17)" rx="2" ry="2" />
<text  x="57.20" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.17%)</title><rect x="590.8" y="469" width="2.1" height="15.0" fill="rgb(209,110,49)" rx="2" ry="2" />
<text  x="593.84" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (11 samples, 0.21%)</title><rect x="293.8" y="309" width="2.5" height="15.0" fill="rgb(212,35,7)" rx="2" ry="2" />
<text  x="296.78" y="319.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="630.0" y="533" width="0.7" height="15.0" fill="rgb(252,111,18)" rx="2" ry="2" />
<text  x="633.00" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell_until&lt;sstables::mc::row_has_complex_deletion (1 samples, 0.02%)</title><rect x="86.0" y="485" width="0.3" height="15.0" fill="rgb(210,114,35)" rx="2" ry="2" />
<text  x="89.04" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="733.8" y="501" width="0.4" height="15.0" fill="rgb(241,78,53)" rx="2" ry="2" />
<text  x="736.76" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (18 samples, 0.35%)</title><rect x="982.0" y="421" width="4.2" height="15.0" fill="rgb(212,71,40)" rx="2" ry="2" />
<text  x="985.03" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="1102.7" y="501" width="0.3" height="15.0" fill="rgb(244,124,49)" rx="2" ry="2" />
<text  x="1105.74" y="511.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="19.4" y="565" width="0.2" height="15.0" fill="rgb(242,103,3)" rx="2" ry="2" />
<text  x="22.39" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="1110.3" y="517" width="0.5" height="15.0" fill="rgb(211,152,4)" rx="2" ry="2" />
<text  x="1113.30" y="527.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="721.8" y="581" width="0.3" height="15.0" fill="rgb(217,156,21)" rx="2" ry="2" />
<text  x="724.85" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="781.4" y="485" width="0.2" height="15.0" fill="rgb(215,16,36)" rx="2" ry="2" />
<text  x="784.40" y="495.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="116.3" y="581" width="0.2" height="15.0" fill="rgb(223,34,21)" rx="2" ry="2" />
<text  x="119.27" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="48.7" y="421" width="0.2" height="15.0" fill="rgb(214,93,11)" rx="2" ry="2" />
<text  x="51.71" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="41.6" y="437" width="0.2" height="15.0" fill="rgb(230,31,24)" rx="2" ry="2" />
<text  x="44.61" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1118.3" y="533" width="0.2" height="15.0" fill="rgb(208,194,33)" rx="2" ry="2" />
<text  x="1121.31" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%)</title><rect x="476.1" y="405" width="0.2" height="15.0" fill="rgb(214,117,34)" rx="2" ry="2" />
<text  x="479.09" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1145.8" y="581" width="0.5" height="15.0" fill="rgb(227,46,47)" rx="2" ry="2" />
<text  x="1148.80" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (4 samples, 0.08%)</title><rect x="1036.8" y="373" width="0.9" height="15.0" fill="rgb(252,205,6)" rx="2" ry="2" />
<text  x="1039.77" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (2 samples, 0.04%)</title><rect x="59.5" y="437" width="0.4" height="15.0" fill="rgb(235,8,15)" rx="2" ry="2" />
<text  x="62.47" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.14%)</title><rect x="248.2" y="181" width="1.6" height="15.0" fill="rgb(216,56,23)" rx="2" ry="2" />
<text  x="251.20" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="444.7" y="309" width="0.2" height="15.0" fill="rgb(208,163,6)" rx="2" ry="2" />
<text  x="447.71" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (341 samples, 6.62%)</title><rect x="356.3" y="341" width="78.1" height="15.0" fill="rgb(235,148,33)" rx="2" ry="2" />
<text  x="359.30" y="351.5" >compact_m..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.14%)</title><rect x="329.5" y="421" width="1.6" height="15.0" fill="rgb(233,208,14)" rx="2" ry="2" />
<text  x="332.51" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="82.4" y="581" width="0.2" height="15.0" fill="rgb(230,11,27)" rx="2" ry="2" />
<text  x="85.38" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (2 samples, 0.04%)</title><rect x="63.4" y="485" width="0.4" height="15.0" fill="rgb(226,96,29)" rx="2" ry="2" />
<text  x="66.37" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="43.9" y="293" width="0.2" height="15.0" fill="rgb(219,194,21)" rx="2" ry="2" />
<text  x="46.90" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="116.5" y="613" width="0.7" height="15.0" fill="rgb(232,136,17)" rx="2" ry="2" />
<text  x="119.50" y="623.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="518.7" y="309" width="0.2" height="15.0" fill="rgb(227,98,15)" rx="2" ry="2" />
<text  x="521.69" y="319.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%)</title><rect x="918.1" y="469" width="0.7" height="15.0" fill="rgb(243,33,19)" rx="2" ry="2" />
<text  x="921.13" y="479.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (22 samples, 0.43%)</title><rect x="850.8" y="533" width="5.0" height="15.0" fill="rgb(226,92,18)" rx="2" ry="2" />
<text  x="853.80" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="724.6" y="613" width="0.5" height="15.0" fill="rgb(216,79,1)" rx="2" ry="2" />
<text  x="727.60" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (6 samples, 0.12%)</title><rect x="188.9" y="405" width="1.4" height="15.0" fill="rgb(228,155,12)" rx="2" ry="2" />
<text  x="191.88" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="762.2" y="517" width="0.2" height="15.0" fill="rgb(212,169,5)" rx="2" ry="2" />
<text  x="765.16" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="50.5" y="405" width="0.3" height="15.0" fill="rgb(238,20,46)" rx="2" ry="2" />
<text  x="53.54" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.10%)</title><rect x="314.6" y="437" width="1.2" height="15.0" fill="rgb(220,186,37)" rx="2" ry="2" />
<text  x="317.62" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="39.1" y="341" width="0.4" height="15.0" fill="rgb(215,134,41)" rx="2" ry="2" />
<text  x="42.09" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.9" y="357" width="0.2" height="15.0" fill="rgb(247,54,51)" rx="2" ry="2" />
<text  x="41.86" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (412 samples, 8.00%)</title><rect x="208.8" y="421" width="94.4" height="15.0" fill="rgb(205,124,30)" rx="2" ry="2" />
<text  x="211.80" y="431.5" >partition_s..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.8" y="229" width="0.2" height="15.0" fill="rgb(244,111,4)" rx="2" ry="2" />
<text  x="58.81" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%)</title><rect x="1139.4" y="581" width="0.2" height="15.0" fill="rgb(215,127,54)" rx="2" ry="2" />
<text  x="1142.38" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (249 samples, 4.83%)</title><rect x="22.1" y="597" width="57.1" height="15.0" fill="rgb(226,155,26)" rx="2" ry="2" />
<text  x="25.14" y="607.5" >cql3::..</text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="219.1" y="309" width="0.5" height="15.0" fill="rgb(253,150,7)" rx="2" ry="2" />
<text  x="222.11" y="319.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="696.9" y="341" width="0.2" height="15.0" fill="rgb(223,159,3)" rx="2" ry="2" />
<text  x="699.88" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="86.5" y="549" width="0.2" height="15.0" fill="rgb(219,171,9)" rx="2" ry="2" />
<text  x="89.50" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="111.9" y="581" width="0.3" height="15.0" fill="rgb(209,74,27)" rx="2" ry="2" />
<text  x="114.92" y="591.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (3 samples, 0.06%)</title><rect x="993.5" y="437" width="0.7" height="15.0" fill="rgb(239,53,47)" rx="2" ry="2" />
<text  x="996.49" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (1 samples, 0.02%)</title><rect x="705.4" y="581" width="0.2" height="15.0" fill="rgb(249,54,27)" rx="2" ry="2" />
<text  x="708.36" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (14 samples, 0.27%)</title><rect x="166.2" y="533" width="3.2" height="15.0" fill="rgb(243,192,14)" rx="2" ry="2" />
<text  x="169.20" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%)</title><rect x="1120.8" y="485" width="8.5" height="15.0" fill="rgb(214,146,3)" rx="2" ry="2" />
<text  x="1123.83" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="85.1" y="405" width="0.3" height="15.0" fill="rgb(227,88,37)" rx="2" ry="2" />
<text  x="88.12" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (4 samples, 0.08%)</title><rect x="317.4" y="453" width="0.9" height="15.0" fill="rgb(214,98,27)" rx="2" ry="2" />
<text  x="320.37" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="44.4" y="437" width="0.2" height="15.0" fill="rgb(226,89,9)" rx="2" ry="2" />
<text  x="47.36" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="293.3" y="309" width="0.5" height="15.0" fill="rgb(218,164,41)" rx="2" ry="2" />
<text  x="296.32" y="319.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="325" width="0.2" height="15.0" fill="rgb(223,114,3)" rx="2" ry="2" />
<text  x="83.09" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1095.9" y="517" width="0.2" height="15.0" fill="rgb(216,44,22)" rx="2" ry="2" />
<text  x="1098.87" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%)</title><rect x="370.7" y="325" width="0.3" height="15.0" fill="rgb(240,89,5)" rx="2" ry="2" />
<text  x="373.73" y="335.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,724 samples, 91.69%)</title><rect x="87.2" y="693" width="1082.0" height="15.0" fill="rgb(246,50,53)" rx="2" ry="2" />
<text  x="90.19" y="703.5" >seastar::app_template::run</text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.14%)</title><rect x="405.5" y="261" width="1.7" height="15.0" fill="rgb(238,88,38)" rx="2" ry="2" />
<text  x="408.55" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_map (1 samples, 0.02%)</title><rect x="26.7" y="325" width="0.2" height="15.0" fill="rgb(226,126,20)" rx="2" ry="2" />
<text  x="29.72" y="335.5" ></text>
</g>
<g >
<title>dht::minimum_token (1 samples, 0.02%)</title><rect x="473.6" y="421" width="0.2" height="15.0" fill="rgb(228,48,2)" rx="2" ry="2" />
<text  x="476.57" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%)</title><rect x="663.7" y="485" width="0.4" height="15.0" fill="rgb(220,122,22)" rx="2" ry="2" />
<text  x="666.67" y="495.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="644.0" y="549" width="0.2" height="15.0" fill="rgb(240,117,40)" rx="2" ry="2" />
<text  x="646.98" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="245" width="0.5" height="15.0" fill="rgb(231,71,51)" rx="2" ry="2" />
<text  x="56.75" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="47.6" y="357" width="0.6" height="15.0" fill="rgb(248,59,29)" rx="2" ry="2" />
<text  x="50.56" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="273.2" y="261" width="0.9" height="15.0" fill="rgb(249,79,13)" rx="2" ry="2" />
<text  x="276.16" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="113.3" y="437" width="0.2" height="15.0" fill="rgb(220,175,36)" rx="2" ry="2" />
<text  x="116.30" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="570.9" y="501" width="0.2" height="15.0" fill="rgb(210,95,54)" rx="2" ry="2" />
<text  x="573.91" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.33%)</title><rect x="515.0" y="325" width="3.9" height="15.0" fill="rgb(238,185,11)" rx="2" ry="2" />
<text  x="518.03" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="756.7" y="389" width="0.2" height="15.0" fill="rgb(226,174,16)" rx="2" ry="2" />
<text  x="759.66" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="789.6" y="389" width="1.4" height="15.0" fill="rgb(235,174,37)" rx="2" ry="2" />
<text  x="792.64" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="174.4" y="533" width="0.3" height="15.0" fill="rgb(236,57,36)" rx="2" ry="2" />
<text  x="177.45" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (3 samples, 0.06%)</title><rect x="1135.5" y="229" width="0.7" height="15.0" fill="rgb(230,195,4)" rx="2" ry="2" />
<text  x="1138.49" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="524.4" y="421" width="0.5" height="15.0" fill="rgb(213,142,8)" rx="2" ry="2" />
<text  x="527.42" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (293 samples, 5.69%)</title><rect x="978.1" y="469" width="67.1" height="15.0" fill="rgb(247,99,38)" rx="2" ry="2" />
<text  x="981.14" y="479.5" >service..</text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (42 samples, 0.82%)</title><rect x="804.5" y="325" width="9.6" height="15.0" fill="rgb(233,57,28)" rx="2" ry="2" />
<text  x="807.53" y="335.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="482.5" y="389" width="0.2" height="15.0" fill="rgb(243,198,6)" rx="2" ry="2" />
<text  x="485.50" y="399.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (4 samples, 0.08%)</title><rect x="764.4" y="501" width="1.0" height="15.0" fill="rgb(245,175,14)" rx="2" ry="2" />
<text  x="767.45" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="828.1" y="501" width="0.3" height="15.0" fill="rgb(239,217,3)" rx="2" ry="2" />
<text  x="831.12" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="47.6" y="309" width="0.2" height="15.0" fill="rgb(248,99,24)" rx="2" ry="2" />
<text  x="50.56" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%)</title><rect x="41.6" y="469" width="0.7" height="15.0" fill="rgb(213,142,22)" rx="2" ry="2" />
<text  x="44.61" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.08%)</title><rect x="888.6" y="533" width="0.9" height="15.0" fill="rgb(254,42,38)" rx="2" ry="2" />
<text  x="891.59" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%)</title><rect x="1041.6" y="357" width="0.9" height="15.0" fill="rgb(219,221,35)" rx="2" ry="2" />
<text  x="1044.58" y="367.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="854.5" y="469" width="0.4" height="15.0" fill="rgb(242,139,8)" rx="2" ry="2" />
<text  x="857.46" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%)</title><rect x="83.8" y="645" width="3.2" height="15.0" fill="rgb(233,46,46)" rx="2" ry="2" />
<text  x="86.75" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (184 samples, 3.57%)</title><rect x="1045.7" y="469" width="42.1" height="15.0" fill="rgb(229,143,33)" rx="2" ry="2" />
<text  x="1048.71" y="479.5" >ser..</text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (5 samples, 0.10%)</title><rect x="1093.1" y="485" width="1.2" height="15.0" fill="rgb(216,143,46)" rx="2" ry="2" />
<text  x="1096.12" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="265.6" y="229" width="0.2" height="15.0" fill="rgb(230,88,6)" rx="2" ry="2" />
<text  x="268.61" y="239.5" ></text>
</g>
<g >
<title>schema::make_column_specification (1 samples, 0.02%)</title><rect x="115.4" y="469" width="0.2" height="15.0" fill="rgb(251,36,30)" rx="2" ry="2" />
<text  x="118.36" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="852.9" y="453" width="0.4" height="15.0" fill="rgb(240,154,0)" rx="2" ry="2" />
<text  x="855.86" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="569.8" y="421" width="0.4" height="15.0" fill="rgb(239,20,16)" rx="2" ry="2" />
<text  x="572.77" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="54.4" y="389" width="0.3" height="15.0" fill="rgb(252,92,36)" rx="2" ry="2" />
<text  x="57.43" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="291.9" y="325" width="1.4" height="15.0" fill="rgb(239,134,5)" rx="2" ry="2" />
<text  x="294.94" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="86.3" y="421" width="0.2" height="15.0" fill="rgb(237,134,18)" rx="2" ry="2" />
<text  x="89.27" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="850.1" y="501" width="0.7" height="15.0" fill="rgb(245,183,19)" rx="2" ry="2" />
<text  x="853.11" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (4 samples, 0.08%)</title><rect x="1101.8" y="501" width="0.9" height="15.0" fill="rgb(205,99,5)" rx="2" ry="2" />
<text  x="1104.82" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.21%)</title><rect x="340.5" y="389" width="2.5" height="15.0" fill="rgb(227,179,0)" rx="2" ry="2" />
<text  x="343.50" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1131.4" y="229" width="0.2" height="15.0" fill="rgb(236,181,54)" rx="2" ry="2" />
<text  x="1134.37" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="943.1" y="453" width="0.9" height="15.0" fill="rgb(237,133,39)" rx="2" ry="2" />
<text  x="946.10" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="791.0" y="421" width="0.2" height="15.0" fill="rgb(246,17,31)" rx="2" ry="2" />
<text  x="794.02" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="756.4" y="405" width="0.3" height="15.0" fill="rgb(212,117,22)" rx="2" ry="2" />
<text  x="759.43" y="415.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (9 samples, 0.17%)</title><rect x="398.0" y="277" width="2.1" height="15.0" fill="rgb(205,11,49)" rx="2" ry="2" />
<text  x="400.99" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1029.7" y="309" width="0.4" height="15.0" fill="rgb(236,31,27)" rx="2" ry="2" />
<text  x="1032.67" y="319.5" ></text>
</g>
<g >
<title>database::obtain_reader_permit (1 samples, 0.02%)</title><rect x="113.1" y="357" width="0.2" height="15.0" fill="rgb(207,32,51)" rx="2" ry="2" />
<text  x="116.07" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="44.6" y="245" width="0.2" height="15.0" fill="rgb(221,75,47)" rx="2" ry="2" />
<text  x="47.58" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="870.7" y="533" width="0.3" height="15.0" fill="rgb(210,158,7)" rx="2" ry="2" />
<text  x="873.72" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::list_service_level_attachments_statement*, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="65.2" y="437" width="0.2" height="15.0" fill="rgb(212,179,20)" rx="2" ry="2" />
<text  x="68.20" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="561.1" y="453" width="0.2" height="15.0" fill="rgb(220,110,40)" rx="2" ry="2" />
<text  x="564.06" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="827.2" y="373" width="0.2" height="15.0" fill="rgb(238,9,51)" rx="2" ry="2" />
<text  x="830.20" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.2" y="485" width="0.2" height="15.0" fill="rgb(230,189,2)" rx="2" ry="2" />
<text  x="68.20" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="76.4" y="517" width="0.2" height="15.0" fill="rgb(246,83,6)" rx="2" ry="2" />
<text  x="79.42" y="527.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.2" y="485" width="0.2" height="15.0" fill="rgb(243,18,2)" rx="2" ry="2" />
<text  x="22.16" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.6" y="501" width="0.2" height="15.0" fill="rgb(241,87,37)" rx="2" ry="2" />
<text  x="69.57" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%)</title><rect x="853.3" y="453" width="0.9" height="15.0" fill="rgb(238,81,40)" rx="2" ry="2" />
<text  x="856.32" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="382.6" y="293" width="0.7" height="15.0" fill="rgb(251,36,29)" rx="2" ry="2" />
<text  x="385.64" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="489.6" y="421" width="1.1" height="15.0" fill="rgb(222,6,7)" rx="2" ry="2" />
<text  x="492.60" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="715.4" y="533" width="0.3" height="15.0" fill="rgb(218,138,14)" rx="2" ry="2" />
<text  x="718.43" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="902.6" y="373" width="0.2" height="15.0" fill="rgb(244,144,10)" rx="2" ry="2" />
<text  x="905.56" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="534.7" y="293" width="0.5" height="15.0" fill="rgb(216,167,5)" rx="2" ry="2" />
<text  x="537.72" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%)</title><rect x="283.2" y="293" width="0.5" height="15.0" fill="rgb(247,81,49)" rx="2" ry="2" />
<text  x="286.24" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="432.3" y="261" width="0.3" height="15.0" fill="rgb(230,69,33)" rx="2" ry="2" />
<text  x="435.34" y="271.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="709.3" y="597" width="0.2" height="15.0" fill="rgb(254,17,31)" rx="2" ry="2" />
<text  x="712.25" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="721.4" y="485" width="0.2" height="15.0" fill="rgb(227,157,11)" rx="2" ry="2" />
<text  x="724.39" y="495.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="528.3" y="373" width="0.5" height="15.0" fill="rgb(237,117,11)" rx="2" ry="2" />
<text  x="531.31" y="383.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::parse_header (1 samples, 0.02%)</title><rect x="21.0" y="613" width="0.2" height="15.0" fill="rgb(236,212,1)" rx="2" ry="2" />
<text  x="23.99" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (2 samples, 0.04%)</title><rect x="451.4" y="389" width="0.4" height="15.0" fill="rgb(242,58,14)" rx="2" ry="2" />
<text  x="454.35" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1168.2" y="581" width="0.3" height="15.0" fill="rgb(234,120,31)" rx="2" ry="2" />
<text  x="1171.24" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (42 samples, 0.82%)</title><rect x="27.6" y="405" width="9.7" height="15.0" fill="rgb(221,97,19)" rx="2" ry="2" />
<text  x="30.64" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="482.7" y="389" width="0.3" height="15.0" fill="rgb(227,89,14)" rx="2" ry="2" />
<text  x="485.73" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (4 samples, 0.08%)</title><rect x="310.7" y="437" width="0.9" height="15.0" fill="rgb(242,62,16)" rx="2" ry="2" />
<text  x="313.73" y="447.5" ></text>
</g>
<g >
<title>dht::shard_of (2 samples, 0.04%)</title><rect x="1003.1" y="389" width="0.5" height="15.0" fill="rgb(247,210,7)" rx="2" ry="2" />
<text  x="1006.11" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (4 samples, 0.08%)</title><rect x="1026.5" y="261" width="0.9" height="15.0" fill="rgb(239,122,35)" rx="2" ry="2" />
<text  x="1029.47" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="741.3" y="405" width="0.2" height="15.0" fill="rgb(251,120,26)" rx="2" ry="2" />
<text  x="744.32" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="696.9" y="309" width="0.2" height="15.0" fill="rgb(247,75,18)" rx="2" ry="2" />
<text  x="699.88" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="333.9" y="485" width="0.2" height="15.0" fill="rgb(229,166,50)" rx="2" ry="2" />
<text  x="336.86" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="220.5" y="325" width="1.1" height="15.0" fill="rgb(248,36,3)" rx="2" ry="2" />
<text  x="223.49" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="41.6" y="453" width="0.2" height="15.0" fill="rgb(218,228,26)" rx="2" ry="2" />
<text  x="44.61" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="562.9" y="501" width="0.5" height="15.0" fill="rgb(219,2,39)" rx="2" ry="2" />
<text  x="565.90" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (14 samples, 0.27%)</title><rect x="649.5" y="613" width="3.2" height="15.0" fill="rgb(209,0,0)" rx="2" ry="2" />
<text  x="652.47" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::attributes::raw&gt;, void&gt; (1 samples, 0.02%)</title><rect x="62.0" y="453" width="0.2" height="15.0" fill="rgb(237,16,37)" rx="2" ry="2" />
<text  x="64.99" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="52.6" y="357" width="0.2" height="15.0" fill="rgb(216,228,45)" rx="2" ry="2" />
<text  x="55.60" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (2 samples, 0.04%)</title><rect x="1028.3" y="277" width="0.5" height="15.0" fill="rgb(208,41,36)" rx="2" ry="2" />
<text  x="1031.30" y="287.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="1142.6" y="597" width="0.7" height="15.0" fill="rgb(224,184,36)" rx="2" ry="2" />
<text  x="1145.59" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="565" width="0.2" height="15.0" fill="rgb(251,194,51)" rx="2" ry="2" />
<text  x="699.20" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="43.0" y="437" width="0.4" height="15.0" fill="rgb(228,207,36)" rx="2" ry="2" />
<text  x="45.98" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (64 samples, 1.24%)</title><rect x="574.3" y="469" width="14.7" height="15.0" fill="rgb(208,5,24)" rx="2" ry="2" />
<text  x="577.35" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="62.9" y="437" width="0.2" height="15.0" fill="rgb(206,205,36)" rx="2" ry="2" />
<text  x="65.91" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%)</title><rect x="281.9" y="261" width="0.9" height="15.0" fill="rgb(241,4,38)" rx="2" ry="2" />
<text  x="284.87" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="926.6" y="501" width="0.5" height="15.0" fill="rgb(244,179,27)" rx="2" ry="2" />
<text  x="929.61" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%)</title><rect x="198.3" y="357" width="0.4" height="15.0" fill="rgb(225,19,30)" rx="2" ry="2" />
<text  x="201.27" y="367.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%)</title><rect x="721.8" y="565" width="0.3" height="15.0" fill="rgb(226,218,14)" rx="2" ry="2" />
<text  x="724.85" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="57.9" y="421" width="0.2" height="15.0" fill="rgb(224,12,49)" rx="2" ry="2" />
<text  x="60.87" y="431.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="652.7" y="533" width="0.2" height="15.0" fill="rgb(215,45,36)" rx="2" ry="2" />
<text  x="655.68" y="543.5" ></text>
</g>
<g >
<title>table::make_reader (414 samples, 8.04%)</title><rect x="466.7" y="469" width="94.8" height="15.0" fill="rgb(212,22,35)" rx="2" ry="2" />
<text  x="469.70" y="479.5" >table::make..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(239,62,1)" rx="2" ry="2" />
<text  x="13.69" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1152.0" y="533" width="0.7" height="15.0" fill="rgb(221,141,50)" rx="2" ry="2" />
<text  x="1154.98" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1166.9" y="501" width="0.2" height="15.0" fill="rgb(205,156,16)" rx="2" ry="2" />
<text  x="1169.87" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (5 samples, 0.10%)</title><rect x="284.2" y="325" width="1.1" height="15.0" fill="rgb(216,193,12)" rx="2" ry="2" />
<text  x="287.16" y="335.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="329.5" y="405" width="1.4" height="15.0" fill="rgb(209,180,27)" rx="2" ry="2" />
<text  x="332.51" y="415.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="721.4" y="517" width="0.2" height="15.0" fill="rgb(248,141,13)" rx="2" ry="2" />
<text  x="724.39" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="119.5" y="597" width="0.2" height="15.0" fill="rgb(226,163,46)" rx="2" ry="2" />
<text  x="122.48" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="807.0" y="229" width="0.3" height="15.0" fill="rgb(247,111,32)" rx="2" ry="2" />
<text  x="810.05" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="996.5" y="357" width="1.3" height="15.0" fill="rgb(224,151,47)" rx="2" ry="2" />
<text  x="999.46" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (11 samples, 0.21%)</title><rect x="1164.1" y="581" width="2.5" height="15.0" fill="rgb(241,192,19)" rx="2" ry="2" />
<text  x="1167.12" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="59.5" y="229" width="0.2" height="15.0" fill="rgb(207,225,22)" rx="2" ry="2" />
<text  x="62.47" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="770.2" y="469" width="0.9" height="15.0" fill="rgb(252,146,45)" rx="2" ry="2" />
<text  x="773.17" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="836.4" y="453" width="0.4" height="15.0" fill="rgb(219,163,48)" rx="2" ry="2" />
<text  x="839.37" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="63.1" y="453" width="0.3" height="15.0" fill="rgb(208,213,1)" rx="2" ry="2" />
<text  x="66.14" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="537.0" y="341" width="0.2" height="15.0" fill="rgb(247,125,18)" rx="2" ry="2" />
<text  x="540.01" y="351.5" ></text>
</g>
<g >
<title>database::shard_of (3 samples, 0.06%)</title><rect x="1131.4" y="293" width="0.7" height="15.0" fill="rgb(243,78,33)" rx="2" ry="2" />
<text  x="1134.37" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1068.2" y="437" width="0.2" height="15.0" fill="rgb(252,119,9)" rx="2" ry="2" />
<text  x="1071.15" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%)</title><rect x="757.1" y="421" width="3.0" height="15.0" fill="rgb(218,140,43)" rx="2" ry="2" />
<text  x="760.12" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%)</title><rect x="72.3" y="485" width="0.2" height="15.0" fill="rgb(209,43,32)" rx="2" ry="2" />
<text  x="75.30" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="770.4" y="437" width="0.7" height="15.0" fill="rgb(232,6,34)" rx="2" ry="2" />
<text  x="773.40" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="520.8" y="437" width="0.4" height="15.0" fill="rgb(246,204,36)" rx="2" ry="2" />
<text  x="523.75" y="447.5" ></text>
</g>
<g >
<title>__strlen_avx2 (3 samples, 0.06%)</title><rect x="1012.3" y="357" width="0.7" height="15.0" fill="rgb(220,195,41)" rx="2" ry="2" />
<text  x="1015.27" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="462.6" y="517" width="0.2" height="15.0" fill="rgb(220,116,6)" rx="2" ry="2" />
<text  x="465.58" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (72 samples, 1.40%)</title><rect x="524.9" y="421" width="16.5" height="15.0" fill="rgb(244,205,32)" rx="2" ry="2" />
<text  x="527.88" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="915.4" y="453" width="0.2" height="15.0" fill="rgb(218,196,11)" rx="2" ry="2" />
<text  x="918.38" y="463.5" ></text>
</g>
<g >
<title>table::query (2,155 samples, 41.83%)</title><rect x="146.7" y="565" width="493.6" height="15.0" fill="rgb(227,85,15)" rx="2" ry="2" />
<text  x="149.74" y="575.5" >table::query</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="83.8" y="485" width="0.2" height="15.0" fill="rgb(248,112,24)" rx="2" ry="2" />
<text  x="86.75" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="63.1" y="437" width="0.3" height="15.0" fill="rgb(251,7,34)" rx="2" ry="2" />
<text  x="66.14" y="447.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="545.3" y="437" width="1.3" height="15.0" fill="rgb(231,207,6)" rx="2" ry="2" />
<text  x="548.26" y="447.5" ></text>
</g>
<g >
<title>partition_entry::read (8 samples, 0.16%)</title><rect x="543.2" y="421" width="1.8" height="15.0" fill="rgb(227,228,12)" rx="2" ry="2" />
<text  x="546.20" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (1 samples, 0.02%)</title><rect x="696.2" y="613" width="0.2" height="15.0" fill="rgb(246,222,46)" rx="2" ry="2" />
<text  x="699.20" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="682.9" y="533" width="0.2" height="15.0" fill="rgb(227,191,23)" rx="2" ry="2" />
<text  x="685.91" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.08%)</title><rect x="868.2" y="613" width="0.9" height="15.0" fill="rgb(208,34,6)" rx="2" ry="2" />
<text  x="871.20" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="660.9" y="517" width="0.7" height="15.0" fill="rgb(220,26,14)" rx="2" ry="2" />
<text  x="663.92" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="999.4" y="405" width="0.7" height="15.0" fill="rgb(207,95,3)" rx="2" ry="2" />
<text  x="1002.44" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%)</title><rect x="1032.0" y="341" width="2.0" height="15.0" fill="rgb(216,91,42)" rx="2" ry="2" />
<text  x="1034.96" y="351.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::~InputStream (1 samples, 0.02%)</title><rect x="22.4" y="533" width="0.2" height="15.0" fill="rgb(224,176,14)" rx="2" ry="2" />
<text  x="25.37" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%)</title><rect x="565.4" y="469" width="1.4" height="15.0" fill="rgb(206,15,33)" rx="2" ry="2" />
<text  x="568.42" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="540.5" y="389" width="0.2" height="15.0" fill="rgb(234,167,12)" rx="2" ry="2" />
<text  x="543.45" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (7 samples, 0.14%)</title><rect x="636.6" y="517" width="1.6" height="15.0" fill="rgb(216,42,41)" rx="2" ry="2" />
<text  x="639.65" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="677.0" y="581" width="0.4" height="15.0" fill="rgb(252,54,17)" rx="2" ry="2" />
<text  x="679.96" y="591.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.3" y="405" width="0.2" height="15.0" fill="rgb(237,113,27)" rx="2" ry="2" />
<text  x="70.26" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1104.6" y="453" width="2.0" height="15.0" fill="rgb(240,222,30)" rx="2" ry="2" />
<text  x="1107.57" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="823.3" y="389" width="0.2" height="15.0" fill="rgb(236,106,45)" rx="2" ry="2" />
<text  x="826.31" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="550.3" y="437" width="0.2" height="15.0" fill="rgb(209,26,31)" rx="2" ry="2" />
<text  x="553.30" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="942.9" y="469" width="1.1" height="15.0" fill="rgb(210,21,18)" rx="2" ry="2" />
<text  x="945.87" y="479.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="519.8" y="389" width="0.3" height="15.0" fill="rgb(240,61,51)" rx="2" ry="2" />
<text  x="522.84" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="412.0" y="309" width="0.4" height="15.0" fill="rgb(240,210,2)" rx="2" ry="2" />
<text  x="414.96" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="113.8" y="565" width="0.2" height="15.0" fill="rgb(209,185,36)" rx="2" ry="2" />
<text  x="116.75" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="307.1" y="389" width="0.2" height="15.0" fill="rgb(208,136,5)" rx="2" ry="2" />
<text  x="310.06" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="54.2" y="325" width="0.2" height="15.0" fill="rgb(230,29,21)" rx="2" ry="2" />
<text  x="57.20" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="670.3" y="597" width="0.2" height="15.0" fill="rgb(247,70,49)" rx="2" ry="2" />
<text  x="673.31" y="607.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="845.8" y="453" width="0.4" height="15.0" fill="rgb(227,202,30)" rx="2" ry="2" />
<text  x="848.76" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (10 samples, 0.19%)</title><rect x="647.2" y="597" width="2.3" height="15.0" fill="rgb(215,196,21)" rx="2" ry="2" />
<text  x="650.18" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1122.9" y="213" width="0.2" height="15.0" fill="rgb(211,94,46)" rx="2" ry="2" />
<text  x="1125.89" y="223.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (7 samples, 0.14%)</title><rect x="915.6" y="485" width="1.6" height="15.0" fill="rgb(237,114,28)" rx="2" ry="2" />
<text  x="918.61" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="541.1" y="405" width="0.3" height="15.0" fill="rgb(207,2,41)" rx="2" ry="2" />
<text  x="544.14" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (55 samples, 1.07%)</title><rect x="507.2" y="389" width="12.6" height="15.0" fill="rgb(253,81,54)" rx="2" ry="2" />
<text  x="510.24" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="54.9" y="293" width="0.7" height="15.0" fill="rgb(229,206,28)" rx="2" ry="2" />
<text  x="57.89" y="303.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="113.5" y="581" width="0.3" height="15.0" fill="rgb(253,81,46)" rx="2" ry="2" />
<text  x="116.52" y="591.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="536.8" y="341" width="0.2" height="15.0" fill="rgb(242,197,39)" rx="2" ry="2" />
<text  x="539.79" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="48.9" y="389" width="1.2" height="15.0" fill="rgb(251,197,40)" rx="2" ry="2" />
<text  x="51.94" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (48 samples, 0.93%)</title><rect x="359.7" y="325" width="11.0" height="15.0" fill="rgb(237,191,42)" rx="2" ry="2" />
<text  x="362.74" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="675.4" y="581" width="0.2" height="15.0" fill="rgb(223,186,23)" rx="2" ry="2" />
<text  x="678.35" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="113.1" y="325" width="0.2" height="15.0" fill="rgb(249,162,35)" rx="2" ry="2" />
<text  x="116.07" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="696.0" y="597" width="0.2" height="15.0" fill="rgb(225,53,27)" rx="2" ry="2" />
<text  x="698.97" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="813.5" y="197" width="0.2" height="15.0" fill="rgb(220,42,18)" rx="2" ry="2" />
<text  x="816.46" y="207.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="803.6" y="277" width="0.7" height="15.0" fill="rgb(218,43,47)" rx="2" ry="2" />
<text  x="806.61" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.0" y="341" width="0.2" height="15.0" fill="rgb(243,4,23)" rx="2" ry="2" />
<text  x="62.01" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="760.8" y="517" width="0.2" height="15.0" fill="rgb(235,53,29)" rx="2" ry="2" />
<text  x="763.78" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="807.3" y="245" width="0.2" height="15.0" fill="rgb(238,123,30)" rx="2" ry="2" />
<text  x="810.28" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%)</title><rect x="834.1" y="469" width="2.7" height="15.0" fill="rgb(244,222,12)" rx="2" ry="2" />
<text  x="837.08" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (23 samples, 0.45%)</title><rect x="700.1" y="581" width="5.3" height="15.0" fill="rgb(243,127,20)" rx="2" ry="2" />
<text  x="703.09" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="45.3" y="325" width="0.7" height="15.0" fill="rgb(209,177,31)" rx="2" ry="2" />
<text  x="48.27" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="548.2" y="437" width="0.5" height="15.0" fill="rgb(216,108,42)" rx="2" ry="2" />
<text  x="551.24" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="122.0" y="581" width="0.2" height="15.0" fill="rgb(241,196,25)" rx="2" ry="2" />
<text  x="125.00" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (19 samples, 0.37%)</title><rect x="628.9" y="549" width="4.3" height="15.0" fill="rgb(210,86,14)" rx="2" ry="2" />
<text  x="631.86" y="559.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="444.5" y="293" width="0.2" height="15.0" fill="rgb(240,133,44)" rx="2" ry="2" />
<text  x="447.48" y="303.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (2 samples, 0.04%)</title><rect x="360.7" y="309" width="0.4" height="15.0" fill="rgb(210,146,51)" rx="2" ry="2" />
<text  x="363.66" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (9 samples, 0.17%)</title><rect x="258.0" y="229" width="2.1" height="15.0" fill="rgb(235,211,34)" rx="2" ry="2" />
<text  x="261.05" y="239.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (200 samples, 3.88%)</title><rect x="22.4" y="549" width="45.8" height="15.0" fill="rgb(218,26,34)" rx="2" ry="2" />
<text  x="25.37" y="559.5" >cql3..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.2" y="325" width="0.3" height="15.0" fill="rgb(223,11,15)" rx="2" ry="2" />
<text  x="62.24" y="335.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="19.4" y="533" width="0.2" height="15.0" fill="rgb(207,177,35)" rx="2" ry="2" />
<text  x="22.39" y="543.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%)</title><rect x="919.5" y="453" width="3.9" height="15.0" fill="rgb(212,179,39)" rx="2" ry="2" />
<text  x="922.51" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="1130.5" y="341" width="0.2" height="15.0" fill="rgb(239,177,17)" rx="2" ry="2" />
<text  x="1133.45" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (24 samples, 0.47%)</title><rect x="754.8" y="453" width="5.5" height="15.0" fill="rgb(248,179,24)" rx="2" ry="2" />
<text  x="757.83" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="43.7" y="437" width="0.4" height="15.0" fill="rgb(230,171,3)" rx="2" ry="2" />
<text  x="46.67" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="529.5" y="357" width="0.2" height="15.0" fill="rgb(234,40,41)" rx="2" ry="2" />
<text  x="532.46" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (1 samples, 0.02%)</title><rect x="86.3" y="469" width="0.2" height="15.0" fill="rgb(223,203,1)" rx="2" ry="2" />
<text  x="89.27" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="948.1" y="453" width="0.3" height="15.0" fill="rgb(227,168,3)" rx="2" ry="2" />
<text  x="951.14" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="72.8" y="421" width="0.4" height="15.0" fill="rgb(245,114,44)" rx="2" ry="2" />
<text  x="75.76" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="41.4" y="453" width="0.2" height="15.0" fill="rgb(208,40,31)" rx="2" ry="2" />
<text  x="44.38" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="1103.4" y="501" width="3.7" height="15.0" fill="rgb(219,140,31)" rx="2" ry="2" />
<text  x="1106.42" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="44.6" y="357" width="0.7" height="15.0" fill="rgb(206,193,50)" rx="2" ry="2" />
<text  x="47.58" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="46.6" y="309" width="0.3" height="15.0" fill="rgb(209,208,25)" rx="2" ry="2" />
<text  x="49.65" y="319.5" ></text>
</g>
<g >
<title>create_partitions (276 samples, 5.36%)</title><rect x="19.6" y="645" width="63.2" height="15.0" fill="rgb(248,73,40)" rx="2" ry="2" />
<text  x="22.62" y="655.5" >create..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="703.1" y="549" width="0.9" height="15.0" fill="rgb(248,210,14)" rx="2" ry="2" />
<text  x="706.07" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.7" y="469" width="0.2" height="15.0" fill="rgb(244,109,33)" rx="2" ry="2" />
<text  x="68.66" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="449.5" y="341" width="0.3" height="15.0" fill="rgb(254,205,51)" rx="2" ry="2" />
<text  x="452.52" y="351.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="39.8" y="309" width="0.2" height="15.0" fill="rgb(234,168,27)" rx="2" ry="2" />
<text  x="42.77" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="57.2" y="405" width="0.2" height="15.0" fill="rgb(219,59,3)" rx="2" ry="2" />
<text  x="60.18" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1127.0" y="341" width="0.2" height="15.0" fill="rgb(251,149,14)" rx="2" ry="2" />
<text  x="1130.01" y="351.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (29 samples, 0.56%)</title><rect x="1121.5" y="389" width="6.7" height="15.0" fill="rgb(206,103,19)" rx="2" ry="2" />
<text  x="1124.52" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="681.1" y="581" width="0.2" height="15.0" fill="rgb(222,191,52)" rx="2" ry="2" />
<text  x="684.08" y="591.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (16 samples, 0.31%)</title><rect x="899.1" y="421" width="3.7" height="15.0" fill="rgb(250,99,3)" rx="2" ry="2" />
<text  x="902.12" y="431.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1003.6" y="389" width="0.2" height="15.0" fill="rgb(244,179,27)" rx="2" ry="2" />
<text  x="1006.56" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.16%)</title><rect x="1152.9" y="565" width="1.8" height="15.0" fill="rgb(251,28,3)" rx="2" ry="2" />
<text  x="1155.90" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.5" y="517" width="0.2" height="15.0" fill="rgb(231,100,52)" rx="2" ry="2" />
<text  x="13.46" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="572.5" y="517" width="0.2" height="15.0" fill="rgb(227,73,10)" rx="2" ry="2" />
<text  x="575.52" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="597.9" y="453" width="0.7" height="15.0" fill="rgb(241,67,5)" rx="2" ry="2" />
<text  x="600.94" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (551 samples, 10.69%)</title><rect x="183.4" y="437" width="126.2" height="15.0" fill="rgb(240,53,23)" rx="2" ry="2" />
<text  x="186.38" y="447.5" >mutation_reader..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1137.6" y="309" width="0.2" height="15.0" fill="rgb(249,22,54)" rx="2" ry="2" />
<text  x="1140.55" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (21 samples, 0.41%)</title><rect x="1080.1" y="389" width="4.8" height="15.0" fill="rgb(252,132,53)" rx="2" ry="2" />
<text  x="1083.06" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="721.8" y="453" width="0.3" height="15.0" fill="rgb(220,63,22)" rx="2" ry="2" />
<text  x="724.85" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (13 samples, 0.25%)</title><rect x="908.5" y="453" width="3.0" height="15.0" fill="rgb(208,152,33)" rx="2" ry="2" />
<text  x="911.51" y="463.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set::untyped_result_set (1 samples, 0.02%)</title><rect x="652.7" y="565" width="0.2" height="15.0" fill="rgb(232,94,53)" rx="2" ry="2" />
<text  x="655.68" y="575.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="506.3" y="389" width="0.3" height="15.0" fill="rgb(245,147,52)" rx="2" ry="2" />
<text  x="509.32" y="399.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="19.2" y="629" width="0.2" height="15.0" fill="rgb(226,220,17)" rx="2" ry="2" />
<text  x="22.16" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="302.9" y="373" width="0.3" height="15.0" fill="rgb(251,145,20)" rx="2" ry="2" />
<text  x="305.94" y="383.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="721.8" y="501" width="0.3" height="15.0" fill="rgb(231,132,18)" rx="2" ry="2" />
<text  x="724.85" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="844.6" y="517" width="3.0" height="15.0" fill="rgb(227,2,4)" rx="2" ry="2" />
<text  x="847.61" y="527.5" ></text>
</g>
<g >
<title>is_system_table (1 samples, 0.02%)</title><rect x="112.8" y="565" width="0.3" height="15.0" fill="rgb(233,58,46)" rx="2" ry="2" />
<text  x="115.84" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (2 samples, 0.04%)</title><rect x="528.8" y="373" width="0.4" height="15.0" fill="rgb(211,132,20)" rx="2" ry="2" />
<text  x="531.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="366.8" y="277" width="0.5" height="15.0" fill="rgb(205,210,2)" rx="2" ry="2" />
<text  x="369.84" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%)</title><rect x="526.5" y="389" width="0.7" height="15.0" fill="rgb(254,97,25)" rx="2" ry="2" />
<text  x="529.48" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (3 samples, 0.06%)</title><rect x="910.8" y="437" width="0.7" height="15.0" fill="rgb(236,15,52)" rx="2" ry="2" />
<text  x="913.80" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="76.9" y="517" width="0.2" height="15.0" fill="rgb(215,1,7)" rx="2" ry="2" />
<text  x="79.88" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="55.6" y="325" width="0.2" height="15.0" fill="rgb(253,148,8)" rx="2" ry="2" />
<text  x="58.58" y="335.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%)</title><rect x="1125.6" y="309" width="0.3" height="15.0" fill="rgb(239,199,26)" rx="2" ry="2" />
<text  x="1128.64" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="72.8" y="405" width="0.4" height="15.0" fill="rgb(228,224,39)" rx="2" ry="2" />
<text  x="75.76" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="901.2" y="405" width="0.2" height="15.0" fill="rgb(239,14,3)" rx="2" ry="2" />
<text  x="904.18" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%)</title><rect x="84.7" y="501" width="1.3" height="15.0" fill="rgb(226,207,35)" rx="2" ry="2" />
<text  x="87.67" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="608.7" y="485" width="0.7" height="15.0" fill="rgb(223,41,51)" rx="2" ry="2" />
<text  x="611.70" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%)</title><rect x="1158.4" y="581" width="0.5" height="15.0" fill="rgb(209,45,11)" rx="2" ry="2" />
<text  x="1161.39" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="60.6" y="373" width="0.2" height="15.0" fill="rgb(219,220,53)" rx="2" ry="2" />
<text  x="63.62" y="383.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%)</title><rect x="114.0" y="325" width="0.2" height="15.0" fill="rgb(223,227,7)" rx="2" ry="2" />
<text  x="116.98" y="335.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (2 samples, 0.04%)</title><rect x="1086.9" y="437" width="0.5" height="15.0" fill="rgb(208,226,40)" rx="2" ry="2" />
<text  x="1089.93" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (2 samples, 0.04%)</title><rect x="559.5" y="453" width="0.4" height="15.0" fill="rgb(207,169,38)" rx="2" ry="2" />
<text  x="562.46" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="636.6" y="501" width="1.0" height="15.0" fill="rgb(248,55,40)" rx="2" ry="2" />
<text  x="639.65" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="51.7" y="389" width="0.4" height="15.0" fill="rgb(254,207,47)" rx="2" ry="2" />
<text  x="54.68" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="114.0" y="245" width="0.2" height="15.0" fill="rgb(234,3,41)" rx="2" ry="2" />
<text  x="116.98" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="332.0" y="469" width="0.7" height="15.0" fill="rgb(240,165,34)" rx="2" ry="2" />
<text  x="335.03" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(235,76,25)" rx="2" ry="2" />
<text  x="13.69" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="163.5" y="533" width="0.2" height="15.0" fill="rgb(243,224,8)" rx="2" ry="2" />
<text  x="166.45" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1118.8" y="533" width="0.2" height="15.0" fill="rgb(247,25,13)" rx="2" ry="2" />
<text  x="1121.77" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%)</title><rect x="605.5" y="517" width="0.5" height="15.0" fill="rgb(213,32,51)" rx="2" ry="2" />
<text  x="608.50" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%)</title><rect x="19.4" y="581" width="0.2" height="15.0" fill="rgb(242,53,3)" rx="2" ry="2" />
<text  x="22.39" y="591.5" ></text>
</g>
<g >
<title>__start_context (14 samples, 0.27%)</title><rect x="83.8" y="709" width="3.2" height="15.0" fill="rgb(224,127,23)" rx="2" ry="2" />
<text  x="86.75" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%)</title><rect x="892.3" y="485" width="0.6" height="15.0" fill="rgb(228,192,41)" rx="2" ry="2" />
<text  x="895.25" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="941.5" y="469" width="0.9" height="15.0" fill="rgb(250,164,15)" rx="2" ry="2" />
<text  x="944.49" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (203 samples, 3.94%)</title><rect x="998.5" y="421" width="46.5" height="15.0" fill="rgb(246,209,25)" rx="2" ry="2" />
<text  x="1001.52" y="431.5" >serv..</text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%)</title><rect x="1034.3" y="357" width="0.4" height="15.0" fill="rgb(235,35,46)" rx="2" ry="2" />
<text  x="1037.25" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.39%)</title><rect x="1133.4" y="357" width="4.6" height="15.0" fill="rgb(231,23,38)" rx="2" ry="2" />
<text  x="1136.43" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="589.0" y="485" width="0.5" height="15.0" fill="rgb(215,21,40)" rx="2" ry="2" />
<text  x="592.01" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="696.9" y="405" width="0.2" height="15.0" fill="rgb(252,162,45)" rx="2" ry="2" />
<text  x="699.88" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="902.8" y="421" width="0.2" height="15.0" fill="rgb(226,127,54)" rx="2" ry="2" />
<text  x="905.79" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="167.8" y="501" width="0.9" height="15.0" fill="rgb(241,158,34)" rx="2" ry="2" />
<text  x="170.81" y="511.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (10 samples, 0.19%)</title><rect x="713.8" y="549" width="2.3" height="15.0" fill="rgb(211,169,2)" rx="2" ry="2" />
<text  x="716.83" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (4 samples, 0.08%)</title><rect x="74.8" y="485" width="0.9" height="15.0" fill="rgb(225,218,5)" rx="2" ry="2" />
<text  x="77.82" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="844.8" y="501" width="0.3" height="15.0" fill="rgb(253,158,29)" rx="2" ry="2" />
<text  x="847.84" y="511.5" ></text>
</g>
<g >
<title>database::query (11 samples, 0.21%)</title><rect x="110.3" y="613" width="2.5" height="15.0" fill="rgb(234,213,37)" rx="2" ry="2" />
<text  x="113.32" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.14%)</title><rect x="769.5" y="501" width="1.6" height="15.0" fill="rgb(234,41,22)" rx="2" ry="2" />
<text  x="772.49" y="511.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="10.5" y="629" width="0.2" height="15.0" fill="rgb(232,119,33)" rx="2" ry="2" />
<text  x="13.46" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="915.2" y="469" width="0.2" height="15.0" fill="rgb(246,133,38)" rx="2" ry="2" />
<text  x="918.16" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="696.9" y="373" width="0.2" height="15.0" fill="rgb(205,183,18)" rx="2" ry="2" />
<text  x="699.88" y="383.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="554.2" y="405" width="0.2" height="15.0" fill="rgb(205,77,54)" rx="2" ry="2" />
<text  x="557.19" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="146.5" y="533" width="0.2" height="15.0" fill="rgb(216,21,52)" rx="2" ry="2" />
<text  x="149.51" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="49.2" y="325" width="0.2" height="15.0" fill="rgb(205,97,6)" rx="2" ry="2" />
<text  x="52.17" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="638.9" y="501" width="0.3" height="15.0" fill="rgb(222,101,53)" rx="2" ry="2" />
<text  x="641.94" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="696.9" y="437" width="0.2" height="15.0" fill="rgb(214,226,50)" rx="2" ry="2" />
<text  x="699.88" y="447.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%)</title><rect x="1108.7" y="533" width="0.2" height="15.0" fill="rgb(226,154,8)" rx="2" ry="2" />
<text  x="1111.69" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="650.4" y="597" width="0.2" height="15.0" fill="rgb(250,98,0)" rx="2" ry="2" />
<text  x="653.39" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="755.3" y="389" width="0.2" height="15.0" fill="rgb(224,14,1)" rx="2" ry="2" />
<text  x="758.29" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1058.1" y="453" width="0.2" height="15.0" fill="rgb(219,216,44)" rx="2" ry="2" />
<text  x="1061.07" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%)</title><rect x="113.1" y="533" width="0.4" height="15.0" fill="rgb(232,171,39)" rx="2" ry="2" />
<text  x="116.07" y="543.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="115.6" y="373" width="0.2" height="15.0" fill="rgb(228,51,52)" rx="2" ry="2" />
<text  x="118.59" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="77.3" y="453" width="0.3" height="15.0" fill="rgb(225,152,0)" rx="2" ry="2" />
<text  x="80.34" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="967.1" y="485" width="0.3" height="15.0" fill="rgb(241,121,8)" rx="2" ry="2" />
<text  x="970.15" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%)</title><rect x="84.7" y="533" width="1.3" height="15.0" fill="rgb(211,170,44)" rx="2" ry="2" />
<text  x="87.67" y="543.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="285.5" y="325" width="0.5" height="15.0" fill="rgb(246,111,28)" rx="2" ry="2" />
<text  x="288.53" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql3::untyped_result_set&gt; &gt;, cql3::query_processor::execute_paged_internal (1 samples, 0.02%)</title><rect x="652.7" y="613" width="0.2" height="15.0" fill="rgb(222,74,0)" rx="2" ry="2" />
<text  x="655.68" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="936.7" y="517" width="0.2" height="15.0" fill="rgb(233,162,10)" rx="2" ry="2" />
<text  x="939.68" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="26.3" y="309" width="0.2" height="15.0" fill="rgb(213,223,13)" rx="2" ry="2" />
<text  x="29.26" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="646.7" y="597" width="0.5" height="15.0" fill="rgb(219,39,6)" rx="2" ry="2" />
<text  x="649.72" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="58.8" y="389" width="0.4" height="15.0" fill="rgb(232,98,10)" rx="2" ry="2" />
<text  x="61.78" y="399.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%)</title><rect x="874.6" y="421" width="2.1" height="15.0" fill="rgb(248,178,41)" rx="2" ry="2" />
<text  x="877.62" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (193 samples, 3.75%)</title><rect x="23.7" y="517" width="44.2" height="15.0" fill="rgb(212,186,19)" rx="2" ry="2" />
<text  x="26.74" y="527.5" >cql3..</text>
</g>
<g >
<title>seastar::memory::allocate_aligned (24 samples, 0.47%)</title><rect x="250.5" y="149" width="5.5" height="15.0" fill="rgb(250,136,43)" rx="2" ry="2" />
<text  x="253.49" y="159.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="589.2" y="469" width="0.3" height="15.0" fill="rgb(249,159,34)" rx="2" ry="2" />
<text  x="592.24" y="479.5" ></text>
</g>
<g >
<title>free (5 samples, 0.10%)</title><rect x="446.1" y="309" width="1.1" height="15.0" fill="rgb(210,88,53)" rx="2" ry="2" />
<text  x="449.09" y="319.5" ></text>
</g>
<g >
<title>database::find_schema (20 samples, 0.39%)</title><rect x="829.5" y="485" width="4.6" height="15.0" fill="rgb(251,193,21)" rx="2" ry="2" />
<text  x="832.50" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1129.8" y="437" width="0.2" height="15.0" fill="rgb(214,98,5)" rx="2" ry="2" />
<text  x="1132.76" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="676.5" y="565" width="0.5" height="15.0" fill="rgb(231,222,54)" rx="2" ry="2" />
<text  x="679.50" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.6" y="277" width="0.2" height="15.0" fill="rgb(230,86,19)" rx="2" ry="2" />
<text  x="47.58" y="287.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="51.9" y="245" width="0.2" height="15.0" fill="rgb(251,116,51)" rx="2" ry="2" />
<text  x="54.91" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1030.4" y="325" width="0.2" height="15.0" fill="rgb(224,95,26)" rx="2" ry="2" />
<text  x="1033.36" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="43.9" y="341" width="0.2" height="15.0" fill="rgb(206,183,0)" rx="2" ry="2" />
<text  x="46.90" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (4 samples, 0.08%)</title><rect x="544.1" y="405" width="0.9" height="15.0" fill="rgb(235,212,38)" rx="2" ry="2" />
<text  x="547.11" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="847.6" y="517" width="0.2" height="15.0" fill="rgb(218,138,12)" rx="2" ry="2" />
<text  x="850.59" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1037.7" y="373" width="0.2" height="15.0" fill="rgb(245,163,2)" rx="2" ry="2" />
<text  x="1040.69" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.70%)</title><rect x="805.9" y="293" width="8.2" height="15.0" fill="rgb(233,217,39)" rx="2" ry="2" />
<text  x="808.90" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="829.0" y="453" width="0.3" height="15.0" fill="rgb(223,43,14)" rx="2" ry="2" />
<text  x="832.04" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%)</title><rect x="18.7" y="613" width="0.2" height="15.0" fill="rgb(233,220,49)" rx="2" ry="2" />
<text  x="21.70" y="623.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="389" width="0.3" height="15.0" fill="rgb(225,120,37)" rx="2" ry="2" />
<text  x="83.54" y="399.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;column_definition*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt;, column_definition::name_comparator&gt; (1 samples, 0.02%)</title><rect x="115.8" y="469" width="0.2" height="15.0" fill="rgb(210,168,25)" rx="2" ry="2" />
<text  x="118.82" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="777.5" y="485" width="0.2" height="15.0" fill="rgb(222,124,54)" rx="2" ry="2" />
<text  x="780.50" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (4 samples, 0.08%)</title><rect x="460.3" y="517" width="0.9" height="15.0" fill="rgb(237,98,31)" rx="2" ry="2" />
<text  x="463.29" y="527.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (2 samples, 0.04%)</title><rect x="83.8" y="517" width="0.4" height="15.0" fill="rgb(233,148,46)" rx="2" ry="2" />
<text  x="86.75" y="527.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (7 samples, 0.14%)</title><rect x="974.0" y="453" width="1.6" height="15.0" fill="rgb(233,65,38)" rx="2" ry="2" />
<text  x="977.02" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (2 samples, 0.04%)</title><rect x="86.0" y="597" width="0.5" height="15.0" fill="rgb(237,73,54)" rx="2" ry="2" />
<text  x="89.04" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="1137.1" y="277" width="0.5" height="15.0" fill="rgb(231,103,5)" rx="2" ry="2" />
<text  x="1140.09" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (7 samples, 0.14%)</title><rect x="631.4" y="517" width="1.6" height="15.0" fill="rgb(213,160,10)" rx="2" ry="2" />
<text  x="634.38" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="587.9" y="437" width="0.4" height="15.0" fill="rgb(249,211,32)" rx="2" ry="2" />
<text  x="590.86" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::query_partition_mutation (1 samples, 0.02%)</title><rect x="114.2" y="613" width="0.2" height="15.0" fill="rgb(221,126,15)" rx="2" ry="2" />
<text  x="117.21" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="113.3" y="341" width="0.2" height="15.0" fill="rgb(235,45,37)" rx="2" ry="2" />
<text  x="116.30" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="989.6" y="405" width="0.2" height="15.0" fill="rgb(253,159,27)" rx="2" ry="2" />
<text  x="992.59" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%)</title><rect x="606.9" y="517" width="0.9" height="15.0" fill="rgb(251,205,21)" rx="2" ry="2" />
<text  x="609.87" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="975.4" y="421" width="0.2" height="15.0" fill="rgb(215,21,5)" rx="2" ry="2" />
<text  x="978.39" y="431.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (1 samples, 0.02%)</title><rect x="1136.6" y="309" width="0.3" height="15.0" fill="rgb(215,64,46)" rx="2" ry="2" />
<text  x="1139.63" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="865.2" y="533" width="1.2" height="15.0" fill="rgb(212,39,21)" rx="2" ry="2" />
<text  x="868.23" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="488.0" y="373" width="0.2" height="15.0" fill="rgb(237,5,31)" rx="2" ry="2" />
<text  x="491.00" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="19.4" y="469" width="0.2" height="15.0" fill="rgb(217,194,38)" rx="2" ry="2" />
<text  x="22.39" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="639.2" y="517" width="0.2" height="15.0" fill="rgb(236,186,36)" rx="2" ry="2" />
<text  x="642.17" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="198.5" y="341" width="0.2" height="15.0" fill="rgb(218,187,50)" rx="2" ry="2" />
<text  x="201.50" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1095.2" y="485" width="0.4" height="15.0" fill="rgb(233,34,28)" rx="2" ry="2" />
<text  x="1098.18" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="45.7" y="277" width="0.3" height="15.0" fill="rgb(232,127,53)" rx="2" ry="2" />
<text  x="48.73" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="246.8" y="197" width="0.3" height="15.0" fill="rgb(229,173,34)" rx="2" ry="2" />
<text  x="249.82" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="838.9" y="517" width="1.1" height="15.0" fill="rgb(230,21,38)" rx="2" ry="2" />
<text  x="841.89" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="985.9" y="405" width="0.3" height="15.0" fill="rgb(250,94,38)" rx="2" ry="2" />
<text  x="988.93" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (12 samples, 0.23%)</title><rect x="31.1" y="373" width="2.7" height="15.0" fill="rgb(237,13,5)" rx="2" ry="2" />
<text  x="34.07" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%)</title><rect x="219.6" y="309" width="0.9" height="15.0" fill="rgb(206,120,6)" rx="2" ry="2" />
<text  x="222.57" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="43.2" y="389" width="0.2" height="15.0" fill="rgb(228,134,30)" rx="2" ry="2" />
<text  x="46.21" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="271.8" y="261" width="0.2" height="15.0" fill="rgb(232,185,25)" rx="2" ry="2" />
<text  x="274.79" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (24 samples, 0.47%)</title><rect x="565.2" y="517" width="5.5" height="15.0" fill="rgb(209,75,10)" rx="2" ry="2" />
<text  x="568.19" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_function_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.1" y="501" width="0.2" height="15.0" fill="rgb(214,60,36)" rx="2" ry="2" />
<text  x="69.11" y="511.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1123.4" y="293" width="0.2" height="15.0" fill="rgb(217,195,9)" rx="2" ry="2" />
<text  x="1126.35" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="932.3" y="421" width="0.3" height="15.0" fill="rgb(237,118,41)" rx="2" ry="2" />
<text  x="935.33" y="431.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1091.1" y="469" width="0.2" height="15.0" fill="rgb(213,220,35)" rx="2" ry="2" />
<text  x="1094.06" y="479.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (2 samples, 0.04%)</title><rect x="999.0" y="405" width="0.4" height="15.0" fill="rgb(209,64,4)" rx="2" ry="2" />
<text  x="1001.98" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="75.5" y="453" width="0.2" height="15.0" fill="rgb(244,69,2)" rx="2" ry="2" />
<text  x="78.50" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="370.3" y="261" width="0.4" height="15.0" fill="rgb(231,127,35)" rx="2" ry="2" />
<text  x="373.28" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="208.1" y="389" width="0.7" height="15.0" fill="rgb(247,121,17)" rx="2" ry="2" />
<text  x="211.12" y="399.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="114.2" y="565" width="0.2" height="15.0" fill="rgb(252,95,52)" rx="2" ry="2" />
<text  x="117.21" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="916.5" y="453" width="0.7" height="15.0" fill="rgb(224,134,2)" rx="2" ry="2" />
<text  x="919.53" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="59.2" y="389" width="0.3" height="15.0" fill="rgb(207,159,47)" rx="2" ry="2" />
<text  x="62.24" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (2 samples, 0.04%)</title><rect x="1167.6" y="613" width="0.4" height="15.0" fill="rgb(228,61,24)" rx="2" ry="2" />
<text  x="1170.55" y="623.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="972.4" y="469" width="1.6" height="15.0" fill="rgb(233,119,8)" rx="2" ry="2" />
<text  x="975.41" y="479.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (7 samples, 0.14%)</title><rect x="513.4" y="325" width="1.6" height="15.0" fill="rgb(225,27,1)" rx="2" ry="2" />
<text  x="516.42" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="1036.5" y="373" width="0.3" height="15.0" fill="rgb(212,75,6)" rx="2" ry="2" />
<text  x="1039.55" y="383.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1070.2" y="421" width="0.2" height="15.0" fill="rgb(216,105,5)" rx="2" ry="2" />
<text  x="1073.21" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1125.2" y="309" width="0.2" height="15.0" fill="rgb(228,145,21)" rx="2" ry="2" />
<text  x="1128.18" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="231.9" y="245" width="0.3" height="15.0" fill="rgb(248,214,30)" rx="2" ry="2" />
<text  x="234.94" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (36 samples, 0.70%)</title><rect x="28.6" y="389" width="8.2" height="15.0" fill="rgb(217,31,51)" rx="2" ry="2" />
<text  x="31.55" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (62 samples, 1.20%)</title><rect x="24.0" y="469" width="14.2" height="15.0" fill="rgb(205,72,25)" rx="2" ry="2" />
<text  x="26.97" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="851.5" y="501" width="3.4" height="15.0" fill="rgb(228,186,44)" rx="2" ry="2" />
<text  x="854.48" y="511.5" ></text>
</g>
<g >
<title>seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="116.0" y="597" width="0.3" height="15.0" fill="rgb(249,111,9)" rx="2" ry="2" />
<text  x="119.04" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="920.9" y="437" width="2.5" height="15.0" fill="rgb(238,192,42)" rx="2" ry="2" />
<text  x="923.88" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="634.6" y="501" width="0.4" height="15.0" fill="rgb(234,35,22)" rx="2" ry="2" />
<text  x="637.58" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="873.0" y="421" width="0.2" height="15.0" fill="rgb(248,213,30)" rx="2" ry="2" />
<text  x="876.01" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (3 samples, 0.06%)</title><rect x="992.6" y="389" width="0.7" height="15.0" fill="rgb(229,168,47)" rx="2" ry="2" />
<text  x="995.57" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (3 samples, 0.06%)</title><rect x="22.6" y="533" width="0.7" height="15.0" fill="rgb(234,73,49)" rx="2" ry="2" />
<text  x="25.60" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="46.9" y="373" width="0.2" height="15.0" fill="rgb(244,99,53)" rx="2" ry="2" />
<text  x="49.88" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="114.0" y="405" width="0.2" height="15.0" fill="rgb(241,140,17)" rx="2" ry="2" />
<text  x="116.98" y="415.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%)</title><rect x="1189.3" y="741" width="0.2" height="15.0" fill="rgb(224,176,11)" rx="2" ry="2" />
<text  x="1192.31" y="751.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.10%)</title><rect x="40.0" y="309" width="1.1" height="15.0" fill="rgb(243,159,23)" rx="2" ry="2" />
<text  x="43.00" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (8 samples, 0.16%)</title><rect x="128.6" y="565" width="1.9" height="15.0" fill="rgb(224,188,24)" rx="2" ry="2" />
<text  x="131.64" y="575.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="79.9" y="453" width="0.9" height="15.0" fill="rgb(254,144,27)" rx="2" ry="2" />
<text  x="82.86" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="78.5" y="501" width="0.2" height="15.0" fill="rgb(229,102,38)" rx="2" ry="2" />
<text  x="81.48" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="623.4" y="517" width="0.4" height="15.0" fill="rgb(249,132,12)" rx="2" ry="2" />
<text  x="626.36" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (39 samples, 0.76%)</title><rect x="247.1" y="197" width="8.9" height="15.0" fill="rgb(212,163,3)" rx="2" ry="2" />
<text  x="250.05" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="534.0" y="309" width="0.3" height="15.0" fill="rgb(221,169,32)" rx="2" ry="2" />
<text  x="537.04" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1091.5" y="469" width="0.2" height="15.0" fill="rgb(254,56,50)" rx="2" ry="2" />
<text  x="1094.51" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="640.5" y="581" width="0.3" height="15.0" fill="rgb(242,185,1)" rx="2" ry="2" />
<text  x="643.54" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="308.0" y="373" width="0.2" height="15.0" fill="rgb(244,3,23)" rx="2" ry="2" />
<text  x="310.98" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="21.9" y="581" width="0.2" height="15.0" fill="rgb(251,117,24)" rx="2" ry="2" />
<text  x="24.91" y="591.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="825.6" y="421" width="0.2" height="15.0" fill="rgb(221,203,39)" rx="2" ry="2" />
<text  x="828.60" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="769.7" y="485" width="1.4" height="15.0" fill="rgb(208,50,31)" rx="2" ry="2" />
<text  x="772.72" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1021.0" y="309" width="0.2" height="15.0" fill="rgb(226,216,44)" rx="2" ry="2" />
<text  x="1023.97" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="842.6" y="549" width="0.2" height="15.0" fill="rgb(232,136,28)" rx="2" ry="2" />
<text  x="845.55" y="559.5" ></text>
</g>
<g >
<title>database::has_keyspace (16 samples, 0.31%)</title><rect x="851.5" y="517" width="3.6" height="15.0" fill="rgb(237,153,54)" rx="2" ry="2" />
<text  x="854.48" y="527.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (10 samples, 0.19%)</title><rect x="1025.3" y="277" width="2.3" height="15.0" fill="rgb(232,112,42)" rx="2" ry="2" />
<text  x="1028.32" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (409 samples, 7.94%)</title><rect x="209.5" y="389" width="93.7" height="15.0" fill="rgb(231,59,22)" rx="2" ry="2" />
<text  x="212.49" y="399.5" >logalloc::a..</text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="19.4" y="629" width="0.2" height="15.0" fill="rgb(235,47,4)" rx="2" ry="2" />
<text  x="22.39" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (7 samples, 0.14%)</title><rect x="965.5" y="485" width="1.6" height="15.0" fill="rgb(235,6,8)" rx="2" ry="2" />
<text  x="968.54" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="117" width="0.5" height="15.0" fill="rgb(211,129,40)" rx="2" ry="2" />
<text  x="56.75" y="127.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="949.3" y="517" width="0.4" height="15.0" fill="rgb(244,32,40)" rx="2" ry="2" />
<text  x="952.28" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="645.8" y="597" width="0.5" height="15.0" fill="rgb(227,192,38)" rx="2" ry="2" />
<text  x="648.81" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="812.8" y="197" width="0.4" height="15.0" fill="rgb(216,211,45)" rx="2" ry="2" />
<text  x="815.78" y="207.5" ></text>
</g>
<g >
<title>freeze (12 samples, 0.23%)</title><rect x="1133.9" y="309" width="2.7" height="15.0" fill="rgb(248,12,10)" rx="2" ry="2" />
<text  x="1136.89" y="319.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="955.2" y="517" width="1.4" height="15.0" fill="rgb(221,30,18)" rx="2" ry="2" />
<text  x="958.24" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="278.2" y="325" width="0.2" height="15.0" fill="rgb(230,4,49)" rx="2" ry="2" />
<text  x="281.20" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (25 samples, 0.49%)</title><rect x="442.2" y="341" width="5.7" height="15.0" fill="rgb(221,182,39)" rx="2" ry="2" />
<text  x="445.19" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="298.1" y="293" width="0.9" height="15.0" fill="rgb(246,9,11)" rx="2" ry="2" />
<text  x="301.13" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="299.7" y="341" width="0.3" height="15.0" fill="rgb(224,178,29)" rx="2" ry="2" />
<text  x="302.73" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1126.6" y="309" width="0.2" height="15.0" fill="rgb(228,26,25)" rx="2" ry="2" />
<text  x="1129.56" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="824.5" y="453" width="0.2" height="15.0" fill="rgb(218,121,10)" rx="2" ry="2" />
<text  x="827.46" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.35%)</title><rect x="1080.7" y="373" width="4.2" height="15.0" fill="rgb(216,73,50)" rx="2" ry="2" />
<text  x="1083.75" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (12 samples, 0.23%)</title><rect x="412.9" y="325" width="2.7" height="15.0" fill="rgb(240,102,7)" rx="2" ry="2" />
<text  x="415.88" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (66 samples, 1.28%)</title><rect x="241.3" y="213" width="15.1" height="15.0" fill="rgb(233,7,34)" rx="2" ry="2" />
<text  x="244.33" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (10 samples, 0.19%)</title><rect x="831.6" y="437" width="2.2" height="15.0" fill="rgb(206,210,39)" rx="2" ry="2" />
<text  x="834.56" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="269.5" y="245" width="0.5" height="15.0" fill="rgb(226,136,10)" rx="2" ry="2" />
<text  x="272.50" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="587.4" y="421" width="0.5" height="15.0" fill="rgb(233,13,32)" rx="2" ry="2" />
<text  x="590.40" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="204.2" y="357" width="0.3" height="15.0" fill="rgb(225,125,9)" rx="2" ry="2" />
<text  x="207.22" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="42.3" y="421" width="0.7" height="15.0" fill="rgb(229,93,35)" rx="2" ry="2" />
<text  x="45.29" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (6 samples, 0.12%)</title><rect x="741.5" y="405" width="1.4" height="15.0" fill="rgb(249,162,38)" rx="2" ry="2" />
<text  x="744.55" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (519 samples, 10.07%)</title><rect x="337.1" y="485" width="118.8" height="15.0" fill="rgb(254,63,9)" rx="2" ry="2" />
<text  x="340.07" y="495.5" >flat_mutation_..</text>
</g>
<g >
<title>auth::service::get_uncached_permissions (1 samples, 0.02%)</title><rect x="1167.8" y="453" width="0.2" height="15.0" fill="rgb(221,17,43)" rx="2" ry="2" />
<text  x="1170.78" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="55.8" y="245" width="0.2" height="15.0" fill="rgb(216,102,26)" rx="2" ry="2" />
<text  x="58.81" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="42.3" y="309" width="0.7" height="15.0" fill="rgb(225,10,2)" rx="2" ry="2" />
<text  x="45.29" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="567.7" y="453" width="0.9" height="15.0" fill="rgb(249,59,36)" rx="2" ry="2" />
<text  x="570.71" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="130.0" y="533" width="0.2" height="15.0" fill="rgb(231,15,35)" rx="2" ry="2" />
<text  x="133.02" y="543.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%)</title><rect x="114.9" y="597" width="1.1" height="15.0" fill="rgb(242,96,28)" rx="2" ry="2" />
<text  x="117.90" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="84.4" y="485" width="0.3" height="15.0" fill="rgb(251,58,28)" rx="2" ry="2" />
<text  x="87.44" y="495.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="277" width="0.5" height="15.0" fill="rgb(215,154,29)" rx="2" ry="2" />
<text  x="52.62" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="907.4" y="469" width="0.2" height="15.0" fill="rgb(207,102,1)" rx="2" ry="2" />
<text  x="910.37" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%)</title><rect x="450.2" y="357" width="0.7" height="15.0" fill="rgb(220,192,29)" rx="2" ry="2" />
<text  x="453.21" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (7 samples, 0.14%)</title><rect x="568.6" y="469" width="1.6" height="15.0" fill="rgb(213,58,27)" rx="2" ry="2" />
<text  x="571.62" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%)</title><rect x="194.4" y="389" width="0.2" height="15.0" fill="rgb(244,170,40)" rx="2" ry="2" />
<text  x="197.38" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%)</title><rect x="288.1" y="373" width="0.2" height="15.0" fill="rgb(207,38,46)" rx="2" ry="2" />
<text  x="291.05" y="383.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="114.2" y="549" width="0.2" height="15.0" fill="rgb(240,95,1)" rx="2" ry="2" />
<text  x="117.21" y="559.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%)</title><rect x="23.1" y="437" width="0.2" height="15.0" fill="rgb(248,7,51)" rx="2" ry="2" />
<text  x="26.06" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="628.2" y="549" width="0.7" height="15.0" fill="rgb(225,197,18)" rx="2" ry="2" />
<text  x="631.17" y="559.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (11 samples, 0.21%)</title><rect x="777.5" y="501" width="2.5" height="15.0" fill="rgb(224,43,29)" rx="2" ry="2" />
<text  x="780.50" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (10 samples, 0.19%)</title><rect x="83.8" y="581" width="2.2" height="15.0" fill="rgb(218,20,10)" rx="2" ry="2" />
<text  x="86.75" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="41.8" y="405" width="0.3" height="15.0" fill="rgb(241,93,39)" rx="2" ry="2" />
<text  x="44.84" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (8 samples, 0.16%)</title><rect x="789.2" y="405" width="1.8" height="15.0" fill="rgb(227,173,0)" rx="2" ry="2" />
<text  x="792.18" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="864.3" y="581" width="0.2" height="15.0" fill="rgb(227,102,49)" rx="2" ry="2" />
<text  x="867.31" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%)</title><rect x="114.9" y="613" width="1.1" height="15.0" fill="rgb(227,125,27)" rx="2" ry="2" />
<text  x="117.90" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="638.2" y="501" width="0.7" height="15.0" fill="rgb(232,8,36)" rx="2" ry="2" />
<text  x="641.25" y="511.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="19.4" y="517" width="0.2" height="15.0" fill="rgb(213,105,42)" rx="2" ry="2" />
<text  x="22.39" y="527.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%)</title><rect x="729.9" y="581" width="0.2" height="15.0" fill="rgb(249,165,52)" rx="2" ry="2" />
<text  x="732.86" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (3 samples, 0.06%)</title><rect x="249.1" y="165" width="0.7" height="15.0" fill="rgb(230,13,29)" rx="2" ry="2" />
<text  x="252.11" y="175.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="294.9" y="293" width="0.5" height="15.0" fill="rgb(210,115,38)" rx="2" ry="2" />
<text  x="297.92" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="39.8" y="325" width="0.2" height="15.0" fill="rgb(252,126,12)" rx="2" ry="2" />
<text  x="42.77" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="53.1" y="357" width="0.2" height="15.0" fill="rgb(239,74,34)" rx="2" ry="2" />
<text  x="56.06" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="47.8" y="293" width="0.4" height="15.0" fill="rgb(231,20,15)" rx="2" ry="2" />
<text  x="50.79" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="45.3" y="405" width="0.9" height="15.0" fill="rgb(206,153,0)" rx="2" ry="2" />
<text  x="48.27" y="415.5" ></text>
</g>
<g >
<title>database::find_uuid (15 samples, 0.29%)</title><rect x="771.1" y="501" width="3.4" height="15.0" fill="rgb(214,199,15)" rx="2" ry="2" />
<text  x="774.09" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="19.4" y="645" width="0.2" height="15.0" fill="rgb(239,181,28)" rx="2" ry="2" />
<text  x="22.39" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (28 samples, 0.54%)</title><rect x="441.5" y="357" width="6.4" height="15.0" fill="rgb(248,194,4)" rx="2" ry="2" />
<text  x="444.51" y="367.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%)</title><rect x="1189.5" y="693" width="0.3" height="15.0" fill="rgb(232,216,11)" rx="2" ry="2" />
<text  x="1192.54" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%)</title><rect x="682.0" y="565" width="1.4" height="15.0" fill="rgb(252,55,30)" rx="2" ry="2" />
<text  x="685.00" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (3 samples, 0.06%)</title><rect x="869.1" y="613" width="0.7" height="15.0" fill="rgb(235,113,35)" rx="2" ry="2" />
<text  x="872.12" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="455.0" y="373" width="0.7" height="15.0" fill="rgb(205,75,20)" rx="2" ry="2" />
<text  x="458.02" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%)</title><rect x="948.6" y="501" width="0.2" height="15.0" fill="rgb(218,125,25)" rx="2" ry="2" />
<text  x="951.59" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.6" y="245" width="0.3" height="15.0" fill="rgb(253,104,24)" rx="2" ry="2" />
<text  x="49.65" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="518.9" y="325" width="0.2" height="15.0" fill="rgb(233,48,39)" rx="2" ry="2" />
<text  x="521.92" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="611.7" y="533" width="0.2" height="15.0" fill="rgb(250,204,4)" rx="2" ry="2" />
<text  x="614.68" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="73.4" y="421" width="0.3" height="15.0" fill="rgb(231,137,22)" rx="2" ry="2" />
<text  x="76.44" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="627.0" y="549" width="1.2" height="15.0" fill="rgb(213,35,44)" rx="2" ry="2" />
<text  x="630.03" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="108.3" y="581" width="0.2" height="15.0" fill="rgb(211,17,0)" rx="2" ry="2" />
<text  x="111.26" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%)</title><rect x="414.9" y="277" width="0.7" height="15.0" fill="rgb(232,111,46)" rx="2" ry="2" />
<text  x="417.94" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="761.0" y="517" width="0.2" height="15.0" fill="rgb(247,83,47)" rx="2" ry="2" />
<text  x="764.01" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1167.8" y="501" width="0.2" height="15.0" fill="rgb(213,96,51)" rx="2" ry="2" />
<text  x="1170.78" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="956.6" y="517" width="0.2" height="15.0" fill="rgb(239,117,25)" rx="2" ry="2" />
<text  x="959.61" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="558.8" y="421" width="0.2" height="15.0" fill="rgb(252,80,44)" rx="2" ry="2" />
<text  x="561.77" y="431.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="672.4" y="533" width="1.4" height="15.0" fill="rgb(238,108,7)" rx="2" ry="2" />
<text  x="675.38" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="843.7" y="549" width="0.7" height="15.0" fill="rgb(214,228,4)" rx="2" ry="2" />
<text  x="846.70" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (15 samples, 0.29%)</title><rect x="689.8" y="597" width="3.4" height="15.0" fill="rgb(205,42,54)" rx="2" ry="2" />
<text  x="692.78" y="607.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%)</title><rect x="26.9" y="293" width="0.3" height="15.0" fill="rgb(222,106,26)" rx="2" ry="2" />
<text  x="29.95" y="303.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (1 samples, 0.02%)</title><rect x="520.1" y="389" width="0.2" height="15.0" fill="rgb(222,213,11)" rx="2" ry="2" />
<text  x="523.07" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="136.9" y="501" width="0.2" height="15.0" fill="rgb(242,94,14)" rx="2" ry="2" />
<text  x="139.89" y="511.5" ></text>
</g>
<g >
<title>database::apply_in_memory (32 samples, 0.62%)</title><rect x="1121.3" y="405" width="7.3" height="15.0" fill="rgb(205,86,47)" rx="2" ry="2" />
<text  x="1124.29" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (13 samples, 0.25%)</title><rect x="300.0" y="373" width="2.9" height="15.0" fill="rgb(251,100,20)" rx="2" ry="2" />
<text  x="302.96" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (6 samples, 0.12%)</title><rect x="39.8" y="357" width="1.3" height="15.0" fill="rgb(213,138,28)" rx="2" ry="2" />
<text  x="42.77" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="730.3" y="581" width="0.3" height="15.0" fill="rgb(232,4,40)" rx="2" ry="2" />
<text  x="733.32" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="647.6" y="581" width="0.3" height="15.0" fill="rgb(236,76,20)" rx="2" ry="2" />
<text  x="650.64" y="591.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="19.2" y="357" width="0.2" height="15.0" fill="rgb(221,142,54)" rx="2" ry="2" />
<text  x="22.16" y="367.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="114.9" y="453" width="0.2" height="15.0" fill="rgb(248,130,28)" rx="2" ry="2" />
<text  x="117.90" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (1 samples, 0.02%)</title><rect x="1130.0" y="421" width="0.2" height="15.0" fill="rgb(253,206,13)" rx="2" ry="2" />
<text  x="1132.99" y="431.5" ></text>
</g>
<g >
<title>set_type_impl::get_instance (1 samples, 0.02%)</title><rect x="114.7" y="565" width="0.2" height="15.0" fill="rgb(222,36,18)" rx="2" ry="2" />
<text  x="117.67" y="575.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1124.3" y="309" width="0.4" height="15.0" fill="rgb(205,67,49)" rx="2" ry="2" />
<text  x="1127.27" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::detail::arg_formatter_base&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char, fmt::v7::detail::error_handler&gt;::operator (1 samples, 0.02%)</title><rect x="10.9" y="645" width="0.2" height="15.0" fill="rgb(207,102,8)" rx="2" ry="2" />
<text  x="13.92" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="1143.5" y="597" width="0.7" height="15.0" fill="rgb(235,189,3)" rx="2" ry="2" />
<text  x="1146.51" y="607.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="114.0" y="469" width="0.2" height="15.0" fill="rgb(235,77,35)" rx="2" ry="2" />
<text  x="116.98" y="479.5" ></text>
</g>
<g >
<title>freeze (1 samples, 0.02%)</title><rect x="113.8" y="533" width="0.2" height="15.0" fill="rgb(211,168,53)" rx="2" ry="2" />
<text  x="116.75" y="543.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="819.0" y="389" width="0.2" height="15.0" fill="rgb(218,99,21)" rx="2" ry="2" />
<text  x="821.96" y="399.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.16%)</title><rect x="10.2" y="725" width="1.9" height="15.0" fill="rgb(243,47,40)" rx="2" ry="2" />
<text  x="13.23" y="735.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1167.8" y="421" width="0.2" height="15.0" fill="rgb(248,144,34)" rx="2" ry="2" />
<text  x="1170.78" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="828.6" y="485" width="0.2" height="15.0" fill="rgb(231,100,46)" rx="2" ry="2" />
<text  x="831.58" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="485.7" y="421" width="0.2" height="15.0" fill="rgb(241,120,9)" rx="2" ry="2" />
<text  x="488.71" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="869.8" y="613" width="0.2" height="15.0" fill="rgb(209,186,18)" rx="2" ry="2" />
<text  x="872.81" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::register_stats (1 samples, 0.02%)</title><rect x="116.0" y="501" width="0.3" height="15.0" fill="rgb(232,130,47)" rx="2" ry="2" />
<text  x="119.04" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="57.2" y="373" width="0.2" height="15.0" fill="rgb(233,24,40)" rx="2" ry="2" />
<text  x="60.18" y="383.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (1 samples, 0.02%)</title><rect x="113.8" y="517" width="0.2" height="15.0" fill="rgb(243,43,35)" rx="2" ry="2" />
<text  x="116.75" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="457.3" y="453" width="0.5" height="15.0" fill="rgb(217,162,15)" rx="2" ry="2" />
<text  x="460.31" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="455.5" y="357" width="0.2" height="15.0" fill="rgb(226,27,25)" rx="2" ry="2" />
<text  x="458.48" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="600.0" y="485" width="0.2" height="15.0" fill="rgb(230,196,25)" rx="2" ry="2" />
<text  x="603.00" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="114.9" y="421" width="0.2" height="15.0" fill="rgb(226,118,1)" rx="2" ry="2" />
<text  x="117.90" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.10%)</title><rect x="343.0" y="405" width="1.2" height="15.0" fill="rgb(253,127,37)" rx="2" ry="2" />
<text  x="346.02" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="85.1" y="389" width="0.3" height="15.0" fill="rgb(238,221,22)" rx="2" ry="2" />
<text  x="88.12" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="51.7" y="309" width="0.4" height="15.0" fill="rgb(236,172,49)" rx="2" ry="2" />
<text  x="54.68" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%)</title><rect x="1168.5" y="565" width="0.2" height="15.0" fill="rgb(243,192,28)" rx="2" ry="2" />
<text  x="1171.47" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="84.2" y="533" width="0.2" height="15.0" fill="rgb(247,53,6)" rx="2" ry="2" />
<text  x="87.21" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="430.3" y="277" width="2.3" height="15.0" fill="rgb(220,129,42)" rx="2" ry="2" />
<text  x="433.28" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (34 samples, 0.66%)</title><rect x="440.6" y="373" width="7.8" height="15.0" fill="rgb(246,85,38)" rx="2" ry="2" />
<text  x="443.59" y="383.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="1134.6" y="261" width="0.4" height="15.0" fill="rgb(214,138,23)" rx="2" ry="2" />
<text  x="1137.57" y="271.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="161.9" y="549" width="1.6" height="15.0" fill="rgb(215,101,8)" rx="2" ry="2" />
<text  x="164.85" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="602.7" y="517" width="0.3" height="15.0" fill="rgb(212,226,50)" rx="2" ry="2" />
<text  x="605.75" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.8" y="261" width="0.2" height="15.0" fill="rgb(209,134,43)" rx="2" ry="2" />
<text  x="45.75" y="271.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="83.8" y="501" width="0.2" height="15.0" fill="rgb(213,79,41)" rx="2" ry="2" />
<text  x="86.75" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="780.7" y="437" width="0.7" height="15.0" fill="rgb(252,30,22)" rx="2" ry="2" />
<text  x="783.71" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.14%)</title><rect x="755.1" y="421" width="1.6" height="15.0" fill="rgb(217,55,6)" rx="2" ry="2" />
<text  x="758.06" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%)</title><rect x="1026.0" y="261" width="0.5" height="15.0" fill="rgb(230,80,10)" rx="2" ry="2" />
<text  x="1029.01" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="60.2" y="421" width="0.2" height="15.0" fill="rgb(231,34,23)" rx="2" ry="2" />
<text  x="63.16" y="431.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="696.9" y="581" width="0.2" height="15.0" fill="rgb(220,160,27)" rx="2" ry="2" />
<text  x="699.88" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="1029.2" y="309" width="0.5" height="15.0" fill="rgb(210,136,11)" rx="2" ry="2" />
<text  x="1032.22" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (277 samples, 5.38%)</title><rect x="223.2" y="357" width="63.5" height="15.0" fill="rgb(235,210,32)" rx="2" ry="2" />
<text  x="226.23" y="367.5" >partit..</text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1113.0" y="517" width="0.3" height="15.0" fill="rgb(213,224,37)" rx="2" ry="2" />
<text  x="1116.04" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="835.2" y="389" width="0.3" height="15.0" fill="rgb(236,138,41)" rx="2" ry="2" />
<text  x="838.22" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="1136.4" y="261" width="0.2" height="15.0" fill="rgb(225,3,13)" rx="2" ry="2" />
<text  x="1139.41" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="128.4" y="565" width="0.2" height="15.0" fill="rgb(243,63,13)" rx="2" ry="2" />
<text  x="131.41" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="722.1" y="613" width="0.9" height="15.0" fill="rgb(230,72,14)" rx="2" ry="2" />
<text  x="725.08" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="67.3" y="453" width="0.2" height="15.0" fill="rgb(208,211,33)" rx="2" ry="2" />
<text  x="70.26" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%)</title><rect x="29.0" y="373" width="0.2" height="15.0" fill="rgb(206,125,31)" rx="2" ry="2" />
<text  x="32.01" y="383.5" ></text>
</g>
<g >
<title>auth::require_record (1 samples, 0.02%)</title><rect x="1167.8" y="373" width="0.2" height="15.0" fill="rgb(244,87,22)" rx="2" ry="2" />
<text  x="1170.78" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (2 samples, 0.04%)</title><rect x="842.8" y="549" width="0.4" height="15.0" fill="rgb(251,5,7)" rx="2" ry="2" />
<text  x="845.78" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (11 samples, 0.21%)</title><rect x="407.2" y="277" width="2.5" height="15.0" fill="rgb(248,203,29)" rx="2" ry="2" />
<text  x="410.15" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1027.2" y="245" width="0.2" height="15.0" fill="rgb(211,81,43)" rx="2" ry="2" />
<text  x="1030.15" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="277" width="0.5" height="15.0" fill="rgb(211,143,0)" rx="2" ry="2" />
<text  x="56.75" y="287.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (1 samples, 0.02%)</title><rect x="795.6" y="405" width="0.2" height="15.0" fill="rgb(239,120,35)" rx="2" ry="2" />
<text  x="798.60" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.19%)</title><rect x="38.9" y="453" width="2.2" height="15.0" fill="rgb(239,118,36)" rx="2" ry="2" />
<text  x="41.86" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="324.7" y="405" width="0.5" height="15.0" fill="rgb(252,162,17)" rx="2" ry="2" />
<text  x="327.70" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="664.6" y="533" width="0.2" height="15.0" fill="rgb(225,64,18)" rx="2" ry="2" />
<text  x="667.59" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="67.3" y="469" width="0.2" height="15.0" fill="rgb(222,196,20)" rx="2" ry="2" />
<text  x="70.26" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (2 samples, 0.04%)</title><rect x="718.4" y="533" width="0.5" height="15.0" fill="rgb(241,0,21)" rx="2" ry="2" />
<text  x="721.41" y="543.5" ></text>
</g>
<g >
<title>tombstone::apply (3 samples, 0.06%)</title><rect x="433.3" y="309" width="0.6" height="15.0" fill="rgb(245,224,1)" rx="2" ry="2" />
<text  x="436.26" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (26 samples, 0.50%)</title><rect x="250.0" y="181" width="6.0" height="15.0" fill="rgb(210,209,53)" rx="2" ry="2" />
<text  x="253.03" y="191.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="116.0" y="453" width="0.3" height="15.0" fill="rgb(228,8,33)" rx="2" ry="2" />
<text  x="119.04" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="654.5" y="597" width="0.2" height="15.0" fill="rgb(231,56,47)" rx="2" ry="2" />
<text  x="657.51" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (23 samples, 0.45%)</title><rect x="199.4" y="373" width="5.3" height="15.0" fill="rgb(250,140,9)" rx="2" ry="2" />
<text  x="202.41" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="177.0" y="485" width="0.2" height="15.0" fill="rgb(228,56,13)" rx="2" ry="2" />
<text  x="179.97" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1147.6" y="597" width="0.3" height="15.0" fill="rgb(212,201,40)" rx="2" ry="2" />
<text  x="1150.63" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="609.4" y="501" width="0.7" height="15.0" fill="rgb(218,47,35)" rx="2" ry="2" />
<text  x="612.39" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="767.9" y="517" width="0.2" height="15.0" fill="rgb(226,5,35)" rx="2" ry="2" />
<text  x="770.88" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="529.2" y="373" width="0.3" height="15.0" fill="rgb(239,224,38)" rx="2" ry="2" />
<text  x="532.23" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="559.9" y="437" width="1.2" height="15.0" fill="rgb(239,57,40)" rx="2" ry="2" />
<text  x="562.92" y="447.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="87.4" y="629" width="0.2" height="15.0" fill="rgb(249,216,16)" rx="2" ry="2" />
<text  x="90.41" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="54.7" y="341" width="0.2" height="15.0" fill="rgb(216,119,13)" rx="2" ry="2" />
<text  x="57.66" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="59.2" y="373" width="0.3" height="15.0" fill="rgb(220,22,32)" rx="2" ry="2" />
<text  x="62.24" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="98.4" y="581" width="0.5" height="15.0" fill="rgb(213,53,38)" rx="2" ry="2" />
<text  x="101.41" y="591.5" ></text>
</g>
<g >
<title>canonical_mutation::canonical_mutation (1 samples, 0.02%)</title><rect x="114.9" y="485" width="0.2" height="15.0" fill="rgb(205,25,15)" rx="2" ry="2" />
<text  x="117.90" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%)</title><rect x="715.0" y="533" width="0.4" height="15.0" fill="rgb(210,80,1)" rx="2" ry="2" />
<text  x="717.98" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="674.0" y="581" width="0.2" height="15.0" fill="rgb(238,49,0)" rx="2" ry="2" />
<text  x="676.98" y="591.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%)</title><rect x="115.6" y="405" width="0.2" height="15.0" fill="rgb(236,119,44)" rx="2" ry="2" />
<text  x="118.59" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%)</title><rect x="49.6" y="181" width="0.3" height="15.0" fill="rgb(210,4,1)" rx="2" ry="2" />
<text  x="52.62" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="586.0" y="373" width="0.3" height="15.0" fill="rgb(247,6,13)" rx="2" ry="2" />
<text  x="589.03" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::setter, false&gt;::make&lt;column_definition const&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="71.6" y="517" width="0.2" height="15.0" fill="rgb(220,4,24)" rx="2" ry="2" />
<text  x="74.61" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="59.7" y="261" width="0.2" height="15.0" fill="rgb(207,142,48)" rx="2" ry="2" />
<text  x="62.70" y="271.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="276.6" y="277" width="0.2" height="15.0" fill="rgb(205,165,40)" rx="2" ry="2" />
<text  x="279.60" y="287.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (28 samples, 0.54%)</title><rect x="1022.3" y="309" width="6.5" height="15.0" fill="rgb(220,53,13)" rx="2" ry="2" />
<text  x="1025.34" y="319.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="933.2" y="501" width="0.3" height="15.0" fill="rgb(229,159,53)" rx="2" ry="2" />
<text  x="936.25" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="415.6" y="325" width="0.5" height="15.0" fill="rgb(243,158,48)" rx="2" ry="2" />
<text  x="418.62" y="335.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="51.7" y="245" width="0.2" height="15.0" fill="rgb(239,6,38)" rx="2" ry="2" />
<text  x="54.68" y="255.5" ></text>
</g>
<g >
<title>freeze (1 samples, 0.02%)</title><rect x="1133.4" y="325" width="0.3" height="15.0" fill="rgb(211,169,15)" rx="2" ry="2" />
<text  x="1136.43" y="335.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%)</title><rect x="611.2" y="533" width="0.5" height="15.0" fill="rgb(219,43,6)" rx="2" ry="2" />
<text  x="614.22" y="543.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (10 samples, 0.19%)</title><rect x="72.5" y="501" width="2.3" height="15.0" fill="rgb(207,177,11)" rx="2" ry="2" />
<text  x="75.53" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="955.2" y="501" width="1.4" height="15.0" fill="rgb(220,220,53)" rx="2" ry="2" />
<text  x="958.24" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="67.3" y="501" width="0.4" height="15.0" fill="rgb(211,1,31)" rx="2" ry="2" />
<text  x="70.26" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (39 samples, 0.76%)</title><rect x="734.4" y="533" width="9.0" height="15.0" fill="rgb(221,46,42)" rx="2" ry="2" />
<text  x="737.44" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%)</title><rect x="937.4" y="517" width="0.4" height="15.0" fill="rgb(228,130,26)" rx="2" ry="2" />
<text  x="940.37" y="527.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (2 samples, 0.04%)</title><rect x="82.4" y="597" width="0.4" height="15.0" fill="rgb(227,115,53)" rx="2" ry="2" />
<text  x="85.38" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (110 samples, 2.14%)</title><rect x="38.2" y="485" width="25.2" height="15.0" fill="rgb(215,219,21)" rx="2" ry="2" />
<text  x="41.17" y="495.5" >c..</text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="821.9" y="437" width="0.3" height="15.0" fill="rgb(220,125,49)" rx="2" ry="2" />
<text  x="824.94" y="447.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%)</title><rect x="1127.2" y="357" width="0.3" height="15.0" fill="rgb(217,167,33)" rx="2" ry="2" />
<text  x="1130.24" y="367.5" ></text>
</g>
<g >
<title>memtable::apply (27 samples, 0.52%)</title><rect x="1121.7" y="373" width="6.2" height="15.0" fill="rgb(250,89,14)" rx="2" ry="2" />
<text  x="1124.75" y="383.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="71.8" y="517" width="0.3" height="15.0" fill="rgb(219,220,16)" rx="2" ry="2" />
<text  x="74.84" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1118.5" y="533" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1121.54" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="668.9" y="597" width="0.5" height="15.0" fill="rgb(227,207,35)" rx="2" ry="2" />
<text  x="671.94" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="114.0" y="261" width="0.2" height="15.0" fill="rgb(221,211,22)" rx="2" ry="2" />
<text  x="116.98" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%)</title><rect x="36.8" y="389" width="0.2" height="15.0" fill="rgb(206,1,38)" rx="2" ry="2" />
<text  x="39.80" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="699.4" y="581" width="0.2" height="15.0" fill="rgb(215,118,3)" rx="2" ry="2" />
<text  x="702.40" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1127.2" y="341" width="0.3" height="15.0" fill="rgb(214,6,10)" rx="2" ry="2" />
<text  x="1130.24" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="513.0" y="325" width="0.4" height="15.0" fill="rgb(229,150,13)" rx="2" ry="2" />
<text  x="515.97" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="937.1" y="517" width="0.3" height="15.0" fill="rgb(219,176,10)" rx="2" ry="2" />
<text  x="940.14" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="370.3" y="277" width="0.4" height="15.0" fill="rgb(233,169,1)" rx="2" ry="2" />
<text  x="373.28" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="169.2" y="501" width="0.2" height="15.0" fill="rgb(235,125,44)" rx="2" ry="2" />
<text  x="172.18" y="511.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="552.8" y="389" width="0.2" height="15.0" fill="rgb(212,51,25)" rx="2" ry="2" />
<text  x="555.82" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="784.1" y="485" width="0.3" height="15.0" fill="rgb(242,181,37)" rx="2" ry="2" />
<text  x="787.15" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (10 samples, 0.19%)</title><rect x="662.8" y="565" width="2.2" height="15.0" fill="rgb(208,62,10)" rx="2" ry="2" />
<text  x="665.76" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1141.0" y="613" width="0.2" height="15.0" fill="rgb(231,101,51)" rx="2" ry="2" />
<text  x="1143.99" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,271 samples, 44.08%)</title><rect x="120.2" y="597" width="520.1" height="15.0" fill="rgb(207,46,29)" rx="2" ry="2" />
<text  x="123.17" y="607.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.39%)</title><rect x="1133.4" y="421" width="4.6" height="15.0" fill="rgb(206,219,5)" rx="2" ry="2" />
<text  x="1136.43" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.4" y="309" width="0.2" height="15.0" fill="rgb(253,215,53)" rx="2" ry="2" />
<text  x="49.42" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="811.9" y="229" width="0.2" height="15.0" fill="rgb(241,109,50)" rx="2" ry="2" />
<text  x="814.86" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,037 samples, 20.13%)</title><rect x="882.6" y="565" width="237.5" height="15.0" fill="rgb(251,105,7)" rx="2" ry="2" />
<text  x="885.63" y="575.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::component_type, std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;sstables::component_type const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::component_type&gt;, seastar::enum_hash&lt;sstables::component_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="644.4" y="517" width="0.3" height="15.0" fill="rgb(205,56,6)" rx="2" ry="2" />
<text  x="647.43" y="527.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="29.9" y="341" width="0.3" height="15.0" fill="rgb(226,109,29)" rx="2" ry="2" />
<text  x="32.93" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="51.9" y="229" width="0.2" height="15.0" fill="rgb(231,226,33)" rx="2" ry="2" />
<text  x="54.91" y="239.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="854.5" y="453" width="0.4" height="15.0" fill="rgb(247,55,31)" rx="2" ry="2" />
<text  x="857.46" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="1054.9" y="373" width="0.4" height="15.0" fill="rgb(222,18,43)" rx="2" ry="2" />
<text  x="1057.87" y="383.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="301.6" y="309" width="0.2" height="15.0" fill="rgb(246,190,15)" rx="2" ry="2" />
<text  x="304.56" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="262.4" y="229" width="0.5" height="15.0" fill="rgb(225,160,34)" rx="2" ry="2" />
<text  x="265.40" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="964.2" y="453" width="1.3" height="15.0" fill="rgb(250,124,17)" rx="2" ry="2" />
<text  x="967.17" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (423 samples, 8.21%)</title><rect x="464.9" y="501" width="96.9" height="15.0" fill="rgb(245,204,50)" rx="2" ry="2" />
<text  x="467.87" y="511.5" >std::functi..</text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (516 samples, 10.02%)</title><rect x="337.5" y="453" width="118.2" height="15.0" fill="rgb(239,61,33)" rx="2" ry="2" />
<text  x="340.52" y="463.5" >seastar::futur..</text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (7 samples, 0.14%)</title><rect x="104.6" y="533" width="1.6" height="15.0" fill="rgb(237,49,11)" rx="2" ry="2" />
<text  x="107.59" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="511.6" y="341" width="0.2" height="15.0" fill="rgb(214,117,28)" rx="2" ry="2" />
<text  x="514.59" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.76%)</title><rect x="805.2" y="309" width="8.9" height="15.0" fill="rgb(231,44,40)" rx="2" ry="2" />
<text  x="808.22" y="319.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1115.3" y="533" width="0.3" height="15.0" fill="rgb(226,69,40)" rx="2" ry="2" />
<text  x="1118.33" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (6 samples, 0.12%)</title><rect x="291.9" y="309" width="1.4" height="15.0" fill="rgb(214,188,23)" rx="2" ry="2" />
<text  x="294.94" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="54.4" y="357" width="0.3" height="15.0" fill="rgb(214,0,19)" rx="2" ry="2" />
<text  x="57.43" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (2 samples, 0.04%)</title><rect x="603.7" y="533" width="0.4" height="15.0" fill="rgb(235,3,34)" rx="2" ry="2" />
<text  x="606.66" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="169.4" y="533" width="0.2" height="15.0" fill="rgb(213,213,23)" rx="2" ry="2" />
<text  x="172.41" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (15 samples, 0.29%)</title><rect x="873.7" y="501" width="3.4" height="15.0" fill="rgb(225,198,26)" rx="2" ry="2" />
<text  x="876.70" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="341" width="0.2" height="15.0" fill="rgb(248,179,48)" rx="2" ry="2" />
<text  x="83.09" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="832.9" y="405" width="0.7" height="15.0" fill="rgb(233,150,9)" rx="2" ry="2" />
<text  x="835.93" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="373" width="0.6" height="15.0" fill="rgb(249,89,33)" rx="2" ry="2" />
<text  x="50.56" y="383.5" ></text>
</g>
<g >
<title>free (5 samples, 0.10%)</title><rect x="443.3" y="293" width="1.2" height="15.0" fill="rgb(223,79,2)" rx="2" ry="2" />
<text  x="446.34" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (10 samples, 0.19%)</title><rect x="630.7" y="533" width="2.3" height="15.0" fill="rgb(224,132,46)" rx="2" ry="2" />
<text  x="633.69" y="543.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%)</title><rect x="1032.0" y="325" width="1.8" height="15.0" fill="rgb(232,13,32)" rx="2" ry="2" />
<text  x="1034.96" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="33.8" y="373" width="0.2" height="15.0" fill="rgb(239,156,26)" rx="2" ry="2" />
<text  x="36.82" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="696.9" y="453" width="0.2" height="15.0" fill="rgb(215,44,33)" rx="2" ry="2" />
<text  x="699.88" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1039.3" y="389" width="0.2" height="15.0" fill="rgb(234,21,18)" rx="2" ry="2" />
<text  x="1042.29" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%)</title><rect x="77.6" y="549" width="0.9" height="15.0" fill="rgb(220,167,31)" rx="2" ry="2" />
<text  x="80.57" y="559.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%)</title><rect x="381.7" y="293" width="0.3" height="15.0" fill="rgb(223,225,30)" rx="2" ry="2" />
<text  x="384.73" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="692.3" y="565" width="0.5" height="15.0" fill="rgb(241,145,51)" rx="2" ry="2" />
<text  x="695.30" y="575.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="334.8" y="501" width="0.2" height="15.0" fill="rgb(242,6,0)" rx="2" ry="2" />
<text  x="337.77" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="771.3" y="469" width="0.5" height="15.0" fill="rgb(220,143,30)" rx="2" ry="2" />
<text  x="774.32" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (41 samples, 0.80%)</title><rect x="1129.3" y="517" width="9.4" height="15.0" fill="rgb(219,195,33)" rx="2" ry="2" />
<text  x="1132.31" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="827.4" y="437" width="0.3" height="15.0" fill="rgb(243,81,13)" rx="2" ry="2" />
<text  x="830.43" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="518.2" y="309" width="0.5" height="15.0" fill="rgb(207,187,52)" rx="2" ry="2" />
<text  x="521.23" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="163.5" y="549" width="0.2" height="15.0" fill="rgb(242,72,21)" rx="2" ry="2" />
<text  x="166.45" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="448.8" y="357" width="1.0" height="15.0" fill="rgb(213,137,2)" rx="2" ry="2" />
<text  x="451.84" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="777.5" y="469" width="0.2" height="15.0" fill="rgb(210,90,7)" rx="2" ry="2" />
<text  x="780.50" y="479.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="953.2" y="517" width="0.2" height="15.0" fill="rgb(212,112,39)" rx="2" ry="2" />
<text  x="956.18" y="527.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="649.5" y="597" width="0.9" height="15.0" fill="rgb(224,208,29)" rx="2" ry="2" />
<text  x="652.47" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1102.5" y="485" width="0.2" height="15.0" fill="rgb(210,183,26)" rx="2" ry="2" />
<text  x="1105.51" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="56.0" y="229" width="0.3" height="15.0" fill="rgb(217,67,17)" rx="2" ry="2" />
<text  x="59.04" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.5" y="453" width="0.2" height="15.0" fill="rgb(206,100,10)" rx="2" ry="2" />
<text  x="67.51" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="586.7" y="405" width="0.2" height="15.0" fill="rgb(241,223,21)" rx="2" ry="2" />
<text  x="589.72" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%)</title><rect x="52.8" y="357" width="0.3" height="15.0" fill="rgb(220,173,29)" rx="2" ry="2" />
<text  x="55.83" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (24 samples, 0.47%)</title><rect x="401.7" y="277" width="5.5" height="15.0" fill="rgb(243,146,1)" rx="2" ry="2" />
<text  x="404.65" y="287.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%)</title><rect x="294.5" y="293" width="0.4" height="15.0" fill="rgb(246,126,18)" rx="2" ry="2" />
<text  x="297.46" y="303.5" ></text>
</g>
<g >
<title>cql3::relation::to_column_definition (3 samples, 0.06%)</title><rect x="72.8" y="469" width="0.6" height="15.0" fill="rgb(239,153,2)" rx="2" ry="2" />
<text  x="75.76" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="48.2" y="421" width="0.3" height="15.0" fill="rgb(211,41,21)" rx="2" ry="2" />
<text  x="51.25" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="85.1" y="421" width="0.3" height="15.0" fill="rgb(251,139,22)" rx="2" ry="2" />
<text  x="88.12" y="431.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%)</title><rect x="476.8" y="389" width="0.2" height="15.0" fill="rgb(229,180,2)" rx="2" ry="2" />
<text  x="479.78" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="461.9" y="517" width="0.7" height="15.0" fill="rgb(207,172,51)" rx="2" ry="2" />
<text  x="464.89" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (15 samples, 0.29%)</title><rect x="739.9" y="421" width="3.5" height="15.0" fill="rgb(235,74,24)" rx="2" ry="2" />
<text  x="742.94" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="788.7" y="405" width="0.5" height="15.0" fill="rgb(247,187,14)" rx="2" ry="2" />
<text  x="791.73" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.0" y="309" width="0.2" height="15.0" fill="rgb(245,22,53)" rx="2" ry="2" />
<text  x="62.01" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1139.2" y="597" width="0.2" height="15.0" fill="rgb(219,147,20)" rx="2" ry="2" />
<text  x="1142.15" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="427.1" y="245" width="1.4" height="15.0" fill="rgb(220,57,39)" rx="2" ry="2" />
<text  x="430.08" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="255.8" y="133" width="0.2" height="15.0" fill="rgb(224,222,42)" rx="2" ry="2" />
<text  x="258.76" y="143.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="589.0" y="453" width="0.2" height="15.0" fill="rgb(233,171,19)" rx="2" ry="2" />
<text  x="592.01" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="1040.0" y="389" width="0.4" height="15.0" fill="rgb(240,141,3)" rx="2" ry="2" />
<text  x="1042.98" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (17 samples, 0.33%)</title><rect x="1063.8" y="421" width="3.9" height="15.0" fill="rgb(234,145,29)" rx="2" ry="2" />
<text  x="1066.80" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (2 samples, 0.04%)</title><rect x="537.9" y="357" width="0.5" height="15.0" fill="rgb(243,180,28)" rx="2" ry="2" />
<text  x="540.93" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (65 samples, 1.26%)</title><rect x="1019.1" y="357" width="14.9" height="15.0" fill="rgb(210,117,7)" rx="2" ry="2" />
<text  x="1022.14" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (2 samples, 0.04%)</title><rect x="704.4" y="565" width="0.5" height="15.0" fill="rgb(219,35,41)" rx="2" ry="2" />
<text  x="707.44" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (4 samples, 0.08%)</title><rect x="1150.6" y="517" width="0.9" height="15.0" fill="rgb(235,76,11)" rx="2" ry="2" />
<text  x="1153.61" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="41.8" y="373" width="0.3" height="15.0" fill="rgb(240,121,28)" rx="2" ry="2" />
<text  x="44.84" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (3 samples, 0.06%)</title><rect x="1138.0" y="421" width="0.7" height="15.0" fill="rgb(254,38,6)" rx="2" ry="2" />
<text  x="1141.01" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (14 samples, 0.27%)</title><rect x="858.6" y="485" width="3.2" height="15.0" fill="rgb(221,229,13)" rx="2" ry="2" />
<text  x="861.58" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="807.0" y="245" width="0.3" height="15.0" fill="rgb(225,53,12)" rx="2" ry="2" />
<text  x="810.05" y="255.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="709.9" y="581" width="0.3" height="15.0" fill="rgb(253,8,52)" rx="2" ry="2" />
<text  x="712.94" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (2 samples, 0.04%)</title><rect x="760.3" y="469" width="0.5" height="15.0" fill="rgb(254,39,54)" rx="2" ry="2" />
<text  x="763.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%)</title><rect x="693.9" y="581" width="0.7" height="15.0" fill="rgb(247,186,39)" rx="2" ry="2" />
<text  x="696.91" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="557.6" y="357" width="0.5" height="15.0" fill="rgb(212,11,48)" rx="2" ry="2" />
<text  x="560.63" y="367.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="114.2" y="597" width="0.2" height="15.0" fill="rgb(230,184,18)" rx="2" ry="2" />
<text  x="117.21" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (3 samples, 0.06%)</title><rect x="786.2" y="469" width="0.7" height="15.0" fill="rgb(230,153,50)" rx="2" ry="2" />
<text  x="789.21" y="479.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="1167.8" y="245" width="0.2" height="15.0" fill="rgb(242,166,48)" rx="2" ry="2" />
<text  x="1170.78" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (25 samples, 0.49%)</title><rect x="754.6" y="469" width="5.7" height="15.0" fill="rgb(243,140,52)" rx="2" ry="2" />
<text  x="757.60" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="130.2" y="533" width="0.3" height="15.0" fill="rgb(205,127,15)" rx="2" ry="2" />
<text  x="133.24" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1040.4" y="389" width="0.3" height="15.0" fill="rgb(209,150,47)" rx="2" ry="2" />
<text  x="1043.44" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.1" y="373" width="0.4" height="15.0" fill="rgb(207,100,17)" rx="2" ry="2" />
<text  x="42.09" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="832.7" y="421" width="0.2" height="15.0" fill="rgb(209,58,46)" rx="2" ry="2" />
<text  x="835.70" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="796.1" y="405" width="0.2" height="15.0" fill="rgb(215,73,7)" rx="2" ry="2" />
<text  x="799.06" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (9 samples, 0.17%)</title><rect x="216.8" y="325" width="2.1" height="15.0" fill="rgb(217,69,45)" rx="2" ry="2" />
<text  x="219.82" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (5 samples, 0.10%)</title><rect x="167.6" y="517" width="1.1" height="15.0" fill="rgb(220,187,7)" rx="2" ry="2" />
<text  x="170.58" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="1145.1" y="581" width="0.7" height="15.0" fill="rgb(243,125,12)" rx="2" ry="2" />
<text  x="1148.11" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,046 samples, 20.30%)</title><rect x="880.6" y="581" width="239.5" height="15.0" fill="rgb(230,63,9)" rx="2" ry="2" />
<text  x="883.57" y="591.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (355 samples, 6.89%)</title><rect x="354.9" y="357" width="81.3" height="15.0" fill="rgb(240,228,28)" rx="2" ry="2" />
<text  x="357.93" y="367.5" >flat_muta..</text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="81.7" y="533" width="0.2" height="15.0" fill="rgb(243,19,16)" rx="2" ry="2" />
<text  x="84.69" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="411.7" y="309" width="0.3" height="15.0" fill="rgb(232,108,33)" rx="2" ry="2" />
<text  x="414.73" y="319.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5 samples, 0.10%)</title><rect x="163.7" y="549" width="1.1" height="15.0" fill="rgb(222,99,0)" rx="2" ry="2" />
<text  x="166.68" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (2 samples, 0.04%)</title><rect x="83.8" y="533" width="0.4" height="15.0" fill="rgb(231,188,54)" rx="2" ry="2" />
<text  x="86.75" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="788.7" y="421" width="0.5" height="15.0" fill="rgb(231,167,47)" rx="2" ry="2" />
<text  x="791.73" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (1 samples, 0.02%)</title><rect x="447.2" y="325" width="0.3" height="15.0" fill="rgb(250,103,46)" rx="2" ry="2" />
<text  x="450.23" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (4 samples, 0.08%)</title><rect x="130.7" y="549" width="0.9" height="15.0" fill="rgb(233,3,2)" rx="2" ry="2" />
<text  x="133.70" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="880.3" y="581" width="0.3" height="15.0" fill="rgb(208,105,14)" rx="2" ry="2" />
<text  x="883.34" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="76.9" y="501" width="0.2" height="15.0" fill="rgb(254,133,36)" rx="2" ry="2" />
<text  x="79.88" y="511.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="113.1" y="437" width="0.2" height="15.0" fill="rgb(253,35,35)" rx="2" ry="2" />
<text  x="116.07" y="447.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="365.7" y="277" width="0.2" height="15.0" fill="rgb(225,48,35)" rx="2" ry="2" />
<text  x="368.69" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (2 samples, 0.04%)</title><rect x="871.2" y="613" width="0.4" height="15.0" fill="rgb(225,46,27)" rx="2" ry="2" />
<text  x="874.18" y="623.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (15 samples, 0.29%)</title><rect x="1175.6" y="725" width="3.4" height="15.0" fill="rgb(210,70,17)" rx="2" ry="2" />
<text  x="1178.57" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (17 samples, 0.33%)</title><rect x="264.0" y="245" width="3.9" height="15.0" fill="rgb(244,126,6)" rx="2" ry="2" />
<text  x="267.00" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="299.0" y="341" width="0.3" height="15.0" fill="rgb(210,83,45)" rx="2" ry="2" />
<text  x="302.05" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.2" y="357" width="0.3" height="15.0" fill="rgb(241,226,1)" rx="2" ry="2" />
<text  x="62.24" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="991.0" y="389" width="0.2" height="15.0" fill="rgb(223,38,23)" rx="2" ry="2" />
<text  x="993.97" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="627.9" y="501" width="0.3" height="15.0" fill="rgb(221,227,50)" rx="2" ry="2" />
<text  x="630.94" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="719.8" y="597" width="0.4" height="15.0" fill="rgb(234,117,17)" rx="2" ry="2" />
<text  x="722.79" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="822.9" y="421" width="0.9" height="15.0" fill="rgb(209,119,37)" rx="2" ry="2" />
<text  x="825.85" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="56.3" y="373" width="0.2" height="15.0" fill="rgb(243,69,24)" rx="2" ry="2" />
<text  x="59.27" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="263.3" y="261" width="0.5" height="15.0" fill="rgb(237,132,49)" rx="2" ry="2" />
<text  x="266.32" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (2 samples, 0.04%)</title><rect x="60.8" y="405" width="0.5" height="15.0" fill="rgb(249,175,1)" rx="2" ry="2" />
<text  x="63.85" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="45.3" y="389" width="0.9" height="15.0" fill="rgb(250,53,30)" rx="2" ry="2" />
<text  x="48.27" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.7" y="245" width="0.3" height="15.0" fill="rgb(226,217,2)" rx="2" ry="2" />
<text  x="48.73" y="255.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%)</title><rect x="361.1" y="309" width="0.2" height="15.0" fill="rgb(240,68,17)" rx="2" ry="2" />
<text  x="364.11" y="319.5" ></text>
</g>
<g >
<title>table::set_hit_rate (1 samples, 0.02%)</title><rect x="719.6" y="581" width="0.2" height="15.0" fill="rgb(245,195,45)" rx="2" ry="2" />
<text  x="722.56" y="591.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="11.1" y="709" width="0.3" height="15.0" fill="rgb(236,201,25)" rx="2" ry="2" />
<text  x="14.15" y="719.5" ></text>
</g>
<g >
<title>make_combined_reader (81 samples, 1.57%)</title><rect x="472.2" y="453" width="18.5" height="15.0" fill="rgb(239,83,48)" rx="2" ry="2" />
<text  x="475.20" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="26.3" y="293" width="0.2" height="15.0" fill="rgb(240,83,40)" rx="2" ry="2" />
<text  x="29.26" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="540.9" y="405" width="0.2" height="15.0" fill="rgb(240,144,31)" rx="2" ry="2" />
<text  x="543.91" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (1 samples, 0.02%)</title><rect x="512.7" y="325" width="0.3" height="15.0" fill="rgb(221,117,8)" rx="2" ry="2" />
<text  x="515.74" y="335.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="647.9" y="581" width="0.7" height="15.0" fill="rgb(237,66,5)" rx="2" ry="2" />
<text  x="650.87" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="702.4" y="549" width="0.2" height="15.0" fill="rgb(224,170,17)" rx="2" ry="2" />
<text  x="705.38" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="43.9" y="309" width="0.2" height="15.0" fill="rgb(207,146,10)" rx="2" ry="2" />
<text  x="46.90" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="59.5" y="341" width="0.2" height="15.0" fill="rgb(222,77,11)" rx="2" ry="2" />
<text  x="62.47" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="57.2" y="325" width="0.2" height="15.0" fill="rgb(218,92,41)" rx="2" ry="2" />
<text  x="60.18" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.7" y="309" width="0.2" height="15.0" fill="rgb(253,188,44)" rx="2" ry="2" />
<text  x="62.70" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (7 samples, 0.14%)</title><rect x="538.4" y="389" width="1.6" height="15.0" fill="rgb(250,225,51)" rx="2" ry="2" />
<text  x="541.39" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%)</title><rect x="1166.9" y="597" width="0.2" height="15.0" fill="rgb(250,103,16)" rx="2" ry="2" />
<text  x="1169.87" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="563.4" y="517" width="0.2" height="15.0" fill="rgb(228,4,13)" rx="2" ry="2" />
<text  x="566.35" y="527.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,062 samples, 20.61%)</title><rect x="877.4" y="597" width="243.2" height="15.0" fill="rgb(230,76,35)" rx="2" ry="2" />
<text  x="880.36" y="607.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (71 samples, 1.38%)</title><rect x="746.1" y="533" width="16.3" height="15.0" fill="rgb(213,205,27)" rx="2" ry="2" />
<text  x="749.13" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1166.4" y="533" width="0.2" height="15.0" fill="rgb(252,197,7)" rx="2" ry="2" />
<text  x="1169.41" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="38.2" y="453" width="0.2" height="15.0" fill="rgb(225,206,34)" rx="2" ry="2" />
<text  x="41.17" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%)</title><rect x="857.9" y="485" width="0.2" height="15.0" fill="rgb(217,124,8)" rx="2" ry="2" />
<text  x="860.90" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="876.9" y="437" width="0.2" height="15.0" fill="rgb(244,166,9)" rx="2" ry="2" />
<text  x="879.91" y="447.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result&lt;int&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(209,31,40)" rx="2" ry="2" />
<text  x="1192.77" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="81.2" y="549" width="0.3" height="15.0" fill="rgb(219,228,42)" rx="2" ry="2" />
<text  x="84.23" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="59.5" y="309" width="0.2" height="15.0" fill="rgb(216,67,4)" rx="2" ry="2" />
<text  x="62.47" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1050.3" y="421" width="1.1" height="15.0" fill="rgb(225,122,29)" rx="2" ry="2" />
<text  x="1053.29" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (6 samples, 0.12%)</title><rect x="615.3" y="501" width="1.4" height="15.0" fill="rgb(217,92,43)" rx="2" ry="2" />
<text  x="618.35" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (4 samples, 0.08%)</title><rect x="106.7" y="581" width="0.9" height="15.0" fill="rgb(206,212,3)" rx="2" ry="2" />
<text  x="109.65" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="45.7" y="261" width="0.3" height="15.0" fill="rgb(206,152,10)" rx="2" ry="2" />
<text  x="48.73" y="271.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::cells (1 samples, 0.02%)</title><rect x="1127.7" y="357" width="0.2" height="15.0" fill="rgb(250,27,31)" rx="2" ry="2" />
<text  x="1130.70" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="447.5" y="325" width="0.2" height="15.0" fill="rgb(227,192,27)" rx="2" ry="2" />
<text  x="450.46" y="335.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::seek (1 samples, 0.02%)</title><rect x="35.4" y="341" width="0.3" height="15.0" fill="rgb(219,201,40)" rx="2" ry="2" />
<text  x="38.42" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="871.4" y="581" width="0.2" height="15.0" fill="rgb(235,47,5)" rx="2" ry="2" />
<text  x="874.41" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (3 samples, 0.06%)</title><rect x="73.9" y="453" width="0.7" height="15.0" fill="rgb(243,136,52)" rx="2" ry="2" />
<text  x="76.90" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1106.4" y="437" width="0.2" height="15.0" fill="rgb(224,5,31)" rx="2" ry="2" />
<text  x="1109.40" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="484.8" y="405" width="0.5" height="15.0" fill="rgb(233,208,25)" rx="2" ry="2" />
<text  x="487.79" y="415.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (3 samples, 0.06%)</title><rect x="1079.4" y="373" width="0.7" height="15.0" fill="rgb(209,116,38)" rx="2" ry="2" />
<text  x="1082.38" y="383.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (7 samples, 0.14%)</title><rect x="79.6" y="517" width="1.6" height="15.0" fill="rgb(214,151,19)" rx="2" ry="2" />
<text  x="82.63" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (2 samples, 0.04%)</title><rect x="19.2" y="677" width="0.4" height="15.0" fill="rgb(226,220,5)" rx="2" ry="2" />
<text  x="22.16" y="687.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="1127.5" y="357" width="0.2" height="15.0" fill="rgb(216,28,14)" rx="2" ry="2" />
<text  x="1130.47" y="367.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (426 samples, 8.27%)</title><rect x="464.2" y="517" width="97.6" height="15.0" fill="rgb(218,147,25)" rx="2" ry="2" />
<text  x="467.18" y="527.5" >mutation_so..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="876.4" y="357" width="0.3" height="15.0" fill="rgb(223,200,5)" rx="2" ry="2" />
<text  x="879.45" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="632.5" y="485" width="0.3" height="15.0" fill="rgb(248,127,11)" rx="2" ry="2" />
<text  x="635.52" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.80%)</title><rect x="1129.3" y="565" width="9.4" height="15.0" fill="rgb(249,177,6)" rx="2" ry="2" />
<text  x="1132.31" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (1 samples, 0.02%)</title><rect x="75.5" y="469" width="0.2" height="15.0" fill="rgb(231,26,51)" rx="2" ry="2" />
<text  x="78.50" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (6 samples, 0.12%)</title><rect x="792.8" y="405" width="1.4" height="15.0" fill="rgb(212,8,45)" rx="2" ry="2" />
<text  x="795.85" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%)</title><rect x="18.5" y="661" width="0.4" height="15.0" fill="rgb(233,206,36)" rx="2" ry="2" />
<text  x="21.47" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="113.8" y="581" width="0.2" height="15.0" fill="rgb(205,171,29)" rx="2" ry="2" />
<text  x="116.75" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="19.4" y="485" width="0.2" height="15.0" fill="rgb(222,129,45)" rx="2" ry="2" />
<text  x="22.39" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="696.0" y="565" width="0.2" height="15.0" fill="rgb(210,129,37)" rx="2" ry="2" />
<text  x="698.97" y="575.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="938.7" y="485" width="1.0" height="15.0" fill="rgb(245,216,52)" rx="2" ry="2" />
<text  x="941.75" y="495.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="19.4" y="501" width="0.2" height="15.0" fill="rgb(246,172,12)" rx="2" ry="2" />
<text  x="22.39" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="1110.3" y="533" width="0.5" height="15.0" fill="rgb(214,212,2)" rx="2" ry="2" />
<text  x="1113.30" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="696.9" y="421" width="0.2" height="15.0" fill="rgb(243,62,25)" rx="2" ry="2" />
<text  x="699.88" y="431.5" ></text>
</g>
<g >
<title>[[vdso]] (19 samples, 0.37%)</title><rect x="1171.2" y="725" width="4.4" height="15.0" fill="rgb(245,185,5)" rx="2" ry="2" />
<text  x="1174.22" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="325.2" y="405" width="0.4" height="15.0" fill="rgb(231,41,10)" rx="2" ry="2" />
<text  x="328.16" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.6" y="357" width="0.2" height="15.0" fill="rgb(249,153,19)" rx="2" ry="2" />
<text  x="44.61" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="34.5" y="373" width="0.2" height="15.0" fill="rgb(210,120,24)" rx="2" ry="2" />
<text  x="37.51" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="818.0" y="325" width="0.3" height="15.0" fill="rgb(237,166,9)" rx="2" ry="2" />
<text  x="821.04" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="83.5" y="661" width="0.3" height="15.0" fill="rgb(221,62,42)" rx="2" ry="2" />
<text  x="86.52" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%)</title><rect x="515.7" y="309" width="2.5" height="15.0" fill="rgb(216,105,42)" rx="2" ry="2" />
<text  x="518.71" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="19.2" y="597" width="0.2" height="15.0" fill="rgb(232,133,7)" rx="2" ry="2" />
<text  x="22.16" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="19.2" y="549" width="0.2" height="15.0" fill="rgb(210,184,34)" rx="2" ry="2" />
<text  x="22.16" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="61.1" y="245" width="0.2" height="15.0" fill="rgb(250,120,51)" rx="2" ry="2" />
<text  x="64.08" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (45 samples, 0.87%)</title><rect x="496.5" y="421" width="10.3" height="15.0" fill="rgb(214,39,2)" rx="2" ry="2" />
<text  x="499.48" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%)</title><rect x="841.2" y="517" width="1.4" height="15.0" fill="rgb(221,223,38)" rx="2" ry="2" />
<text  x="844.18" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="43.7" y="373" width="0.4" height="15.0" fill="rgb(228,51,23)" rx="2" ry="2" />
<text  x="46.67" y="383.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="644.7" y="549" width="0.2" height="15.0" fill="rgb(244,71,43)" rx="2" ry="2" />
<text  x="647.66" y="559.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="1136.9" y="309" width="0.2" height="15.0" fill="rgb(254,105,8)" rx="2" ry="2" />
<text  x="1139.86" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.39%)</title><rect x="1133.4" y="405" width="4.6" height="15.0" fill="rgb(216,223,37)" rx="2" ry="2" />
<text  x="1136.43" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="106.9" y="565" width="0.2" height="15.0" fill="rgb(214,88,32)" rx="2" ry="2" />
<text  x="109.88" y="575.5" ></text>
</g>
<g >
<title>query::digester::digester (4 samples, 0.08%)</title><rect x="614.2" y="517" width="0.9" height="15.0" fill="rgb(227,124,28)" rx="2" ry="2" />
<text  x="617.20" y="527.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="83.5" y="597" width="0.3" height="15.0" fill="rgb(249,143,12)" rx="2" ry="2" />
<text  x="86.52" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (1 samples, 0.02%)</title><rect x="57.6" y="453" width="0.3" height="15.0" fill="rgb(235,31,20)" rx="2" ry="2" />
<text  x="60.64" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="523.7" y="389" width="0.5" height="15.0" fill="rgb(219,53,2)" rx="2" ry="2" />
<text  x="526.73" y="399.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="607.8" y="501" width="1.6" height="15.0" fill="rgb(211,61,41)" rx="2" ry="2" />
<text  x="610.79" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="296.3" y="309" width="0.5" height="15.0" fill="rgb(252,102,17)" rx="2" ry="2" />
<text  x="299.30" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%)</title><rect x="115.4" y="437" width="0.2" height="15.0" fill="rgb(217,203,25)" rx="2" ry="2" />
<text  x="118.36" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="56.0" y="197" width="0.3" height="15.0" fill="rgb(237,203,34)" rx="2" ry="2" />
<text  x="59.04" y="207.5" ></text>
</g>
<g >
<title>database::has_keyspace (15 samples, 0.29%)</title><rect x="844.4" y="533" width="3.4" height="15.0" fill="rgb(210,79,26)" rx="2" ry="2" />
<text  x="847.38" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1132.3" y="325" width="0.4" height="15.0" fill="rgb(216,192,23)" rx="2" ry="2" />
<text  x="1135.28" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="989.4" y="437" width="3.9" height="15.0" fill="rgb(244,189,32)" rx="2" ry="2" />
<text  x="992.36" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="453.6" y="389" width="2.1" height="15.0" fill="rgb(206,163,53)" rx="2" ry="2" />
<text  x="456.65" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.10%)</title><rect x="954.1" y="501" width="1.1" height="15.0" fill="rgb(211,190,14)" rx="2" ry="2" />
<text  x="957.09" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="146.5" y="517" width="0.2" height="15.0" fill="rgb(218,140,31)" rx="2" ry="2" />
<text  x="149.51" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%)</title><rect x="1103.2" y="501" width="0.2" height="15.0" fill="rgb(213,121,31)" rx="2" ry="2" />
<text  x="1106.19" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="601.1" y="501" width="0.3" height="15.0" fill="rgb(207,166,51)" rx="2" ry="2" />
<text  x="604.15" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="723.9" y="613" width="0.5" height="15.0" fill="rgb(215,34,38)" rx="2" ry="2" />
<text  x="726.91" y="623.5" ></text>
</g>
<g >
<title>auth::get_permissions (115 samples, 2.23%)</title><rect x="795.1" y="421" width="26.4" height="15.0" fill="rgb(237,56,24)" rx="2" ry="2" />
<text  x="798.14" y="431.5" >a..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="721.8" y="405" width="0.3" height="15.0" fill="rgb(216,64,1)" rx="2" ry="2" />
<text  x="724.85" y="415.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (4 samples, 0.08%)</title><rect x="808.9" y="229" width="0.9" height="15.0" fill="rgb(242,194,13)" rx="2" ry="2" />
<text  x="811.88" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%)</title><rect x="664.4" y="517" width="0.2" height="15.0" fill="rgb(213,63,34)" rx="2" ry="2" />
<text  x="667.36" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,695 samples, 91.13%)</title><rect x="91.8" y="629" width="1075.3" height="15.0" fill="rgb(250,160,7)" rx="2" ry="2" />
<text  x="94.77" y="639.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%)</title><rect x="115.6" y="389" width="0.2" height="15.0" fill="rgb(241,218,29)" rx="2" ry="2" />
<text  x="118.59" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="27.2" y="405" width="0.2" height="15.0" fill="rgb(251,32,43)" rx="2" ry="2" />
<text  x="30.18" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="80.8" y="501" width="0.4" height="15.0" fill="rgb(225,94,51)" rx="2" ry="2" />
<text  x="83.77" y="511.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (2 samples, 0.04%)</title><rect x="29.9" y="373" width="0.5" height="15.0" fill="rgb(223,172,8)" rx="2" ry="2" />
<text  x="32.93" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1030.6" y="325" width="0.4" height="15.0" fill="rgb(220,28,48)" rx="2" ry="2" />
<text  x="1033.59" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (6 samples, 0.12%)</title><rect x="942.6" y="485" width="1.4" height="15.0" fill="rgb(223,97,45)" rx="2" ry="2" />
<text  x="945.64" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="448.1" y="357" width="0.3" height="15.0" fill="rgb(206,145,33)" rx="2" ry="2" />
<text  x="451.15" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (1 samples, 0.02%)</title><rect x="630.9" y="517" width="0.2" height="15.0" fill="rgb(234,107,26)" rx="2" ry="2" />
<text  x="633.92" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="282.6" y="245" width="0.2" height="15.0" fill="rgb(254,19,53)" rx="2" ry="2" />
<text  x="285.55" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (644 samples, 12.50%)</title><rect x="950.0" y="533" width="147.5" height="15.0" fill="rgb(247,98,47)" rx="2" ry="2" />
<text  x="952.97" y="543.5" >cql3::statements::..</text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.3" y="421" width="0.2" height="15.0" fill="rgb(242,153,1)" rx="2" ry="2" />
<text  x="70.26" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="665.0" y="581" width="0.3" height="15.0" fill="rgb(229,129,26)" rx="2" ry="2" />
<text  x="668.05" y="591.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="115.6" y="469" width="0.2" height="15.0" fill="rgb(223,152,26)" rx="2" ry="2" />
<text  x="118.59" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (3 samples, 0.06%)</title><rect x="850.1" y="533" width="0.7" height="15.0" fill="rgb(215,166,36)" rx="2" ry="2" />
<text  x="853.11" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="23.7" y="405" width="0.3" height="15.0" fill="rgb(233,128,18)" rx="2" ry="2" />
<text  x="26.74" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (2 samples, 0.04%)</title><rect x="471.5" y="453" width="0.5" height="15.0" fill="rgb(224,97,11)" rx="2" ry="2" />
<text  x="474.51" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (3 samples, 0.06%)</title><rect x="52.1" y="373" width="0.7" height="15.0" fill="rgb(241,55,39)" rx="2" ry="2" />
<text  x="55.14" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="610.3" y="501" width="0.2" height="15.0" fill="rgb(239,115,52)" rx="2" ry="2" />
<text  x="613.31" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="143.5" y="565" width="0.5" height="15.0" fill="rgb(223,168,45)" rx="2" ry="2" />
<text  x="146.53" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="696.2" y="501" width="0.2" height="15.0" fill="rgb(237,75,39)" rx="2" ry="2" />
<text  x="699.20" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.1" y="453" width="0.2" height="15.0" fill="rgb(221,5,33)" rx="2" ry="2" />
<text  x="67.05" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="216.6" y="325" width="0.2" height="15.0" fill="rgb(232,147,38)" rx="2" ry="2" />
<text  x="219.59" y="335.5" ></text>
</g>
<g >
<title>compound_type&lt; (25 samples, 0.49%)</title><rect x="927.1" y="485" width="5.7" height="15.0" fill="rgb(247,7,52)" rx="2" ry="2" />
<text  x="930.07" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="40.7" y="277" width="0.4" height="15.0" fill="rgb(223,147,27)" rx="2" ry="2" />
<text  x="43.69" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="560.1" y="421" width="1.0" height="15.0" fill="rgb(215,198,44)" rx="2" ry="2" />
<text  x="563.15" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.10%)</title><rect x="1136.9" y="325" width="1.1" height="15.0" fill="rgb(244,151,49)" rx="2" ry="2" />
<text  x="1139.86" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%)</title><rect x="52.8" y="293" width="0.3" height="15.0" fill="rgb(231,58,23)" rx="2" ry="2" />
<text  x="55.83" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (1 samples, 0.02%)</title><rect x="911.9" y="485" width="0.3" height="15.0" fill="rgb(252,147,23)" rx="2" ry="2" />
<text  x="914.95" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="826.3" y="389" width="0.4" height="15.0" fill="rgb(222,18,40)" rx="2" ry="2" />
<text  x="829.29" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="23.7" y="469" width="0.3" height="15.0" fill="rgb(209,157,47)" rx="2" ry="2" />
<text  x="26.74" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (3 samples, 0.06%)</title><rect x="379.2" y="293" width="0.7" height="15.0" fill="rgb(238,13,45)" rx="2" ry="2" />
<text  x="382.21" y="303.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="210.6" y="357" width="0.5" height="15.0" fill="rgb(251,148,4)" rx="2" ry="2" />
<text  x="213.64" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="1092.2" y="485" width="0.9" height="15.0" fill="rgb(219,82,48)" rx="2" ry="2" />
<text  x="1095.20" y="495.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%)</title><rect x="640.1" y="549" width="0.2" height="15.0" fill="rgb(208,170,42)" rx="2" ry="2" />
<text  x="643.08" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (35 samples, 0.68%)</title><rect x="475.2" y="421" width="8.0" height="15.0" fill="rgb(217,127,13)" rx="2" ry="2" />
<text  x="478.17" y="431.5" ></text>
</g>
<g >
<title>auth::find_record (1 samples, 0.02%)</title><rect x="1167.8" y="357" width="0.2" height="15.0" fill="rgb(238,213,34)" rx="2" ry="2" />
<text  x="1170.78" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1124.0" y="293" width="0.3" height="15.0" fill="rgb(242,70,51)" rx="2" ry="2" />
<text  x="1127.04" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="518.2" y="293" width="0.5" height="15.0" fill="rgb(247,114,51)" rx="2" ry="2" />
<text  x="521.23" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (49 samples, 0.95%)</title><rect x="1097.5" y="533" width="11.2" height="15.0" fill="rgb(225,17,27)" rx="2" ry="2" />
<text  x="1100.47" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="649.2" y="565" width="0.3" height="15.0" fill="rgb(252,170,3)" rx="2" ry="2" />
<text  x="652.24" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (3 samples, 0.06%)</title><rect x="22.6" y="517" width="0.7" height="15.0" fill="rgb(231,30,7)" rx="2" ry="2" />
<text  x="25.60" y="527.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="290.8" y="325" width="0.7" height="15.0" fill="rgb(239,185,1)" rx="2" ry="2" />
<text  x="293.80" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.10%)</title><rect x="213.2" y="357" width="1.1" height="15.0" fill="rgb(207,87,43)" rx="2" ry="2" />
<text  x="216.16" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="1055.8" y="437" width="0.9" height="15.0" fill="rgb(241,151,0)" rx="2" ry="2" />
<text  x="1058.78" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="800.2" y="341" width="0.2" height="15.0" fill="rgb(242,11,6)" rx="2" ry="2" />
<text  x="803.18" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (2 samples, 0.04%)</title><rect x="73.9" y="437" width="0.5" height="15.0" fill="rgb(232,89,41)" rx="2" ry="2" />
<text  x="76.90" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="107.1" y="565" width="0.2" height="15.0" fill="rgb(206,93,33)" rx="2" ry="2" />
<text  x="110.11" y="575.5" ></text>
</g>
<g >
<title>schema::get_column_definition (3 samples, 0.06%)</title><rect x="72.8" y="453" width="0.6" height="15.0" fill="rgb(237,128,29)" rx="2" ry="2" />
<text  x="75.76" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="871.0" y="421" width="0.2" height="15.0" fill="rgb(225,6,11)" rx="2" ry="2" />
<text  x="873.95" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="309" width="0.5" height="15.0" fill="rgb(208,66,12)" rx="2" ry="2" />
<text  x="56.75" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="723.7" y="613" width="0.2" height="15.0" fill="rgb(224,117,32)" rx="2" ry="2" />
<text  x="726.68" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="23.7" y="373" width="0.3" height="15.0" fill="rgb(216,3,33)" rx="2" ry="2" />
<text  x="26.74" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="609.8" y="485" width="0.3" height="15.0" fill="rgb(227,182,17)" rx="2" ry="2" />
<text  x="612.85" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.16%)</title><rect x="800.9" y="341" width="13.7" height="15.0" fill="rgb(241,221,12)" rx="2" ry="2" />
<text  x="803.87" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%)</title><rect x="1130.0" y="405" width="0.2" height="15.0" fill="rgb(252,224,43)" rx="2" ry="2" />
<text  x="1132.99" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (591 samples, 11.47%)</title><rect x="181.3" y="469" width="135.4" height="15.0" fill="rgb(230,10,54)" rx="2" ry="2" />
<text  x="184.32" y="479.5" >mutation_fragment..</text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="49.9" y="197" width="0.2" height="15.0" fill="rgb(222,84,36)" rx="2" ry="2" />
<text  x="52.85" y="207.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%)</title><rect x="19.4" y="661" width="0.2" height="15.0" fill="rgb(245,68,13)" rx="2" ry="2" />
<text  x="22.39" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="1132.1" y="293" width="0.2" height="15.0" fill="rgb(247,96,18)" rx="2" ry="2" />
<text  x="1135.05" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="997.8" y="373" width="0.3" height="15.0" fill="rgb(247,33,36)" rx="2" ry="2" />
<text  x="1000.84" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="55.3" y="213" width="0.3" height="15.0" fill="rgb(240,101,40)" rx="2" ry="2" />
<text  x="58.35" y="223.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="696.9" y="565" width="0.2" height="15.0" fill="rgb(249,83,5)" rx="2" ry="2" />
<text  x="699.88" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="871.0" y="597" width="0.2" height="15.0" fill="rgb(212,135,22)" rx="2" ry="2" />
<text  x="873.95" y="607.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="114.0" y="533" width="0.2" height="15.0" fill="rgb(227,185,35)" rx="2" ry="2" />
<text  x="116.98" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_keyspace_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.3" y="501" width="0.3" height="15.0" fill="rgb(235,2,30)" rx="2" ry="2" />
<text  x="69.34" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="325.6" y="405" width="0.2" height="15.0" fill="rgb(235,82,3)" rx="2" ry="2" />
<text  x="328.61" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (238 samples, 4.62%)</title><rect x="889.5" y="533" width="54.5" height="15.0" fill="rgb(233,194,27)" rx="2" ry="2" />
<text  x="892.50" y="543.5" >cql3:..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%)</title><rect x="923.9" y="501" width="0.6" height="15.0" fill="rgb(218,157,48)" rx="2" ry="2" />
<text  x="926.86" y="511.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4 samples, 0.08%)</title><rect x="634.1" y="517" width="0.9" height="15.0" fill="rgb(222,113,30)" rx="2" ry="2" />
<text  x="637.13" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="109.9" y="597" width="0.2" height="15.0" fill="rgb(206,39,34)" rx="2" ry="2" />
<text  x="112.86" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="46.6" y="261" width="0.3" height="15.0" fill="rgb(208,98,39)" rx="2" ry="2" />
<text  x="49.65" y="271.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="114.0" y="421" width="0.2" height="15.0" fill="rgb(222,82,22)" rx="2" ry="2" />
<text  x="116.98" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (9 samples, 0.17%)</title><rect x="727.6" y="549" width="2.0" height="15.0" fill="rgb(253,178,24)" rx="2" ry="2" />
<text  x="730.57" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="270.2" y="277" width="0.2" height="15.0" fill="rgb(251,227,24)" rx="2" ry="2" />
<text  x="273.19" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="760.1" y="437" width="0.2" height="15.0" fill="rgb(243,202,50)" rx="2" ry="2" />
<text  x="763.10" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="149" width="0.5" height="15.0" fill="rgb(205,63,42)" rx="2" ry="2" />
<text  x="56.75" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::reactor::open_directory (1 samples, 0.02%)</title><rect x="684.1" y="613" width="0.2" height="15.0" fill="rgb(212,102,27)" rx="2" ry="2" />
<text  x="687.06" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (6 samples, 0.12%)</title><rect x="39.8" y="437" width="1.3" height="15.0" fill="rgb(211,211,4)" rx="2" ry="2" />
<text  x="42.77" y="447.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (15 samples, 0.29%)</title><rect x="555.1" y="405" width="3.4" height="15.0" fill="rgb(229,215,3)" rx="2" ry="2" />
<text  x="558.11" y="415.5" ></text>
</g>
<g >
<title>auth::service::has_superuser (1 samples, 0.02%)</title><rect x="1167.8" y="437" width="0.2" height="15.0" fill="rgb(252,151,22)" rx="2" ry="2" />
<text  x="1170.78" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%)</title><rect x="79.2" y="533" width="0.2" height="15.0" fill="rgb(250,132,5)" rx="2" ry="2" />
<text  x="82.17" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="286.0" y="325" width="0.2" height="15.0" fill="rgb(213,29,42)" rx="2" ry="2" />
<text  x="288.99" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.6" y="229" width="0.3" height="15.0" fill="rgb(223,53,31)" rx="2" ry="2" />
<text  x="49.65" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="1055.6" y="421" width="0.2" height="15.0" fill="rgb(251,132,44)" rx="2" ry="2" />
<text  x="1058.56" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="57.4" y="421" width="0.2" height="15.0" fill="rgb(206,136,44)" rx="2" ry="2" />
<text  x="60.41" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="986.2" y="421" width="0.2" height="15.0" fill="rgb(236,83,41)" rx="2" ry="2" />
<text  x="989.16" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="283.9" y="325" width="0.3" height="15.0" fill="rgb(206,7,30)" rx="2" ry="2" />
<text  x="286.93" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.0" y="213" width="0.3" height="15.0" fill="rgb(209,31,16)" rx="2" ry="2" />
<text  x="48.04" y="223.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (119 samples, 2.31%)</title><rect x="794.7" y="437" width="27.2" height="15.0" fill="rgb(223,134,18)" rx="2" ry="2" />
<text  x="797.68" y="447.5" >s..</text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_M_head (1 samples, 0.02%)</title><rect x="51.5" y="293" width="0.2" height="15.0" fill="rgb(235,16,34)" rx="2" ry="2" />
<text  x="54.46" y="303.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.10%)</title><rect x="77.6" y="565" width="1.1" height="15.0" fill="rgb(217,119,10)" rx="2" ry="2" />
<text  x="80.57" y="575.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_receivers (1 samples, 0.02%)</title><rect x="73.7" y="469" width="0.2" height="15.0" fill="rgb(226,120,54)" rx="2" ry="2" />
<text  x="76.67" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%)</title><rect x="752.8" y="437" width="0.2" height="15.0" fill="rgb(250,155,36)" rx="2" ry="2" />
<text  x="755.77" y="447.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="696.9" y="533" width="0.2" height="15.0" fill="rgb(216,115,49)" rx="2" ry="2" />
<text  x="699.88" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="610.5" y="501" width="0.3" height="15.0" fill="rgb(222,109,17)" rx="2" ry="2" />
<text  x="613.54" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="81.7" y="501" width="0.2" height="15.0" fill="rgb(241,107,15)" rx="2" ry="2" />
<text  x="84.69" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (7 samples, 0.14%)</title><rect x="778.0" y="469" width="1.6" height="15.0" fill="rgb(214,169,7)" rx="2" ry="2" />
<text  x="780.96" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.8" y="309" width="0.5" height="15.0" fill="rgb(220,199,26)" rx="2" ry="2" />
<text  x="58.81" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="72.8" y="389" width="0.2" height="15.0" fill="rgb(245,4,54)" rx="2" ry="2" />
<text  x="75.76" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="113.1" y="613" width="0.7" height="15.0" fill="rgb(226,135,45)" rx="2" ry="2" />
<text  x="116.07" y="623.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="872.6" y="437" width="0.2" height="15.0" fill="rgb(253,155,13)" rx="2" ry="2" />
<text  x="875.55" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1028.5" y="245" width="0.3" height="15.0" fill="rgb(246,218,49)" rx="2" ry="2" />
<text  x="1031.53" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1033.8" y="309" width="0.2" height="15.0" fill="rgb(254,142,40)" rx="2" ry="2" />
<text  x="1036.80" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%)</title><rect x="705.6" y="581" width="0.2" height="15.0" fill="rgb(243,82,11)" rx="2" ry="2" />
<text  x="708.59" y="591.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (4 samples, 0.08%)</title><rect x="874.6" y="405" width="0.9" height="15.0" fill="rgb(225,160,46)" rx="2" ry="2" />
<text  x="877.62" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (6 samples, 0.12%)</title><rect x="24.7" y="325" width="1.3" height="15.0" fill="rgb(244,117,5)" rx="2" ry="2" />
<text  x="27.66" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (549 samples, 10.66%)</title><rect x="334.5" y="517" width="125.8" height="15.0" fill="rgb(242,171,48)" rx="2" ry="2" />
<text  x="337.55" y="527.5" >seastar::future..</text>
</g>
<g >
<title>db::system_keyspace::query_mutations (2 samples, 0.04%)</title><rect x="113.1" y="581" width="0.4" height="15.0" fill="rgb(226,23,9)" rx="2" ry="2" />
<text  x="116.07" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (2 samples, 0.04%)</title><rect x="99.3" y="581" width="0.5" height="15.0" fill="rgb(254,79,5)" rx="2" ry="2" />
<text  x="102.32" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="72.5" y="453" width="0.3" height="15.0" fill="rgb(205,215,37)" rx="2" ry="2" />
<text  x="75.53" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="997.2" y="341" width="0.6" height="15.0" fill="rgb(220,200,27)" rx="2" ry="2" />
<text  x="1000.15" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="580.3" y="405" width="0.5" height="15.0" fill="rgb(208,195,32)" rx="2" ry="2" />
<text  x="583.30" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="938.7" y="469" width="1.0" height="15.0" fill="rgb(205,81,25)" rx="2" ry="2" />
<text  x="941.75" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1166.9" y="565" width="0.2" height="15.0" fill="rgb(212,57,9)" rx="2" ry="2" />
<text  x="1169.87" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (3 samples, 0.06%)</title><rect x="867.3" y="597" width="0.7" height="15.0" fill="rgb(251,222,34)" rx="2" ry="2" />
<text  x="870.29" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%)</title><rect x="953.6" y="517" width="0.3" height="15.0" fill="rgb(206,3,19)" rx="2" ry="2" />
<text  x="956.63" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (3 samples, 0.06%)</title><rect x="88.3" y="629" width="0.7" height="15.0" fill="rgb(240,150,54)" rx="2" ry="2" />
<text  x="91.33" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="59.5" y="405" width="0.2" height="15.0" fill="rgb(245,109,43)" rx="2" ry="2" />
<text  x="62.47" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="820.1" y="405" width="1.4" height="15.0" fill="rgb(236,46,31)" rx="2" ry="2" />
<text  x="823.10" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::operation::set_value&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="57.2" y="309" width="0.2" height="15.0" fill="rgb(252,178,54)" rx="2" ry="2" />
<text  x="60.18" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="1084.2" y="357" width="0.7" height="15.0" fill="rgb(252,158,4)" rx="2" ry="2" />
<text  x="1087.18" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (9 samples, 0.17%)</title><rect x="864.5" y="581" width="2.1" height="15.0" fill="rgb(219,79,42)" rx="2" ry="2" />
<text  x="867.54" y="591.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="727.8" y="533" width="1.6" height="15.0" fill="rgb(210,227,39)" rx="2" ry="2" />
<text  x="730.80" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="683.4" y="549" width="0.2" height="15.0" fill="rgb(240,219,15)" rx="2" ry="2" />
<text  x="686.37" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="678.8" y="565" width="0.7" height="15.0" fill="rgb(240,170,38)" rx="2" ry="2" />
<text  x="681.79" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%)</title><rect x="819.9" y="405" width="0.2" height="15.0" fill="rgb(242,135,36)" rx="2" ry="2" />
<text  x="822.88" y="415.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="667.8" y="597" width="0.5" height="15.0" fill="rgb(232,106,47)" rx="2" ry="2" />
<text  x="670.80" y="607.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%)</title><rect x="83.8" y="565" width="0.6" height="15.0" fill="rgb(212,117,18)" rx="2" ry="2" />
<text  x="86.75" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (57 samples, 1.11%)</title><rect x="419.5" y="293" width="13.1" height="15.0" fill="rgb(223,178,34)" rx="2" ry="2" />
<text  x="422.52" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="228.7" y="309" width="0.3" height="15.0" fill="rgb(250,72,36)" rx="2" ry="2" />
<text  x="231.73" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (6 samples, 0.12%)</title><rect x="991.2" y="389" width="1.4" height="15.0" fill="rgb(226,171,49)" rx="2" ry="2" />
<text  x="994.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="794.5" y="437" width="0.2" height="15.0" fill="rgb(249,197,19)" rx="2" ry="2" />
<text  x="797.45" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="1122.9" y="293" width="0.5" height="15.0" fill="rgb(210,89,34)" rx="2" ry="2" />
<text  x="1125.89" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (12 samples, 0.23%)</title><rect x="24.4" y="389" width="2.8" height="15.0" fill="rgb(251,110,42)" rx="2" ry="2" />
<text  x="27.43" y="399.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="876.4" y="405" width="0.3" height="15.0" fill="rgb(235,178,35)" rx="2" ry="2" />
<text  x="879.45" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (13 samples, 0.25%)</title><rect x="532.9" y="341" width="3.0" height="15.0" fill="rgb(207,115,33)" rx="2" ry="2" />
<text  x="535.89" y="351.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (14 samples, 0.27%)</title><rect x="14.4" y="693" width="3.2" height="15.0" fill="rgb(252,60,52)" rx="2" ry="2" />
<text  x="17.35" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="84.2" y="485" width="0.2" height="15.0" fill="rgb(224,104,14)" rx="2" ry="2" />
<text  x="87.21" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (25 samples, 0.49%)</title><rect x="164.8" y="549" width="5.8" height="15.0" fill="rgb(218,226,39)" rx="2" ry="2" />
<text  x="167.83" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="45.3" y="245" width="0.4" height="15.0" fill="rgb(209,54,25)" rx="2" ry="2" />
<text  x="48.27" y="255.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="83.5" y="565" width="0.3" height="15.0" fill="rgb(219,101,24)" rx="2" ry="2" />
<text  x="86.52" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (4 samples, 0.08%)</title><rect x="832.9" y="421" width="0.9" height="15.0" fill="rgb(242,115,19)" rx="2" ry="2" />
<text  x="835.93" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (2 samples, 0.04%)</title><rect x="86.0" y="565" width="0.5" height="15.0" fill="rgb(213,33,4)" rx="2" ry="2" />
<text  x="89.04" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%)</title><rect x="1096.3" y="501" width="0.9" height="15.0" fill="rgb(237,141,2)" rx="2" ry="2" />
<text  x="1099.32" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1166.9" y="485" width="0.2" height="15.0" fill="rgb(245,161,45)" rx="2" ry="2" />
<text  x="1169.87" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="659.5" y="501" width="0.3" height="15.0" fill="rgb(205,165,11)" rx="2" ry="2" />
<text  x="662.55" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (8 samples, 0.16%)</title><rect x="536.1" y="357" width="1.8" height="15.0" fill="rgb(219,184,47)" rx="2" ry="2" />
<text  x="539.10" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="996.0" y="389" width="0.5" height="15.0" fill="rgb(214,132,35)" rx="2" ry="2" />
<text  x="999.01" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="612.1" y="549" width="0.3" height="15.0" fill="rgb(249,216,7)" rx="2" ry="2" />
<text  x="615.14" y="559.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.47%)</title><rect x="12.1" y="709" width="5.5" height="15.0" fill="rgb(248,121,29)" rx="2" ry="2" />
<text  x="15.06" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="863.4" y="549" width="0.2" height="15.0" fill="rgb(213,63,46)" rx="2" ry="2" />
<text  x="866.39" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (35 samples, 0.68%)</title><rect x="530.4" y="373" width="8.0" height="15.0" fill="rgb(247,9,12)" rx="2" ry="2" />
<text  x="533.37" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (11 samples, 0.21%)</title><rect x="662.5" y="581" width="2.5" height="15.0" fill="rgb(254,121,8)" rx="2" ry="2" />
<text  x="665.53" y="591.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="679.9" y="581" width="0.7" height="15.0" fill="rgb(246,129,18)" rx="2" ry="2" />
<text  x="682.93" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="874.6" y="341" width="0.2" height="15.0" fill="rgb(210,39,0)" rx="2" ry="2" />
<text  x="877.62" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%)</title><rect x="907.6" y="469" width="0.2" height="15.0" fill="rgb(245,136,13)" rx="2" ry="2" />
<text  x="910.60" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1138.7" y="597" width="0.2" height="15.0" fill="rgb(212,0,20)" rx="2" ry="2" />
<text  x="1141.70" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::release (1 samples, 0.02%)</title><rect x="67.5" y="469" width="0.2" height="15.0" fill="rgb(246,216,41)" rx="2" ry="2" />
<text  x="70.49" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="49.9" y="149" width="0.2" height="15.0" fill="rgb(215,16,30)" rx="2" ry="2" />
<text  x="52.85" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.02%)</title><rect x="25.1" y="277" width="0.2" height="15.0" fill="rgb(205,22,32)" rx="2" ry="2" />
<text  x="28.12" y="287.5" ></text>
</g>
<g >
<title>abstract_type::to_string_impl (1 samples, 0.02%)</title><rect x="115.4" y="341" width="0.2" height="15.0" fill="rgb(253,79,33)" rx="2" ry="2" />
<text  x="118.36" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%)</title><rect x="619.9" y="533" width="0.3" height="15.0" fill="rgb(218,63,19)" rx="2" ry="2" />
<text  x="622.93" y="543.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%)</title><rect x="87.0" y="741" width="0.2" height="15.0" fill="rgb(249,83,54)" rx="2" ry="2" />
<text  x="89.96" y="751.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl_nrvo&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="644.0" y="597" width="0.2" height="15.0" fill="rgb(232,105,54)" rx="2" ry="2" />
<text  x="646.98" y="607.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1124.5" y="293" width="0.2" height="15.0" fill="rgb(228,214,31)" rx="2" ry="2" />
<text  x="1127.50" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="774.3" y="485" width="0.2" height="15.0" fill="rgb(248,208,12)" rx="2" ry="2" />
<text  x="777.30" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="673.8" y="597" width="0.2" height="15.0" fill="rgb(246,81,15)" rx="2" ry="2" />
<text  x="676.75" y="607.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%)</title><rect x="130.5" y="565" width="0.2" height="15.0" fill="rgb(249,58,21)" rx="2" ry="2" />
<text  x="133.47" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%)</title><rect x="1096.1" y="517" width="1.4" height="15.0" fill="rgb(222,193,9)" rx="2" ry="2" />
<text  x="1099.09" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.12%)</title><rect x="748.0" y="501" width="1.3" height="15.0" fill="rgb(213,139,19)" rx="2" ry="2" />
<text  x="750.96" y="511.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (677 samples, 13.14%)</title><rect x="178.1" y="485" width="155.1" height="15.0" fill="rgb(215,130,13)" rx="2" ry="2" />
<text  x="181.11" y="495.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="98.0" y="581" width="0.2" height="15.0" fill="rgb(217,140,7)" rx="2" ry="2" />
<text  x="100.95" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (8 samples, 0.16%)</title><rect x="69.1" y="501" width="1.8" height="15.0" fill="rgb(213,20,11)" rx="2" ry="2" />
<text  x="72.09" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="755.5" y="389" width="0.7" height="15.0" fill="rgb(208,214,14)" rx="2" ry="2" />
<text  x="758.52" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (50 samples, 0.97%)</title><rect x="1019.6" y="341" width="11.4" height="15.0" fill="rgb(215,105,7)" rx="2" ry="2" />
<text  x="1022.60" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="52.1" y="389" width="0.7" height="15.0" fill="rgb(246,100,14)" rx="2" ry="2" />
<text  x="55.14" y="399.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (35 samples, 0.68%)</title><rect x="511.8" y="341" width="8.0" height="15.0" fill="rgb(233,29,16)" rx="2" ry="2" />
<text  x="514.82" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (3 samples, 0.06%)</title><rect x="1025.3" y="261" width="0.7" height="15.0" fill="rgb(217,226,37)" rx="2" ry="2" />
<text  x="1028.32" y="271.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="450.2" y="341" width="0.2" height="15.0" fill="rgb(207,150,30)" rx="2" ry="2" />
<text  x="453.21" y="351.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (7 samples, 0.14%)</title><rect x="31.8" y="357" width="1.6" height="15.0" fill="rgb(224,87,40)" rx="2" ry="2" />
<text  x="34.76" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="47.8" y="277" width="0.4" height="15.0" fill="rgb(243,117,11)" rx="2" ry="2" />
<text  x="50.79" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="91.3" y="629" width="0.2" height="15.0" fill="rgb(232,175,13)" rx="2" ry="2" />
<text  x="94.31" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="76.9" y="485" width="0.2" height="15.0" fill="rgb(247,184,21)" rx="2" ry="2" />
<text  x="79.88" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (15 samples, 0.29%)</title><rect x="1103.7" y="485" width="3.4" height="15.0" fill="rgb(240,198,41)" rx="2" ry="2" />
<text  x="1106.65" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="78.7" y="533" width="0.2" height="15.0" fill="rgb(238,10,38)" rx="2" ry="2" />
<text  x="81.71" y="543.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="786.0" y="469" width="0.2" height="15.0" fill="rgb(239,175,20)" rx="2" ry="2" />
<text  x="788.98" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (4 samples, 0.08%)</title><rect x="60.4" y="421" width="0.9" height="15.0" fill="rgb(225,211,10)" rx="2" ry="2" />
<text  x="63.39" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="680.6" y="581" width="0.3" height="15.0" fill="rgb(221,64,26)" rx="2" ry="2" />
<text  x="683.62" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="84.4" y="533" width="0.3" height="15.0" fill="rgb(224,58,23)" rx="2" ry="2" />
<text  x="87.44" y="543.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="428.9" y="277" width="1.4" height="15.0" fill="rgb(220,176,42)" rx="2" ry="2" />
<text  x="431.91" y="287.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (4 samples, 0.08%)</title><rect x="1131.4" y="341" width="0.9" height="15.0" fill="rgb(225,218,28)" rx="2" ry="2" />
<text  x="1134.37" y="351.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (1 samples, 0.02%)</title><rect x="868.0" y="597" width="0.2" height="15.0" fill="rgb(225,143,16)" rx="2" ry="2" />
<text  x="870.97" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="1041.8" y="341" width="0.2" height="15.0" fill="rgb(213,112,47)" rx="2" ry="2" />
<text  x="1044.81" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="977.9" y="469" width="0.2" height="15.0" fill="rgb(250,218,27)" rx="2" ry="2" />
<text  x="980.91" y="479.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="56.3" y="341" width="0.2" height="15.0" fill="rgb(230,153,53)" rx="2" ry="2" />
<text  x="59.27" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="678.3" y="581" width="1.2" height="15.0" fill="rgb(214,156,30)" rx="2" ry="2" />
<text  x="681.33" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="47.8" y="309" width="0.4" height="15.0" fill="rgb(219,183,12)" rx="2" ry="2" />
<text  x="50.79" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="683.1" y="549" width="0.3" height="15.0" fill="rgb(245,160,33)" rx="2" ry="2" />
<text  x="686.14" y="559.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="1131.4" y="277" width="0.2" height="15.0" fill="rgb(250,186,11)" rx="2" ry="2" />
<text  x="1134.37" y="287.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="65.7" y="453" width="0.2" height="15.0" fill="rgb(243,104,36)" rx="2" ry="2" />
<text  x="68.66" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="729.2" y="501" width="0.2" height="15.0" fill="rgb(207,59,44)" rx="2" ry="2" />
<text  x="732.18" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.2" y="469" width="0.2" height="15.0" fill="rgb(244,167,3)" rx="2" ry="2" />
<text  x="22.16" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;mutation_fragment*&gt;, flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="334.1" y="469" width="0.2" height="15.0" fill="rgb(249,216,15)" rx="2" ry="2" />
<text  x="337.09" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="59.7" y="421" width="0.2" height="15.0" fill="rgb(240,77,14)" rx="2" ry="2" />
<text  x="62.70" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="797.0" y="357" width="0.9" height="15.0" fill="rgb(209,188,14)" rx="2" ry="2" />
<text  x="799.97" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.5" y="325" width="0.2" height="15.0" fill="rgb(238,110,42)" rx="2" ry="2" />
<text  x="62.47" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="546.4" y="421" width="0.2" height="15.0" fill="rgb(246,68,30)" rx="2" ry="2" />
<text  x="549.41" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="669.2" y="565" width="0.2" height="15.0" fill="rgb(249,111,50)" rx="2" ry="2" />
<text  x="672.17" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="831.1" y="453" width="0.2" height="15.0" fill="rgb(232,127,48)" rx="2" ry="2" />
<text  x="834.10" y="463.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (1 samples, 0.02%)</title><rect x="550.1" y="437" width="0.2" height="15.0" fill="rgb(243,218,27)" rx="2" ry="2" />
<text  x="553.07" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="1054.0" y="373" width="0.4" height="15.0" fill="rgb(209,221,3)" rx="2" ry="2" />
<text  x="1056.95" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (2 samples, 0.04%)</title><rect x="696.4" y="613" width="0.5" height="15.0" fill="rgb(233,75,17)" rx="2" ry="2" />
<text  x="699.42" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%)</title><rect x="554.4" y="405" width="0.7" height="15.0" fill="rgb(248,205,29)" rx="2" ry="2" />
<text  x="557.42" y="415.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%)</title><rect x="552.1" y="405" width="1.2" height="15.0" fill="rgb(224,12,39)" rx="2" ry="2" />
<text  x="555.13" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result_set&gt; &gt;, db::system_keyspace::query (1 samples, 0.02%)</title><rect x="644.7" y="613" width="0.2" height="15.0" fill="rgb(218,78,18)" rx="2" ry="2" />
<text  x="647.66" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="76.6" y="517" width="0.3" height="15.0" fill="rgb(216,25,52)" rx="2" ry="2" />
<text  x="79.65" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%)</title><rect x="716.8" y="565" width="0.5" height="15.0" fill="rgb(207,150,11)" rx="2" ry="2" />
<text  x="719.81" y="575.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (13 samples, 0.25%)</title><rect x="542.3" y="437" width="3.0" height="15.0" fill="rgb(245,9,2)" rx="2" ry="2" />
<text  x="545.28" y="447.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="982.7" y="405" width="3.0" height="15.0" fill="rgb(220,211,12)" rx="2" ry="2" />
<text  x="985.72" y="415.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.16%)</title><rect x="717.3" y="565" width="1.8" height="15.0" fill="rgb(210,195,1)" rx="2" ry="2" />
<text  x="720.27" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (54 samples, 1.05%)</title><rect x="655.4" y="597" width="12.4" height="15.0" fill="rgb(212,140,25)" rx="2" ry="2" />
<text  x="658.43" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="115.4" y="325" width="0.2" height="15.0" fill="rgb(236,193,50)" rx="2" ry="2" />
<text  x="118.36" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="871.0" y="517" width="0.2" height="15.0" fill="rgb(252,88,2)" rx="2" ry="2" />
<text  x="873.95" y="527.5" ></text>
</g>
<g >
<title>validation::validate_column_family (32 samples, 0.62%)</title><rect x="829.5" y="501" width="7.3" height="15.0" fill="rgb(206,119,14)" rx="2" ry="2" />
<text  x="832.50" y="511.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (4 samples, 0.08%)</title><rect x="115.1" y="565" width="0.9" height="15.0" fill="rgb(215,155,34)" rx="2" ry="2" />
<text  x="118.13" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.12%)</title><rect x="1053.3" y="405" width="1.3" height="15.0" fill="rgb(237,130,13)" rx="2" ry="2" />
<text  x="1056.26" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="114.4" y="581" width="0.3" height="15.0" fill="rgb(247,88,26)" rx="2" ry="2" />
<text  x="117.44" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="222.8" y="341" width="0.2" height="15.0" fill="rgb(232,167,19)" rx="2" ry="2" />
<text  x="225.78" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1036.1" y="341" width="0.2" height="15.0" fill="rgb(248,186,40)" rx="2" ry="2" />
<text  x="1039.09" y="351.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (5 samples, 0.10%)</title><rect x="1122.4" y="357" width="1.2" height="15.0" fill="rgb(223,102,8)" rx="2" ry="2" />
<text  x="1125.43" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="1167.8" y="341" width="0.2" height="15.0" fill="rgb(229,77,19)" rx="2" ry="2" />
<text  x="1170.78" y="351.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row_view::cells (1 samples, 0.02%)</title><rect x="644.7" y="533" width="0.2" height="15.0" fill="rgb(242,34,9)" rx="2" ry="2" />
<text  x="647.66" y="543.5" ></text>
</g>
<g >
<title>__sigsetjmp (1 samples, 0.02%)</title><rect x="19.6" y="613" width="0.2" height="15.0" fill="rgb(236,201,10)" rx="2" ry="2" />
<text  x="22.62" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1031.5" y="341" width="0.5" height="15.0" fill="rgb(237,127,29)" rx="2" ry="2" />
<text  x="1034.51" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,298 samples, 44.60%)</title><rect x="117.2" y="613" width="526.3" height="15.0" fill="rgb(223,12,40)" rx="2" ry="2" />
<text  x="120.19" y="623.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="718.6" y="517" width="0.3" height="15.0" fill="rgb(251,89,14)" rx="2" ry="2" />
<text  x="721.64" y="527.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (2 samples, 0.04%)</title><rect x="81.5" y="549" width="0.4" height="15.0" fill="rgb(214,104,15)" rx="2" ry="2" />
<text  x="84.46" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%)</title><rect x="879.4" y="581" width="0.7" height="15.0" fill="rgb(230,82,7)" rx="2" ry="2" />
<text  x="882.43" y="591.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%)</title><rect x="113.1" y="501" width="0.4" height="15.0" fill="rgb(241,184,51)" rx="2" ry="2" />
<text  x="116.07" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.12%)</title><rect x="748.0" y="485" width="1.3" height="15.0" fill="rgb(223,204,6)" rx="2" ry="2" />
<text  x="750.96" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="25.8" y="277" width="0.2" height="15.0" fill="rgb(228,36,20)" rx="2" ry="2" />
<text  x="28.80" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="466.5" y="469" width="0.2" height="15.0" fill="rgb(228,20,32)" rx="2" ry="2" />
<text  x="469.47" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="532.4" y="325" width="0.5" height="15.0" fill="rgb(210,169,23)" rx="2" ry="2" />
<text  x="535.43" y="335.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.85%)</title><rect x="1179.2" y="741" width="10.1" height="15.0" fill="rgb(234,172,41)" rx="2" ry="2" />
<text  x="1182.24" y="751.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="80.1" y="405" width="0.7" height="15.0" fill="rgb(232,199,23)" rx="2" ry="2" />
<text  x="83.09" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="43.4" y="421" width="0.3" height="15.0" fill="rgb(216,58,29)" rx="2" ry="2" />
<text  x="46.44" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="761.9" y="517" width="0.3" height="15.0" fill="rgb(207,124,24)" rx="2" ry="2" />
<text  x="764.93" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="86.3" y="485" width="0.2" height="15.0" fill="rgb(224,131,28)" rx="2" ry="2" />
<text  x="89.27" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="769.9" y="469" width="0.3" height="15.0" fill="rgb(225,214,51)" rx="2" ry="2" />
<text  x="772.95" y="479.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1121.3" y="389" width="0.2" height="15.0" fill="rgb(241,90,8)" rx="2" ry="2" />
<text  x="1124.29" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%)</title><rect x="226.7" y="341" width="0.9" height="15.0" fill="rgb(242,60,54)" rx="2" ry="2" />
<text  x="229.67" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="814.8" y="341" width="0.3" height="15.0" fill="rgb(215,139,52)" rx="2" ry="2" />
<text  x="817.84" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (7 samples, 0.14%)</title><rect x="1040.9" y="373" width="1.6" height="15.0" fill="rgb(245,166,41)" rx="2" ry="2" />
<text  x="1043.90" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="1152.0" y="565" width="0.7" height="15.0" fill="rgb(233,61,2)" rx="2" ry="2" />
<text  x="1154.98" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="873.5" y="485" width="0.2" height="15.0" fill="rgb(214,110,45)" rx="2" ry="2" />
<text  x="876.47" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="532.2" y="325" width="0.2" height="15.0" fill="rgb(208,78,11)" rx="2" ry="2" />
<text  x="535.20" y="335.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1043.0" y="389" width="0.2" height="15.0" fill="rgb(224,154,29)" rx="2" ry="2" />
<text  x="1045.96" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (2 samples, 0.04%)</title><rect x="70.9" y="485" width="0.5" height="15.0" fill="rgb(235,140,37)" rx="2" ry="2" />
<text  x="73.92" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="677.6" y="597" width="0.3" height="15.0" fill="rgb(249,157,32)" rx="2" ry="2" />
<text  x="680.64" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="44.1" y="405" width="0.3" height="15.0" fill="rgb(220,192,6)" rx="2" ry="2" />
<text  x="47.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="635.0" y="517" width="0.3" height="15.0" fill="rgb(254,106,45)" rx="2" ry="2" />
<text  x="638.04" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.9" y="277" width="0.2" height="15.0" fill="rgb(211,31,48)" rx="2" ry="2" />
<text  x="41.86" y="287.5" ></text>
</g>
<g >
<title>all (5,152 samples, 100%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(243,31,37)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="76.9" y="469" width="0.2" height="15.0" fill="rgb(250,37,8)" rx="2" ry="2" />
<text  x="79.88" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="73.2" y="437" width="0.2" height="15.0" fill="rgb(234,193,41)" rx="2" ry="2" />
<text  x="76.21" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="75.0" y="421" width="0.3" height="15.0" fill="rgb(207,206,51)" rx="2" ry="2" />
<text  x="78.05" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (13 samples, 0.25%)</title><rect x="607.8" y="517" width="3.0" height="15.0" fill="rgb(219,79,39)" rx="2" ry="2" />
<text  x="610.79" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="939.7" y="517" width="0.9" height="15.0" fill="rgb(230,43,7)" rx="2" ry="2" />
<text  x="942.66" y="527.5" ></text>
</g>
<g >
<title>main (4,724 samples, 91.69%)</title><rect x="87.2" y="725" width="1082.0" height="15.0" fill="rgb(209,70,11)" rx="2" ry="2" />
<text  x="90.19" y="735.5" >main</text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (11 samples, 0.21%)</title><rect x="483.2" y="421" width="2.5" height="15.0" fill="rgb(205,141,40)" rx="2" ry="2" />
<text  x="486.19" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%)</title><rect x="23.1" y="421" width="0.2" height="15.0" fill="rgb(239,31,14)" rx="2" ry="2" />
<text  x="26.06" y="431.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (3 samples, 0.06%)</title><rect x="592.9" y="453" width="0.7" height="15.0" fill="rgb(215,10,2)" rx="2" ry="2" />
<text  x="595.90" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="67.0" y="501" width="0.3" height="15.0" fill="rgb(253,37,20)" rx="2" ry="2" />
<text  x="70.03" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="981.1" y="453" width="0.2" height="15.0" fill="rgb(206,22,10)" rx="2" ry="2" />
<text  x="984.12" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="1034.0" y="357" width="0.3" height="15.0" fill="rgb(226,113,0)" rx="2" ry="2" />
<text  x="1037.03" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="703.1" y="565" width="0.9" height="15.0" fill="rgb(240,75,3)" rx="2" ry="2" />
<text  x="706.07" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%)</title><rect x="378.3" y="277" width="0.5" height="15.0" fill="rgb(253,53,46)" rx="2" ry="2" />
<text  x="381.29" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restrictions, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="75.5" y="437" width="0.2" height="15.0" fill="rgb(211,176,36)" rx="2" ry="2" />
<text  x="78.50" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (5 samples, 0.10%)</title><rect x="772.9" y="453" width="1.2" height="15.0" fill="rgb(206,114,12)" rx="2" ry="2" />
<text  x="775.92" y="463.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="10.9" y="677" width="0.2" height="15.0" fill="rgb(216,100,16)" rx="2" ry="2" />
<text  x="13.92" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="1125.2" y="325" width="0.2" height="15.0" fill="rgb(222,63,46)" rx="2" ry="2" />
<text  x="1128.18" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::init_scheduling_group (1 samples, 0.02%)</title><rect x="116.0" y="549" width="0.3" height="15.0" fill="rgb(221,111,40)" rx="2" ry="2" />
<text  x="119.04" y="559.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="33.4" y="357" width="0.4" height="15.0" fill="rgb(238,171,34)" rx="2" ry="2" />
<text  x="36.36" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;cql3::expr::expression, true, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="61.8" y="405" width="0.2" height="15.0" fill="rgb(214,86,26)" rx="2" ry="2" />
<text  x="64.76" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="426.4" y="261" width="2.1" height="15.0" fill="rgb(252,189,41)" rx="2" ry="2" />
<text  x="429.39" y="271.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="644.7" y="581" width="0.2" height="15.0" fill="rgb(227,189,44)" rx="2" ry="2" />
<text  x="647.66" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%)</title><rect x="661.2" y="501" width="0.4" height="15.0" fill="rgb(235,121,19)" rx="2" ry="2" />
<text  x="664.15" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="19.4" y="373" width="0.2" height="15.0" fill="rgb(245,165,21)" rx="2" ry="2" />
<text  x="22.39" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::__detail::_Node_iterator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, false, true&gt;, database::close_tables (1 samples, 0.02%)</title><rect x="112.8" y="581" width="0.3" height="15.0" fill="rgb(248,46,8)" rx="2" ry="2" />
<text  x="115.84" y="591.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (22 samples, 0.43%)</title><rect x="918.8" y="469" width="5.1" height="15.0" fill="rgb(206,60,31)" rx="2" ry="2" />
<text  x="921.82" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="489.1" y="405" width="0.3" height="15.0" fill="rgb(232,85,0)" rx="2" ry="2" />
<text  x="492.15" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="48.5" y="421" width="0.2" height="15.0" fill="rgb(231,77,29)" rx="2" ry="2" />
<text  x="51.48" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="283.7" y="309" width="0.2" height="15.0" fill="rgb(222,226,17)" rx="2" ry="2" />
<text  x="286.70" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="260.3" y="229" width="0.3" height="15.0" fill="rgb(217,88,39)" rx="2" ry="2" />
<text  x="263.34" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (18 samples, 0.35%)</title><rect x="944.7" y="517" width="4.1" height="15.0" fill="rgb(238,171,14)" rx="2" ry="2" />
<text  x="947.70" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="107.6" y="581" width="0.7" height="15.0" fill="rgb(251,186,53)" rx="2" ry="2" />
<text  x="110.57" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="823.3" y="405" width="0.5" height="15.0" fill="rgb(244,228,12)" rx="2" ry="2" />
<text  x="826.31" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="51.9" y="277" width="0.2" height="15.0" fill="rgb(241,96,3)" rx="2" ry="2" />
<text  x="54.91" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="665.7" y="565" width="0.3" height="15.0" fill="rgb(219,55,39)" rx="2" ry="2" />
<text  x="668.73" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (2 samples, 0.04%)</title><rect x="25.3" y="277" width="0.5" height="15.0" fill="rgb(225,131,21)" rx="2" ry="2" />
<text  x="28.35" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="75.5" y="405" width="0.2" height="15.0" fill="rgb(208,216,4)" rx="2" ry="2" />
<text  x="78.50" y="415.5" ></text>
</g>
<g >
<title>auth::resource::resource (5 samples, 0.10%)</title><rect x="780.3" y="485" width="1.1" height="15.0" fill="rgb(247,82,9)" rx="2" ry="2" />
<text  x="783.25" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1154.3" y="469" width="0.2" height="15.0" fill="rgb(228,170,23)" rx="2" ry="2" />
<text  x="1157.27" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="53" width="0.3" height="15.0" fill="rgb(216,121,8)" rx="2" ry="2" />
<text  x="56.75" y="63.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%)</title><rect x="1166.9" y="581" width="0.2" height="15.0" fill="rgb(229,47,1)" rx="2" ry="2" />
<text  x="1169.87" y="591.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (2 samples, 0.04%)</title><rect x="286.9" y="357" width="0.5" height="15.0" fill="rgb(221,129,52)" rx="2" ry="2" />
<text  x="289.91" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1130.5" y="357" width="0.2" height="15.0" fill="rgb(213,118,41)" rx="2" ry="2" />
<text  x="1133.45" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="610.1" y="501" width="0.2" height="15.0" fill="rgb(214,173,37)" rx="2" ry="2" />
<text  x="613.08" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="520.3" y="437" width="0.2" height="15.0" fill="rgb(210,4,7)" rx="2" ry="2" />
<text  x="523.30" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (1 samples, 0.02%)</title><rect x="1031.0" y="341" width="0.3" height="15.0" fill="rgb(205,191,41)" rx="2" ry="2" />
<text  x="1034.05" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%)</title><rect x="115.4" y="453" width="0.2" height="15.0" fill="rgb(232,211,27)" rx="2" ry="2" />
<text  x="118.36" y="463.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (121 samples, 2.35%)</title><rect x="384.0" y="293" width="27.7" height="15.0" fill="rgb(236,156,34)" rx="2" ry="2" />
<text  x="387.02" y="303.5" >w..</text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="116.0" y="405" width="0.3" height="15.0" fill="rgb(224,205,27)" rx="2" ry="2" />
<text  x="119.04" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.0" y="421" width="0.2" height="15.0" fill="rgb(228,190,23)" rx="2" ry="2" />
<text  x="64.99" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (122 samples, 2.37%)</title><rect x="573.4" y="517" width="28.0" height="15.0" fill="rgb(205,94,49)" rx="2" ry="2" />
<text  x="576.43" y="527.5" >f..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="61.1" y="261" width="0.2" height="15.0" fill="rgb(237,171,10)" rx="2" ry="2" />
<text  x="64.08" y="271.5" ></text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%)</title><rect x="18.0" y="677" width="0.2" height="15.0" fill="rgb(244,22,43)" rx="2" ry="2" />
<text  x="21.02" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%)</title><rect x="841.2" y="501" width="1.4" height="15.0" fill="rgb(245,99,24)" rx="2" ry="2" />
<text  x="844.18" y="511.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="115.1" y="485" width="0.3" height="15.0" fill="rgb(207,10,54)" rx="2" ry="2" />
<text  x="118.13" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="720.2" y="597" width="0.5" height="15.0" fill="rgb(230,132,28)" rx="2" ry="2" />
<text  x="723.24" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="51.7" y="357" width="0.4" height="15.0" fill="rgb(244,196,7)" rx="2" ry="2" />
<text  x="54.68" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="841.9" y="485" width="0.4" height="15.0" fill="rgb(243,155,34)" rx="2" ry="2" />
<text  x="844.86" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::vformat_to&lt;char&gt; (1 samples, 0.02%)</title><rect x="83.3" y="725" width="0.2" height="15.0" fill="rgb(218,30,41)" rx="2" ry="2" />
<text  x="86.29" y="735.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (164 samples, 3.18%)</title><rect x="787.1" y="469" width="37.6" height="15.0" fill="rgb(250,67,30)" rx="2" ry="2" />
<text  x="790.12" y="479.5" >ser..</text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="322.6" y="405" width="0.3" height="15.0" fill="rgb(253,134,12)" rx="2" ry="2" />
<text  x="325.64" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (1 samples, 0.02%)</title><rect x="239.5" y="213" width="0.2" height="15.0" fill="rgb(245,37,50)" rx="2" ry="2" />
<text  x="242.50" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="139.4" y="517" width="0.2" height="15.0" fill="rgb(206,212,32)" rx="2" ry="2" />
<text  x="142.41" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1154.7" y="533" width="1.4" height="15.0" fill="rgb(218,77,11)" rx="2" ry="2" />
<text  x="1157.73" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="227.4" y="325" width="0.2" height="15.0" fill="rgb(205,196,37)" rx="2" ry="2" />
<text  x="230.36" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%)</title><rect x="696.7" y="581" width="0.2" height="15.0" fill="rgb(216,137,18)" rx="2" ry="2" />
<text  x="699.65" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1139.8" y="613" width="0.3" height="15.0" fill="rgb(244,142,30)" rx="2" ry="2" />
<text  x="1142.84" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (220 samples, 4.27%)</title><rect x="227.8" y="325" width="50.4" height="15.0" fill="rgb(230,142,21)" rx="2" ry="2" />
<text  x="230.81" y="335.5" >logal..</text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_text[abi:cxx11] (1 samples, 0.02%)</title><rect x="30.6" y="373" width="0.2" height="15.0" fill="rgb(236,9,1)" rx="2" ry="2" />
<text  x="33.61" y="383.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="54.2" y="277" width="0.2" height="15.0" fill="rgb(243,187,31)" rx="2" ry="2" />
<text  x="57.20" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.10%)</title><rect x="812.5" y="229" width="1.2" height="15.0" fill="rgb(231,4,9)" rx="2" ry="2" />
<text  x="815.55" y="239.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (9 samples, 0.17%)</title><rect x="409.7" y="277" width="2.0" height="15.0" fill="rgb(243,9,41)" rx="2" ry="2" />
<text  x="412.67" y="287.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (4 samples, 0.08%)</title><rect x="1116.7" y="501" width="0.9" height="15.0" fill="rgb(232,159,39)" rx="2" ry="2" />
<text  x="1119.71" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="322.2" y="405" width="0.4" height="15.0" fill="rgb(212,45,19)" rx="2" ry="2" />
<text  x="325.18" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (3 samples, 0.06%)</title><rect x="925.5" y="485" width="0.6" height="15.0" fill="rgb(254,3,31)" rx="2" ry="2" />
<text  x="928.46" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="48.0" y="245" width="0.2" height="15.0" fill="rgb(237,147,15)" rx="2" ry="2" />
<text  x="51.02" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (20 samples, 0.39%)</title><rect x="1133.4" y="389" width="4.6" height="15.0" fill="rgb(218,154,50)" rx="2" ry="2" />
<text  x="1136.43" y="399.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,753 samples, 34.03%)</title><rect x="171.5" y="549" width="401.5" height="15.0" fill="rgb(248,11,43)" rx="2" ry="2" />
<text  x="174.47" y="559.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%)</title><rect x="838.0" y="533" width="0.7" height="15.0" fill="rgb(228,139,38)" rx="2" ry="2" />
<text  x="840.97" y="543.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="295.4" y="293" width="0.9" height="15.0" fill="rgb(213,202,46)" rx="2" ry="2" />
<text  x="298.38" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (6 samples, 0.12%)</title><rect x="352.0" y="341" width="1.3" height="15.0" fill="rgb(226,172,28)" rx="2" ry="2" />
<text  x="354.95" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="139.6" y="501" width="0.3" height="15.0" fill="rgb(224,198,1)" rx="2" ry="2" />
<text  x="142.64" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (13 samples, 0.25%)</title><rect x="824.7" y="469" width="3.0" height="15.0" fill="rgb(230,195,10)" rx="2" ry="2" />
<text  x="827.69" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="30.2" y="325" width="0.2" height="15.0" fill="rgb(213,203,44)" rx="2" ry="2" />
<text  x="33.16" y="335.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="459.1" y="485" width="0.5" height="15.0" fill="rgb(250,209,24)" rx="2" ry="2" />
<text  x="462.14" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="10.9" y="693" width="0.2" height="15.0" fill="rgb(238,47,46)" rx="2" ry="2" />
<text  x="13.92" y="703.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.1" y="357" width="0.2" height="15.0" fill="rgb(234,226,11)" rx="2" ry="2" />
<text  x="83.09" y="367.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%)</title><rect x="721.8" y="549" width="0.3" height="15.0" fill="rgb(206,45,40)" rx="2" ry="2" />
<text  x="724.85" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="68.4" y="549" width="0.2" height="15.0" fill="rgb(210,175,2)" rx="2" ry="2" />
<text  x="71.40" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="312.6" y="437" width="0.2" height="15.0" fill="rgb(233,119,53)" rx="2" ry="2" />
<text  x="315.56" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (1 samples, 0.02%)</title><rect x="1162.5" y="581" width="0.2" height="15.0" fill="rgb(245,105,30)" rx="2" ry="2" />
<text  x="1165.52" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (91 samples, 1.77%)</title><rect x="913.1" y="517" width="20.8" height="15.0" fill="rgb(230,19,14)" rx="2" ry="2" />
<text  x="916.09" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,723 samples, 91.67%)</title><rect x="87.2" y="661" width="1081.7" height="15.0" fill="rgb(236,95,49)" rx="2" ry="2" />
<text  x="90.19" y="671.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (5 samples, 0.10%)</title><rect x="62.2" y="469" width="1.2" height="15.0" fill="rgb(207,111,37)" rx="2" ry="2" />
<text  x="65.22" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="464.0" y="517" width="0.2" height="15.0" fill="rgb(213,133,13)" rx="2" ry="2" />
<text  x="466.95" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="712.5" y="565" width="0.2" height="15.0" fill="rgb(224,122,25)" rx="2" ry="2" />
<text  x="715.46" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (22 samples, 0.43%)</title><rect x="856.8" y="533" width="5.0" height="15.0" fill="rgb(218,77,39)" rx="2" ry="2" />
<text  x="859.75" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="59.2" y="309" width="0.3" height="15.0" fill="rgb(228,71,43)" rx="2" ry="2" />
<text  x="62.24" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (7 samples, 0.14%)</title><rect x="658.9" y="549" width="1.6" height="15.0" fill="rgb(229,178,29)" rx="2" ry="2" />
<text  x="661.86" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="1149.2" y="549" width="2.6" height="15.0" fill="rgb(250,202,20)" rx="2" ry="2" />
<text  x="1152.23" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="46.4" y="325" width="0.5" height="15.0" fill="rgb(216,195,23)" rx="2" ry="2" />
<text  x="49.42" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%)</title><rect x="523.7" y="421" width="0.5" height="15.0" fill="rgb(245,172,4)" rx="2" ry="2" />
<text  x="526.73" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.16%)</title><rect x="217.0" y="309" width="1.9" height="15.0" fill="rgb(247,219,52)" rx="2" ry="2" />
<text  x="220.05" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (4 samples, 0.08%)</title><rect x="58.6" y="437" width="0.9" height="15.0" fill="rgb(236,217,17)" rx="2" ry="2" />
<text  x="61.56" y="447.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="18.0" y="645" width="0.2" height="15.0" fill="rgb(214,156,32)" rx="2" ry="2" />
<text  x="21.02" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="54.9" y="245" width="0.7" height="15.0" fill="rgb(232,15,0)" rx="2" ry="2" />
<text  x="57.89" y="255.5" ></text>
</g>
<g >
<title>fmt::v7::formatter&lt;fmt::v7::basic_string_view&lt;char&gt;, char, void&gt;::format&lt;fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (1 samples, 0.02%)</title><rect x="10.9" y="661" width="0.2" height="15.0" fill="rgb(251,145,13)" rx="2" ry="2" />
<text  x="13.92" y="671.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="341" width="0.5" height="15.0" fill="rgb(237,47,30)" rx="2" ry="2" />
<text  x="52.62" y="351.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (4 samples, 0.08%)</title><rect x="1131.4" y="357" width="0.9" height="15.0" fill="rgb(226,157,49)" rx="2" ry="2" />
<text  x="1134.37" y="367.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (4 samples, 0.08%)</title><rect x="363.2" y="277" width="0.9" height="15.0" fill="rgb(244,138,18)" rx="2" ry="2" />
<text  x="366.18" y="287.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (29 samples, 0.56%)</title><rect x="322.9" y="421" width="6.6" height="15.0" fill="rgb(251,160,20)" rx="2" ry="2" />
<text  x="325.86" y="431.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.25%)</title><rect x="1133.9" y="325" width="3.0" height="15.0" fill="rgb(210,8,27)" rx="2" ry="2" />
<text  x="1136.89" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="925.9" y="453" width="0.2" height="15.0" fill="rgb(240,196,4)" rx="2" ry="2" />
<text  x="928.92" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (2 samples, 0.04%)</title><rect x="370.3" y="293" width="0.4" height="15.0" fill="rgb(207,104,39)" rx="2" ry="2" />
<text  x="373.28" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="817.8" y="341" width="0.2" height="15.0" fill="rgb(228,160,11)" rx="2" ry="2" />
<text  x="820.81" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (1 samples, 0.02%)</title><rect x="86.3" y="517" width="0.2" height="15.0" fill="rgb(223,122,49)" rx="2" ry="2" />
<text  x="89.27" y="527.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="622.2" y="549" width="0.2" height="15.0" fill="rgb(250,76,9)" rx="2" ry="2" />
<text  x="625.22" y="559.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="1121.5" y="373" width="0.2" height="15.0" fill="rgb(213,139,2)" rx="2" ry="2" />
<text  x="1124.52" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (126 samples, 2.45%)</title><rect x="234.0" y="245" width="28.9" height="15.0" fill="rgb(222,144,19)" rx="2" ry="2" />
<text  x="237.00" y="255.5" >co..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="53.3" y="341" width="0.2" height="15.0" fill="rgb(234,134,4)" rx="2" ry="2" />
<text  x="56.29" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="694.4" y="565" width="0.2" height="15.0" fill="rgb(249,133,41)" rx="2" ry="2" />
<text  x="697.36" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="911.5" y="469" width="0.2" height="15.0" fill="rgb(244,74,8)" rx="2" ry="2" />
<text  x="914.49" y="479.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="84.9" y="421" width="0.2" height="15.0" fill="rgb(210,142,41)" rx="2" ry="2" />
<text  x="87.90" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="23.7" y="389" width="0.3" height="15.0" fill="rgb(226,121,31)" rx="2" ry="2" />
<text  x="26.74" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="677" width="0.3" height="15.0" fill="rgb(213,175,45)" rx="2" ry="2" />
<text  x="86.52" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.08%)</title><rect x="133.9" y="517" width="0.9" height="15.0" fill="rgb(228,127,7)" rx="2" ry="2" />
<text  x="136.91" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%)</title><rect x="165.3" y="533" width="0.7" height="15.0" fill="rgb(210,55,38)" rx="2" ry="2" />
<text  x="168.29" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (8 samples, 0.16%)</title><rect x="210.2" y="373" width="1.8" height="15.0" fill="rgb(235,13,33)" rx="2" ry="2" />
<text  x="213.18" y="383.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (3 samples, 0.06%)</title><rect x="1140.3" y="613" width="0.7" height="15.0" fill="rgb(217,125,30)" rx="2" ry="2" />
<text  x="1143.30" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (15 samples, 0.29%)</title><rect x="873.7" y="485" width="3.4" height="15.0" fill="rgb(223,140,29)" rx="2" ry="2" />
<text  x="876.70" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="524.2" y="421" width="0.2" height="15.0" fill="rgb(216,88,17)" rx="2" ry="2" />
<text  x="527.19" y="431.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="297.9" y="325" width="0.2" height="15.0" fill="rgb(229,106,50)" rx="2" ry="2" />
<text  x="300.90" y="335.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (7 samples, 0.14%)</title><rect x="931.0" y="453" width="1.6" height="15.0" fill="rgb(242,157,12)" rx="2" ry="2" />
<text  x="933.96" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="18.5" y="597" width="0.2" height="15.0" fill="rgb(231,167,29)" rx="2" ry="2" />
<text  x="21.47" y="607.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%)</title><rect x="652.7" y="485" width="0.2" height="15.0" fill="rgb(233,35,11)" rx="2" ry="2" />
<text  x="655.68" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="837.3" y="517" width="0.4" height="15.0" fill="rgb(209,198,53)" rx="2" ry="2" />
<text  x="840.28" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="535.9" y="357" width="0.2" height="15.0" fill="rgb(241,180,3)" rx="2" ry="2" />
<text  x="538.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="904.2" y="421" width="0.2" height="15.0" fill="rgb(220,93,10)" rx="2" ry="2" />
<text  x="907.16" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="114.0" y="197" width="0.2" height="15.0" fill="rgb(254,185,27)" rx="2" ry="2" />
<text  x="116.98" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.12%)</title><rect x="204.7" y="373" width="1.4" height="15.0" fill="rgb(240,42,37)" rx="2" ry="2" />
<text  x="207.68" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%)</title><rect x="59.9" y="437" width="1.4" height="15.0" fill="rgb(218,37,52)" rx="2" ry="2" />
<text  x="62.93" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="631.8" y="501" width="0.3" height="15.0" fill="rgb(219,169,19)" rx="2" ry="2" />
<text  x="634.84" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.14%)</title><rect x="232.4" y="245" width="1.6" height="15.0" fill="rgb(208,59,32)" rx="2" ry="2" />
<text  x="235.40" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="721.6" y="581" width="0.2" height="15.0" fill="rgb(232,173,29)" rx="2" ry="2" />
<text  x="724.62" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1133.9" y="277" width="0.2" height="15.0" fill="rgb(236,107,41)" rx="2" ry="2" />
<text  x="1136.89" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (606 samples, 11.76%)</title><rect x="956.8" y="517" width="138.8" height="15.0" fill="rgb(212,67,36)" rx="2" ry="2" />
<text  x="959.84" y="527.5" >service::storage_..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="38.4" y="469" width="0.2" height="15.0" fill="rgb(247,208,18)" rx="2" ry="2" />
<text  x="41.40" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (267 samples, 5.18%)</title><rect x="21.2" y="613" width="61.2" height="15.0" fill="rgb(221,132,20)" rx="2" ry="2" />
<text  x="24.22" y="623.5" >cql3::..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="685.4" y="597" width="0.3" height="15.0" fill="rgb(226,119,27)" rx="2" ry="2" />
<text  x="688.43" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::detach_service_level_statement&gt;, void&gt; (2 samples, 0.04%)</title><rect x="64.1" y="485" width="0.4" height="15.0" fill="rgb(248,43,54)" rx="2" ry="2" />
<text  x="67.05" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1163.9" y="581" width="0.2" height="15.0" fill="rgb(239,151,46)" rx="2" ry="2" />
<text  x="1166.89" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="847.8" y="517" width="1.6" height="15.0" fill="rgb(222,152,51)" rx="2" ry="2" />
<text  x="850.82" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%)</title><rect x="953.4" y="517" width="0.2" height="15.0" fill="rgb(217,40,31)" rx="2" ry="2" />
<text  x="956.40" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="22.8" y="421" width="0.3" height="15.0" fill="rgb(213,17,9)" rx="2" ry="2" />
<text  x="25.83" y="431.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="73.9" y="405" width="0.2" height="15.0" fill="rgb(223,67,48)" rx="2" ry="2" />
<text  x="76.90" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.5" y="533" width="0.2" height="15.0" fill="rgb(246,228,20)" rx="2" ry="2" />
<text  x="13.46" y="543.5" ></text>
</g>
</g>
</svg>
